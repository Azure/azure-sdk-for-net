// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Microsoft.StorageDiscovery;

namespace Microsoft.StorageDiscovery.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableMicrosoftStorageDiscoveryResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableMicrosoftStorageDiscoveryResourceGroupResource for mocking. </summary>
        protected MockableMicrosoftStorageDiscoveryResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMicrosoftStorageDiscoveryResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMicrosoftStorageDiscoveryResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of StorageDiscoveryWorkspaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of StorageDiscoveryWorkspaces and their operations over a StorageDiscoveryWorkspaceResource. </returns>
        public virtual StorageDiscoveryWorkspaceCollection GetStorageDiscoveryWorkspaces()
        {
            return GetCachedClient(client => new StorageDiscoveryWorkspaceCollection(client, Id));
        }

        /// <summary> Get a StorageDiscoveryWorkspace. </summary>
        /// <param name="storageDiscoveryWorkspaceName"> The name of the StorageDiscoveryWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageDiscoveryWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageDiscoveryWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<StorageDiscoveryWorkspaceResource>> GetStorageDiscoveryWorkspaceAsync(string storageDiscoveryWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(storageDiscoveryWorkspaceName, nameof(storageDiscoveryWorkspaceName));

            return await GetStorageDiscoveryWorkspaces().GetAsync(storageDiscoveryWorkspaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a StorageDiscoveryWorkspace. </summary>
        /// <param name="storageDiscoveryWorkspaceName"> The name of the StorageDiscoveryWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageDiscoveryWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageDiscoveryWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<StorageDiscoveryWorkspaceResource> GetStorageDiscoveryWorkspace(string storageDiscoveryWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(storageDiscoveryWorkspaceName, nameof(storageDiscoveryWorkspaceName));

            return GetStorageDiscoveryWorkspaces().Get(storageDiscoveryWorkspaceName, cancellationToken);
        }
    }
}
