// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Microsoft.StorageDiscovery.Mocking;

namespace Microsoft.StorageDiscovery
{
    /// <summary> A class to add extension methods to Microsoft.StorageDiscovery. </summary>
    public static partial class MicrosoftStorageDiscoveryExtensions
    {
        /// <param name="client"></param>
        private static MockableMicrosoftStorageDiscoveryArmClient GetMockableMicrosoftStorageDiscoveryArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableMicrosoftStorageDiscoveryArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockableMicrosoftStorageDiscoveryResourceGroupResource GetMockableMicrosoftStorageDiscoveryResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableMicrosoftStorageDiscoveryResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockableMicrosoftStorageDiscoverySubscriptionResource GetMockableMicrosoftStorageDiscoverySubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockableMicrosoftStorageDiscoverySubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="StorageDiscoveryWorkspaceResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="StorageDiscoveryWorkspaceResource"/> object. </returns>
        public static StorageDiscoveryWorkspaceResource GetStorageDiscoveryWorkspaceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableMicrosoftStorageDiscoveryArmClient(client).GetStorageDiscoveryWorkspaceResource(id);
        }

        /// <summary> Gets a collection of StorageDiscoveryWorkspaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of StorageDiscoveryWorkspaces and their operations over a StorageDiscoveryWorkspaceResource. </returns>
        public static StorageDiscoveryWorkspaceCollection GetStorageDiscoveryWorkspaces(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableMicrosoftStorageDiscoveryResourceGroupResource(resourceGroupResource).GetStorageDiscoveryWorkspaces();
        }

        /// <summary> Get a StorageDiscoveryWorkspace. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="storageDiscoveryWorkspaceName"> The name of the StorageDiscoveryWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<StorageDiscoveryWorkspaceResource>> GetStorageDiscoveryWorkspaceAsync(this ResourceGroupResource resourceGroupResource, string storageDiscoveryWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableMicrosoftStorageDiscoveryResourceGroupResource(resourceGroupResource).GetStorageDiscoveryWorkspaceAsync(storageDiscoveryWorkspaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a StorageDiscoveryWorkspace. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="storageDiscoveryWorkspaceName"> The name of the StorageDiscoveryWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<StorageDiscoveryWorkspaceResource> GetStorageDiscoveryWorkspace(this ResourceGroupResource resourceGroupResource, string storageDiscoveryWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableMicrosoftStorageDiscoveryResourceGroupResource(resourceGroupResource).GetStorageDiscoveryWorkspace(storageDiscoveryWorkspaceName, cancellationToken);
        }

        /// <summary> List StorageDiscoveryWorkspace resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="StorageDiscoveryWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<StorageDiscoveryWorkspaceResource> GetStorageDiscoveryWorkspacesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableMicrosoftStorageDiscoverySubscriptionResource(subscriptionResource).GetStorageDiscoveryWorkspacesAsync(cancellationToken);
        }

        /// <summary> List StorageDiscoveryWorkspace resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="StorageDiscoveryWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<StorageDiscoveryWorkspaceResource> GetStorageDiscoveryWorkspaces(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableMicrosoftStorageDiscoverySubscriptionResource(subscriptionResource).GetStorageDiscoveryWorkspaces(cancellationToken);
        }
    }
}
