// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.Core;

namespace Azure.Monitor.Ingestion
{
    /// <summary></summary>
    public partial class LogsIngestionClient
    {
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateUploadRequest(string ruleId, string streamName, RequestContent content, string contentEncoding, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/dataCollectionRules/", false);
            uri.AppendPath(ruleId, true);
            uri.AppendPath("/streams/", false);
            uri.AppendPath(streamName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            if (contentEncoding != null)
            {
                request.Headers.SetValue("Content-Encoding", contentEncoding);
            }
            request.Headers.SetValue("Content-Type", "application/json");
            request.Content = content;
            return message;
        }
    }
}
