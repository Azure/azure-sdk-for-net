// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Azure App Configuration REST API. </summary>
    public partial class AzureAppConfigurationClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationHeader = "Connection String";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://azconfig.io/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of AzureAppConfigurationClient for mocking. </summary>
        protected AzureAppConfigurationClient()
        {
        }

        /// <summary> Initializes a new instance of AzureAppConfigurationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AzureAppConfigurationClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new AzureAppConfigurationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AzureAppConfigurationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AzureAppConfigurationClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new AzureAppConfigurationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AzureAppConfigurationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AzureAppConfigurationClient(Uri endpoint, AzureKeyCredential credential, AzureAppConfigurationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new AzureAppConfigurationClientOptions();

            _endpoint = endpoint;
            _keyCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> Initializes a new instance of AzureAppConfigurationClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public AzureAppConfigurationClient(Uri endpoint, TokenCredential credential, AzureAppConfigurationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new AzureAppConfigurationClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Gets a list of keys.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetKeys(string name, string after, string syncToken, string acceptDatetime, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetKeys");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetKeysCollectionResult(
                    this,
                    name,
                    after,
                    syncToken,
                    acceptDatetime,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of keys.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetKeysAsync(string name, string after, string syncToken, string acceptDatetime, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetKeys");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetKeysAsyncCollectionResult(
                    this,
                    name,
                    after,
                    syncToken,
                    acceptDatetime,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of keys. </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<Key> GetKeys(string name = default, string after = default, string syncToken = default, string acceptDatetime = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetKeysCollectionResultOfT(
                this,
                name,
                after,
                syncToken,
                acceptDatetime,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of keys. </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<Key> GetKeysAsync(string name = default, string after = default, string syncToken = default, string acceptDatetime = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetKeysAsyncCollectionResultOfT(
                this,
                name,
                after,
                syncToken,
                acceptDatetime,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckKeys(string name, string after, string syncToken, string acceptDatetime, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckKeysRequest(name, after, syncToken, acceptDatetime, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckKeysAsync(string name, string after, string syncToken, string acceptDatetime, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckKeysRequest(name, after, syncToken, acceptDatetime, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckKeys(string name = default, string after = default, string syncToken = default, string acceptDatetime = default, CancellationToken cancellationToken = default)
        {
            return CheckKeys(name, after, syncToken, acceptDatetime, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter for the name of the returned keys. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckKeysAsync(string name = default, string after = default, string syncToken = default, string acceptDatetime = default, CancellationToken cancellationToken = default)
        {
            return await CheckKeysAsync(name, after, syncToken, acceptDatetime, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-values.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetConfigurationSettings(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, string snapshot, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetConfigurationSettings");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetConfigurationSettingsCollectionResult(
                    this,
                    key,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    snapshot,
                    matchConditions,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-values.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetConfigurationSettingsAsync(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, string snapshot, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetConfigurationSettings");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetConfigurationSettingsAsyncCollectionResult(
                    this,
                    key,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    snapshot,
                    matchConditions,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of key-values. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<KeyValue> GetConfigurationSettings(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, string snapshot = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetConfigurationSettingsCollectionResultOfT(
                this,
                key,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                snapshot,
                matchConditions,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of key-values. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<KeyValue> GetConfigurationSettingsAsync(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, string snapshot = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetConfigurationSettingsAsyncCollectionResultOfT(
                this,
                key,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                snapshot,
                matchConditions,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckKeyValues(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, string snapshot, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeyValues");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckKeyValuesRequest(key, label, syncToken, after, acceptDatetime, @select, snapshot, matchConditions, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckKeyValuesAsync(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, string snapshot, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeyValues");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckKeyValuesRequest(key, label, syncToken, after, acceptDatetime, @select, snapshot, matchConditions, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckKeyValues(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, string snapshot = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return CheckKeyValues(key, label, syncToken, after, acceptDatetime, @select, snapshot, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="snapshot">
        /// A filter used get key-values for a snapshot. The value should be the name of
        /// the snapshot. Not valid when used with 'key' and 'label' filters.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckKeyValuesAsync(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, string snapshot = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return await CheckKeyValuesAsync(key, label, syncToken, after, acceptDatetime, @select, snapshot, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a single key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetConfigurationSetting(string key, string label, IEnumerable<KeyValueFields> @select, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetConfigurationSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConfigurationSettingRequest(key, label, @select, syncToken, acceptDatetime, matchConditions, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a single key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetConfigurationSettingAsync(string key, string label, IEnumerable<KeyValueFields> @select, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetConfigurationSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConfigurationSettingRequest(key, label, @select, syncToken, acceptDatetime, matchConditions, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a single key-value. </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<KeyValue> GetConfigurationSetting(string key, string label = default, IEnumerable<KeyValueFields> @select = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Response result = GetConfigurationSetting(key, label, @select, syncToken, acceptDatetime, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary> Gets a single key-value. </summary>
        /// <param name="key"> The key of the key-value. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<KeyValue>> GetConfigurationSettingAsync(string key, string label = default, IEnumerable<KeyValueFields> @select = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Response result = await GetConfigurationSettingAsync(key, label, @select, syncToken, acceptDatetime, matchConditions, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary>
        /// [Protocol Method] Creates a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="label"> The label of the key-value to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response SetConfigurationSettingInternal(string key, string contentType, RequestContent content = null, string label = default, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.SetConfigurationSettingInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetConfigurationSettingInternalRequest(key, contentType, content, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="label"> The label of the key-value to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> SetConfigurationSettingInternalAsync(string key, string contentType, RequestContent content = null, string label = default, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.SetConfigurationSettingInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetConfigurationSettingInternalRequest(key, contentType, content, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a key-value. </summary>
        /// <param name="key"> The key of the key-value to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="entity"> The key-value to create. </param>
        /// <param name="label"> The label of the key-value to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<KeyValue> SetConfigurationSettingInternal(string key, PutKeyValueRequestContentType contentType, KeyValue entity = default, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = SetConfigurationSettingInternal(key, contentType.ToSerialString(), entity, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary> Creates a key-value. </summary>
        /// <param name="key"> The key of the key-value to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="entity"> The key-value to create. </param>
        /// <param name="label"> The label of the key-value to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<KeyValue>> SetConfigurationSettingInternalAsync(string key, PutKeyValueRequestContentType contentType, KeyValue entity = default, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = await SetConfigurationSettingInternalAsync(key, contentType.ToSerialString(), entity, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary>
        /// [Protocol Method] Deletes a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to delete. </param>
        /// <param name="label"> The label of the key-value to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response DeleteConfigurationSetting(string key, string label, string syncToken, ETag? ifMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.DeleteConfigurationSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConfigurationSettingRequest(key, label, syncToken, ifMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to delete. </param>
        /// <param name="label"> The label of the key-value to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> DeleteConfigurationSettingAsync(string key, string label, string syncToken, ETag? ifMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.DeleteConfigurationSetting");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteConfigurationSettingRequest(key, label, syncToken, ifMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a key-value. </summary>
        /// <param name="key"> The key of the key-value to delete. </param>
        /// <param name="label"> The label of the key-value to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<KeyValue> DeleteConfigurationSetting(string key, string label = default, string syncToken = default, ETag? ifMatch = default, CancellationToken cancellationToken = default)
        {
            Response result = DeleteConfigurationSetting(key, label, syncToken, ifMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary> Deletes a key-value. </summary>
        /// <param name="key"> The key of the key-value to delete. </param>
        /// <param name="label"> The label of the key-value to delete. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="ifMatch">
        /// Used to perform an operation only if the targeted resource's etag matches the
        /// value provided.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<KeyValue>> DeleteConfigurationSettingAsync(string key, string label = default, string syncToken = default, ETag? ifMatch = default, CancellationToken cancellationToken = default)
        {
            Response result = await DeleteConfigurationSettingAsync(key, label, syncToken, ifMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to retrieve. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckKeyValue(string key, string label, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<KeyValueFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeyValue");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(key, nameof(key));

                using HttpMessage message = CreateCheckKeyValueRequest(key, label, syncToken, acceptDatetime, matchConditions, @select, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to retrieve. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckKeyValueAsync(string key, string label, string syncToken, string acceptDatetime, MatchConditions matchConditions, IEnumerable<KeyValueFields> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckKeyValue");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(key, nameof(key));

                using HttpMessage message = CreateCheckKeyValueRequest(key, label, syncToken, acceptDatetime, matchConditions, @select, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key"> The key of the key-value to retrieve. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckKeyValue(string key, string label = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<KeyValueFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(key, nameof(key));

            return CheckKeyValue(key, label, syncToken, acceptDatetime, matchConditions, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key"> The key of the key-value to retrieve. </param>
        /// <param name="label"> The label of the key-value to retrieve. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/keyvaluefiltering
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="key"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckKeyValueAsync(string key, string label = default, string syncToken = default, string acceptDatetime = default, MatchConditions matchConditions = default, IEnumerable<KeyValueFields> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(key, nameof(key));

            return await CheckKeyValueAsync(key, label, syncToken, acceptDatetime, matchConditions, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-value snapshots.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned snapshots. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="status"> Used to filter returned snapshots by their status property. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetSnapshots(string name, string after, IEnumerable<SnapshotFields> @select, IEnumerable<SnapshotStatus> status, string syncToken, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetSnapshots");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetSnapshotsCollectionResult(
                    this,
                    name,
                    after,
                    @select,
                    status,
                    syncToken,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-value snapshots.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned snapshots. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="status"> Used to filter returned snapshots by their status property. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetSnapshotsAsync(string name, string after, IEnumerable<SnapshotFields> @select, IEnumerable<SnapshotStatus> status, string syncToken, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetSnapshots");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetSnapshotsAsyncCollectionResult(
                    this,
                    name,
                    after,
                    @select,
                    status,
                    syncToken,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of key-value snapshots. </summary>
        /// <param name="name"> A filter for the name of the returned snapshots. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="status"> Used to filter returned snapshots by their status property. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<Snapshot> GetSnapshots(string name = default, string after = default, IEnumerable<SnapshotFields> @select = default, IEnumerable<SnapshotStatus> status = default, string syncToken = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetSnapshotsCollectionResultOfT(
                this,
                name,
                after,
                @select,
                status,
                syncToken,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of key-value snapshots. </summary>
        /// <param name="name"> A filter for the name of the returned snapshots. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="status"> Used to filter returned snapshots by their status property. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<Snapshot> GetSnapshotsAsync(string name = default, string after = default, IEnumerable<SnapshotFields> @select = default, IEnumerable<SnapshotStatus> status = default, string syncToken = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetSnapshotsAsyncCollectionResultOfT(
                this,
                name,
                after,
                @select,
                status,
                syncToken,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckSnapshots(string syncToken, string after, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckSnapshots");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckSnapshotsRequest(syncToken, after, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckSnapshotsAsync(string syncToken, string after, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckSnapshots");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckSnapshotsRequest(syncToken, after, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckSnapshots(string syncToken = default, string after = default, CancellationToken cancellationToken = default)
        {
            return CheckSnapshots(syncToken, after, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckSnapshotsAsync(string syncToken = default, string after = default, CancellationToken cancellationToken = default)
        {
            return await CheckSnapshotsAsync(syncToken, after, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a single key-value snapshot.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetSnapshot(string name, IEnumerable<SnapshotFields> @select, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSnapshotRequest(name, @select, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a single key-value snapshot.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetSnapshotAsync(string name, IEnumerable<SnapshotFields> @select, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSnapshotRequest(name, @select, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a single key-value snapshot. </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<Snapshot> GetSnapshot(string name, IEnumerable<SnapshotFields> @select = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = GetSnapshot(name, @select, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((Snapshot)result, result);
        }

        /// <summary> Gets a single key-value snapshot. </summary>
        /// <param name="name"> The name of the snapshot. </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<Snapshot>> GetSnapshotAsync(string name, IEnumerable<SnapshotFields> @select = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = await GetSnapshotAsync(name, @select, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((Snapshot)result, result);
        }

        /// <summary>
        /// [Protocol Method] Gets the state of a long running operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="snapshot"> Snapshot identifier for the long running operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="snapshot"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="snapshot"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetOperationDetails(string snapshot, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetOperationDetails");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(snapshot, nameof(snapshot));

                using HttpMessage message = CreateGetOperationDetailsRequest(snapshot, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the state of a long running operation.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="snapshot"> Snapshot identifier for the long running operation. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="snapshot"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="snapshot"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetOperationDetailsAsync(string snapshot, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetOperationDetails");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(snapshot, nameof(snapshot));

                using HttpMessage message = CreateGetOperationDetailsRequest(snapshot, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the state of a long running operation. </summary>
        /// <param name="snapshot"> Snapshot identifier for the long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="snapshot"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="snapshot"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<OperationDetails> GetOperationDetails(string snapshot, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(snapshot, nameof(snapshot));

            Response result = GetOperationDetails(snapshot, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((OperationDetails)result, result);
        }

        /// <summary> Gets the state of a long running operation. </summary>
        /// <param name="snapshot"> Snapshot identifier for the long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="snapshot"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="snapshot"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<OperationDetails>> GetOperationDetailsAsync(string snapshot, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(snapshot, nameof(snapshot));

            Response result = await GetOperationDetailsAsync(snapshot, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((OperationDetails)result, result);
        }

        /// <summary> Creates a key-value snapshot. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="name"> The name of the key-value snapshot to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        internal virtual Operation<BinaryData> CreateSnapshot(WaitUntil waitUntil, string name, string contentType, RequestContent content, string syncToken = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CreateSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSnapshotRequest(name, contentType, content, syncToken, context);
                return ProtocolOperationHelpers.ProcessMessage(Pipeline, message, ClientDiagnostics, "AzureAppConfigurationClient.CreateSnapshot", OperationFinalStateVia.OriginalUri, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a key-value snapshot. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="name"> The name of the key-value snapshot to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Operation<BinaryData>> CreateSnapshotAsync(WaitUntil waitUntil, string name, string contentType, RequestContent content, string syncToken = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CreateSnapshot");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSnapshotRequest(name, contentType, content, syncToken, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(Pipeline, message, ClientDiagnostics, "AzureAppConfigurationClient.CreateSnapshotAsync", OperationFinalStateVia.OriginalUri, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a key-value snapshot. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="name"> The name of the key-value snapshot to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="entity"> The key-value snapshot to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        internal virtual Operation<Snapshot> CreateSnapshot(WaitUntil waitUntil, string name, CreateSnapshotRequestContentType contentType, Snapshot entity, string syncToken = default, CancellationToken cancellationToken = default)
        {
            Operation<BinaryData> result = CreateSnapshot(waitUntil, name, contentType.ToSerialString(), entity, syncToken, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return ProtocolOperationHelpers.Convert(result, response => (Snapshot)response, ClientDiagnostics, "AzureAppConfigurationClient.CreateSnapshot");
        }

        /// <summary> Creates a key-value snapshot. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="name"> The name of the key-value snapshot to create. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="entity"> The key-value snapshot to create. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        internal virtual async Task<Operation<Snapshot>> CreateSnapshotAsync(WaitUntil waitUntil, string name, CreateSnapshotRequestContentType contentType, Snapshot entity, string syncToken = default, CancellationToken cancellationToken = default)
        {
            Operation<BinaryData> result = await CreateSnapshotAsync(waitUntil, name, contentType.ToSerialString(), entity, syncToken, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return ProtocolOperationHelpers.Convert(result, response => (Snapshot)response, ClientDiagnostics, "AzureAppConfigurationClient.CreateSnapshotAsync");
        }

        /// <summary>
        /// [Protocol Method] Updates the state of a key-value snapshot.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the key-value snapshot to update. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response UpdateSnapshotStatus(string name, string contentType, RequestContent content, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.UpdateSnapshotStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSnapshotStatusRequest(name, contentType, content, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates the state of a key-value snapshot.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the key-value snapshot to update. </param>
        /// <param name="contentType"> Content-Type header. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> UpdateSnapshotStatusAsync(string name, string contentType, RequestContent content, string syncToken = default, MatchConditions matchConditions = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.UpdateSnapshotStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSnapshotStatusRequest(name, contentType, content, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the key-value snapshot to check. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckSnapshot(string name, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckSnapshot");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateCheckSnapshotRequest(name, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> The name of the key-value snapshot to check. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckSnapshotAsync(string name, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckSnapshot");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(name, nameof(name));

                using HttpMessage message = CreateCheckSnapshotRequest(name, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> The name of the key-value snapshot to check. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckSnapshot(string name, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return CheckSnapshot(name, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> The name of the key-value snapshot to check. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="name"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckSnapshotAsync(string name, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(name, nameof(name));

            return await CheckSnapshotAsync(name, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of labels.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetLabels(string name, string syncToken, string after, string acceptDatetime, IEnumerable<LabelFields> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetLabels");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetLabelsCollectionResult(
                    this,
                    name,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of labels.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetLabelsAsync(string name, string syncToken, string after, string acceptDatetime, IEnumerable<LabelFields> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetLabels");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetLabelsAsyncCollectionResult(
                    this,
                    name,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of labels. </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<Label> GetLabels(string name = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<LabelFields> @select = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetLabelsCollectionResultOfT(
                this,
                name,
                syncToken,
                after,
                acceptDatetime,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of labels. </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<Label> GetLabelsAsync(string name = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<LabelFields> @select = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetLabelsAsyncCollectionResultOfT(
                this,
                name,
                syncToken,
                after,
                acceptDatetime,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckLabels(string name, string syncToken, string after, string acceptDatetime, IEnumerable<LabelFields> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckLabelsRequest(name, syncToken, after, acceptDatetime, @select, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckLabelsAsync(string name, string syncToken, string after, string acceptDatetime, IEnumerable<LabelFields> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckLabels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckLabelsRequest(name, syncToken, after, acceptDatetime, @select, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckLabels(string name = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<LabelFields> @select = default, CancellationToken cancellationToken = default)
        {
            return CheckLabels(name, syncToken, after, acceptDatetime, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="name"> A filter for the name of the returned labels. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckLabelsAsync(string name = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<LabelFields> @select = default, CancellationToken cancellationToken = default)
        {
            return await CheckLabelsAsync(name, syncToken, after, acceptDatetime, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Locks a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to lock. </param>
        /// <param name="label"> The label, if any, of the key-value to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response CreateReadOnlyLock(string key, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CreateReadOnlyLock");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateReadOnlyLockRequest(key, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Locks a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to lock. </param>
        /// <param name="label"> The label, if any, of the key-value to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> CreateReadOnlyLockAsync(string key, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CreateReadOnlyLock");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateReadOnlyLockRequest(key, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Locks a key-value. </summary>
        /// <param name="key"> The key of the key-value to lock. </param>
        /// <param name="label"> The label, if any, of the key-value to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<KeyValue> CreateReadOnlyLock(string key, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = CreateReadOnlyLock(key, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary> Locks a key-value. </summary>
        /// <param name="key"> The key of the key-value to lock. </param>
        /// <param name="label"> The label, if any, of the key-value to lock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<KeyValue>> CreateReadOnlyLockAsync(string key, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = await CreateReadOnlyLockAsync(key, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary>
        /// [Protocol Method] Unlocks a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to unlock. </param>
        /// <param name="label"> The label, if any, of the key-value to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response DeleteReadOnlyLock(string key, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.DeleteReadOnlyLock");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReadOnlyLockRequest(key, label, syncToken, matchConditions, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Unlocks a key-value.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key of the key-value to unlock. </param>
        /// <param name="label"> The label, if any, of the key-value to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> DeleteReadOnlyLockAsync(string key, string label, string syncToken, MatchConditions matchConditions, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.DeleteReadOnlyLock");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReadOnlyLockRequest(key, label, syncToken, matchConditions, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unlocks a key-value. </summary>
        /// <param name="key"> The key of the key-value to unlock. </param>
        /// <param name="label"> The label, if any, of the key-value to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<KeyValue> DeleteReadOnlyLock(string key, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = DeleteReadOnlyLock(key, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary> Unlocks a key-value. </summary>
        /// <param name="key"> The key of the key-value to unlock. </param>
        /// <param name="label"> The label, if any, of the key-value to unlock. </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<KeyValue>> DeleteReadOnlyLockAsync(string key, string label = default, string syncToken = default, MatchConditions matchConditions = default, CancellationToken cancellationToken = default)
        {
            Response result = await DeleteReadOnlyLockAsync(key, label, syncToken, matchConditions, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((KeyValue)result, result);
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-value revisions.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetRevisions(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetRevisions");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetRevisionsCollectionResult(
                    this,
                    key,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets a list of key-value revisions.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetRevisionsAsync(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.GetRevisions");
            scope.Start();
            try
            {
                return new AzureAppConfigurationClientGetRevisionsAsyncCollectionResult(
                    this,
                    key,
                    label,
                    syncToken,
                    after,
                    acceptDatetime,
                    @select,
                    tags,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of key-value revisions. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<KeyValue> GetRevisions(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetRevisionsCollectionResultOfT(
                this,
                key,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets a list of key-value revisions. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<KeyValue> GetRevisionsAsync(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return new AzureAppConfigurationClientGetRevisionsAsyncCollectionResultOfT(
                this,
                key,
                label,
                syncToken,
                after,
                acceptDatetime,
                @select,
                tags,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CheckRevisions(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckRevisions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckRevisionsRequest(key, label, syncToken, after, acceptDatetime, @select, tags, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Requests the headers and status of the given resource.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CheckRevisionsAsync(string key, string label, string syncToken, string after, string acceptDatetime, IEnumerable<string> @select, IEnumerable<string> tags, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("AzureAppConfigurationClient.CheckRevisions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckRevisionsRequest(key, label, syncToken, after, acceptDatetime, @select, tags, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CheckRevisions(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return CheckRevisions(key, label, syncToken, after, acceptDatetime, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Requests the headers and status of the given resource. </summary>
        /// <param name="key">
        /// A filter used to match keys. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="label">
        /// A filter used to match labels. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="syncToken"> Used to guarantee real-time consistency between requests. </param>
        /// <param name="after">
        /// Instructs the server to return elements that appear after the element referred
        /// to by the specified token.
        /// </param>
        /// <param name="acceptDatetime">
        /// Requests the server to respond with the state of the resource at the specified
        /// time.
        /// </param>
        /// <param name="select"> Used to select what fields are present in the returned resource(s). </param>
        /// <param name="tags">
        /// A filter used to query by tags. Syntax reference:
        /// https://aka.ms/azconfig/docs/restapirevisions
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CheckRevisionsAsync(string key = default, string label = default, string syncToken = default, string after = default, string acceptDatetime = default, IEnumerable<string> @select = default, IEnumerable<string> tags = default, CancellationToken cancellationToken = default)
        {
            return await CheckRevisionsAsync(key, label, syncToken, after, acceptDatetime, @select, tags, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }
    }
}
