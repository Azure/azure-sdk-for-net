// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.VoiceLive
{
    internal partial class ClientEventConversationItemCreate : ClientEvent
    {
        /// <summary> Initializes a new instance of <see cref="ClientEventConversationItemCreate"/>. </summary>
        public ClientEventConversationItemCreate() : base(ClientEventType.ConversationItemCreate)
        {
        }

        /// <summary> Initializes a new instance of <see cref="ClientEventConversationItemCreate"/>. </summary>
        /// <param name="type"> The type of event. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="eventId"> Optional client-generated ID used to identify this event. </param>
        /// <param name="previousItemId">
        /// The ID of the preceding item after which the new item will be inserted.
        /// If not set, the new item will be appended to the end of the conversation.
        /// If set to `root`, the new item will be added to the beginning of the conversation.
        /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
        /// ID cannot be found, an error will be returned and the item will not be added.
        /// </param>
        /// <param name="item"></param>
        internal ClientEventConversationItemCreate(ClientEventType @type, IDictionary<string, BinaryData> additionalBinaryDataProperties, string eventId, string previousItemId, ConversationRequestItem item) : base(@type, eventId, additionalBinaryDataProperties)
        {
            PreviousItemId = previousItemId;
            Item = item;
        }

        /// <summary> Optional client-generated ID used to identify this event. </summary>
        public override string EventId { get; set; }

        /// <summary>
        /// The ID of the preceding item after which the new item will be inserted.
        /// If not set, the new item will be appended to the end of the conversation.
        /// If set to `root`, the new item will be added to the beginning of the conversation.
        /// If set to an existing ID, it allows an item to be inserted mid-conversation. If the
        /// ID cannot be found, an error will be returned and the item will not be added.
        /// </summary>
        public string PreviousItemId { get; set; }

        /// <summary> Gets or sets the Item. </summary>
        public ConversationRequestItem Item { get; set; }
    }
}
