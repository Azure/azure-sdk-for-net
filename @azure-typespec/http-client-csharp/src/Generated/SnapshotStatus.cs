// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Data.AppConfiguration
{
    /// <summary> Snapshot status. </summary>
    public readonly partial struct SnapshotStatus : IEquatable<SnapshotStatus>
    {
        private readonly string _value;
        /// <summary> Provisioning. </summary>
        private const string ProvisioningValue = "provisioning";
        /// <summary> Ready. </summary>
        private const string ReadyValue = "ready";
        /// <summary> Archived. </summary>
        private const string ArchivedValue = "archived";
        /// <summary> Failed. </summary>
        private const string FailedValue = "failed";

        /// <summary> Initializes a new instance of <see cref="SnapshotStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SnapshotStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Provisioning. </summary>
        public static SnapshotStatus Provisioning { get; } = new SnapshotStatus(ProvisioningValue);

        /// <summary> Ready. </summary>
        public static SnapshotStatus Ready { get; } = new SnapshotStatus(ReadyValue);

        /// <summary> Archived. </summary>
        public static SnapshotStatus Archived { get; } = new SnapshotStatus(ArchivedValue);

        /// <summary> Failed. </summary>
        public static SnapshotStatus Failed { get; } = new SnapshotStatus(FailedValue);

        /// <summary> Determines if two <see cref="SnapshotStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(SnapshotStatus left, SnapshotStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="SnapshotStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(SnapshotStatus left, SnapshotStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="SnapshotStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SnapshotStatus(string value) => new SnapshotStatus(value);

        /// <summary> Converts a string to a <see cref="SnapshotStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SnapshotStatus?(string value) => value == null ? null : new SnapshotStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SnapshotStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(SnapshotStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
