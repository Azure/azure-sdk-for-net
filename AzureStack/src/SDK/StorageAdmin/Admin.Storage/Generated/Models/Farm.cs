// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Storage.Admin.Models
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Storage;
    using Microsoft.AzureStack.Storage.Admin;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// TODO
    /// </summary>
    public partial class Farm : FarmBase
    {
        /// <summary>
        /// Initializes a new instance of the Farm class.
        /// </summary>
        public Farm()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Farm class.
        /// </summary>
        /// <param name="healthStatus">Possible values include: 'Unknown',
        /// 'Healthy', 'Warning', 'Critical'</param>
        public Farm(int? settingsPollingIntervalInSecond = default(int?), int? retentionPeriodForDeletedStorageAccountsInDays = default(int?), int? hostStyleHttpPort = default(int?), int? hostStyleHttpsPort = default(int?), string corsAllowedOriginsList = default(string), string dataCenterUriHostSuffixes = default(string), bool? bandwidthThrottleIsEnabled = default(bool?), int? usageCollectionIntervalInSeconds = default(int?), int? feedbackRefreshIntervalInSeconds = default(int?), int? numberOfAccountsToSync = default(int?), int? defaultThrottleProbabilityDecayIntervalInSeconds = default(int?), int? gracePeriodForFullThrottlingInRefreshIntervals = default(int?), double? gracePeriodMaxThrottleProbability = default(double?), double? overallRequestThresholdInTps = default(double?), double? defaultRequestThresholdInTps = default(double?), double? minimumRequestThresholdInTps = default(double?), double? toleranceFactorForTps = default(double?), double? overallIngressThresholdInGbps = default(double?), double? defaultIngressThresholdInGbps = default(double?), double? minimumIngressThresholdInGbps = default(double?), double? toleranceFactorForIngress = default(double?), double? overallIntranetIngressThresholdInGbps = default(double?), double? defaultIntranetIngressThresholdInGbps = default(double?), double? minimumIntranetIngressThresholdInGbps = default(double?), double? toleranceFactorForIntranetIngress = default(double?), double? overallEgressThresholdInGbps = default(double?), double? defaultEgressThresholdInGbps = default(double?), double? minimumEgressThresholdInGbps = default(double?), double? toleranceFactorForEgress = default(double?), double? overallIntranetEgressThresholdInGbps = default(double?), double? defaultIntranetEgressThresholdInGbps = default(double?), double? minimumIntranetEgressThresholdInGbps = default(double?), double? toleranceFactorForIntranetEgress = default(double?), double? overallTotalIngressThresholdInGbps = default(double?), double? defaultTotalIngressThresholdInGbps = default(double?), double? minimumTotalIngressThresholdInGbps = default(double?), double? toleranceFactorForTotalIngress = default(double?), double? overallTotalEgressThresholdInGbps = default(double?), double? defaultTotalEgressThresholdInGbps = default(double?), double? minimumTotalEgressThresholdInGbps = default(double?), double? toleranceFactorForTotalEgress = default(double?), string settingsStore = default(string), HealthStatus? healthStatus = default(HealthStatus?))
            : base(settingsPollingIntervalInSecond, retentionPeriodForDeletedStorageAccountsInDays, hostStyleHttpPort, hostStyleHttpsPort, corsAllowedOriginsList, dataCenterUriHostSuffixes, bandwidthThrottleIsEnabled, usageCollectionIntervalInSeconds, feedbackRefreshIntervalInSeconds, numberOfAccountsToSync, defaultThrottleProbabilityDecayIntervalInSeconds, gracePeriodForFullThrottlingInRefreshIntervals, gracePeriodMaxThrottleProbability, overallRequestThresholdInTps, defaultRequestThresholdInTps, minimumRequestThresholdInTps, toleranceFactorForTps, overallIngressThresholdInGbps, defaultIngressThresholdInGbps, minimumIngressThresholdInGbps, toleranceFactorForIngress, overallIntranetIngressThresholdInGbps, defaultIntranetIngressThresholdInGbps, minimumIntranetIngressThresholdInGbps, toleranceFactorForIntranetIngress, overallEgressThresholdInGbps, defaultEgressThresholdInGbps, minimumEgressThresholdInGbps, toleranceFactorForEgress, overallIntranetEgressThresholdInGbps, defaultIntranetEgressThresholdInGbps, minimumIntranetEgressThresholdInGbps, toleranceFactorForIntranetEgress, overallTotalIngressThresholdInGbps, defaultTotalIngressThresholdInGbps, minimumTotalIngressThresholdInGbps, toleranceFactorForTotalIngress, overallTotalEgressThresholdInGbps, defaultTotalEgressThresholdInGbps, minimumTotalEgressThresholdInGbps, toleranceFactorForTotalEgress)
        {
            SettingsStore = settingsStore;
            HealthStatus = healthStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settingsStore")]
        public string SettingsStore { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Healthy',
        /// 'Warning', 'Critical'
        /// </summary>
        [JsonProperty(PropertyName = "healthStatus")]
        public HealthStatus? HealthStatus { get; set; }

    }
}
