# External variables:
# ProjectFile - The project to build and test. This variable is defined in pipeline web ui because we want to be able to provide it at queue time and that isn't supported in yaml yet.
# MaxParallelTestJobs - Maximum number of parallel test jobs
# AzConfigConnectionString - The connection string used for testing the AzConfig service. This is set in the pipeline web ui as it needs different values for public vs internal.
# ServiceBusConnectionString - The connection string used for testing the Service Bus service. This is set in the pipeline web ui as it needs different values for public vs internal.

trigger:
  - master

variables:
  DotNetCoreVersion: '2.1.503'

jobs:
  - job: 'Build'

    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - task: DotNetCoreInstaller@0
        displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
        inputs:
          version: '$(DotNetCoreVersion)'

      - script: 'dotnet pack $(ProjectFile) -o $(Build.ArtifactStagingDirectory) -warnaserror'
        displayName: 'Build and Package'
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0

      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish Artifacts'
        inputs:
          ArtifactName: packages

  - job: 'Analyze'

    dependsOn:
      - 'Build'

    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - script: |
          pip install setuptools wheel
          pip install doc-warden
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Artifacts'
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))
        inputs:
          artifactName: packages
          downloadPath: $(System.DefaultWorkingDirectory)

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: 'Component Detection'
        # ComponentGovernance is currently unable to run on pull requests of public projects.  Running on
        # scheduled builds should be good enough.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))

  - job: 'Test'

    strategy:
      maxParallel: $[ variables['MaxParallelTestJobs'] ]
      matrix:
        Linux:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
        Windows:
          OSName: 'Windows'
          OSVmImage: 'vs2017-win2016'
        MacOs:
          OSName: 'MacOS'
          OSVmImage: 'macOS-10.13'

    pool:
      vmImage: '$(OSVmImage)'

    steps:
      - powershell: |
          Invoke-WebRequest -Uri "https://github.com/Azure/azure-sdk-tools/releases/download/sdk-tools_14793/sdk-tools.zip" `
          -OutFile "sdk-tools.zip" | Wait-Process; Expand-Archive -Path "sdk-tools.zip" -DestinationPath "./sdk-tools/"
        workingDirectory: '$(Build.BinariesDirectory)'
        displayName: 'Download Tools Archive From Github Release and Extract it'

      - task: PythonScript@0
        displayName: 'Run VerifyAgentOS script'
        inputs:
          scriptPath: '$(Build.BinariesDirectory)/sdk-tools/scripts/python/verify_agent_os.py'
          arguments: $(OSName)

      - task: DotNetCoreInstaller@0
        displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
        inputs:
          version: '$(DotNetCoreVersion)'

      - task: DotNetCoreCLI@2
        displayName: 'Build & Test (no live tests)'
        condition: eq(variables['System.TeamProject'], 'public')
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
        inputs:
          command: test
          projects: '$(ProjectFile)'
          arguments: --filter TestCategory!=Live --logger trx
          publishTestResults: false

      - task: DotNetCoreCLI@2
        displayName: 'Build & Test (with live tests)'
        condition: ne(variables['System.TeamProject'], 'public')
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
          AZ_CONFIG_CONNECTION: $(AzConfigConnectionString)
          AZ_SERVICE_BUS_CONNECTION: $(ServiceBusConnectionString)
        inputs:
          command: test
          projects: '$(ProjectFile)'
          arguments: --logger trx
          publishTestResults: false

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*.trx'
          testRunTitle: '$(OSName) DotNet $(DotNetCoreVersion)'
          testResultsFormat: 'VSTest'
          mergeTestResults: true
