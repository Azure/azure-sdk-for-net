trigger:
    - GenerateDocsForGitHub
jobs:
  - job: GenerateDocs
    pool:
      vmImage: vs2017-win2016
    steps:
      - powershell: |
          Invoke-WebRequest -Uri "https://github.com/mono/api-doc-tools/releases/download/mdoc-5.7.4.9/mdoc-5.7.4.9.zip" `
          -OutFile "mdoc.zip" | Wait-Process; Expand-Archive -Path "mdoc.zip" -DestinationPath "./mdoc/"
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Download and Extract mdoc Zip
      - task: NuGetToolInstaller@0
        displayName: Instal Nuget Client
      - powershell: nuget install Microsoft.DocAsCode.ECMA2Yaml -ExcludeVersion
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Install Microsoft.DocAsCode.ECMA2Yaml
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          version: 3.0.100-preview5-011568
      - script: |
          cd sdk/core/Azure.Core
          dotnet build Azure.Core.sln -o $(Build.ArtifactStagingDirectory)
        displayName: "Build service"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
      - powershell: ls
        workingDirectory: $(Build.ArtifactStagingDirectory)
      - powershell: |
          New-Item -Type dir $(Build.BinariesDirectory)/dll-docs/my-api;Copy-Item -path $(Build.ArtifactStagingDirectory)/Azure.Core.dll -destination $(Build.BinariesDirectory)/dll-docs/my-api
        displayName: Copy dlls to doc generation folder
      - powershell: ls
        workingDirectory: $(Build.BinariesDirectory)/dll-docs/my-api
      - powershell: |
          New-Item -Type dir $(Build.BinariesDirectory)/dll-docs/dependencies/my-api;Copy-Item -path $(Build.ArtifactStagingDirectory)/Azure.Core.Extensions.dll -destination $(Build.BinariesDirectory)/dll-docs/dependencies/my-api
        displayName: Copy dlls dependencies to doc generation folder
      - powershell: ls
        workingDirectory: $(Build.BinariesDirectory)/dll-docs/dependencies/my-api
      - powershell: ls
        workingDirectory: $(Build.BinariesDirectory)
      - task: CmdLine@2
        displayName: Initialize Frameworks File
        inputs:
          script: mdoc.exe fx-bootstrap ../dll-docs
          workingDirectory: $(Build.BinariesDirectory)/mdoc
          failOnStderr: true
      - task: CmdLine@2
        displayName: Create Output Folders
        inputs:
          script: |
            mkdir dll-xml-output
            mkdir dll-yaml-output
            mkdir docfx-output
          workingDirectory: $(Build.BinariesDirectory)
          failOnStderr: true
      - task: CmdLine@2
        displayName: Produce ECMAXML
        inputs:
          script: |
            mdoc.exe update -fx ../dll-docs -o ../dll-xml-output --debug -lang docid -lang vb.net -lang fsharp --delete
          workingDirectory: $(Build.BinariesDirectory)/mdoc
          failOnStderr: true
      - task: CmdLine@2
        displayName: Generate YAML Files
        inputs:
          script: |
            ECMA2Yaml.exe -s ../../dll-xml-output -o ../../dll-yaml-output
          workingDirectory: $(Build.BinariesDirectory)/Microsoft.DocAsCode.ECMA2Yaml/tools
          failOnStderr: true
      - powershell: |
          Invoke-WebRequest -Uri "https://github.com/dotnet/docfx/releases/download/v2.43.2/docfx.zip" `
          -OutFile "docfx.zip" | Wait-Process; Expand-Archive -Path "docfx.zip" -DestinationPath "./docfx/"
        workingDirectory: $(Build.BinariesDirectory)
        displayName: Download and Extract DocFX
      - task: CmdLine@2
        displayName: Provision DocFX Directory
        inputs:
          script: $(Build.BinariesDirectory)/docfx/docfx.exe init -q
          workingDirectory: $(Build.BinariesDirectory)/docfx-output
          failOnStderr: true
      - task: CopyFiles@2
        displayName: Copy Yaml files to DocFX Directory
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/dll-yaml-output
          content: '**\*'
          targetFolder: $(Build.BinariesDirectory)/docfx-output/docfx_project/api
          overWrite: true
      - task: CmdLine@2
        displayName: Build Doc Content
        inputs:
          script: $(Build.BinariesDirectory)/docfx/docfx.exe
          workingDirectory: $(Build.BinariesDirectory)/docfx-output/docfx_project/
          failOnStderr: true
      - task: CopyFiles@2
        displayName: Copy HTML to Artificats Directory
        inputs:
          sourceFolder: $(Build.BinariesDirectory)/docfx-output/docfx_project/
          content: '**\*'
          targetFolder: $(Build.ArtifactStagingDirectory)/docfx_project
          overWrite: true
      - task: PublishPipelineArtifact@0
        condition: succeededOrFailed()
        inputs:
          artifactName: docfx_project
          targetPath: $(Build.ArtifactStagingDirectory)/docfx_project