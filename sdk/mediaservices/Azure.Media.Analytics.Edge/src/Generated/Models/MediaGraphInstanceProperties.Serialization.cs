// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Media.Analytics.Edge.Models
{
    public partial class MediaGraphInstanceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(TopologyName))
            {
                writer.WritePropertyName("topologyName");
                writer.WriteStringValue(TopologyName);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartArray();
                foreach (var item in Parameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static MediaGraphInstanceProperties DeserializeMediaGraphInstanceProperties(JsonElement element)
        {
            Optional<string> description = default;
            Optional<string> topologyName = default;
            Optional<IList<MediaGraphParameterDefinition>> parameters = default;
            Optional<MediaGraphInstanceState> state = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("topologyName"))
                {
                    topologyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MediaGraphParameterDefinition> array = new List<MediaGraphParameterDefinition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MediaGraphParameterDefinition.DeserializeMediaGraphParameterDefinition(item));
                    }
                    parameters = array;
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new MediaGraphInstanceState(property.Value.GetString());
                    continue;
                }
            }
            return new MediaGraphInstanceProperties(description.Value, topologyName.Value, Optional.ToList(parameters), Optional.ToNullable(state));
        }
    }
}
