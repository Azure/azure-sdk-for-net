// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Media.Analytics.Edge.Models
{
    public partial class MediaGraphNodeInput : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nodeName");
            writer.WriteStringValue(NodeName);
            if (Optional.IsCollectionDefined(OutputSelectors))
            {
                writer.WritePropertyName("outputSelectors");
                writer.WriteStartArray();
                foreach (var item in OutputSelectors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MediaGraphNodeInput DeserializeMediaGraphNodeInput(JsonElement element)
        {
            string nodeName = default;
            Optional<IList<MediaGraphOutputSelector>> outputSelectors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nodeName"))
                {
                    nodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outputSelectors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MediaGraphOutputSelector> array = new List<MediaGraphOutputSelector>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MediaGraphOutputSelector.DeserializeMediaGraphOutputSelector(item));
                    }
                    outputSelectors = array;
                    continue;
                }
            }
            return new MediaGraphNodeInput(nodeName, Optional.ToList(outputSelectors));
        }
    }
}
