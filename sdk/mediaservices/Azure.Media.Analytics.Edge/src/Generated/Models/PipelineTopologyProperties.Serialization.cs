// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Media.Analytics.Edge.Models
{
    public partial class PipelineTopologyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartArray();
                foreach (var item in Parameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sources))
            {
                writer.WritePropertyName("sources");
                writer.WriteStartArray();
                foreach (var item in Sources)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Processors))
            {
                writer.WritePropertyName("processors");
                writer.WriteStartArray();
                foreach (var item in Processors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Sinks))
            {
                writer.WritePropertyName("sinks");
                writer.WriteStartArray();
                foreach (var item in Sinks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static PipelineTopologyProperties DeserializePipelineTopologyProperties(JsonElement element)
        {
            Optional<string> description = default;
            Optional<IList<ParameterDeclaration>> parameters = default;
            Optional<IList<Source>> sources = default;
            Optional<IList<Processor>> processors = default;
            Optional<IList<Sink>> sinks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ParameterDeclaration> array = new List<ParameterDeclaration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParameterDeclaration.DeserializeParameterDeclaration(item));
                    }
                    parameters = array;
                    continue;
                }
                if (property.NameEquals("sources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Source> array = new List<Source>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Source.DeserializeSource(item));
                    }
                    sources = array;
                    continue;
                }
                if (property.NameEquals("processors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Processor> array = new List<Processor>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Processor.DeserializeProcessor(item));
                    }
                    processors = array;
                    continue;
                }
                if (property.NameEquals("sinks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Sink> array = new List<Sink>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Sink.DeserializeSink(item));
                    }
                    sinks = array;
                    continue;
                }
            }
            return new PipelineTopologyProperties(description.Value, Optional.ToList(parameters), Optional.ToList(sources), Optional.ToList(processors), Optional.ToList(sinks));
        }
    }
}
