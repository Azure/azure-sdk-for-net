// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Media.Analytics.Edge.Models
{
    /// <summary> The pixel format that will be used to encode images. </summary>
    public readonly partial struct MediaGraphImageFormatRawPixelFormat : IEquatable<MediaGraphImageFormatRawPixelFormat>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MediaGraphImageFormatRawPixelFormat"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MediaGraphImageFormatRawPixelFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Yuv420PValue = "Yuv420p";
        private const string Rgb565BeValue = "Rgb565be";
        private const string Rgb565LeValue = "Rgb565le";
        private const string Rgb555BeValue = "Rgb555be";
        private const string Rgb555LeValue = "Rgb555le";
        private const string Rgb24Value = "Rgb24";
        private const string Bgr24Value = "Bgr24";
        private const string ArgbValue = "Argb";
        private const string RgbaValue = "Rgba";
        private const string AbgrValue = "Abgr";
        private const string BgraValue = "Bgra";

        /// <summary> Planar YUV 4:2:0, 12bpp, (1 Cr and Cb sample per 2x2 Y samples). </summary>
        public static MediaGraphImageFormatRawPixelFormat Yuv420P { get; } = new MediaGraphImageFormatRawPixelFormat(Yuv420PValue);
        /// <summary> Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgb565Be { get; } = new MediaGraphImageFormatRawPixelFormat(Rgb565BeValue);
        /// <summary> Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgb565Le { get; } = new MediaGraphImageFormatRawPixelFormat(Rgb565LeValue);
        /// <summary> Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian , X=unused/undefined. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgb555Be { get; } = new MediaGraphImageFormatRawPixelFormat(Rgb555BeValue);
        /// <summary> Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgb555Le { get; } = new MediaGraphImageFormatRawPixelFormat(Rgb555LeValue);
        /// <summary> Packed RGB 8:8:8, 24bpp, RGBRGB. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgb24 { get; } = new MediaGraphImageFormatRawPixelFormat(Rgb24Value);
        /// <summary> Packed RGB 8:8:8, 24bpp, BGRBGR. </summary>
        public static MediaGraphImageFormatRawPixelFormat Bgr24 { get; } = new MediaGraphImageFormatRawPixelFormat(Bgr24Value);
        /// <summary> Packed ARGB 8:8:8:8, 32bpp, ARGBARGB. </summary>
        public static MediaGraphImageFormatRawPixelFormat Argb { get; } = new MediaGraphImageFormatRawPixelFormat(ArgbValue);
        /// <summary> Packed RGBA 8:8:8:8, 32bpp, RGBARGBA. </summary>
        public static MediaGraphImageFormatRawPixelFormat Rgba { get; } = new MediaGraphImageFormatRawPixelFormat(RgbaValue);
        /// <summary> Packed ABGR 8:8:8:8, 32bpp, ABGRABGR. </summary>
        public static MediaGraphImageFormatRawPixelFormat Abgr { get; } = new MediaGraphImageFormatRawPixelFormat(AbgrValue);
        /// <summary> Packed BGRA 8:8:8:8, 32bpp, BGRABGRA. </summary>
        public static MediaGraphImageFormatRawPixelFormat Bgra { get; } = new MediaGraphImageFormatRawPixelFormat(BgraValue);
        /// <summary> Determines if two <see cref="MediaGraphImageFormatRawPixelFormat"/> values are the same. </summary>
        public static bool operator ==(MediaGraphImageFormatRawPixelFormat left, MediaGraphImageFormatRawPixelFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MediaGraphImageFormatRawPixelFormat"/> values are not the same. </summary>
        public static bool operator !=(MediaGraphImageFormatRawPixelFormat left, MediaGraphImageFormatRawPixelFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MediaGraphImageFormatRawPixelFormat"/>. </summary>
        public static implicit operator MediaGraphImageFormatRawPixelFormat(string value) => new MediaGraphImageFormatRawPixelFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MediaGraphImageFormatRawPixelFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MediaGraphImageFormatRawPixelFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
