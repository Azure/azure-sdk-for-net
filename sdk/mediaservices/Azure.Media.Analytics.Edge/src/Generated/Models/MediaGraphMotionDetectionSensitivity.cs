// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Media.Analytics.Edge.Models
{
    /// <summary> Enumeration that specifies the sensitivity of the motion detection processor. </summary>
    public readonly partial struct MediaGraphMotionDetectionSensitivity : IEquatable<MediaGraphMotionDetectionSensitivity>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MediaGraphMotionDetectionSensitivity"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MediaGraphMotionDetectionSensitivity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LowValue = "Low";
        private const string MediumValue = "Medium";
        private const string HighValue = "High";

        /// <summary> Low Sensitivity. </summary>
        public static MediaGraphMotionDetectionSensitivity Low { get; } = new MediaGraphMotionDetectionSensitivity(LowValue);
        /// <summary> Medium Sensitivity. </summary>
        public static MediaGraphMotionDetectionSensitivity Medium { get; } = new MediaGraphMotionDetectionSensitivity(MediumValue);
        /// <summary> High Sensitivity. </summary>
        public static MediaGraphMotionDetectionSensitivity High { get; } = new MediaGraphMotionDetectionSensitivity(HighValue);
        /// <summary> Determines if two <see cref="MediaGraphMotionDetectionSensitivity"/> values are the same. </summary>
        public static bool operator ==(MediaGraphMotionDetectionSensitivity left, MediaGraphMotionDetectionSensitivity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MediaGraphMotionDetectionSensitivity"/> values are not the same. </summary>
        public static bool operator !=(MediaGraphMotionDetectionSensitivity left, MediaGraphMotionDetectionSensitivity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MediaGraphMotionDetectionSensitivity"/>. </summary>
        public static implicit operator MediaGraphMotionDetectionSensitivity(string value) => new MediaGraphMotionDetectionSensitivity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MediaGraphMotionDetectionSensitivity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MediaGraphMotionDetectionSensitivity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
