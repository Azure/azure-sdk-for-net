// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Media.Analytics.Edge.Models
{
    /// <summary> A node that accepts raw video as input, and detects when an object crosses a line. </summary>
    public partial class LineCrossingProcessor : Processor
    {
        /// <summary> Initializes a new instance of LineCrossingProcessor. </summary>
        /// <param name="name"> The name for this processor node. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the topology, the outputs of which are used as input for this processor node. </param>
        /// <param name="lines"> An array of lines used to compute line crossing events. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/>, or <paramref name="lines"/> is null. </exception>
        public LineCrossingProcessor(string name, IEnumerable<NodeInput> inputs, IEnumerable<Line> lines) : base(name, inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }
            if (lines == null)
            {
                throw new ArgumentNullException(nameof(lines));
            }

            Lines = lines.ToList();
            Type = "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary> Initializes a new instance of LineCrossingProcessor. </summary>
        /// <param name="type"> The discriminator for derived types. </param>
        /// <param name="name"> The name for this processor node. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the topology, the outputs of which are used as input for this processor node. </param>
        /// <param name="lines"> An array of lines used to compute line crossing events. </param>
        internal LineCrossingProcessor(string type, string name, IList<NodeInput> inputs, IList<Line> lines) : base(type, name, inputs)
        {
            Lines = lines;
            Type = type ?? "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary> An array of lines used to compute line crossing events. </summary>
        public IList<Line> Lines { get; }
    }
}
