// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Media.Analytics.Edge.Models
{
    /// <summary> Enables a pipeline topology to capture media from a RTSP server. </summary>
    public partial class RtspSource : Source
    {
        /// <summary> Initializes a new instance of RtspSource. </summary>
        /// <param name="name"> The name to be used for this source node. </param>
        /// <param name="endpoint"> RTSP endpoint of the stream that is being connected to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="endpoint"/> is null. </exception>
        public RtspSource(string name, Endpoint endpoint) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            Endpoint = endpoint;
            Type = "#Microsoft.VideoAnalyzer.RtspSource";
        }

        /// <summary> Initializes a new instance of RtspSource. </summary>
        /// <param name="type"> The type of the source node. The discriminator for derived types. </param>
        /// <param name="name"> The name to be used for this source node. </param>
        /// <param name="transport"> Underlying RTSP transport. This is used to enable or disable HTTP tunneling. </param>
        /// <param name="endpoint"> RTSP endpoint of the stream that is being connected to. </param>
        internal RtspSource(string type, string name, RtspTransport? transport, Endpoint endpoint) : base(type, name)
        {
            Transport = transport;
            Endpoint = endpoint;
            Type = type ?? "#Microsoft.VideoAnalyzer.RtspSource";
        }

        /// <summary> Underlying RTSP transport. This is used to enable or disable HTTP tunneling. </summary>
        public RtspTransport? Transport { get; set; }
        /// <summary> RTSP endpoint of the stream that is being connected to. </summary>
        public Endpoint Endpoint { get; set; }
    }
}
