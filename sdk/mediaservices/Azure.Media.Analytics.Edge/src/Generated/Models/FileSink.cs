// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Media.Analytics.Edge.Models
{
    /// <summary> Enables a topology to write/store media (video and audio) to a file on the Edge device. </summary>
    public partial class FileSink : Sink
    {
        /// <summary> Initializes a new instance of FileSink. </summary>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        /// <param name="baseDirectoryPath"> Absolute directory for all outputs to the Edge device from this sink. </param>
        /// <param name="fileNamePattern"> File name pattern for creating new files on the Edge device. The pattern must include at least one system variable. See the documentation for available variables and additional examples. </param>
        /// <param name="maximumSizeMiB"> Maximum amount of disk space that can be used for storing files from this sink. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/>, <paramref name="baseDirectoryPath"/>, <paramref name="fileNamePattern"/>, or <paramref name="maximumSizeMiB"/> is null. </exception>
        public FileSink(string name, IEnumerable<NodeInput> inputs, string baseDirectoryPath, string fileNamePattern, string maximumSizeMiB) : base(name, inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }
            if (baseDirectoryPath == null)
            {
                throw new ArgumentNullException(nameof(baseDirectoryPath));
            }
            if (fileNamePattern == null)
            {
                throw new ArgumentNullException(nameof(fileNamePattern));
            }
            if (maximumSizeMiB == null)
            {
                throw new ArgumentNullException(nameof(maximumSizeMiB));
            }

            BaseDirectoryPath = baseDirectoryPath;
            FileNamePattern = fileNamePattern;
            MaximumSizeMiB = maximumSizeMiB;
            Type = "#Microsoft.VideoAnalyzer.FileSink";
        }

        /// <summary> Initializes a new instance of FileSink. </summary>
        /// <param name="type"> The discriminator for derived types. </param>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        /// <param name="baseDirectoryPath"> Absolute directory for all outputs to the Edge device from this sink. </param>
        /// <param name="fileNamePattern"> File name pattern for creating new files on the Edge device. The pattern must include at least one system variable. See the documentation for available variables and additional examples. </param>
        /// <param name="maximumSizeMiB"> Maximum amount of disk space that can be used for storing files from this sink. </param>
        internal FileSink(string type, string name, IList<NodeInput> inputs, string baseDirectoryPath, string fileNamePattern, string maximumSizeMiB) : base(type, name, inputs)
        {
            BaseDirectoryPath = baseDirectoryPath;
            FileNamePattern = fileNamePattern;
            MaximumSizeMiB = maximumSizeMiB;
            Type = type ?? "#Microsoft.VideoAnalyzer.FileSink";
        }

        /// <summary> Absolute directory for all outputs to the Edge device from this sink. </summary>
        public string BaseDirectoryPath { get; set; }
        /// <summary> File name pattern for creating new files on the Edge device. The pattern must include at least one system variable. See the documentation for available variables and additional examples. </summary>
        public string FileNamePattern { get; set; }
        /// <summary> Maximum amount of disk space that can be used for storing files from this sink. </summary>
        public string MaximumSizeMiB { get; set; }
    }
}
