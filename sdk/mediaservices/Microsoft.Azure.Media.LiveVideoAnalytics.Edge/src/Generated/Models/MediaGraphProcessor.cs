// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Media.LiveVideoAnalytics.Edge.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A node that represents the desired processing of media in a graph.
    /// Takes media and/or events as inputs, and emits media and/or event as
    /// output.
    /// </summary>
    public partial class MediaGraphProcessor
    {
        /// <summary>
        /// Initializes a new instance of the MediaGraphProcessor class.
        /// </summary>
        public MediaGraphProcessor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MediaGraphProcessor class.
        /// </summary>
        /// <param name="name">The name for this processor node.</param>
        /// <param name="inputs">An array of the names of the other nodes in
        /// the media graph, the outputs of which are used as input for this
        /// processor node.</param>
        public MediaGraphProcessor(string name, IList<MediaGraphNodeInput> inputs)
        {
            Name = name;
            Inputs = inputs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name for this processor node.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets an array of the names of the other nodes in the media
        /// graph, the outputs of which are used as input for this processor
        /// node.
        /// </summary>
        [JsonProperty(PropertyName = "inputs")]
        public IList<MediaGraphNodeInput> Inputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Inputs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Inputs");
            }
        }
    }
}
