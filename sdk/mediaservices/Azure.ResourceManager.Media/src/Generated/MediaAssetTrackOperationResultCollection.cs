// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Media
{
    /// <summary>
    /// A class representing a collection of <see cref="MediaAssetTrackOperationResultResource" /> and their operations.
    /// Each <see cref="MediaAssetTrackOperationResultResource" /> in the collection will belong to the same instance of <see cref="MediaAssetTrackResource" />.
    /// To get a <see cref="MediaAssetTrackOperationResultCollection" /> instance call the GetMediaAssetTrackOperationResults method from an instance of <see cref="MediaAssetTrackResource" />.
    /// </summary>
    public partial class MediaAssetTrackOperationResultCollection : ArmCollection
    {
        private readonly ClientDiagnostics _mediaAssetTrackOperationResultOperationResultsClientDiagnostics;
        private readonly OperationResultsRestOperations _mediaAssetTrackOperationResultOperationResultsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MediaAssetTrackOperationResultCollection"/> class for mocking. </summary>
        protected MediaAssetTrackOperationResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MediaAssetTrackOperationResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal MediaAssetTrackOperationResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _mediaAssetTrackOperationResultOperationResultsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Media", MediaAssetTrackOperationResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MediaAssetTrackOperationResultResource.ResourceType, out string mediaAssetTrackOperationResultOperationResultsApiVersion);
            _mediaAssetTrackOperationResultOperationResultsRestClient = new OperationResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, mediaAssetTrackOperationResultOperationResultsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MediaAssetTrackResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MediaAssetTrackResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get asset track operation result.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationResults/{operationId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response<MediaAssetTrackOperationResultResource>> GetAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _mediaAssetTrackOperationResultOperationResultsClientDiagnostics.CreateScope("MediaAssetTrackOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _mediaAssetTrackOperationResultOperationResultsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, operationId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MediaAssetTrackOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get asset track operation result.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationResults/{operationId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response<MediaAssetTrackOperationResultResource> Get(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _mediaAssetTrackOperationResultOperationResultsClientDiagnostics.CreateScope("MediaAssetTrackOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = _mediaAssetTrackOperationResultOperationResultsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, operationId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MediaAssetTrackOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationResults/{operationId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _mediaAssetTrackOperationResultOperationResultsClientDiagnostics.CreateScope("MediaAssetTrackOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _mediaAssetTrackOperationResultOperationResultsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationResults/{operationId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response<bool> Exists(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _mediaAssetTrackOperationResultOperationResultsClientDiagnostics.CreateScope("MediaAssetTrackOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _mediaAssetTrackOperationResultOperationResultsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, operationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
