// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. </summary>
    public readonly partial struct FaceRedactorMode : IEquatable<FaceRedactorMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FaceRedactorMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FaceRedactorMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AnalyzeValue = "Analyze";
        private const string RedactValue = "Redact";
        private const string CombinedValue = "Combined";

        /// <summary> Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode. </summary>
        public static FaceRedactorMode Analyze { get; } = new FaceRedactorMode(AnalyzeValue);
        /// <summary> Redact mode consumes the metadata file from Analyze mode and redacts the faces found. </summary>
        public static FaceRedactorMode Redact { get; } = new FaceRedactorMode(RedactValue);
        /// <summary> Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired. </summary>
        public static FaceRedactorMode Combined { get; } = new FaceRedactorMode(CombinedValue);
        /// <summary> Determines if two <see cref="FaceRedactorMode"/> values are the same. </summary>
        public static bool operator ==(FaceRedactorMode left, FaceRedactorMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FaceRedactorMode"/> values are not the same. </summary>
        public static bool operator !=(FaceRedactorMode left, FaceRedactorMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FaceRedactorMode"/>. </summary>
        public static implicit operator FaceRedactorMode(string value) => new FaceRedactorMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FaceRedactorMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FaceRedactorMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
