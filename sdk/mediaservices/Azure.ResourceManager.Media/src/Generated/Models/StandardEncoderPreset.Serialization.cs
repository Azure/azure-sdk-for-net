// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class StandardEncoderPreset : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Filters))
            {
                writer.WritePropertyName("filters");
                writer.WriteObjectValue(Filters);
            }
            writer.WritePropertyName("codecs");
            writer.WriteStartArray();
            foreach (var item in Codecs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("formats");
            writer.WriteStartArray();
            foreach (var item in Formats)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static StandardEncoderPreset DeserializeStandardEncoderPreset(JsonElement element)
        {
            Optional<FilteringOperations> filters = default;
            IList<CodecBasicProperties> codecs = default;
            IList<FormatBasicProperties> formats = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("filters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filters = FilteringOperations.DeserializeFilteringOperations(property.Value);
                    continue;
                }
                if (property.NameEquals("codecs"))
                {
                    List<CodecBasicProperties> array = new List<CodecBasicProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodecBasicProperties.DeserializeCodecBasicProperties(item));
                    }
                    codecs = array;
                    continue;
                }
                if (property.NameEquals("formats"))
                {
                    List<FormatBasicProperties> array = new List<FormatBasicProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FormatBasicProperties.DeserializeFormatBasicProperties(item));
                    }
                    formats = array;
                    continue;
                }
                if (property.NameEquals("@odata.type"))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new StandardEncoderPreset(odataType, filters.Value, codecs, formats);
        }
    }
}
