// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Blur type. </summary>
    public readonly partial struct FaceDetectorBlurType : IEquatable<FaceDetectorBlurType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FaceDetectorBlurType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FaceDetectorBlurType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BoxValue = "Box";
        private const string LowValue = "Low";
        private const string MedValue = "Med";
        private const string HighValue = "High";
        private const string BlackValue = "Black";

        /// <summary> Box: debug filter, bounding box only. </summary>
        public static FaceDetectorBlurType Box { get; } = new FaceDetectorBlurType(BoxValue);
        /// <summary> Low: box-car blur filter. </summary>
        public static FaceDetectorBlurType Low { get; } = new FaceDetectorBlurType(LowValue);
        /// <summary> Med: Gaussian blur filter. </summary>
        public static FaceDetectorBlurType Med { get; } = new FaceDetectorBlurType(MedValue);
        /// <summary> High: Confuse blur filter. </summary>
        public static FaceDetectorBlurType High { get; } = new FaceDetectorBlurType(HighValue);
        /// <summary> Black: Black out filter. </summary>
        public static FaceDetectorBlurType Black { get; } = new FaceDetectorBlurType(BlackValue);
        /// <summary> Determines if two <see cref="FaceDetectorBlurType"/> values are the same. </summary>
        public static bool operator ==(FaceDetectorBlurType left, FaceDetectorBlurType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FaceDetectorBlurType"/> values are not the same. </summary>
        public static bool operator !=(FaceDetectorBlurType left, FaceDetectorBlurType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FaceDetectorBlurType"/>. </summary>
        public static implicit operator FaceDetectorBlurType(string value) => new FaceDetectorBlurType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FaceDetectorBlurType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FaceDetectorBlurType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
