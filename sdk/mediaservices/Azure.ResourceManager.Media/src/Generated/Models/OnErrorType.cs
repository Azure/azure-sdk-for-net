// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with &apos;ContinueJob&apos;. The default is &apos;StopProcessingJob&apos;. </summary>
    public readonly partial struct OnErrorType : IEquatable<OnErrorType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OnErrorType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OnErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StopProcessingJobValue = "StopProcessingJob";
        private const string ContinueJobValue = "ContinueJob";

        /// <summary> Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped. </summary>
        public static OnErrorType StopProcessingJob { get; } = new OnErrorType(StopProcessingJobValue);
        /// <summary> Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue. </summary>
        public static OnErrorType ContinueJob { get; } = new OnErrorType(ContinueJobValue);
        /// <summary> Determines if two <see cref="OnErrorType"/> values are the same. </summary>
        public static bool operator ==(OnErrorType left, OnErrorType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OnErrorType"/> values are not the same. </summary>
        public static bool operator !=(OnErrorType left, OnErrorType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OnErrorType"/>. </summary>
        public static implicit operator OnErrorType(string value) => new OnErrorType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OnErrorType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OnErrorType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
