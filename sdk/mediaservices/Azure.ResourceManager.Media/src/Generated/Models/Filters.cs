// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding. </summary>
    public partial class Filters
    {
        /// <summary> Initializes a new instance of Filters. </summary>
        public Filters()
        {
            Overlays = new ChangeTrackingList<Overlay>();
        }

        /// <summary> Initializes a new instance of Filters. </summary>
        /// <param name="deinterlace"> The de-interlacing settings. </param>
        /// <param name="rotation"> The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto. </param>
        /// <param name="crop"> The parameters for the rectangular window with which to crop the input video. </param>
        /// <param name="overlays">
        /// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
        /// Please note <see cref="Overlay"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioOverlay"/> and <see cref="VideoOverlay"/>.
        /// </param>
        internal Filters(Deinterlace deinterlace, Rotation? rotation, Rectangle crop, IList<Overlay> overlays)
        {
            Deinterlace = deinterlace;
            Rotation = rotation;
            Crop = crop;
            Overlays = overlays;
        }

        /// <summary> The de-interlacing settings. </summary>
        public Deinterlace Deinterlace { get; set; }
        /// <summary> The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto. </summary>
        public Rotation? Rotation { get; set; }
        /// <summary> The parameters for the rectangular window with which to crop the input video. </summary>
        public Rectangle Crop { get; set; }
        /// <summary>
        /// The properties of overlays to be applied to the input video. These could be audio, image or video overlays.
        /// Please note <see cref="Overlay"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AudioOverlay"/> and <see cref="VideoOverlay"/>.
        /// </summary>
        public IList<Overlay> Overlays { get; }
    }
}
