// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation. </summary>
    public partial class FilterTrackSelection
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="FilterTrackSelection"/>. </summary>
        /// <param name="trackSelections"> The track selections. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="trackSelections"/> is null. </exception>
        public FilterTrackSelection(IEnumerable<FilterTrackPropertyCondition> trackSelections)
        {
            Argument.AssertNotNull(trackSelections, nameof(trackSelections));

            TrackSelections = trackSelections.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="FilterTrackSelection"/>. </summary>
        /// <param name="trackSelections"> The track selections. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal FilterTrackSelection(IList<FilterTrackPropertyCondition> trackSelections, Dictionary<string, BinaryData> rawData)
        {
            TrackSelections = trackSelections;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="FilterTrackSelection"/> for deserialization. </summary>
        internal FilterTrackSelection()
        {
        }

        /// <summary> The track selections. </summary>
        public IList<FilterTrackPropertyCondition> TrackSelections { get; }
    }
}
