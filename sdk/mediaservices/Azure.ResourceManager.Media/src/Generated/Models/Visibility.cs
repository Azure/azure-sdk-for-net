// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> When PlayerVisibility is set to &quot;Visible&quot;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &quot;Hidden&quot;, the text will not be available to the client. The default value is &quot;Visible&quot;. </summary>
    public readonly partial struct Visibility : IEquatable<Visibility>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Visibility"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Visibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HiddenValue = "Hidden";
        private const string VisibleValue = "Visible";

        /// <summary> The track is hidden to video player. </summary>
        public static Visibility Hidden { get; } = new Visibility(HiddenValue);
        /// <summary> The track is visible to video player. </summary>
        public static Visibility Visible { get; } = new Visibility(VisibleValue);
        /// <summary> Determines if two <see cref="Visibility"/> values are the same. </summary>
        public static bool operator ==(Visibility left, Visibility right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Visibility"/> values are not the same. </summary>
        public static bool operator !=(Visibility left, Visibility right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Visibility"/>. </summary>
        public static implicit operator Visibility(string value) => new Visibility(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Visibility other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Visibility other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
