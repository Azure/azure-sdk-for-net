// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class Filters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Deinterlace))
            {
                writer.WritePropertyName("deinterlace");
                writer.WriteObjectValue(Deinterlace);
            }
            if (Optional.IsDefined(Rotation))
            {
                writer.WritePropertyName("rotation");
                writer.WriteStringValue(Rotation.Value.ToString());
            }
            if (Optional.IsDefined(Crop))
            {
                writer.WritePropertyName("crop");
                writer.WriteObjectValue(Crop);
            }
            if (Optional.IsCollectionDefined(Overlays))
            {
                writer.WritePropertyName("overlays");
                writer.WriteStartArray();
                foreach (var item in Overlays)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static Filters DeserializeFilters(JsonElement element)
        {
            Optional<Deinterlace> deinterlace = default;
            Optional<Rotation> rotation = default;
            Optional<Rectangle> crop = default;
            Optional<IList<Overlay>> overlays = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deinterlace"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deinterlace = Deinterlace.DeserializeDeinterlace(property.Value);
                    continue;
                }
                if (property.NameEquals("rotation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rotation = new Rotation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("crop"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    crop = Rectangle.DeserializeRectangle(property.Value);
                    continue;
                }
                if (property.NameEquals("overlays"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Overlay> array = new List<Overlay>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Overlay.DeserializeOverlay(item));
                    }
                    overlays = array;
                    continue;
                }
            }
            return new Filters(deinterlace.Value, Optional.ToNullable(rotation), crop.Value, Optional.ToList(overlays));
        }
    }
}
