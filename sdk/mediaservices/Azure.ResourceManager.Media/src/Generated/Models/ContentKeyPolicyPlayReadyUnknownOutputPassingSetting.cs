// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Configures Unknown output handling settings of the license. </summary>
    public readonly partial struct ContentKeyPolicyPlayReadyUnknownOutputPassingSetting : IEquatable<ContentKeyPolicyPlayReadyUnknownOutputPassingSetting>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContentKeyPolicyPlayReadyUnknownOutputPassingSetting"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotAllowedValue = "NotAllowed";
        private const string AllowedValue = "Allowed";
        private const string AllowedWithVideoConstrictionValue = "AllowedWithVideoConstriction";

        /// <summary> Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version. </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingSetting Unknown { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(UnknownValue);
        /// <summary> Passing the video portion of protected content to an Unknown Output is not allowed. </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingSetting NotAllowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(NotAllowedValue);
        /// <summary> Passing the video portion of protected content to an Unknown Output is allowed. </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingSetting Allowed { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(AllowedValue);
        /// <summary> Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution. </summary>
        public static ContentKeyPolicyPlayReadyUnknownOutputPassingSetting AllowedWithVideoConstriction { get; } = new ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(AllowedWithVideoConstrictionValue);
        /// <summary> Determines if two <see cref="ContentKeyPolicyPlayReadyUnknownOutputPassingSetting"/> values are the same. </summary>
        public static bool operator ==(ContentKeyPolicyPlayReadyUnknownOutputPassingSetting left, ContentKeyPolicyPlayReadyUnknownOutputPassingSetting right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContentKeyPolicyPlayReadyUnknownOutputPassingSetting"/> values are not the same. </summary>
        public static bool operator !=(ContentKeyPolicyPlayReadyUnknownOutputPassingSetting left, ContentKeyPolicyPlayReadyUnknownOutputPassingSetting right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContentKeyPolicyPlayReadyUnknownOutputPassingSetting"/>. </summary>
        public static implicit operator ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(string value) => new ContentKeyPolicyPlayReadyUnknownOutputPassingSetting(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContentKeyPolicyPlayReadyUnknownOutputPassingSetting other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContentKeyPolicyPlayReadyUnknownOutputPassingSetting other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
