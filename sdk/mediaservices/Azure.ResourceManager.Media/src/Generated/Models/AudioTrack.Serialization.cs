// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Media.Models
{
    public partial class AudioTrack : IUtf8JsonSerializable, IModelJsonSerializable<AudioTrack>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AudioTrack>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AudioTrack>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AudioTrack>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(FileName))
            {
                writer.WritePropertyName("fileName"u8);
                writer.WriteStringValue(FileName);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(LanguageCode))
            {
                writer.WritePropertyName("languageCode"u8);
                writer.WriteStringValue(LanguageCode);
            }
            if (Optional.IsDefined(HlsSettings))
            {
                writer.WritePropertyName("hlsSettings"u8);
                if (HlsSettings is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<HlsSettings>)HlsSettings).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(DashSettings))
            {
                writer.WritePropertyName("dashSettings"u8);
                if (DashSettings is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<TrackDashSettings>)DashSettings).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Mpeg4TrackId))
            {
                if (Mpeg4TrackId != null)
                {
                    writer.WritePropertyName("mpeg4TrackId"u8);
                    writer.WriteNumberValue(Mpeg4TrackId.Value);
                }
                else
                {
                    writer.WriteNull("mpeg4TrackId");
                }
            }
            writer.WritePropertyName("@odata.type"u8);
            writer.WriteStringValue(OdataType);
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AudioTrack DeserializeAudioTrack(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> fileName = default;
            Optional<string> displayName = default;
            Optional<string> languageCode = default;
            Optional<HlsSettings> hlsSettings = default;
            Optional<TrackDashSettings> dashSettings = default;
            Optional<int?> mpeg4TrackId = default;
            Optional<int> bitRate = default;
            string odataType = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fileName"u8))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("languageCode"u8))
                {
                    languageCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hlsSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hlsSettings = HlsSettings.DeserializeHlsSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("dashSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dashSettings = TrackDashSettings.DeserializeTrackDashSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("mpeg4TrackId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        mpeg4TrackId = null;
                        continue;
                    }
                    mpeg4TrackId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bitRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bitRate = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("@odata.type"u8))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AudioTrack(odataType, fileName.Value, displayName.Value, languageCode.Value, hlsSettings.Value, dashSettings.Value, Optional.ToNullable(mpeg4TrackId), Optional.ToNullable(bitRate), serializedAdditionalRawData);
        }

        AudioTrack IModelJsonSerializable<AudioTrack>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AudioTrack>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAudioTrack(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AudioTrack>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AudioTrack>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AudioTrack IModelSerializable<AudioTrack>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AudioTrack>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAudioTrack(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AudioTrack"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AudioTrack"/> to convert. </param>
        public static implicit operator RequestContent(AudioTrack model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AudioTrack"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AudioTrack(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAudioTrack(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
