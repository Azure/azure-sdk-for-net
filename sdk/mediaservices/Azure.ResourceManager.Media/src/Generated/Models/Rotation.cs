// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto. </summary>
    public readonly partial struct Rotation : IEquatable<Rotation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Rotation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Rotation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutoValue = "Auto";
        private const string NoneValue = "None";
        private const string Rotate0Value = "Rotate0";
        private const string Rotate90Value = "Rotate90";
        private const string Rotate180Value = "Rotate180";
        private const string Rotate270Value = "Rotate270";

        /// <summary> Automatically detect and rotate as needed. </summary>
        public static Rotation Auto { get; } = new Rotation(AutoValue);
        /// <summary> Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact. </summary>
        public static Rotation None { get; } = new Rotation(NoneValue);
        /// <summary> Do not rotate the video but remove any metadata about the rotation. </summary>
        public static Rotation Rotate0 { get; } = new Rotation(Rotate0Value);
        /// <summary> Rotate 90 degrees clockwise. </summary>
        public static Rotation Rotate90 { get; } = new Rotation(Rotate90Value);
        /// <summary> Rotate 180 degrees clockwise. </summary>
        public static Rotation Rotate180 { get; } = new Rotation(Rotate180Value);
        /// <summary> Rotate 270 degrees clockwise. </summary>
        public static Rotation Rotate270 { get; } = new Rotation(Rotate270Value);
        /// <summary> Determines if two <see cref="Rotation"/> values are the same. </summary>
        public static bool operator ==(Rotation left, Rotation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Rotation"/> values are not the same. </summary>
        public static bool operator !=(Rotation left, Rotation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Rotation"/>. </summary>
        public static implicit operator Rotation(string value) => new Rotation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Rotation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Rotation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
