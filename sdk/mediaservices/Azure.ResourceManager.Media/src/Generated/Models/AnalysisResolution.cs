// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Specifies the maximum resolution at which your video is analyzed. The default behavior is &quot;SourceResolution,&quot; which will keep the input video at its original resolution when analyzed. Using &quot;StandardDefinition&quot; will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to &quot;StandardDefinition&quot; will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. </summary>
    public readonly partial struct AnalysisResolution : IEquatable<AnalysisResolution>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AnalysisResolution"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AnalysisResolution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SourceResolutionValue = "SourceResolution";
        private const string StandardDefinitionValue = "StandardDefinition";

        /// <summary> SourceResolution. </summary>
        public static AnalysisResolution SourceResolution { get; } = new AnalysisResolution(SourceResolutionValue);
        /// <summary> StandardDefinition. </summary>
        public static AnalysisResolution StandardDefinition { get; } = new AnalysisResolution(StandardDefinitionValue);
        /// <summary> Determines if two <see cref="AnalysisResolution"/> values are the same. </summary>
        public static bool operator ==(AnalysisResolution left, AnalysisResolution right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AnalysisResolution"/> values are not the same. </summary>
        public static bool operator !=(AnalysisResolution left, AnalysisResolution right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AnalysisResolution"/>. </summary>
        public static implicit operator AnalysisResolution(string value) => new AnalysisResolution(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AnalysisResolution other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AnalysisResolution other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
