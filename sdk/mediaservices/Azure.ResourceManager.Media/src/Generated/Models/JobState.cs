// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Describes the state of the JobOutput. </summary>
    public readonly partial struct JobState : IEquatable<JobState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CanceledValue = "Canceled";
        private const string CancelingValue = "Canceling";
        private const string ErrorValue = "Error";
        private const string FinishedValue = "Finished";
        private const string ProcessingValue = "Processing";
        private const string QueuedValue = "Queued";
        private const string ScheduledValue = "Scheduled";

        /// <summary> The job was canceled. This is a final state for the job. </summary>
        public static JobState Canceled { get; } = new JobState(CanceledValue);
        /// <summary> The job is in the process of being canceled. This is a transient state for the job. </summary>
        public static JobState Canceling { get; } = new JobState(CancelingValue);
        /// <summary> The job has encountered an error. This is a final state for the job. </summary>
        public static JobState Error { get; } = new JobState(ErrorValue);
        /// <summary> The job is finished. This is a final state for the job. </summary>
        public static JobState Finished { get; } = new JobState(FinishedValue);
        /// <summary> The job is processing. This is a transient state for the job. </summary>
        public static JobState Processing { get; } = new JobState(ProcessingValue);
        /// <summary> The job is in a queued state, waiting for resources to become available. This is a transient state. </summary>
        public static JobState Queued { get; } = new JobState(QueuedValue);
        /// <summary> The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states. </summary>
        public static JobState Scheduled { get; } = new JobState(ScheduledValue);
        /// <summary> Determines if two <see cref="JobState"/> values are the same. </summary>
        public static bool operator ==(JobState left, JobState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobState"/> values are not the same. </summary>
        public static bool operator !=(JobState left, JobState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobState"/>. </summary>
        public static implicit operator JobState(string value) => new JobState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
