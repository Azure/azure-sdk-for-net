// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Media.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Media
{
    public partial class MediaLiveOutputData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Core.Optional.IsDefined(AssetName))
            {
                writer.WritePropertyName("assetName"u8);
                writer.WriteStringValue(AssetName);
            }
            if (Core.Optional.IsDefined(ArchiveWindowLength))
            {
                writer.WritePropertyName("archiveWindowLength"u8);
                writer.WriteStringValue(ArchiveWindowLength.Value, "P");
            }
            if (Core.Optional.IsDefined(RewindWindowLength))
            {
                if (RewindWindowLength != null)
                {
                    writer.WritePropertyName("rewindWindowLength"u8);
                    writer.WriteStringValue(RewindWindowLength.Value, "P");
                }
                else
                {
                    writer.WriteNull("rewindWindowLength");
                }
            }
            if (Core.Optional.IsDefined(ManifestName))
            {
                writer.WritePropertyName("manifestName"u8);
                writer.WriteStringValue(ManifestName);
            }
            if (Core.Optional.IsDefined(Hls))
            {
                writer.WritePropertyName("hls"u8);
                writer.WriteObjectValue(Hls);
            }
            if (Core.Optional.IsDefined(OutputSnapTime))
            {
                writer.WritePropertyName("outputSnapTime"u8);
                writer.WriteNumberValue(OutputSnapTime.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static MediaLiveOutputData DeserializeMediaLiveOutputData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> description = default;
            Core.Optional<string> assetName = default;
            Core.Optional<TimeSpan> archiveWindowLength = default;
            Core.Optional<TimeSpan?> rewindWindowLength = default;
            Core.Optional<string> manifestName = default;
            Core.Optional<Hls> hls = default;
            Core.Optional<long> outputSnapTime = default;
            Core.Optional<DateTimeOffset> created = default;
            Core.Optional<DateTimeOffset> lastModified = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<LiveOutputResourceState> resourceState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("assetName"u8))
                        {
                            assetName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("archiveWindowLength"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            archiveWindowLength = property0.Value.GetTimeSpan("P");
                            continue;
                        }
                        if (property0.NameEquals("rewindWindowLength"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                rewindWindowLength = null;
                                continue;
                            }
                            rewindWindowLength = property0.Value.GetTimeSpan("P");
                            continue;
                        }
                        if (property0.NameEquals("manifestName"u8))
                        {
                            manifestName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hls = Hls.DeserializeHls(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("outputSnapTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            outputSnapTime = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("created"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            created = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastModified"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastModified = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            resourceState = new LiveOutputResourceState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new MediaLiveOutputData(id, name, type, systemData.Value, description.Value, assetName.Value, Core.Optional.ToNullable(archiveWindowLength), Core.Optional.ToNullable(rewindWindowLength), manifestName.Value, hls.Value, Core.Optional.ToNullable(outputSnapTime), Core.Optional.ToNullable(created), Core.Optional.ToNullable(lastModified), provisioningState.Value, Core.Optional.ToNullable(resourceState));
        }
    }
}
