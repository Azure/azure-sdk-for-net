// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class ContentKeyPolicyFairPlayConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Ask != null)
            {
                writer.WritePropertyName("ask");
                writer.WriteBase64StringValue(Ask, "D");
            }
            else
            {
                writer.WriteNull("ask");
            }
            if (FairPlayPfxPassword != null)
            {
                writer.WritePropertyName("fairPlayPfxPassword");
                writer.WriteStringValue(FairPlayPfxPassword);
            }
            else
            {
                writer.WriteNull("fairPlayPfxPassword");
            }
            if (FairPlayPfx != null)
            {
                writer.WritePropertyName("fairPlayPfx");
                writer.WriteStringValue(FairPlayPfx);
            }
            else
            {
                writer.WriteNull("fairPlayPfx");
            }
            writer.WritePropertyName("rentalAndLeaseKeyType");
            writer.WriteStringValue(RentalAndLeaseKeyType.ToString());
            writer.WritePropertyName("rentalDuration");
            writer.WriteNumberValue(RentalDuration);
            if (Optional.IsDefined(OfflineRentalConfiguration))
            {
                writer.WritePropertyName("offlineRentalConfiguration");
                writer.WriteObjectValue(OfflineRentalConfiguration);
            }
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static ContentKeyPolicyFairPlayConfiguration DeserializeContentKeyPolicyFairPlayConfiguration(JsonElement element)
        {
            byte[] ask = default;
            string fairPlayPfxPassword = default;
            string fairPlayPfx = default;
            ContentKeyPolicyFairPlayRentalAndLeaseKeyType rentalAndLeaseKeyType = default;
            long rentalDuration = default;
            Optional<ContentKeyPolicyFairPlayOfflineRentalConfiguration> offlineRentalConfiguration = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ask"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ask = null;
                        continue;
                    }
                    ask = property.Value.GetBytesFromBase64("D");
                    continue;
                }
                if (property.NameEquals("fairPlayPfxPassword"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fairPlayPfxPassword = null;
                        continue;
                    }
                    fairPlayPfxPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fairPlayPfx"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fairPlayPfx = null;
                        continue;
                    }
                    fairPlayPfx = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rentalAndLeaseKeyType"))
                {
                    rentalAndLeaseKeyType = new ContentKeyPolicyFairPlayRentalAndLeaseKeyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rentalDuration"))
                {
                    rentalDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("offlineRentalConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    offlineRentalConfiguration = ContentKeyPolicyFairPlayOfflineRentalConfiguration.DeserializeContentKeyPolicyFairPlayOfflineRentalConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("@odata.type"))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new ContentKeyPolicyFairPlayConfiguration(odataType, ask, fairPlayPfxPassword, fairPlayPfx, rentalAndLeaseKeyType, rentalDuration, offlineRentalConfiguration.Value);
        }
    }
}
