// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class SelectAudioTrackByAttribute : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("attribute"u8);
            writer.WriteStringValue(Attribute.ToString());
            writer.WritePropertyName("filter"u8);
            writer.WriteStringValue(Filter.ToString());
            if (Core.Optional.IsDefined(FilterValue))
            {
                writer.WritePropertyName("filterValue"u8);
                writer.WriteStringValue(FilterValue);
            }
            if (Core.Optional.IsDefined(ChannelMapping))
            {
                writer.WritePropertyName("channelMapping"u8);
                writer.WriteStringValue(ChannelMapping.Value.ToString());
            }
            writer.WritePropertyName("@odata.type"u8);
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static SelectAudioTrackByAttribute DeserializeSelectAudioTrackByAttribute(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TrackAttribute attribute = default;
            TrackAttributeFilter filter = default;
            Core.Optional<string> filterValue = default;
            Core.Optional<ChannelMapping> channelMapping = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("attribute"u8))
                {
                    attribute = new TrackAttribute(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("filter"u8))
                {
                    filter = new TrackAttributeFilter(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("filterValue"u8))
                {
                    filterValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channelMapping"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    channelMapping = new ChannelMapping(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("@odata.type"u8))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new SelectAudioTrackByAttribute(odataType, Core.Optional.ToNullable(channelMapping), attribute, filter, filterValue.Value);
        }
    }
}
