// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class ContentKeyPolicyTokenRestriction : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("issuer");
            writer.WriteStringValue(Issuer);
            writer.WritePropertyName("audience");
            writer.WriteStringValue(Audience);
            writer.WritePropertyName("primaryVerificationKey");
            writer.WriteObjectValue(PrimaryVerificationKey);
            if (Optional.IsCollectionDefined(AlternateVerificationKeys))
            {
                writer.WritePropertyName("alternateVerificationKeys");
                writer.WriteStartArray();
                foreach (var item in AlternateVerificationKeys)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(RequiredClaims))
            {
                writer.WritePropertyName("requiredClaims");
                writer.WriteStartArray();
                foreach (var item in RequiredClaims)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("restrictionTokenType");
            writer.WriteStringValue(RestrictionTokenType.ToString());
            if (Optional.IsDefined(OpenIdConnectDiscoveryDocument))
            {
                writer.WritePropertyName("openIdConnectDiscoveryDocument");
                writer.WriteStringValue(OpenIdConnectDiscoveryDocument);
            }
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static ContentKeyPolicyTokenRestriction DeserializeContentKeyPolicyTokenRestriction(JsonElement element)
        {
            string issuer = default;
            string audience = default;
            ContentKeyPolicyRestrictionTokenKey primaryVerificationKey = default;
            Optional<IList<ContentKeyPolicyRestrictionTokenKey>> alternateVerificationKeys = default;
            Optional<IList<ContentKeyPolicyTokenClaim>> requiredClaims = default;
            ContentKeyPolicyRestrictionTokenType restrictionTokenType = default;
            Optional<string> openIdConnectDiscoveryDocument = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("issuer"))
                {
                    issuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("audience"))
                {
                    audience = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryVerificationKey"))
                {
                    primaryVerificationKey = ContentKeyPolicyRestrictionTokenKey.DeserializeContentKeyPolicyRestrictionTokenKey(property.Value);
                    continue;
                }
                if (property.NameEquals("alternateVerificationKeys"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ContentKeyPolicyRestrictionTokenKey> array = new List<ContentKeyPolicyRestrictionTokenKey>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContentKeyPolicyRestrictionTokenKey.DeserializeContentKeyPolicyRestrictionTokenKey(item));
                    }
                    alternateVerificationKeys = array;
                    continue;
                }
                if (property.NameEquals("requiredClaims"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ContentKeyPolicyTokenClaim> array = new List<ContentKeyPolicyTokenClaim>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContentKeyPolicyTokenClaim.DeserializeContentKeyPolicyTokenClaim(item));
                    }
                    requiredClaims = array;
                    continue;
                }
                if (property.NameEquals("restrictionTokenType"))
                {
                    restrictionTokenType = new ContentKeyPolicyRestrictionTokenType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("openIdConnectDiscoveryDocument"))
                {
                    openIdConnectDiscoveryDocument = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@odata.type"))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new ContentKeyPolicyTokenRestriction(odataType, issuer, audience, primaryVerificationKey, Optional.ToList(alternateVerificationKeys), Optional.ToList(requiredClaims), restrictionTokenType, openIdConnectDiscoveryDocument.Value);
        }
    }
}
