// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Media.Models
{
    /// <summary> Blur type. </summary>
    public readonly partial struct BlurType : IEquatable<BlurType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BlurType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BlurType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BoxValue = "Box";
        private const string LowValue = "Low";
        private const string MedValue = "Med";
        private const string HighValue = "High";
        private const string BlackValue = "Black";

        /// <summary> Box: debug filter, bounding box only. </summary>
        public static BlurType Box { get; } = new BlurType(BoxValue);
        /// <summary> Low: box-car blur filter. </summary>
        public static BlurType Low { get; } = new BlurType(LowValue);
        /// <summary> Med: Gaussian blur filter. </summary>
        public static BlurType Med { get; } = new BlurType(MedValue);
        /// <summary> High: Confuse blur filter. </summary>
        public static BlurType High { get; } = new BlurType(HighValue);
        /// <summary> Black: Black out filter. </summary>
        public static BlurType Black { get; } = new BlurType(BlackValue);
        /// <summary> Determines if two <see cref="BlurType"/> values are the same. </summary>
        public static bool operator ==(BlurType left, BlurType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BlurType"/> values are not the same. </summary>
        public static bool operator !=(BlurType left, BlurType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BlurType"/>. </summary>
        public static implicit operator BlurType(string value) => new BlurType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BlurType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BlurType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
