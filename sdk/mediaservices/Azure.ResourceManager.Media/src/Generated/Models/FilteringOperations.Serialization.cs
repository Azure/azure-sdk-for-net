// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Media.Models
{
    public partial class FilteringOperations : IUtf8JsonSerializable, IModelJsonSerializable<FilteringOperations>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FilteringOperations>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FilteringOperations>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Deinterlace))
            {
                writer.WritePropertyName("deinterlace"u8);
                writer.WriteObjectValue(Deinterlace);
            }
            if (Optional.IsDefined(Rotation))
            {
                writer.WritePropertyName("rotation"u8);
                writer.WriteStringValue(Rotation.Value.ToString());
            }
            if (Optional.IsDefined(Crop))
            {
                writer.WritePropertyName("crop"u8);
                writer.WriteObjectValue(Crop);
            }
            if (Optional.IsDefined(FadeIn))
            {
                writer.WritePropertyName("fadeIn"u8);
                writer.WriteObjectValue(FadeIn);
            }
            if (Optional.IsDefined(FadeOut))
            {
                writer.WritePropertyName("fadeOut"u8);
                writer.WriteObjectValue(FadeOut);
            }
            if (Optional.IsCollectionDefined(Overlays))
            {
                writer.WritePropertyName("overlays"u8);
                writer.WriteStartArray();
                foreach (var item in Overlays)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FilteringOperations DeserializeFilteringOperations(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DeinterlaceSettings> deinterlace = default;
            Optional<RotationSetting> rotation = default;
            Optional<RectangularWindow> crop = default;
            Optional<FadeOptions> fadeIn = default;
            Optional<FadeOptions> fadeOut = default;
            Optional<IList<MediaOverlayBase>> overlays = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deinterlace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deinterlace = DeinterlaceSettings.DeserializeDeinterlaceSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("rotation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rotation = new RotationSetting(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("crop"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    crop = RectangularWindow.DeserializeRectangularWindow(property.Value);
                    continue;
                }
                if (property.NameEquals("fadeIn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fadeIn = FadeOptions.DeserializeFadeOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("fadeOut"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fadeOut = FadeOptions.DeserializeFadeOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("overlays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MediaOverlayBase> array = new List<MediaOverlayBase>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MediaOverlayBase.DeserializeMediaOverlayBase(item));
                    }
                    overlays = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FilteringOperations(deinterlace.Value, Optional.ToNullable(rotation), crop.Value, fadeIn.Value, fadeOut.Value, Optional.ToList(overlays), rawData);
        }

        FilteringOperations IModelJsonSerializable<FilteringOperations>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFilteringOperations(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FilteringOperations>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FilteringOperations IModelSerializable<FilteringOperations>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFilteringOperations(doc.RootElement, options);
        }

        public static implicit operator RequestContent(FilteringOperations model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator FilteringOperations(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFilteringOperations(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
