// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class PresentationTimeRange : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(StartTimestamp))
            {
                writer.WritePropertyName("startTimestamp"u8);
                writer.WriteNumberValue(StartTimestamp.Value);
            }
            if (Optional.IsDefined(EndTimestamp))
            {
                writer.WritePropertyName("endTimestamp"u8);
                writer.WriteNumberValue(EndTimestamp.Value);
            }
            if (Optional.IsDefined(PresentationWindowDuration))
            {
                writer.WritePropertyName("presentationWindowDuration"u8);
                writer.WriteNumberValue(PresentationWindowDuration.Value);
            }
            if (Optional.IsDefined(LiveBackoffDuration))
            {
                writer.WritePropertyName("liveBackoffDuration"u8);
                writer.WriteNumberValue(LiveBackoffDuration.Value);
            }
            if (Optional.IsDefined(Timescale))
            {
                writer.WritePropertyName("timescale"u8);
                writer.WriteNumberValue(Timescale.Value);
            }
            if (Optional.IsDefined(ForceEndTimestamp))
            {
                writer.WritePropertyName("forceEndTimestamp"u8);
                writer.WriteBooleanValue(ForceEndTimestamp.Value);
            }
            writer.WriteEndObject();
        }

        internal static PresentationTimeRange DeserializePresentationTimeRange(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> startTimestamp = default;
            Optional<long> endTimestamp = default;
            Optional<long> presentationWindowDuration = default;
            Optional<long> liveBackoffDuration = default;
            Optional<long> timescale = default;
            Optional<bool> forceEndTimestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTimestamp = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("endTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTimestamp = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("presentationWindowDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    presentationWindowDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("liveBackoffDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    liveBackoffDuration = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("timescale"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timescale = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("forceEndTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forceEndTimestamp = property.Value.GetBoolean();
                    continue;
                }
            }
            return new PresentationTimeRange(Optional.ToNullable(startTimestamp), Optional.ToNullable(endTimestamp), Optional.ToNullable(presentationWindowDuration), Optional.ToNullable(liveBackoffDuration), Optional.ToNullable(timescale), Optional.ToNullable(forceEndTimestamp));
        }
    }
}
