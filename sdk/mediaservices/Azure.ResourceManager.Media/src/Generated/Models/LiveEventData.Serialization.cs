// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Media.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Media
{
    public partial class LiveEventData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Input))
            {
                writer.WritePropertyName("input");
                writer.WriteObjectValue(Input);
            }
            if (Optional.IsDefined(Preview))
            {
                writer.WritePropertyName("preview");
                writer.WriteObjectValue(Preview);
            }
            if (Optional.IsDefined(Encoding))
            {
                writer.WritePropertyName("encoding");
                writer.WriteObjectValue(Encoding);
            }
            if (Optional.IsCollectionDefined(Transcriptions))
            {
                writer.WritePropertyName("transcriptions");
                writer.WriteStartArray();
                foreach (var item in Transcriptions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CrossSiteAccessPolicies))
            {
                writer.WritePropertyName("crossSiteAccessPolicies");
                writer.WriteObjectValue(CrossSiteAccessPolicies);
            }
            if (Optional.IsDefined(UseStaticHostname))
            {
                writer.WritePropertyName("useStaticHostname");
                writer.WriteBooleanValue(UseStaticHostname.Value);
            }
            if (Optional.IsDefined(HostnamePrefix))
            {
                writer.WritePropertyName("hostnamePrefix");
                writer.WriteStringValue(HostnamePrefix);
            }
            if (Optional.IsCollectionDefined(StreamOptions))
            {
                writer.WritePropertyName("streamOptions");
                writer.WriteStartArray();
                foreach (var item in StreamOptions)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static LiveEventData DeserializeLiveEventData(JsonElement element)
        {
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> description = default;
            Optional<LiveEventInput> input = default;
            Optional<LiveEventPreview> preview = default;
            Optional<LiveEventEncoding> encoding = default;
            Optional<IList<LiveEventTranscription>> transcriptions = default;
            Optional<string> provisioningState = default;
            Optional<LiveEventResourceState> resourceState = default;
            Optional<CrossSiteAccessPolicies> crossSiteAccessPolicies = default;
            Optional<bool> useStaticHostname = default;
            Optional<string> hostnamePrefix = default;
            Optional<IList<StreamOptionsFlag>> streamOptions = default;
            Optional<DateTimeOffset> created = default;
            Optional<DateTimeOffset> lastModified = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("input"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            input = LiveEventInput.DeserializeLiveEventInput(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("preview"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            preview = LiveEventPreview.DeserializeLiveEventPreview(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("encoding"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encoding = LiveEventEncoding.DeserializeLiveEventEncoding(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("transcriptions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<LiveEventTranscription> array = new List<LiveEventTranscription>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(LiveEventTranscription.DeserializeLiveEventTranscription(item));
                            }
                            transcriptions = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            resourceState = new LiveEventResourceState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("crossSiteAccessPolicies"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            crossSiteAccessPolicies = CrossSiteAccessPolicies.DeserializeCrossSiteAccessPolicies(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("useStaticHostname"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            useStaticHostname = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("hostnamePrefix"))
                        {
                            hostnamePrefix = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("streamOptions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<StreamOptionsFlag> array = new List<StreamOptionsFlag>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new StreamOptionsFlag(item.GetString()));
                            }
                            streamOptions = array;
                            continue;
                        }
                        if (property0.NameEquals("created"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            created = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastModified"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastModified = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new LiveEventData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, description.Value, input.Value, preview.Value, encoding.Value, Optional.ToList(transcriptions), provisioningState.Value, Optional.ToNullable(resourceState), crossSiteAccessPolicies.Value, Optional.ToNullable(useStaticHostname), hostnamePrefix.Value, Optional.ToList(streamOptions), Optional.ToNullable(created), Optional.ToNullable(lastModified));
        }
    }
}
