// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Media.Models
{
    public partial class TextTrack : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(FileName))
            {
                writer.WritePropertyName("fileName"u8);
                writer.WriteStringValue(FileName);
            }
            if (Core.Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Core.Optional.IsDefined(PlayerVisibility))
            {
                writer.WritePropertyName("playerVisibility"u8);
                writer.WriteStringValue(PlayerVisibility.Value.ToString());
            }
            if (Core.Optional.IsDefined(HlsSettings))
            {
                writer.WritePropertyName("hlsSettings"u8);
                writer.WriteObjectValue(HlsSettings);
            }
            writer.WritePropertyName("@odata.type"u8);
            writer.WriteStringValue(OdataType);
            writer.WriteEndObject();
        }

        internal static TextTrack DeserializeTextTrack(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> fileName = default;
            Core.Optional<string> displayName = default;
            Core.Optional<string> languageCode = default;
            Core.Optional<PlayerVisibility> playerVisibility = default;
            Core.Optional<HlsSettings> hlsSettings = default;
            string odataType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fileName"u8))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("languageCode"u8))
                {
                    languageCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("playerVisibility"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    playerVisibility = new PlayerVisibility(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hlsSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hlsSettings = HlsSettings.DeserializeHlsSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("@odata.type"u8))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
            }
            return new TextTrack(odataType, fileName.Value, displayName.Value, languageCode.Value, Core.Optional.ToNullable(playerVisibility), hlsSettings.Value);
        }
    }
}
