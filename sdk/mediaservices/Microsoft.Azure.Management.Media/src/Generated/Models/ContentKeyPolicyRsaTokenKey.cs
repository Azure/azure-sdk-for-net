// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifies a RSA key for token validation
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.ContentKeyPolicyRsaTokenKey")]
    public partial class ContentKeyPolicyRsaTokenKey : ContentKeyPolicyRestrictionTokenKey
    {
        /// <summary>
        /// Initializes a new instance of the ContentKeyPolicyRsaTokenKey
        /// class.
        /// </summary>
        public ContentKeyPolicyRsaTokenKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContentKeyPolicyRsaTokenKey
        /// class.
        /// </summary>
        /// <param name="exponent">The RSA Parameter exponent</param>
        /// <param name="modulus">The RSA Parameter modulus</param>
        public ContentKeyPolicyRsaTokenKey(byte[] exponent, byte[] modulus)
        {
            Exponent = exponent;
            Modulus = modulus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the RSA Parameter exponent
        /// </summary>
        [JsonProperty(PropertyName = "exponent")]
        public byte[] Exponent { get; set; }

        /// <summary>
        /// Gets or sets the RSA Parameter modulus
        /// </summary>
        [JsonProperty(PropertyName = "modulus")]
        public byte[] Modulus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Exponent == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Exponent");
            }
            if (Modulus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Modulus");
            }
        }
    }
}
