// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifies a configuration for FairPlay licenses.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration")]
    public partial class ContentKeyPolicyFairPlayConfiguration : ContentKeyPolicyConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContentKeyPolicyFairPlayConfiguration class.
        /// </summary>
        public ContentKeyPolicyFairPlayConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ContentKeyPolicyFairPlayConfiguration class.
        /// </summary>
        /// <param name="ask">The key that must be used as FairPlay Application
        /// Secret key.</param>
        /// <param name="fairPlayPfxPassword">The password encrypting FairPlay
        /// certificate in PKCS 12 (pfx) format.</param>
        /// <param name="fairPlayPfx">The Base64 representation of FairPlay
        /// certificate in PKCS 12 (pfx) format (including private
        /// key).</param>
        /// <param name="rentalAndLeaseKeyType">The rental and lease key type.
        /// Possible values include: 'Unknown', 'Undefined', 'DualExpiry',
        /// 'PersistentUnlimited', 'PersistentLimited'</param>
        /// <param name="rentalDuration">The rental duration. Must be greater
        /// than or equal to 0.</param>
        /// <param name="offlineRentalConfiguration">Offline rental
        /// policy</param>
        public ContentKeyPolicyFairPlayConfiguration(byte[] ask, string fairPlayPfxPassword, string fairPlayPfx, ContentKeyPolicyFairPlayRentalAndLeaseKeyType rentalAndLeaseKeyType, long rentalDuration, ContentKeyPolicyFairPlayOfflineRentalConfiguration offlineRentalConfiguration = default(ContentKeyPolicyFairPlayOfflineRentalConfiguration))
        {
            Ask = ask;
            FairPlayPfxPassword = fairPlayPfxPassword;
            FairPlayPfx = fairPlayPfx;
            RentalAndLeaseKeyType = rentalAndLeaseKeyType;
            RentalDuration = rentalDuration;
            OfflineRentalConfiguration = offlineRentalConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the key that must be used as FairPlay Application
        /// Secret key.
        /// </summary>
        [JsonProperty(PropertyName = "ask")]
        public byte[] Ask { get; set; }

        /// <summary>
        /// Gets or sets the password encrypting FairPlay certificate in PKCS
        /// 12 (pfx) format.
        /// </summary>
        [JsonProperty(PropertyName = "fairPlayPfxPassword")]
        public string FairPlayPfxPassword { get; set; }

        /// <summary>
        /// Gets or sets the Base64 representation of FairPlay certificate in
        /// PKCS 12 (pfx) format (including private key).
        /// </summary>
        [JsonProperty(PropertyName = "fairPlayPfx")]
        public string FairPlayPfx { get; set; }

        /// <summary>
        /// Gets or sets the rental and lease key type. Possible values
        /// include: 'Unknown', 'Undefined', 'DualExpiry',
        /// 'PersistentUnlimited', 'PersistentLimited'
        /// </summary>
        [JsonProperty(PropertyName = "rentalAndLeaseKeyType")]
        public ContentKeyPolicyFairPlayRentalAndLeaseKeyType RentalAndLeaseKeyType { get; set; }

        /// <summary>
        /// Gets or sets the rental duration. Must be greater than or equal to
        /// 0.
        /// </summary>
        [JsonProperty(PropertyName = "rentalDuration")]
        public long RentalDuration { get; set; }

        /// <summary>
        /// Gets or sets offline rental policy
        /// </summary>
        [JsonProperty(PropertyName = "offlineRentalConfiguration")]
        public ContentKeyPolicyFairPlayOfflineRentalConfiguration OfflineRentalConfiguration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Ask == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ask");
            }
            if (FairPlayPfxPassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FairPlayPfxPassword");
            }
            if (FairPlayPfx == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FairPlayPfx");
            }
            if (OfflineRentalConfiguration != null)
            {
                OfflineRentalConfiguration.Validate();
            }
        }
    }
}
