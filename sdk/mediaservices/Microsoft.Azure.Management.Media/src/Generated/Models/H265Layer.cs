// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the settings to be used when encoding the input video into a
    /// desired output bitrate layer with the H.265 video codec.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.H265Layer")]
    public partial class H265Layer : H265VideoLayer
    {
        /// <summary>
        /// Initializes a new instance of the H265Layer class.
        /// </summary>
        public H265Layer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the H265Layer class.
        /// </summary>
        /// <param name="bitrate">The average bitrate in bits per second at
        /// which to encode the input video when generating this layer. For
        /// example: a target bitrate of 3000Kbps or 3Mbps means this value
        /// should be 3000000 This is a required field.</param>
        /// <param name="width">The width of the output video for this layer.
        /// The value can be absolute (in pixels) or relative (in percentage).
        /// For example 50% means the output video has half as many pixels in
        /// width as the input.</param>
        /// <param name="height">The height of the output video for this layer.
        /// The value can be absolute (in pixels) or relative (in percentage).
        /// For example 50% means the output video has half as many pixels in
        /// height as the input.</param>
        /// <param name="label">The alphanumeric label for this layer, which
        /// can be used in multiplexing different video and audio layers, or in
        /// naming the output file.</param>
        /// <param name="maxBitrate">The maximum bitrate (in bits per second),
        /// at which the VBV buffer should be assumed to refill. If not
        /// specified, defaults to the same value as bitrate.</param>
        /// <param name="bFrames">The number of B-frames to be used when
        /// encoding this layer.  If not specified, the encoder chooses an
        /// appropriate number based on the video profile and level.</param>
        /// <param name="frameRate">The frame rate (in frames per second) at
        /// which to encode this layer. The value can be in the form of M/N
        /// where M and N are integers (For example, 30000/1001), or in the
        /// form of a number (For example, 30, or 29.97). The encoder enforces
        /// constraints on allowed frame rates based on the profile and level.
        /// If it is not specified, the encoder will use the same frame rate as
        /// the input video.</param>
        /// <param name="slices">The number of slices to be used when encoding
        /// this layer. If not specified, default is zero, which means that
        /// encoder will use a single slice for each frame.</param>
        /// <param name="adaptiveBFrame">Specifies whether or not adaptive
        /// B-frames are to be used when encoding this layer. If not specified,
        /// the encoder will turn it on whenever the video profile permits its
        /// use.</param>
        /// <param name="profile">We currently support Main. Default is Auto.
        /// Possible values include: 'Auto', 'Main'</param>
        /// <param name="level">We currently support Level up to 6.2. The value
        /// can be Auto, or a number that matches the H.265 profile. If not
        /// specified, the default is Auto, which lets the encoder choose the
        /// Level that is appropriate for this layer.</param>
        /// <param name="bufferWindow">The VBV buffer window length. The value
        /// should be in ISO 8601 format. The value should be in the range
        /// [0.1-100] seconds. The default is 5 seconds (for example,
        /// PT5S).</param>
        /// <param name="referenceFrames">The number of reference frames to be
        /// used when encoding this layer. If not specified, the encoder
        /// determines an appropriate number based on the encoder complexity
        /// setting.</param>
        public H265Layer(int bitrate, string width = default(string), string height = default(string), string label = default(string), int? maxBitrate = default(int?), int? bFrames = default(int?), string frameRate = default(string), int? slices = default(int?), bool? adaptiveBFrame = default(bool?), H265VideoProfile? profile = default(H265VideoProfile?), string level = default(string), System.TimeSpan? bufferWindow = default(System.TimeSpan?), int? referenceFrames = default(int?))
            : base(bitrate, width, height, label, maxBitrate, bFrames, frameRate, slices, adaptiveBFrame)
        {
            Profile = profile;
            Level = level;
            BufferWindow = bufferWindow;
            ReferenceFrames = referenceFrames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets we currently support Main. Default is Auto. Possible
        /// values include: 'Auto', 'Main'
        /// </summary>
        [JsonProperty(PropertyName = "profile")]
        public H265VideoProfile? Profile { get; set; }

        /// <summary>
        /// Gets or sets we currently support Level up to 6.2. The value can be
        /// Auto, or a number that matches the H.265 profile. If not specified,
        /// the default is Auto, which lets the encoder choose the Level that
        /// is appropriate for this layer.
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public string Level { get; set; }

        /// <summary>
        /// Gets or sets the VBV buffer window length. The value should be in
        /// ISO 8601 format. The value should be in the range [0.1-100]
        /// seconds. The default is 5 seconds (for example, PT5S).
        /// </summary>
        [JsonProperty(PropertyName = "bufferWindow")]
        public System.TimeSpan? BufferWindow { get; set; }

        /// <summary>
        /// Gets or sets the number of reference frames to be used when
        /// encoding this layer. If not specified, the encoder determines an
        /// appropriate number based on the encoder complexity setting.
        /// </summary>
        [JsonProperty(PropertyName = "referenceFrames")]
        public int? ReferenceFrames { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
