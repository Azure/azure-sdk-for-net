// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes a transcription track in the output of a live event,
    /// generated using speech-to-text transcription. This property is reserved
    /// for future use, any value set on this property will be ignored.
    /// </summary>
    public partial class LiveEventOutputTranscriptionTrack
    {
        /// <summary>
        /// Initializes a new instance of the LiveEventOutputTranscriptionTrack
        /// class.
        /// </summary>
        public LiveEventOutputTranscriptionTrack()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveEventOutputTranscriptionTrack
        /// class.
        /// </summary>
        /// <param name="trackName">The output track name. This property is
        /// reserved for future use, any value set on this property will be
        /// ignored.</param>
        public LiveEventOutputTranscriptionTrack(string trackName)
        {
            TrackName = trackName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the output track name. This property is reserved for
        /// future use, any value set on this property will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "trackName")]
        public string TrackName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TrackName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TrackName");
            }
        }
    }
}
