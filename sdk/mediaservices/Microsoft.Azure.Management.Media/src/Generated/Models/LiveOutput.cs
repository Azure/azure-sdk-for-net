// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Live Output.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LiveOutput : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the LiveOutput class.
        /// </summary>
        public LiveOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveOutput class.
        /// </summary>
        /// <param name="assetName">The asset that the live output will write
        /// to.</param>
        /// <param name="archiveWindowLength">ISO 8601 time between 1 minute to
        /// 25 hours to indicate the maximum content length that can be
        /// archived in the asset for this live output. This also sets the
        /// maximum content length for the rewind window. For example, use
        /// PT1H30M to indicate 1 hour and 30 minutes of archive
        /// window.</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="description">The description of the live
        /// output.</param>
        /// <param name="manifestName">The manifest file name. If not provided,
        /// the service will generate one automatically.</param>
        /// <param name="hls">HTTP Live Streaming (HLS) packing setting for the
        /// live output.</param>
        /// <param name="outputSnapTime">The initial timestamp that the live
        /// output will start at, any content before this value will not be
        /// archived.</param>
        /// <param name="created">The creation time the live output.</param>
        /// <param name="lastModified">The time the live output was last
        /// modified.</param>
        /// <param name="provisioningState">The provisioning state of the live
        /// output.</param>
        /// <param name="resourceState">The resource state of the live output.
        /// Possible values include: 'Creating', 'Running', 'Deleting'</param>
        public LiveOutput(string assetName, System.TimeSpan archiveWindowLength, string id = default(string), string name = default(string), string type = default(string), string description = default(string), string manifestName = default(string), Hls hls = default(Hls), long? outputSnapTime = default(long?), System.DateTime? created = default(System.DateTime?), System.DateTime? lastModified = default(System.DateTime?), string provisioningState = default(string), LiveOutputResourceState? resourceState = default(LiveOutputResourceState?))
            : base(id, name, type)
        {
            Description = description;
            AssetName = assetName;
            ArchiveWindowLength = archiveWindowLength;
            ManifestName = manifestName;
            Hls = hls;
            OutputSnapTime = outputSnapTime;
            Created = created;
            LastModified = lastModified;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description of the live output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the asset that the live output will write to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.assetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Gets or sets ISO 8601 time between 1 minute to 25 hours to indicate
        /// the maximum content length that can be archived in the asset for
        /// this live output. This also sets the maximum content length for the
        /// rewind window. For example, use PT1H30M to indicate 1 hour and 30
        /// minutes of archive window.
        /// </summary>
        [JsonProperty(PropertyName = "properties.archiveWindowLength")]
        public System.TimeSpan ArchiveWindowLength { get; set; }

        /// <summary>
        /// Gets or sets the manifest file name. If not provided, the service
        /// will generate one automatically.
        /// </summary>
        [JsonProperty(PropertyName = "properties.manifestName")]
        public string ManifestName { get; set; }

        /// <summary>
        /// Gets or sets HTTP Live Streaming (HLS) packing setting for the live
        /// output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hls")]
        public Hls Hls { get; set; }

        /// <summary>
        /// Gets or sets the initial timestamp that the live output will start
        /// at, any content before this value will not be archived.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputSnapTime")]
        public long? OutputSnapTime { get; set; }

        /// <summary>
        /// Gets the creation time the live output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; private set; }

        /// <summary>
        /// Gets the time the live output was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTime? LastModified { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the live output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the resource state of the live output. Possible values
        /// include: 'Creating', 'Running', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceState")]
        public LiveOutputResourceState? ResourceState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetName");
            }
        }
    }
}
