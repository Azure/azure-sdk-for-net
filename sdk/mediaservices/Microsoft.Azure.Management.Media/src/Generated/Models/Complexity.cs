// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for Complexity.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ComplexityConverter))]
    public struct Complexity : System.IEquatable<Complexity>
    {
        private Complexity(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Configures the encoder to use settings optimized for faster
        /// encoding. Quality is sacrificed to decrease encoding time.
        /// </summary>
        public static readonly Complexity Speed = "Speed";

        /// <summary>
        /// Configures the encoder to use settings that achieve a balance
        /// between speed and quality.
        /// </summary>
        public static readonly Complexity Balanced = "Balanced";

        /// <summary>
        /// Configures the encoder to use settings optimized to produce higher
        /// quality output at the expense of slower overall encode time.
        /// </summary>
        public static readonly Complexity Quality = "Quality";


        /// <summary>
        /// Underlying value of enum Complexity
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for Complexity
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type Complexity
        /// </summary>
        public bool Equals(Complexity e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to Complexity
        /// </summary>
        public static implicit operator Complexity(string value)
        {
            return new Complexity(value);
        }

        /// <summary>
        /// Implicit operator to convert Complexity to string
        /// </summary>
        public static implicit operator string(Complexity e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum Complexity
        /// </summary>
        public static bool operator == (Complexity e1, Complexity e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum Complexity
        /// </summary>
        public static bool operator != (Complexity e1, Complexity e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for Complexity
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Complexity && Equals((Complexity)obj);
        }

        /// <summary>
        /// Returns for hashCode Complexity
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
