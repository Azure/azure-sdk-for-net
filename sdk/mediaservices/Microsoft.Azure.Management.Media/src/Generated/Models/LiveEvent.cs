// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Live Event.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LiveEvent : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the LiveEvent class.
        /// </summary>
        public LiveEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveEvent class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="input">The Live Event input.</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="description">The Live Event description.</param>
        /// <param name="preview">The Live Event preview.</param>
        /// <param name="encoding">The Live Event encoding.</param>
        /// <param name="provisioningState">The provisioning state of the Live
        /// Event.</param>
        /// <param name="resourceState">The resource state of the Live Event.
        /// Possible values include: 'Stopped', 'Starting', 'Running',
        /// 'Stopping', 'Deleting'</param>
        /// <param name="crossSiteAccessPolicies">The Live Event access
        /// policies.</param>
        /// <param name="useStaticHostname">Specifies whether to use a vanity
        /// url with the Live Event.  This value is specified at creation time
        /// and cannot be updated.</param>
        /// <param name="streamOptions">The options to use for the LiveEvent.
        /// This value is specified at creation time and cannot be updated. The
        /// valid values for the array entry values are 'Default' and
        /// 'LowLatency'.</param>
        /// <param name="created">The exact time the Live Event was
        /// created.</param>
        /// <param name="lastModified">The exact time the Live Event was last
        /// modified.</param>
        public LiveEvent(string location, LiveEventInput input, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), LiveEventPreview preview = default(LiveEventPreview), LiveEventEncoding encoding = default(LiveEventEncoding), string provisioningState = default(string), LiveEventResourceState? resourceState = default(LiveEventResourceState?), CrossSiteAccessPolicies crossSiteAccessPolicies = default(CrossSiteAccessPolicies), bool? useStaticHostname = default(bool?), IList<StreamOptionsFlag?> streamOptions = default(IList<StreamOptionsFlag?>), System.DateTime? created = default(System.DateTime?), System.DateTime? lastModified = default(System.DateTime?))
            : base(location, id, name, type, tags)
        {
            Description = description;
            Input = input;
            Preview = preview;
            Encoding = encoding;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            CrossSiteAccessPolicies = crossSiteAccessPolicies;
            UseStaticHostname = useStaticHostname;
            StreamOptions = streamOptions;
            Created = created;
            LastModified = lastModified;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Live Event description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Live Event input.
        /// </summary>
        [JsonProperty(PropertyName = "properties.input")]
        public LiveEventInput Input { get; set; }

        /// <summary>
        /// Gets or sets the Live Event preview.
        /// </summary>
        [JsonProperty(PropertyName = "properties.preview")]
        public LiveEventPreview Preview { get; set; }

        /// <summary>
        /// Gets or sets the Live Event encoding.
        /// </summary>
        [JsonProperty(PropertyName = "properties.encoding")]
        public LiveEventEncoding Encoding { get; set; }

        /// <summary>
        /// Gets the provisioning state of the Live Event.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the resource state of the Live Event. Possible values include:
        /// 'Stopped', 'Starting', 'Running', 'Stopping', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceState")]
        public LiveEventResourceState? ResourceState { get; private set; }

        /// <summary>
        /// Gets or sets the Live Event access policies.
        /// </summary>
        [JsonProperty(PropertyName = "properties.crossSiteAccessPolicies")]
        public CrossSiteAccessPolicies CrossSiteAccessPolicies { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to use a vanity url with the Live
        /// Event.  This value is specified at creation time and cannot be
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.useStaticHostname")]
        public bool? UseStaticHostname { get; set; }

        /// <summary>
        /// Gets or sets the options to use for the LiveEvent.  This value is
        /// specified at creation time and cannot be updated. The valid values
        /// for the array entry values are 'Default' and 'LowLatency'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.streamOptions")]
        public IList<StreamOptionsFlag?> StreamOptions { get; set; }

        /// <summary>
        /// Gets the exact time the Live Event was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; private set; }

        /// <summary>
        /// Gets the exact time the Live Event was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTime? LastModified { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Input == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Input");
            }
            if (Input != null)
            {
                Input.Validate();
            }
        }
    }
}
