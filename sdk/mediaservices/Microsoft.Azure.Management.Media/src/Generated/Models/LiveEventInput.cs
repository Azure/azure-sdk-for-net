// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The live event input.
    /// </summary>
    public partial class LiveEventInput
    {
        /// <summary>
        /// Initializes a new instance of the LiveEventInput class.
        /// </summary>
        public LiveEventInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveEventInput class.
        /// </summary>
        /// <param name="streamingProtocol">The input protocol for the live
        /// event. This is specified at creation time and cannot be updated.
        /// Possible values include: 'FragmentedMP4', 'RTMP'</param>
        /// <param name="accessControl">Access control for live event
        /// input.</param>
        /// <param name="keyFrameIntervalDuration">ISO 8601 time duration of
        /// the key frame interval duration of the input. This value sets the
        /// EXT-X-TARGETDURATION property in the HLS output. For example, use
        /// PT2S to indicate 2 seconds. Leave the value empty for encoding live
        /// events.</param>
        /// <param name="accessToken">A UUID in string form to uniquely
        /// identify the stream. This can be specified at creation time but
        /// cannot be updated. If omitted, the service will generate a unique
        /// value.</param>
        /// <param name="endpoints">The input endpoints for the live
        /// event.</param>
        public LiveEventInput(LiveEventInputProtocol streamingProtocol, LiveEventInputAccessControl accessControl = default(LiveEventInputAccessControl), string keyFrameIntervalDuration = default(string), string accessToken = default(string), IList<LiveEventEndpoint> endpoints = default(IList<LiveEventEndpoint>))
        {
            StreamingProtocol = streamingProtocol;
            AccessControl = accessControl;
            KeyFrameIntervalDuration = keyFrameIntervalDuration;
            AccessToken = accessToken;
            Endpoints = endpoints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the input protocol for the live event. This is
        /// specified at creation time and cannot be updated. Possible values
        /// include: 'FragmentedMP4', 'RTMP'
        /// </summary>
        [JsonProperty(PropertyName = "streamingProtocol")]
        public LiveEventInputProtocol StreamingProtocol { get; set; }

        /// <summary>
        /// Gets or sets access control for live event input.
        /// </summary>
        [JsonProperty(PropertyName = "accessControl")]
        public LiveEventInputAccessControl AccessControl { get; set; }

        /// <summary>
        /// Gets or sets ISO 8601 time duration of the key frame interval
        /// duration of the input. This value sets the EXT-X-TARGETDURATION
        /// property in the HLS output. For example, use PT2S to indicate 2
        /// seconds. Leave the value empty for encoding live events.
        /// </summary>
        [JsonProperty(PropertyName = "keyFrameIntervalDuration")]
        public string KeyFrameIntervalDuration { get; set; }

        /// <summary>
        /// Gets or sets a UUID in string form to uniquely identify the stream.
        /// This can be specified at creation time but cannot be updated. If
        /// omitted, the service will generate a unique value.
        /// </summary>
        [JsonProperty(PropertyName = "accessToken")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the input endpoints for the live event.
        /// </summary>
        [JsonProperty(PropertyName = "endpoints")]
        public IList<LiveEventEndpoint> Endpoints { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
