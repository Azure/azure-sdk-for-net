// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for H265VideoProfile.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(H265VideoProfileConverter))]
    public struct H265VideoProfile : System.IEquatable<H265VideoProfile>
    {
        private H265VideoProfile(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Tells the encoder to automatically determine the appropriate H.265
        /// profile.
        /// </summary>
        public static readonly H265VideoProfile Auto = "Auto";

        /// <summary>
        /// Main profile
        /// (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier)
        /// </summary>
        public static readonly H265VideoProfile Main = "Main";


        /// <summary>
        /// Underlying value of enum H265VideoProfile
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for H265VideoProfile
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type H265VideoProfile
        /// </summary>
        public bool Equals(H265VideoProfile e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to H265VideoProfile
        /// </summary>
        public static implicit operator H265VideoProfile(string value)
        {
            return new H265VideoProfile(value);
        }

        /// <summary>
        /// Implicit operator to convert H265VideoProfile to string
        /// </summary>
        public static implicit operator string(H265VideoProfile e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum H265VideoProfile
        /// </summary>
        public static bool operator == (H265VideoProfile e1, H265VideoProfile e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum H265VideoProfile
        /// </summary>
        public static bool operator != (H265VideoProfile e1, H265VideoProfile e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for H265VideoProfile
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is H265VideoProfile && Equals((H265VideoProfile)obj);
        }

        /// <summary>
        /// Returns for hashCode H265VideoProfile
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
