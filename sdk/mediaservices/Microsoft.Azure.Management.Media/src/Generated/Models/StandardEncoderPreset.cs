// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes all the settings to be used when encoding the input video
    /// with the Standard Encoder.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.StandardEncoderPreset")]
    public partial class StandardEncoderPreset : Preset
    {
        /// <summary>
        /// Initializes a new instance of the StandardEncoderPreset class.
        /// </summary>
        public StandardEncoderPreset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StandardEncoderPreset class.
        /// </summary>
        /// <param name="codecs">The list of codecs to be used when encoding
        /// the input video.</param>
        /// <param name="formats">The list of outputs to be produced by the
        /// encoder.</param>
        /// <param name="filters">One or more filtering operations that are
        /// applied to the input media before encoding.</param>
        public StandardEncoderPreset(IList<Codec> codecs, IList<Format> formats, Filters filters = default(Filters))
        {
            Filters = filters;
            Codecs = codecs;
            Formats = formats;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets one or more filtering operations that are applied to
        /// the input media before encoding.
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public Filters Filters { get; set; }

        /// <summary>
        /// Gets or sets the list of codecs to be used when encoding the input
        /// video.
        /// </summary>
        [JsonProperty(PropertyName = "codecs")]
        public IList<Codec> Codecs { get; set; }

        /// <summary>
        /// Gets or sets the list of outputs to be produced by the encoder.
        /// </summary>
        [JsonProperty(PropertyName = "formats")]
        public IList<Format> Formats { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Codecs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Codecs");
            }
            if (Formats == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Formats");
            }
            if (Formats != null)
            {
                foreach (var element in Formats)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
