// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a text track in an asset. A text track is usually used for
    /// sparse data related to the audio or video tracks.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.TextTrack")]
    public partial class TextTrack : TrackBase
    {
        /// <summary>
        /// Initializes a new instance of the TextTrack class.
        /// </summary>
        public TextTrack()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TextTrack class.
        /// </summary>
        /// <param name="fileName">The file name to the source file. This file
        /// is located in the storage container of the asset.</param>
        /// <param name="displayName">The display name of the text track on a
        /// video player. In HLS, this maps to the NAME attribute of
        /// EXT-X-MEDIA.</param>
        /// <param name="languageCode">The RFC5646 language code for the text
        /// track.</param>
        /// <param name="playerVisibility">When PlayerVisibility is set to
        /// "Visible", the text track will be present in the DASH manifest or
        /// HLS playlist when requested by a client. When the PlayerVisibility
        /// is set to "Hidden", the text will not be available to the client.
        /// The default value is "Visible". Possible values include: 'Hidden',
        /// 'Visible'</param>
        /// <param name="hlsSettings">The HLS specific setting for the text
        /// track.</param>
        public TextTrack(string fileName = default(string), string displayName = default(string), string languageCode = default(string), Visibility? playerVisibility = default(Visibility?), HlsSettings hlsSettings = default(HlsSettings))
        {
            FileName = fileName;
            DisplayName = displayName;
            LanguageCode = languageCode;
            PlayerVisibility = playerVisibility;
            HlsSettings = hlsSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the file name to the source file. This file is located
        /// in the storage container of the asset.
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the display name of the text track on a video player.
        /// In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets the RFC5646 language code for the text track.
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; private set; }

        /// <summary>
        /// Gets or sets when PlayerVisibility is set to "Visible", the text
        /// track will be present in the DASH manifest or HLS playlist when
        /// requested by a client. When the PlayerVisibility is set to
        /// "Hidden", the text will not be available to the client. The default
        /// value is "Visible". Possible values include: 'Hidden', 'Visible'
        /// </summary>
        [JsonProperty(PropertyName = "playerVisibility")]
        public Visibility? PlayerVisibility { get; set; }

        /// <summary>
        /// Gets or sets the HLS specific setting for the text track.
        /// </summary>
        [JsonProperty(PropertyName = "hlsSettings")]
        public HlsSettings HlsSettings { get; set; }

    }
}
