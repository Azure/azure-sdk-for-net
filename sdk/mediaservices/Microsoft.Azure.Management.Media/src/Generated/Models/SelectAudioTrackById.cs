// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Select audio tracks from the input by specifying a track identifier.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.SelectAudioTrackById")]
    public partial class SelectAudioTrackById : AudioTrackDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the SelectAudioTrackById class.
        /// </summary>
        public SelectAudioTrackById()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SelectAudioTrackById class.
        /// </summary>
        /// <param name="trackId">Track identifier to select</param>
        /// <param name="channelMapping">Optional designation for single
        /// channel audio tracks.  Can be used to combine the tracks into
        /// stereo or multi-channel audio tracks. Possible values include:
        /// 'FrontLeft', 'FrontRight', 'Center', 'LowFrequencyEffects',
        /// 'BackLeft', 'BackRight', 'StereoLeft', 'StereoRight'</param>
        public SelectAudioTrackById(long trackId, ChannelMapping? channelMapping = default(ChannelMapping?))
            : base(channelMapping)
        {
            TrackId = trackId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets track identifier to select
        /// </summary>
        [JsonProperty(PropertyName = "trackId")]
        public long TrackId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
