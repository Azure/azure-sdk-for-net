// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for H265Complexity.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(H265ComplexityConverter))]
    public struct H265Complexity : System.IEquatable<H265Complexity>
    {
        private H265Complexity(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Tells the encoder to use settings that are optimized for faster
        /// encoding. Quality is sacrificed to decrease encoding time.
        /// </summary>
        public static readonly H265Complexity Speed = "Speed";

        /// <summary>
        /// Tells the encoder to use settings that achieve a balance between
        /// speed and quality.
        /// </summary>
        public static readonly H265Complexity Balanced = "Balanced";

        /// <summary>
        /// Tells the encoder to use settings that are optimized to produce
        /// higher quality output at the expense of slower overall encode time.
        /// </summary>
        public static readonly H265Complexity Quality = "Quality";


        /// <summary>
        /// Underlying value of enum H265Complexity
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for H265Complexity
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type H265Complexity
        /// </summary>
        public bool Equals(H265Complexity e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to H265Complexity
        /// </summary>
        public static implicit operator H265Complexity(string value)
        {
            return new H265Complexity(value);
        }

        /// <summary>
        /// Implicit operator to convert H265Complexity to string
        /// </summary>
        public static implicit operator string(H265Complexity e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum H265Complexity
        /// </summary>
        public static bool operator == (H265Complexity e1, H265Complexity e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum H265Complexity
        /// </summary>
        public static bool operator != (H265Complexity e1, H265Complexity e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for H265Complexity
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is H265Complexity && Equals((H265Complexity)obj);
        }

        /// <summary>
        /// Returns for hashCode H265Complexity
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
