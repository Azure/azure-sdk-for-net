// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for FaceRedactorMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(FaceRedactorModeConverter))]
    public struct FaceRedactorMode : System.IEquatable<FaceRedactorMode>
    {
        private FaceRedactorMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Analyze mode detects faces and outputs a metadata file with the
        /// results. Allows editing of the metadata file before faces are
        /// blurred with Redact mode.
        /// </summary>
        public static readonly FaceRedactorMode Analyze = "Analyze";

        /// <summary>
        /// Redact mode consumes the metadata file from Analyze mode and
        /// redacts the faces found.
        /// </summary>
        public static readonly FaceRedactorMode Redact = "Redact";

        /// <summary>
        /// Combined mode does the Analyze and Redact steps in one pass when
        /// editing the analyzed faces is not desired.
        /// </summary>
        public static readonly FaceRedactorMode Combined = "Combined";


        /// <summary>
        /// Underlying value of enum FaceRedactorMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for FaceRedactorMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type FaceRedactorMode
        /// </summary>
        public bool Equals(FaceRedactorMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to FaceRedactorMode
        /// </summary>
        public static implicit operator FaceRedactorMode(string value)
        {
            return new FaceRedactorMode(value);
        }

        /// <summary>
        /// Implicit operator to convert FaceRedactorMode to string
        /// </summary>
        public static implicit operator string(FaceRedactorMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum FaceRedactorMode
        /// </summary>
        public static bool operator == (FaceRedactorMode e1, FaceRedactorMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum FaceRedactorMode
        /// </summary>
        public static bool operator != (FaceRedactorMode e1, FaceRedactorMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for FaceRedactorMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is FaceRedactorMode && Equals((FaceRedactorMode)obj);
        }

        /// <summary>
        /// Returns for hashCode FaceRedactorMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
