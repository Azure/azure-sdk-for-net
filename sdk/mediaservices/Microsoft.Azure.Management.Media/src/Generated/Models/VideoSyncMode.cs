// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for VideoSyncMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(VideoSyncModeConverter))]
    public struct VideoSyncMode : System.IEquatable<VideoSyncMode>
    {
        private VideoSyncMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// This is the default method. Chooses between Cfr and Vfr depending
        /// on muxer capabilities. For output format MP4, the default mode is
        /// Cfr.
        /// </summary>
        public static readonly VideoSyncMode Auto = "Auto";

        /// <summary>
        /// The presentation timestamps on frames are passed through from the
        /// input file to the output file writer. Recommended when the input
        /// source has variable frame rate, and are attempting to produce
        /// multiple layers for adaptive streaming in the output which have
        /// aligned GOP boundaries. Note: if two or more frames in the input
        /// have duplicate timestamps, then the output will also have the same
        /// behavior
        /// </summary>
        public static readonly VideoSyncMode Passthrough = "Passthrough";

        /// <summary>
        /// Input frames will be repeated and/or dropped as needed to achieve
        /// exactly the requested constant frame rate. Recommended when the
        /// output frame rate is explicitly set at a specified value
        /// </summary>
        public static readonly VideoSyncMode Cfr = "Cfr";

        /// <summary>
        /// Similar to the Passthrough mode, but if the input has frames that
        /// have duplicate timestamps, then only one frame is passed through to
        /// the output, and others are dropped. Recommended when the number of
        /// output frames is expected to be equal to the number of input
        /// frames. For example, the output is used to calculate a quality
        /// metric like PSNR against the input
        /// </summary>
        public static readonly VideoSyncMode Vfr = "Vfr";


        /// <summary>
        /// Underlying value of enum VideoSyncMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for VideoSyncMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type VideoSyncMode
        /// </summary>
        public bool Equals(VideoSyncMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to VideoSyncMode
        /// </summary>
        public static implicit operator VideoSyncMode(string value)
        {
            return new VideoSyncMode(value);
        }

        /// <summary>
        /// Implicit operator to convert VideoSyncMode to string
        /// </summary>
        public static implicit operator string(VideoSyncMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum VideoSyncMode
        /// </summary>
        public static bool operator == (VideoSyncMode e1, VideoSyncMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum VideoSyncMode
        /// </summary>
        public static bool operator != (VideoSyncMode e1, VideoSyncMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for VideoSyncMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is VideoSyncMode && Equals((VideoSyncMode)obj);
        }

        /// <summary>
        /// Returns for hashCode VideoSyncMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
