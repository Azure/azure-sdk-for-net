// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ChannelMapping.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ChannelMappingConverter))]
    public struct ChannelMapping : System.IEquatable<ChannelMapping>
    {
        private ChannelMapping(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The Front Left Channel.
        /// </summary>
        public static readonly ChannelMapping FrontLeft = "FrontLeft";

        /// <summary>
        /// The Front Right Channel.
        /// </summary>
        public static readonly ChannelMapping FrontRight = "FrontRight";

        /// <summary>
        /// The Center Channel.
        /// </summary>
        public static readonly ChannelMapping Center = "Center";

        /// <summary>
        /// Low Frequency Effects Channel.  Sometimes referred to as the
        /// Subwoofer.
        /// </summary>
        public static readonly ChannelMapping LowFrequencyEffects = "LowFrequencyEffects";

        /// <summary>
        /// The Back Left Channel.  Sometimes referred to as the Left Surround
        /// Channel.
        /// </summary>
        public static readonly ChannelMapping BackLeft = "BackLeft";

        /// <summary>
        /// The Back Right Channel.  Sometimes referred to as the Right
        /// Surround Channel.
        /// </summary>
        public static readonly ChannelMapping BackRight = "BackRight";

        /// <summary>
        /// The Left Stereo channel.  Sometimes referred to as Down Mix Left.
        /// </summary>
        public static readonly ChannelMapping StereoLeft = "StereoLeft";

        /// <summary>
        /// The Right Stereo channel.  Sometimes referred to as Down Mix Right.
        /// </summary>
        public static readonly ChannelMapping StereoRight = "StereoRight";


        /// <summary>
        /// Underlying value of enum ChannelMapping
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ChannelMapping
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ChannelMapping
        /// </summary>
        public bool Equals(ChannelMapping e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ChannelMapping
        /// </summary>
        public static implicit operator ChannelMapping(string value)
        {
            return new ChannelMapping(value);
        }

        /// <summary>
        /// Implicit operator to convert ChannelMapping to string
        /// </summary>
        public static implicit operator string(ChannelMapping e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ChannelMapping
        /// </summary>
        public static bool operator == (ChannelMapping e1, ChannelMapping e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ChannelMapping
        /// </summary>
        public static bool operator != (ChannelMapping e1, ChannelMapping e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ChannelMapping
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ChannelMapping && Equals((ChannelMapping)obj);
        }

        /// <summary>
        /// Returns for hashCode ChannelMapping
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
