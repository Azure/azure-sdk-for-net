// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Configures the Play Right in the PlayReady license.
    /// </summary>
    public partial class ContentKeyPolicyPlayReadyPlayRight
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContentKeyPolicyPlayReadyPlayRight class.
        /// </summary>
        public ContentKeyPolicyPlayReadyPlayRight()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ContentKeyPolicyPlayReadyPlayRight class.
        /// </summary>
        /// <param name="digitalVideoOnlyContentRestriction">Enables the Image
        /// Constraint For Analog Component Video Restriction in the
        /// license.</param>
        /// <param
        /// name="imageConstraintForAnalogComponentVideoRestriction">Enables
        /// the Image Constraint For Analog Component Video Restriction in the
        /// license.</param>
        /// <param
        /// name="imageConstraintForAnalogComputerMonitorRestriction">Enables
        /// the Image Constraint For Analog Component Video Restriction in the
        /// license.</param>
        /// <param name="allowPassingVideoContentToUnknownOutput">Configures
        /// Unknown output handling settings of the license. Possible values
        /// include: 'Unknown', 'NotAllowed', 'Allowed',
        /// 'AllowedWithVideoConstriction'</param>
        /// <param name="firstPlayExpiration">The amount of time that the
        /// license is valid after the license is first used to play
        /// content.</param>
        /// <param name="scmsRestriction">Configures the Serial Copy Management
        /// System (SCMS) in the license. Must be between 0 and 3
        /// inclusive.</param>
        /// <param name="agcAndColorStripeRestriction">Configures Automatic
        /// Gain Control (AGC) and Color Stripe in the license. Must be between
        /// 0 and 3 inclusive.</param>
        /// <param name="explicitAnalogTelevisionOutputRestriction">Configures
        /// the Explicit Analog Television Output Restriction in the license.
        /// Configuration data must be between 0 and 3 inclusive.</param>
        /// <param name="uncompressedDigitalVideoOpl">Specifies the output
        /// protection level for uncompressed digital video.</param>
        /// <param name="compressedDigitalVideoOpl">Specifies the output
        /// protection level for compressed digital video.</param>
        /// <param name="analogVideoOpl">Specifies the output protection level
        /// for compressed digital audio.</param>
        /// <param name="compressedDigitalAudioOpl">Specifies the output
        /// protection level for compressed digital audio.</param>
        /// <param name="uncompressedDigitalAudioOpl">Specifies the output
        /// protection level for uncompressed digital audio.</param>
        public ContentKeyPolicyPlayReadyPlayRight(bool digitalVideoOnlyContentRestriction, bool imageConstraintForAnalogComponentVideoRestriction, bool imageConstraintForAnalogComputerMonitorRestriction, ContentKeyPolicyPlayReadyUnknownOutputPassingOption allowPassingVideoContentToUnknownOutput, System.TimeSpan? firstPlayExpiration = default(System.TimeSpan?), int? scmsRestriction = default(int?), int? agcAndColorStripeRestriction = default(int?), ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction explicitAnalogTelevisionOutputRestriction = default(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction), int? uncompressedDigitalVideoOpl = default(int?), int? compressedDigitalVideoOpl = default(int?), int? analogVideoOpl = default(int?), int? compressedDigitalAudioOpl = default(int?), int? uncompressedDigitalAudioOpl = default(int?))
        {
            FirstPlayExpiration = firstPlayExpiration;
            ScmsRestriction = scmsRestriction;
            AgcAndColorStripeRestriction = agcAndColorStripeRestriction;
            ExplicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
            DigitalVideoOnlyContentRestriction = digitalVideoOnlyContentRestriction;
            ImageConstraintForAnalogComponentVideoRestriction = imageConstraintForAnalogComponentVideoRestriction;
            ImageConstraintForAnalogComputerMonitorRestriction = imageConstraintForAnalogComputerMonitorRestriction;
            AllowPassingVideoContentToUnknownOutput = allowPassingVideoContentToUnknownOutput;
            UncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
            CompressedDigitalVideoOpl = compressedDigitalVideoOpl;
            AnalogVideoOpl = analogVideoOpl;
            CompressedDigitalAudioOpl = compressedDigitalAudioOpl;
            UncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the amount of time that the license is valid after the
        /// license is first used to play content.
        /// </summary>
        [JsonProperty(PropertyName = "firstPlayExpiration")]
        public System.TimeSpan? FirstPlayExpiration { get; set; }

        /// <summary>
        /// Gets or sets configures the Serial Copy Management System (SCMS) in
        /// the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [JsonProperty(PropertyName = "scmsRestriction")]
        public int? ScmsRestriction { get; set; }

        /// <summary>
        /// Gets or sets configures Automatic Gain Control (AGC) and Color
        /// Stripe in the license. Must be between 0 and 3 inclusive.
        /// </summary>
        [JsonProperty(PropertyName = "agcAndColorStripeRestriction")]
        public int? AgcAndColorStripeRestriction { get; set; }

        /// <summary>
        /// Gets or sets configures the Explicit Analog Television Output
        /// Restriction in the license. Configuration data must be between 0
        /// and 3 inclusive.
        /// </summary>
        [JsonProperty(PropertyName = "explicitAnalogTelevisionOutputRestriction")]
        public ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction ExplicitAnalogTelevisionOutputRestriction { get; set; }

        /// <summary>
        /// Gets or sets enables the Image Constraint For Analog Component
        /// Video Restriction in the license.
        /// </summary>
        [JsonProperty(PropertyName = "digitalVideoOnlyContentRestriction")]
        public bool DigitalVideoOnlyContentRestriction { get; set; }

        /// <summary>
        /// Gets or sets enables the Image Constraint For Analog Component
        /// Video Restriction in the license.
        /// </summary>
        [JsonProperty(PropertyName = "imageConstraintForAnalogComponentVideoRestriction")]
        public bool ImageConstraintForAnalogComponentVideoRestriction { get; set; }

        /// <summary>
        /// Gets or sets enables the Image Constraint For Analog Component
        /// Video Restriction in the license.
        /// </summary>
        [JsonProperty(PropertyName = "imageConstraintForAnalogComputerMonitorRestriction")]
        public bool ImageConstraintForAnalogComputerMonitorRestriction { get; set; }

        /// <summary>
        /// Gets or sets configures Unknown output handling settings of the
        /// license. Possible values include: 'Unknown', 'NotAllowed',
        /// 'Allowed', 'AllowedWithVideoConstriction'
        /// </summary>
        [JsonProperty(PropertyName = "allowPassingVideoContentToUnknownOutput")]
        public ContentKeyPolicyPlayReadyUnknownOutputPassingOption AllowPassingVideoContentToUnknownOutput { get; set; }

        /// <summary>
        /// Gets or sets specifies the output protection level for uncompressed
        /// digital video.
        /// </summary>
        [JsonProperty(PropertyName = "uncompressedDigitalVideoOpl")]
        public int? UncompressedDigitalVideoOpl { get; set; }

        /// <summary>
        /// Gets or sets specifies the output protection level for compressed
        /// digital video.
        /// </summary>
        [JsonProperty(PropertyName = "compressedDigitalVideoOpl")]
        public int? CompressedDigitalVideoOpl { get; set; }

        /// <summary>
        /// Gets or sets specifies the output protection level for compressed
        /// digital audio.
        /// </summary>
        [JsonProperty(PropertyName = "analogVideoOpl")]
        public int? AnalogVideoOpl { get; set; }

        /// <summary>
        /// Gets or sets specifies the output protection level for compressed
        /// digital audio.
        /// </summary>
        [JsonProperty(PropertyName = "compressedDigitalAudioOpl")]
        public int? CompressedDigitalAudioOpl { get; set; }

        /// <summary>
        /// Gets or sets specifies the output protection level for uncompressed
        /// digital audio.
        /// </summary>
        [JsonProperty(PropertyName = "uncompressedDigitalAudioOpl")]
        public int? UncompressedDigitalAudioOpl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExplicitAnalogTelevisionOutputRestriction != null)
            {
                ExplicitAnalogTelevisionOutputRestriction.Validate();
            }
        }
    }
}
