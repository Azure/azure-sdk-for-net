// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents an output file produced.
    /// </summary>
    public partial class OutputFile
    {
        /// <summary>
        /// Initializes a new instance of the OutputFile class.
        /// </summary>
        public OutputFile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OutputFile class.
        /// </summary>
        /// <param name="labels">The list of labels that describe how the
        /// encoder should multiplex video and audio into an output file. For
        /// example, if the encoder is producing two video layers with labels
        /// v1 and v2, and one audio layer with label a1, then an array like
        /// '[v1, a1]' tells the encoder to produce an output file with the
        /// video track represented by v1 and the audio track represented by
        /// a1.</param>
        public OutputFile(IList<string> labels)
        {
            Labels = labels;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the list of labels that describe how the encoder
        /// should multiplex video and audio into an output file. For example,
        /// if the encoder is producing two video layers with labels v1 and v2,
        /// and one audio layer with label a1, then an array like '[v1, a1]'
        /// tells the encoder to produce an output file with the video track
        /// represented by v1 and the audio track represented by a1.
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<string> Labels { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Labels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Labels");
            }
        }
    }
}
