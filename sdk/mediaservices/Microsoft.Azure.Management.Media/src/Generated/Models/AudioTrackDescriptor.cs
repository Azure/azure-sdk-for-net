// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A TrackSelection to select audio tracks.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.AudioTrackDescriptor")]
    public partial class AudioTrackDescriptor : TrackDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the AudioTrackDescriptor class.
        /// </summary>
        public AudioTrackDescriptor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AudioTrackDescriptor class.
        /// </summary>
        /// <param name="channelMapping">Optional designation for single
        /// channel audio tracks.  Can be used to combine the tracks into
        /// stereo or multi-channel audio tracks. Possible values include:
        /// 'FrontLeft', 'FrontRight', 'Center', 'LowFrequencyEffects',
        /// 'BackLeft', 'BackRight', 'StereoLeft', 'StereoRight'</param>
        public AudioTrackDescriptor(ChannelMapping? channelMapping = default(ChannelMapping?))
        {
            ChannelMapping = channelMapping;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets optional designation for single channel audio tracks.
        /// Can be used to combine the tracks into stereo or multi-channel
        /// audio tracks. Possible values include: 'FrontLeft', 'FrontRight',
        /// 'Center', 'LowFrequencyEffects', 'BackLeft', 'BackRight',
        /// 'StereoLeft', 'StereoRight'
        /// </summary>
        [JsonProperty(PropertyName = "channelMapping")]
        public ChannelMapping? ChannelMapping { get; set; }

    }
}
