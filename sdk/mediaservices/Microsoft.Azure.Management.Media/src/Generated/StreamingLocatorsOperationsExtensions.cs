// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StreamingLocatorsOperations.
    /// </summary>
    public static partial class StreamingLocatorsOperationsExtensions
    {
            /// <summary>
            /// List Streaming Locators
            /// </summary>
            /// <remarks>
            /// Lists the Streaming Locators in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<StreamingLocator> List(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, ODataQuery<StreamingLocator> odataQuery = default(ODataQuery<StreamingLocator>))
            {
                return operations.ListAsync(resourceGroupName, accountName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Streaming Locators
            /// </summary>
            /// <remarks>
            /// Lists the Streaming Locators in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingLocator>> ListAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, ODataQuery<StreamingLocator> odataQuery = default(ODataQuery<StreamingLocator>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Get the details of a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            public static StreamingLocator Get(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName)
            {
                return operations.GetAsync(resourceGroupName, accountName, streamingLocatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Get the details of a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingLocator> GetAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, streamingLocatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Create a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            public static StreamingLocator Create(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, StreamingLocator parameters)
            {
                return operations.CreateAsync(resourceGroupName, accountName, streamingLocatorName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Create a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingLocator> CreateAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, StreamingLocator parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, streamingLocatorName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Deletes a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            public static void Delete(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, streamingLocatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Streaming Locator
            /// </summary>
            /// <remarks>
            /// Deletes a Streaming Locator in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, streamingLocatorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Content Keys
            /// </summary>
            /// <remarks>
            /// List Content Keys used by this Streaming Locator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            public static ListContentKeysResponse ListContentKeys(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName)
            {
                return operations.ListContentKeysAsync(resourceGroupName, accountName, streamingLocatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Content Keys
            /// </summary>
            /// <remarks>
            /// List Content Keys used by this Streaming Locator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListContentKeysResponse> ListContentKeysAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContentKeysWithHttpMessagesAsync(resourceGroupName, accountName, streamingLocatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Paths
            /// </summary>
            /// <remarks>
            /// List Paths supported by this Streaming Locator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            public static ListPathsResponse ListPaths(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName)
            {
                return operations.ListPathsAsync(resourceGroupName, accountName, streamingLocatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Paths
            /// </summary>
            /// <remarks>
            /// List Paths supported by this Streaming Locator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingLocatorName'>
            /// The Streaming Locator name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListPathsResponse> ListPathsAsync(this IStreamingLocatorsOperations operations, string resourceGroupName, string accountName, string streamingLocatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPathsWithHttpMessagesAsync(resourceGroupName, accountName, streamingLocatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Streaming Locators
            /// </summary>
            /// <remarks>
            /// Lists the Streaming Locators in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StreamingLocator> ListNext(this IStreamingLocatorsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Streaming Locators
            /// </summary>
            /// <remarks>
            /// Lists the Streaming Locators in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingLocator>> ListNextAsync(this IStreamingLocatorsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
