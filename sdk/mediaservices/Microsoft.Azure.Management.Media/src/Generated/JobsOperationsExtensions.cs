// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobsOperations.
    /// </summary>
    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Lists all of the Jobs for the Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> List(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, ODataQuery<Job> odataQuery = default(ODataQuery<Job>))
            {
                return operations.ListAsync(resourceGroupName, accountName, transformName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Lists all of the Jobs for the Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, ODataQuery<Job> odataQuery = default(ODataQuery<Job>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, transformName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Job
            /// </summary>
            /// <remarks>
            /// Gets a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            public static Job Get(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName)
            {
                return operations.GetAsync(resourceGroupName, accountName, transformName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Job
            /// </summary>
            /// <remarks>
            /// Gets a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, transformName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Job
            /// </summary>
            /// <remarks>
            /// Creates a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            public static Job Create(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, Job parameters)
            {
                return operations.CreateAsync(resourceGroupName, accountName, transformName, jobName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Job
            /// </summary>
            /// <remarks>
            /// Creates a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> CreateAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, Job parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, transformName, jobName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Job
            /// </summary>
            /// <remarks>
            /// Deletes a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            public static void Delete(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, transformName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Job
            /// </summary>
            /// <remarks>
            /// Deletes a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, transformName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Job
            /// </summary>
            /// <remarks>
            /// Update is only supported for description and priority. Updating Priority
            /// will take effect when the Job state is Queued or Scheduled and depending on
            /// the timing the priority update may be ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            public static Job Update(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, Job parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, transformName, jobName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Job
            /// </summary>
            /// <remarks>
            /// Update is only supported for description and priority. Updating Priority
            /// will take effect when the Job state is Queued or Scheduled and depending on
            /// the timing the priority update may be ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> UpdateAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, Job parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, transformName, jobName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel Job
            /// </summary>
            /// <remarks>
            /// Cancel a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            public static void CancelJob(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName)
            {
                operations.CancelJobAsync(resourceGroupName, accountName, transformName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel Job
            /// </summary>
            /// <remarks>
            /// Cancel a Job.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='jobName'>
            /// The Job name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelJobAsync(this IJobsOperations operations, string resourceGroupName, string accountName, string transformName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelJobWithHttpMessagesAsync(resourceGroupName, accountName, transformName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Lists all of the Jobs for the Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Jobs
            /// </summary>
            /// <remarks>
            /// Lists all of the Jobs for the Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
