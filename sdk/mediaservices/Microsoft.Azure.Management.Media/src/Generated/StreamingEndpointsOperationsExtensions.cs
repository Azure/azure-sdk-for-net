// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StreamingEndpointsOperations.
    /// </summary>
    public static partial class StreamingEndpointsOperationsExtensions
    {
            /// <summary>
            /// List StreamingEndpoints
            /// </summary>
            /// <remarks>
            /// Lists the streaming endpoints in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            public static IPage<StreamingEndpoint> List(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List StreamingEndpoints
            /// </summary>
            /// <remarks>
            /// Lists the streaming endpoints in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingEndpoint>> ListAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Gets a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static StreamingEndpoint Get(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                return operations.GetAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Gets a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingEndpoint> GetAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Creates a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            public static StreamingEndpoint Create(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, bool? autoStart = default(bool?))
            {
                return operations.CreateAsync(resourceGroupName, accountName, streamingEndpointName, parameters, autoStart).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Creates a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingEndpoint> CreateAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, bool? autoStart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, parameters, autoStart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Updates a existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            public static StreamingEndpoint Update(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, streamingEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Updates a existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingEndpoint> UpdateAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Deletes a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void Delete(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Deletes a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Starts an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void Start(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.StartAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Starts an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Stops an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void Stop(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.StopAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Stops an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Scale StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Scales an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='scaleUnit'>
            /// The scale unit number of the streaming endpoint.
            /// </param>
            public static void Scale(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, int? scaleUnit = default(int?))
            {
                operations.ScaleAsync(resourceGroupName, accountName, streamingEndpointName, scaleUnit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Scale StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Scales an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='scaleUnit'>
            /// The scale unit number of the streaming endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ScaleAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, int? scaleUnit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ScaleWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, scaleUnit, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Creates a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            public static StreamingEndpoint BeginCreate(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, bool? autoStart = default(bool?))
            {
                return operations.BeginCreateAsync(resourceGroupName, accountName, streamingEndpointName, parameters, autoStart).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Creates a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='autoStart'>
            /// The flag indicates if the resource should be automatically started on
            /// creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingEndpoint> BeginCreateAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, bool? autoStart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, parameters, autoStart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Updates a existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            public static StreamingEndpoint BeginUpdate(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, accountName, streamingEndpointName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Updates a existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='parameters'>
            /// Streaming endpoint properties needed for creation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingEndpoint> BeginUpdateAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, StreamingEndpoint parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Deletes a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void BeginDelete(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Deletes a streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Starts an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void BeginStart(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.BeginStartAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Starts an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Stops an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            public static void BeginStop(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName)
            {
                operations.BeginStopAsync(resourceGroupName, accountName, streamingEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Stops an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Scale StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Scales an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='scaleUnit'>
            /// The scale unit number of the streaming endpoint.
            /// </param>
            public static void BeginScale(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, int? scaleUnit = default(int?))
            {
                operations.BeginScaleAsync(resourceGroupName, accountName, streamingEndpointName, scaleUnit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Scale StreamingEndpoint
            /// </summary>
            /// <remarks>
            /// Scales an existing streaming endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='streamingEndpointName'>
            /// The name of the streaming endpoint, maximum length is 24.
            /// </param>
            /// <param name='scaleUnit'>
            /// The scale unit number of the streaming endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginScaleAsync(this IStreamingEndpointsOperations operations, string resourceGroupName, string accountName, string streamingEndpointName, int? scaleUnit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginScaleWithHttpMessagesAsync(resourceGroupName, accountName, streamingEndpointName, scaleUnit, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List StreamingEndpoints
            /// </summary>
            /// <remarks>
            /// Lists the streaming endpoints in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StreamingEndpoint> ListNext(this IStreamingEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List StreamingEndpoints
            /// </summary>
            /// <remarks>
            /// Lists the streaming endpoints in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingEndpoint>> ListNextAsync(this IStreamingEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
