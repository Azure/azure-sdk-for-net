// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContentKeyPoliciesOperations.
    /// </summary>
    public static partial class ContentKeyPoliciesOperationsExtensions
    {
            /// <summary>
            /// List Content Key Policies
            /// </summary>
            /// <remarks>
            /// Lists the Content Key Policies in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<ContentKeyPolicy> List(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, ODataQuery<ContentKeyPolicy> odataQuery = default(ODataQuery<ContentKeyPolicy>))
            {
                return operations.ListAsync(resourceGroupName, accountName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Content Key Policies
            /// </summary>
            /// <remarks>
            /// Lists the Content Key Policies in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContentKeyPolicy>> ListAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, ODataQuery<ContentKeyPolicy> odataQuery = default(ODataQuery<ContentKeyPolicy>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Get the details of a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            public static ContentKeyPolicy Get(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName)
            {
                return operations.GetAsync(resourceGroupName, accountName, contentKeyPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Get the details of a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentKeyPolicy> GetAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, contentKeyPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Content Key Policy
            /// </summary>
            /// <remarks>
            /// Create or update a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='options'>
            /// The Key Policy options.
            /// </param>
            /// <param name='description'>
            /// A description for the Policy.
            /// </param>
            public static ContentKeyPolicy CreateOrUpdate(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, IList<ContentKeyPolicyOption> options, string description = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, contentKeyPolicyName, options, description).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Content Key Policy
            /// </summary>
            /// <remarks>
            /// Create or update a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='options'>
            /// The Key Policy options.
            /// </param>
            /// <param name='description'>
            /// A description for the Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentKeyPolicy> CreateOrUpdateAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, IList<ContentKeyPolicyOption> options, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, contentKeyPolicyName, options, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Deletes a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            public static void Delete(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, contentKeyPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Deletes a Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, contentKeyPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Updates an existing Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='options'>
            /// The Key Policy options.
            /// </param>
            /// <param name='description'>
            /// A description for the Policy.
            /// </param>
            public static ContentKeyPolicy Update(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, IList<ContentKeyPolicyOption> options, string description = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, accountName, contentKeyPolicyName, options, description).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Content Key Policy
            /// </summary>
            /// <remarks>
            /// Updates an existing Content Key Policy in the Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='options'>
            /// The Key Policy options.
            /// </param>
            /// <param name='description'>
            /// A description for the Policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentKeyPolicy> UpdateAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, IList<ContentKeyPolicyOption> options, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, contentKeyPolicyName, options, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Content Key Policy with secrets
            /// </summary>
            /// <remarks>
            /// Get a Content Key Policy including secret values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            public static ContentKeyPolicyProperties GetPolicyPropertiesWithSecrets(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName)
            {
                return operations.GetPolicyPropertiesWithSecretsAsync(resourceGroupName, accountName, contentKeyPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Content Key Policy with secrets
            /// </summary>
            /// <remarks>
            /// Get a Content Key Policy including secret values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='contentKeyPolicyName'>
            /// The Content Key Policy name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentKeyPolicyProperties> GetPolicyPropertiesWithSecretsAsync(this IContentKeyPoliciesOperations operations, string resourceGroupName, string accountName, string contentKeyPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyPropertiesWithSecretsWithHttpMessagesAsync(resourceGroupName, accountName, contentKeyPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Content Key Policies
            /// </summary>
            /// <remarks>
            /// Lists the Content Key Policies in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ContentKeyPolicy> ListNext(this IContentKeyPoliciesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Content Key Policies
            /// </summary>
            /// <remarks>
            /// Lists the Content Key Policies in the account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContentKeyPolicy>> ListNextAsync(this IContentKeyPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
