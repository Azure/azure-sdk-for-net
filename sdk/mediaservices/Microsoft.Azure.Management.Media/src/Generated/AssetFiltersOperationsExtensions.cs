// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AssetFiltersOperations.
    /// </summary>
    public static partial class AssetFiltersOperationsExtensions
    {
            /// <summary>
            /// List Asset Filters
            /// </summary>
            /// <remarks>
            /// List Asset Filters associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            public static IPage<AssetFilter> List(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName)
            {
                return operations.ListAsync(resourceGroupName, accountName, assetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Asset Filters
            /// </summary>
            /// <remarks>
            /// List Asset Filters associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AssetFilter>> ListAsync(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, assetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an Asset Filter.
            /// </summary>
            /// <remarks>
            /// Get the details of an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            public static AssetFilter Get(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName)
            {
                return operations.GetAsync(resourceGroupName, accountName, assetName, filterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an Asset Filter.
            /// </summary>
            /// <remarks>
            /// Get the details of an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetFilter> GetAsync(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, assetName, filterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Asset Filter
            /// </summary>
            /// <remarks>
            /// Creates or updates an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            public static AssetFilter CreateOrUpdate(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, AssetFilter parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, assetName, filterName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Asset Filter
            /// </summary>
            /// <remarks>
            /// Creates or updates an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetFilter> CreateOrUpdateAsync(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, AssetFilter parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, assetName, filterName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an Asset Filter.
            /// </summary>
            /// <remarks>
            /// Deletes an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            public static void Delete(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, assetName, filterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an Asset Filter.
            /// </summary>
            /// <remarks>
            /// Deletes an Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, assetName, filterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an Asset Filter
            /// </summary>
            /// <remarks>
            /// Updates an existing Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            public static AssetFilter Update(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, AssetFilter parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, assetName, filterName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an Asset Filter
            /// </summary>
            /// <remarks>
            /// Updates an existing Asset Filter associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='assetName'>
            /// The Asset name.
            /// </param>
            /// <param name='filterName'>
            /// The Asset Filter name
            /// </param>
            /// <param name='parameters'>
            /// The request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetFilter> UpdateAsync(this IAssetFiltersOperations operations, string resourceGroupName, string accountName, string assetName, string filterName, AssetFilter parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, assetName, filterName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Asset Filters
            /// </summary>
            /// <remarks>
            /// List Asset Filters associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AssetFilter> ListNext(this IAssetFiltersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Asset Filters
            /// </summary>
            /// <remarks>
            /// List Asset Filters associated with the specified Asset.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AssetFilter>> ListNextAsync(this IAssetFiltersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
