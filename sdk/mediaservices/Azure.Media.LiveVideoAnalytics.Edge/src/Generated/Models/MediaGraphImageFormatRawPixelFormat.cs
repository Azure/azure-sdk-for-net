// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Media.LiveVideoAnalytics.Edge.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for MediaGraphImageFormatRawPixelFormat.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(MediaGraphImageFormatRawPixelFormatConverter))]
    public struct MediaGraphImageFormatRawPixelFormat : System.IEquatable<MediaGraphImageFormatRawPixelFormat>
    {
        private MediaGraphImageFormatRawPixelFormat(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Planar YUV 4:2:0, 12bpp, (1 Cr and Cb sample per 2x2 Y samples).
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Yuv420p = "Yuv420p";

        /// <summary>
        /// Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgb565be = "Rgb565be";

        /// <summary>
        /// Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgb565le = "Rgb565le";

        /// <summary>
        /// Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian ,
        /// X=unused/undefined.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgb555be = "Rgb555be";

        /// <summary>
        /// Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian,
        /// X=unused/undefined.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgb555le = "Rgb555le";

        /// <summary>
        /// Packed RGB 8:8:8, 24bpp, RGBRGB.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgb24 = "Rgb24";

        /// <summary>
        /// Packed RGB 8:8:8, 24bpp, BGRBGR.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Bgr24 = "Bgr24";

        /// <summary>
        /// Packed ARGB 8:8:8:8, 32bpp, ARGBARGB.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Argb = "Argb";

        /// <summary>
        /// Packed RGBA 8:8:8:8, 32bpp, RGBARGBA.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Rgba = "Rgba";

        /// <summary>
        /// Packed ABGR 8:8:8:8, 32bpp, ABGRABGR.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Abgr = "Abgr";

        /// <summary>
        /// Packed BGRA 8:8:8:8, 32bpp, BGRABGRA.
        /// </summary>
        public static readonly MediaGraphImageFormatRawPixelFormat Bgra = "Bgra";


        /// <summary>
        /// Underlying value of enum MediaGraphImageFormatRawPixelFormat
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for
        /// MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public bool Equals(MediaGraphImageFormatRawPixelFormat e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to
        /// MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public static implicit operator MediaGraphImageFormatRawPixelFormat(string value)
        {
            return new MediaGraphImageFormatRawPixelFormat(value);
        }

        /// <summary>
        /// Implicit operator to convert MediaGraphImageFormatRawPixelFormat to
        /// string
        /// </summary>
        public static implicit operator string(MediaGraphImageFormatRawPixelFormat e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public static bool operator == (MediaGraphImageFormatRawPixelFormat e1, MediaGraphImageFormatRawPixelFormat e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public static bool operator != (MediaGraphImageFormatRawPixelFormat e1, MediaGraphImageFormatRawPixelFormat e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is MediaGraphImageFormatRawPixelFormat && Equals((MediaGraphImageFormatRawPixelFormat)obj);
        }

        /// <summary>
        /// Returns for hashCode MediaGraphImageFormatRawPixelFormat
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
