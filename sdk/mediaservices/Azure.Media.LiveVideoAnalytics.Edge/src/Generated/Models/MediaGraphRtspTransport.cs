// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Media.LiveVideoAnalytics.Edge.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for MediaGraphRtspTransport.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(MediaGraphRtspTransportConverter))]
    public struct MediaGraphRtspTransport : System.IEquatable<MediaGraphRtspTransport>
    {
        private MediaGraphRtspTransport(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// HTTP/HTTPS transport. This should be used when HTTP tunneling is
        /// desired.
        /// </summary>
        public static readonly MediaGraphRtspTransport Http = "Http";

        /// <summary>
        /// TCP transport. This should be used when HTTP tunneling is NOT
        /// desired.
        /// </summary>
        public static readonly MediaGraphRtspTransport Tcp = "Tcp";


        /// <summary>
        /// Underlying value of enum MediaGraphRtspTransport
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for MediaGraphRtspTransport
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type MediaGraphRtspTransport
        /// </summary>
        public bool Equals(MediaGraphRtspTransport e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to MediaGraphRtspTransport
        /// </summary>
        public static implicit operator MediaGraphRtspTransport(string value)
        {
            return new MediaGraphRtspTransport(value);
        }

        /// <summary>
        /// Implicit operator to convert MediaGraphRtspTransport to string
        /// </summary>
        public static implicit operator string(MediaGraphRtspTransport e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum MediaGraphRtspTransport
        /// </summary>
        public static bool operator == (MediaGraphRtspTransport e1, MediaGraphRtspTransport e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum MediaGraphRtspTransport
        /// </summary>
        public static bool operator != (MediaGraphRtspTransport e1, MediaGraphRtspTransport e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for MediaGraphRtspTransport
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is MediaGraphRtspTransport && Equals((MediaGraphRtspTransport)obj);
        }

        /// <summary>
        /// Returns for hashCode MediaGraphRtspTransport
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
