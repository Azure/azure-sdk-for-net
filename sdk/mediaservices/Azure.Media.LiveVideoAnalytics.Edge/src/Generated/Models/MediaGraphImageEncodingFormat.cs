// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Media.LiveVideoAnalytics.Edge.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for MediaGraphImageEncodingFormat.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(MediaGraphImageEncodingFormatConverter))]
    public struct MediaGraphImageEncodingFormat : System.IEquatable<MediaGraphImageEncodingFormat>
    {
        private MediaGraphImageEncodingFormat(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// JPEG image format.
        /// </summary>
        public static readonly MediaGraphImageEncodingFormat Jpeg = "Jpeg";

        /// <summary>
        /// BMP image format.
        /// </summary>
        public static readonly MediaGraphImageEncodingFormat Bmp = "Bmp";

        /// <summary>
        /// PNG image format.
        /// </summary>
        public static readonly MediaGraphImageEncodingFormat Png = "Png";


        /// <summary>
        /// Underlying value of enum MediaGraphImageEncodingFormat
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for MediaGraphImageEncodingFormat
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type MediaGraphImageEncodingFormat
        /// </summary>
        public bool Equals(MediaGraphImageEncodingFormat e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to
        /// MediaGraphImageEncodingFormat
        /// </summary>
        public static implicit operator MediaGraphImageEncodingFormat(string value)
        {
            return new MediaGraphImageEncodingFormat(value);
        }

        /// <summary>
        /// Implicit operator to convert MediaGraphImageEncodingFormat to
        /// string
        /// </summary>
        public static implicit operator string(MediaGraphImageEncodingFormat e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum MediaGraphImageEncodingFormat
        /// </summary>
        public static bool operator == (MediaGraphImageEncodingFormat e1, MediaGraphImageEncodingFormat e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum MediaGraphImageEncodingFormat
        /// </summary>
        public static bool operator != (MediaGraphImageEncodingFormat e1, MediaGraphImageEncodingFormat e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for MediaGraphImageEncodingFormat
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is MediaGraphImageEncodingFormat && Equals((MediaGraphImageEncodingFormat)obj);
        }

        /// <summary>
        /// Returns for hashCode MediaGraphImageEncodingFormat
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
