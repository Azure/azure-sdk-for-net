// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ConsumptionMeterDetails : IUtf8JsonSerializable, IJsonModel<ConsumptionMeterDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConsumptionMeterDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ConsumptionMeterDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionMeterDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionMeterDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(MeterName))
            {
                writer.WritePropertyName("meterName"u8);
                writer.WriteStringValue(MeterName);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterCategory))
            {
                writer.WritePropertyName("meterCategory"u8);
                writer.WriteStringValue(MeterCategory);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterSubCategory))
            {
                writer.WritePropertyName("meterSubCategory"u8);
                writer.WriteStringValue(MeterSubCategory);
            }
            if (options.Format != "W" && Optional.IsDefined(Unit))
            {
                writer.WritePropertyName("unit"u8);
                writer.WriteStringValue(Unit);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterLocation))
            {
                writer.WritePropertyName("meterLocation"u8);
                writer.WriteStringValue(MeterLocation);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalIncludedQuantity))
            {
                writer.WritePropertyName("totalIncludedQuantity"u8);
                writer.WriteNumberValue(TotalIncludedQuantity.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PretaxStandardRate))
            {
                writer.WritePropertyName("pretaxStandardRate"u8);
                writer.WriteNumberValue(PretaxStandardRate.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceName))
            {
                writer.WritePropertyName("serviceName"u8);
                writer.WriteStringValue(ServiceName);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceTier))
            {
                writer.WritePropertyName("serviceTier"u8);
                writer.WriteStringValue(ServiceTier);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConsumptionMeterDetails IJsonModel<ConsumptionMeterDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionMeterDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionMeterDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConsumptionMeterDetails(document.RootElement, options);
        }

        internal static ConsumptionMeterDetails DeserializeConsumptionMeterDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> meterName = default;
            Optional<string> meterCategory = default;
            Optional<string> meterSubCategory = default;
            Optional<string> unit = default;
            Optional<string> meterLocation = default;
            Optional<decimal> totalIncludedQuantity = default;
            Optional<decimal> pretaxStandardRate = default;
            Optional<string> serviceName = default;
            Optional<string> serviceTier = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("meterName"u8))
                {
                    meterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meterCategory"u8))
                {
                    meterCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meterSubCategory"u8))
                {
                    meterSubCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unit"u8))
                {
                    unit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meterLocation"u8))
                {
                    meterLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalIncludedQuantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalIncludedQuantity = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("pretaxStandardRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pretaxStandardRate = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("serviceName"u8))
                {
                    serviceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceTier"u8))
                {
                    serviceTier = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConsumptionMeterDetails(meterName.Value, meterCategory.Value, meterSubCategory.Value, unit.Value, meterLocation.Value, Optional.ToNullable(totalIncludedQuantity), Optional.ToNullable(pretaxStandardRate), serviceName.Value, serviceTier.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(MeterName))
            {
                builder.Append("  meterName:");
                if (MeterName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterName}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterName}'");
                }
            }

            if (Optional.IsDefined(MeterCategory))
            {
                builder.Append("  meterCategory:");
                if (MeterCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterCategory}'");
                }
            }

            if (Optional.IsDefined(MeterSubCategory))
            {
                builder.Append("  meterSubCategory:");
                if (MeterSubCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterSubCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterSubCategory}'");
                }
            }

            if (Optional.IsDefined(Unit))
            {
                builder.Append("  unit:");
                if (Unit.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Unit}'''");
                }
                else
                {
                    builder.AppendLine($" '{Unit}'");
                }
            }

            if (Optional.IsDefined(MeterLocation))
            {
                builder.Append("  meterLocation:");
                if (MeterLocation.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterLocation}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterLocation}'");
                }
            }

            if (Optional.IsDefined(TotalIncludedQuantity))
            {
                builder.Append("  totalIncludedQuantity:");
                builder.AppendLine($" '{TotalIncludedQuantity.Value.ToString()}'");
            }

            if (Optional.IsDefined(PretaxStandardRate))
            {
                builder.Append("  pretaxStandardRate:");
                builder.AppendLine($" '{PretaxStandardRate.Value.ToString()}'");
            }

            if (Optional.IsDefined(ServiceName))
            {
                builder.Append("  serviceName:");
                if (ServiceName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServiceName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServiceName}'");
                }
            }

            if (Optional.IsDefined(ServiceTier))
            {
                builder.Append("  serviceTier:");
                if (ServiceTier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServiceTier}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServiceTier}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<ConsumptionMeterDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionMeterDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ConsumptionMeterDetails)} does not support '{options.Format}' format.");
            }
        }

        ConsumptionMeterDetails IPersistableModel<ConsumptionMeterDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionMeterDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeConsumptionMeterDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ConsumptionMeterDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConsumptionMeterDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
