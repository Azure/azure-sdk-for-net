// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ConsumptionCalculatedSavingsProperties : IUtf8JsonSerializable, IJsonModel<ConsumptionCalculatedSavingsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConsumptionCalculatedSavingsProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ConsumptionCalculatedSavingsProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionCalculatedSavingsProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionCalculatedSavingsProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(OnDemandCost))
            {
                writer.WritePropertyName("onDemandCost"u8);
                writer.WriteNumberValue(OnDemandCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(OverageCost))
            {
                writer.WritePropertyName("overageCost"u8);
                writer.WriteNumberValue(OverageCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity"u8);
                writer.WriteNumberValue(Quantity.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ReservationCost))
            {
                writer.WritePropertyName("reservationCost"u8);
                writer.WriteNumberValue(ReservationCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalReservationCost))
            {
                writer.WritePropertyName("totalReservationCost"u8);
                writer.WriteNumberValue(TotalReservationCost.Value);
            }
            if (Optional.IsDefined(ReservedUnitCount))
            {
                writer.WritePropertyName("reservedUnitCount"u8);
                writer.WriteNumberValue(ReservedUnitCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Savings))
            {
                writer.WritePropertyName("savings"u8);
                writer.WriteNumberValue(Savings.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConsumptionCalculatedSavingsProperties IJsonModel<ConsumptionCalculatedSavingsProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionCalculatedSavingsProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionCalculatedSavingsProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConsumptionCalculatedSavingsProperties(document.RootElement, options);
        }

        internal static ConsumptionCalculatedSavingsProperties DeserializeConsumptionCalculatedSavingsProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<float> onDemandCost = default;
            Optional<float> overageCost = default;
            Optional<float> quantity = default;
            Optional<float> reservationCost = default;
            Optional<float> totalReservationCost = default;
            Optional<float> reservedUnitCount = default;
            Optional<float> savings = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("onDemandCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onDemandCost = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("overageCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overageCost = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("quantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quantity = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("reservationCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reservationCost = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("totalReservationCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalReservationCost = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("reservedUnitCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reservedUnitCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("savings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    savings = property.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConsumptionCalculatedSavingsProperties(Optional.ToNullable(onDemandCost), Optional.ToNullable(overageCost), Optional.ToNullable(quantity), Optional.ToNullable(reservationCost), Optional.ToNullable(totalReservationCost), Optional.ToNullable(reservedUnitCount), Optional.ToNullable(savings), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(OnDemandCost))
            {
                builder.Append("  onDemandCost:");
                builder.AppendLine($" '{OnDemandCost.Value.ToString()}'");
            }

            if (Optional.IsDefined(OverageCost))
            {
                builder.Append("  overageCost:");
                builder.AppendLine($" '{OverageCost.Value.ToString()}'");
            }

            if (Optional.IsDefined(Quantity))
            {
                builder.Append("  quantity:");
                builder.AppendLine($" '{Quantity.Value.ToString()}'");
            }

            if (Optional.IsDefined(ReservationCost))
            {
                builder.Append("  reservationCost:");
                builder.AppendLine($" '{ReservationCost.Value.ToString()}'");
            }

            if (Optional.IsDefined(TotalReservationCost))
            {
                builder.Append("  totalReservationCost:");
                builder.AppendLine($" '{TotalReservationCost.Value.ToString()}'");
            }

            if (Optional.IsDefined(ReservedUnitCount))
            {
                builder.Append("  reservedUnitCount:");
                builder.AppendLine($" '{ReservedUnitCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(Savings))
            {
                builder.Append("  savings:");
                builder.AppendLine($" '{Savings.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<ConsumptionCalculatedSavingsProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionCalculatedSavingsProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ConsumptionCalculatedSavingsProperties)} does not support '{options.Format}' format.");
            }
        }

        ConsumptionCalculatedSavingsProperties IPersistableModel<ConsumptionCalculatedSavingsProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionCalculatedSavingsProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeConsumptionCalculatedSavingsProperties(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ConsumptionCalculatedSavingsProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConsumptionCalculatedSavingsProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
