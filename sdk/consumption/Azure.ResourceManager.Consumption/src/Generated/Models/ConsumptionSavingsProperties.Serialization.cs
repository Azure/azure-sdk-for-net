// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ConsumptionSavingsProperties : IUtf8JsonSerializable, IJsonModel<ConsumptionSavingsProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConsumptionSavingsProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<ConsumptionSavingsProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ConsumptionSavingsProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ConsumptionSavingsProperties>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(CalculatedSavings))
            {
                writer.WritePropertyName("calculatedSavings"u8);
                writer.WriteStartArray();
                foreach (var item in CalculatedSavings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LookBackPeriod))
                {
                    writer.WritePropertyName("lookBackPeriod"u8);
                    writer.WriteNumberValue(LookBackPeriod.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(RecommendedQuantity))
                {
                    writer.WritePropertyName("recommendedQuantity"u8);
                    writer.WriteNumberValue(RecommendedQuantity.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ReservationOrderTerm))
                {
                    writer.WritePropertyName("reservationOrderTerm"u8);
                    writer.WriteStringValue(ReservationOrderTerm);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(SavingsType))
                {
                    writer.WritePropertyName("savingsType"u8);
                    writer.WriteStringValue(SavingsType);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(UnitOfMeasure))
                {
                    writer.WritePropertyName("unitOfMeasure"u8);
                    writer.WriteStringValue(UnitOfMeasure);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConsumptionSavingsProperties IJsonModel<ConsumptionSavingsProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionSavingsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConsumptionSavingsProperties(document.RootElement, options);
        }

        internal static ConsumptionSavingsProperties DeserializeConsumptionSavingsProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<ConsumptionCalculatedSavingsProperties>> calculatedSavings = default;
            Optional<int> lookBackPeriod = default;
            Optional<float> recommendedQuantity = default;
            Optional<string> reservationOrderTerm = default;
            Optional<string> savingsType = default;
            Optional<string> unitOfMeasure = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("calculatedSavings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConsumptionCalculatedSavingsProperties> array = new List<ConsumptionCalculatedSavingsProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConsumptionCalculatedSavingsProperties.DeserializeConsumptionCalculatedSavingsProperties(item));
                    }
                    calculatedSavings = array;
                    continue;
                }
                if (property.NameEquals("lookBackPeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lookBackPeriod = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("recommendedQuantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedQuantity = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("reservationOrderTerm"u8))
                {
                    reservationOrderTerm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("savingsType"u8))
                {
                    savingsType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unitOfMeasure"u8))
                {
                    unitOfMeasure = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConsumptionSavingsProperties(Optional.ToList(calculatedSavings), Optional.ToNullable(lookBackPeriod), Optional.ToNullable(recommendedQuantity), reservationOrderTerm.Value, savingsType.Value, unitOfMeasure.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ConsumptionSavingsProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionSavingsProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ConsumptionSavingsProperties IPersistableModel<ConsumptionSavingsProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ConsumptionSavingsProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeConsumptionSavingsProperties(document.RootElement, options);
        }

        string IPersistableModel<ConsumptionSavingsProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
