// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Consumption.Models
{
    /// <summary> Identifies the type of the event. </summary>
    public readonly partial struct EventType : IEquatable<EventType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EventType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SettledChargesValue = "SettledCharges";
        private const string PendingChargesValue = "PendingCharges";
        private const string PendingAdjustmentsValue = "PendingAdjustments";
        private const string PendingNewCreditValue = "PendingNewCredit";
        private const string PendingExpiredCreditValue = "PendingExpiredCredit";
        private const string UnKnownValue = "UnKnown";
        private const string NewCreditValue = "NewCredit";
        private const string CreditExpiredValue = "CreditExpired";

        /// <summary> SettledCharges. </summary>
        public static EventType SettledCharges { get; } = new EventType(SettledChargesValue);
        /// <summary> PendingCharges. </summary>
        public static EventType PendingCharges { get; } = new EventType(PendingChargesValue);
        /// <summary> PendingAdjustments. </summary>
        public static EventType PendingAdjustments { get; } = new EventType(PendingAdjustmentsValue);
        /// <summary> PendingNewCredit. </summary>
        public static EventType PendingNewCredit { get; } = new EventType(PendingNewCreditValue);
        /// <summary> PendingExpiredCredit. </summary>
        public static EventType PendingExpiredCredit { get; } = new EventType(PendingExpiredCreditValue);
        /// <summary> UnKnown. </summary>
        public static EventType UnKnown { get; } = new EventType(UnKnownValue);
        /// <summary> NewCredit. </summary>
        public static EventType NewCredit { get; } = new EventType(NewCreditValue);
        /// <summary> CreditExpired. </summary>
        public static EventType CreditExpired { get; } = new EventType(CreditExpiredValue);
        /// <summary> Determines if two <see cref="EventType"/> values are the same. </summary>
        public static bool operator ==(EventType left, EventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EventType"/> values are not the same. </summary>
        public static bool operator !=(EventType left, EventType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EventType"/>. </summary>
        public static implicit operator EventType(string value) => new EventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
