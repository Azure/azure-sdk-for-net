// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.Consumption.Models
{
    /// <summary>
    /// Details of estimated savings.
    /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties
    /// </summary>
    public partial class ConsumptionCalculatedSavingsProperties
    {
        /// <summary> Initializes a new instance of ConsumptionCalculatedSavingsProperties. </summary>
        internal ConsumptionCalculatedSavingsProperties()
        {
        }

        /// <summary> Initializes a new instance of ConsumptionCalculatedSavingsProperties. </summary>
        /// <param name="onDemandCost">
        /// The cost without reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.onDemandCost
        /// </param>
        /// <param name="overageCost">
        /// The difference between total reservation cost and reservation cost.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.overageCost
        /// </param>
        /// <param name="quantity">
        /// The quantity for calculated savings.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.quantity
        /// </param>
        /// <param name="reservationCost">
        /// The exact cost of the estimated usage using reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.reservationCost
        /// </param>
        /// <param name="totalReservationCost">
        /// The cost of the suggested quantity.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.totalReservationCost
        /// </param>
        /// <param name="reservedUnitCount">
        /// The number of reserved units used to calculate savings. Always 1 for virtual machines.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.reservedUnitCount
        /// </param>
        /// <param name="savings">
        /// The amount saved by purchasing the recommended quantity of reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.savings
        /// </param>
        internal ConsumptionCalculatedSavingsProperties(float? onDemandCost, float? overageCost, float? quantity, float? reservationCost, float? totalReservationCost, float? reservedUnitCount, float? savings)
        {
            OnDemandCost = onDemandCost;
            OverageCost = overageCost;
            Quantity = quantity;
            ReservationCost = reservationCost;
            TotalReservationCost = totalReservationCost;
            ReservedUnitCount = reservedUnitCount;
            Savings = savings;
        }

        /// <summary>
        /// The cost without reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.onDemandCost
        /// </summary>
        public float? OnDemandCost { get; }
        /// <summary>
        /// The difference between total reservation cost and reservation cost.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.overageCost
        /// </summary>
        public float? OverageCost { get; }
        /// <summary>
        /// The quantity for calculated savings.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.quantity
        /// </summary>
        public float? Quantity { get; }
        /// <summary>
        /// The exact cost of the estimated usage using reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.reservationCost
        /// </summary>
        public float? ReservationCost { get; }
        /// <summary>
        /// The cost of the suggested quantity.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.totalReservationCost
        /// </summary>
        public float? TotalReservationCost { get; }
        /// <summary>
        /// The number of reserved units used to calculate savings. Always 1 for virtual machines.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.reservedUnitCount
        /// </summary>
        public float? ReservedUnitCount { get; }
        /// <summary>
        /// The amount saved by purchasing the recommended quantity of reservation.
        /// Serialized Name: ReservationRecommendationDetailsCalculatedSavingsProperties.savings
        /// </summary>
        public float? Savings { get; }
    }
}
