// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Consumption.Models
{
    /// <summary> The Metrictype. </summary>
    public readonly partial struct Metrictype : IEquatable<Metrictype>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Metrictype"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Metrictype(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActualCostMetricTypeValue = "actualcost";
        private const string AmortizedCostMetricTypeValue = "amortizedcost";
        private const string UsageMetricTypeValue = "usage";

        /// <summary> Actual cost data. </summary>
        public static Metrictype ActualCostMetricType { get; } = new Metrictype(ActualCostMetricTypeValue);
        /// <summary> Amortized cost data. </summary>
        public static Metrictype AmortizedCostMetricType { get; } = new Metrictype(AmortizedCostMetricTypeValue);
        /// <summary> Usage data. </summary>
        public static Metrictype UsageMetricType { get; } = new Metrictype(UsageMetricTypeValue);
        /// <summary> Determines if two <see cref="Metrictype"/> values are the same. </summary>
        public static bool operator ==(Metrictype left, Metrictype right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Metrictype"/> values are not the same. </summary>
        public static bool operator !=(Metrictype left, Metrictype right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Metrictype"/>. </summary>
        public static implicit operator Metrictype(string value) => new Metrictype(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Metrictype other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Metrictype other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
