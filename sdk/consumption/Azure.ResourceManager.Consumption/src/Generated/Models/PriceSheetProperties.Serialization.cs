// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class PriceSheetProperties
    {
        internal static PriceSheetProperties DeserializePriceSheetProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceIdentifier> billingPeriodId = default;
            Core.Optional<Guid> meterId = default;
            Core.Optional<ConsumptionMeterDetails> meterDetails = default;
            Core.Optional<string> unitOfMeasure = default;
            Core.Optional<decimal> includedQuantity = default;
            Core.Optional<string> partNumber = default;
            Core.Optional<decimal> unitPrice = default;
            Core.Optional<string> currencyCode = default;
            Core.Optional<string> offerId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("billingPeriodId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    billingPeriodId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("meterId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null || property.Value.ValueKind == JsonValueKind.String && property.Value.GetString().Length == 0)
                    {
                        continue;
                    }
                    meterId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("meterDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meterDetails = ConsumptionMeterDetails.DeserializeConsumptionMeterDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("unitOfMeasure"u8))
                {
                    unitOfMeasure = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includedQuantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includedQuantity = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("partNumber"u8))
                {
                    partNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unitPrice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unitPrice = property.Value.GetDecimal();
                    continue;
                }
                if (property.NameEquals("currencyCode"u8))
                {
                    currencyCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("offerId"u8))
                {
                    offerId = property.Value.GetString();
                    continue;
                }
            }
            return new PriceSheetProperties(billingPeriodId.Value, Core.Optional.ToNullable(meterId), meterDetails.Value, unitOfMeasure.Value, Core.Optional.ToNullable(includedQuantity), partNumber.Value, Core.Optional.ToNullable(unitPrice), currencyCode.Value, offerId.Value);
        }
    }
}
