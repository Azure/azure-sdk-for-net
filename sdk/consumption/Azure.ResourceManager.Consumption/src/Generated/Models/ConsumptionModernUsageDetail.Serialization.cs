// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Consumption.Models
{
    public partial class ConsumptionModernUsageDetail : IUtf8JsonSerializable, IJsonModel<ConsumptionModernUsageDetail>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ConsumptionModernUsageDetail>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ConsumptionModernUsageDetail>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionModernUsageDetail>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionModernUsageDetail)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind.ToString());
            if (options.Format != "W" && Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("etag"u8);
                writer.WriteStringValue(ETag.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(BillingAccountId))
            {
                writer.WritePropertyName("billingAccountId"u8);
                writer.WriteStringValue(BillingAccountId);
            }
            if (options.Format != "W" && Optional.IsDefined(EffectivePrice))
            {
                writer.WritePropertyName("effectivePrice"u8);
                writer.WriteNumberValue(EffectivePrice.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PricingModel))
            {
                writer.WritePropertyName("pricingModel"u8);
                writer.WriteStringValue(PricingModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BillingAccountName))
            {
                writer.WritePropertyName("billingAccountName"u8);
                writer.WriteStringValue(BillingAccountName);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingPeriodStartOn))
            {
                writer.WritePropertyName("billingPeriodStartDate"u8);
                writer.WriteStringValue(BillingPeriodStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BillingPeriodEndOn))
            {
                writer.WritePropertyName("billingPeriodEndDate"u8);
                writer.WriteStringValue(BillingPeriodEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BillingProfileId))
            {
                writer.WritePropertyName("billingProfileId"u8);
                writer.WriteStringValue(BillingProfileId);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingProfileName))
            {
                writer.WritePropertyName("billingProfileName"u8);
                writer.WriteStringValue(BillingProfileName);
            }
            if (options.Format != "W" && Optional.IsDefined(SubscriptionGuid))
            {
                writer.WritePropertyName("subscriptionGuid"u8);
                writer.WriteStringValue(SubscriptionGuid);
            }
            if (options.Format != "W" && Optional.IsDefined(SubscriptionName))
            {
                writer.WritePropertyName("subscriptionName"u8);
                writer.WriteStringValue(SubscriptionName);
            }
            if (options.Format != "W" && Optional.IsDefined(On))
            {
                writer.WritePropertyName("date"u8);
                writer.WriteStringValue(On.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Product))
            {
                writer.WritePropertyName("product"u8);
                writer.WriteStringValue(Product);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterId))
            {
                writer.WritePropertyName("meterId"u8);
                writer.WriteStringValue(MeterId.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterName))
            {
                writer.WritePropertyName("meterName"u8);
                writer.WriteStringValue(MeterName);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterRegion))
            {
                writer.WritePropertyName("meterRegion"u8);
                writer.WriteStringValue(MeterRegion);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterCategory))
            {
                writer.WritePropertyName("meterCategory"u8);
                writer.WriteStringValue(MeterCategory);
            }
            if (options.Format != "W" && Optional.IsDefined(MeterSubCategory))
            {
                writer.WritePropertyName("meterSubCategory"u8);
                writer.WriteStringValue(MeterSubCategory);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceFamily))
            {
                writer.WritePropertyName("serviceFamily"u8);
                writer.WriteStringValue(ServiceFamily);
            }
            if (options.Format != "W" && Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity"u8);
                writer.WriteNumberValue(Quantity.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(UnitOfMeasure))
            {
                writer.WritePropertyName("unitOfMeasure"u8);
                writer.WriteStringValue(UnitOfMeasure);
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceName))
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (options.Format != "W" && Optional.IsDefined(CostInUSD))
            {
                writer.WritePropertyName("costInUSD"u8);
                writer.WriteNumberValue(CostInUSD.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(UnitPrice))
            {
                writer.WritePropertyName("unitPrice"u8);
                writer.WriteNumberValue(UnitPrice.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingCurrencyCode))
            {
                writer.WritePropertyName("billingCurrencyCode"u8);
                writer.WriteStringValue(BillingCurrencyCode);
            }
            if (options.Format != "W" && Optional.IsDefined(ResourceLocation))
            {
                writer.WritePropertyName("resourceLocation"u8);
                writer.WriteStringValue(ResourceLocation);
            }
            if (options.Format != "W" && Optional.IsDefined(ConsumedService))
            {
                writer.WritePropertyName("consumedService"u8);
                writer.WriteStringValue(ConsumedService);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceInfo1))
            {
                writer.WritePropertyName("serviceInfo1"u8);
                writer.WriteStringValue(ServiceInfo1);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceInfo2))
            {
                writer.WritePropertyName("serviceInfo2"u8);
                writer.WriteStringValue(ServiceInfo2);
            }
            if (options.Format != "W" && Optional.IsDefined(AdditionalInfo))
            {
                writer.WritePropertyName("additionalInfo"u8);
                writer.WriteStringValue(AdditionalInfo);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceSectionId))
            {
                writer.WritePropertyName("invoiceSectionId"u8);
                writer.WriteStringValue(InvoiceSectionId);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceSectionName))
            {
                writer.WritePropertyName("invoiceSectionName"u8);
                writer.WriteStringValue(InvoiceSectionName);
            }
            if (options.Format != "W" && Optional.IsDefined(CostCenter))
            {
                writer.WritePropertyName("costCenter"u8);
                writer.WriteStringValue(CostCenter);
            }
            if (options.Format != "W" && Optional.IsDefined(ResourceGroup))
            {
                writer.WritePropertyName("resourceGroup"u8);
                writer.WriteStringValue(ResourceGroup);
            }
            if (options.Format != "W" && Optional.IsDefined(ReservationId))
            {
                writer.WritePropertyName("reservationId"u8);
                writer.WriteStringValue(ReservationId);
            }
            if (options.Format != "W" && Optional.IsDefined(ReservationName))
            {
                writer.WritePropertyName("reservationName"u8);
                writer.WriteStringValue(ReservationName);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductOrderId))
            {
                writer.WritePropertyName("productOrderId"u8);
                writer.WriteStringValue(ProductOrderId);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductOrderName))
            {
                writer.WritePropertyName("productOrderName"u8);
                writer.WriteStringValue(ProductOrderName);
            }
            if (options.Format != "W" && Optional.IsDefined(IsAzureCreditEligible))
            {
                writer.WritePropertyName("isAzureCreditEligible"u8);
                writer.WriteBooleanValue(IsAzureCreditEligible.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Term))
            {
                writer.WritePropertyName("term"u8);
                writer.WriteStringValue(Term);
            }
            if (options.Format != "W" && Optional.IsDefined(PublisherName))
            {
                writer.WritePropertyName("publisherName"u8);
                writer.WriteStringValue(PublisherName);
            }
            if (options.Format != "W" && Optional.IsDefined(PublisherType))
            {
                writer.WritePropertyName("publisherType"u8);
                writer.WriteStringValue(PublisherType);
            }
            if (options.Format != "W" && Optional.IsDefined(ChargeType))
            {
                writer.WritePropertyName("chargeType"u8);
                writer.WriteStringValue(ChargeType);
            }
            if (options.Format != "W" && Optional.IsDefined(Frequency))
            {
                writer.WritePropertyName("frequency"u8);
                writer.WriteStringValue(Frequency);
            }
            if (options.Format != "W" && Optional.IsDefined(CostInBillingCurrency))
            {
                writer.WritePropertyName("costInBillingCurrency"u8);
                writer.WriteNumberValue(CostInBillingCurrency.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CostInPricingCurrency))
            {
                writer.WritePropertyName("costInPricingCurrency"u8);
                writer.WriteNumberValue(CostInPricingCurrency.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ExchangeRate))
            {
                writer.WritePropertyName("exchangeRate"u8);
                writer.WriteStringValue(ExchangeRate);
            }
            if (options.Format != "W" && Optional.IsDefined(ExchangeRateOn))
            {
                writer.WritePropertyName("exchangeRateDate"u8);
                writer.WriteStringValue(ExchangeRateOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceId))
            {
                writer.WritePropertyName("invoiceId"u8);
                writer.WriteStringValue(InvoiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(PreviousInvoiceId))
            {
                writer.WritePropertyName("previousInvoiceId"u8);
                writer.WriteStringValue(PreviousInvoiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(PricingCurrencyCode))
            {
                writer.WritePropertyName("pricingCurrencyCode"u8);
                writer.WriteStringValue(PricingCurrencyCode);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductIdentifier))
            {
                writer.WritePropertyName("productIdentifier"u8);
                writer.WriteStringValue(ProductIdentifier);
            }
            if (options.Format != "W" && Optional.IsDefined(ResourceLocationNormalized))
            {
                writer.WritePropertyName("resourceLocationNormalized"u8);
                writer.WriteStringValue(ResourceLocationNormalized);
            }
            if (options.Format != "W" && Optional.IsDefined(ServicePeriodStartOn))
            {
                writer.WritePropertyName("servicePeriodStartDate"u8);
                writer.WriteStringValue(ServicePeriodStartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ServicePeriodEndOn))
            {
                writer.WritePropertyName("servicePeriodEndDate"u8);
                writer.WriteStringValue(ServicePeriodEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerTenantId))
            {
                writer.WritePropertyName("customerTenantId"u8);
                writer.WriteStringValue(CustomerTenantId);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerName))
            {
                writer.WritePropertyName("customerName"u8);
                writer.WriteStringValue(CustomerName);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerTenantId))
            {
                writer.WritePropertyName("partnerTenantId"u8);
                writer.WriteStringValue(PartnerTenantId);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerName))
            {
                writer.WritePropertyName("partnerName"u8);
                writer.WriteStringValue(PartnerName);
            }
            if (options.Format != "W" && Optional.IsDefined(ResellerMpnId))
            {
                writer.WritePropertyName("resellerMpnId"u8);
                writer.WriteStringValue(ResellerMpnId);
            }
            if (options.Format != "W" && Optional.IsDefined(ResellerName))
            {
                writer.WritePropertyName("resellerName"u8);
                writer.WriteStringValue(ResellerName);
            }
            if (options.Format != "W" && Optional.IsDefined(PublisherId))
            {
                writer.WritePropertyName("publisherId"u8);
                writer.WriteStringValue(PublisherId);
            }
            if (options.Format != "W" && Optional.IsDefined(MarketPrice))
            {
                writer.WritePropertyName("marketPrice"u8);
                writer.WriteNumberValue(MarketPrice.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ExchangeRatePricingToBilling))
            {
                writer.WritePropertyName("exchangeRatePricingToBilling"u8);
                writer.WriteNumberValue(ExchangeRatePricingToBilling.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PaygCostInBillingCurrency))
            {
                writer.WritePropertyName("paygCostInBillingCurrency"u8);
                writer.WriteNumberValue(PaygCostInBillingCurrency.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PaygCostInUSD))
            {
                writer.WritePropertyName("paygCostInUSD"u8);
                writer.WriteNumberValue(PaygCostInUSD.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerEarnedCreditRate))
            {
                writer.WritePropertyName("partnerEarnedCreditRate"u8);
                writer.WriteNumberValue(PartnerEarnedCreditRate.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerEarnedCreditApplied))
            {
                writer.WritePropertyName("partnerEarnedCreditApplied"u8);
                writer.WriteStringValue(PartnerEarnedCreditApplied);
            }
            if (options.Format != "W" && Optional.IsDefined(PayGPrice))
            {
                writer.WritePropertyName("payGPrice"u8);
                writer.WriteNumberValue(PayGPrice.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BenefitId))
            {
                writer.WritePropertyName("benefitId"u8);
                writer.WriteStringValue(BenefitId);
            }
            if (options.Format != "W" && Optional.IsDefined(BenefitName))
            {
                writer.WritePropertyName("benefitName"u8);
                writer.WriteStringValue(BenefitName);
            }
            if (options.Format != "W" && Optional.IsDefined(Provider))
            {
                writer.WritePropertyName("provider"u8);
                writer.WriteStringValue(Provider);
            }
            if (options.Format != "W" && Optional.IsDefined(CostAllocationRuleName))
            {
                writer.WritePropertyName("costAllocationRuleName"u8);
                writer.WriteStringValue(CostAllocationRuleName);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ConsumptionModernUsageDetail IJsonModel<ConsumptionModernUsageDetail>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionModernUsageDetail>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ConsumptionModernUsageDetail)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConsumptionModernUsageDetail(document.RootElement, options);
        }

        internal static ConsumptionModernUsageDetail DeserializeConsumptionModernUsageDetail(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            UsageDetailsKind kind = default;
            Optional<ETag> etag = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> billingAccountId = default;
            Optional<decimal> effectivePrice = default;
            Optional<ConsumptionPricingModelType> pricingModel = default;
            Optional<string> billingAccountName = default;
            Optional<DateTimeOffset> billingPeriodStartDate = default;
            Optional<DateTimeOffset> billingPeriodEndDate = default;
            Optional<string> billingProfileId = default;
            Optional<string> billingProfileName = default;
            Optional<string> subscriptionGuid = default;
            Optional<string> subscriptionName = default;
            Optional<DateTimeOffset> date = default;
            Optional<string> product = default;
            Optional<Guid> meterId = default;
            Optional<string> meterName = default;
            Optional<string> meterRegion = default;
            Optional<string> meterCategory = default;
            Optional<string> meterSubCategory = default;
            Optional<string> serviceFamily = default;
            Optional<decimal> quantity = default;
            Optional<string> unitOfMeasure = default;
            Optional<string> instanceName = default;
            Optional<decimal> costInUSD = default;
            Optional<decimal> unitPrice = default;
            Optional<string> billingCurrencyCode = default;
            Optional<string> resourceLocation = default;
            Optional<string> consumedService = default;
            Optional<string> serviceInfo1 = default;
            Optional<string> serviceInfo2 = default;
            Optional<string> additionalInfo = default;
            Optional<string> invoiceSectionId = default;
            Optional<string> invoiceSectionName = default;
            Optional<string> costCenter = default;
            Optional<string> resourceGroup = default;
            Optional<string> reservationId = default;
            Optional<string> reservationName = default;
            Optional<string> productOrderId = default;
            Optional<string> productOrderName = default;
            Optional<bool> isAzureCreditEligible = default;
            Optional<string> term = default;
            Optional<string> publisherName = default;
            Optional<string> publisherType = default;
            Optional<string> chargeType = default;
            Optional<string> frequency = default;
            Optional<decimal> costInBillingCurrency = default;
            Optional<decimal> costInPricingCurrency = default;
            Optional<string> exchangeRate = default;
            Optional<DateTimeOffset> exchangeRateDate = default;
            Optional<string> invoiceId = default;
            Optional<string> previousInvoiceId = default;
            Optional<string> pricingCurrencyCode = default;
            Optional<string> productIdentifier = default;
            Optional<string> resourceLocationNormalized = default;
            Optional<DateTimeOffset> servicePeriodStartDate = default;
            Optional<DateTimeOffset> servicePeriodEndDate = default;
            Optional<string> customerTenantId = default;
            Optional<string> customerName = default;
            Optional<string> partnerTenantId = default;
            Optional<string> partnerName = default;
            Optional<string> resellerMpnId = default;
            Optional<string> resellerName = default;
            Optional<string> publisherId = default;
            Optional<decimal> marketPrice = default;
            Optional<decimal> exchangeRatePricingToBilling = default;
            Optional<decimal> paygCostInBillingCurrency = default;
            Optional<decimal> paygCostInUSD = default;
            Optional<decimal> partnerEarnedCreditRate = default;
            Optional<string> partnerEarnedCreditApplied = default;
            Optional<decimal> payGPrice = default;
            Optional<string> benefitId = default;
            Optional<string> benefitName = default;
            Optional<string> provider = default;
            Optional<string> costAllocationRuleName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kind"u8))
                {
                    kind = new UsageDetailsKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("billingAccountId"u8))
                        {
                            billingAccountId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("effectivePrice"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            effectivePrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("pricingModel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pricingModel = new ConsumptionPricingModelType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("billingAccountName"u8))
                        {
                            billingAccountName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingPeriodStartDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            billingPeriodStartDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("billingPeriodEndDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            billingPeriodEndDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("billingProfileId"u8))
                        {
                            billingProfileId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingProfileName"u8))
                        {
                            billingProfileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionGuid"u8))
                        {
                            subscriptionGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionName"u8))
                        {
                            subscriptionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("date"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            date = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("product"u8))
                        {
                            product = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            meterId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("meterName"u8))
                        {
                            meterName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterRegion"u8))
                        {
                            meterRegion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterCategory"u8))
                        {
                            meterCategory = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("meterSubCategory"u8))
                        {
                            meterSubCategory = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceFamily"u8))
                        {
                            serviceFamily = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("quantity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            quantity = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("unitOfMeasure"u8))
                        {
                            unitOfMeasure = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"u8))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costInUSD"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            costInUSD = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("unitPrice"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            unitPrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("billingCurrencyCode"u8))
                        {
                            billingCurrencyCode = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceLocation"u8))
                        {
                            resourceLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("consumedService"u8))
                        {
                            consumedService = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceInfo1"u8))
                        {
                            serviceInfo1 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceInfo2"u8))
                        {
                            serviceInfo2 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalInfo"u8))
                        {
                            additionalInfo = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("invoiceSectionId"u8))
                        {
                            invoiceSectionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("invoiceSectionName"u8))
                        {
                            invoiceSectionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costCenter"u8))
                        {
                            costCenter = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceGroup"u8))
                        {
                            resourceGroup = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("reservationId"u8))
                        {
                            reservationId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("reservationName"u8))
                        {
                            reservationName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productOrderId"u8))
                        {
                            productOrderId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productOrderName"u8))
                        {
                            productOrderName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isAzureCreditEligible"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isAzureCreditEligible = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("term"u8))
                        {
                            term = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherName"u8))
                        {
                            publisherName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherType"u8))
                        {
                            publisherType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("chargeType"u8))
                        {
                            chargeType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("frequency"u8))
                        {
                            frequency = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costInBillingCurrency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            costInBillingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("costInPricingCurrency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            costInPricingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRate"u8))
                        {
                            exchangeRate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRateDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            exchangeRateDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("invoiceId"u8))
                        {
                            invoiceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("previousInvoiceId"u8))
                        {
                            previousInvoiceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pricingCurrencyCode"u8))
                        {
                            pricingCurrencyCode = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productIdentifier"u8))
                        {
                            productIdentifier = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceLocationNormalized"u8))
                        {
                            resourceLocationNormalized = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("servicePeriodStartDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            servicePeriodStartDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("servicePeriodEndDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null || property0.Value.ValueKind == JsonValueKind.String && property0.Value.GetString().Length == 0)
                            {
                                continue;
                            }
                            servicePeriodEndDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("customerTenantId"u8))
                        {
                            customerTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("customerName"u8))
                        {
                            customerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("partnerTenantId"u8))
                        {
                            partnerTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("partnerName"u8))
                        {
                            partnerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resellerMpnId"u8))
                        {
                            resellerMpnId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resellerName"u8))
                        {
                            resellerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherId"u8))
                        {
                            publisherId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("marketPrice"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            marketPrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("exchangeRatePricingToBilling"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            exchangeRatePricingToBilling = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("paygCostInBillingCurrency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            paygCostInBillingCurrency = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("paygCostInUSD"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            paygCostInUSD = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("partnerEarnedCreditRate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            partnerEarnedCreditRate = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("partnerEarnedCreditApplied"u8))
                        {
                            partnerEarnedCreditApplied = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("payGPrice"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            payGPrice = property0.Value.GetDecimal();
                            continue;
                        }
                        if (property0.NameEquals("benefitId"u8))
                        {
                            benefitId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("benefitName"u8))
                        {
                            benefitName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provider"u8))
                        {
                            provider = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("costAllocationRuleName"u8))
                        {
                            costAllocationRuleName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ConsumptionModernUsageDetail(id, name, type, systemData.Value, kind, Optional.ToNullable(etag), Optional.ToDictionary(tags), serializedAdditionalRawData, billingAccountId.Value, Optional.ToNullable(effectivePrice), Optional.ToNullable(pricingModel), billingAccountName.Value, Optional.ToNullable(billingPeriodStartDate), Optional.ToNullable(billingPeriodEndDate), billingProfileId.Value, billingProfileName.Value, subscriptionGuid.Value, subscriptionName.Value, Optional.ToNullable(date), product.Value, Optional.ToNullable(meterId), meterName.Value, meterRegion.Value, meterCategory.Value, meterSubCategory.Value, serviceFamily.Value, Optional.ToNullable(quantity), unitOfMeasure.Value, instanceName.Value, Optional.ToNullable(costInUSD), Optional.ToNullable(unitPrice), billingCurrencyCode.Value, resourceLocation.Value, consumedService.Value, serviceInfo1.Value, serviceInfo2.Value, additionalInfo.Value, invoiceSectionId.Value, invoiceSectionName.Value, costCenter.Value, resourceGroup.Value, reservationId.Value, reservationName.Value, productOrderId.Value, productOrderName.Value, Optional.ToNullable(isAzureCreditEligible), term.Value, publisherName.Value, publisherType.Value, chargeType.Value, frequency.Value, Optional.ToNullable(costInBillingCurrency), Optional.ToNullable(costInPricingCurrency), exchangeRate.Value, Optional.ToNullable(exchangeRateDate), invoiceId.Value, previousInvoiceId.Value, pricingCurrencyCode.Value, productIdentifier.Value, resourceLocationNormalized.Value, Optional.ToNullable(servicePeriodStartDate), Optional.ToNullable(servicePeriodEndDate), customerTenantId.Value, customerName.Value, partnerTenantId.Value, partnerName.Value, resellerMpnId.Value, resellerName.Value, publisherId.Value, Optional.ToNullable(marketPrice), Optional.ToNullable(exchangeRatePricingToBilling), Optional.ToNullable(paygCostInBillingCurrency), Optional.ToNullable(paygCostInUSD), Optional.ToNullable(partnerEarnedCreditRate), partnerEarnedCreditApplied.Value, Optional.ToNullable(payGPrice), benefitId.Value, benefitName.Value, provider.Value, costAllocationRuleName.Value);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                if (Name.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Name}'''");
                }
                else
                {
                    builder.AppendLine($" '{Name}'");
                }
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                if (Tags.Any())
                {
                    builder.Append("  tags:");
                    builder.AppendLine(" {");
                    foreach (var item in Tags)
                    {
                        builder.Append($"    {item.Key}:");
                        if (item.Value == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Value.Contains(Environment.NewLine))
                        {
                            builder.AppendLine(" '''");
                            builder.AppendLine($"{item.Value}'''");
                        }
                        else
                        {
                            builder.AppendLine($" '{item.Value}'");
                        }
                    }
                    builder.AppendLine("  }");
                }
            }

            if (Optional.IsDefined(Kind))
            {
                builder.Append("  kind:");
                builder.AppendLine($" '{Kind.ToString()}'");
            }

            if (Optional.IsDefined(ETag))
            {
                builder.Append("  etag:");
                builder.AppendLine($" '{ETag.Value.ToString()}'");
            }

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(BillingAccountId))
            {
                builder.Append("    billingAccountId:");
                if (BillingAccountId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BillingAccountId}'''");
                }
                else
                {
                    builder.AppendLine($" '{BillingAccountId}'");
                }
            }

            if (Optional.IsDefined(EffectivePrice))
            {
                builder.Append("    effectivePrice:");
                builder.AppendLine($" '{EffectivePrice.Value.ToString()}'");
            }

            if (Optional.IsDefined(PricingModel))
            {
                builder.Append("    pricingModel:");
                builder.AppendLine($" '{PricingModel.Value.ToString()}'");
            }

            if (Optional.IsDefined(BillingAccountName))
            {
                builder.Append("    billingAccountName:");
                if (BillingAccountName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BillingAccountName}'''");
                }
                else
                {
                    builder.AppendLine($" '{BillingAccountName}'");
                }
            }

            if (Optional.IsDefined(BillingPeriodStartOn))
            {
                builder.Append("    billingPeriodStartDate:");
                var formattedDateTimeString = TypeFormatters.ToString(BillingPeriodStartOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(BillingPeriodEndOn))
            {
                builder.Append("    billingPeriodEndDate:");
                var formattedDateTimeString = TypeFormatters.ToString(BillingPeriodEndOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(BillingProfileId))
            {
                builder.Append("    billingProfileId:");
                if (BillingProfileId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BillingProfileId}'''");
                }
                else
                {
                    builder.AppendLine($" '{BillingProfileId}'");
                }
            }

            if (Optional.IsDefined(BillingProfileName))
            {
                builder.Append("    billingProfileName:");
                if (BillingProfileName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BillingProfileName}'''");
                }
                else
                {
                    builder.AppendLine($" '{BillingProfileName}'");
                }
            }

            if (Optional.IsDefined(SubscriptionGuid))
            {
                builder.Append("    subscriptionGuid:");
                if (SubscriptionGuid.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SubscriptionGuid}'''");
                }
                else
                {
                    builder.AppendLine($" '{SubscriptionGuid}'");
                }
            }

            if (Optional.IsDefined(SubscriptionName))
            {
                builder.Append("    subscriptionName:");
                if (SubscriptionName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SubscriptionName}'''");
                }
                else
                {
                    builder.AppendLine($" '{SubscriptionName}'");
                }
            }

            if (Optional.IsDefined(On))
            {
                builder.Append("    date:");
                var formattedDateTimeString = TypeFormatters.ToString(On.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(Product))
            {
                builder.Append("    product:");
                if (Product.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Product}'''");
                }
                else
                {
                    builder.AppendLine($" '{Product}'");
                }
            }

            if (Optional.IsDefined(MeterId))
            {
                builder.Append("    meterId:");
                builder.AppendLine($" '{MeterId.Value.ToString()}'");
            }

            if (Optional.IsDefined(MeterName))
            {
                builder.Append("    meterName:");
                if (MeterName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterName}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterName}'");
                }
            }

            if (Optional.IsDefined(MeterRegion))
            {
                builder.Append("    meterRegion:");
                if (MeterRegion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterRegion}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterRegion}'");
                }
            }

            if (Optional.IsDefined(MeterCategory))
            {
                builder.Append("    meterCategory:");
                if (MeterCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterCategory}'");
                }
            }

            if (Optional.IsDefined(MeterSubCategory))
            {
                builder.Append("    meterSubCategory:");
                if (MeterSubCategory.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{MeterSubCategory}'''");
                }
                else
                {
                    builder.AppendLine($" '{MeterSubCategory}'");
                }
            }

            if (Optional.IsDefined(ServiceFamily))
            {
                builder.Append("    serviceFamily:");
                if (ServiceFamily.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServiceFamily}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServiceFamily}'");
                }
            }

            if (Optional.IsDefined(Quantity))
            {
                builder.Append("    quantity:");
                builder.AppendLine($" '{Quantity.Value.ToString()}'");
            }

            if (Optional.IsDefined(UnitOfMeasure))
            {
                builder.Append("    unitOfMeasure:");
                if (UnitOfMeasure.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{UnitOfMeasure}'''");
                }
                else
                {
                    builder.AppendLine($" '{UnitOfMeasure}'");
                }
            }

            if (Optional.IsDefined(InstanceName))
            {
                builder.Append("    instanceName:");
                if (InstanceName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InstanceName}'''");
                }
                else
                {
                    builder.AppendLine($" '{InstanceName}'");
                }
            }

            if (Optional.IsDefined(CostInUSD))
            {
                builder.Append("    costInUSD:");
                builder.AppendLine($" '{CostInUSD.Value.ToString()}'");
            }

            if (Optional.IsDefined(UnitPrice))
            {
                builder.Append("    unitPrice:");
                builder.AppendLine($" '{UnitPrice.Value.ToString()}'");
            }

            if (Optional.IsDefined(BillingCurrencyCode))
            {
                builder.Append("    billingCurrencyCode:");
                if (BillingCurrencyCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BillingCurrencyCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{BillingCurrencyCode}'");
                }
            }

            if (Optional.IsDefined(ResourceLocation))
            {
                builder.Append("    resourceLocation:");
                if (ResourceLocation.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceLocation}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceLocation}'");
                }
            }

            if (Optional.IsDefined(ConsumedService))
            {
                builder.Append("    consumedService:");
                if (ConsumedService.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ConsumedService}'''");
                }
                else
                {
                    builder.AppendLine($" '{ConsumedService}'");
                }
            }

            if (Optional.IsDefined(ServiceInfo1))
            {
                builder.Append("    serviceInfo1:");
                if (ServiceInfo1.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServiceInfo1}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServiceInfo1}'");
                }
            }

            if (Optional.IsDefined(ServiceInfo2))
            {
                builder.Append("    serviceInfo2:");
                if (ServiceInfo2.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ServiceInfo2}'''");
                }
                else
                {
                    builder.AppendLine($" '{ServiceInfo2}'");
                }
            }

            if (Optional.IsDefined(AdditionalInfo))
            {
                builder.Append("    additionalInfo:");
                if (AdditionalInfo.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{AdditionalInfo}'''");
                }
                else
                {
                    builder.AppendLine($" '{AdditionalInfo}'");
                }
            }

            if (Optional.IsDefined(InvoiceSectionId))
            {
                builder.Append("    invoiceSectionId:");
                if (InvoiceSectionId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InvoiceSectionId}'''");
                }
                else
                {
                    builder.AppendLine($" '{InvoiceSectionId}'");
                }
            }

            if (Optional.IsDefined(InvoiceSectionName))
            {
                builder.Append("    invoiceSectionName:");
                if (InvoiceSectionName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InvoiceSectionName}'''");
                }
                else
                {
                    builder.AppendLine($" '{InvoiceSectionName}'");
                }
            }

            if (Optional.IsDefined(CostCenter))
            {
                builder.Append("    costCenter:");
                if (CostCenter.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CostCenter}'''");
                }
                else
                {
                    builder.AppendLine($" '{CostCenter}'");
                }
            }

            if (Optional.IsDefined(ResourceGroup))
            {
                builder.Append("    resourceGroup:");
                if (ResourceGroup.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceGroup}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceGroup}'");
                }
            }

            if (Optional.IsDefined(ReservationId))
            {
                builder.Append("    reservationId:");
                if (ReservationId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReservationId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReservationId}'");
                }
            }

            if (Optional.IsDefined(ReservationName))
            {
                builder.Append("    reservationName:");
                if (ReservationName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReservationName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReservationName}'");
                }
            }

            if (Optional.IsDefined(ProductOrderId))
            {
                builder.Append("    productOrderId:");
                if (ProductOrderId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProductOrderId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProductOrderId}'");
                }
            }

            if (Optional.IsDefined(ProductOrderName))
            {
                builder.Append("    productOrderName:");
                if (ProductOrderName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProductOrderName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProductOrderName}'");
                }
            }

            if (Optional.IsDefined(IsAzureCreditEligible))
            {
                builder.Append("    isAzureCreditEligible:");
                var boolValue = IsAzureCreditEligible.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(Term))
            {
                builder.Append("    term:");
                if (Term.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Term}'''");
                }
                else
                {
                    builder.AppendLine($" '{Term}'");
                }
            }

            if (Optional.IsDefined(PublisherName))
            {
                builder.Append("    publisherName:");
                if (PublisherName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PublisherName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PublisherName}'");
                }
            }

            if (Optional.IsDefined(PublisherType))
            {
                builder.Append("    publisherType:");
                if (PublisherType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PublisherType}'''");
                }
                else
                {
                    builder.AppendLine($" '{PublisherType}'");
                }
            }

            if (Optional.IsDefined(ChargeType))
            {
                builder.Append("    chargeType:");
                if (ChargeType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ChargeType}'''");
                }
                else
                {
                    builder.AppendLine($" '{ChargeType}'");
                }
            }

            if (Optional.IsDefined(Frequency))
            {
                builder.Append("    frequency:");
                if (Frequency.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Frequency}'''");
                }
                else
                {
                    builder.AppendLine($" '{Frequency}'");
                }
            }

            if (Optional.IsDefined(CostInBillingCurrency))
            {
                builder.Append("    costInBillingCurrency:");
                builder.AppendLine($" '{CostInBillingCurrency.Value.ToString()}'");
            }

            if (Optional.IsDefined(CostInPricingCurrency))
            {
                builder.Append("    costInPricingCurrency:");
                builder.AppendLine($" '{CostInPricingCurrency.Value.ToString()}'");
            }

            if (Optional.IsDefined(ExchangeRate))
            {
                builder.Append("    exchangeRate:");
                if (ExchangeRate.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ExchangeRate}'''");
                }
                else
                {
                    builder.AppendLine($" '{ExchangeRate}'");
                }
            }

            if (Optional.IsDefined(ExchangeRateOn))
            {
                builder.Append("    exchangeRateDate:");
                var formattedDateTimeString = TypeFormatters.ToString(ExchangeRateOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(InvoiceId))
            {
                builder.Append("    invoiceId:");
                if (InvoiceId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InvoiceId}'''");
                }
                else
                {
                    builder.AppendLine($" '{InvoiceId}'");
                }
            }

            if (Optional.IsDefined(PreviousInvoiceId))
            {
                builder.Append("    previousInvoiceId:");
                if (PreviousInvoiceId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PreviousInvoiceId}'''");
                }
                else
                {
                    builder.AppendLine($" '{PreviousInvoiceId}'");
                }
            }

            if (Optional.IsDefined(PricingCurrencyCode))
            {
                builder.Append("    pricingCurrencyCode:");
                if (PricingCurrencyCode.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PricingCurrencyCode}'''");
                }
                else
                {
                    builder.AppendLine($" '{PricingCurrencyCode}'");
                }
            }

            if (Optional.IsDefined(ProductIdentifier))
            {
                builder.Append("    productIdentifier:");
                if (ProductIdentifier.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ProductIdentifier}'''");
                }
                else
                {
                    builder.AppendLine($" '{ProductIdentifier}'");
                }
            }

            if (Optional.IsDefined(ResourceLocationNormalized))
            {
                builder.Append("    resourceLocationNormalized:");
                if (ResourceLocationNormalized.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResourceLocationNormalized}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResourceLocationNormalized}'");
                }
            }

            if (Optional.IsDefined(ServicePeriodStartOn))
            {
                builder.Append("    servicePeriodStartDate:");
                var formattedDateTimeString = TypeFormatters.ToString(ServicePeriodStartOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(ServicePeriodEndOn))
            {
                builder.Append("    servicePeriodEndDate:");
                var formattedDateTimeString = TypeFormatters.ToString(ServicePeriodEndOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(CustomerTenantId))
            {
                builder.Append("    customerTenantId:");
                if (CustomerTenantId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CustomerTenantId}'''");
                }
                else
                {
                    builder.AppendLine($" '{CustomerTenantId}'");
                }
            }

            if (Optional.IsDefined(CustomerName))
            {
                builder.Append("    customerName:");
                if (CustomerName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CustomerName}'''");
                }
                else
                {
                    builder.AppendLine($" '{CustomerName}'");
                }
            }

            if (Optional.IsDefined(PartnerTenantId))
            {
                builder.Append("    partnerTenantId:");
                if (PartnerTenantId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PartnerTenantId}'''");
                }
                else
                {
                    builder.AppendLine($" '{PartnerTenantId}'");
                }
            }

            if (Optional.IsDefined(PartnerName))
            {
                builder.Append("    partnerName:");
                if (PartnerName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PartnerName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PartnerName}'");
                }
            }

            if (Optional.IsDefined(ResellerMpnId))
            {
                builder.Append("    resellerMpnId:");
                if (ResellerMpnId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResellerMpnId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResellerMpnId}'");
                }
            }

            if (Optional.IsDefined(ResellerName))
            {
                builder.Append("    resellerName:");
                if (ResellerName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ResellerName}'''");
                }
                else
                {
                    builder.AppendLine($" '{ResellerName}'");
                }
            }

            if (Optional.IsDefined(PublisherId))
            {
                builder.Append("    publisherId:");
                if (PublisherId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PublisherId}'''");
                }
                else
                {
                    builder.AppendLine($" '{PublisherId}'");
                }
            }

            if (Optional.IsDefined(MarketPrice))
            {
                builder.Append("    marketPrice:");
                builder.AppendLine($" '{MarketPrice.Value.ToString()}'");
            }

            if (Optional.IsDefined(ExchangeRatePricingToBilling))
            {
                builder.Append("    exchangeRatePricingToBilling:");
                builder.AppendLine($" '{ExchangeRatePricingToBilling.Value.ToString()}'");
            }

            if (Optional.IsDefined(PaygCostInBillingCurrency))
            {
                builder.Append("    paygCostInBillingCurrency:");
                builder.AppendLine($" '{PaygCostInBillingCurrency.Value.ToString()}'");
            }

            if (Optional.IsDefined(PaygCostInUSD))
            {
                builder.Append("    paygCostInUSD:");
                builder.AppendLine($" '{PaygCostInUSD.Value.ToString()}'");
            }

            if (Optional.IsDefined(PartnerEarnedCreditRate))
            {
                builder.Append("    partnerEarnedCreditRate:");
                builder.AppendLine($" '{PartnerEarnedCreditRate.Value.ToString()}'");
            }

            if (Optional.IsDefined(PartnerEarnedCreditApplied))
            {
                builder.Append("    partnerEarnedCreditApplied:");
                if (PartnerEarnedCreditApplied.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PartnerEarnedCreditApplied}'''");
                }
                else
                {
                    builder.AppendLine($" '{PartnerEarnedCreditApplied}'");
                }
            }

            if (Optional.IsDefined(PayGPrice))
            {
                builder.Append("    payGPrice:");
                builder.AppendLine($" '{PayGPrice.Value.ToString()}'");
            }

            if (Optional.IsDefined(BenefitId))
            {
                builder.Append("    benefitId:");
                if (BenefitId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BenefitId}'''");
                }
                else
                {
                    builder.AppendLine($" '{BenefitId}'");
                }
            }

            if (Optional.IsDefined(BenefitName))
            {
                builder.Append("    benefitName:");
                if (BenefitName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{BenefitName}'''");
                }
                else
                {
                    builder.AppendLine($" '{BenefitName}'");
                }
            }

            if (Optional.IsDefined(Provider))
            {
                builder.Append("    provider:");
                if (Provider.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Provider}'''");
                }
                else
                {
                    builder.AppendLine($" '{Provider}'");
                }
            }

            if (Optional.IsDefined(CostAllocationRuleName))
            {
                builder.Append("    costAllocationRuleName:");
                if (CostAllocationRuleName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CostAllocationRuleName}'''");
                }
                else
                {
                    builder.AppendLine($" '{CostAllocationRuleName}'");
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<ConsumptionModernUsageDetail>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionModernUsageDetail>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(ConsumptionModernUsageDetail)} does not support '{options.Format}' format.");
            }
        }

        ConsumptionModernUsageDetail IPersistableModel<ConsumptionModernUsageDetail>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ConsumptionModernUsageDetail>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeConsumptionModernUsageDetail(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(ConsumptionModernUsageDetail)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ConsumptionModernUsageDetail>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
