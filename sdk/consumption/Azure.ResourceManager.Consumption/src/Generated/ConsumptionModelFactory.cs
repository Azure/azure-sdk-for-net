// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Consumption;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Consumption.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ConsumptionModelFactory
    {

        /// <summary> Initializes a new instance of ConsumptionBudgetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="category"> The category of the budget, whether the budget tracks cost or usage. </param>
        /// <param name="amount"> The total amount of cost to track with the budget. </param>
        /// <param name="timeGrain"> The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers. </param>
        /// <param name="timePeriod"> Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date. </param>
        /// <param name="filter"> May be used to filter budgets by user-specified dimensions and/or tags. </param>
        /// <param name="currentSpend"> The current amount of cost which is being tracked for a budget. </param>
        /// <param name="notifications"> Dictionary of notifications associated with the budget. Budget can have up to five notifications. </param>
        /// <param name="forecastSpend"> The forecasted cost which is being tracked for a budget. </param>
        /// <param name="etag"> eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not. </param>
        /// <returns> A new <see cref="Consumption.ConsumptionBudgetData"/> instance for mocking. </returns>
        public static ConsumptionBudgetData ConsumptionBudgetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BudgetCategory? category = null, decimal? amount = null, BudgetTimeGrainType? timeGrain = null, BudgetTimePeriod timePeriod = null, ConsumptionBudgetFilter filter = null, BudgetCurrentSpend currentSpend = null, IDictionary<string, BudgetAssociatedNotification> notifications = null, BudgetForecastSpend forecastSpend = null, ETag? etag = null)
        {
            notifications ??= new Dictionary<string, BudgetAssociatedNotification>();

            return new ConsumptionBudgetData(id, name, resourceType, systemData, category, amount, timeGrain, timePeriod, filter, currentSpend, notifications, forecastSpend, etag);
        }

        /// <summary> Initializes a new instance of BudgetTimePeriod. </summary>
        /// <param name="startOn"> The start date for the budget. </param>
        /// <param name="endOn"> The end date for the budget. If not provided, we default this to 10 years from the start date. </param>
        /// <returns> A new <see cref="Models.BudgetTimePeriod"/> instance for mocking. </returns>
        public static BudgetTimePeriod BudgetTimePeriod(DateTimeOffset startOn = default, DateTimeOffset? endOn = null)
        {
            return new BudgetTimePeriod(startOn, endOn);
        }

        /// <summary> Initializes a new instance of ConsumptionBudgetFilter. </summary>
        /// <param name="and"> The logical &quot;AND&quot; expression. Must have at least 2 items. </param>
        /// <param name="dimensions"> Has comparison expression for a dimension. </param>
        /// <param name="tags"> Has comparison expression for a tag. </param>
        /// <returns> A new <see cref="Models.ConsumptionBudgetFilter"/> instance for mocking. </returns>
        public static ConsumptionBudgetFilter ConsumptionBudgetFilter(IEnumerable<BudgetFilterProperties> and = null, BudgetComparisonExpression dimensions = null, BudgetComparisonExpression tags = null)
        {
            and ??= new List<BudgetFilterProperties>();

            return new ConsumptionBudgetFilter(and?.ToList(), dimensions, tags);
        }

        /// <summary> Initializes a new instance of BudgetFilterProperties. </summary>
        /// <param name="dimensions"> Has comparison expression for a dimension. </param>
        /// <param name="tags"> Has comparison expression for a tag. </param>
        /// <returns> A new <see cref="Models.BudgetFilterProperties"/> instance for mocking. </returns>
        public static BudgetFilterProperties BudgetFilterProperties(BudgetComparisonExpression dimensions = null, BudgetComparisonExpression tags = null)
        {
            return new BudgetFilterProperties(dimensions, tags);
        }

        /// <summary> Initializes a new instance of BudgetCurrentSpend. </summary>
        /// <param name="amount"> The total amount of cost which is being tracked by the budget. </param>
        /// <param name="unit"> The unit of measure for the budget amount. </param>
        /// <returns> A new <see cref="Models.BudgetCurrentSpend"/> instance for mocking. </returns>
        public static BudgetCurrentSpend BudgetCurrentSpend(decimal? amount = null, string unit = null)
        {
            return new BudgetCurrentSpend(amount, unit);
        }

        /// <summary> Initializes a new instance of BudgetAssociatedNotification. </summary>
        /// <param name="isEnabled"> The notification is enabled or not. </param>
        /// <param name="operator"> The comparison operator. </param>
        /// <param name="threshold"> Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000. </param>
        /// <param name="contactEmails"> Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified. </param>
        /// <param name="contactRoles"> Contact roles to send the budget notification to when the threshold is exceeded. </param>
        /// <param name="contactGroups"> Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes. </param>
        /// <param name="thresholdType"> The type of threshold. </param>
        /// <param name="locale"> Language in which the recipient will receive the notification. </param>
        /// <returns> A new <see cref="Models.BudgetAssociatedNotification"/> instance for mocking. </returns>
        public static BudgetAssociatedNotification BudgetAssociatedNotification(bool isEnabled = default, NotificationAlertTriggerType @operator = default, decimal threshold = default, IEnumerable<string> contactEmails = null, IEnumerable<string> contactRoles = null, IEnumerable<string> contactGroups = null, NotificationThresholdType? thresholdType = null, RecipientNotificationLanguageCode? locale = null)
        {
            contactEmails ??= new List<string>();
            contactRoles ??= new List<string>();
            contactGroups ??= new List<string>();

            return new BudgetAssociatedNotification(isEnabled, @operator, threshold, contactEmails?.ToList(), contactRoles?.ToList(), contactGroups?.ToList(), thresholdType, locale);
        }

        /// <summary> Initializes a new instance of BudgetForecastSpend. </summary>
        /// <param name="amount"> The forecasted cost for the total time period which is being tracked by the budget. This value is only provided if the budget contains a forecast alert type. </param>
        /// <param name="unit"> The unit of measure for the budget amount. </param>
        /// <returns> A new <see cref="Models.BudgetForecastSpend"/> instance for mocking. </returns>
        public static BudgetForecastSpend BudgetForecastSpend(decimal? amount = null, string unit = null)
        {
            return new BudgetForecastSpend(amount, unit);
        }

        /// <summary> Initializes a new instance of ConsumptionBalanceResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="currency"> The ISO currency in which the meter is charged, for example, USD. </param>
        /// <param name="beginningBalance"> The beginning balance for the billing period. </param>
        /// <param name="endingBalance"> The ending balance for the billing period (for open periods this will be updated daily). </param>
        /// <param name="newPurchases"> Total new purchase amount. </param>
        /// <param name="adjustments"> Total adjustment amount. </param>
        /// <param name="utilized"> Total Commitment usage. </param>
        /// <param name="serviceOverage"> Overage for Azure services. </param>
        /// <param name="chargesBilledSeparately"> Charges Billed separately. </param>
        /// <param name="totalOverage"> serviceOverage + chargesBilledSeparately. </param>
        /// <param name="totalUsage"> Azure service commitment + total Overage. </param>
        /// <param name="azureMarketplaceServiceCharges"> Total charges for Azure Marketplace. </param>
        /// <param name="billingFrequency"> The billing frequency. </param>
        /// <param name="isPriceHidden"> Price is hidden or not. </param>
        /// <param name="newPurchasesDetails"> List of new purchases. </param>
        /// <param name="adjustmentDetails"> List of Adjustments (Promo credit, SIE credit etc.). </param>
        /// <param name="etag"> The etag for the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionBalanceResult"/> instance for mocking. </returns>
        public static ConsumptionBalanceResult ConsumptionBalanceResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string currency = null, decimal? beginningBalance = null, decimal? endingBalance = null, decimal? newPurchases = null, decimal? adjustments = null, decimal? utilized = null, decimal? serviceOverage = null, decimal? chargesBilledSeparately = null, decimal? totalOverage = null, decimal? totalUsage = null, decimal? azureMarketplaceServiceCharges = null, ConsumptionBillingFrequency? billingFrequency = null, bool? isPriceHidden = null, IEnumerable<ConsumptionBalanceNewPurchasesDetail> newPurchasesDetails = null, IEnumerable<ConsumptionBalanceAdjustmentDetail> adjustmentDetails = null, ETag? etag = null, IReadOnlyDictionary<string, string> tags = null)
        {
            newPurchasesDetails ??= new List<ConsumptionBalanceNewPurchasesDetail>();
            adjustmentDetails ??= new List<ConsumptionBalanceAdjustmentDetail>();
            tags ??= new Dictionary<string, string>();

            return new ConsumptionBalanceResult(id, name, resourceType, systemData, currency, beginningBalance, endingBalance, newPurchases, adjustments, utilized, serviceOverage, chargesBilledSeparately, totalOverage, totalUsage, azureMarketplaceServiceCharges, billingFrequency, isPriceHidden, newPurchasesDetails?.ToList(), adjustmentDetails?.ToList(), etag, tags);
        }

        /// <summary> Initializes a new instance of ConsumptionBalanceNewPurchasesDetail. </summary>
        /// <param name="name"> the name of new purchase. </param>
        /// <param name="value"> the value of new purchase. </param>
        /// <returns> A new <see cref="Models.ConsumptionBalanceNewPurchasesDetail"/> instance for mocking. </returns>
        public static ConsumptionBalanceNewPurchasesDetail ConsumptionBalanceNewPurchasesDetail(string name = null, decimal? value = null)
        {
            return new ConsumptionBalanceNewPurchasesDetail(name, value);
        }

        /// <summary> Initializes a new instance of ConsumptionBalanceAdjustmentDetail. </summary>
        /// <param name="name"> the name of new adjustment. </param>
        /// <param name="value"> the value of new adjustment. </param>
        /// <returns> A new <see cref="Models.ConsumptionBalanceAdjustmentDetail"/> instance for mocking. </returns>
        public static ConsumptionBalanceAdjustmentDetail ConsumptionBalanceAdjustmentDetail(string name = null, decimal? value = null)
        {
            return new ConsumptionBalanceAdjustmentDetail(name, value);
        }

        /// <summary> Initializes a new instance of ConsumptionReservationSummary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="reservationOrderId"> The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations. </param>
        /// <param name="reservationId"> The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to. </param>
        /// <param name="skuName"> This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records. </param>
        /// <param name="reservedHours"> This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days. </param>
        /// <param name="useOn"> Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month. </param>
        /// <param name="usedHours"> Total used hours by the reservation. </param>
        /// <param name="minUtilizationPercentage"> This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day. </param>
        /// <param name="avgUtilizationPercentage"> This is average utilization for the entire time range. (day or month depending on the grain). </param>
        /// <param name="maxUtilizationPercentage"> This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day. </param>
        /// <param name="kind"> The reservation kind. </param>
        /// <param name="purchasedQuantity"> This is the purchased quantity for the reservationId. </param>
        /// <param name="remainingQuantity"> This is the remaining quantity for the reservationId. </param>
        /// <param name="totalReservedQuantity"> This is the total count of instances that are reserved for the reservationId. </param>
        /// <param name="usedQuantity"> This is the used quantity for the reservationId. </param>
        /// <param name="utilizedPercentage"> This is the utilized percentage for the reservation Id. </param>
        /// <param name="etag"> The etag for the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionReservationSummary"/> instance for mocking. </returns>
        public static ConsumptionReservationSummary ConsumptionReservationSummary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string reservationOrderId = null, string reservationId = null, string skuName = null, decimal? reservedHours = null, DateTimeOffset? useOn = null, decimal? usedHours = null, decimal? minUtilizationPercentage = null, decimal? avgUtilizationPercentage = null, decimal? maxUtilizationPercentage = null, string kind = null, decimal? purchasedQuantity = null, decimal? remainingQuantity = null, decimal? totalReservedQuantity = null, decimal? usedQuantity = null, decimal? utilizedPercentage = null, ETag? etag = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ConsumptionReservationSummary(id, name, resourceType, systemData, reservationOrderId, reservationId, skuName, reservedHours, useOn, usedHours, minUtilizationPercentage, avgUtilizationPercentage, maxUtilizationPercentage, kind, purchasedQuantity, remainingQuantity, totalReservedQuantity, usedQuantity, utilizedPercentage, etag, tags);
        }

        /// <summary> Initializes a new instance of ConsumptionReservationDetail. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="reservationOrderId"> The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations. </param>
        /// <param name="instanceFlexibilityRatio"> The instance Flexibility Ratio. </param>
        /// <param name="instanceFlexibilityGroup"> The instance Flexibility Group. </param>
        /// <param name="reservationId"> The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to. </param>
        /// <param name="skuName"> This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records. </param>
        /// <param name="reservedHours"> This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days. </param>
        /// <param name="consumptionOccurredOn"> The date on which consumption occurred. </param>
        /// <param name="usedHours"> This is the total hours used by the instance. </param>
        /// <param name="instanceId"> This identifier is the name of the resource or the fully qualified Resource ID. </param>
        /// <param name="totalReservedQuantity"> This is the total count of instances that are reserved for the reservationId. </param>
        /// <param name="kind"> The reservation kind. </param>
        /// <param name="etag"> The etag for the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionReservationDetail"/> instance for mocking. </returns>
        public static ConsumptionReservationDetail ConsumptionReservationDetail(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string reservationOrderId = null, string instanceFlexibilityRatio = null, string instanceFlexibilityGroup = null, string reservationId = null, string skuName = null, decimal? reservedHours = null, DateTimeOffset? consumptionOccurredOn = null, decimal? usedHours = null, ResourceIdentifier instanceId = null, decimal? totalReservedQuantity = null, string kind = null, ETag? etag = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ConsumptionReservationDetail(id, name, resourceType, systemData, reservationOrderId, instanceFlexibilityRatio, instanceFlexibilityGroup, reservationId, skuName, reservedHours, consumptionOccurredOn, usedHours, instanceId, totalReservedQuantity, kind, etag, tags);
        }

        /// <summary> Initializes a new instance of ConsumptionReservationTransaction. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="transactOn"> The date of the transaction. </param>
        /// <param name="reservationOrderId"> The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations. </param>
        /// <param name="description"> The description of the transaction. </param>
        /// <param name="eventType"> The type of the transaction (Purchase, Cancel or Refund). </param>
        /// <param name="quantity"> The quantity of the transaction. </param>
        /// <param name="amount"> The charge of the transaction. </param>
        /// <param name="currency"> The ISO currency in which the transaction is charged, for example, USD. </param>
        /// <param name="reservationOrderName"> The name of the reservation order. </param>
        /// <param name="purchasingEnrollment"> The purchasing enrollment. </param>
        /// <param name="purchasingSubscriptionGuid"> The subscription guid that makes the transaction. </param>
        /// <param name="purchasingSubscriptionName"> The subscription name that makes the transaction. </param>
        /// <param name="armSkuName"> This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records. </param>
        /// <param name="term"> This is the term of the transaction. </param>
        /// <param name="region"> The region of the transaction. </param>
        /// <param name="accountName"> The name of the account that makes the transaction. </param>
        /// <param name="accountOwnerEmail"> The email of the account owner that makes the transaction. </param>
        /// <param name="departmentName"> The department name. </param>
        /// <param name="costCenter"> The cost center of this department if it is a department and a cost center is provided. </param>
        /// <param name="currentEnrollment"> The current enrollment. </param>
        /// <param name="billingFrequency"> The billing frequency, which can be either one-time or recurring. </param>
        /// <param name="billingMonth"> The billing month(yyyyMMdd), on which the event initiated. </param>
        /// <param name="monetaryCommitment"> The monetary commitment amount at the enrollment scope. </param>
        /// <param name="overage"> The overage amount at the enrollment scope. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionReservationTransaction"/> instance for mocking. </returns>
        public static ConsumptionReservationTransaction ConsumptionReservationTransaction(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? transactOn = null, string reservationOrderId = null, string description = null, string eventType = null, decimal? quantity = null, decimal? amount = null, string currency = null, string reservationOrderName = null, string purchasingEnrollment = null, Guid? purchasingSubscriptionGuid = null, string purchasingSubscriptionName = null, string armSkuName = null, string term = null, string region = null, string accountName = null, string accountOwnerEmail = null, string departmentName = null, string costCenter = null, string currentEnrollment = null, string billingFrequency = null, int? billingMonth = null, decimal? monetaryCommitment = null, decimal? overage = null, IEnumerable<string> tags = null)
        {
            tags ??= new List<string>();

            return new ConsumptionReservationTransaction(id, name, resourceType, systemData, transactOn, reservationOrderId, description, eventType, quantity, amount, currency, reservationOrderName, purchasingEnrollment, purchasingSubscriptionGuid, purchasingSubscriptionName, armSkuName, term, region, accountName, accountOwnerEmail, departmentName, costCenter, currentEnrollment, billingFrequency, billingMonth, monetaryCommitment, overage, tags?.ToList());
        }

        /// <summary> Initializes a new instance of ConsumptionModernReservationTransaction. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="amount"> The charge of the transaction. </param>
        /// <param name="armSkuName"> This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records. </param>
        /// <param name="billingFrequency"> The billing frequency, which can be either one-time or recurring. </param>
        /// <param name="billingProfileId"> Billing profile Id. </param>
        /// <param name="billingProfileName"> Billing profile name. </param>
        /// <param name="currency"> The ISO currency in which the transaction is charged, for example, USD. </param>
        /// <param name="description"> The description of the transaction. </param>
        /// <param name="transactOn"> The date of the transaction. </param>
        /// <param name="eventType"> The type of the transaction (Purchase, Cancel or Refund). </param>
        /// <param name="invoice"> Invoice Number. </param>
        /// <param name="invoiceId"> Invoice Id as on the invoice where the specific transaction appears. </param>
        /// <param name="invoiceSectionId"> Invoice Section Id. </param>
        /// <param name="invoiceSectionName"> Invoice Section Name. </param>
        /// <param name="purchasingSubscriptionGuid"> The subscription guid that makes the transaction. </param>
        /// <param name="purchasingSubscriptionName"> The subscription name that makes the transaction. </param>
        /// <param name="quantity"> The quantity of the transaction. </param>
        /// <param name="region"> The region of the transaction. </param>
        /// <param name="reservationOrderId"> The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations. </param>
        /// <param name="reservationOrderName"> The name of the reservation order. </param>
        /// <param name="term"> This is the term of the transaction. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionModernReservationTransaction"/> instance for mocking. </returns>
        public static ConsumptionModernReservationTransaction ConsumptionModernReservationTransaction(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, decimal? amount = null, string armSkuName = null, string billingFrequency = null, ResourceIdentifier billingProfileId = null, string billingProfileName = null, string currency = null, string description = null, DateTimeOffset? transactOn = null, string eventType = null, string invoice = null, ResourceIdentifier invoiceId = null, ResourceIdentifier invoiceSectionId = null, string invoiceSectionName = null, Guid? purchasingSubscriptionGuid = null, string purchasingSubscriptionName = null, decimal? quantity = null, string region = null, string reservationOrderId = null, string reservationOrderName = null, string term = null, IEnumerable<string> tags = null)
        {
            tags ??= new List<string>();

            return new ConsumptionModernReservationTransaction(id, name, resourceType, systemData, amount, armSkuName, billingFrequency, billingProfileId, billingProfileName, currency, description, transactOn, eventType, invoice, invoiceId, invoiceSectionId, invoiceSectionName, purchasingSubscriptionGuid, purchasingSubscriptionName, quantity, region, reservationOrderId, reservationOrderName, term, tags?.ToList());
        }

        /// <summary> Initializes a new instance of PriceSheetResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="pricesheets"> Price sheet. </param>
        /// <param name="nextLink"> The link (url) to the next page of results. </param>
        /// <param name="download"> Pricesheet download details. </param>
        /// <param name="etag"> The etag for the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.PriceSheetResult"/> instance for mocking. </returns>
        public static PriceSheetResult PriceSheetResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<PriceSheetProperties> pricesheets = null, string nextLink = null, ConsumptionMeterDetails download = null, ETag? etag = null, IReadOnlyDictionary<string, string> tags = null)
        {
            pricesheets ??= new List<PriceSheetProperties>();
            tags ??= new Dictionary<string, string>();

            return new PriceSheetResult(id, name, resourceType, systemData, pricesheets?.ToList(), nextLink, download, etag, tags);
        }

        /// <summary> Initializes a new instance of PriceSheetProperties. </summary>
        /// <param name="billingPeriodId"> The id of the billing period resource that the usage belongs to. </param>
        /// <param name="meterId"> The meter id (GUID). </param>
        /// <param name="meterDetails"> The details about the meter. By default this is not populated, unless it&apos;s specified in $expand. </param>
        /// <param name="unitOfMeasure"> Unit of measure. </param>
        /// <param name="includedQuantity"> Included quality for an offer. </param>
        /// <param name="partNumber"> Part Number. </param>
        /// <param name="unitPrice"> Unit Price. </param>
        /// <param name="currencyCode"> Currency Code. </param>
        /// <param name="offerId"> Offer Id. </param>
        /// <returns> A new <see cref="Models.PriceSheetProperties"/> instance for mocking. </returns>
        public static PriceSheetProperties PriceSheetProperties(ResourceIdentifier billingPeriodId = null, Guid? meterId = null, ConsumptionMeterDetails meterDetails = null, string unitOfMeasure = null, decimal? includedQuantity = null, string partNumber = null, decimal? unitPrice = null, string currencyCode = null, string offerId = null)
        {
            return new PriceSheetProperties(billingPeriodId, meterId, meterDetails, unitOfMeasure, includedQuantity, partNumber, unitPrice, currencyCode, offerId);
        }

        /// <summary> Initializes a new instance of ConsumptionMeterDetails. </summary>
        /// <param name="meterName"> The name of the meter, within the given meter category. </param>
        /// <param name="meterCategory"> The category of the meter, for example, &apos;Cloud services&apos;, &apos;Networking&apos;, etc.. </param>
        /// <param name="meterSubCategory"> The subcategory of the meter, for example, &apos;A6 Cloud services&apos;, &apos;ExpressRoute (IXP)&apos;, etc.. </param>
        /// <param name="unit"> The unit in which the meter consumption is charged, for example, &apos;Hours&apos;, &apos;GB&apos;, etc. </param>
        /// <param name="meterLocation"> The location in which the Azure service is available. </param>
        /// <param name="totalIncludedQuantity"> The total included quantity associated with the offer. </param>
        /// <param name="pretaxStandardRate"> The pretax listing price. </param>
        /// <param name="serviceName"> The name of the service. </param>
        /// <param name="serviceTier"> The service tier. </param>
        /// <returns> A new <see cref="Models.ConsumptionMeterDetails"/> instance for mocking. </returns>
        public static ConsumptionMeterDetails ConsumptionMeterDetails(string meterName = null, string meterCategory = null, string meterSubCategory = null, string unit = null, string meterLocation = null, decimal? totalIncludedQuantity = null, decimal? pretaxStandardRate = null, string serviceName = null, string serviceTier = null)
        {
            return new ConsumptionMeterDetails(meterName, meterCategory, meterSubCategory, unit, meterLocation, totalIncludedQuantity, pretaxStandardRate, serviceName, serviceTier);
        }

        /// <summary> Initializes a new instance of ConsumptionAggregatedCostResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="billingPeriodId"> The id of the billing period resource that the aggregated cost belongs to. </param>
        /// <param name="usageStartOn"> The start of the date time range covered by aggregated cost. </param>
        /// <param name="usageEndOn"> The end of the date time range covered by the aggregated cost. </param>
        /// <param name="azureCharges"> Azure Charges. </param>
        /// <param name="marketplaceCharges"> Marketplace Charges. </param>
        /// <param name="chargesBilledSeparately"> Charges Billed Separately. </param>
        /// <param name="currency"> The ISO currency in which the meter is charged, for example, USD. </param>
        /// <param name="children"> Children of a management group. </param>
        /// <param name="includedSubscriptions"> List of subscription Guids included in the calculation of aggregated cost. </param>
        /// <param name="excludedSubscriptions"> List of subscription Guids excluded from the calculation of aggregated cost. </param>
        /// <param name="etag"> The etag for the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.ConsumptionAggregatedCostResult"/> instance for mocking. </returns>
        public static ConsumptionAggregatedCostResult ConsumptionAggregatedCostResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string billingPeriodId = null, DateTimeOffset? usageStartOn = null, DateTimeOffset? usageEndOn = null, decimal? azureCharges = null, decimal? marketplaceCharges = null, decimal? chargesBilledSeparately = null, string currency = null, IEnumerable<ConsumptionAggregatedCostResult> children = null, IEnumerable<string> includedSubscriptions = null, IEnumerable<string> excludedSubscriptions = null, ETag? etag = null, IReadOnlyDictionary<string, string> tags = null)
        {
            children ??= new List<ConsumptionAggregatedCostResult>();
            includedSubscriptions ??= new List<string>();
            excludedSubscriptions ??= new List<string>();
            tags ??= new Dictionary<string, string>();

            return new ConsumptionAggregatedCostResult(id, name, resourceType, systemData, billingPeriodId, usageStartOn, usageEndOn, azureCharges, marketplaceCharges, chargesBilledSeparately, currency, children?.ToList(), includedSubscriptions?.ToList(), excludedSubscriptions?.ToList(), etag, tags);
        }

        /// <summary> Initializes a new instance of ConsumptionEventSummary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="transactOn"> The date of the event. </param>
        /// <param name="description"> The description of the event. </param>
        /// <param name="newCredit"> The amount of new credit or commitment for NewCredit or SettleCharges event. </param>
        /// <param name="adjustments"> The amount of balance adjustment. The property is not available for ConsumptionCommitment lots. </param>
        /// <param name="creditExpired"> The amount of expired credit or commitment for NewCredit or SettleCharges event. </param>
        /// <param name="charges"> The amount of charges for events of type SettleCharges and PendingEligibleCharges. </param>
        /// <param name="closedBalance"> The balance after the event. </param>
        /// <param name="eventType"> Identifies the type of the event. </param>
        /// <param name="invoiceNumber"> The number which uniquely identifies the invoice on which the event was billed. This will be empty for unbilled events. </param>
        /// <param name="billingProfileId"> The ID that uniquely identifies the billing profile for which the event happened. The property is only available for billing account of type MicrosoftCustomerAgreement. </param>
        /// <param name="billingProfileDisplayName"> The display name of the billing profile for which the event happened. The property is only available for billing account of type MicrosoftCustomerAgreement. </param>
        /// <param name="lotId"> The ID that uniquely identifies the lot for which the event happened. </param>
        /// <param name="lotSource"> Identifies the source of the lot for which the event happened. </param>
        /// <param name="canceledCredit"> Amount of canceled credit. </param>
        /// <param name="creditCurrency"> The credit currency of the event. </param>
        /// <param name="billingCurrency"> The billing currency of the event. </param>
        /// <param name="reseller"> The reseller of the event. </param>
        /// <param name="creditExpiredInBillingCurrency"> The amount of expired credit or commitment for NewCredit or SettleCharges event in billing currency. </param>
        /// <param name="newCreditInBillingCurrency"> The amount of new credit or commitment for NewCredit or SettleCharges event in billing currency. </param>
        /// <param name="adjustmentsInBillingCurrency"> The amount of balance adjustment in billing currency. </param>
        /// <param name="chargesInBillingCurrency"> The amount of charges for events of type SettleCharges and PendingEligibleCharges in billing currency. </param>
        /// <param name="closedBalanceInBillingCurrency"> The balance in billing currency after the event. </param>
        /// <param name="etag"> eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not. </param>
        /// <returns> A new <see cref="Models.ConsumptionEventSummary"/> instance for mocking. </returns>
        public static ConsumptionEventSummary ConsumptionEventSummary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? transactOn = null, string description = null, ConsumptionAmount newCredit = null, ConsumptionAmount adjustments = null, ConsumptionAmount creditExpired = null, ConsumptionAmount charges = null, ConsumptionAmount closedBalance = null, ConsumptionEventType? eventType = null, string invoiceNumber = null, ResourceIdentifier billingProfileId = null, string billingProfileDisplayName = null, ResourceIdentifier lotId = null, string lotSource = null, ConsumptionAmount canceledCredit = null, string creditCurrency = null, string billingCurrency = null, ConsumptionReseller reseller = null, ConsumptionAmountWithExchangeRate creditExpiredInBillingCurrency = null, ConsumptionAmountWithExchangeRate newCreditInBillingCurrency = null, ConsumptionAmountWithExchangeRate adjustmentsInBillingCurrency = null, ConsumptionAmountWithExchangeRate chargesInBillingCurrency = null, ConsumptionAmountWithExchangeRate closedBalanceInBillingCurrency = null, ETag? etag = null)
        {
            return new ConsumptionEventSummary(id, name, resourceType, systemData, transactOn, description, newCredit, adjustments, creditExpired, charges, closedBalance, eventType, invoiceNumber, billingProfileId, billingProfileDisplayName, lotId, lotSource, canceledCredit, creditCurrency, billingCurrency, reseller, creditExpiredInBillingCurrency, newCreditInBillingCurrency, adjustmentsInBillingCurrency, chargesInBillingCurrency, closedBalanceInBillingCurrency, etag);
        }

        /// <summary> Initializes a new instance of ConsumptionAmount. </summary>
        /// <param name="currency"> Amount currency. </param>
        /// <param name="value"> Amount. </param>
        /// <returns> A new <see cref="Models.ConsumptionAmount"/> instance for mocking. </returns>
        public static ConsumptionAmount ConsumptionAmount(string currency = null, decimal? value = null)
        {
            return new ConsumptionAmount(currency, value);
        }

        /// <summary> Initializes a new instance of ConsumptionReseller. </summary>
        /// <param name="resellerId"> The reseller property ID. </param>
        /// <param name="resellerDescription"> The reseller property description. </param>
        /// <returns> A new <see cref="Models.ConsumptionReseller"/> instance for mocking. </returns>
        public static ConsumptionReseller ConsumptionReseller(ResourceIdentifier resellerId = null, string resellerDescription = null)
        {
            return new ConsumptionReseller(resellerId, resellerDescription);
        }

        /// <summary> Initializes a new instance of ConsumptionAmountWithExchangeRate. </summary>
        /// <param name="currency"> Amount currency. </param>
        /// <param name="value"> Amount. </param>
        /// <param name="exchangeRate"> The exchange rate. </param>
        /// <param name="exchangeRateMonth"> The exchange rate month. </param>
        /// <returns> A new <see cref="Models.ConsumptionAmountWithExchangeRate"/> instance for mocking. </returns>
        public static ConsumptionAmountWithExchangeRate ConsumptionAmountWithExchangeRate(string currency = null, decimal? value = null, decimal? exchangeRate = null, int? exchangeRateMonth = null)
        {
            return new ConsumptionAmountWithExchangeRate(currency, value, exchangeRate, exchangeRateMonth);
        }

        /// <summary> Initializes a new instance of ConsumptionLotSummary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="originalAmount"> The original amount of a lot. </param>
        /// <param name="closedBalance"> The balance as of the last invoice. </param>
        /// <param name="source"> The source of the lot. </param>
        /// <param name="startOn"> The date when the lot became effective. </param>
        /// <param name="expireOn"> The expiration date of a lot. </param>
        /// <param name="poNumber"> The po number of the invoice on which the lot was added. This property is not available for ConsumptionCommitment lots. </param>
        /// <param name="purchasedOn"> The date when the lot was added. </param>
        /// <param name="status"> The status of the lot. </param>
        /// <param name="creditCurrency"> The currency of the lot. </param>
        /// <param name="billingCurrency"> The billing currency of the lot. </param>
        /// <param name="originalAmountInBillingCurrency"> The original amount of a lot in billing currency. </param>
        /// <param name="closedBalanceInBillingCurrency"> The balance as of the last invoice in billing currency. </param>
        /// <param name="reseller"> The reseller of the lot. </param>
        /// <param name="etag"> eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not. </param>
        /// <returns> A new <see cref="Models.ConsumptionLotSummary"/> instance for mocking. </returns>
        public static ConsumptionLotSummary ConsumptionLotSummary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ConsumptionAmount originalAmount = null, ConsumptionAmount closedBalance = null, ConsumptionLotSource? source = null, DateTimeOffset? startOn = null, DateTimeOffset? expireOn = null, string poNumber = null, DateTimeOffset? purchasedOn = null, ConsumptionLotStatus? status = null, string creditCurrency = null, string billingCurrency = null, ConsumptionAmountWithExchangeRate originalAmountInBillingCurrency = null, ConsumptionAmountWithExchangeRate closedBalanceInBillingCurrency = null, ConsumptionReseller reseller = null, ETag? etag = null)
        {
            return new ConsumptionLotSummary(id, name, resourceType, systemData, originalAmount, closedBalance, source, startOn, expireOn, poNumber, purchasedOn, status, creditCurrency, billingCurrency, originalAmountInBillingCurrency, closedBalanceInBillingCurrency, reseller, etag);
        }

        /// <summary> Initializes a new instance of ConsumptionCreditSummary. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="balanceSummary"> Summary of balances associated with this credit summary. </param>
        /// <param name="pendingCreditAdjustments"> Pending credit adjustments. </param>
        /// <param name="expiredCredit"> Expired credit. </param>
        /// <param name="pendingEligibleCharges"> Pending eligible charges. </param>
        /// <param name="creditCurrency"> The credit currency. </param>
        /// <param name="billingCurrency"> The billing currency. </param>
        /// <param name="reseller"> Credit&apos;s reseller. </param>
        /// <param name="etag"> eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not. </param>
        /// <returns> A new <see cref="Models.ConsumptionCreditSummary"/> instance for mocking. </returns>
        public static ConsumptionCreditSummary ConsumptionCreditSummary(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CreditBalanceSummary balanceSummary = null, ConsumptionAmount pendingCreditAdjustments = null, ConsumptionAmount expiredCredit = null, ConsumptionAmount pendingEligibleCharges = null, string creditCurrency = null, string billingCurrency = null, ConsumptionReseller reseller = null, ETag? etag = null)
        {
            return new ConsumptionCreditSummary(id, name, resourceType, systemData, balanceSummary, pendingCreditAdjustments, expiredCredit, pendingEligibleCharges, creditCurrency, billingCurrency, reseller, etag);
        }

        /// <summary> Initializes a new instance of CreditBalanceSummary. </summary>
        /// <param name="estimatedBalance"> Estimated balance. </param>
        /// <param name="currentBalance"> Current balance. </param>
        /// <param name="estimatedBalanceInBillingCurrency"> Estimated balance in billing currency. </param>
        /// <returns> A new <see cref="Models.CreditBalanceSummary"/> instance for mocking. </returns>
        public static CreditBalanceSummary CreditBalanceSummary(ConsumptionAmount estimatedBalance = null, ConsumptionAmount currentBalance = null, ConsumptionAmountWithExchangeRate estimatedBalanceInBillingCurrency = null)
        {
            return new CreditBalanceSummary(estimatedBalance, currentBalance, estimatedBalanceInBillingCurrency);
        }
    }
}
