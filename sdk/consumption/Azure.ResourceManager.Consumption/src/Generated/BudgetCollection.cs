// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Consumption
{
    /// <summary>
    /// A class representing a collection of <see cref="BudgetResource" /> and their operations.
    /// Each <see cref="BudgetResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="BudgetCollection" /> instance call the GetBudgets method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class BudgetCollection : ArmCollection, IEnumerable<BudgetResource>, IAsyncEnumerable<BudgetResource>
    {
        private readonly ClientDiagnostics _budgetClientDiagnostics;
        private readonly BudgetsRestOperations _budgetRestClient;

        /// <summary> Initializes a new instance of the <see cref="BudgetCollection"/> class for mocking. </summary>
        protected BudgetCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BudgetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal BudgetCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _budgetClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Consumption", BudgetResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(BudgetResource.ResourceType, out string budgetApiVersion);
            _budgetRestClient = new BudgetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, budgetApiVersion);
        }

        /// <summary>
        /// The operation to create or update a budget. You can optionally provide an eTag if desired as a form of concurrency control. To obtain the latest eTag for a given budget, perform a get operation prior to your put operation.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="data"> Parameters supplied to the Create Budget operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<BudgetResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string budgetName, BudgetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _budgetRestClient.CreateOrUpdateAsync(Id, budgetName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ConsumptionArmOperation<BudgetResource>(Response.FromValue(new BudgetResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to create or update a budget. You can optionally provide an eTag if desired as a form of concurrency control. To obtain the latest eTag for a given budget, perform a get operation prior to your put operation.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="data"> Parameters supplied to the Create Budget operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<BudgetResource> CreateOrUpdate(WaitUntil waitUntil, string budgetName, BudgetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _budgetRestClient.CreateOrUpdate(Id, budgetName, data, cancellationToken);
                var operation = new ConsumptionArmOperation<BudgetResource>(Response.FromValue(new BudgetResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the budget for the scope by budget name.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_Get
        /// </summary>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> is null. </exception>
        public virtual async Task<Response<BudgetResource>> GetAsync(string budgetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.Get");
            scope.Start();
            try
            {
                var response = await _budgetRestClient.GetAsync(Id, budgetName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BudgetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the budget for the scope by budget name.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_Get
        /// </summary>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> is null. </exception>
        public virtual Response<BudgetResource> Get(string budgetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.Get");
            scope.Start();
            try
            {
                var response = _budgetRestClient.Get(Id, budgetName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BudgetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all budgets for the defined scope.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets
        /// Operation Id: Budgets_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BudgetResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BudgetResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<BudgetResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _budgetRestClient.ListAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BudgetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<BudgetResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _budgetRestClient.ListNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BudgetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all budgets for the defined scope.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets
        /// Operation Id: Budgets_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BudgetResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BudgetResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<BudgetResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _budgetRestClient.List(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BudgetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<BudgetResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _budgetRestClient.ListNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BudgetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_Get
        /// </summary>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string budgetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.Exists");
            scope.Start();
            try
            {
                var response = await _budgetRestClient.GetAsync(Id, budgetName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{scope}/providers/Microsoft.Consumption/budgets/{budgetName}
        /// Operation Id: Budgets_Get
        /// </summary>
        /// <param name="budgetName"> Budget Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="budgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="budgetName"/> is null. </exception>
        public virtual Response<bool> Exists(string budgetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(budgetName, nameof(budgetName));

            using var scope = _budgetClientDiagnostics.CreateScope("BudgetCollection.Exists");
            scope.Start();
            try
            {
                var response = _budgetRestClient.Get(Id, budgetName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<BudgetResource> IEnumerable<BudgetResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<BudgetResource> IAsyncEnumerable<BudgetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
