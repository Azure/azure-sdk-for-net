// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A forecast resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Forecast : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Forecast class.
        /// </summary>
        public Forecast()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Forecast class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="usageDate">The usage date of the forecast.</param>
        /// <param name="grain">The granularity of forecast. Possible values
        /// include: 'Daily', 'Monthly', 'Yearly'</param>
        /// <param name="charge">The amount of charge</param>
        /// <param name="currency">The ISO currency in which the meter is
        /// charged, for example, USD.</param>
        /// <param name="chargeType">The type of the charge. Could be actual or
        /// forecast. Possible values include: 'Actual', 'Forecast'</param>
        /// <param name="confidenceLevels">The details about the forecast
        /// confidence levels. This is populated only when chargeType is
        /// Forecast.</param>
        public Forecast(string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string usageDate = default(string), string grain = default(string), decimal? charge = default(decimal?), string currency = default(string), string chargeType = default(string), IList<ForecastPropertiesConfidenceLevelsItem> confidenceLevels = default(IList<ForecastPropertiesConfidenceLevelsItem>))
            : base(id, name, type, tags)
        {
            UsageDate = usageDate;
            Grain = grain;
            Charge = charge;
            Currency = currency;
            ChargeType = chargeType;
            ConfidenceLevels = confidenceLevels;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the usage date of the forecast.
        /// </summary>
        [JsonProperty(PropertyName = "properties.usageDate")]
        public string UsageDate { get; private set; }

        /// <summary>
        /// Gets or sets the granularity of forecast. Possible values include:
        /// 'Daily', 'Monthly', 'Yearly'
        /// </summary>
        [JsonProperty(PropertyName = "properties.grain")]
        public string Grain { get; set; }

        /// <summary>
        /// Gets the amount of charge
        /// </summary>
        [JsonProperty(PropertyName = "properties.charge")]
        public decimal? Charge { get; private set; }

        /// <summary>
        /// Gets the ISO currency in which the meter is charged, for example,
        /// USD.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currency")]
        public string Currency { get; private set; }

        /// <summary>
        /// Gets or sets the type of the charge. Could be actual or forecast.
        /// Possible values include: 'Actual', 'Forecast'
        /// </summary>
        [JsonProperty(PropertyName = "properties.chargeType")]
        public string ChargeType { get; set; }

        /// <summary>
        /// Gets the details about the forecast confidence levels. This is
        /// populated only when chargeType is Forecast.
        /// </summary>
        [JsonProperty(PropertyName = "properties.confidenceLevels")]
        public IList<ForecastPropertiesConfidenceLevelsItem> ConfidenceLevels { get; private set; }

    }
}
