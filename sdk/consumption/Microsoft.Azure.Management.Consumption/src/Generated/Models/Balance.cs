// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A balance resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Balance : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Balance class.
        /// </summary>
        public Balance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Balance class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="currency">The ISO currency in which the meter is
        /// charged, for example, USD.</param>
        /// <param name="beginningBalance">The beginning balance for the
        /// billing period.</param>
        /// <param name="endingBalance">The ending balance for the billing
        /// period (for open periods this will be updated daily).</param>
        /// <param name="newPurchases">Total new purchase amount.</param>
        /// <param name="adjustments">Total adjustment amount.</param>
        /// <param name="utilized">Total Commitment usage.</param>
        /// <param name="serviceOverage">Overage for Azure services.</param>
        /// <param name="chargesBilledSeparately">Charges Billed
        /// separately.</param>
        /// <param name="totalOverage">serviceOverage +
        /// chargesBilledSeparately.</param>
        /// <param name="totalUsage">Azure service commitment + total
        /// Overage.</param>
        /// <param name="azureMarketplaceServiceCharges">Total charges for
        /// Azure Marketplace.</param>
        /// <param name="billingFrequency">The billing frequency. Possible
        /// values include: 'Month', 'Quarter', 'Year'</param>
        /// <param name="priceHidden">Price is hidden or not.</param>
        /// <param name="newPurchasesDetails">List of new purchases.</param>
        /// <param name="adjustmentDetails">List of Adjustments (Promo credit,
        /// SIE credit etc.).</param>
        public Balance(string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string currency = default(string), decimal? beginningBalance = default(decimal?), decimal? endingBalance = default(decimal?), decimal? newPurchases = default(decimal?), decimal? adjustments = default(decimal?), decimal? utilized = default(decimal?), decimal? serviceOverage = default(decimal?), decimal? chargesBilledSeparately = default(decimal?), decimal? totalOverage = default(decimal?), decimal? totalUsage = default(decimal?), decimal? azureMarketplaceServiceCharges = default(decimal?), string billingFrequency = default(string), bool? priceHidden = default(bool?), IList<BalancePropertiesNewPurchasesDetailsItem> newPurchasesDetails = default(IList<BalancePropertiesNewPurchasesDetailsItem>), IList<BalancePropertiesAdjustmentDetailsItem> adjustmentDetails = default(IList<BalancePropertiesAdjustmentDetailsItem>))
            : base(id, name, type, tags)
        {
            Currency = currency;
            BeginningBalance = beginningBalance;
            EndingBalance = endingBalance;
            NewPurchases = newPurchases;
            Adjustments = adjustments;
            Utilized = utilized;
            ServiceOverage = serviceOverage;
            ChargesBilledSeparately = chargesBilledSeparately;
            TotalOverage = totalOverage;
            TotalUsage = totalUsage;
            AzureMarketplaceServiceCharges = azureMarketplaceServiceCharges;
            BillingFrequency = billingFrequency;
            PriceHidden = priceHidden;
            NewPurchasesDetails = newPurchasesDetails;
            AdjustmentDetails = adjustmentDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the ISO currency in which the meter is charged, for example,
        /// USD.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currency")]
        public string Currency { get; private set; }

        /// <summary>
        /// Gets the beginning balance for the billing period.
        /// </summary>
        [JsonProperty(PropertyName = "properties.beginningBalance")]
        public decimal? BeginningBalance { get; private set; }

        /// <summary>
        /// Gets the ending balance for the billing period (for open periods
        /// this will be updated daily).
        /// </summary>
        [JsonProperty(PropertyName = "properties.endingBalance")]
        public decimal? EndingBalance { get; private set; }

        /// <summary>
        /// Gets total new purchase amount.
        /// </summary>
        [JsonProperty(PropertyName = "properties.newPurchases")]
        public decimal? NewPurchases { get; private set; }

        /// <summary>
        /// Gets total adjustment amount.
        /// </summary>
        [JsonProperty(PropertyName = "properties.adjustments")]
        public decimal? Adjustments { get; private set; }

        /// <summary>
        /// Gets total Commitment usage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.utilized")]
        public decimal? Utilized { get; private set; }

        /// <summary>
        /// Gets overage for Azure services.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceOverage")]
        public decimal? ServiceOverage { get; private set; }

        /// <summary>
        /// Gets charges Billed separately.
        /// </summary>
        [JsonProperty(PropertyName = "properties.chargesBilledSeparately")]
        public decimal? ChargesBilledSeparately { get; private set; }

        /// <summary>
        /// Gets serviceOverage + chargesBilledSeparately.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalOverage")]
        public decimal? TotalOverage { get; private set; }

        /// <summary>
        /// Gets azure service commitment + total Overage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalUsage")]
        public decimal? TotalUsage { get; private set; }

        /// <summary>
        /// Gets total charges for Azure Marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureMarketplaceServiceCharges")]
        public decimal? AzureMarketplaceServiceCharges { get; private set; }

        /// <summary>
        /// Gets or sets the billing frequency. Possible values include:
        /// 'Month', 'Quarter', 'Year'
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingFrequency")]
        public string BillingFrequency { get; set; }

        /// <summary>
        /// Gets price is hidden or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.priceHidden")]
        public bool? PriceHidden { get; private set; }

        /// <summary>
        /// Gets list of new purchases.
        /// </summary>
        [JsonProperty(PropertyName = "properties.newPurchasesDetails")]
        public IList<BalancePropertiesNewPurchasesDetailsItem> NewPurchasesDetails { get; private set; }

        /// <summary>
        /// Gets list of Adjustments (Promo credit, SIE credit etc.).
        /// </summary>
        [JsonProperty(PropertyName = "properties.adjustmentDetails")]
        public IList<BalancePropertiesAdjustmentDetailsItem> AdjustmentDetails { get; private set; }

    }
}
