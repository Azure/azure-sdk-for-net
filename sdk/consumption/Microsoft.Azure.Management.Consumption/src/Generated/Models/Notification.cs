// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Consumption.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The notification associated with a budget.
    /// </summary>
    public partial class Notification
    {
        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        public Notification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Notification class.
        /// </summary>
        /// <param name="enabled">The notification is enabled or not.</param>
        /// <param name="operatorProperty">The comparison operator. Possible
        /// values include: 'EqualTo', 'GreaterThan',
        /// 'GreaterThanOrEqualTo'</param>
        /// <param name="threshold">Threshold value associated with a
        /// notification. Notification is sent when the cost exceeded the
        /// threshold. It is always percent and has to be between 0 and
        /// 1000.</param>
        /// <param name="contactEmails">Email addresses to send the budget
        /// notification to when the threshold is exceeded. Must have at least
        /// one contact email or contact group specified at the Subscription or
        /// Resource Group scopes. All other scopes must have at least one
        /// contact email specified.</param>
        /// <param name="contactRoles">Contact roles to send the budget
        /// notification to when the threshold is exceeded.</param>
        /// <param name="contactGroups">Action groups to send the budget
        /// notification to when the threshold is exceeded. Must be provided as
        /// a fully qualified Azure resource id. Only supported at Subscription
        /// or Resource Group scopes.</param>
        /// <param name="thresholdType">The type of threshold. Possible values
        /// include: 'Actual'</param>
        public Notification(bool enabled, string operatorProperty, decimal threshold, IList<string> contactEmails, IList<string> contactRoles = default(IList<string>), IList<string> contactGroups = default(IList<string>), string thresholdType = default(string))
        {
            Enabled = enabled;
            OperatorProperty = operatorProperty;
            Threshold = threshold;
            ContactEmails = contactEmails;
            ContactRoles = contactRoles;
            ContactGroups = contactGroups;
            ThresholdType = thresholdType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the notification is enabled or not.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets the comparison operator. Possible values include:
        /// 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets threshold value associated with a notification.
        /// Notification is sent when the cost exceeded the threshold. It is
        /// always percent and has to be between 0 and 1000.
        /// </summary>
        [JsonProperty(PropertyName = "threshold")]
        public decimal Threshold { get; set; }

        /// <summary>
        /// Gets or sets email addresses to send the budget notification to
        /// when the threshold is exceeded. Must have at least one contact
        /// email or contact group specified at the Subscription or Resource
        /// Group scopes. All other scopes must have at least one contact email
        /// specified.
        /// </summary>
        [JsonProperty(PropertyName = "contactEmails")]
        public IList<string> ContactEmails { get; set; }

        /// <summary>
        /// Gets or sets contact roles to send the budget notification to when
        /// the threshold is exceeded.
        /// </summary>
        [JsonProperty(PropertyName = "contactRoles")]
        public IList<string> ContactRoles { get; set; }

        /// <summary>
        /// Gets or sets action groups to send the budget notification to when
        /// the threshold is exceeded. Must be provided as a fully qualified
        /// Azure resource id. Only supported at Subscription or Resource Group
        /// scopes.
        /// </summary>
        [JsonProperty(PropertyName = "contactGroups")]
        public IList<string> ContactGroups { get; set; }

        /// <summary>
        /// Gets or sets the type of threshold. Possible values include:
        /// 'Actual'
        /// </summary>
        [JsonProperty(PropertyName = "thresholdType")]
        public string ThresholdType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OperatorProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (ContactEmails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContactEmails");
            }
            if (ContactEmails != null)
            {
                if (ContactEmails.Count > 50)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "ContactEmails", 50);
                }
                if (ContactEmails.Count < 0)
                {
                    throw new ValidationException(ValidationRules.MinItems, "ContactEmails", 0);
                }
            }
            if (ContactGroups != null)
            {
                if (ContactGroups.Count > 50)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "ContactGroups", 50);
                }
                if (ContactGroups.Count < 0)
                {
                    throw new ValidationException(ValidationRules.MinItems, "ContactGroups", 0);
                }
            }
        }
    }
}
