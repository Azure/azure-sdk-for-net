// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> The Locale. </summary>
    internal readonly partial struct Locale : IEquatable<Locale>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Locale"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Locale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnAUValue = "en-AU";
        private const string EnCAValue = "en-CA";
        private const string EnGBValue = "en-GB";
        private const string EnINValue = "en-IN";
        private const string EnUSValue = "en-US";

        /// <summary> en-AU. </summary>
        public static Locale EnAU { get; } = new Locale(EnAUValue);
        /// <summary> en-CA. </summary>
        public static Locale EnCA { get; } = new Locale(EnCAValue);
        /// <summary> en-GB. </summary>
        public static Locale EnGB { get; } = new Locale(EnGBValue);
        /// <summary> en-IN. </summary>
        public static Locale EnIN { get; } = new Locale(EnINValue);
        /// <summary> en-US. </summary>
        public static Locale EnUS { get; } = new Locale(EnUSValue);
        /// <summary> Determines if two <see cref="Locale"/> values are the same. </summary>
        public static bool operator ==(Locale left, Locale right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Locale"/> values are not the same. </summary>
        public static bool operator !=(Locale left, Locale right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Locale"/>. </summary>
        public static implicit operator Locale(string value) => new Locale(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Locale other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Locale other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
