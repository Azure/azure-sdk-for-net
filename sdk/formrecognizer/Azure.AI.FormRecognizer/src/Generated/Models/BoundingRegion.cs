// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using Azure.Core;

namespace Azure.AI.FormRecognizer.DocumentAnalysis
{
    /// <summary> Bounding polygon on a specific page of the input. </summary>
    public readonly partial struct BoundingRegion
    {
        /// <summary> Initializes a new instance of <see cref="BoundingRegion"/>. </summary>
        /// <param name="pageNumber"> 1-based page number of page containing the bounding region. </param>
        /// <param name="boundingPolygon"> Bounding polygon on the page, or the entire page if not specified. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="boundingPolygon"/> is null. </exception>
        internal BoundingRegion(int pageNumber, IEnumerable<PointF> boundingPolygon)
        {
            Argument.AssertNotNull(boundingPolygon, nameof(boundingPolygon));

            PageNumber = pageNumber;
            BoundingPolygon = boundingPolygon.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="BoundingRegion"/>. </summary>
        /// <param name="pageNumber"> 1-based page number of page containing the bounding region. </param>
        /// <param name="boundingPolygon"> Bounding polygon on the page, or the entire page if not specified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BoundingRegion(int pageNumber, IReadOnlyList<PointF> boundingPolygon, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PageNumber = pageNumber;
            BoundingPolygon = boundingPolygon;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BoundingRegion"/> for deserialization. </summary>
        public BoundingRegion()
        {
        }
    }
}
