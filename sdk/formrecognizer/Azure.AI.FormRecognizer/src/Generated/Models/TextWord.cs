// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> An object representing a word. </summary>
    internal partial class TextWord
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TextWord"/>. </summary>
        /// <param name="text"> The text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of an extracted word. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="boundingBox"/> is null. </exception>
        internal TextWord(string text, IEnumerable<float> boundingBox)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(boundingBox, nameof(boundingBox));

            Text = text;
            BoundingBox = boundingBox.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TextWord"/>. </summary>
        /// <param name="text"> The text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of an extracted word. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TextWord(string text, IReadOnlyList<float> boundingBox, float? confidence, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Text = text;
            BoundingBox = boundingBox;
            Confidence = confidence;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TextWord"/> for deserialization. </summary>
        internal TextWord()
        {
        }

        /// <summary> The text content of the word. </summary>
        public string Text { get; }
        /// <summary> Bounding box of an extracted word. </summary>
        public IReadOnlyList<float> BoundingBox { get; }
        /// <summary> Confidence value. </summary>
        public float? Confidence { get; }
    }
}
