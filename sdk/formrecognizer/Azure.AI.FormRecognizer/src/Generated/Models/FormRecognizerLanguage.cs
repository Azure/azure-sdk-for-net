// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.FormRecognizer
{
    /// <summary> Language code. </summary>
    public readonly partial struct FormRecognizerLanguage : IEquatable<FormRecognizerLanguage>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="FormRecognizerLanguage"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FormRecognizerLanguage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnValue = "en";
        private const string EsValue = "es";
        private const string DeValue = "de";
        private const string FrValue = "fr";
        private const string ItValue = "it";
        private const string NlValue = "nl";
        private const string PtValue = "pt";
        private const string JaValue = "ja";
        private const string ZhHansValue = "zh-Hans";

        /// <summary> en. </summary>
        public static FormRecognizerLanguage En { get; } = new FormRecognizerLanguage(EnValue);
        /// <summary> es. </summary>
        public static FormRecognizerLanguage Es { get; } = new FormRecognizerLanguage(EsValue);
        /// <summary> de. </summary>
        public static FormRecognizerLanguage De { get; } = new FormRecognizerLanguage(DeValue);
        /// <summary> fr. </summary>
        public static FormRecognizerLanguage Fr { get; } = new FormRecognizerLanguage(FrValue);
        /// <summary> it. </summary>
        public static FormRecognizerLanguage It { get; } = new FormRecognizerLanguage(ItValue);
        /// <summary> nl. </summary>
        public static FormRecognizerLanguage Nl { get; } = new FormRecognizerLanguage(NlValue);
        /// <summary> pt. </summary>
        public static FormRecognizerLanguage Pt { get; } = new FormRecognizerLanguage(PtValue);
        /// <summary> ja. </summary>
        public static FormRecognizerLanguage Ja { get; } = new FormRecognizerLanguage(JaValue);
        /// <summary> zh-Hans. </summary>
        public static FormRecognizerLanguage ZhHans { get; } = new FormRecognizerLanguage(ZhHansValue);
        /// <summary> Determines if two <see cref="FormRecognizerLanguage"/> values are the same. </summary>
        public static bool operator ==(FormRecognizerLanguage left, FormRecognizerLanguage right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FormRecognizerLanguage"/> values are not the same. </summary>
        public static bool operator !=(FormRecognizerLanguage left, FormRecognizerLanguage right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FormRecognizerLanguage"/>. </summary>
        public static implicit operator FormRecognizerLanguage(string value) => new FormRecognizerLanguage(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FormRecognizerLanguage other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FormRecognizerLanguage other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
