// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.FormRecognizer.DocumentAnalysis
{
    /// <summary> Annotation kind. </summary>
    public readonly partial struct DocumentAnnotationKind : IEquatable<DocumentAnnotationKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentAnnotationKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentAnnotationKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CheckValue = "check";
        private const string CrossValue = "cross";

        /// <summary> A visual check âœ“. </summary>
        public static DocumentAnnotationKind Check { get; } = new DocumentAnnotationKind(CheckValue);
        /// <summary> A visual cross X. </summary>
        public static DocumentAnnotationKind Cross { get; } = new DocumentAnnotationKind(CrossValue);
        /// <summary> Determines if two <see cref="DocumentAnnotationKind"/> values are the same. </summary>
        public static bool operator ==(DocumentAnnotationKind left, DocumentAnnotationKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentAnnotationKind"/> values are not the same. </summary>
        public static bool operator !=(DocumentAnnotationKind left, DocumentAnnotationKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentAnnotationKind"/>. </summary>
        public static implicit operator DocumentAnnotationKind(string value) => new DocumentAnnotationKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentAnnotationKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentAnnotationKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
