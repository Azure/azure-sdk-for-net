// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> Request parameter that contains authorization claims for copy operation. </summary>
    internal partial class CopyAuthorizationResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CopyAuthorizationResult"/>. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="accessToken"> Token claim used to authorize the request. </param>
        /// <param name="expirationDateTimeTicks"> The time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> or <paramref name="accessToken"/> is null. </exception>
        public CopyAuthorizationResult(string modelId, string accessToken, long expirationDateTimeTicks)
        {
            Argument.AssertNotNull(modelId, nameof(modelId));
            Argument.AssertNotNull(accessToken, nameof(accessToken));

            ModelId = modelId;
            AccessToken = accessToken;
            ExpirationDateTimeTicks = expirationDateTimeTicks;
        }

        /// <summary> Initializes a new instance of <see cref="CopyAuthorizationResult"/>. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="accessToken"> Token claim used to authorize the request. </param>
        /// <param name="expirationDateTimeTicks"> The time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CopyAuthorizationResult(string modelId, string accessToken, long expirationDateTimeTicks, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ModelId = modelId;
            AccessToken = accessToken;
            ExpirationDateTimeTicks = expirationDateTimeTicks;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CopyAuthorizationResult"/> for deserialization. </summary>
        internal CopyAuthorizationResult()
        {
        }

        /// <summary> Model identifier. </summary>
        public string ModelId { get; set; }
        /// <summary> Token claim used to authorize the request. </summary>
        public string AccessToken { get; set; }
        /// <summary> The time when the access token expires. The date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC until the expiration time. </summary>
        public long ExpirationDateTimeTicks { get; set; }
    }
}
