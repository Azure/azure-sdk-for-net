// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.FormRecognizer.DocumentAnalysis
{
    /// <summary> Kind of document page. </summary>
    public readonly partial struct DocumentPageKind : IEquatable<DocumentPageKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentPageKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentPageKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DocumentValue = "document";
        private const string SheetValue = "sheet";
        private const string SlideValue = "slide";
        private const string ImageValue = "image";

        /// <summary> document. </summary>
        public static DocumentPageKind Document { get; } = new DocumentPageKind(DocumentValue);
        /// <summary> sheet. </summary>
        public static DocumentPageKind Sheet { get; } = new DocumentPageKind(SheetValue);
        /// <summary> slide. </summary>
        public static DocumentPageKind Slide { get; } = new DocumentPageKind(SlideValue);
        /// <summary> image. </summary>
        public static DocumentPageKind Image { get; } = new DocumentPageKind(ImageValue);
        /// <summary> Determines if two <see cref="DocumentPageKind"/> values are the same. </summary>
        public static bool operator ==(DocumentPageKind left, DocumentPageKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentPageKind"/> values are not the same. </summary>
        public static bool operator !=(DocumentPageKind left, DocumentPageKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentPageKind"/>. </summary>
        public static implicit operator DocumentPageKind(string value) => new DocumentPageKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentPageKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentPageKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
