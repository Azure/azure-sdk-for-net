// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> Extracted information from a single page. </summary>
    internal partial class PageResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PageResult"/>. </summary>
        /// <param name="page"> Page number. </param>
        internal PageResult(int page)
        {
            Page = page;
            KeyValuePairs = new ChangeTrackingList<KeyValuePair>();
            Tables = new ChangeTrackingList<DataTable>();
        }

        /// <summary> Initializes a new instance of <see cref="PageResult"/>. </summary>
        /// <param name="page"> Page number. </param>
        /// <param name="clusterId"> Cluster identifier. </param>
        /// <param name="keyValuePairs"> List of key-value pairs extracted from the page. </param>
        /// <param name="tables"> List of data tables extracted from the page. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PageResult(int page, int? clusterId, IReadOnlyList<KeyValuePair> keyValuePairs, IReadOnlyList<DataTable> tables, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Page = page;
            ClusterId = clusterId;
            KeyValuePairs = keyValuePairs;
            Tables = tables;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PageResult"/> for deserialization. </summary>
        internal PageResult()
        {
        }

        /// <summary> Page number. </summary>
        public int Page { get; }
        /// <summary> Cluster identifier. </summary>
        public int? ClusterId { get; }
        /// <summary> List of key-value pairs extracted from the page. </summary>
        public IReadOnlyList<KeyValuePair> KeyValuePairs { get; }
        /// <summary> List of data tables extracted from the page. </summary>
        public IReadOnlyList<DataTable> Tables { get; }
    }
}
