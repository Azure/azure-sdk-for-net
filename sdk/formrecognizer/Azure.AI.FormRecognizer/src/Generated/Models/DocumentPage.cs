// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.FormRecognizer.DocumentAnalysis
{
    /// <summary> Content and layout elements extracted from a page from the input. </summary>
    public partial class DocumentPage
    {
        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unitPrivate"> The unit used by the width, height, and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="spans"/>, <paramref name="words"/>, or <paramref name="lines"/> is null. </exception>
        internal DocumentPage(int pageNumber, float angle, float width, float height, V3LengthUnit unitPrivate, IEnumerable<DocumentSpan> spans, IEnumerable<DocumentWord> words, IEnumerable<DocumentLine> lines)
        {
            if (spans == null)
            {
                throw new ArgumentNullException(nameof(spans));
            }
            if (words == null)
            {
                throw new ArgumentNullException(nameof(words));
            }
            if (lines == null)
            {
                throw new ArgumentNullException(nameof(lines));
            }

            PageNumber = pageNumber;
            Angle = angle;
            Width = width;
            Height = height;
            UnitPrivate = unitPrivate;
            Spans = spans.ToList();
            Words = words.ToList();
            SelectionMarks = new ChangeTrackingList<DocumentSelectionMark>();
            Lines = lines.ToList();
        }

        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unitPrivate"> The unit used by the width, height, and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <param name="selectionMarks"> Extracted selection marks from the page. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        internal DocumentPage(int pageNumber, float angle, float width, float height, V3LengthUnit unitPrivate, IReadOnlyList<DocumentSpan> spans, IReadOnlyList<DocumentWord> words, IReadOnlyList<DocumentSelectionMark> selectionMarks, IReadOnlyList<DocumentLine> lines)
        {
            PageNumber = pageNumber;
            Angle = angle;
            Width = width;
            Height = height;
            UnitPrivate = unitPrivate;
            Spans = spans;
            Words = words;
            SelectionMarks = selectionMarks;
            Lines = lines;
        }

        /// <summary> 1-based page number in the input document. </summary>
        public int PageNumber { get; }
        /// <summary> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </summary>
        public float Angle { get; }
        /// <summary> The width of the image/PDF in pixels/inches, respectively. </summary>
        public float Width { get; }
        /// <summary> The height of the image/PDF in pixels/inches, respectively. </summary>
        public float Height { get; }
        /// <summary> Location of the page in the reading order concatenated content. </summary>
        public IReadOnlyList<DocumentSpan> Spans { get; }
        /// <summary> Extracted words from the page. </summary>
        public IReadOnlyList<DocumentWord> Words { get; }
        /// <summary> Extracted selection marks from the page. </summary>
        public IReadOnlyList<DocumentSelectionMark> SelectionMarks { get; }
        /// <summary> Extracted lines from the page, potentially containing both textual and visual elements. </summary>
        public IReadOnlyList<DocumentLine> Lines { get; }
    }
}
