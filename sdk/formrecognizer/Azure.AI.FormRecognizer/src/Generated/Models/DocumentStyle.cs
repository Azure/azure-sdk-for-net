// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.FormRecognizer.DocumentAnalysis
{
    /// <summary> An object representing observed text styles. </summary>
    public partial class DocumentStyle
    {
        /// <summary> Initializes a new instance of DocumentStyle. </summary>
        /// <param name="spans"> Location of the text elements in the concatenated content the style applies to. </param>
        /// <param name="confidence"> Confidence of correctly identifying the style. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="spans"/> is null. </exception>
        internal DocumentStyle(IEnumerable<DocumentSpan> spans, float confidence)
        {
            if (spans == null)
            {
                throw new ArgumentNullException(nameof(spans));
            }

            Spans = spans.ToList();
            Confidence = confidence;
        }

        /// <summary> Initializes a new instance of DocumentStyle. </summary>
        /// <param name="isHandwritten"> Is content handwritten?. </param>
        /// <param name="spans"> Location of the text elements in the concatenated content the style applies to. </param>
        /// <param name="confidence"> Confidence of correctly identifying the style. </param>
        internal DocumentStyle(bool? isHandwritten, IReadOnlyList<DocumentSpan> spans, float confidence)
        {
            IsHandwritten = isHandwritten;
            Spans = spans;
            Confidence = confidence;
        }

        /// <summary> Is content handwritten?. </summary>
        public bool? IsHandwritten { get; }
        /// <summary> Location of the text elements in the concatenated content the style applies to. </summary>
        public IReadOnlyList<DocumentSpan> Spans { get; }
        /// <summary> Confidence of correctly identifying the style. </summary>
        public float Confidence { get; }
    }
}
