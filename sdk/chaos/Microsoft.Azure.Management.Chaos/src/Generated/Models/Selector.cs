// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Chaos.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model that represents a selector in the Experiment resource.
    /// </summary>
    public partial class Selector
    {
        /// <summary>
        /// Initializes a new instance of the Selector class.
        /// </summary>
        public Selector()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Selector class.
        /// </summary>
        /// <param name="type">Enum of the selector type. Possible values
        /// include: 'Percent', 'Random', 'Tag', 'List'</param>
        /// <param name="id">String of the selector ID.</param>
        /// <param name="targets">List of Target references.</param>
        public Selector(SelectorType type, string id, IList<TargetReference> targets)
        {
            Type = type;
            Id = id;
            Targets = targets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets enum of the selector type. Possible values include:
        /// 'Percent', 'Random', 'Tag', 'List'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public SelectorType Type { get; set; }

        /// <summary>
        /// Gets or sets string of the selector ID.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets list of Target references.
        /// </summary>
        [JsonProperty(PropertyName = "targets")]
        public IList<TargetReference> Targets { get; set; }

    }
}
