// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Chaos
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExperimentsOperations.
    /// </summary>
    public static partial class ExperimentsOperationsExtensions
    {
            /// <summary>
            /// Get a list of Experiment resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='running'>
            /// Optional value that indicates whether to filter results based on if the
            /// Experiment is currently running. If null, then the results will not be
            /// filtered.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            public static IPage<Experiment> ListAll(this IExperimentsOperations operations, bool? running = default(bool?), string continuationToken = default(string))
            {
                return operations.ListAllAsync(running, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Experiment resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='running'>
            /// Optional value that indicates whether to filter results based on if the
            /// Experiment is currently running. If null, then the results will not be
            /// filtered.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> ListAllAsync(this IExperimentsOperations operations, bool? running = default(bool?), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(running, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Experiment resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='running'>
            /// Optional value that indicates whether to filter results based on if the
            /// Experiment is currently running. If null, then the results will not be
            /// filtered.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            public static IPage<Experiment> List(this IExperimentsOperations operations, string resourceGroupName, bool? running = default(bool?), string continuationToken = default(string))
            {
                return operations.ListAsync(resourceGroupName, running, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Experiment resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='running'>
            /// Optional value that indicates whether to filter results based on if the
            /// Experiment is currently running. If null, then the results will not be
            /// filtered.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> ListAsync(this IExperimentsOperations operations, string resourceGroupName, bool? running = default(bool?), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, running, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static void Delete(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                operations.DeleteAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static Experiment Get(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.GetAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> GetAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='experiment'>
            /// Experiment resource to be created or updated.
            /// </param>
            public static Experiment CreateOrUpdate(this IExperimentsOperations operations, string resourceGroupName, string experimentName, Experiment experiment)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, experimentName, experiment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='experiment'>
            /// Experiment resource to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> CreateOrUpdateAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, Experiment experiment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, experimentName, experiment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a running Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static ExperimentCancelOperationResult Cancel(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.CancelAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a running Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperimentCancelOperationResult> CancelAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static ExperimentStartOperationResult Start(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.StartAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperimentStartOperationResult> StartAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of statuses of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static IPage<ExperimentStatus> ListAllStatuses(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.ListAllStatusesAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of statuses of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExperimentStatus>> ListAllStatusesAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllStatusesWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a status of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='statusId'>
            /// GUID that represents a Experiment status.
            /// </param>
            public static ExperimentStatus GetStatus(this IExperimentsOperations operations, string resourceGroupName, string experimentName, string statusId)
            {
                return operations.GetStatusAsync(resourceGroupName, experimentName, statusId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a status of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='statusId'>
            /// GUID that represents a Experiment status.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperimentStatus> GetStatusAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, string statusId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(resourceGroupName, experimentName, statusId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of execution details of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static IPage<ExperimentExecutionDetails> ListExecutionDetails(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.ListExecutionDetailsAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of execution details of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExperimentExecutionDetails>> ListExecutionDetailsAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExecutionDetailsWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an execution detail of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='executionDetailsId'>
            /// GUID that represents a Experiment execution detail.
            /// </param>
            public static ExperimentExecutionDetails GetExecutionDetails(this IExperimentsOperations operations, string resourceGroupName, string experimentName, string executionDetailsId)
            {
                return operations.GetExecutionDetailsAsync(resourceGroupName, experimentName, executionDetailsId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an execution detail of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='executionDetailsId'>
            /// GUID that represents a Experiment execution detail.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperimentExecutionDetails> GetExecutionDetailsAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, string executionDetailsId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionDetailsWithHttpMessagesAsync(resourceGroupName, experimentName, executionDetailsId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='experiment'>
            /// Experiment resource to be created or updated.
            /// </param>
            public static Experiment BeginCreateOrUpdate(this IExperimentsOperations operations, string resourceGroupName, string experimentName, Experiment experiment)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, experimentName, experiment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='experiment'>
            /// Experiment resource to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> BeginCreateOrUpdateAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, Experiment experiment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, experimentName, experiment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a running Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            public static ExperimentCancelOperationResult BeginCancel(this IExperimentsOperations operations, string resourceGroupName, string experimentName)
            {
                return operations.BeginCancelAsync(resourceGroupName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a running Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='experimentName'>
            /// String that represents a Experiment resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperimentCancelOperationResult> BeginCancelAsync(this IExperimentsOperations operations, string resourceGroupName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCancelWithHttpMessagesAsync(resourceGroupName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Experiment resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Experiment> ListAllNext(this IExperimentsOperations operations, string nextPageLink)
            {
                return operations.ListAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Experiment resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> ListAllNextAsync(this IExperimentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Experiment resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Experiment> ListNext(this IExperimentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Experiment resources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> ListNextAsync(this IExperimentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of statuses of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ExperimentStatus> ListAllStatusesNext(this IExperimentsOperations operations, string nextPageLink)
            {
                return operations.ListAllStatusesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of statuses of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExperimentStatus>> ListAllStatusesNextAsync(this IExperimentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllStatusesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of execution details of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ExperimentExecutionDetails> ListExecutionDetailsNext(this IExperimentsOperations operations, string nextPageLink)
            {
                return operations.ListExecutionDetailsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of execution details of a Experiment resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ExperimentExecutionDetails>> ListExecutionDetailsNextAsync(this IExperimentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExecutionDetailsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
