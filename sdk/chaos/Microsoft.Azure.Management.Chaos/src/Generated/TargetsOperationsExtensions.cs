// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Chaos
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TargetsOperations.
    /// </summary>
    public static partial class TargetsOperationsExtensions
    {
            /// <summary>
            /// Get a list of Target resources that extend a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            public static IPage<Target> List(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string continuationToken = default(string))
            {
                return operations.ListAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Target resources that extend a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='continuationToken'>
            /// String that sets the continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Target>> ListAsync(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Target resource that extends a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            public static Target Get(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName)
            {
                return operations.GetAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Target resource that extends a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Target> GetAsync(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Target resource that extends a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            public static void Delete(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName)
            {
                operations.DeleteAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Target resource that extends a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a Target resource that extends a tracked regional
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            /// <param name='target'>
            /// Target resource to be created or updated.
            /// </param>
            public static Target CreateOrUpdate(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, Target target)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, target).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Target resource that extends a tracked regional
            /// resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// String that represents an Azure resource group.
            /// </param>
            /// <param name='parentProviderNamespace'>
            /// String that represents a resource provider namespace.
            /// </param>
            /// <param name='parentResourceType'>
            /// String that represents a resource type.
            /// </param>
            /// <param name='parentResourceName'>
            /// String that represents a resource name.
            /// </param>
            /// <param name='targetName'>
            /// String that represents a Target resource name.
            /// </param>
            /// <param name='target'>
            /// Target resource to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Target> CreateOrUpdateAsync(this ITargetsOperations operations, string resourceGroupName, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, Target target, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, target, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Target resources that extend a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Target> ListNext(this ITargetsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Target resources that extend a tracked regional resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Target>> ListNextAsync(this ITargetsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
