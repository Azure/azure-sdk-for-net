// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos
{
    /// <summary></summary>
    public partial class ChaosExperimentExecutionCollection : ArmCollection, IEnumerable<ChaosExperimentExecutionResource>, IAsyncEnumerable<ChaosExperimentExecutionResource>
    {
        private readonly ClientDiagnostics _experimentExecutionsClientDiagnostics;
        private readonly ExperimentExecutions _experimentExecutionsRestClient;

        /// <summary> Initializes a new instance of ChaosExperimentExecutionCollection for mocking. </summary>
        protected ChaosExperimentExecutionCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChaosExperimentExecutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ChaosExperimentExecutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ChaosExperimentExecutionResource.ResourceType, out string chaosExperimentExecutionApiVersion);
            _experimentExecutionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Chaos", ChaosExperimentExecutionResource.ResourceType.Namespace, Diagnostics);
            _experimentExecutionsRestClient = new ExperimentExecutions(_experimentExecutionsClientDiagnostics, Pipeline, Endpoint, chaosExperimentExecutionApiVersion);
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Get an execution of an Experiment resource. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ChaosExperimentExecutionResource>> GetExecutionAsync(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.GetExecutionAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosExperimentExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an execution of an Experiment resource. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ChaosExperimentExecutionResource> GetExecution(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.GetExecution");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosExperimentExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of executions of an Experiment resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ChaosExperimentExecutionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ChaosExperimentExecutionData, ChaosExperimentExecutionResource>(new ExperimentExecutionsGetAllExecutionsAsyncCollectionResultOfT(_experimentExecutionsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new ChaosExperimentExecutionResource(Client, data));
        }

        /// <summary> Get a list of executions of an Experiment resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ChaosExperimentExecutionResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ChaosExperimentExecutionData, ChaosExperimentExecutionResource>(new ExperimentExecutionsGetAllExecutionsCollectionResultOfT(_experimentExecutionsRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new ChaosExperimentExecutionResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.ExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<ChaosExperimentExecutionResource>> GetIfExistsAsync(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosExperimentExecutionResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosExperimentExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="executionId"> GUID that represents a Experiment execution detail. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<ChaosExperimentExecutionResource> GetIfExists(string executionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));

            using DiagnosticScope scope = _experimentExecutionsClientDiagnostics.CreateScope("ChaosExperimentExecutionCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _experimentExecutionsRestClient.CreateGetExecutionRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, executionId, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosExperimentExecutionData> response = Response.FromValue(ChaosExperimentExecutionData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosExperimentExecutionResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosExperimentExecutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ChaosExperimentExecutionResource> IEnumerable<ChaosExperimentExecutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<ChaosExperimentExecutionResource> IAsyncEnumerable<ChaosExperimentExecutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
