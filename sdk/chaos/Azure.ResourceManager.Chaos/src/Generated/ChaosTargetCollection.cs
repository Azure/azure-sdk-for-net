// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos
{
    /// <summary></summary>
    public partial class ChaosTargetCollection : ArmCollection, IEnumerable<ChaosTargetResource>, IAsyncEnumerable<ChaosTargetResource>
    {
        private readonly ClientDiagnostics _targetsClientDiagnostics;
        private readonly Targets _targetsRestClient;

        /// <summary> Initializes a new instance of ChaosTargetCollection for mocking. </summary>
        protected ChaosTargetCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChaosTargetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ChaosTargetCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ChaosTargetResource.ResourceType, out string chaosTargetApiVersion);
            _targetsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Chaos", ChaosTargetResource.ResourceType.Namespace, Diagnostics);
            _targetsRestClient = new Targets(_targetsClientDiagnostics, Pipeline, Endpoint, chaosTargetApiVersion);
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Create or update a Target resource that extends a tracked regional resource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="data"> Target resource to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/>, <paramref name="targetName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<ChaosTargetResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, ChaosTargetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.CreateOrUpdateAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, ChaosTargetData.ToRequestContent(data), context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                RequestUriBuilder uri = message.Request.Uri;
                RehydrationToken rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                ChaosArmOperation<ChaosTargetResource> operation = new ChaosArmOperation<ChaosTargetResource>(Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a Target resource that extends a tracked regional resource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="data"> Target resource to be created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/>, <paramref name="targetName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<ChaosTargetResource> CreateOrUpdate(WaitUntil waitUntil, string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, ChaosTargetData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, ChaosTargetData.ToRequestContent(data), context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                RequestUriBuilder uri = message.Request.Uri;
                RehydrationToken rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                ChaosArmOperation<ChaosTargetResource> operation = new ChaosArmOperation<ChaosTargetResource>(Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Target resource that extends a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ChaosTargetResource>> GetAsync(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.GetAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Target resource that extends a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ChaosTargetResource> Get(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of Target resources that extend a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/> or <paramref name="parentResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/> or <paramref name="parentResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual AsyncPageable<ChaosTargetResource> GetAllAsync(string parentProviderNamespace, string parentResourceType, string parentResourceName, string continuationToken = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ChaosTargetData, ChaosTargetResource>(new TargetsGetAllAsyncCollectionResultOfT(
                _targetsRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.ResourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                continuationToken,
                context), data => new ChaosTargetResource(Client, data));
        }

        /// <summary> Get a list of Target resources that extend a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/> or <paramref name="parentResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/> or <paramref name="parentResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Pageable<ChaosTargetResource> GetAll(string parentProviderNamespace, string parentResourceType, string parentResourceName, string continuationToken = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ChaosTargetData, ChaosTargetResource>(new TargetsGetAllCollectionResultOfT(
                _targetsRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.ResourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                continuationToken,
                context), data => new ChaosTargetResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.ExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<ChaosTargetResource>> GetIfExistsAsync(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosTargetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<ChaosTargetResource> GetIfExists(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            using DiagnosticScope scope = _targetsClientDiagnostics.CreateScope("ChaosTargetCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetData> response = Response.FromValue(ChaosTargetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosTargetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ChaosTargetResource> IEnumerable<ChaosTargetResource>.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<ChaosTargetResource> IAsyncEnumerable<ChaosTargetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return this.GetAllAsync(cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
