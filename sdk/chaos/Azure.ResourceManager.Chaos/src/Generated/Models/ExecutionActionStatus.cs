// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary>
    /// Model that represents the an action and its status.
    /// Serialized Name: ActionStatus
    /// </summary>
    public partial class ExecutionActionStatus
    {
        /// <summary> Initializes a new instance of <see cref="ExecutionActionStatus"/>. </summary>
        internal ExecutionActionStatus()
        {
            Targets = new ChangeTrackingList<ExperimentExecutionActionTargetDetailsProperties>();
        }

        /// <summary> Initializes a new instance of <see cref="ExecutionActionStatus"/>. </summary>
        /// <param name="actionName">
        /// The name of the action status.
        /// Serialized Name: ActionStatus.actionName
        /// </param>
        /// <param name="actionId">
        /// The id of the action status.
        /// Serialized Name: ActionStatus.actionId
        /// </param>
        /// <param name="status">
        /// The status of the action.
        /// Serialized Name: ActionStatus.status
        /// </param>
        /// <param name="startOn">
        /// String that represents the start time of the action.
        /// Serialized Name: ActionStatus.startTime
        /// </param>
        /// <param name="endOn">
        /// String that represents the end time of the action.
        /// Serialized Name: ActionStatus.endTime
        /// </param>
        /// <param name="targets">
        /// The array of targets.
        /// Serialized Name: ActionStatus.targets
        /// </param>
        internal ExecutionActionStatus(string actionName, Guid? actionId, string status, DateTimeOffset? startOn, DateTimeOffset? endOn, IReadOnlyList<ExperimentExecutionActionTargetDetailsProperties> targets)
        {
            ActionName = actionName;
            ActionId = actionId;
            Status = status;
            StartOn = startOn;
            EndOn = endOn;
            Targets = targets;
        }

        /// <summary>
        /// The name of the action status.
        /// Serialized Name: ActionStatus.actionName
        /// </summary>
        public string ActionName { get; }
        /// <summary>
        /// The id of the action status.
        /// Serialized Name: ActionStatus.actionId
        /// </summary>
        public Guid? ActionId { get; }
        /// <summary>
        /// The status of the action.
        /// Serialized Name: ActionStatus.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// String that represents the start time of the action.
        /// Serialized Name: ActionStatus.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary>
        /// String that represents the end time of the action.
        /// Serialized Name: ActionStatus.endTime
        /// </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary>
        /// The array of targets.
        /// Serialized Name: ActionStatus.targets
        /// </summary>
        public IReadOnlyList<ExperimentExecutionActionTargetDetailsProperties> Targets { get; }
    }
}
