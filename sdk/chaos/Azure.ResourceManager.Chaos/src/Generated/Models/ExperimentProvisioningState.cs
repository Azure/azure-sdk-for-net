// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary>
    /// Current provisioning state for a given Azure Chaos resource.
    /// Serialized Name: ProvisioningState
    /// </summary>
    public readonly partial struct ExperimentProvisioningState : IEquatable<ExperimentProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExperimentProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExperimentProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";

        /// <summary>
        /// Succeeded
        /// Serialized Name: ProvisioningState.Succeeded
        /// </summary>
        public static ExperimentProvisioningState Succeeded { get; } = new ExperimentProvisioningState(SucceededValue);
        /// <summary>
        /// Failed
        /// Serialized Name: ProvisioningState.Failed
        /// </summary>
        public static ExperimentProvisioningState Failed { get; } = new ExperimentProvisioningState(FailedValue);
        /// <summary>
        /// Canceled
        /// Serialized Name: ProvisioningState.Canceled
        /// </summary>
        public static ExperimentProvisioningState Canceled { get; } = new ExperimentProvisioningState(CanceledValue);
        /// <summary>
        /// Creating
        /// Serialized Name: ProvisioningState.Creating
        /// </summary>
        public static ExperimentProvisioningState Creating { get; } = new ExperimentProvisioningState(CreatingValue);
        /// <summary>
        /// Updating
        /// Serialized Name: ProvisioningState.Updating
        /// </summary>
        public static ExperimentProvisioningState Updating { get; } = new ExperimentProvisioningState(UpdatingValue);
        /// <summary>
        /// Deleting
        /// Serialized Name: ProvisioningState.Deleting
        /// </summary>
        public static ExperimentProvisioningState Deleting { get; } = new ExperimentProvisioningState(DeletingValue);
        /// <summary> Determines if two <see cref="ExperimentProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ExperimentProvisioningState left, ExperimentProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExperimentProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ExperimentProvisioningState left, ExperimentProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExperimentProvisioningState"/>. </summary>
        public static implicit operator ExperimentProvisioningState(string value) => new ExperimentProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExperimentProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExperimentProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
