// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Chaos.Models
{
    public partial class Selector : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(SelectorType.ToSerialString());
            writer.WritePropertyName("id");
            writer.WriteStringValue(Id);
            writer.WritePropertyName("targets");
            writer.WriteStartArray();
            foreach (var item in Targets)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteObjectValue(Filter);
            }
            writer.WriteEndObject();
        }

        internal static Selector DeserializeSelector(JsonElement element)
        {
            SelectorType type = default;
            string id = default;
            IList<TargetReference> targets = default;
            Optional<Filter> filter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString().ToSelectorType();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targets"))
                {
                    List<TargetReference> array = new List<TargetReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TargetReference.DeserializeTargetReference(item));
                    }
                    targets = array;
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    filter = Filter.DeserializeFilter(property.Value);
                    continue;
                }
            }
            return new Selector(type, id, targets, filter.Value);
        }
    }
}
