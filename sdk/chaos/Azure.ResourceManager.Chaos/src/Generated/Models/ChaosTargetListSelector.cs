// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> Model that represents a list selector. </summary>
    public partial class ChaosTargetListSelector : ChaosTargetSelector
    {
        /// <summary> Initializes a new instance of <see cref="ChaosTargetListSelector"/>. </summary>
        /// <param name="id"> String of the selector ID. </param>
        /// <param name="targets"> List of Target references. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="targets"/> is null. </exception>
        public ChaosTargetListSelector(string id, IEnumerable<ChaosTargetReference> targets) : base(id)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(targets, nameof(targets));

            Targets = targets.ToList();
            Type = SelectorType.List;
        }

        /// <summary> Initializes a new instance of <see cref="ChaosTargetListSelector"/>. </summary>
        /// <param name="id"> String of the selector ID. </param>
        /// <param name="type"> Chaos target selector discriminator type. </param>
        /// <param name="filter">
        /// Model that represents available filter types that can be applied to a targets list.
        /// Please note <see cref="ChaosTargetFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ChaosTargetSimpleFilter"/>.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="targets"> List of Target references. </param>
        internal ChaosTargetListSelector(string id, SelectorType type, ChaosTargetFilter filter, IDictionary<string, BinaryData> serializedAdditionalRawData, IList<ChaosTargetReference> targets) : base(id, type, filter, serializedAdditionalRawData)
        {
            Targets = targets;
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="ChaosTargetListSelector"/> for deserialization. </summary>
        internal ChaosTargetListSelector()
        {
        }

        /// <summary> List of Target references. </summary>
        public IList<ChaosTargetReference> Targets { get; }
    }
}
