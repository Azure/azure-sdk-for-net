// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> Model that represents a selector in the Experiment resource. </summary>
    public partial class Selector
    {
        /// <summary> Initializes a new instance of Selector. </summary>
        /// <param name="selectorType"> Enum of the selector type. </param>
        /// <param name="id"> String of the selector ID. </param>
        /// <param name="targets"> List of Target references. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="targets"/> is null. </exception>
        public Selector(SelectorType selectorType, string id, IEnumerable<TargetReference> targets)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (targets == null)
            {
                throw new ArgumentNullException(nameof(targets));
            }

            SelectorType = selectorType;
            Id = id;
            Targets = targets.ToList();
        }

        /// <summary> Initializes a new instance of Selector. </summary>
        /// <param name="selectorType"> Enum of the selector type. </param>
        /// <param name="id"> String of the selector ID. </param>
        /// <param name="targets"> List of Target references. </param>
        internal Selector(SelectorType selectorType, string id, IList<TargetReference> targets)
        {
            SelectorType = selectorType;
            Id = id;
            Targets = targets;
        }

        /// <summary> Enum of the selector type. </summary>
        public SelectorType SelectorType { get; set; }
        /// <summary> String of the selector ID. </summary>
        public string Id { get; set; }
        /// <summary> List of Target references. </summary>
        public IList<TargetReference> Targets { get; }
    }
}
