// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> Enum union of Chaos experiment action types. </summary>
    internal readonly partial struct ExperimentActionType : IEquatable<ExperimentActionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExperimentActionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExperimentActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DelayValue = "delay";
        private const string DiscreteValue = "discrete";
        private const string ContinuousValue = "continuous";

        /// <summary> delay. </summary>
        public static ExperimentActionType Delay { get; } = new ExperimentActionType(DelayValue);
        /// <summary> discrete. </summary>
        public static ExperimentActionType Discrete { get; } = new ExperimentActionType(DiscreteValue);
        /// <summary> continuous. </summary>
        public static ExperimentActionType Continuous { get; } = new ExperimentActionType(ContinuousValue);
        /// <summary> Determines if two <see cref="ExperimentActionType"/> values are the same. </summary>
        public static bool operator ==(ExperimentActionType left, ExperimentActionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExperimentActionType"/> values are not the same. </summary>
        public static bool operator !=(ExperimentActionType left, ExperimentActionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExperimentActionType"/>. </summary>
        public static implicit operator ExperimentActionType(string value) => new ExperimentActionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExperimentActionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExperimentActionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
