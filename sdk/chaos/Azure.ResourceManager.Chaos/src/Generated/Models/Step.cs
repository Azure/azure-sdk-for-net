// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> Model that represents a step in the Experiment resource. </summary>
    public partial class Step
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Step"/>. </summary>
        /// <param name="name"> String of the step name. </param>
        /// <param name="branches"> List of branches. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="branches"/> is null. </exception>
        public Step(string name, IEnumerable<Branch> branches)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(branches, nameof(branches));

            Name = name;
            Branches = branches.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="Step"/>. </summary>
        /// <param name="name"> String of the step name. </param>
        /// <param name="branches"> List of branches. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Step(string name, IList<Branch> branches, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Branches = branches;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Step"/> for deserialization. </summary>
        internal Step()
        {
        }

        /// <summary> String of the step name. </summary>
        public string Name { get; set; }
        /// <summary> List of branches. </summary>
        public IList<Branch> Branches { get; }
    }
}
