// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> The properties of a private access resource. </summary>
    public partial class PrivateAccessProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PrivateAccessProperties"/>. </summary>
        public PrivateAccessProperties()
        {
            PrivateEndpointConnections = new ChangeTrackingList<ChaosPrivateEndpointConnectionData>();
        }

        /// <summary> Initializes a new instance of <see cref="PrivateAccessProperties"/>. </summary>
        /// <param name="provisioningState"> Most recent provisioning state for the given privateAccess resource. </param>
        /// <param name="privateEndpointConnections"> A readonly collection of private endpoint connection. Currently only one endpoint connection is supported. </param>
        /// <param name="publicNetworkAccess"> Public Network Access Control for PrivateAccess resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PrivateAccessProperties(ChaosProvisioningState? provisioningState, IReadOnlyList<ChaosPrivateEndpointConnectionData> privateEndpointConnections, PublicNetworkAccessOption? publicNetworkAccess, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            PrivateEndpointConnections = privateEndpointConnections;
            PublicNetworkAccess = publicNetworkAccess;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Most recent provisioning state for the given privateAccess resource. </summary>
        public ChaosProvisioningState? ProvisioningState { get; }
        /// <summary> A readonly collection of private endpoint connection. Currently only one endpoint connection is supported. </summary>
        public IReadOnlyList<ChaosPrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary> Public Network Access Control for PrivateAccess resource. </summary>
        public PublicNetworkAccessOption? PublicNetworkAccess { get; set; }
    }
}
