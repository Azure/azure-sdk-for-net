// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.ResourceManager.Chaos;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary> Model that represents the Experiment properties model. </summary>
    public partial class ExperimentProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ExperimentProperties"/>. </summary>
        /// <param name="steps"> List of steps. </param>
        /// <param name="selectors"> List of selectors. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="steps"/> or <paramref name="selectors"/> is null. </exception>
        public ExperimentProperties(IEnumerable<ChaosExperimentStep> steps, IEnumerable<ChaosTargetSelector> selectors)
        {
            Argument.AssertNotNull(steps, nameof(steps));
            Argument.AssertNotNull(selectors, nameof(selectors));

            Steps = steps.ToList();
            Selectors = selectors.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ExperimentProperties"/>. </summary>
        /// <param name="provisioningState"> Most recent provisioning state for the given experiment resource. </param>
        /// <param name="steps"> List of steps. </param>
        /// <param name="selectors"> List of selectors. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ExperimentProperties(ChaosProvisioningState? provisioningState, IList<ChaosExperimentStep> steps, IList<ChaosTargetSelector> selectors, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ProvisioningState = provisioningState;
            Steps = steps;
            Selectors = selectors;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Most recent provisioning state for the given experiment resource. </summary>
        public ChaosProvisioningState? ProvisioningState { get; }

        /// <summary> List of steps. </summary>
        public IList<ChaosExperimentStep> Steps { get; }

        /// <summary> List of selectors. </summary>
        public IList<ChaosTargetSelector> Selectors { get; }
    }
}
