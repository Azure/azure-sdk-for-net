// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Chaos.Models
{
    /// <summary>
    /// Enum of the selector type.
    /// Serialized Name: SelectorType
    /// </summary>
    internal readonly partial struct ChaosTargetSelectorType : IEquatable<ChaosTargetSelectorType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ChaosTargetSelectorType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChaosTargetSelectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ListValue = "List";
        private const string QueryValue = "Query";

        /// <summary>
        /// List
        /// Serialized Name: SelectorType.List
        /// </summary>
        public static ChaosTargetSelectorType List { get; } = new ChaosTargetSelectorType(ListValue);
        /// <summary>
        /// Query
        /// Serialized Name: SelectorType.Query
        /// </summary>
        public static ChaosTargetSelectorType Query { get; } = new ChaosTargetSelectorType(QueryValue);
        /// <summary> Determines if two <see cref="ChaosTargetSelectorType"/> values are the same. </summary>
        public static bool operator ==(ChaosTargetSelectorType left, ChaosTargetSelectorType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChaosTargetSelectorType"/> values are not the same. </summary>
        public static bool operator !=(ChaosTargetSelectorType left, ChaosTargetSelectorType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ChaosTargetSelectorType"/>. </summary>
        public static implicit operator ChaosTargetSelectorType(string value) => new ChaosTargetSelectorType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChaosTargetSelectorType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChaosTargetSelectorType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
