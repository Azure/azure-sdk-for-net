// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Chaos
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _experimentClientDiagnostics;
        private ExperimentsRestOperations _experimentRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ExperimentClientDiagnostics => _experimentClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Chaos", ExperimentResource.ResourceType.Namespace, Diagnostics);
        private ExperimentsRestOperations ExperimentRestClient => _experimentRestClient ??= new ExperimentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ExperimentResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of TargetTypeResources in the SubscriptionResource. </summary>
        /// <param name="locationName"> String that represents a Location resource name. </param>
        /// <returns> An object representing collection of TargetTypeResources and their operations over a TargetTypeResource. </returns>
        public virtual TargetTypeCollection GetTargetTypes(string locationName)
        {
            return new TargetTypeCollection(Client, Id, locationName);
        }

        /// <summary>
        /// Get a list of Experiment resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments
        /// Operation Id: Experiments_ListAll
        /// </summary>
        /// <param name="running"> Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExperimentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExperimentResource> GetExperimentsAsync(bool? running = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ExperimentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExperimentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExperiments");
                scope.Start();
                try
                {
                    var response = await ExperimentRestClient.ListAllAsync(Id.SubscriptionId, running, continuationToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExperimentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExperimentResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExperimentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExperiments");
                scope.Start();
                try
                {
                    var response = await ExperimentRestClient.ListAllNextPageAsync(nextLink, Id.SubscriptionId, running, continuationToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExperimentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get a list of Experiment resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments
        /// Operation Id: Experiments_ListAll
        /// </summary>
        /// <param name="running"> Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExperimentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExperimentResource> GetExperiments(bool? running = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            Page<ExperimentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExperimentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExperiments");
                scope.Start();
                try
                {
                    var response = ExperimentRestClient.ListAll(Id.SubscriptionId, running, continuationToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExperimentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExperimentResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExperimentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExperiments");
                scope.Start();
                try
                {
                    var response = ExperimentRestClient.ListAllNextPage(nextLink, Id.SubscriptionId, running, continuationToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExperimentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
