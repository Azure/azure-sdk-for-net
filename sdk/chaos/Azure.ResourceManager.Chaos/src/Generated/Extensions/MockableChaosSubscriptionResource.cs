// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Chaos;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos.Mocking
{
    /// <summary></summary>
    public partial class MockableChaosSubscriptionResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableChaosSubscriptionResource for mocking. </summary>
        protected MockableChaosSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableChaosSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableChaosSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of ChaosTargetMetadatas in the <see cref="SubscriptionResource"/>. </summary>
        /// <returns> An object representing collection of ChaosTargetMetadatas and their operations over a ChaosTargetMetadataResource. </returns>
        public virtual ChaosTargetMetadataCollection GetChaosTargetMetadatas()
        {
            return GetCachedClient(client => new ChaosTargetMetadataCollection(client, Id));
        }

        /// <summary> Get a Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ChaosTargetMetadataResource> GetChaosTargetMetadata(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            return GetChaosTargetMetadatas().Get(location, targetTypeName, cancellationToken);
        }

        /// <summary> Get a Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ChaosTargetMetadataResource>> GetChaosTargetMetadataAsync(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            return await GetChaosTargetMetadatas().GetAsync(location, targetTypeName, cancellationToken).ConfigureAwait(false);
        }
    }
}
