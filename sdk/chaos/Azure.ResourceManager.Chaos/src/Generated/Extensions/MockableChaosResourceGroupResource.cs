// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Chaos;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos.Mocking
{
    /// <summary></summary>
    public partial class MockableChaosResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableChaosResourceGroupResource for mocking. </summary>
        protected MockableChaosResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableChaosResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableChaosResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of ChaosTargets in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of ChaosTargets and their operations over a ChaosTargetResource. </returns>
        public virtual ChaosTargetCollection GetChaosTargets()
        {
            return GetCachedClient(client => new ChaosTargetCollection(client, Id));
        }

        /// <summary> Get a Target resource that extends a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ChaosTargetResource> GetChaosTarget(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            return GetChaosTargets().Get(parentProviderNamespace, parentResourceType, parentResourceName, targetName, cancellationToken);
        }

        /// <summary> Get a Target resource that extends a tracked regional resource. </summary>
        /// <param name="parentProviderNamespace"> The parent resource provider namespace. </param>
        /// <param name="parentResourceType"> The parent resource type. </param>
        /// <param name="parentResourceName"> The parent resource name. </param>
        /// <param name="targetName"> String that represents a Target resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="parentProviderNamespace"/>, <paramref name="parentResourceType"/>, <paramref name="parentResourceName"/> or <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ChaosTargetResource>> GetChaosTargetAsync(string parentProviderNamespace, string parentResourceType, string parentResourceName, string targetName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(parentProviderNamespace, nameof(parentProviderNamespace));
            Argument.AssertNotNullOrEmpty(parentResourceType, nameof(parentResourceType));
            Argument.AssertNotNullOrEmpty(parentResourceName, nameof(parentResourceName));
            Argument.AssertNotNullOrEmpty(targetName, nameof(targetName));

            return await GetChaosTargets().GetAsync(parentProviderNamespace, parentResourceType, parentResourceName, targetName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a collection of ChaosExperiments in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of ChaosExperiments and their operations over a ChaosExperimentResource. </returns>
        public virtual ChaosExperimentCollection GetChaosExperiments()
        {
            return GetCachedClient(client => new ChaosExperimentCollection(client, Id));
        }

        /// <summary> Get a Experiment resource. </summary>
        /// <param name="experimentName"> String that represents a Experiment resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ChaosExperimentResource> GetChaosExperiment(string experimentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentName, nameof(experimentName));

            return GetChaosExperiments().Get(experimentName, cancellationToken);
        }

        /// <summary> Get a Experiment resource. </summary>
        /// <param name="experimentName"> String that represents a Experiment resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ChaosExperimentResource>> GetChaosExperimentAsync(string experimentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentName, nameof(experimentName));

            return await GetChaosExperiments().GetAsync(experimentName, cancellationToken).ConfigureAwait(false);
        }
    }
}
