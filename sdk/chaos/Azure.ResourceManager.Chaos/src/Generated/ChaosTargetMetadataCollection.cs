// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos
{
    /// <summary></summary>
    public partial class ChaosTargetMetadataCollection : ArmCollection, IEnumerable<ChaosTargetMetadataResource>, IAsyncEnumerable<ChaosTargetMetadataResource>
    {
        private readonly ClientDiagnostics _targetTypesClientDiagnostics;
        private readonly TargetTypes _targetTypesRestClient;

        /// <summary> Initializes a new instance of ChaosTargetMetadataCollection for mocking. </summary>
        protected ChaosTargetMetadataCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChaosTargetMetadataCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ChaosTargetMetadataCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ChaosTargetMetadataResource.ResourceType, out string chaosTargetMetadataApiVersion);
            _targetTypesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Chaos", ChaosTargetMetadataResource.ResourceType.Namespace, Diagnostics);
            _targetTypesRestClient = new TargetTypes(_targetTypesClientDiagnostics, Pipeline, Endpoint, chaosTargetMetadataApiVersion);
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), id);
            }
        }

        /// <summary> Get a Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ChaosTargetMetadataResource>> GetAsync(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.GetAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ChaosTargetMetadataResource> Get(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ChaosTargetMetadataResource> GetAllAsync(AzureLocation location, string continuationToken = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ChaosTargetMetadataData, ChaosTargetMetadataResource>(new TargetTypesGetAllAsyncCollectionResultOfT(_targetTypesRestClient, Guid.Parse(Id.SubscriptionId), location, continuationToken, context), data => new ChaosTargetMetadataResource(Client, data));
        }

        /// <summary> Get a list of Target Type resources for given location. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ChaosTargetMetadataResource> GetAll(AzureLocation location, string continuationToken = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ChaosTargetMetadataData, ChaosTargetMetadataResource>(new TargetTypesGetAllCollectionResultOfT(_targetTypesRestClient, Guid.Parse(Id.SubscriptionId), location, continuationToken, context), data => new ChaosTargetMetadataResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.ExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<ChaosTargetMetadataResource>> GetIfExistsAsync(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosTargetMetadataResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="targetTypeName"> String that represents a Target Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<ChaosTargetMetadataResource> GetIfExists(AzureLocation location, string targetTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(targetTypeName, nameof(targetTypeName));

            using DiagnosticScope scope = _targetTypesClientDiagnostics.CreateScope("ChaosTargetMetadataCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _targetTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), location, targetTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosTargetMetadataData> response = Response.FromValue(ChaosTargetMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosTargetMetadataResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosTargetMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ChaosTargetMetadataResource> IEnumerable<ChaosTargetMetadataResource>.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<ChaosTargetMetadataResource> IAsyncEnumerable<ChaosTargetMetadataResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return this.GetAllAsync(cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
