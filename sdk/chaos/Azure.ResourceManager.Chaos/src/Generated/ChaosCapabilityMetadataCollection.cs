// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Chaos
{
    /// <summary></summary>
    public partial class ChaosCapabilityMetadataCollection : ArmCollection, IEnumerable<ChaosCapabilityMetadataResource>, IAsyncEnumerable<ChaosCapabilityMetadataResource>
    {
        private readonly ClientDiagnostics _capabilityTypesClientDiagnostics;
        private readonly CapabilityTypes _capabilityTypesRestClient;

        /// <summary> Initializes a new instance of ChaosCapabilityMetadataCollection for mocking. </summary>
        protected ChaosCapabilityMetadataCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChaosCapabilityMetadataCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ChaosCapabilityMetadataCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ChaosCapabilityMetadataResource.ResourceType, out string chaosCapabilityMetadataApiVersion);
            _capabilityTypesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Chaos", ChaosCapabilityMetadataResource.ResourceType.Namespace, Diagnostics);
            _capabilityTypesRestClient = new CapabilityTypes(_capabilityTypesClientDiagnostics, Pipeline, Endpoint, chaosCapabilityMetadataApiVersion);
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Get a Capability Type resource for given Target Type and location. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ChaosCapabilityMetadataResource>> GetAsync(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.GetAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosCapabilityMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Capability Type resource for given Target Type and location. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ChaosCapabilityMetadataResource> Get(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosCapabilityMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of Capability Type resources for given Target Type and location. </summary>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ChaosCapabilityMetadataResource> GetAllAsync(string continuationToken = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ChaosCapabilityMetadataData, ChaosCapabilityMetadataResource>(new CapabilityTypesGetAsyncCollectionResultOfT(
                _capabilityTypesRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.Parent.Name,
                Id.Name,
                continuationToken,
                context), data => new ChaosCapabilityMetadataResource(Client, data));
        }

        /// <summary> Get a list of Capability Type resources for given Target Type and location. </summary>
        /// <param name="continuationToken"> String that sets the continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ChaosCapabilityMetadataResource> GetAll(string continuationToken = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ChaosCapabilityMetadataData, ChaosCapabilityMetadataResource>(new CapabilityTypesGetCollectionResultOfT(
                _capabilityTypesRestClient,
                Guid.Parse(Id.SubscriptionId),
                Id.Parent.Name,
                Id.Name,
                continuationToken,
                context), data => new ChaosCapabilityMetadataResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.ExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<ChaosCapabilityMetadataResource>> GetIfExistsAsync(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosCapabilityMetadataResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosCapabilityMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="capabilityTypeName"> String that represents a Capability Type resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capabilityTypeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="capabilityTypeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<ChaosCapabilityMetadataResource> GetIfExists(string capabilityTypeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(capabilityTypeName, nameof(capabilityTypeName));

            using DiagnosticScope scope = _capabilityTypesClientDiagnostics.CreateScope("ChaosCapabilityMetadataCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _capabilityTypesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, capabilityTypeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ChaosCapabilityMetadataData> response = Response.FromValue(ChaosCapabilityMetadataData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ChaosCapabilityMetadataResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ChaosCapabilityMetadataResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ChaosCapabilityMetadataResource> IEnumerable<ChaosCapabilityMetadataResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<ChaosCapabilityMetadataResource> IAsyncEnumerable<ChaosCapabilityMetadataResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return this.GetAllAsync(cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
