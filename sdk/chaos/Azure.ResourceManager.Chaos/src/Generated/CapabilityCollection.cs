// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Chaos
{
    /// <summary>
    /// A class representing a collection of <see cref="CapabilityResource" /> and their operations.
    /// Each <see cref="CapabilityResource" /> in the collection will belong to the same instance of <see cref="TargetResource" />.
    /// To get a <see cref="CapabilityCollection" /> instance call the GetCapabilities method from an instance of <see cref="TargetResource" />.
    /// </summary>
    public partial class CapabilityCollection : ArmCollection, IEnumerable<CapabilityResource>, IAsyncEnumerable<CapabilityResource>
    {
        private readonly ClientDiagnostics _capabilityClientDiagnostics;
        private readonly CapabilitiesRestOperations _capabilityRestClient;

        /// <summary> Initializes a new instance of the <see cref="CapabilityCollection"/> class for mocking. </summary>
        protected CapabilityCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CapabilityCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal CapabilityCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _capabilityClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Chaos", CapabilityResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CapabilityResource.ResourceType, out string capabilityApiVersion);
            _capabilityRestClient = new CapabilitiesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, capabilityApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TargetResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TargetResource.ResourceType), nameof(id));
        }

        IEnumerator<CapabilityResource> IEnumerable<CapabilityResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CapabilityResource> IAsyncEnumerable<CapabilityResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
