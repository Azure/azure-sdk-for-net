// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Chaos.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Chaos.Samples
{
    public partial class Sample_PrivateAccessResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAPrivateAccessResource()
        {
            // Generated from example definition: 2024-11-01-preview/PrivateAccesses_Get_Get_A_Private_Access_Resource.json
            // this example is just showing the usage of "PrivateAccess_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateAccessResource created on azure
            // for more information of creating PrivateAccessResource, please refer to the document of PrivateAccessResource
            string subscriptionId = "6b052e15-03d3-4f17-b2e1-be7f07588291";
            string resourceGroupName = "myResourceGroup";
            string privateAccessName = "myPrivateAccess";
            ResourceIdentifier privateAccessResourceId = PrivateAccessResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateAccessName);
            PrivateAccessResource privateAccess = client.GetPrivateAccessResource(privateAccessResourceId);

            // invoke the operation
            PrivateAccessResource result = await privateAccess.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateAccessData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAPrivateAccessResourceWithPrivateEndpoint()
        {
            // Generated from example definition: 2024-11-01-preview/PrivateAccesses_Get_Get_A_Private_Access_Resource_With_Private_Endpoint.json
            // this example is just showing the usage of "PrivateAccess_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateAccessResource created on azure
            // for more information of creating PrivateAccessResource, please refer to the document of PrivateAccessResource
            string subscriptionId = "6b052e15-03d3-4f17-b2e1-be7f07588291";
            string resourceGroupName = "myResourceGroup";
            string privateAccessName = "myPrivateAccess";
            ResourceIdentifier privateAccessResourceId = PrivateAccessResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateAccessName);
            PrivateAccessResource privateAccess = client.GetPrivateAccessResource(privateAccessResourceId);

            // invoke the operation
            PrivateAccessResource result = await privateAccess.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateAccessData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteAPrivateAccessResource()
        {
            // Generated from example definition: 2024-11-01-preview/PrivateAccesses_Delete.json
            // this example is just showing the usage of "PrivateAccess_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateAccessResource created on azure
            // for more information of creating PrivateAccessResource, please refer to the document of PrivateAccessResource
            string subscriptionId = "6b052e15-03d3-4f17-b2e1-be7f07588291";
            string resourceGroupName = "myResourceGroup";
            string privateAccessName = "myPrivateAccess";
            ResourceIdentifier privateAccessResourceId = PrivateAccessResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateAccessName);
            PrivateAccessResource privateAccess = client.GetPrivateAccessResource(privateAccessResourceId);

            // invoke the operation
            await privateAccess.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAPrivateAccessResourceSTags()
        {
            // Generated from example definition: 2024-11-01-preview/PrivateAccesses_Update.json
            // this example is just showing the usage of "PrivateAccess_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateAccessResource created on azure
            // for more information of creating PrivateAccessResource, please refer to the document of PrivateAccessResource
            string subscriptionId = "6b052e15-03d3-4f17-b2e1-be7f07588291";
            string resourceGroupName = "myResourceGroup";
            string privateAccessName = "myPrivateAccess";
            ResourceIdentifier privateAccessResourceId = PrivateAccessResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateAccessName);
            PrivateAccessResource privateAccess = client.GetPrivateAccessResource(privateAccessResourceId);

            // invoke the operation
            PrivateAccessPatch patch = new PrivateAccessPatch
            {
                Tags =
{
["tag1"] = "value1",
["tag2"] = "value2"
},
            };
            ArmOperation<PrivateAccessResource> lro = await privateAccess.UpdateAsync(WaitUntil.Completed, patch);
            PrivateAccessResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateAccessData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PrivateLinkResources_ListAllPossiblePrivateLinkResourcesUnderPrivateAccessResource()
        {
            // Generated from example definition: 2024-11-01-preview/PrivateAccesses_GetPrivateLinkResources.json
            // this example is just showing the usage of "PrivateAccesses_PrivateLinkResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateAccessResource created on azure
            // for more information of creating PrivateAccessResource, please refer to the document of PrivateAccessResource
            string subscriptionId = "6b052e15-03d3-4f17-b2e1-be7f07588291";
            string resourceGroupName = "myResourceGroup";
            string privateAccessName = "myPrivateAccess";
            ResourceIdentifier privateAccessResourceId = PrivateAccessResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateAccessName);
            PrivateAccessResource privateAccess = client.GetPrivateAccessResource(privateAccessResourceId);

            // invoke the operation and iterate over the result
            await foreach (ChaosPrivateLinkResourceData item in privateAccess.PrivateLinkResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }
    }
}
