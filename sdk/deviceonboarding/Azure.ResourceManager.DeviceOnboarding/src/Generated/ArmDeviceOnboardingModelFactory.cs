// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDeviceOnboardingModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DeviceOnboarding.OwnershipVoucherPublicKeyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceOnboarding.OwnershipVoucherPublicKeyData"/> instance for mocking. </returns>
        public static OwnershipVoucherPublicKeyData OwnershipVoucherPublicKeyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, OwnershipVoucherPublicKeyProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new OwnershipVoucherPublicKeyData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OwnershipVoucherPublicKeyProperties"/>. </summary>
        /// <param name="publicKeyDetails">
        /// Public key.
        /// Please note <see cref="PublicKeyDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="X5ChainPublicKeyDetails"/>.
        /// </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <returns> A new <see cref="Models.OwnershipVoucherPublicKeyProperties"/> instance for mocking. </returns>
        public static OwnershipVoucherPublicKeyProperties OwnershipVoucherPublicKeyProperties(PublicKeyDetails publicKeyDetails = null, ProvisioningState? provisioningState = null)
        {
            return new OwnershipVoucherPublicKeyProperties(publicKeyDetails, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceOnboarding.DiscoveryServiceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceOnboarding.DiscoveryServiceData"/> instance for mocking. </returns>
        public static DiscoveryServiceData DiscoveryServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DiscoveryServiceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DiscoveryServiceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DiscoveryServiceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="deviceEndpointHostName"> The discovery service rendezvous endpoints. </param>
        /// <returns> A new <see cref="Models.DiscoveryServiceProperties"/> instance for mocking. </returns>
        public static DiscoveryServiceProperties DiscoveryServiceProperties(ProvisioningState? provisioningState = null, string deviceEndpointHostName = null)
        {
            return new DiscoveryServiceProperties(provisioningState, deviceEndpointHostName != null ? new RendezvousEndpoints(new RendezvousEndpoint(deviceEndpointHostName, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceOnboarding.DeviceStateData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceOnboarding.DeviceStateData"/> instance for mocking. </returns>
        public static DeviceStateData DeviceStateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeviceStateProperties properties = null)
        {
            return new DeviceStateData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceStateProperties"/>. </summary>
        /// <param name="registrationId"> Unique identifier for the device. Allow alphanumeric and '-', '.', '_', ':' only. Last character can only be alphanumeric and '-'. </param>
        /// <param name="discoveryEnabled"> Indicates if the device is enabled for discovery. </param>
        /// <param name="onboardingStatus"> Onboarding status of the resource this DeviceState extends. </param>
        /// <param name="policyResourceId"> The onboarding policy resource id. </param>
        /// <param name="allocatedEndpoints"> Array of previously allocated endpoints. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="onboardUntilOn"> Indicates the maximum date and time by which a device can be onboarded, in utcDateTime format. </param>
        /// <returns> A new <see cref="Models.DeviceStateProperties"/> instance for mocking. </returns>
        public static DeviceStateProperties DeviceStateProperties(string registrationId = null, DiscoveryOption? discoveryEnabled = null, OnboardingStatus onboardingStatus = default, ResourceIdentifier policyResourceId = null, IEnumerable<AllocatedEndpoint> allocatedEndpoints = null, ProvisioningState? provisioningState = null, DateTimeOffset? onboardUntilOn = null)
        {
            allocatedEndpoints ??= new List<AllocatedEndpoint>();

            return new DeviceStateProperties(
                registrationId,
                discoveryEnabled,
                onboardingStatus,
                policyResourceId,
                allocatedEndpoints?.ToList(),
                provisioningState,
                onboardUntilOn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceOnboarding.PolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="DeviceOnboarding.PolicyData"/> instance for mocking. </returns>
        public static PolicyData PolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, PolicyProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PolicyData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PolicyProperties"/>. </summary>
        /// <param name="description"> Description of the policy. </param>
        /// <param name="status"> The policy status. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="bootstrapAuthentication">
        /// The bootstrap authentication rule.
        /// Please note <see cref="BootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.FdoBootstrapAuthenticationRule"/> and <see cref="X509BootstrapAuthenticationRule"/>.
        /// </param>
        /// <param name="allocations">
        /// Allocation rules.
        /// Please note <see cref="AllocationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EvenlyDistributedAllocationRule"/>.
        /// </param>
        /// <param name="jit"> Just-in-time rule to create the device resource. </param>
        /// <param name="resourceDetails">
        /// Further details about the policy resource
        /// Please note <see cref="PolicyResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeviceRegistryPolicyResourceDetails"/>, <see cref="DeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="HybridComputePolicyResourceDetails"/>.
        /// </param>
        /// <param name="selectedIdentity"> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </param>
        /// <returns> A new <see cref="Models.PolicyProperties"/> instance for mocking. </returns>
        public static PolicyProperties PolicyProperties(string description = null, PolicyStatusOption status = default, ProvisioningState? provisioningState = null, BootstrapAuthenticationRule bootstrapAuthentication = null, IEnumerable<AllocationRule> allocations = null, JitRule jit = null, PolicyResourceDetails resourceDetails = null, SelectedIdentity selectedIdentity = null)
        {
            allocations ??= new List<AllocationRule>();

            return new PolicyProperties(
                description,
                status,
                provisioningState,
                bootstrapAuthentication,
                allocations?.ToList(),
                jit,
                resourceDetails,
                selectedIdentity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FdoBootstrapAuthenticationRule"/>. </summary>
        /// <param name="secp256R1Default"> Per policy public key(s) to extend ownership voucher to the customer. </param>
        /// <param name="ownershipVoucherStorage">
        /// Ownership Voucher storage
        /// Please note <see cref="OwnershipVoucherStorage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StorageAccountOwnershipVoucherStorage"/>.
        /// </param>
        /// <param name="rendezvousEndpoint"> Endpoint for the rendezvous service, e.g. https://contoso-rv1.contoso.com. </param>
        /// <returns> A new <see cref="Models.FdoBootstrapAuthenticationRule"/> instance for mocking. </returns>
        public static FdoBootstrapAuthenticationRule FdoBootstrapAuthenticationRule(IEnumerable<byte[]> secp256R1Default = null, OwnershipVoucherStorage ownershipVoucherStorage = null, Uri rendezvousEndpoint = null)
        {
            secp256R1Default ??= new List<byte[]>();

            return new FdoBootstrapAuthenticationRule(BootstrapAuthenticationType.FDO, serializedAdditionalRawData: null, secp256R1Default != null ? new FdoPublicKeys(new FdoPublicKey(secp256R1Default?.ToList(), serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null, ownershipVoucherStorage, rendezvousEndpoint);
        }

        /// <summary> Initializes a new instance of <see cref="Models.X509Certificate"/>. </summary>
        /// <param name="certificate"> The certificate. </param>
        /// <param name="thumbprint"> Thumbprint extracted from the certificate. </param>
        /// <param name="expiryOn"> Expiry date for the certificate. </param>
        /// <returns> A new <see cref="Models.X509Certificate"/> instance for mocking. </returns>
        public static X509Certificate X509Certificate(byte[] certificate = null, string thumbprint = null, DateTimeOffset? expiryOn = null)
        {
            return new X509Certificate(certificate, thumbprint, expiryOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CaConfig"/>. </summary>
        /// <param name="name"> System-generated value for referencing the CA. </param>
        /// <param name="properties"> Certificate properties. </param>
        /// <returns> A new <see cref="Models.CaConfig"/> instance for mocking. </returns>
        public static CaConfig CaConfig(string name = null, CertificateProperties properties = null)
        {
            return new CaConfig(name, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CertificateProperties"/>. </summary>
        /// <param name="keyType"> Crypto type: RSA or EC. </param>
        /// <param name="subject"> Certificate subject. </param>
        /// <param name="validityPeriodInDays"> System-assigned validity period. </param>
        /// <param name="validityNotBefore"> Certificate is valid not before this date. Format ISO8601. Generated based on on validity period. </param>
        /// <param name="validityNotAfter"> Certificate is valid not after this date. Format ISO8601. Generated based on validity period. </param>
        /// <returns> A new <see cref="Models.CertificateProperties"/> instance for mocking. </returns>
        public static CertificateProperties CertificateProperties(SupportedKeyType keyType = default, string subject = null, int? validityPeriodInDays = null, DateTimeOffset? validityNotBefore = null, DateTimeOffset? validityNotAfter = null)
        {
            return new CertificateProperties(
                keyType,
                subject,
                validityPeriodInDays,
                validityNotBefore,
                validityNotAfter,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PolicyPatchProperties"/>. </summary>
        /// <param name="description"> Description of the policy. </param>
        /// <param name="status"> The policy status. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="bootstrapAuthentication">
        /// The bootstrap authentication rule.
        /// Please note <see cref="PatchBootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.PatchFdoBootstrapAuthenticationRule"/> and <see cref="PatchX509BootstrapAuthenticationRule"/>.
        /// </param>
        /// <param name="allocations">
        /// Allocation rules.
        /// Please note <see cref="AllocationRulePatch"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchEvenlyDistributedAllocationRule"/>.
        /// </param>
        /// <param name="jit"> Just-in-time rule to create the device resource. </param>
        /// <param name="resourceDetails">
        /// Further details about the policy resource
        /// Please note <see cref="PolicyPatchResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchDeviceRegistryPolicyResourceDetails"/>, <see cref="PatchDeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="PatchHybridComputePolicyResourceDetails"/>.
        /// </param>
        /// <param name="selectedIdentity"> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </param>
        /// <returns> A new <see cref="Models.PolicyPatchProperties"/> instance for mocking. </returns>
        public static PolicyPatchProperties PolicyPatchProperties(string description = null, PolicyStatusOption? status = null, ProvisioningState? provisioningState = null, PatchBootstrapAuthenticationRule bootstrapAuthentication = null, IEnumerable<AllocationRulePatch> allocations = null, JitRulePatchUpdate jit = null, PolicyPatchResourceDetails resourceDetails = null, PatchSelectedIdentity selectedIdentity = null)
        {
            allocations ??= new List<AllocationRulePatch>();

            return new PolicyPatchProperties(
                description,
                status,
                provisioningState,
                bootstrapAuthentication,
                allocations?.ToList(),
                jit,
                resourceDetails,
                selectedIdentity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchX509Certificate"/>. </summary>
        /// <param name="certificate"> The certificate. </param>
        /// <param name="thumbprint"> Thumbprint extracted from the certificate. </param>
        /// <param name="expiryOn"> Expiry date for the certificate. </param>
        /// <returns> A new <see cref="Models.PatchX509Certificate"/> instance for mocking. </returns>
        public static PatchX509Certificate PatchX509Certificate(byte[] certificate = null, string thumbprint = null, DateTimeOffset? expiryOn = null)
        {
            return new PatchX509Certificate(certificate, thumbprint, expiryOn, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PatchFdoBootstrapAuthenticationRule"/>. </summary>
        /// <param name="secp256R1Default"> Per policy public keys to represent this policy. </param>
        /// <param name="ownershipVoucherStorage">
        /// Ownership Voucher storage link
        /// Please note <see cref="OwnershipVoucherStorage"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StorageAccountOwnershipVoucherStorage"/>.
        /// </param>
        /// <param name="rendezvousEndpoint"> Endpoint for the rendezvous service, e.g. https://contoso-rv1.contoso.com. </param>
        /// <returns> A new <see cref="Models.PatchFdoBootstrapAuthenticationRule"/> instance for mocking. </returns>
        public static PatchFdoBootstrapAuthenticationRule PatchFdoBootstrapAuthenticationRule(IEnumerable<byte[]> secp256R1Default = null, OwnershipVoucherStorage ownershipVoucherStorage = null, Uri rendezvousEndpoint = null)
        {
            secp256R1Default ??= new List<byte[]>();

            return new PatchFdoBootstrapAuthenticationRule(BootstrapAuthenticationType.FDO, serializedAdditionalRawData: null, secp256R1Default != null ? new FdoPublicKeys(new FdoPublicKey(secp256R1Default?.ToList(), serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null, ownershipVoucherStorage, rendezvousEndpoint);
        }

        /// <summary> Initializes a new instance of <see cref="DeviceOnboarding.OnboardingServiceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DeviceOnboarding.OnboardingServiceData"/> instance for mocking. </returns>
        public static OnboardingServiceData OnboardingServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, OnboardingServiceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new OnboardingServiceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OnboardingServiceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="defaultHostName"> The onboarding service device endpoints. </param>
        /// <param name="enableCertificateManagement"> Selecting 'true' will enable a Microsoft managed PKI to issue certificates. Setting up of the CA and policies for certificate management will be while defining the onboarding policy. </param>
        /// <param name="publicNetworkAccess"> Allow public network access to private links. </param>
        /// <param name="privateEndpointConnections"> The private endpoint connections. </param>
        /// <returns> A new <see cref="Models.OnboardingServiceProperties"/> instance for mocking. </returns>
        public static OnboardingServiceProperties OnboardingServiceProperties(ProvisioningState? provisioningState = null, string defaultHostName = null, bool enableCertificateManagement = default, PublicNetworkAccessOption? publicNetworkAccess = null, IEnumerable<DeviceOnboardingPrivateEndpointConnection> privateEndpointConnections = null)
        {
            privateEndpointConnections ??= new List<DeviceOnboardingPrivateEndpointConnection>();

            return new OnboardingServiceProperties(
                provisioningState,
                defaultHostName != null ? new DeviceEndpoints(new DeviceEndpoint(defaultHostName, serializedAdditionalRawData: null), serializedAdditionalRawData: null) : null,
                enableCertificateManagement,
                publicNetworkAccess,
                privateEndpointConnections?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceOnboardingPrivateEndpointConnection"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The private endpoint connection properties. </param>
        /// <returns> A new <see cref="Models.DeviceOnboardingPrivateEndpointConnection"/> instance for mocking. </returns>
        public static DeviceOnboardingPrivateEndpointConnection DeviceOnboardingPrivateEndpointConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new DeviceOnboardingPrivateEndpointConnection(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateEndpointConnectionProperties"/>. </summary>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, DeviceOnboardingPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, DeviceOnboardingPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new PrivateEndpointConnectionProperties(groupIds?.ToList(), privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, privateLinkServiceConnectionState, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceOnboardingPrivateLinkServiceConnectionState"/>. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.DeviceOnboardingPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static DeviceOnboardingPrivateLinkServiceConnectionState DeviceOnboardingPrivateLinkServiceConnectionState(DeviceOnboardingPrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new DeviceOnboardingPrivateLinkServiceConnectionState(status, description, actionsRequired, serializedAdditionalRawData: null);
        }
    }
}
