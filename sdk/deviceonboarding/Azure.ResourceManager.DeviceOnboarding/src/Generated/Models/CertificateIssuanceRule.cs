// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Certificate issuance configurations. </summary>
    public partial class CertificateIssuanceRule
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CertificateIssuanceRule"/>. </summary>
        /// <param name="issuingAuthority"> The type of authority for cert issuance. </param>
        /// <param name="certificateAuthorityConfiguration"> The configuration to set up an ICA. </param>
        /// <param name="leafCertificateConfiguration"> The leaf certificate configuration. </param>
        /// <param name="renewalInterval"> Cert renewal interval. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateAuthorityConfiguration"/> or <paramref name="leafCertificateConfiguration"/> is null. </exception>
        public CertificateIssuanceRule(SupportedIssuingAuthority issuingAuthority, CaConfig certificateAuthorityConfiguration, CertPolicyConfig leafCertificateConfiguration, int renewalInterval)
        {
            Argument.AssertNotNull(certificateAuthorityConfiguration, nameof(certificateAuthorityConfiguration));
            Argument.AssertNotNull(leafCertificateConfiguration, nameof(leafCertificateConfiguration));

            IssuingAuthority = issuingAuthority;
            CertificateAuthorityConfiguration = certificateAuthorityConfiguration;
            LeafCertificateConfiguration = leafCertificateConfiguration;
            RenewalInterval = renewalInterval;
        }

        /// <summary> Initializes a new instance of <see cref="CertificateIssuanceRule"/>. </summary>
        /// <param name="issuingAuthority"> The type of authority for cert issuance. </param>
        /// <param name="certificateAuthorityConfiguration"> The configuration to set up an ICA. </param>
        /// <param name="leafCertificateConfiguration"> The leaf certificate configuration. </param>
        /// <param name="renewalInterval"> Cert renewal interval. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CertificateIssuanceRule(SupportedIssuingAuthority issuingAuthority, CaConfig certificateAuthorityConfiguration, CertPolicyConfig leafCertificateConfiguration, int renewalInterval, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IssuingAuthority = issuingAuthority;
            CertificateAuthorityConfiguration = certificateAuthorityConfiguration;
            LeafCertificateConfiguration = leafCertificateConfiguration;
            RenewalInterval = renewalInterval;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CertificateIssuanceRule"/> for deserialization. </summary>
        internal CertificateIssuanceRule()
        {
        }

        /// <summary> The type of authority for cert issuance. </summary>
        public SupportedIssuingAuthority IssuingAuthority { get; set; }
        /// <summary> The configuration to set up an ICA. </summary>
        public CaConfig CertificateAuthorityConfiguration { get; set; }
        /// <summary> The leaf certificate configuration. </summary>
        internal CertPolicyConfig LeafCertificateConfiguration { get; set; }
        /// <summary> The validity period in days. </summary>
        public int? LeafCertificateValidityPeriodInDays
        {
            get => LeafCertificateConfiguration is null ? default(int?) : LeafCertificateConfiguration.ValidityPeriodInDays;
            set
            {
                LeafCertificateConfiguration = value.HasValue ? new CertPolicyConfig(value.Value) : null;
            }
        }

        /// <summary> Cert renewal interval. </summary>
        public int RenewalInterval { get; set; }
    }
}
