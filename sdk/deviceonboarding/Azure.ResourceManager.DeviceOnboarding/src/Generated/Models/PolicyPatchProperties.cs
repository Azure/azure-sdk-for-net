// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Onboarding policies properties model for patch. </summary>
    public partial class PolicyPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PolicyPatchProperties"/>. </summary>
        public PolicyPatchProperties()
        {
            Allocations = new ChangeTrackingList<AllocationRulePatch>();
        }

        /// <summary> Initializes a new instance of <see cref="PolicyPatchProperties"/>. </summary>
        /// <param name="description"> Description of the policy. </param>
        /// <param name="status"> The policy status. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="bootstrapAuthentication">
        /// The bootstrap authentication rule.
        /// Please note <see cref="PatchBootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchFdoBootstrapAuthenticationRule"/> and <see cref="PatchX509BootstrapAuthenticationRule"/>.
        /// </param>
        /// <param name="allocations">
        /// Allocation rules.
        /// Please note <see cref="AllocationRulePatch"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchEvenlyDistributedAllocationRule"/>.
        /// </param>
        /// <param name="jit"> Just-in-time rule to create the device resource. </param>
        /// <param name="resourceDetails">
        /// Further details about the policy resource
        /// Please note <see cref="PolicyPatchResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchDeviceRegistryPolicyResourceDetails"/>, <see cref="PatchDeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="PatchHybridComputePolicyResourceDetails"/>.
        /// </param>
        /// <param name="selectedIdentity"> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PolicyPatchProperties(string description, PolicyStatusOption? status, ProvisioningState? provisioningState, PatchBootstrapAuthenticationRule bootstrapAuthentication, IList<AllocationRulePatch> allocations, JitRulePatchUpdate jit, PolicyPatchResourceDetails resourceDetails, PatchSelectedIdentity selectedIdentity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            Status = status;
            ProvisioningState = provisioningState;
            BootstrapAuthentication = bootstrapAuthentication;
            Allocations = allocations;
            Jit = jit;
            ResourceDetails = resourceDetails;
            SelectedIdentity = selectedIdentity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Description of the policy. </summary>
        public string Description { get; set; }
        /// <summary> The policy status. </summary>
        public PolicyStatusOption? Status { get; set; }
        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The bootstrap authentication rule.
        /// Please note <see cref="PatchBootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchFdoBootstrapAuthenticationRule"/> and <see cref="PatchX509BootstrapAuthenticationRule"/>.
        /// </summary>
        public PatchBootstrapAuthenticationRule BootstrapAuthentication { get; set; }
        /// <summary>
        /// Allocation rules.
        /// Please note <see cref="AllocationRulePatch"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchEvenlyDistributedAllocationRule"/>.
        /// </summary>
        public IList<AllocationRulePatch> Allocations { get; }
        /// <summary> Just-in-time rule to create the device resource. </summary>
        public JitRulePatchUpdate Jit { get; set; }
        /// <summary>
        /// Further details about the policy resource
        /// Please note <see cref="PolicyPatchResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="PatchDeviceRegistryPolicyResourceDetails"/>, <see cref="PatchDeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="PatchHybridComputePolicyResourceDetails"/>.
        /// </summary>
        public PolicyPatchResourceDetails ResourceDetails { get; set; }
        /// <summary> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </summary>
        public PatchSelectedIdentity SelectedIdentity { get; set; }
    }
}
