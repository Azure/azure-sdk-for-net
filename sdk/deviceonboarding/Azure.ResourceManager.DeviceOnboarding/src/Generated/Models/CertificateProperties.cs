// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Certificate properties. </summary>
    public partial class CertificateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CertificateProperties"/>. </summary>
        /// <param name="keyType"> Crypto type: RSA or EC. </param>
        public CertificateProperties(SupportedKeyType keyType)
        {
            KeyType = keyType;
        }

        /// <summary> Initializes a new instance of <see cref="CertificateProperties"/>. </summary>
        /// <param name="keyType"> Crypto type: RSA or EC. </param>
        /// <param name="subject"> Certificate subject. </param>
        /// <param name="validityPeriodInDays"> System-assigned validity period. </param>
        /// <param name="validityNotBefore"> Certificate is valid not before this date. Format ISO8601. Generated based on on validity period. </param>
        /// <param name="validityNotAfter"> Certificate is valid not after this date. Format ISO8601. Generated based on validity period. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CertificateProperties(SupportedKeyType keyType, string subject, int? validityPeriodInDays, DateTimeOffset? validityNotBefore, DateTimeOffset? validityNotAfter, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            KeyType = keyType;
            Subject = subject;
            ValidityPeriodInDays = validityPeriodInDays;
            ValidityNotBefore = validityNotBefore;
            ValidityNotAfter = validityNotAfter;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CertificateProperties"/> for deserialization. </summary>
        internal CertificateProperties()
        {
        }

        /// <summary> Crypto type: RSA or EC. </summary>
        public SupportedKeyType KeyType { get; set; }
        /// <summary> Certificate subject. </summary>
        public string Subject { get; }
        /// <summary> System-assigned validity period. </summary>
        public int? ValidityPeriodInDays { get; }
        /// <summary> Certificate is valid not before this date. Format ISO8601. Generated based on on validity period. </summary>
        public DateTimeOffset? ValidityNotBefore { get; }
        /// <summary> Certificate is valid not after this date. Format ISO8601. Generated based on validity period. </summary>
        public DateTimeOffset? ValidityNotAfter { get; }
    }
}
