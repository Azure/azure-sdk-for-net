// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> The authentication type for bootstrap. </summary>
    internal readonly partial struct BootstrapAuthenticationType : IEquatable<BootstrapAuthenticationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BootstrapAuthenticationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BootstrapAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string X509Value = "X509";
        private const string FDOValue = "FDO";

        /// <summary> The X509 authentication type. </summary>
        public static BootstrapAuthenticationType X509 { get; } = new BootstrapAuthenticationType(X509Value);
        /// <summary> The FDO authentication type. </summary>
        public static BootstrapAuthenticationType FDO { get; } = new BootstrapAuthenticationType(FDOValue);
        /// <summary> Determines if two <see cref="BootstrapAuthenticationType"/> values are the same. </summary>
        public static bool operator ==(BootstrapAuthenticationType left, BootstrapAuthenticationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BootstrapAuthenticationType"/> values are not the same. </summary>
        public static bool operator !=(BootstrapAuthenticationType left, BootstrapAuthenticationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BootstrapAuthenticationType"/>. </summary>
        public static implicit operator BootstrapAuthenticationType(string value) => new BootstrapAuthenticationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BootstrapAuthenticationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BootstrapAuthenticationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
