// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> The current onboarding status. </summary>
    public readonly partial struct OnboardingStatus : IEquatable<OnboardingStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OnboardingStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OnboardingStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string ProvisionedValue = "Provisioned";
        private const string FailedValue = "Failed";

        /// <summary> Onboarding is still pending. </summary>
        public static OnboardingStatus Pending { get; } = new OnboardingStatus(PendingValue);
        /// <summary> The resource has been onboarded. </summary>
        public static OnboardingStatus Provisioned { get; } = new OnboardingStatus(ProvisionedValue);
        /// <summary> Onboarding has failed. </summary>
        public static OnboardingStatus Failed { get; } = new OnboardingStatus(FailedValue);
        /// <summary> Determines if two <see cref="OnboardingStatus"/> values are the same. </summary>
        public static bool operator ==(OnboardingStatus left, OnboardingStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OnboardingStatus"/> values are not the same. </summary>
        public static bool operator !=(OnboardingStatus left, OnboardingStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OnboardingStatus"/>. </summary>
        public static implicit operator OnboardingStatus(string value) => new OnboardingStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OnboardingStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OnboardingStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
