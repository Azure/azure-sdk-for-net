// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Details of the OnboardingService Policy. </summary>
    public partial class PolicyProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PolicyProperties"/>. </summary>
        /// <param name="status"> The policy status. </param>
        /// <param name="bootstrapAuthentication">
        /// The bootstrap authentication rule.
        /// Please note <see cref="BootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FdoBootstrapAuthenticationRule"/> and <see cref="X509BootstrapAuthenticationRule"/>.
        /// </param>
        /// <param name="resourceDetails">
        /// Further details about the policy resource
        /// Please note <see cref="PolicyResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeviceRegistryPolicyResourceDetails"/>, <see cref="DeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="HybridComputePolicyResourceDetails"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="bootstrapAuthentication"/> or <paramref name="resourceDetails"/> is null. </exception>
        public PolicyProperties(PolicyStatusOption status, BootstrapAuthenticationRule bootstrapAuthentication, PolicyResourceDetails resourceDetails)
        {
            Argument.AssertNotNull(bootstrapAuthentication, nameof(bootstrapAuthentication));
            Argument.AssertNotNull(resourceDetails, nameof(resourceDetails));

            Status = status;
            BootstrapAuthentication = bootstrapAuthentication;
            Allocations = new ChangeTrackingList<AllocationRule>();
            ResourceDetails = resourceDetails;
        }

        /// <summary> Initializes a new instance of <see cref="PolicyProperties"/>. </summary>
        /// <param name="description"> Description of the policy. </param>
        /// <param name="status"> The policy status. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="bootstrapAuthentication">
        /// The bootstrap authentication rule.
        /// Please note <see cref="BootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FdoBootstrapAuthenticationRule"/> and <see cref="X509BootstrapAuthenticationRule"/>.
        /// </param>
        /// <param name="allocations">
        /// Allocation rules.
        /// Please note <see cref="AllocationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EvenlyDistributedAllocationRule"/>.
        /// </param>
        /// <param name="jit"> Just-in-time rule to create the device resource. </param>
        /// <param name="resourceDetails">
        /// Further details about the policy resource
        /// Please note <see cref="PolicyResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeviceRegistryPolicyResourceDetails"/>, <see cref="DeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="HybridComputePolicyResourceDetails"/>.
        /// </param>
        /// <param name="selectedIdentity"> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PolicyProperties(string description, PolicyStatusOption status, ProvisioningState? provisioningState, BootstrapAuthenticationRule bootstrapAuthentication, IList<AllocationRule> allocations, JitRule jit, PolicyResourceDetails resourceDetails, SelectedIdentity selectedIdentity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Description = description;
            Status = status;
            ProvisioningState = provisioningState;
            BootstrapAuthentication = bootstrapAuthentication;
            Allocations = allocations;
            Jit = jit;
            ResourceDetails = resourceDetails;
            SelectedIdentity = selectedIdentity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PolicyProperties"/> for deserialization. </summary>
        internal PolicyProperties()
        {
        }

        /// <summary> Description of the policy. </summary>
        public string Description { get; set; }
        /// <summary> The policy status. </summary>
        public PolicyStatusOption Status { get; set; }
        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The bootstrap authentication rule.
        /// Please note <see cref="BootstrapAuthenticationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FdoBootstrapAuthenticationRule"/> and <see cref="X509BootstrapAuthenticationRule"/>.
        /// </summary>
        public BootstrapAuthenticationRule BootstrapAuthentication { get; set; }
        /// <summary>
        /// Allocation rules.
        /// Please note <see cref="AllocationRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EvenlyDistributedAllocationRule"/>.
        /// </summary>
        public IList<AllocationRule> Allocations { get; }
        /// <summary> Just-in-time rule to create the device resource. </summary>
        public JitRule Jit { get; set; }
        /// <summary>
        /// Further details about the policy resource
        /// Please note <see cref="PolicyResourceDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeviceRegistryPolicyResourceDetails"/>, <see cref="DeviceRegistryNamespacePolicyResourceDetails"/> and <see cref="HybridComputePolicyResourceDetails"/>.
        /// </summary>
        public PolicyResourceDetails ResourceDetails { get; set; }
        /// <summary> The identity the OnboardingService Policy will use. Must be from the list of enabled managed identities on the resource. </summary>
        public SelectedIdentity SelectedIdentity { get; set; }
    }
}
