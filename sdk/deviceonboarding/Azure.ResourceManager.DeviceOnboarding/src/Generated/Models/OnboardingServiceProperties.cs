// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    /// <summary> Details of the EdgeProvisioning OnboardingService. </summary>
    public partial class OnboardingServiceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OnboardingServiceProperties"/>. </summary>
        /// <param name="enableCertificateManagement"> Selecting 'true' will enable a Microsoft managed PKI to issue certificates. Setting up of the CA and policies for certificate management will be while defining the onboarding policy. </param>
        public OnboardingServiceProperties(bool enableCertificateManagement)
        {
            EnableCertificateManagement = enableCertificateManagement;
            PrivateEndpointConnections = new ChangeTrackingList<DeviceOnboardingPrivateEndpointConnection>();
        }

        /// <summary> Initializes a new instance of <see cref="OnboardingServiceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="deviceEndpoints"> The onboarding service device endpoints. </param>
        /// <param name="enableCertificateManagement"> Selecting 'true' will enable a Microsoft managed PKI to issue certificates. Setting up of the CA and policies for certificate management will be while defining the onboarding policy. </param>
        /// <param name="publicNetworkAccess"> Allow public network access to private links. </param>
        /// <param name="privateEndpointConnections"> The private endpoint connections. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OnboardingServiceProperties(ProvisioningState? provisioningState, DeviceEndpoints deviceEndpoints, bool enableCertificateManagement, PublicNetworkAccessOption? publicNetworkAccess, IReadOnlyList<DeviceOnboardingPrivateEndpointConnection> privateEndpointConnections, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            DeviceEndpoints = deviceEndpoints;
            EnableCertificateManagement = enableCertificateManagement;
            PublicNetworkAccess = publicNetworkAccess;
            PrivateEndpointConnections = privateEndpointConnections;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OnboardingServiceProperties"/> for deserialization. </summary>
        internal OnboardingServiceProperties()
        {
        }

        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The onboarding service device endpoints. </summary>
        internal DeviceEndpoints DeviceEndpoints { get; }
        /// <summary> Hostname of the Endpoint. </summary>
        public string DefaultHostName
        {
            get => DeviceEndpoints?.DefaultHostName;
        }

        /// <summary> Selecting 'true' will enable a Microsoft managed PKI to issue certificates. Setting up of the CA and policies for certificate management will be while defining the onboarding policy. </summary>
        public bool EnableCertificateManagement { get; set; }
        /// <summary> Allow public network access to private links. </summary>
        public PublicNetworkAccessOption? PublicNetworkAccess { get; set; }
        /// <summary> The private endpoint connections. </summary>
        public IReadOnlyList<DeviceOnboardingPrivateEndpointConnection> PrivateEndpointConnections { get; }
    }
}
