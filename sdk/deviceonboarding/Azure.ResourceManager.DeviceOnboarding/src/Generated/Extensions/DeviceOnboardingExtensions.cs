// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.DeviceOnboarding.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeviceOnboarding
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DeviceOnboarding. </summary>
    public static partial class DeviceOnboardingExtensions
    {
        private static MockableDeviceOnboardingArmClient GetMockableDeviceOnboardingArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableDeviceOnboardingArmClient(client0));
        }

        private static MockableDeviceOnboardingResourceGroupResource GetMockableDeviceOnboardingResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDeviceOnboardingResourceGroupResource(client, resource.Id));
        }

        private static MockableDeviceOnboardingSubscriptionResource GetMockableDeviceOnboardingSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDeviceOnboardingSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a DeviceStateResource along with the instance operations that can be performed on it in the ArmClient.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetDeviceState(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DeviceStateResource"/> object. </returns>
        public static DeviceStateResource GetDeviceState(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetDeviceState(scope);
        }

        /// <summary>
        /// Gets an object representing an <see cref="OnboardingServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OnboardingServiceResource.CreateResourceIdentifier" /> to create an <see cref="OnboardingServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetOnboardingServiceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="OnboardingServiceResource"/> object. </returns>
        public static OnboardingServiceResource GetOnboardingServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetOnboardingServiceResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PolicyResource.CreateResourceIdentifier" /> to create a <see cref="PolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetPolicyResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PolicyResource"/> object. </returns>
        public static PolicyResource GetPolicyResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetPolicyResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DeviceStateResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeviceStateResource.CreateResourceIdentifier" /> to create a <see cref="DeviceStateResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetDeviceStateResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DeviceStateResource"/> object. </returns>
        public static DeviceStateResource GetDeviceStateResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetDeviceStateResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DiscoveryServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DiscoveryServiceResource.CreateResourceIdentifier" /> to create a <see cref="DiscoveryServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetDiscoveryServiceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DiscoveryServiceResource"/> object. </returns>
        public static DiscoveryServiceResource GetDiscoveryServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetDiscoveryServiceResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="OwnershipVoucherPublicKeyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OwnershipVoucherPublicKeyResource.CreateResourceIdentifier" /> to create an <see cref="OwnershipVoucherPublicKeyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingArmClient.GetOwnershipVoucherPublicKeyResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="OwnershipVoucherPublicKeyResource"/> object. </returns>
        public static OwnershipVoucherPublicKeyResource GetOwnershipVoucherPublicKeyResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDeviceOnboardingArmClient(client).GetOwnershipVoucherPublicKeyResource(id);
        }

        /// <summary>
        /// Gets a collection of OnboardingServiceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetOnboardingServices()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of OnboardingServiceResources and their operations over a OnboardingServiceResource. </returns>
        public static OnboardingServiceCollection GetOnboardingServices(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetOnboardingServices();
        }

        /// <summary>
        /// Get a OnboardingService
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceOnboarding/onboardingServices/{onboardingServiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OnboardingService_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OnboardingServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetOnboardingServiceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="onboardingServiceName"> The name of the Provisioning Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="onboardingServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="onboardingServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<OnboardingServiceResource>> GetOnboardingServiceAsync(this ResourceGroupResource resourceGroupResource, string onboardingServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetOnboardingServiceAsync(onboardingServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a OnboardingService
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceOnboarding/onboardingServices/{onboardingServiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OnboardingService_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OnboardingServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetOnboardingService(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="onboardingServiceName"> The name of the Provisioning Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="onboardingServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="onboardingServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<OnboardingServiceResource> GetOnboardingService(this ResourceGroupResource resourceGroupResource, string onboardingServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetOnboardingService(onboardingServiceName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of DiscoveryServiceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetDiscoveryServices()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of DiscoveryServiceResources and their operations over a DiscoveryServiceResource. </returns>
        public static DiscoveryServiceCollection GetDiscoveryServices(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetDiscoveryServices();
        }

        /// <summary>
        /// Get a DiscoveryService
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceOnboarding/discoveryServices/{discoveryServiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiscoveryService_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiscoveryServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetDiscoveryServiceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="discoveryServiceName"> The name of the Discovery Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="discoveryServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="discoveryServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DiscoveryServiceResource>> GetDiscoveryServiceAsync(this ResourceGroupResource resourceGroupResource, string discoveryServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetDiscoveryServiceAsync(discoveryServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a DiscoveryService
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceOnboarding/discoveryServices/{discoveryServiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiscoveryService_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiscoveryServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingResourceGroupResource.GetDiscoveryService(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="discoveryServiceName"> The name of the Discovery Resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="discoveryServiceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="discoveryServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DiscoveryServiceResource> GetDiscoveryService(this ResourceGroupResource resourceGroupResource, string discoveryServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDeviceOnboardingResourceGroupResource(resourceGroupResource).GetDiscoveryService(discoveryServiceName, cancellationToken);
        }

        /// <summary>
        /// List OnboardingService resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DeviceOnboarding/onboardingServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OnboardingService_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OnboardingServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingSubscriptionResource.GetOnboardingServices(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="OnboardingServiceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<OnboardingServiceResource> GetOnboardingServicesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeviceOnboardingSubscriptionResource(subscriptionResource).GetOnboardingServicesAsync(cancellationToken);
        }

        /// <summary>
        /// List OnboardingService resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DeviceOnboarding/onboardingServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OnboardingService_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OnboardingServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingSubscriptionResource.GetOnboardingServices(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="OnboardingServiceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<OnboardingServiceResource> GetOnboardingServices(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeviceOnboardingSubscriptionResource(subscriptionResource).GetOnboardingServices(cancellationToken);
        }

        /// <summary>
        /// List DiscoveryService resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DeviceOnboarding/discoveryServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiscoveryService_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiscoveryServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingSubscriptionResource.GetDiscoveryServices(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="DiscoveryServiceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DiscoveryServiceResource> GetDiscoveryServicesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeviceOnboardingSubscriptionResource(subscriptionResource).GetDiscoveryServicesAsync(cancellationToken);
        }

        /// <summary>
        /// List DiscoveryService resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DeviceOnboarding/discoveryServices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiscoveryService_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiscoveryServiceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDeviceOnboardingSubscriptionResource.GetDiscoveryServices(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="DiscoveryServiceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DiscoveryServiceResource> GetDiscoveryServices(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDeviceOnboardingSubscriptionResource(subscriptionResource).GetDiscoveryServices(cancellationToken);
        }
    }
}
