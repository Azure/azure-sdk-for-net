// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceOnboarding.Models;
using Azure.ResourceManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceOnboarding.Samples
{
    public partial class Sample_PolicyResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_PoliciesGet()
        {
            // Generated from example definition: 2024-12-01-preview/Policies_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Policy_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PolicyResource created on azure
            // for more information of creating PolicyResource, please refer to the document of PolicyResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            string onboardingServiceName = "onboardingServiceName";
            string policyName = "policyName";
            ResourceIdentifier policyResourceId = PolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, onboardingServiceName, policyName);
            PolicyResource policy = client.GetPolicyResource(policyResourceId);

            // invoke the operation
            PolicyResource result = await policy.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_PoliciesDelete()
        {
            // Generated from example definition: 2024-12-01-preview/Policies_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Policy_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PolicyResource created on azure
            // for more information of creating PolicyResource, please refer to the document of PolicyResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            string onboardingServiceName = "onboardingServiceName";
            string policyName = "policyName";
            ResourceIdentifier policyResourceId = PolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, onboardingServiceName, policyName);
            PolicyResource policy = client.GetPolicyResource(policyResourceId);

            // invoke the operation
            await policy.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_PoliciesUpdate()
        {
            // Generated from example definition: 2024-12-01-preview/Policies_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Policy_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PolicyResource created on azure
            // for more information of creating PolicyResource, please refer to the document of PolicyResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            string onboardingServiceName = "822P3E42nA41p-4C-7o-O2DxAr-n2AFP9S62--Z26-9rXT2Y1-H2-03cA8DNR";
            string policyName = "ZR6li5IAmIk6cl81TGOvT6B8-0XKd17y413ETH66x07QGF8GYN6Ke-W55D-14SVOW-fe7-TjHOL312D-1dIM4jLbNP";
            ResourceIdentifier policyResourceId = PolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, onboardingServiceName, policyName);
            PolicyResource policy = client.GetPolicyResource(policyResourceId);

            // invoke the operation
            PolicyPatch patch = new PolicyPatch
            {
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key4227")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["key4788"] = "sck"
},
                Properties = new PolicyPatchProperties
                {
                    Description = "wnzdzummbymrsvxubdsia",
                    Status = PolicyStatusOption.Enabled,
                    BootstrapAuthentication = new PatchX509BootstrapAuthenticationRule
                    {
                        PrimaryCertificate = new PatchX509Certificate
                        {
                            Certificate = Encoding.UTF8.GetBytes("MIIDJzCCAg+gAwIBAgIQbyvBvzFfda1ObB+5giLPlTANBgkqhkiG9w0BAQUFADAZMRcwFQYDVQQDDA55aWppbmdjZXJ0LmNvbTAeFw0yMzA3MjAwODE5MTFaFw0yNDA3MjAwODM5MTFaMBkxFzAVBgNVBAMMDnlpamluZ2NlcnQuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8X4RVhdq7Tm9uvg5lEErxiA2PNhAxJK0JGvGIxZPQ5ppXaDGiF3mNCwQWt7IexnNSX62JbiFUHvQEPDa9EyXCfXEIvnI1Co22mSahXKUpM7iXnnRydx7ZnoFZiUh0jZb1BrvivSzN9ahtXWw2jH0ntpy8e9RSL4zpIzJbWCXaQEAjP+RbmS/LpBo/BArfWs9FQfIKi+og5i0isy0Sf6PQnNV0uj2jiT+lZSyzbEvLHfHeMtEP8hnZ9e+RYDdntCoQEhhMCVUO94juPLP6Rr6VvLxf1PwzSAsIJcqhdSsym5KlgC6CCe742B9Xrj1prguBL9OSMaJ5g6ec1wqndMEOQIDAQABo2swaTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBkGA1UdEQQSMBCCDnlpamluZ2NlcnQuY29tMB0GA1UdDgQWBBSsza5j/ZDk+TAEVbEaEaq7jK3O0zANBgkqhkiG9w0BAQUFAAOCAQEAScV0X0VX1q2OgeGqXAGP5NAyiiy7EepSPbT1U+LxUGnrZi9RoiPLT6Z5xaASTsBxibe+RUB6gJr1OIPlq5Dp21Ytq4YYG468wpYrEo7UxV93GGS8wYTBu57SD5Jc+SbLJ34B7SUff8VlgRqk5t2ExAJqhQPy1C3pX5YkegdHg7L2iNPsHOKRCqxhrVIqC8VqOwR9MN6z1J4EitSI/DylmnZpMsFOFXGJA+gXOVdd8tPQOiQW0cgfvjVhPqYMjQK6pouJyFINC4WTDleDGTu8IcDRxG+8WLHvB7avbhSyNmcfCtePxMht0/6PgEoVCbwTXAPWEjzsuuqKQT+cyAdvdw=="),
                        },
                    },
                    Allocations = {new PatchEvenlyDistributedAllocationRule
{
Endpoints = {new PatchAllocationEndpoint
{
ResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testRg/providers/Microsoft.EventGrid/namespaces/kgechpgccjomujnmwhpfwmkey"),
HostName = "kgechpgccjomujnmwhpfwmkey.eventgrid.azure.net",
}},
Name = "kgechpgccjomujnmwhpfwmkey",
EndpointType = EndpointType.MicrosoftEventGridNamespace,
}},
                    Jit = new JitRulePatchUpdate
                    {
                        Priority = 3,
                        SubscriptionId = "00000000-0000-0000-0000-000000000000",
                        ResourceGroupName = "(_)UJ",
                    },
                    ResourceDetails = new PatchDeviceRegistryPolicyResourceDetails(),
                    SelectedIdentity = new PatchSelectedIdentity
                    {
                        Type = SelectedIdentityType.SystemAssigned,
                        ResourceId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup123/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1"),
                    },
                },
            };
            ArmOperation<PolicyResource> lro = await policy.UpdateAsync(WaitUntil.Completed, patch);
            PolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
