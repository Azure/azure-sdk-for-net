// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DeviceOnboarding.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.DeviceOnboarding.Samples
{
    public partial class Sample_OnboardingServiceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_OnboardingServicesCreateOrUpdate()
        {
            // Generated from example definition: 2024-12-01-preview/OnboardingServices_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "OnboardingService_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OnboardingServiceResource
            OnboardingServiceCollection collection = resourceGroupResource.GetOnboardingServices();

            // invoke the operation
            string onboardingServiceName = "-90B6JLInMP5c3554M76q5G-64177658-9W8UW-DRc6b5-7";
            OnboardingServiceData data = new OnboardingServiceData(new AzureLocation("mdwvgcgfpqanztuzrjbp"))
            {
                Properties = new OnboardingServiceProperties(true)
                {
                    PublicNetworkAccess = PublicNetworkAccessOption.Enabled,
                },
                Tags =
                {
                    ["key746"] = "byqsmjkgnjrqf"
                },
            };
            ArmOperation<OnboardingServiceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, onboardingServiceName, data);
            OnboardingServiceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OnboardingServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OnboardingServicesGet()
        {
            // Generated from example definition: 2024-12-01-preview/OnboardingServices_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OnboardingService_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OnboardingServiceResource
            OnboardingServiceCollection collection = resourceGroupResource.GetOnboardingServices();

            // invoke the operation
            string onboardingServiceName = "x-j4MQH";
            OnboardingServiceResource result = await collection.GetAsync(onboardingServiceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OnboardingServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OnboardingServicesListByResourceGroup()
        {
            // Generated from example definition: 2024-12-01-preview/OnboardingServices_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "OnboardingService_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OnboardingServiceResource
            OnboardingServiceCollection collection = resourceGroupResource.GetOnboardingServices();

            // invoke the operation and iterate over the result
            await foreach (OnboardingServiceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OnboardingServiceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OnboardingServicesGet()
        {
            // Generated from example definition: 2024-12-01-preview/OnboardingServices_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OnboardingService_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OnboardingServiceResource
            OnboardingServiceCollection collection = resourceGroupResource.GetOnboardingServices();

            // invoke the operation
            string onboardingServiceName = "x-j4MQH";
            bool result = await collection.ExistsAsync(onboardingServiceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OnboardingServicesGet()
        {
            // Generated from example definition: 2024-12-01-preview/OnboardingServices_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OnboardingService_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "A213D41A-DD8E-4F40-BDA8-2F007FE14CF7";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OnboardingServiceResource
            OnboardingServiceCollection collection = resourceGroupResource.GetOnboardingServices();

            // invoke the operation
            string onboardingServiceName = "x-j4MQH";
            NullableResponse<OnboardingServiceResource> response = await collection.GetIfExistsAsync(onboardingServiceName);
            OnboardingServiceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OnboardingServiceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
