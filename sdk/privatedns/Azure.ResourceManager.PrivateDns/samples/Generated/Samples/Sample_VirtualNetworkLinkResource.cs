// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.PrivateDns;

namespace Azure.ResourceManager.PrivateDns.Samples
{
    public partial class Sample_VirtualNetworkLinkResource
    {
        // PATCH Private DNS Zone Virtual Network Link
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneVirtualNetworkLink()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkPatch.json
            // this example is just showing the usage of "VirtualNetworkLinks_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualNetworkLinkResource created on azure
            // for more information of creating VirtualNetworkLinkResource, please refer to the document of VirtualNetworkLinkResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string virtualNetworkLinkName = "virtualNetworkLink1";
            ResourceIdentifier virtualNetworkLinkResourceId = VirtualNetworkLinkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, virtualNetworkLinkName);
            VirtualNetworkLinkResource virtualNetworkLink = client.GetVirtualNetworkLinkResource(virtualNetworkLinkResourceId);

            // invoke the operation
            VirtualNetworkLinkData data = new VirtualNetworkLinkData(new AzureLocation("placeholder"))
            {
                RegistrationEnabled = true,
                Tags =
{
["key2"] = "value2",
},
            };
            ArmOperation<VirtualNetworkLinkResource> lro = await virtualNetworkLink.UpdateAsync(WaitUntil.Completed, data);
            VirtualNetworkLinkResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualNetworkLinkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DELETE Private DNS Zone Virtual Network Link
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneVirtualNetworkLink()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkDelete.json
            // this example is just showing the usage of "VirtualNetworkLinks_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualNetworkLinkResource created on azure
            // for more information of creating VirtualNetworkLinkResource, please refer to the document of VirtualNetworkLinkResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string virtualNetworkLinkName = "virtualNetworkLink1";
            ResourceIdentifier virtualNetworkLinkResourceId = VirtualNetworkLinkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, virtualNetworkLinkName);
            VirtualNetworkLinkResource virtualNetworkLink = client.GetVirtualNetworkLinkResource(virtualNetworkLinkResourceId);

            // invoke the operation
            await virtualNetworkLink.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone Virtual Network Link
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneVirtualNetworkLink()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/VirtualNetworkLinkGet.json
            // this example is just showing the usage of "VirtualNetworkLinks_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualNetworkLinkResource created on azure
            // for more information of creating VirtualNetworkLinkResource, please refer to the document of VirtualNetworkLinkResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string virtualNetworkLinkName = "virtualNetworkLink1";
            ResourceIdentifier virtualNetworkLinkResourceId = VirtualNetworkLinkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, virtualNetworkLinkName);
            VirtualNetworkLinkResource virtualNetworkLink = client.GetVirtualNetworkLinkResource(virtualNetworkLinkResourceId);

            // invoke the operation
            VirtualNetworkLinkResource result = await virtualNetworkLink.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualNetworkLinkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
