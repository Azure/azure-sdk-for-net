// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.PrivateDns;
using Azure.ResourceManager.PrivateDns.Models;

namespace Azure.ResourceManager.PrivateDns.Samples
{
    public partial class Sample_PrivateDnsARecordCollection
    {
        // PUT Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordA";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                ARecords =
{
new PrivateDnsARecordInfo()
{
IPv4Address = IPAddress.Parse("1.2.3.4"),
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordAAAA";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                AaaaRecords =
{
new PrivateDnsAaaaRecordInfo()
{
IPv6Address = IPAddress.Parse("::1"),
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordCNAME";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                Cname = "contoso.com",
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordMX";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                PrivateDnsMXRecords =
{
new PrivateDnsMXRecordInfo()
{
Preference = 0,
Exchange = "mail.privatezone1.com",
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                PtrRecords =
{
new PrivateDnsPtrRecordInfo()
{
PtrDomainName = "localhost",
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone SOA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneSOARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                PrivateDnsSoaRecordInfo = new PrivateDnsSoaRecordInfo()
                {
                    Host = "azureprivatedns.net",
                    Email = "azureprivatedns-hostmaster.microsoft.com",
                    SerialNumber = 1,
                    RefreshTimeInSeconds = 3600,
                    RetryTimeInSeconds = 300,
                    ExpireTimeInSeconds = 2419200,
                },
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordSRV";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                SrvRecords =
{
new PrivateDnsSrvRecordInfo()
{
Priority = 0,
Weight = 10,
Port = 80,
Target = "contoso.com",
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PUT Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PUTPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPut.json
            // this example is just showing the usage of "RecordSets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordTXT";
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key1"] = "value1",
},
                TtlInSeconds = 3600,
                TxtRecords =
{
new PrivateDnsTxtRecordInfo()
{
Values =
{
"string1","string2"
},
}
},
            };
            ArmOperation<PrivateDnsARecordResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, relativeRecordSetName, data);
            PrivateDnsARecordResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordA";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordA";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordAAAA";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordAAAA";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordCNAME";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordCNAME";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordMX";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordMX";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "1";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone SOA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneSOARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone SOA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneSOARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "@";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordSRV";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordSRV";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordTXT";
            PrivateDnsARecordResource result = await collection.GetAsync(relativeRecordSetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GETPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation
            string relativeRecordSetName = "recordTXT";
            bool result = await collection.ExistsAsync(relativeRecordSetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // GET Private DNS Zone A Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneARecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone AAAA Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneAAAARecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone CNAME Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneCNAMERecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone MX Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneMXRecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone PTR Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZonePTRRecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone SOA Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneSOARecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone SRV Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneSRVRecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone TXT Record Sets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GETPrivateDNSZoneTXTRecordSets()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTList.json
            // this example is just showing the usage of "RecordSets_ListByType" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsZoneResource created on azure
            // for more information of creating PrivateDnsZoneResource, please refer to the document of PrivateDnsZoneResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            ResourceIdentifier privateDnsZoneResourceId = PrivateDnsZoneResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName);
            PrivateDnsZoneResource privateDnsZone = client.GetPrivateDnsZoneResource(privateDnsZoneResourceId);

            // get the collection of this PrivateDnsARecordResource
            PrivateDnsARecordCollection collection = privateDnsZone.GetPrivateDnsARecords();

            // invoke the operation and iterate over the result
            await foreach (PrivateDnsARecordResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PrivateDnsRecordData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
