// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.PrivateDns;

namespace Azure.ResourceManager.PrivateDns.Samples
{
    public partial class Sample_PrivateDnsTxtRecordResource
    {
        // PATCH Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordAAAA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordCNAME";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordMX";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone SOA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneSOARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "@";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordSRV";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PATCH Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PATCHPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPatch.json
            // this example is just showing the usage of "RecordSets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordTXT";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsRecordData data = new PrivateDnsRecordData()
            {
                Metadata =
{
["key2"] = "value2",
},
            };
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DELETE Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetADelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAADelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordAAAA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEDelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordCNAME";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXDelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordMX";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRDelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVDelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordSRV";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // DELETE Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DELETEPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTDelete.json
            // this example is just showing the usage of "RecordSets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordTXT";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            await privateDnsPrivateDnsTxtRecordInfo.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // GET Private DNS Zone A Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone AAAA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneAAAARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordAAAA";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone CNAME Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneCNAMERecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordCNAME";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone MX Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneMXRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordMX";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone PTR Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZonePTRRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "0.0.127.in-addr.arpa";
            string relativeRecordSetName = "1";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone SOA Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneSOARecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "@";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone SRV Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneSRVRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordSRV";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GET Private DNS Zone TXT Record Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GETPrivateDNSZoneTXTRecordSet()
        {
            // Generated from example definition: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json
            // this example is just showing the usage of "RecordSets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PrivateDnsTxtRecordResource created on azure
            // for more information of creating PrivateDnsTxtRecordResource, please refer to the document of PrivateDnsTxtRecordResource
            string subscriptionId = "subscriptionId";
            string resourceGroupName = "resourceGroup1";
            string privateZoneName = "privatezone1.com";
            string relativeRecordSetName = "recordTXT";
            ResourceIdentifier privateDnsPrivateDnsTxtRecordInfoResourceId = PrivateDnsTxtRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, privateZoneName, relativeRecordSetName);
            PrivateDnsTxtRecordResource privateDnsPrivateDnsTxtRecordInfo = client.GetPrivateDnsTxtRecordResource(privateDnsPrivateDnsTxtRecordInfoResourceId);

            // invoke the operation
            PrivateDnsTxtRecordResource result = await privateDnsPrivateDnsTxtRecordInfo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PrivateDnsRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
