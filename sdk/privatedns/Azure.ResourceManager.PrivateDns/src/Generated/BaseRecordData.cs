// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PrivateDns.Models;

namespace Azure.ResourceManager.PrivateDns
{
    /// <summary> A class representing the BaseRecord data model. </summary>
    public partial class BaseRecordData : ResourceData
    {
        /// <summary> Initializes a new instance of BaseRecordData. </summary>
        public BaseRecordData()
        {
            Metadata = new ChangeTrackingDictionary<string, string>();
            ARecords = new ChangeTrackingList<ARecordInfo>();
            AaaaRecords = new ChangeTrackingList<AaaaRecordInfo>();
            MXRecords = new ChangeTrackingList<MXRecordInfo>();
            PtrRecords = new ChangeTrackingList<PtrRecordInfo>();
            SrvRecords = new ChangeTrackingList<SrvRecordInfo>();
            TxtRecords = new ChangeTrackingList<TxtRecordInfo>();
        }

        /// <summary> Initializes a new instance of BaseRecordData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> The ETag of the record set. </param>
        /// <param name="metadata"> The metadata attached to the record set. </param>
        /// <param name="ttlInSeconds"> The TTL (time-to-live) of the records in the record set. </param>
        /// <param name="fqdn"> Fully qualified domain name of the record set. </param>
        /// <param name="isAutoRegistered"> Is the record set auto-registered in the Private DNS zone through a virtual network link?. </param>
        /// <param name="aRecords"> The list of A records in the record set. </param>
        /// <param name="aaaaRecords"> The list of AAAA records in the record set. </param>
        /// <param name="cnameRecordInfo"> The CNAME record in the record set. </param>
        /// <param name="mxRecords"> The list of MX records in the record set. </param>
        /// <param name="ptrRecords"> The list of PTR records in the record set. </param>
        /// <param name="soaRecordInfo"> The SOA record in the record set. </param>
        /// <param name="srvRecords"> The list of SRV records in the record set. </param>
        /// <param name="txtRecords"> The list of TXT records in the record set. </param>
        internal BaseRecordData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ETag? etag, IDictionary<string, string> metadata, long? ttlInSeconds, string fqdn, bool? isAutoRegistered, IList<ARecordInfo> aRecords, IList<AaaaRecordInfo> aaaaRecords, CnameRecordInfo cnameRecordInfo, IList<MXRecordInfo> mxRecords, IList<PtrRecordInfo> ptrRecords, SoaRecordInfo soaRecordInfo, IList<SrvRecordInfo> srvRecords, IList<TxtRecordInfo> txtRecords) : base(id, name, resourceType, systemData)
        {
            ETag = etag;
            Metadata = metadata;
            TtlInSeconds = ttlInSeconds;
            Fqdn = fqdn;
            IsAutoRegistered = isAutoRegistered;
            ARecords = aRecords;
            AaaaRecords = aaaaRecords;
            CnameRecordInfo = cnameRecordInfo;
            MXRecords = mxRecords;
            PtrRecords = ptrRecords;
            SoaRecordInfo = soaRecordInfo;
            SrvRecords = srvRecords;
            TxtRecords = txtRecords;
        }

        /// <summary> The ETag of the record set. </summary>
        public ETag? ETag { get; set; }
        /// <summary> The metadata attached to the record set. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> The TTL (time-to-live) of the records in the record set. </summary>
        public long? TtlInSeconds { get; set; }
        /// <summary> Fully qualified domain name of the record set. </summary>
        public string Fqdn { get; }
        /// <summary> Is the record set auto-registered in the Private DNS zone through a virtual network link?. </summary>
        public bool? IsAutoRegistered { get; }
        /// <summary> The list of A records in the record set. </summary>
        public IList<ARecordInfo> ARecords { get; }
        /// <summary> The list of AAAA records in the record set. </summary>
        public IList<AaaaRecordInfo> AaaaRecords { get; }
        /// <summary> The CNAME record in the record set. </summary>
        internal CnameRecordInfo CnameRecordInfo { get; set; }
        /// <summary> The canonical name for this CNAME record. </summary>
        public string Cname
        {
            get => CnameRecordInfo is null ? default : CnameRecordInfo.Cname;
            set
            {
                if (CnameRecordInfo is null)
                    CnameRecordInfo = new CnameRecordInfo();
                CnameRecordInfo.Cname = value;
            }
        }

        /// <summary> The list of MX records in the record set. </summary>
        public IList<MXRecordInfo> MXRecords { get; }
        /// <summary> The list of PTR records in the record set. </summary>
        public IList<PtrRecordInfo> PtrRecords { get; }
        /// <summary> The SOA record in the record set. </summary>
        public SoaRecordInfo SoaRecordInfo { get; set; }
        /// <summary> The list of SRV records in the record set. </summary>
        public IList<SrvRecordInfo> SrvRecords { get; }
        /// <summary> The list of TXT records in the record set. </summary>
        public IList<TxtRecordInfo> TxtRecords { get; }
    }
}
