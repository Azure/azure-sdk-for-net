// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.PrivateDns.Models
{
    /// <summary> The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to 'NxDomainRedirect', Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. </summary>
    public readonly partial struct ResolutionPolicy : IEquatable<ResolutionPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResolutionPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResolutionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string NxDomainRedirectValue = "NxDomainRedirect";

        /// <summary> Default. </summary>
        public static ResolutionPolicy Default { get; } = new ResolutionPolicy(DefaultValue);
        /// <summary> NxDomainRedirect. </summary>
        public static ResolutionPolicy NxDomainRedirect { get; } = new ResolutionPolicy(NxDomainRedirectValue);
        /// <summary> Determines if two <see cref="ResolutionPolicy"/> values are the same. </summary>
        public static bool operator ==(ResolutionPolicy left, ResolutionPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResolutionPolicy"/> values are not the same. </summary>
        public static bool operator !=(ResolutionPolicy left, ResolutionPolicy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResolutionPolicy"/>. </summary>
        public static implicit operator ResolutionPolicy(string value) => new ResolutionPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResolutionPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResolutionPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
