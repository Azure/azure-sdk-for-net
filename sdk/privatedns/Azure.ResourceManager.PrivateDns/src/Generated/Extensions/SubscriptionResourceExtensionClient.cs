// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.PrivateDns
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _privateZoneClientDiagnostics;
        private PrivateZonesRestOperations _privateZoneRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PrivateZoneClientDiagnostics => _privateZoneClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.PrivateDns", PrivateZoneResource.ResourceType.Namespace, Diagnostics);
        private PrivateZonesRestOperations PrivateZoneRestClient => _privateZoneRestClient ??= new PrivateZonesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PrivateZoneResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists the Private DNS zones in all resource groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateDnsZones
        /// Operation Id: PrivateZones_List
        /// </summary>
        /// <param name="top"> The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateZoneResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateZoneResource> GetPrivateZonesAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateZoneResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateZoneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateZones");
                scope.Start();
                try
                {
                    var response = await PrivateZoneRestClient.ListAsync(Id.SubscriptionId, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateZoneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PrivateZoneResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateZoneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateZones");
                scope.Start();
                try
                {
                    var response = await PrivateZoneRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateZoneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists the Private DNS zones in all resource groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Network/privateDnsZones
        /// Operation Id: PrivateZones_List
        /// </summary>
        /// <param name="top"> The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateZoneResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateZoneResource> GetPrivateZones(int? top = null, CancellationToken cancellationToken = default)
        {
            Page<PrivateZoneResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateZoneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateZones");
                scope.Start();
                try
                {
                    var response = PrivateZoneRestClient.List(Id.SubscriptionId, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateZoneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PrivateZoneResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateZoneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateZones");
                scope.Start();
                try
                {
                    var response = PrivateZoneRestClient.ListNextPage(nextLink, Id.SubscriptionId, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateZoneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
