// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PrivateDns;

namespace Azure.ResourceManager.PrivateDns.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class PrivateDnsModelFactory
    {
        /// <summary> Initializes a new instance of PrivateDnsZoneData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The ETag of the zone. </param>
        /// <param name="maxNumberOfRecords"> The maximum number of record sets that can be created in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfRecords"> The current number of record sets in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="maxNumberOfVirtualNetworkLinks"> The maximum number of virtual networks that can be linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfVirtualNetworkLinks"> The current number of virtual networks that are linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="maxNumberOfVirtualNetworkLinksWithRegistration"> The maximum number of virtual networks that can be linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="numberOfVirtualNetworkLinksWithRegistration"> The current number of virtual networks that are linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="privateDnsProvisioningState"> The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="internalId"> Private zone internal Id. </param>
        /// <returns> A new <see cref="PrivateDns.PrivateDnsZoneData"/> instance for mocking. </returns>
        public static PrivateDnsZoneData PrivateDnsZoneData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, long? maxNumberOfRecords = null, long? numberOfRecords = null, long? maxNumberOfVirtualNetworkLinks = null, long? numberOfVirtualNetworkLinks = null, long? maxNumberOfVirtualNetworkLinksWithRegistration = null, long? numberOfVirtualNetworkLinksWithRegistration = null, PrivateDnsProvisioningState? privateDnsProvisioningState = null, string internalId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PrivateDnsZoneData(id, name, resourceType, systemData, tags, location, etag, maxNumberOfRecords, numberOfRecords, maxNumberOfVirtualNetworkLinks, numberOfVirtualNetworkLinks, maxNumberOfVirtualNetworkLinksWithRegistration, numberOfVirtualNetworkLinksWithRegistration, privateDnsProvisioningState, internalId);
        }

        /// <summary> Initializes a new instance of VirtualNetworkLinkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> The ETag of the virtual network link. </param>
        /// <param name="virtualNetworkId"> The reference of the virtual network. </param>
        /// <param name="registrationEnabled"> Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?. </param>
        /// <param name="virtualNetworkLinkState"> The status of the virtual network link to the Private DNS zone. Possible values are &apos;InProgress&apos; and &apos;Done&apos;. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <param name="privateDnsProvisioningState"> The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored. </param>
        /// <returns> A new <see cref="PrivateDns.VirtualNetworkLinkData"/> instance for mocking. </returns>
        public static VirtualNetworkLinkData VirtualNetworkLinkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, ResourceIdentifier virtualNetworkId = null, bool? registrationEnabled = null, VirtualNetworkLinkState? virtualNetworkLinkState = null, PrivateDnsProvisioningState? privateDnsProvisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualNetworkLinkData(id, name, resourceType, systemData, tags, location, etag, virtualNetworkId != null ? ResourceManagerModelFactory.WritableSubResource(virtualNetworkId) : null, registrationEnabled, virtualNetworkLinkState, privateDnsProvisioningState);
        }

        /// <summary> Initializes a new instance of PrivateDnsRecordData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="etag"> The ETag of the record set. </param>
        /// <param name="metadata"> The metadata attached to the record set. </param>
        /// <param name="ttlInSeconds"> The TTL (time-to-live) of the records in the record set. </param>
        /// <param name="fqdn"> Fully qualified domain name of the record set. </param>
        /// <param name="isAutoRegistered"> Is the record set auto-registered in the Private DNS zone through a virtual network link?. </param>
        /// <param name="aRecords"> The list of A records in the record set. </param>
        /// <param name="aaaaRecords"> The list of AAAA records in the record set. </param>
        /// <param name="cname"> The CNAME record in the record set. </param>
        /// <param name="privateDnsMXRecords"> The list of MX records in the record set. </param>
        /// <param name="ptrRecords"> The list of PTR records in the record set. </param>
        /// <param name="privateDnsSoaRecordInfo"> The SOA record in the record set. </param>
        /// <param name="srvRecords"> The list of SRV records in the record set. </param>
        /// <param name="txtRecords"> The list of TXT records in the record set. </param>
        /// <returns> A new <see cref="PrivateDns.PrivateDnsRecordData"/> instance for mocking. </returns>
        public static PrivateDnsRecordData PrivateDnsRecordData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ETag? etag = null, IDictionary<string, string> metadata = null, long? ttlInSeconds = null, string fqdn = null, bool? isAutoRegistered = null, IEnumerable<PrivateDnsARecordInfo> aRecords = null, IEnumerable<PrivateDnsAaaaRecordInfo> aaaaRecords = null, string cname = null, IEnumerable<PrivateDnsMXRecordInfo> privateDnsMXRecords = null, IEnumerable<PrivateDnsPtrRecordInfo> ptrRecords = null, PrivateDnsSoaRecordInfo privateDnsSoaRecordInfo = null, IEnumerable<PrivateDnsSrvRecordInfo> srvRecords = null, IEnumerable<PrivateDnsTxtRecordInfo> txtRecords = null)
        {
            metadata ??= new Dictionary<string, string>();
            aRecords ??= new List<PrivateDnsARecordInfo>();
            aaaaRecords ??= new List<PrivateDnsAaaaRecordInfo>();
            privateDnsMXRecords ??= new List<PrivateDnsMXRecordInfo>();
            ptrRecords ??= new List<PrivateDnsPtrRecordInfo>();
            srvRecords ??= new List<PrivateDnsSrvRecordInfo>();
            txtRecords ??= new List<PrivateDnsTxtRecordInfo>();

            return new PrivateDnsRecordData(id, name, resourceType, systemData, etag, metadata, ttlInSeconds, fqdn, isAutoRegistered, aRecords?.ToList(), aaaaRecords?.ToList(), cname != null ? new PrivateDnsCnameRecordInfo(cname) : null, privateDnsMXRecords?.ToList(), ptrRecords?.ToList(), privateDnsSoaRecordInfo, srvRecords?.ToList(), txtRecords?.ToList());
        }

        /// <summary> Initializes a new instance of PrivateDnsARecordInfo. </summary>
        /// <param name="ipv4Address"> The IPv4 address of this A record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsARecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsARecordInfo PrivateDnsARecordInfo(IPAddress ipv4Address = null)
        {
            return new PrivateDnsARecordInfo(ipv4Address);
        }

        /// <summary> Initializes a new instance of PrivateDnsAaaaRecordInfo. </summary>
        /// <param name="ipv6Address"> The IPv6 address of this AAAA record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsAaaaRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsAaaaRecordInfo PrivateDnsAaaaRecordInfo(IPAddress ipv6Address = null)
        {
            return new PrivateDnsAaaaRecordInfo(ipv6Address);
        }

        /// <summary> Initializes a new instance of PrivateDnsMXRecordInfo. </summary>
        /// <param name="preference"> The preference value for this MX record. </param>
        /// <param name="exchange"> The domain name of the mail host for this MX record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsMXRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsMXRecordInfo PrivateDnsMXRecordInfo(int? preference = null, string exchange = null)
        {
            return new PrivateDnsMXRecordInfo(preference, exchange);
        }

        /// <summary> Initializes a new instance of PrivateDnsPtrRecordInfo. </summary>
        /// <param name="ptrDomainName"> The PTR target domain name for this PTR record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsPtrRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsPtrRecordInfo PrivateDnsPtrRecordInfo(string ptrDomainName = null)
        {
            return new PrivateDnsPtrRecordInfo(ptrDomainName);
        }

        /// <summary> Initializes a new instance of PrivateDnsSoaRecordInfo. </summary>
        /// <param name="host"> The domain name of the authoritative name server for this SOA record. </param>
        /// <param name="email"> The email contact for this SOA record. </param>
        /// <param name="serialNumber"> The serial number for this SOA record. </param>
        /// <param name="refreshTimeInSeconds"> The refresh value for this SOA record. </param>
        /// <param name="retryTimeInSeconds"> The retry time for this SOA record. </param>
        /// <param name="expireTimeInSeconds"> The expire time for this SOA record. </param>
        /// <param name="minimumTtlInSeconds"> The minimum value for this SOA record. By convention this is used to determine the negative caching duration. </param>
        /// <returns> A new <see cref="Models.PrivateDnsSoaRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsSoaRecordInfo PrivateDnsSoaRecordInfo(string host = null, string email = null, long? serialNumber = null, long? refreshTimeInSeconds = null, long? retryTimeInSeconds = null, long? expireTimeInSeconds = null, long? minimumTtlInSeconds = null)
        {
            return new PrivateDnsSoaRecordInfo(host, email, serialNumber, refreshTimeInSeconds, retryTimeInSeconds, expireTimeInSeconds, minimumTtlInSeconds);
        }

        /// <summary> Initializes a new instance of PrivateDnsSrvRecordInfo. </summary>
        /// <param name="priority"> The priority value for this SRV record. </param>
        /// <param name="weight"> The weight value for this SRV record. </param>
        /// <param name="port"> The port value for this SRV record. </param>
        /// <param name="target"> The target domain name for this SRV record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsSrvRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsSrvRecordInfo PrivateDnsSrvRecordInfo(int? priority = null, int? weight = null, int? port = null, string target = null)
        {
            return new PrivateDnsSrvRecordInfo(priority, weight, port, target);
        }

        /// <summary> Initializes a new instance of PrivateDnsTxtRecordInfo. </summary>
        /// <param name="values"> The text value of this TXT record. </param>
        /// <returns> A new <see cref="Models.PrivateDnsTxtRecordInfo"/> instance for mocking. </returns>
        public static PrivateDnsTxtRecordInfo PrivateDnsTxtRecordInfo(IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new PrivateDnsTxtRecordInfo(values?.ToList());
        }
    }
}
