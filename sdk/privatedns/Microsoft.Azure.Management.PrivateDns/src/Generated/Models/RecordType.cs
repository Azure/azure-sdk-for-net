// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PrivateDns.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RecordType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RecordType
    {
        [EnumMember(Value = "A")]
        A,
        [EnumMember(Value = "AAAA")]
        AAAA,
        [EnumMember(Value = "CNAME")]
        CNAME,
        [EnumMember(Value = "MX")]
        MX,
        [EnumMember(Value = "PTR")]
        PTR,
        [EnumMember(Value = "SOA")]
        SOA,
        [EnumMember(Value = "SRV")]
        SRV,
        [EnumMember(Value = "TXT")]
        TXT
    }
    internal static class RecordTypeEnumExtension
    {
        internal static string ToSerializedValue(this RecordType? value)
        {
            return value == null ? null : ((RecordType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RecordType value)
        {
            switch( value )
            {
                case RecordType.A:
                    return "A";
                case RecordType.AAAA:
                    return "AAAA";
                case RecordType.CNAME:
                    return "CNAME";
                case RecordType.MX:
                    return "MX";
                case RecordType.PTR:
                    return "PTR";
                case RecordType.SOA:
                    return "SOA";
                case RecordType.SRV:
                    return "SRV";
                case RecordType.TXT:
                    return "TXT";
            }
            return null;
        }

        internal static RecordType? ParseRecordType(this string value)
        {
            switch( value )
            {
                case "A":
                    return RecordType.A;
                case "AAAA":
                    return RecordType.AAAA;
                case "CNAME":
                    return RecordType.CNAME;
                case "MX":
                    return RecordType.MX;
                case "PTR":
                    return RecordType.PTR;
                case "SOA":
                    return RecordType.SOA;
                case "SRV":
                    return RecordType.SRV;
                case "TXT":
                    return RecordType.TXT;
            }
            return null;
        }
    }
}
