// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.PrivateDns.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a DNS record set (a collection of DNS records with the same
    /// name and type) in a Private DNS zone.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RecordSet : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>
        public RecordSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecordSet class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the resource.
        /// Example -
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateDnsZoneName}'.</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Example -
        /// 'Microsoft.Network/privateDnsZones'.</param>
        /// <param name="etag">The ETag of the record set.</param>
        /// <param name="metadata">The metadata attached to the record
        /// set.</param>
        /// <param name="ttl">The TTL (time-to-live) of the records in the
        /// record set.</param>
        /// <param name="fqdn">Fully qualified domain name of the record
        /// set.</param>
        /// <param name="isAutoRegistered">Is the record set auto-registered in
        /// the Private DNS zone through a virtual network link?</param>
        /// <param name="aRecords">The list of A records in the record
        /// set.</param>
        /// <param name="aaaaRecords">The list of AAAA records in the record
        /// set.</param>
        /// <param name="cnameRecord">The CNAME record in the record
        /// set.</param>
        /// <param name="mxRecords">The list of MX records in the record
        /// set.</param>
        /// <param name="ptrRecords">The list of PTR records in the record
        /// set.</param>
        /// <param name="soaRecord">The SOA record in the record set.</param>
        /// <param name="srvRecords">The list of SRV records in the record
        /// set.</param>
        /// <param name="txtRecords">The list of TXT records in the record
        /// set.</param>
        public RecordSet(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), IDictionary<string, string> metadata = default(IDictionary<string, string>), long? ttl = default(long?), string fqdn = default(string), bool? isAutoRegistered = default(bool?), IList<ARecord> aRecords = default(IList<ARecord>), IList<AaaaRecord> aaaaRecords = default(IList<AaaaRecord>), CnameRecord cnameRecord = default(CnameRecord), IList<MxRecord> mxRecords = default(IList<MxRecord>), IList<PtrRecord> ptrRecords = default(IList<PtrRecord>), SoaRecord soaRecord = default(SoaRecord), IList<SrvRecord> srvRecords = default(IList<SrvRecord>), IList<TxtRecord> txtRecords = default(IList<TxtRecord>))
            : base(id, name, type)
        {
            Etag = etag;
            Metadata = metadata;
            Ttl = ttl;
            Fqdn = fqdn;
            IsAutoRegistered = isAutoRegistered;
            ARecords = aRecords;
            AaaaRecords = aaaaRecords;
            CnameRecord = cnameRecord;
            MxRecords = mxRecords;
            PtrRecords = ptrRecords;
            SoaRecord = soaRecord;
            SrvRecords = srvRecords;
            TxtRecords = txtRecords;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ETag of the record set.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the metadata attached to the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the TTL (time-to-live) of the records in the record
        /// set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ttl")]
        public long? Ttl { get; set; }

        /// <summary>
        /// Gets fully qualified domain name of the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fqdn")]
        public string Fqdn { get; private set; }

        /// <summary>
        /// Gets is the record set auto-registered in the Private DNS zone
        /// through a virtual network link?
        /// </summary>
        [JsonProperty(PropertyName = "properties.isAutoRegistered")]
        public bool? IsAutoRegistered { get; private set; }

        /// <summary>
        /// Gets or sets the list of A records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aRecords")]
        public IList<ARecord> ARecords { get; set; }

        /// <summary>
        /// Gets or sets the list of AAAA records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aaaaRecords")]
        public IList<AaaaRecord> AaaaRecords { get; set; }

        /// <summary>
        /// Gets or sets the CNAME record in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.cnameRecord")]
        public CnameRecord CnameRecord { get; set; }

        /// <summary>
        /// Gets or sets the list of MX records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mxRecords")]
        public IList<MxRecord> MxRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of PTR records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ptrRecords")]
        public IList<PtrRecord> PtrRecords { get; set; }

        /// <summary>
        /// Gets or sets the SOA record in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.soaRecord")]
        public SoaRecord SoaRecord { get; set; }

        /// <summary>
        /// Gets or sets the list of SRV records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.srvRecords")]
        public IList<SrvRecord> SrvRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of TXT records in the record set.
        /// </summary>
        [JsonProperty(PropertyName = "properties.txtRecords")]
        public IList<TxtRecord> TxtRecords { get; set; }

    }
}
