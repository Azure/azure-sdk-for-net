// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.WorkloadMonitor.Models
{
    /// <summary> One of health states - healthy, critical, warning, unknown, none, disabled. </summary>
    public readonly partial struct HealthState : IEquatable<HealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HealthyValue = "Healthy";
        private const string CriticalValue = "Critical";
        private const string WarningValue = "Warning";
        private const string UnknownValue = "Unknown";
        private const string DisabledValue = "Disabled";
        private const string NoneValue = "None";

        /// <summary> Healthy. </summary>
        public static HealthState Healthy { get; } = new HealthState(HealthyValue);
        /// <summary> Critical. </summary>
        public static HealthState Critical { get; } = new HealthState(CriticalValue);
        /// <summary> Warning. </summary>
        public static HealthState Warning { get; } = new HealthState(WarningValue);
        /// <summary> Unknown. </summary>
        public static HealthState Unknown { get; } = new HealthState(UnknownValue);
        /// <summary> Disabled. </summary>
        public static HealthState Disabled { get; } = new HealthState(DisabledValue);
        /// <summary> None. </summary>
        public static HealthState None { get; } = new HealthState(NoneValue);
        /// <summary> Determines if two <see cref="HealthState"/> values are the same. </summary>
        public static bool operator ==(HealthState left, HealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthState"/> values are not the same. </summary>
        public static bool operator !=(HealthState left, HealthState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthState"/>. </summary>
        public static implicit operator HealthState(string value) => new HealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
