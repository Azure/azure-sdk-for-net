// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadMonitor.Models;

namespace Azure.ResourceManager.WorkloadMonitor
{
    public partial class HealthMonitorStateChangeData
    {
        internal static HealthMonitorStateChangeData DeserializeHealthMonitorStateChangeData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> monitorName = default;
            Optional<string> monitorType = default;
            Optional<string> monitoredObject = default;
            Optional<string> evaluationTimestamp = default;
            Optional<string> currentStateFirstObservedTimestamp = default;
            Optional<HealthState> previousMonitorState = default;
            Optional<HealthState> currentMonitorState = default;
            Optional<BinaryData> evidence = default;
            Optional<BinaryData> monitorConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("monitorName"))
                        {
                            monitorName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("monitorType"))
                        {
                            monitorType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("monitoredObject"))
                        {
                            monitoredObject = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("evaluationTimestamp"))
                        {
                            evaluationTimestamp = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("currentStateFirstObservedTimestamp"))
                        {
                            currentStateFirstObservedTimestamp = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("previousMonitorState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            previousMonitorState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currentMonitorState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            currentMonitorState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("evidence"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            evidence = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("monitorConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            monitorConfiguration = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HealthMonitorStateChangeData(id, name, type, systemData.Value, monitorName.Value, monitorType.Value, monitoredObject.Value, evaluationTimestamp.Value, currentStateFirstObservedTimestamp.Value, Optional.ToNullable(previousMonitorState), Optional.ToNullable(currentMonitorState), evidence.Value, monitorConfiguration.Value);
        }
    }
}
