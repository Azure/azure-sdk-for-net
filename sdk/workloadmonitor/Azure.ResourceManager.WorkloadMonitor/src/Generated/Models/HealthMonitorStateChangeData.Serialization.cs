// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadMonitor.Models;

namespace Azure.ResourceManager.WorkloadMonitor
{
    public partial class HealthMonitorStateChangeData : IUtf8JsonSerializable, IJsonModel<HealthMonitorStateChangeData>, IPersistableModel<HealthMonitorStateChangeData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HealthMonitorStateChangeData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<HealthMonitorStateChangeData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthMonitorStateChangeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HealthMonitorStateChangeData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MonitorName))
            {
                writer.WritePropertyName("monitorName"u8);
                writer.WriteStringValue(MonitorName);
            }
            if (Optional.IsDefined(MonitorType))
            {
                writer.WritePropertyName("monitorType"u8);
                writer.WriteStringValue(MonitorType);
            }
            if (Optional.IsDefined(MonitoredObject))
            {
                writer.WritePropertyName("monitoredObject"u8);
                writer.WriteStringValue(MonitoredObject);
            }
            if (Optional.IsDefined(EvaluationTimestamp))
            {
                writer.WritePropertyName("evaluationTimestamp"u8);
                writer.WriteStringValue(EvaluationTimestamp);
            }
            if (Optional.IsDefined(CurrentStateFirstObservedTimestamp))
            {
                writer.WritePropertyName("currentStateFirstObservedTimestamp"u8);
                writer.WriteStringValue(CurrentStateFirstObservedTimestamp);
            }
            if (options.Format != "W" && Optional.IsDefined(PreviousMonitorState))
            {
                writer.WritePropertyName("previousMonitorState"u8);
                writer.WriteStringValue(PreviousMonitorState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentMonitorState))
            {
                writer.WritePropertyName("currentMonitorState"u8);
                writer.WriteStringValue(CurrentMonitorState.Value.ToString());
            }
            if (Optional.IsDefined(Evidence))
            {
                writer.WritePropertyName("evidence"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Evidence);
#else
                using (JsonDocument document = JsonDocument.Parse(Evidence))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(MonitorConfiguration))
            {
                writer.WritePropertyName("monitorConfiguration"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(MonitorConfiguration);
#else
                using (JsonDocument document = JsonDocument.Parse(MonitorConfiguration))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        HealthMonitorStateChangeData IJsonModel<HealthMonitorStateChangeData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthMonitorStateChangeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HealthMonitorStateChangeData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHealthMonitorStateChangeData(document.RootElement, options);
        }

        internal static HealthMonitorStateChangeData DeserializeHealthMonitorStateChangeData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> monitorName = default;
            Optional<string> monitorType = default;
            Optional<string> monitoredObject = default;
            Optional<string> evaluationTimestamp = default;
            Optional<string> currentStateFirstObservedTimestamp = default;
            Optional<HealthState> previousMonitorState = default;
            Optional<HealthState> currentMonitorState = default;
            Optional<BinaryData> evidence = default;
            Optional<BinaryData> monitorConfiguration = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("monitorName"u8))
                        {
                            monitorName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("monitorType"u8))
                        {
                            monitorType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("monitoredObject"u8))
                        {
                            monitoredObject = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("evaluationTimestamp"u8))
                        {
                            evaluationTimestamp = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("currentStateFirstObservedTimestamp"u8))
                        {
                            currentStateFirstObservedTimestamp = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("previousMonitorState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            previousMonitorState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currentMonitorState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currentMonitorState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("evidence"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            evidence = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("monitorConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monitorConfiguration = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new HealthMonitorStateChangeData(id, name, type, systemData.Value, monitorName.Value, monitorType.Value, monitoredObject.Value, evaluationTimestamp.Value, currentStateFirstObservedTimestamp.Value, Optional.ToNullable(previousMonitorState), Optional.ToNullable(currentMonitorState), evidence.Value, monitorConfiguration.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(MonitorName))
            {
                builder.Append("  monitorName:");
                builder.AppendLine($" '{MonitorName}'");
            }

            if (Optional.IsDefined(MonitorType))
            {
                builder.Append("  monitorType:");
                builder.AppendLine($" '{MonitorType}'");
            }

            if (Optional.IsDefined(MonitoredObject))
            {
                builder.Append("  monitoredObject:");
                builder.AppendLine($" '{MonitoredObject}'");
            }

            if (Optional.IsDefined(EvaluationTimestamp))
            {
                builder.Append("  evaluationTimestamp:");
                builder.AppendLine($" '{EvaluationTimestamp}'");
            }

            if (Optional.IsDefined(CurrentStateFirstObservedTimestamp))
            {
                builder.Append("  currentStateFirstObservedTimestamp:");
                builder.AppendLine($" '{CurrentStateFirstObservedTimestamp}'");
            }

            if (Optional.IsDefined(PreviousMonitorState))
            {
                builder.Append("  previousMonitorState:");
                builder.AppendLine($" '{PreviousMonitorState.ToString()}'");
            }

            if (Optional.IsDefined(CurrentMonitorState))
            {
                builder.Append("  currentMonitorState:");
                builder.AppendLine($" '{CurrentMonitorState.ToString()}'");
            }

            if (Optional.IsDefined(Evidence))
            {
                builder.Append("  evidence:");
                builder.AppendLine($" '{Evidence.ToString()}'");
            }

            if (Optional.IsDefined(MonitorConfiguration))
            {
                builder.Append("  monitorConfiguration:");
                builder.AppendLine($" '{MonitorConfiguration.ToString()}'");
            }

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                builder.AppendLine($" '{Name}'");
            }

            if (Optional.IsDefined(ResourceType))
            {
                builder.Append("  type:");
                builder.AppendLine($" '{ResourceType.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<HealthMonitorStateChangeData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthMonitorStateChangeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(HealthMonitorStateChangeData)} does not support '{options.Format}' format.");
            }
        }

        HealthMonitorStateChangeData IPersistableModel<HealthMonitorStateChangeData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthMonitorStateChangeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHealthMonitorStateChangeData(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(HealthMonitorStateChangeData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<HealthMonitorStateChangeData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
