// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadMonitor.Models;

namespace Azure.ResourceManager.WorkloadMonitor
{
    /// <summary>
    /// A class representing the HealthMonitor data model.
    /// Information about the monitorâ€™s current health status.
    /// </summary>
    public partial class HealthMonitorData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="HealthMonitorData"/>. </summary>
        internal HealthMonitorData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HealthMonitorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="monitorName"> Human-readable name of the monitor. </param>
        /// <param name="monitorType"> Type of the monitor. </param>
        /// <param name="monitoredObject"> Dynamic monitored object of the monitor. </param>
        /// <param name="parentMonitorName"> Name of the parent monitor. </param>
        /// <param name="previousMonitorState"> Previous health state of the monitor. </param>
        /// <param name="currentMonitorState"> Current health state of the monitor. </param>
        /// <param name="evaluationTimestamp"> Timestamp of the monitor's last health evaluation. </param>
        /// <param name="currentStateFirstObservedTimestamp"> Timestamp of the monitor's last health state change. </param>
        /// <param name="lastReportedTimestamp"> Timestamp of the monitor's last reported health state. </param>
        /// <param name="evidence"> Evidence validating the monitor's current health state. </param>
        /// <param name="monitorConfiguration"> The configuration settings at the time of the monitor's health evaluation. </param>
        internal HealthMonitorData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string monitorName, string monitorType, string monitoredObject, string parentMonitorName, HealthState? previousMonitorState, HealthState? currentMonitorState, string evaluationTimestamp, string currentStateFirstObservedTimestamp, string lastReportedTimestamp, BinaryData evidence, BinaryData monitorConfiguration) : base(id, name, resourceType, systemData)
        {
            MonitorName = monitorName;
            MonitorType = monitorType;
            MonitoredObject = monitoredObject;
            ParentMonitorName = parentMonitorName;
            PreviousMonitorState = previousMonitorState;
            CurrentMonitorState = currentMonitorState;
            EvaluationTimestamp = evaluationTimestamp;
            CurrentStateFirstObservedTimestamp = currentStateFirstObservedTimestamp;
            LastReportedTimestamp = lastReportedTimestamp;
            Evidence = evidence;
            MonitorConfiguration = monitorConfiguration;
        }

        /// <summary> Human-readable name of the monitor. </summary>
        public string MonitorName { get; }
        /// <summary> Type of the monitor. </summary>
        public string MonitorType { get; }
        /// <summary> Dynamic monitored object of the monitor. </summary>
        public string MonitoredObject { get; }
        /// <summary> Name of the parent monitor. </summary>
        public string ParentMonitorName { get; }
        /// <summary> Previous health state of the monitor. </summary>
        public HealthState? PreviousMonitorState { get; }
        /// <summary> Current health state of the monitor. </summary>
        public HealthState? CurrentMonitorState { get; }
        /// <summary> Timestamp of the monitor's last health evaluation. </summary>
        public string EvaluationTimestamp { get; }
        /// <summary> Timestamp of the monitor's last health state change. </summary>
        public string CurrentStateFirstObservedTimestamp { get; }
        /// <summary> Timestamp of the monitor's last reported health state. </summary>
        public string LastReportedTimestamp { get; }
        /// <summary>
        /// Evidence validating the monitor's current health state.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Evidence { get; }
        /// <summary>
        /// The configuration settings at the time of the monitor's health evaluation.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData MonitorConfiguration { get; }
    }
}
