// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.WorkloadMonitor
{
    /// <summary>
    /// A Class representing a HealthMonitorStateChange along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="HealthMonitorStateChangeResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetHealthMonitorStateChangeResource method.
    /// Otherwise you can get one from its parent resource <see cref="HealthMonitorResource"/> using the GetHealthMonitorStateChange method.
    /// </summary>
    public partial class HealthMonitorStateChangeResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="HealthMonitorStateChangeResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="providerName"> The providerName. </param>
        /// <param name="resourceCollectionName"> The resourceCollectionName. </param>
        /// <param name="resourceName"> The resourceName. </param>
        /// <param name="monitorId"> The monitorId. </param>
        /// <param name="timestampUnix"> The timestampUnix. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string providerName, string resourceCollectionName, string resourceName, string monitorId, string timestampUnix)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _healthMonitorStateChangeHealthMonitorsClientDiagnostics;
        private readonly HealthMonitorsRestOperations _healthMonitorStateChangeHealthMonitorsRestClient;
        private readonly HealthMonitorStateChangeData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.WorkloadMonitor/monitors/history";

        /// <summary> Initializes a new instance of the <see cref="HealthMonitorStateChangeResource"/> class for mocking. </summary>
        protected HealthMonitorStateChangeResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HealthMonitorStateChangeResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal HealthMonitorStateChangeResource(ArmClient client, HealthMonitorStateChangeData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="HealthMonitorStateChangeResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal HealthMonitorStateChangeResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _healthMonitorStateChangeHealthMonitorsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.WorkloadMonitor", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string healthMonitorStateChangeHealthMonitorsApiVersion);
            _healthMonitorStateChangeHealthMonitorsRestClient = new HealthMonitorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, healthMonitorStateChangeHealthMonitorsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual HealthMonitorStateChangeData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthMonitors_GetStateChange</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<HealthMonitorStateChangeResource>> GetAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _healthMonitorStateChangeHealthMonitorsClientDiagnostics.CreateScope("HealthMonitorStateChangeResource.Get");
            scope.Start();
            try
            {
                var response = await _healthMonitorStateChangeHealthMonitorsRestClient.GetStateChangeAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.ResourceType.Namespace, Id.Parent.Parent.ResourceType.GetLastType(), Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HealthMonitorStateChangeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the health state change of a monitor of a virtual machine at the provided timestamp. Optional parameter: $expand (retrieve the monitor's evidence and configuration).
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthMonitors_GetStateChange</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="expand"> Optionally expand the monitor’s evidence and/or configuration. Example: $expand=evidence,configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<HealthMonitorStateChangeResource> Get(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _healthMonitorStateChangeHealthMonitorsClientDiagnostics.CreateScope("HealthMonitorStateChangeResource.Get");
            scope.Start();
            try
            {
                var response = _healthMonitorStateChangeHealthMonitorsRestClient.GetStateChange(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.ResourceType.Namespace, Id.Parent.Parent.ResourceType.GetLastType(), Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, expand, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HealthMonitorStateChangeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
