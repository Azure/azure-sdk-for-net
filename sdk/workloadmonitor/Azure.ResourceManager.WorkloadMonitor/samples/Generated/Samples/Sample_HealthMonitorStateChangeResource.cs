// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.WorkloadMonitor;

namespace Azure.ResourceManager.WorkloadMonitor.Samples
{
    public partial class Sample_HealthMonitorStateChangeResource
    {
        // Get monitor state change with default values
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMonitorStateChangeWithDefaultValues()
        {
            // Generated from example definition: specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetDefault.json
            // this example is just showing the usage of "HealthMonitors_GetStateChange" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HealthMonitorStateChangeResource created on azure
            // for more information of creating HealthMonitorStateChangeResource, please refer to the document of HealthMonitorStateChangeResource
            string subscriptionId = "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21";
            string resourceGroupName = "tugamidiAlerts";
            string providerName = "Microsoft.Compute";
            string resourceCollectionName = "virtualMachines";
            string resourceName = "linuxEUS";
            string monitorId = "logical-disks|C@3A";
            string timestampUnix = "1584316800";
            ResourceIdentifier healthMonitorStateChangeResourceId = HealthMonitorStateChangeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix);
            HealthMonitorStateChangeResource healthMonitorStateChange = client.GetHealthMonitorStateChangeResource(healthMonitorStateChangeResourceId);

            // invoke the operation
            HealthMonitorStateChangeResource result = await healthMonitorStateChange.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HealthMonitorStateChangeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get monitor state change with expanded values
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMonitorStateChangeWithExpandedValues()
        {
            // Generated from example definition: specification/workloadmonitor/resource-manager/Microsoft.WorkloadMonitor/preview/2020-01-13-preview/examples/MonitorStateChange_GetExpanded.json
            // this example is just showing the usage of "HealthMonitors_GetStateChange" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HealthMonitorStateChangeResource created on azure
            // for more information of creating HealthMonitorStateChangeResource, please refer to the document of HealthMonitorStateChangeResource
            string subscriptionId = "bc27da3b-3ba2-4e00-a6ec-1fde64aa1e21";
            string resourceGroupName = "tugamidiAlerts";
            string providerName = "Microsoft.Compute";
            string resourceCollectionName = "virtualMachines";
            string resourceName = "linuxEUS";
            string monitorId = "logical-disks|C@3A";
            string timestampUnix = "1584316800";
            ResourceIdentifier healthMonitorStateChangeResourceId = HealthMonitorStateChangeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, providerName, resourceCollectionName, resourceName, monitorId, timestampUnix);
            HealthMonitorStateChangeResource healthMonitorStateChange = client.GetHealthMonitorStateChangeResource(healthMonitorStateChangeResourceId);

            // invoke the operation
            string expand = "evidence";
            HealthMonitorStateChangeResource result = await healthMonitorStateChange.GetAsync(expand: expand);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HealthMonitorStateChangeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
