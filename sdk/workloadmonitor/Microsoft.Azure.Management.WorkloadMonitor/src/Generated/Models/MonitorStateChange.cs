// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WorkloadMonitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Monitor State Change
    /// </summary>
    /// <remarks>
    /// Information about a state transition of a monitor.
    /// </remarks>
    [Rest.Serialization.JsonTransformation]
    public partial class MonitorStateChange : Resource
    {
        /// <summary>
        /// Initializes a new instance of the MonitorStateChange class.
        /// </summary>
        public MonitorStateChange()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MonitorStateChange class.
        /// </summary>
        /// <param name="id">Arm ID</param>
        /// <param name="name">Url-encoded monitor name</param>
        /// <param name="type">Resource type</param>
        /// <param name="monitorName">Monitor Name</param>
        /// <param name="monitorType">Monitor Type</param>
        /// <param name="monitoredObject">Monitored Object</param>
        /// <param name="evaluationTimestamp">Timestamp</param>
        /// <param name="currentStateFirstObservedTimestamp">Timestamp</param>
        /// <param name="previousMonitorState">Previous Health State</param>
        /// <param name="currentMonitorState">New Health State</param>
        /// <param name="evidence">Evidence</param>
        /// <param name="monitorConfiguration">Configuration</param>
        public MonitorStateChange(string id = default(string), string name = default(string), string type = default(string), string monitorName = default(string), string monitorType = default(string), string monitoredObject = default(string), string evaluationTimestamp = default(string), string currentStateFirstObservedTimestamp = default(string), string previousMonitorState = default(string), string currentMonitorState = default(string), object evidence = default(object), object monitorConfiguration = default(object))
            : base(id, name, type)
        {
            MonitorName = monitorName;
            MonitorType = monitorType;
            MonitoredObject = monitoredObject;
            EvaluationTimestamp = evaluationTimestamp;
            CurrentStateFirstObservedTimestamp = currentStateFirstObservedTimestamp;
            PreviousMonitorState = previousMonitorState;
            CurrentMonitorState = currentMonitorState;
            Evidence = evidence;
            MonitorConfiguration = monitorConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets monitor Name
        /// </summary>
        /// <remarks>
        /// Human-readable name of this monitor.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.monitorName")]
        public string MonitorName { get; set; }

        /// <summary>
        /// Gets or sets monitor Type
        /// </summary>
        /// <remarks>
        /// Type of this monitor.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.monitorType")]
        public string MonitorType { get; set; }

        /// <summary>
        /// Gets or sets monitored Object
        /// </summary>
        /// <remarks>
        /// Dynamic monitored object of this monitor.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.monitoredObject")]
        public string MonitoredObject { get; set; }

        /// <summary>
        /// Gets or sets timestamp
        /// </summary>
        /// <remarks>
        /// Timestamp of that this event ocurred.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.evaluationTimestamp")]
        public string EvaluationTimestamp { get; set; }

        /// <summary>
        /// Gets or sets timestamp
        /// </summary>
        /// <remarks>
        /// Timestamp of that this health state first ocurred.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.currentStateFirstObservedTimestamp")]
        public string CurrentStateFirstObservedTimestamp { get; set; }

        /// <summary>
        /// Gets or sets previous Health State
        /// </summary>
        /// <remarks>
        /// Previous health state. Possible values include: 'Healthy',
        /// 'Critical', 'Warning', 'Unknown'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.previousMonitorState")]
        public string PreviousMonitorState { get; set; }

        /// <summary>
        /// Gets or sets new Health State
        /// </summary>
        /// <remarks>
        /// New health state. Possible values include: 'Healthy', 'Critical',
        /// 'Warning', 'Unknown'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.currentMonitorState")]
        public string CurrentMonitorState { get; set; }

        /// <summary>
        /// Gets or sets evidence
        /// </summary>
        /// <remarks>
        /// Evidence of this monitor's last state change.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.evidence")]
        public object Evidence { get; set; }

        /// <summary>
        /// Gets or sets configuration
        /// </summary>
        /// <remarks>
        /// Configuration settings at the time of this monitor's last state
        /// change.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.monitorConfiguration")]
        public object MonitorConfiguration { get; set; }

    }
}
