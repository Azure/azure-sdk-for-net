// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    public partial class NeonProjectProperties : IUtf8JsonSerializable, IJsonModel<NeonProjectProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NeonProjectProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<NeonProjectProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NeonProjectProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NeonProjectProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(EntityId))
            {
                writer.WritePropertyName("entityId"u8);
                writer.WriteStringValue(EntityId);
            }
            if (Optional.IsDefined(EntityName))
            {
                writer.WritePropertyName("entityName"u8);
                writer.WriteStringValue(EntityName);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedAt))
            {
                writer.WritePropertyName("createdAt"u8);
                writer.WriteStringValue(CreatedAt);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Attribute))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteStartArray();
                foreach (var item in Attribute)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RegionId))
            {
                writer.WritePropertyName("regionId"u8);
                writer.WriteStringValue(RegionId);
            }
            if (Optional.IsDefined(Storage))
            {
                writer.WritePropertyName("storage"u8);
                writer.WriteNumberValue(Storage.Value);
            }
            if (Optional.IsDefined(PostgresVersion))
            {
                writer.WritePropertyName("pgVersion"u8);
                writer.WriteNumberValue(PostgresVersion.Value);
            }
            if (Optional.IsDefined(HistoryRetention))
            {
                writer.WritePropertyName("historyRetention"u8);
                writer.WriteNumberValue(HistoryRetention.Value);
            }
            if (Optional.IsDefined(DefaultEndpointSettings))
            {
                writer.WritePropertyName("defaultEndpointSettings"u8);
                writer.WriteObjectValue(DefaultEndpointSettings, options);
            }
            if (Optional.IsDefined(Branch))
            {
                writer.WritePropertyName("branch"u8);
                writer.WriteObjectValue(Branch, options);
            }
            if (Optional.IsCollectionDefined(Roles))
            {
                writer.WritePropertyName("roles"u8);
                writer.WriteStartArray();
                foreach (var item in Roles)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Databases))
            {
                writer.WritePropertyName("databases"u8);
                writer.WriteStartArray();
                foreach (var item in Databases)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Endpoints))
            {
                writer.WritePropertyName("endpoints"u8);
                writer.WriteStartArray();
                foreach (var item in Endpoints)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        NeonProjectProperties IJsonModel<NeonProjectProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NeonProjectProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NeonProjectProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNeonProjectProperties(document.RootElement, options);
        }

        internal static NeonProjectProperties DeserializeNeonProjectProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string entityId = default;
            string entityName = default;
            string createdAt = default;
            NeonResourceProvisioningState? provisioningState = default;
            IList<Attributes> attributes = default;
            string regionId = default;
            long? storage = default;
            int? pgVersion = default;
            int? historyRetention = default;
            DefaultEndpointSettings defaultEndpointSettings = default;
            NeonBranchProperties branch = default;
            IList<NeonRoleProperties> roles = default;
            IList<NeonDatabaseProperties> databases = default;
            IList<NeonEndpointProperties> endpoints = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("entityId"u8))
                {
                    entityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityName"u8))
                {
                    entityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdAt"u8))
                {
                    createdAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new NeonResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Attributes> array = new List<Attributes>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Attributes.DeserializeAttributes(item, options));
                    }
                    attributes = array;
                    continue;
                }
                if (property.NameEquals("regionId"u8))
                {
                    regionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("pgVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pgVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("historyRetention"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    historyRetention = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("defaultEndpointSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultEndpointSettings = DefaultEndpointSettings.DeserializeDefaultEndpointSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("branch"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    branch = NeonBranchProperties.DeserializeNeonBranchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("roles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NeonRoleProperties> array = new List<NeonRoleProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NeonRoleProperties.DeserializeNeonRoleProperties(item, options));
                    }
                    roles = array;
                    continue;
                }
                if (property.NameEquals("databases"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NeonDatabaseProperties> array = new List<NeonDatabaseProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NeonDatabaseProperties.DeserializeNeonDatabaseProperties(item, options));
                    }
                    databases = array;
                    continue;
                }
                if (property.NameEquals("endpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NeonEndpointProperties> array = new List<NeonEndpointProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NeonEndpointProperties.DeserializeNeonEndpointProperties(item, options));
                    }
                    endpoints = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new NeonProjectProperties(
                entityId,
                entityName,
                createdAt,
                provisioningState,
                attributes ?? new ChangeTrackingList<Attributes>(),
                regionId,
                storage,
                pgVersion,
                historyRetention,
                defaultEndpointSettings,
                branch,
                roles ?? new ChangeTrackingList<NeonRoleProperties>(),
                databases ?? new ChangeTrackingList<NeonDatabaseProperties>(),
                endpoints ?? new ChangeTrackingList<NeonEndpointProperties>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NeonProjectProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NeonProjectProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerNeonPostgresContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NeonProjectProperties)} does not support writing '{options.Format}' format.");
            }
        }

        NeonProjectProperties IPersistableModel<NeonProjectProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NeonProjectProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeNeonProjectProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NeonProjectProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<NeonProjectProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
