// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary>
    /// Preflight check parameters for branch and child resources.
    ///
    /// IMPORTANT: Only one of the property types (branchProperties, roleProperties, databaseProperties,
    /// or endpointProperties) should be provided at a time, based on the entityType value:
    /// - When entityType is "branch", provide only branchProperties
    /// - When entityType is "role", provide only roleProperties
    /// - When entityType is "database", provide only databaseProperties
    /// - When entityType is "endpoint", provide only endpointProperties
    /// </summary>
    public partial class PreflightCheckContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PreflightCheckContent"/>. </summary>
        /// <param name="projectId"> Project Id associated with this connection. </param>
        /// <param name="branchId"> Branch Id associated with this connection. </param>
        /// <param name="entityType"> Entity type to be validated for deletion. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectId"/> or <paramref name="branchId"/> is null. </exception>
        public PreflightCheckContent(string projectId, string branchId, PreflightCheckEntityType entityType)
        {
            Argument.AssertNotNull(projectId, nameof(projectId));
            Argument.AssertNotNull(branchId, nameof(branchId));

            ProjectId = projectId;
            BranchId = branchId;
            EntityType = entityType;
        }

        /// <summary> Initializes a new instance of <see cref="PreflightCheckContent"/>. </summary>
        /// <param name="projectId"> Project Id associated with this connection. </param>
        /// <param name="branchId"> Branch Id associated with this connection. </param>
        /// <param name="entityType"> Entity type to be validated for deletion. </param>
        /// <param name="branchProperties"> The branch properties - ONLY provided when entityType is 'branch'. </param>
        /// <param name="roleProperties"> The role properties - ONLY provided when entityType is 'role'. </param>
        /// <param name="databaseProperties"> The database properties - ONLY provided when entityType is 'database'. </param>
        /// <param name="endpointProperties"> The endpoint properties - ONLY provided when entityType is 'endpoint'. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PreflightCheckContent(string projectId, string branchId, PreflightCheckEntityType entityType, NeonBranchProperties branchProperties, NeonRoleProperties roleProperties, NeonDatabaseProperties databaseProperties, NeonEndpointProperties endpointProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProjectId = projectId;
            BranchId = branchId;
            EntityType = entityType;
            BranchProperties = branchProperties;
            RoleProperties = roleProperties;
            DatabaseProperties = databaseProperties;
            EndpointProperties = endpointProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PreflightCheckContent"/> for deserialization. </summary>
        internal PreflightCheckContent()
        {
        }

        /// <summary> Project Id associated with this connection. </summary>
        public string ProjectId { get; }
        /// <summary> Branch Id associated with this connection. </summary>
        public string BranchId { get; }
        /// <summary> Entity type to be validated for deletion. </summary>
        public PreflightCheckEntityType EntityType { get; }
        /// <summary> The branch properties - ONLY provided when entityType is 'branch'. </summary>
        public NeonBranchProperties BranchProperties { get; set; }
        /// <summary> The role properties - ONLY provided when entityType is 'role'. </summary>
        public NeonRoleProperties RoleProperties { get; set; }
        /// <summary> The database properties - ONLY provided when entityType is 'database'. </summary>
        public NeonDatabaseProperties DatabaseProperties { get; set; }
        /// <summary> The endpoint properties - ONLY provided when entityType is 'endpoint'. </summary>
        public NeonEndpointProperties EndpointProperties { get; set; }
    }
}
