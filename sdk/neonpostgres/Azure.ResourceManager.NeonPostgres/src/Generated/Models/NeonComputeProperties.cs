// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary> Properties specific to Compute. </summary>
    public partial class NeonComputeProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NeonComputeProperties"/>. </summary>
        internal NeonComputeProperties()
        {
            Attributes = new ChangeTrackingList<Attributes>();
        }

        /// <summary> Initializes a new instance of <see cref="NeonComputeProperties"/>. </summary>
        /// <param name="entityId"> Unique identifier for the entity. </param>
        /// <param name="entityName"> Name of the resource. </param>
        /// <param name="createdAt"> Timestamp indicating when the entity was created. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="attributes"> Additional attributes for the entity. </param>
        /// <param name="region"> Region where the compute instance is located. </param>
        /// <param name="cpuCores"> Number of allocated CPU cores. </param>
        /// <param name="memory"> Memory allocated in GB. </param>
        /// <param name="status"> Current status of the compute instance. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NeonComputeProperties(string entityId, string entityName, string createdAt, NeonResourceProvisioningState? provisioningState, IReadOnlyList<Attributes> attributes, string region, int? cpuCores, int? memory, string status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityId = entityId;
            EntityName = entityName;
            CreatedAt = createdAt;
            ProvisioningState = provisioningState;
            Attributes = attributes;
            Region = region;
            CpuCores = cpuCores;
            Memory = memory;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique identifier for the entity. </summary>
        public string EntityId { get; }
        /// <summary> Name of the resource. </summary>
        public string EntityName { get; }
        /// <summary> Timestamp indicating when the entity was created. </summary>
        public string CreatedAt { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public NeonResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Additional attributes for the entity. </summary>
        public IReadOnlyList<Attributes> Attributes { get; }
        /// <summary> Region where the compute instance is located. </summary>
        public string Region { get; }
        /// <summary> Number of allocated CPU cores. </summary>
        public int? CpuCores { get; }
        /// <summary> Memory allocated in GB. </summary>
        public int? Memory { get; }
        /// <summary> Current status of the compute instance. </summary>
        public string Status { get; }
    }
}
