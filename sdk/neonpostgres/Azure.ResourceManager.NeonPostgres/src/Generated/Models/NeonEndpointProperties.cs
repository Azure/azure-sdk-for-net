// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary> Properties specific to Endpoints. </summary>
    public partial class NeonEndpointProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NeonEndpointProperties"/>. </summary>
        public NeonEndpointProperties()
        {
            Attributes = new ChangeTrackingList<Attributes>();
        }

        /// <summary> Initializes a new instance of <see cref="NeonEndpointProperties"/>. </summary>
        /// <param name="entityId"> Unique identifier for the entity. </param>
        /// <param name="entityName"> Name of the resource. </param>
        /// <param name="createdAt"> Timestamp indicating when the entity was created. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="attributes"> Additional attributes for the entity. </param>
        /// <param name="projectId"> The ID of the project this endpoint belongs to. </param>
        /// <param name="branchId"> The ID of the branch this endpoint belongs to. </param>
        /// <param name="endpointType"> The type of the endpoint. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NeonEndpointProperties(string entityId, string entityName, string createdAt, NeonResourceProvisioningState? provisioningState, IList<Attributes> attributes, string projectId, string branchId, EndpointType? endpointType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityId = entityId;
            EntityName = entityName;
            CreatedAt = createdAt;
            ProvisioningState = provisioningState;
            Attributes = attributes;
            ProjectId = projectId;
            BranchId = branchId;
            EndpointType = endpointType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique identifier for the entity. </summary>
        public string EntityId { get; }
        /// <summary> Name of the resource. </summary>
        public string EntityName { get; set; }
        /// <summary> Timestamp indicating when the entity was created. </summary>
        public string CreatedAt { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public NeonResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Additional attributes for the entity. </summary>
        public IList<Attributes> Attributes { get; }
        /// <summary> The ID of the project this endpoint belongs to. </summary>
        public string ProjectId { get; set; }
        /// <summary> The ID of the branch this endpoint belongs to. </summary>
        public string BranchId { get; set; }
        /// <summary> The type of the endpoint. </summary>
        public EndpointType? EndpointType { get; set; }
    }
}
