// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary> Entity types allowed for preflight deletion validation. </summary>
    public readonly partial struct PreflightCheckEntityType : IEquatable<PreflightCheckEntityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PreflightCheckEntityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PreflightCheckEntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BranchValue = "branch";
        private const string NeonRoleValue = "neonRole";
        private const string NeonDatabaseValue = "neonDatabase";
        private const string EndpointValue = "endpoint";

        /// <summary> Branch entity. </summary>
        public static PreflightCheckEntityType Branch { get; } = new PreflightCheckEntityType(BranchValue);
        /// <summary> NeonRole entity. </summary>
        public static PreflightCheckEntityType NeonRole { get; } = new PreflightCheckEntityType(NeonRoleValue);
        /// <summary> Database entity. </summary>
        public static PreflightCheckEntityType NeonDatabase { get; } = new PreflightCheckEntityType(NeonDatabaseValue);
        /// <summary> Endpoint entity. </summary>
        public static PreflightCheckEntityType Endpoint { get; } = new PreflightCheckEntityType(EndpointValue);
        /// <summary> Determines if two <see cref="PreflightCheckEntityType"/> values are the same. </summary>
        public static bool operator ==(PreflightCheckEntityType left, PreflightCheckEntityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PreflightCheckEntityType"/> values are not the same. </summary>
        public static bool operator !=(PreflightCheckEntityType left, PreflightCheckEntityType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PreflightCheckEntityType"/>. </summary>
        public static implicit operator PreflightCheckEntityType(string value) => new PreflightCheckEntityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PreflightCheckEntityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PreflightCheckEntityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
