// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary> Connection uri parameters for the associated database. </summary>
    public partial class ConnectionUriProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ConnectionUriProperties"/>. </summary>
        public ConnectionUriProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ConnectionUriProperties"/>. </summary>
        /// <param name="projectId"> Project Id associated with this connection. </param>
        /// <param name="branchId"> Branch Id associated with this connection. </param>
        /// <param name="databaseName"> Database name associated with this connection. </param>
        /// <param name="roleName"> The role name used for authentication. </param>
        /// <param name="endpointId"> the endpoint Id with this connection. </param>
        /// <param name="isPooled"> Indicates if the connection is pooled. </param>
        /// <param name="connectionStringUri"> connection uri returned for the database. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ConnectionUriProperties(string projectId, string branchId, string databaseName, string roleName, string endpointId, bool? isPooled, string connectionStringUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProjectId = projectId;
            BranchId = branchId;
            DatabaseName = databaseName;
            RoleName = roleName;
            EndpointId = endpointId;
            IsPooled = isPooled;
            ConnectionStringUri = connectionStringUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Project Id associated with this connection. </summary>
        public string ProjectId { get; set; }
        /// <summary> Branch Id associated with this connection. </summary>
        public string BranchId { get; set; }
        /// <summary> Database name associated with this connection. </summary>
        public string DatabaseName { get; set; }
        /// <summary> The role name used for authentication. </summary>
        public string RoleName { get; set; }
        /// <summary> the endpoint Id with this connection. </summary>
        public string EndpointId { get; set; }
        /// <summary> Indicates if the connection is pooled. </summary>
        public bool? IsPooled { get; set; }
        /// <summary> connection uri returned for the database. </summary>
        public string ConnectionStringUri { get; }
    }
}
