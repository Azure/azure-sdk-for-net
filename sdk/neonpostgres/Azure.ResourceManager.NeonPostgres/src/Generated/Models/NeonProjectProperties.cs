// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.NeonPostgres.Models
{
    /// <summary> Properties specific to Project. </summary>
    public partial class NeonProjectProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NeonProjectProperties"/>. </summary>
        public NeonProjectProperties()
        {
            Attribute = new ChangeTrackingList<Attributes>();
            Roles = new ChangeTrackingList<NeonRoleProperties>();
            Databases = new ChangeTrackingList<NeonDatabaseProperties>();
            Endpoints = new ChangeTrackingList<NeonEndpointProperties>();
        }

        /// <summary> Initializes a new instance of <see cref="NeonProjectProperties"/>. </summary>
        /// <param name="entityId"> Unique identifier for the entity. </param>
        /// <param name="entityName"> Name of the resource. </param>
        /// <param name="createdAt"> Timestamp indicating when the entity was created. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="attribute"> Additional attributes for the entity. </param>
        /// <param name="regionId"> Region where the project is created. </param>
        /// <param name="storage"> Data Storage bytes per hour for the project. </param>
        /// <param name="postgresVersion"> Postgres version for the project. </param>
        /// <param name="historyRetention"> The retention period for project history in seconds. </param>
        /// <param name="defaultEndpointSettings"> Default endpoint settings for the project. </param>
        /// <param name="branch"> The Branch properties of the project. This is optional. </param>
        /// <param name="roles"> Roles associated with the project. </param>
        /// <param name="databases"> Neon Databases associated with the project. </param>
        /// <param name="endpoints"> Endpoints associated with the project. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NeonProjectProperties(string entityId, string entityName, string createdAt, NeonResourceProvisioningState? provisioningState, IList<Attributes> attribute, string regionId, long? storage, int? postgresVersion, int? historyRetention, DefaultEndpointSettings defaultEndpointSettings, NeonBranchProperties branch, IList<NeonRoleProperties> roles, IList<NeonDatabaseProperties> databases, IList<NeonEndpointProperties> endpoints, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EntityId = entityId;
            EntityName = entityName;
            CreatedAt = createdAt;
            ProvisioningState = provisioningState;
            Attribute = attribute;
            RegionId = regionId;
            Storage = storage;
            PostgresVersion = postgresVersion;
            HistoryRetention = historyRetention;
            DefaultEndpointSettings = defaultEndpointSettings;
            Branch = branch;
            Roles = roles;
            Databases = databases;
            Endpoints = endpoints;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique identifier for the entity. </summary>
        public string EntityId { get; }
        /// <summary> Name of the resource. </summary>
        public string EntityName { get; set; }
        /// <summary> Timestamp indicating when the entity was created. </summary>
        public string CreatedAt { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public NeonResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Additional attributes for the entity. </summary>
        public IList<Attributes> Attribute { get; }
        /// <summary> Region where the project is created. </summary>
        public string RegionId { get; set; }
        /// <summary> Data Storage bytes per hour for the project. </summary>
        public long? Storage { get; set; }
        /// <summary> Postgres version for the project. </summary>
        public int? PostgresVersion { get; set; }
        /// <summary> The retention period for project history in seconds. </summary>
        public int? HistoryRetention { get; set; }
        /// <summary> Default endpoint settings for the project. </summary>
        public DefaultEndpointSettings DefaultEndpointSettings { get; set; }
        /// <summary> The Branch properties of the project. This is optional. </summary>
        public NeonBranchProperties Branch { get; set; }
        /// <summary> Roles associated with the project. </summary>
        public IList<NeonRoleProperties> Roles { get; }
        /// <summary> Neon Databases associated with the project. </summary>
        public IList<NeonDatabaseProperties> Databases { get; }
        /// <summary> Endpoints associated with the project. </summary>
        public IList<NeonEndpointProperties> Endpoints { get; }
    }
}
