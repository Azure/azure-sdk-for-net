// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Insights.Models
{
    using System.Linq;

    /// <summary>
    /// The trigger that results in a scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger() { }

        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        /// <param name="metricName">the name of the metric that defines what
        /// the rule monitors.</param>
        /// <param name="metricResourceUri">the resource identifier of the
        /// resource the rule monitors.</param>
        /// <param name="timeGrain">the granularity of metrics the rule
        /// monitors. Must be one of the predefined values returned from metric
        /// definitions for the metric. Must be between 12 hours and 1
        /// minute.</param>
        /// <param name="statistic">the metric statistic type. How the metrics
        /// from multiple instances are combined. Possible values include:
        /// 'Average', 'Min', 'Max', 'Sum'</param>
        /// <param name="timeWindow">the range of time in which instance data
        /// is collected. This value must be greater than the delay in metric
        /// collection, which can vary from resource-to-resource. Must be
        /// between 12 hours and 5 minutes.</param>
        /// <param name="timeAggregation">time aggregation type. How the data
        /// that is collected should be combined over time. The default value
        /// is Average. Possible values include: 'Average', 'Minimum',
        /// 'Maximum', 'Total', 'Count'</param>
        /// <param name="operatorProperty">the operator that is used to compare
        /// the metric data and the threshold. Possible values include:
        /// 'Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual',
        /// 'LessThan', 'LessThanOrEqual'</param>
        /// <param name="threshold">the threshold of the metric that triggers
        /// the scale action.</param>
        public MetricTrigger(string metricName, string metricResourceUri, System.TimeSpan timeGrain, MetricStatisticType statistic, System.TimeSpan timeWindow, TimeAggregationType timeAggregation, ComparisonOperationType operatorProperty, double threshold)
        {
            MetricName = metricName;
            MetricResourceUri = metricResourceUri;
            TimeGrain = timeGrain;
            Statistic = statistic;
            TimeWindow = timeWindow;
            TimeAggregation = timeAggregation;
            OperatorProperty = operatorProperty;
            Threshold = threshold;
        }

        /// <summary>
        /// Gets or sets the name of the metric that defines what the rule
        /// monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the resource the rule
        /// monitors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricResourceUri")]
        public string MetricResourceUri { get; set; }

        /// <summary>
        /// Gets or sets the granularity of metrics the rule monitors. Must be
        /// one of the predefined values returned from metric definitions for
        /// the metric. Must be between 12 hours and 1 minute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeGrain")]
        public System.TimeSpan TimeGrain { get; set; }

        /// <summary>
        /// Gets or sets the metric statistic type. How the metrics from
        /// multiple instances are combined. Possible values include:
        /// 'Average', 'Min', 'Max', 'Sum'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statistic")]
        public MetricStatisticType Statistic { get; set; }

        /// <summary>
        /// Gets or sets the range of time in which instance data is collected.
        /// This value must be greater than the delay in metric collection,
        /// which can vary from resource-to-resource. Must be between 12 hours
        /// and 5 minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeWindow")]
        public System.TimeSpan TimeWindow { get; set; }

        /// <summary>
        /// Gets or sets time aggregation type. How the data that is collected
        /// should be combined over time. The default value is Average.
        /// Possible values include: 'Average', 'Minimum', 'Maximum', 'Total',
        /// 'Count'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeAggregation")]
        public TimeAggregationType TimeAggregation { get; set; }

        /// <summary>
        /// Gets or sets the operator that is used to compare the metric data
        /// and the threshold. Possible values include: 'Equals', 'NotEquals',
        /// 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public ComparisonOperationType OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets the threshold of the metric that triggers the scale
        /// action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "threshold")]
        public double Threshold { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MetricName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MetricName");
            }
            if (MetricResourceUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MetricResourceUri");
            }
        }
    }
}
