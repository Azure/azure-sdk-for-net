// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Insights.Models;

namespace Azure.ResourceManager.Insights
{
    /// <summary> The LogProfiles service client. </summary>
    public partial class LogProfilesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal LogProfilesRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of LogProfilesOperations for mocking. </summary>
        protected LogProfilesOperations()
        {
        }

        /// <summary> Initializes a new instance of LogProfilesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The Azure subscription Id. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal LogProfilesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new LogProfilesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Deletes the log profile. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string logProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(logProfileName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the log profile. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string logProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(logProfileName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the log profile. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogProfileResource>> GetAsync(string logProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(logProfileName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the log profile. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogProfileResource> Get(string logProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(logProfileName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a log profile in Azure Monitoring REST API. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogProfileResource>> CreateOrUpdateAsync(string logProfileName, LogProfileResource parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.CreateOrUpdate");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateAsync(logProfileName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a log profile in Azure Monitoring REST API. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="parameters"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogProfileResource> CreateOrUpdate(string logProfileName, LogProfileResource parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.CreateOrUpdate");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdate(logProfileName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="logProfilesResource"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogProfileResource>> UpdateAsync(string logProfileName, LogProfileResourcePatch logProfilesResource, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(logProfileName, logProfilesResource, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method. </summary>
        /// <param name="logProfileName"> The name of the log profile. </param>
        /// <param name="logProfilesResource"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogProfileResource> Update(string logProfileName, LogProfileResourcePatch logProfilesResource, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.Update");
            scope.Start();
            try
            {
                return RestClient.Update(logProfileName, logProfilesResource, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the log profiles. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<LogProfileResource> ListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LogProfileResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> List the log profiles. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<LogProfileResource> List(CancellationToken cancellationToken = default)
        {
            Page<LogProfileResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("LogProfilesOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
