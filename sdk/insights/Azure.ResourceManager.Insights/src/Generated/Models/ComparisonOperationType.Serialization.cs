// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Insights.Models
{
    internal static partial class ComparisonOperationTypeExtensions
    {
        public static string ToSerialString(this ComparisonOperationType value) => value switch
        {
            ComparisonOperationType.EqualsValue => "Equals",
            ComparisonOperationType.NotEquals => "NotEquals",
            ComparisonOperationType.GreaterThan => "GreaterThan",
            ComparisonOperationType.GreaterThanOrEqual => "GreaterThanOrEqual",
            ComparisonOperationType.LessThan => "LessThan",
            ComparisonOperationType.LessThanOrEqual => "LessThanOrEqual",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComparisonOperationType value.")
        };

        public static ComparisonOperationType ToComparisonOperationType(this string value)
        {
            if (string.Equals(value, "Equals", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.EqualsValue;
            if (string.Equals(value, "NotEquals", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.NotEquals;
            if (string.Equals(value, "GreaterThan", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.GreaterThan;
            if (string.Equals(value, "GreaterThanOrEqual", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.GreaterThanOrEqual;
            if (string.Equals(value, "LessThan", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.LessThan;
            if (string.Equals(value, "LessThanOrEqual", StringComparison.InvariantCultureIgnoreCase)) return ComparisonOperationType.LessThanOrEqual;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComparisonOperationType value.");
        }
    }
}
