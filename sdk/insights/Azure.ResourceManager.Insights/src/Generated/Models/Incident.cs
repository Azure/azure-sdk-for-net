// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Insights.Models
{
    /// <summary> An alert incident indicates the activation status of an alert rule. </summary>
    public partial class Incident
    {
        /// <summary> Initializes a new instance of Incident. </summary>
        internal Incident()
        {
        }

        /// <summary> Initializes a new instance of Incident. </summary>
        /// <param name="name"> Incident name. </param>
        /// <param name="ruleName"> Rule name that is associated with the incident. </param>
        /// <param name="isActive"> A boolean to indicate whether the incident is active or resolved. </param>
        /// <param name="activatedTime"> The time at which the incident was activated in ISO8601 format. </param>
        /// <param name="resolvedTime"> The time at which the incident was resolved in ISO8601 format. If null, it means the incident is still active. </param>
        internal Incident(string name, string ruleName, bool? isActive, DateTimeOffset? activatedTime, DateTimeOffset? resolvedTime)
        {
            Name = name;
            RuleName = ruleName;
            IsActive = isActive;
            ActivatedTime = activatedTime;
            ResolvedTime = resolvedTime;
        }

        /// <summary> Incident name. </summary>
        public string Name { get; }
        /// <summary> Rule name that is associated with the incident. </summary>
        public string RuleName { get; }
        /// <summary> A boolean to indicate whether the incident is active or resolved. </summary>
        public bool? IsActive { get; }
        /// <summary> The time at which the incident was activated in ISO8601 format. </summary>
        public DateTimeOffset? ActivatedTime { get; }
        /// <summary> The time at which the incident was resolved in ISO8601 format. If null, it means the incident is still active. </summary>
        public DateTimeOffset? ResolvedTime { get; }
    }
}
