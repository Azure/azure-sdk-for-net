// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Insights.Models
{
    /// <summary> Result Condition Evaluation criteria. Supported Values - &apos;GreaterThan&apos; or &apos;LessThan&apos; or &apos;Equal&apos;. </summary>
    public readonly partial struct ConditionalOperator : IEquatable<ConditionalOperator>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ConditionalOperator"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConditionalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GreaterThanValue = "GreaterThan";
        private const string LessThanValue = "LessThan";
        private const string EqualValue = "Equal";

        /// <summary> GreaterThan. </summary>
        public static ConditionalOperator GreaterThan { get; } = new ConditionalOperator(GreaterThanValue);
        /// <summary> LessThan. </summary>
        public static ConditionalOperator LessThan { get; } = new ConditionalOperator(LessThanValue);
        /// <summary> Equal. </summary>
        public static ConditionalOperator Equal { get; } = new ConditionalOperator(EqualValue);
        /// <summary> Determines if two <see cref="ConditionalOperator"/> values are the same. </summary>
        public static bool operator ==(ConditionalOperator left, ConditionalOperator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConditionalOperator"/> values are not the same. </summary>
        public static bool operator !=(ConditionalOperator left, ConditionalOperator right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConditionalOperator"/>. </summary>
        public static implicit operator ConditionalOperator(string value) => new ConditionalOperator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConditionalOperator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConditionalOperator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
