// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Insights.Models
{
    public partial class BaselineResponse
    {
        internal static BaselineResponse DeserializeBaselineResponse(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> type = default;
            Optional<LocalizableString> name = default;
            Optional<string> timespan = default;
            Optional<TimeSpan> interval = default;
            Optional<string> aggregation = default;
            Optional<IReadOnlyList<DateTimeOffset>> timestamps = default;
            Optional<IReadOnlyList<Baseline>> baseline = default;
            Optional<IReadOnlyList<BaselineMetadataValue>> metadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = LocalizableString.DeserializeLocalizableString(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("timespan"))
                        {
                            timespan = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("interval"))
                        {
                            interval = property0.Value.GetTimeSpan("P");
                            continue;
                        }
                        if (property0.NameEquals("aggregation"))
                        {
                            aggregation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timestamps"))
                        {
                            List<DateTimeOffset> array = new List<DateTimeOffset>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetDateTimeOffset("O"));
                            }
                            timestamps = array;
                            continue;
                        }
                        if (property0.NameEquals("baseline"))
                        {
                            List<Baseline> array = new List<Baseline>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Models.Baseline.DeserializeBaseline(item));
                            }
                            baseline = array;
                            continue;
                        }
                        if (property0.NameEquals("metadata"))
                        {
                            List<BaselineMetadataValue> array = new List<BaselineMetadataValue>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(BaselineMetadataValue.DeserializeBaselineMetadataValue(item));
                            }
                            metadata = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BaselineResponse(id.Value, type.Value, name.Value, timespan.Value, Optional.ToNullable(interval), aggregation.Value, Optional.ToList(timestamps), Optional.ToList(baseline), Optional.ToList(metadata));
        }
    }
}
