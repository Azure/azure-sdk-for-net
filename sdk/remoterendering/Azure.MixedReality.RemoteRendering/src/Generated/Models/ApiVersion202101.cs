// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.MixedReality.RemoteRendering.Models
{
    /// <summary> The ApiVersion202101. </summary>
    public readonly partial struct ApiVersion202101 : IEquatable<ApiVersion202101>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ApiVersion202101"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApiVersion202101(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string _20210101Value = "2021-01-01";

        /// <summary> 2021-01-01. </summary>
        public static ApiVersion202101 _20210101 { get; } = new ApiVersion202101(_20210101Value);
        /// <summary> Determines if two <see cref="ApiVersion202101"/> values are the same. </summary>
        public static bool operator ==(ApiVersion202101 left, ApiVersion202101 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApiVersion202101"/> values are not the same. </summary>
        public static bool operator !=(ApiVersion202101 left, ApiVersion202101 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ApiVersion202101"/>. </summary>
        public static implicit operator ApiVersion202101(string value) => new ApiVersion202101(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApiVersion202101 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApiVersion202101 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
