// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.MixedReality.RemoteRendering
{
    /// <summary> The properties of the conversion. </summary>
    public partial class AssetConversion
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AssetConversion"/>. </summary>
        /// <param name="conversionId"> The ID of the conversion supplied when the conversion was created. </param>
        /// <param name="options"> Conversion settings describe the origin of input files and destination of output files. </param>
        /// <param name="error"> The error object containing details about the conversion failure. </param>
        /// <param name="status"> The status of the conversion. Terminal states are 'Cancelled', 'Failed', and 'Succeeded'. </param>
        /// <param name="createdOn"> The time when the conversion was created. Date and time in ISO 8601 format. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> or <paramref name="options"/> is null. </exception>
        internal AssetConversion(string conversionId, AssetConversionOptions options, RemoteRenderingServiceError error, AssetConversionStatus status, DateTimeOffset createdOn)
        {
            Argument.AssertNotNull(conversionId, nameof(conversionId));
            Argument.AssertNotNull(options, nameof(options));

            ConversionId = conversionId;
            Options = options;
            Error = error;
            Status = status;
            CreatedOn = createdOn;
        }

        /// <summary> Initializes a new instance of <see cref="AssetConversion"/>. </summary>
        /// <param name="conversionId"> The ID of the conversion supplied when the conversion was created. </param>
        /// <param name="options"> Conversion settings describe the origin of input files and destination of output files. </param>
        /// <param name="output"> Information about the output of a successful conversion. Only present when the status of the conversion is 'Succeeded'. </param>
        /// <param name="error"> The error object containing details about the conversion failure. </param>
        /// <param name="status"> The status of the conversion. Terminal states are 'Cancelled', 'Failed', and 'Succeeded'. </param>
        /// <param name="createdOn"> The time when the conversion was created. Date and time in ISO 8601 format. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AssetConversion(string conversionId, AssetConversionOptions options, AssetConversionOutput output, RemoteRenderingServiceError error, AssetConversionStatus status, DateTimeOffset createdOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConversionId = conversionId;
            Options = options;
            Output = output;
            Error = error;
            Status = status;
            CreatedOn = createdOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AssetConversion"/> for deserialization. </summary>
        internal AssetConversion()
        {
        }
        /// <summary> Information about the output of a successful conversion. Only present when the status of the conversion is 'Succeeded'. </summary>
        public AssetConversionOutput Output { get; }
        /// <summary> The error object containing details about the conversion failure. </summary>
        public RemoteRenderingServiceError Error { get; }
        /// <summary> The status of the conversion. Terminal states are 'Cancelled', 'Failed', and 'Succeeded'. </summary>
        public AssetConversionStatus Status { get; }
    }
}
