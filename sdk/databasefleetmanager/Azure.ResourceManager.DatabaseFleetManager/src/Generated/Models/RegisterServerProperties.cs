// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> Server registration definition. </summary>
    public partial class RegisterServerProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RegisterServerProperties"/>. </summary>
        public RegisterServerProperties()
        {
            DestinationTierOverrides = new ChangeTrackingList<DestinationTierOverride>();
        }

        /// <summary> Initializes a new instance of <see cref="RegisterServerProperties"/>. </summary>
        /// <param name="tierName"> Destination tier name. </param>
        /// <param name="sourceSubscriptionId"> Source subscription id. </param>
        /// <param name="sourceResourceGroupName"> Source resource group name. </param>
        /// <param name="sourceServerName"> Source SQL Server name. </param>
        /// <param name="destinationTierOverrides"> Destination tier overrides. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RegisterServerProperties(string tierName, string sourceSubscriptionId, string sourceResourceGroupName, string sourceServerName, IList<DestinationTierOverride> destinationTierOverrides, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TierName = tierName;
            SourceSubscriptionId = sourceSubscriptionId;
            SourceResourceGroupName = sourceResourceGroupName;
            SourceServerName = sourceServerName;
            DestinationTierOverrides = destinationTierOverrides;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Destination tier name. </summary>
        public string TierName { get; set; }
        /// <summary> Source subscription id. </summary>
        public string SourceSubscriptionId { get; set; }
        /// <summary> Source resource group name. </summary>
        public string SourceResourceGroupName { get; set; }
        /// <summary> Source SQL Server name. </summary>
        public string SourceServerName { get; set; }
        /// <summary> Destination tier overrides. </summary>
        public IList<DestinationTierOverride> DestinationTierOverrides { get; }
    }
}
