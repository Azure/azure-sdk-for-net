// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    public partial class FleetTierProperties : IUtf8JsonSerializable, IJsonModel<FleetTierProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FleetTierProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<FleetTierProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetTierProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FleetTierProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Disabled))
            {
                writer.WritePropertyName("disabled"u8);
                writer.WriteBooleanValue(Disabled.Value);
            }
            if (Optional.IsDefined(Serverless))
            {
                writer.WritePropertyName("serverless"u8);
                writer.WriteBooleanValue(Serverless.Value);
            }
            if (Optional.IsDefined(Pooled))
            {
                writer.WritePropertyName("pooled"u8);
                writer.WriteBooleanValue(Pooled.Value);
            }
            if (Optional.IsDefined(ServiceTier))
            {
                writer.WritePropertyName("serviceTier"u8);
                writer.WriteStringValue(ServiceTier);
            }
            if (Optional.IsDefined(Family))
            {
                writer.WritePropertyName("family"u8);
                writer.WriteStringValue(Family);
            }
            if (Optional.IsDefined(Capacity))
            {
                writer.WritePropertyName("capacity"u8);
                writer.WriteNumberValue(Capacity.Value);
            }
            if (Optional.IsDefined(PoolNumOfDatabasesMax))
            {
                writer.WritePropertyName("poolNumOfDatabasesMax"u8);
                writer.WriteNumberValue(PoolNumOfDatabasesMax.Value);
            }
            if (Optional.IsDefined(HighAvailabilityReplicaCount))
            {
                writer.WritePropertyName("highAvailabilityReplicaCount"u8);
                writer.WriteNumberValue(HighAvailabilityReplicaCount.Value);
            }
            if (Optional.IsDefined(ZoneRedundancy))
            {
                writer.WritePropertyName("zoneRedundancy"u8);
                writer.WriteStringValue(ZoneRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(DatabaseCapacityMin))
            {
                writer.WritePropertyName("databaseCapacityMin"u8);
                writer.WriteNumberValue(DatabaseCapacityMin.Value);
            }
            if (Optional.IsDefined(DatabaseCapacityMax))
            {
                writer.WritePropertyName("databaseCapacityMax"u8);
                writer.WriteNumberValue(DatabaseCapacityMax.Value);
            }
            if (Optional.IsDefined(DatabaseSizeGbMax))
            {
                writer.WritePropertyName("databaseSizeGbMax"u8);
                writer.WriteNumberValue(DatabaseSizeGbMax.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        FleetTierProperties IJsonModel<FleetTierProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetTierProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FleetTierProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFleetTierProperties(document.RootElement, options);
        }

        internal static FleetTierProperties DeserializeFleetTierProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? disabled = default;
            bool? serverless = default;
            bool? pooled = default;
            string serviceTier = default;
            string family = default;
            int? capacity = default;
            int? poolNumOfDatabasesMax = default;
            int? highAvailabilityReplicaCount = default;
            ZoneRedundancy? zoneRedundancy = default;
            double? databaseCapacityMin = default;
            double? databaseCapacityMax = default;
            int? databaseSizeGbMax = default;
            AzureProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("disabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("serverless"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverless = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("pooled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pooled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("serviceTier"u8))
                {
                    serviceTier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("family"u8))
                {
                    family = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("poolNumOfDatabasesMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    poolNumOfDatabasesMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("highAvailabilityReplicaCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    highAvailabilityReplicaCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("zoneRedundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    zoneRedundancy = new ZoneRedundancy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("databaseCapacityMin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseCapacityMin = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("databaseCapacityMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseCapacityMax = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("databaseSizeGbMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseSizeGbMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new AzureProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new FleetTierProperties(
                disabled,
                serverless,
                pooled,
                serviceTier,
                family,
                capacity,
                poolNumOfDatabasesMax,
                highAvailabilityReplicaCount,
                zoneRedundancy,
                databaseCapacityMin,
                databaseCapacityMax,
                databaseSizeGbMax,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FleetTierProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetTierProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FleetTierProperties)} does not support writing '{options.Format}' format.");
            }
        }

        FleetTierProperties IPersistableModel<FleetTierProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetTierProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFleetTierProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FleetTierProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FleetTierProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
