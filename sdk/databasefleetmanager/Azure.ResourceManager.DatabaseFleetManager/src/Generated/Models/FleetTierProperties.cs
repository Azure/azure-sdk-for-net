// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> A Fleet tier properties. </summary>
    public partial class FleetTierProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FleetTierProperties"/>. </summary>
        public FleetTierProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="FleetTierProperties"/>. </summary>
        /// <param name="disabled"> If true, tier is disabled. </param>
        /// <param name="serverless"> If true, serverless resources are provisioned in the tier. </param>
        /// <param name="pooled"> If true, databases are pooled. </param>
        /// <param name="serviceTier"> Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale. </param>
        /// <param name="family"> Family of provisioned resources, for example Gen5. </param>
        /// <param name="capacity"> Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose. </param>
        /// <param name="poolNumOfDatabasesMax"> Maximum number of databases per pool. </param>
        /// <param name="highAvailabilityReplicaCount"> Number of high availability replicas for databases in this tier. </param>
        /// <param name="zoneRedundancy"> Enable zone redundancy for all databases in this tier. </param>
        /// <param name="databaseCapacityMin"> Minimum allocated capacity per database, in units matching the specified service tier. </param>
        /// <param name="databaseCapacityMax"> Maximum allocated capacity per database, in units matching the specified service tier. </param>
        /// <param name="databaseSizeGbMax"> Maximum database size in Gb. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FleetTierProperties(bool? disabled, bool? serverless, bool? pooled, string serviceTier, string family, int? capacity, int? poolNumOfDatabasesMax, int? highAvailabilityReplicaCount, ZoneRedundancy? zoneRedundancy, double? databaseCapacityMin, double? databaseCapacityMax, int? databaseSizeGbMax, AzureProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Disabled = disabled;
            Serverless = serverless;
            Pooled = pooled;
            ServiceTier = serviceTier;
            Family = family;
            Capacity = capacity;
            PoolNumOfDatabasesMax = poolNumOfDatabasesMax;
            HighAvailabilityReplicaCount = highAvailabilityReplicaCount;
            ZoneRedundancy = zoneRedundancy;
            DatabaseCapacityMin = databaseCapacityMin;
            DatabaseCapacityMax = databaseCapacityMax;
            DatabaseSizeGbMax = databaseSizeGbMax;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> If true, tier is disabled. </summary>
        public bool? Disabled { get; }
        /// <summary> If true, serverless resources are provisioned in the tier. </summary>
        public bool? Serverless { get; set; }
        /// <summary> If true, databases are pooled. </summary>
        public bool? Pooled { get; set; }
        /// <summary> Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale. </summary>
        public string ServiceTier { get; set; }
        /// <summary> Family of provisioned resources, for example Gen5. </summary>
        public string Family { get; set; }
        /// <summary> Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose. </summary>
        public int? Capacity { get; set; }
        /// <summary> Maximum number of databases per pool. </summary>
        public int? PoolNumOfDatabasesMax { get; set; }
        /// <summary> Number of high availability replicas for databases in this tier. </summary>
        public int? HighAvailabilityReplicaCount { get; set; }
        /// <summary> Enable zone redundancy for all databases in this tier. </summary>
        public ZoneRedundancy? ZoneRedundancy { get; set; }
        /// <summary> Minimum allocated capacity per database, in units matching the specified service tier. </summary>
        public double? DatabaseCapacityMin { get; set; }
        /// <summary> Maximum allocated capacity per database, in units matching the specified service tier. </summary>
        public double? DatabaseCapacityMax { get; set; }
        /// <summary> Maximum database size in Gb. </summary>
        public int? DatabaseSizeGbMax { get; set; }
        /// <summary> Provisioning state. </summary>
        public AzureProvisioningState? ProvisioningState { get; }
    }
}
