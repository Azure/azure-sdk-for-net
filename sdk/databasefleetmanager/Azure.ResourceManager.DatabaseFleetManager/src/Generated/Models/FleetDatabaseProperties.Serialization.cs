// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    public partial class FleetDatabaseProperties : IUtf8JsonSerializable, IJsonModel<FleetDatabaseProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FleetDatabaseProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<FleetDatabaseProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetDatabaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FleetDatabaseProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(OriginalDatabaseId))
            {
                writer.WritePropertyName("originalDatabaseId"u8);
                writer.WriteStringValue(OriginalDatabaseId);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(CreateMode))
            {
                writer.WritePropertyName("createMode"u8);
                writer.WriteStringValue(CreateMode.Value.ToString());
            }
            if (Optional.IsDefined(TierName))
            {
                writer.WritePropertyName("tierName"u8);
                writer.WriteStringValue(TierName);
            }
            if (options.Format != "W" && Optional.IsDefined(ConnectionString))
            {
                writer.WritePropertyName("connectionString"u8);
                writer.WriteStringValue(ConnectionString);
            }
            if (options.Format != "W" && Optional.IsDefined(Recoverable))
            {
                writer.WritePropertyName("recoverable"u8);
                writer.WriteBooleanValue(Recoverable.Value);
            }
            if (Optional.IsDefined(RestoreFromOn))
            {
                writer.WritePropertyName("restoreFromTime"u8);
                writer.WriteStringValue(RestoreFromOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(EarliestRestoreOn))
            {
                writer.WritePropertyName("earliestRestoreTime"u8);
                writer.WriteStringValue(EarliestRestoreOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LatestRestoreOn))
            {
                writer.WritePropertyName("latestRestoreTime"u8);
                writer.WriteStringValue(LatestRestoreOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BackupRetentionDays))
            {
                writer.WritePropertyName("backupRetentionDays"u8);
                writer.WriteNumberValue(BackupRetentionDays.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseSizeGbMax))
            {
                writer.WritePropertyName("databaseSizeGbMax"u8);
                writer.WriteNumberValue(DatabaseSizeGbMax.Value);
            }
            if (Optional.IsDefined(SourceDatabaseName))
            {
                writer.WritePropertyName("sourceDatabaseName"u8);
                writer.WriteStringValue(SourceDatabaseName);
            }
            if (Optional.IsCollectionDefined(ResourceTags))
            {
                writer.WritePropertyName("resourceTags"u8);
                writer.WriteStartObject();
                foreach (var item in ResourceTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                writer.WriteObjectValue(Identity, options);
            }
            if (Optional.IsDefined(TransparentDataEncryption))
            {
                writer.WritePropertyName("transparentDataEncryption"u8);
                writer.WriteObjectValue(TransparentDataEncryption, options);
            }
            if (Optional.IsDefined(Collation))
            {
                writer.WritePropertyName("collation"u8);
                writer.WriteStringValue(Collation);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        FleetDatabaseProperties IJsonModel<FleetDatabaseProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetDatabaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FleetDatabaseProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFleetDatabaseProperties(document.RootElement, options);
        }

        internal static FleetDatabaseProperties DeserializeFleetDatabaseProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string originalDatabaseId = default;
            AzureProvisioningState? provisioningState = default;
            DatabaseCreateMode? createMode = default;
            string tierName = default;
            string connectionString = default;
            bool? recoverable = default;
            DateTimeOffset? restoreFromTime = default;
            DateTimeOffset? earliestRestoreTime = default;
            DateTimeOffset? latestRestoreTime = default;
            int? backupRetentionDays = default;
            int? databaseSizeGbMax = default;
            string sourceDatabaseName = default;
            IDictionary<string, string> resourceTags = default;
            IdentityProperties identity = default;
            TransparentDataEncryption transparentDataEncryption = default;
            string collation = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("originalDatabaseId"u8))
                {
                    originalDatabaseId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new AzureProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createMode = new DatabaseCreateMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tierName"u8))
                {
                    tierName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionString"u8))
                {
                    connectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoverable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoverable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("restoreFromTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    restoreFromTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("earliestRestoreTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    earliestRestoreTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("latestRestoreTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    latestRestoreTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("backupRetentionDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupRetentionDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("databaseSizeGbMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseSizeGbMax = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sourceDatabaseName"u8))
                {
                    sourceDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceTags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    resourceTags = dictionary;
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = IdentityProperties.DeserializeIdentityProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("transparentDataEncryption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    transparentDataEncryption = TransparentDataEncryption.DeserializeTransparentDataEncryption(property.Value, options);
                    continue;
                }
                if (property.NameEquals("collation"u8))
                {
                    collation = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new FleetDatabaseProperties(
                originalDatabaseId,
                provisioningState,
                createMode,
                tierName,
                connectionString,
                recoverable,
                restoreFromTime,
                earliestRestoreTime,
                latestRestoreTime,
                backupRetentionDays,
                databaseSizeGbMax,
                sourceDatabaseName,
                resourceTags ?? new ChangeTrackingDictionary<string, string>(),
                identity,
                transparentDataEncryption,
                collation,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FleetDatabaseProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetDatabaseProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FleetDatabaseProperties)} does not support writing '{options.Format}' format.");
            }
        }

        FleetDatabaseProperties IPersistableModel<FleetDatabaseProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FleetDatabaseProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFleetDatabaseProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FleetDatabaseProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FleetDatabaseProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
