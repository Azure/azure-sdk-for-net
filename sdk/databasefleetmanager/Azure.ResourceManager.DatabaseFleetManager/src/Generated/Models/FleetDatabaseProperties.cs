// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> Fleet database properties. </summary>
    public partial class FleetDatabaseProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FleetDatabaseProperties"/>. </summary>
        public FleetDatabaseProperties()
        {
            ResourceTags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="FleetDatabaseProperties"/>. </summary>
        /// <param name="originalDatabaseId"> Resource identifier for the underlying database resource. </param>
        /// <param name="provisioningState"> Database state. </param>
        /// <param name="createMode"> Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time (source database name and restore from time must be specified). </param>
        /// <param name="tierName"> Name of the tier this database belongs to. </param>
        /// <param name="connectionString"> Connection string to connect to the database with. </param>
        /// <param name="recoverable"> If true, database is recoverable. </param>
        /// <param name="restoreFromOn"> Restore from time when CreateMode is PointInTimeRestore. </param>
        /// <param name="earliestRestoreOn"> Earliest restore time. </param>
        /// <param name="latestRestoreOn"> Latest restore time. </param>
        /// <param name="backupRetentionDays"> Backup retention in days. </param>
        /// <param name="databaseSizeGbMax"> Maximum database size in Gb. </param>
        /// <param name="sourceDatabaseName"> Source database name used when CreateMode is Copy or PointInTimeRestore. </param>
        /// <param name="resourceTags"> Additional database properties to be applied as the underlying database resource tags. </param>
        /// <param name="identity"> Identity property. </param>
        /// <param name="transparentDataEncryption"> Transparent Data Encryption properties. </param>
        /// <param name="collation"> Database collation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FleetDatabaseProperties(string originalDatabaseId, AzureProvisioningState? provisioningState, DatabaseCreateMode? createMode, string tierName, string connectionString, bool? recoverable, DateTimeOffset? restoreFromOn, DateTimeOffset? earliestRestoreOn, DateTimeOffset? latestRestoreOn, int? backupRetentionDays, int? databaseSizeGbMax, string sourceDatabaseName, IDictionary<string, string> resourceTags, IdentityProperties identity, TransparentDataEncryption transparentDataEncryption, string collation, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OriginalDatabaseId = originalDatabaseId;
            ProvisioningState = provisioningState;
            CreateMode = createMode;
            TierName = tierName;
            ConnectionString = connectionString;
            Recoverable = recoverable;
            RestoreFromOn = restoreFromOn;
            EarliestRestoreOn = earliestRestoreOn;
            LatestRestoreOn = latestRestoreOn;
            BackupRetentionDays = backupRetentionDays;
            DatabaseSizeGbMax = databaseSizeGbMax;
            SourceDatabaseName = sourceDatabaseName;
            ResourceTags = resourceTags;
            Identity = identity;
            TransparentDataEncryption = transparentDataEncryption;
            Collation = collation;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource identifier for the underlying database resource. </summary>
        public string OriginalDatabaseId { get; }
        /// <summary> Database state. </summary>
        public AzureProvisioningState? ProvisioningState { get; }
        /// <summary> Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time (source database name and restore from time must be specified). </summary>
        public DatabaseCreateMode? CreateMode { get; set; }
        /// <summary> Name of the tier this database belongs to. </summary>
        public string TierName { get; set; }
        /// <summary> Connection string to connect to the database with. </summary>
        public string ConnectionString { get; }
        /// <summary> If true, database is recoverable. </summary>
        public bool? Recoverable { get; }
        /// <summary> Restore from time when CreateMode is PointInTimeRestore. </summary>
        public DateTimeOffset? RestoreFromOn { get; set; }
        /// <summary> Earliest restore time. </summary>
        public DateTimeOffset? EarliestRestoreOn { get; }
        /// <summary> Latest restore time. </summary>
        public DateTimeOffset? LatestRestoreOn { get; }
        /// <summary> Backup retention in days. </summary>
        public int? BackupRetentionDays { get; }
        /// <summary> Maximum database size in Gb. </summary>
        public int? DatabaseSizeGbMax { get; }
        /// <summary> Source database name used when CreateMode is Copy or PointInTimeRestore. </summary>
        public string SourceDatabaseName { get; set; }
        /// <summary> Additional database properties to be applied as the underlying database resource tags. </summary>
        public IDictionary<string, string> ResourceTags { get; }
        /// <summary> Identity property. </summary>
        public IdentityProperties Identity { get; set; }
        /// <summary> Transparent Data Encryption properties. </summary>
        public TransparentDataEncryption TransparentDataEncryption { get; set; }
        /// <summary> Database collation. </summary>
        public string Collation { get; set; }
    }
}
