// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DatabaseFleetManager.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDatabaseFleetManagerModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DatabaseFleetManager.FleetTierData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> A Fleet tier properties. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.FleetTierData"/> instance for mocking. </returns>
        public static FleetTierData FleetTierData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, FleetTierProperties properties = null)
        {
            return new FleetTierData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FleetTierProperties"/>. </summary>
        /// <param name="disabled"> If true, tier is disabled. </param>
        /// <param name="serverless"> If true, serverless resources are provisioned in the tier. </param>
        /// <param name="pooled"> If true, databases are pooled. </param>
        /// <param name="serviceTier"> Service tier of provisioned resources. Supported values: GeneralPurpose, Hyperscale. </param>
        /// <param name="family"> Family of provisioned resources, for example Gen5. </param>
        /// <param name="capacity"> Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose. </param>
        /// <param name="poolNumOfDatabasesMax"> Maximum number of databases per pool. </param>
        /// <param name="highAvailabilityReplicaCount"> Number of high availability replicas for databases in this tier. </param>
        /// <param name="zoneRedundancy"> Enable zone redundancy for all databases in this tier. </param>
        /// <param name="databaseCapacityMin"> Minimum allocated capacity per database, in units matching the specified service tier. </param>
        /// <param name="databaseCapacityMax"> Maximum allocated capacity per database, in units matching the specified service tier. </param>
        /// <param name="databaseSizeGbMax"> Maximum database size in Gb. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <returns> A new <see cref="Models.FleetTierProperties"/> instance for mocking. </returns>
        public static FleetTierProperties FleetTierProperties(bool? disabled = null, bool? serverless = null, bool? pooled = null, string serviceTier = null, string family = null, int? capacity = null, int? poolNumOfDatabasesMax = null, int? highAvailabilityReplicaCount = null, ZoneRedundancy? zoneRedundancy = null, double? databaseCapacityMin = null, double? databaseCapacityMax = null, int? databaseSizeGbMax = null, AzureProvisioningState? provisioningState = null)
        {
            return new FleetTierProperties(
                disabled,
                serverless,
                pooled,
                serviceTier,
                family,
                capacity,
                poolNumOfDatabasesMax,
                highAvailabilityReplicaCount,
                zoneRedundancy,
                databaseCapacityMin,
                databaseCapacityMax,
                databaseSizeGbMax,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseFleetManager.FirewallRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> A Firewall rule properties. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.FirewallRuleData"/> instance for mocking. </returns>
        public static FirewallRuleData FirewallRuleData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, FirewallRuleProperties properties = null)
        {
            return new FirewallRuleData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FirewallRuleProperties"/>. </summary>
        /// <param name="startIPAddress"> Start IP address. </param>
        /// <param name="endIPAddress"> End IP address. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <returns> A new <see cref="Models.FirewallRuleProperties"/> instance for mocking. </returns>
        public static FirewallRuleProperties FirewallRuleProperties(string startIPAddress = null, string endIPAddress = null, AzureProvisioningState? provisioningState = null)
        {
            return new FirewallRuleProperties(startIPAddress, endIPAddress, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseFleetManager.FleetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The fleet properties. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.FleetData"/> instance for mocking. </returns>
        public static FleetData FleetData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, FleetProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FleetData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FleetProperties"/>. </summary>
        /// <param name="description"> Fleet description. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <returns> A new <see cref="Models.FleetProperties"/> instance for mocking. </returns>
        public static FleetProperties FleetProperties(string description = null, AzureProvisioningState? provisioningState = null)
        {
            return new FleetProperties(description, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseFleetManager.FleetspaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> A Fleetspace properties. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.FleetspaceData"/> instance for mocking. </returns>
        public static FleetspaceData FleetspaceData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, FleetspaceProperties properties = null)
        {
            return new FleetspaceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FleetspaceProperties"/>. </summary>
        /// <param name="provisioningState"> Fleetspace state. </param>
        /// <param name="capacityMax"> Maximum number of vCores database fleet manager is allowed to provision in the fleetspace. </param>
        /// <param name="mainPrincipal"> Main Microsoft Entra ID principal that has admin access to all databases in the fleetspace. </param>
        /// <returns> A new <see cref="Models.FleetspaceProperties"/> instance for mocking. </returns>
        public static FleetspaceProperties FleetspaceProperties(AzureProvisioningState? provisioningState = null, int? capacityMax = null, MainPrincipal mainPrincipal = null)
        {
            return new FleetspaceProperties(provisioningState, capacityMax, mainPrincipal, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseFleetManager.FleetDatabaseData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Fleet database properties. </param>
        /// <returns> A new <see cref="DatabaseFleetManager.FleetDatabaseData"/> instance for mocking. </returns>
        public static FleetDatabaseData FleetDatabaseData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, FleetDatabaseProperties properties = null)
        {
            return new FleetDatabaseData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FleetDatabaseProperties"/>. </summary>
        /// <param name="originalDatabaseId"> Resource identifier for the underlying database resource. </param>
        /// <param name="provisioningState"> Database state. </param>
        /// <param name="createMode"> Create mode. Available options: Default - Create a database. Copy - Copy the source database (source database name must be specified) PointInTimeRestore - Create a database by restoring source database from a point in time (source database name and restore from time must be specified). </param>
        /// <param name="tierName"> Name of the tier this database belongs to. </param>
        /// <param name="connectionString"> Connection string to connect to the database with. </param>
        /// <param name="recoverable"> If true, database is recoverable. </param>
        /// <param name="restoreFromOn"> Restore from time when CreateMode is PointInTimeRestore. </param>
        /// <param name="earliestRestoreOn"> Earliest restore time. </param>
        /// <param name="latestRestoreOn"> Latest restore time. </param>
        /// <param name="backupRetentionDays"> Backup retention in days. </param>
        /// <param name="databaseSizeGbMax"> Maximum database size in Gb. </param>
        /// <param name="sourceDatabaseName"> Source database name used when CreateMode is Copy or PointInTimeRestore. </param>
        /// <param name="resourceTags"> Additional database properties to be applied as the underlying database resource tags. </param>
        /// <param name="identity"> Identity property. </param>
        /// <param name="transparentDataEncryption"> Transparent Data Encryption properties. </param>
        /// <param name="collation"> Database collation. </param>
        /// <returns> A new <see cref="Models.FleetDatabaseProperties"/> instance for mocking. </returns>
        public static FleetDatabaseProperties FleetDatabaseProperties(string originalDatabaseId = null, AzureProvisioningState? provisioningState = null, DatabaseCreateMode? createMode = null, string tierName = null, string connectionString = null, bool? recoverable = null, DateTimeOffset? restoreFromOn = null, DateTimeOffset? earliestRestoreOn = null, DateTimeOffset? latestRestoreOn = null, int? backupRetentionDays = null, int? databaseSizeGbMax = null, string sourceDatabaseName = null, IDictionary<string, string> resourceTags = null, IdentityProperties identity = null, TransparentDataEncryption transparentDataEncryption = null, string collation = null)
        {
            resourceTags ??= new Dictionary<string, string>();

            return new FleetDatabaseProperties(
                originalDatabaseId,
                provisioningState,
                createMode,
                tierName,
                connectionString,
                recoverable,
                restoreFromOn,
                earliestRestoreOn,
                latestRestoreOn,
                backupRetentionDays,
                databaseSizeGbMax,
                sourceDatabaseName,
                resourceTags,
                identity,
                transparentDataEncryption,
                collation,
                serializedAdditionalRawData: null);
        }
    }
}
