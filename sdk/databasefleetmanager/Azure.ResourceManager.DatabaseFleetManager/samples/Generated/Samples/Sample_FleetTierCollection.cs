// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DatabaseFleetManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DatabaseFleetManager.Samples
{
    public partial class Sample_FleetTierCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_FleetTiersCreateOrUpdateMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetTierResource
            FleetTierCollection collection = fleet.GetFleetTiers();

            // invoke the operation
            string tierName = "general-purpose-tier";
            FleetTierData data = new FleetTierData
            {
                Properties = new FleetTierProperties
                {
                    Serverless = false,
                    Pooled = true,
                    ServiceTier = "GeneralPurpose",
                    Family = "Gen5",
                    Capacity = 4,
                    PoolNumOfDatabasesMax = 10,
                    HighAvailabilityReplicaCount = 5,
                    ZoneRedundancy = ZoneRedundancy.Disabled,
                    DatabaseCapacityMin = 0,
                    DatabaseCapacityMax = 4,
                    DatabaseSizeGbMax = 50,
                },
            };
            ArmOperation<FleetTierResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, tierName, data);
            FleetTierResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetTierData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FleetTiersGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetTierResource
            FleetTierCollection collection = fleet.GetFleetTiers();

            // invoke the operation
            string tierName = "general-purpose-tier";
            FleetTierResource result = await collection.GetAsync(tierName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetTierData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_FleetTiersListByFleetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_ListByFleet_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_ListByFleet" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetTierResource
            FleetTierCollection collection = fleet.GetFleetTiers();

            // invoke the operation and iterate over the result
            await foreach (FleetTierResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetTierData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_FleetTiersGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetTierResource
            FleetTierCollection collection = fleet.GetFleetTiers();

            // invoke the operation
            string tierName = "general-purpose-tier";
            bool result = await collection.ExistsAsync(tierName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_FleetTiersGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // get the collection of this FleetTierResource
            FleetTierCollection collection = fleet.GetFleetTiers();

            // invoke the operation
            string tierName = "general-purpose-tier";
            NullableResponse<FleetTierResource> response = await collection.GetIfExistsAsync(tierName);
            FleetTierResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetTierData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
