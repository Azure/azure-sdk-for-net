// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DatabaseFleetManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DatabaseFleetManager.Samples
{
    public partial class Sample_FleetDatabaseCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateOrUpdateDatabaseInFleetGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // get the collection of this FleetDatabaseResource
            FleetDatabaseCollection collection = fleetspace.GetFleetDatabases();

            // invoke the operation
            string databaseName = "customer-db-prod";
            FleetDatabaseData data = new FleetDatabaseData
            {
                Properties = new FleetDatabaseProperties
                {
                    CreateMode = DatabaseCreateMode.Default,
                    TierName = "Premium",
                    RestoreFromOn = DateTimeOffset.Parse("2024-11-06T09:16:05.048Z"),
                    SourceDatabaseName = "existing-db-prod",
                    ResourceTags =
{
["project"] = "Customer Data"
},
                    Identity = new IdentityProperties
                    {
                        IdentityType = IdentityType.None,
                        UserAssignedIdentities = {new DatabaseIdentity
{
ResourceId = new ResourceIdentifier("/subscriptions/12345678-90ab-cdef-1234-567890abcdef/resourceGroups/rg-database-operations/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-01"),
PrincipalId = Guid.Parse("a2b3c4d5-6789-0123-4567-89abcdef1234"),
ClientId = Guid.Parse("a2b3c4d5-6789-0123-4567-89abcdef1234"),
}},
                        FederatedClientId = Guid.Parse("a2b3c4d5-6789-0123-4567-89abcdef1234"),
                    },
                    TransparentDataEncryption = new TransparentDataEncryption
                    {
                        KeyUri = new Uri("https://keyvaultname.vault.azure.net/keys/myKey/12345"),
                        Keys = { "key1" },
                        EnableAutoRotation = true,
                    },
                },
            };
            ArmOperation<FleetDatabaseResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, databaseName, data);
            FleetDatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_RetrieveDatabaseDetailsInFleetGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // get the collection of this FleetDatabaseResource
            FleetDatabaseCollection collection = fleetspace.GetFleetDatabases();

            // invoke the operation
            string databaseName = "customer-db-prod";
            FleetDatabaseResource result = await collection.GetAsync(databaseName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListDatabasesInFleetspaceGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_ListByFleetspace_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_ListByFleetspace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // get the collection of this FleetDatabaseResource
            FleetDatabaseCollection collection = fleetspace.GetFleetDatabases();

            // invoke the operation and iterate over the result
            await foreach (FleetDatabaseResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetDatabaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_RetrieveDatabaseDetailsInFleetGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // get the collection of this FleetDatabaseResource
            FleetDatabaseCollection collection = fleetspace.GetFleetDatabases();

            // invoke the operation
            string databaseName = "customer-db-prod";
            bool result = await collection.ExistsAsync(databaseName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_RetrieveDatabaseDetailsInFleetGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // get the collection of this FleetDatabaseResource
            FleetDatabaseCollection collection = fleetspace.GetFleetDatabases();

            // invoke the operation
            string databaseName = "customer-db-prod";
            NullableResponse<FleetDatabaseResource> response = await collection.GetIfExistsAsync(databaseName);
            FleetDatabaseResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetDatabaseData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
