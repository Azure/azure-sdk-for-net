// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DatabaseFleetManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DatabaseFleetManager.Samples
{
    public partial class Sample_FleetspaceResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FleetspacesGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/Fleetspaces_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Fleetspace_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rgdatabasefleetmanager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // invoke the operation
            FleetspaceResource result = await fleetspace.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetspaceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FleetspacesDeleteMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/Fleetspaces_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Fleetspace_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rgdatabasefleetmanager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // invoke the operation
            await fleetspace.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FleetspacesUpdateMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/Fleetspaces_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Fleetspace_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // invoke the operation
            FleetspaceData data = new FleetspaceData
            {
                Properties = new FleetspaceProperties
                {
                    CapacityMax = 150000,
                    MainPrincipal = new MainPrincipal
                    {
                        Login = "adminUser",
                        ApplicationId = Guid.Parse("d2d8b19e-c4f7-4c62-8e8d-7f0f96d94e39"),
                        ObjectId = Guid.Parse("f8b7c2d3-b9c4-4f3b-85cd-3d56c6e49f92"),
                        TenantId = Guid.Parse("bde45d44-ec42-45b8-a5a2-c5b998c65ef6"),
                        PrincipalType = PrincipalType.Application,
                    },
                },
            };
            ArmOperation<FleetspaceResource> lro = await fleetspace.UpdateAsync(WaitUntil.Completed, data);
            FleetspaceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetspaceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task RegisterServer_FleetspacesRegisterServerMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/Fleetspaces_RegisterServer_MaximumSet_Gen.json
            // this example is just showing the usage of "Fleetspaces_RegisterServer" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // invoke the operation
            RegisterServerProperties body = new RegisterServerProperties
            {
                TierName = "Standard",
                SourceSubscriptionId = "c76e2b32-46c7-4325-8f4f-476828a5b207",
                SourceResourceGroupName = "rg-source-database",
                SourceServerName = "source-db-server-prod",
                DestinationTierOverrides = { new DestinationTierOverride(Models.ResourceType.Database, "bronze", "source-db-prod") },
            };
            await fleetspace.RegisterServerAsync(WaitUntil.Completed, body);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Unregister_FleetspacesUnregisterMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/Fleetspaces_Unregister_MaximumSet_Gen.json
            // this example is just showing the usage of "Fleetspaces_Unregister" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetspaceResource created on azure
            // for more information of creating FleetspaceResource, please refer to the document of FleetspaceResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            ResourceIdentifier fleetspaceResourceId = FleetspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName);
            FleetspaceResource fleetspace = client.GetFleetspaceResource(fleetspaceResourceId);

            // invoke the operation
            await fleetspace.UnregisterAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
