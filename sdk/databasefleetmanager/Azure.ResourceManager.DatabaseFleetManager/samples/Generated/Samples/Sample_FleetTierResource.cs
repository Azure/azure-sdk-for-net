// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DatabaseFleetManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DatabaseFleetManager.Samples
{
    public partial class Sample_FleetTierResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_FleetTiersGetMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetTierResource created on azure
            // for more information of creating FleetTierResource, please refer to the document of FleetTierResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            string tierName = "general-purpose-tier";
            ResourceIdentifier fleetTierResourceId = FleetTierResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, tierName);
            FleetTierResource fleetTier = client.GetFleetTierResource(fleetTierResourceId);

            // invoke the operation
            FleetTierResource result = await fleetTier.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetTierData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FleetTiersDeleteMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetTierResource created on azure
            // for more information of creating FleetTierResource, please refer to the document of FleetTierResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            string tierName = "general-purpose-tier";
            ResourceIdentifier fleetTierResourceId = FleetTierResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, tierName);
            FleetTierResource fleetTier = client.GetFleetTierResource(fleetTierResourceId);

            // invoke the operation
            await fleetTier.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_FleetTiersUpdateMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTier_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetTierResource created on azure
            // for more information of creating FleetTierResource, please refer to the document of FleetTierResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            string tierName = "general-purpose-tier";
            ResourceIdentifier fleetTierResourceId = FleetTierResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, tierName);
            FleetTierResource fleetTier = client.GetFleetTierResource(fleetTierResourceId);

            // invoke the operation
            FleetTierData data = new FleetTierData
            {
                Properties = new FleetTierProperties
                {
                    Serverless = false,
                    Pooled = true,
                    ServiceTier = "GeneralPurpose",
                    Family = "Gen5",
                    Capacity = 4,
                    PoolNumOfDatabasesMax = 10,
                    HighAvailabilityReplicaCount = 5,
                    ZoneRedundancy = ZoneRedundancy.Disabled,
                    DatabaseCapacityMin = 0,
                    DatabaseCapacityMax = 4,
                    DatabaseSizeGbMax = 50,
                },
            };
            ArmOperation<FleetTierResource> lro = await fleetTier.UpdateAsync(WaitUntil.Completed, data);
            FleetTierResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetTierData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Disable_FleetTiersDisableMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetTiers_Disable_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetTiers_Disable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetTierResource created on azure
            // for more information of creating FleetTierResource, please refer to the document of FleetTierResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-fleet-manager";
            string fleetName = "critical-production-fleet";
            string tierName = "general-purpose-tier";
            ResourceIdentifier fleetTierResourceId = FleetTierResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, tierName);
            FleetTierResource fleetTier = client.GetFleetTierResource(fleetTierResourceId);

            // invoke the operation
            FleetTierResource result = await fleetTier.DisableAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetTierData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
