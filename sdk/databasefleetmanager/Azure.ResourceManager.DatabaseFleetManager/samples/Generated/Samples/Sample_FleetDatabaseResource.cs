// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DatabaseFleetManager.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DatabaseFleetManager.Samples
{
    public partial class Sample_FleetDatabaseResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_RetrieveDatabaseDetailsInFleetGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            string databaseName = "customer-db-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            FleetDatabaseResource result = await fleetDatabase.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_FleetDatabasesDeleteMaximumSetGenGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            string databaseName = "customer-db-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            await fleetDatabase.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateDatabaseInFleetspaceGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabase_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rgdatabasefleetmanager";
            string fleetName = "production-fleet";
            string fleetspaceName = "primary-space";
            string databaseName = "customer-database-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            FleetDatabaseData data = new FleetDatabaseData
            {
                Properties = new FleetDatabaseProperties
                {
                    CreateMode = DatabaseCreateMode.Default,
                    TierName = "Standard",
                    RestoreFromOn = DateTimeOffset.Parse("2024-11-06T09:16:05.048Z"),
                    SourceDatabaseName = "customer-database-staging",
                    ResourceTags =
{
["environment"] = "production",
["owner"] = "database-team"
},
                    Identity = new IdentityProperties
                    {
                        IdentityType = IdentityType.UserAssigned,
                        UserAssignedIdentities = {new DatabaseIdentity
{
ResourceId = new ResourceIdentifier("/subscriptions/C3897315-3847-4D8A-B2FC-7307B066AD63/resourcegroups/rgdatabasefleetmanager/providers/Microsoft.ManagedIdentity/userAssignedIdentities/db-identity"),
PrincipalId = Guid.Parse("f8b7c2d3-b9c4-4f3b-85cd-3d56c6e49f92"),
ClientId = Guid.Parse("d2d8b19e-c4f7-4c62-8e8d-7f0f96d94e39"),
}},
                        FederatedClientId = Guid.Parse("a2b3c4d5-6789-0123-4567-89abcdef1234"),
                    },
                    TransparentDataEncryption = new TransparentDataEncryption
                    {
                        KeyUri = new Uri("https://keyvault-contoso.vault.azure.net/keys/db-encryption-key/abc123"),
                        Keys = { "abc123", "xyz789" },
                        EnableAutoRotation = true,
                    },
                },
            };
            ArmOperation<FleetDatabaseResource> lro = await fleetDatabase.UpdateAsync(WaitUntil.Completed, data);
            FleetDatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ChangeTier_ChangeDatabaseTierGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_ChangeTier_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabases_ChangeTier" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            string databaseName = "customer-db-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            DatabaseChangeTierProperties body = new DatabaseChangeTierProperties
            {
                TargetTierName = "Standard",
            };
            await fleetDatabase.ChangeTierAsync(WaitUntil.Completed, body);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Rename_RenameDatabaseInFleetspaceGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Rename_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabases_Rename" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            string databaseName = "customer-db-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            DatabaseRenameProperties body = new DatabaseRenameProperties
            {
                NewName = "new-customer-db-prod",
            };
            await fleetDatabase.RenameAsync(WaitUntil.Completed, body);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Revert_RevertTransparentDataEncryptionInDatabaseGeneratedByPolicy()
        {
            // Generated from example definition: 2025-02-01-preview/FleetDatabases_Revert_MaximumSet_Gen.json
            // this example is just showing the usage of "FleetDatabases_Revert" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetDatabaseResource created on azure
            // for more information of creating FleetDatabaseResource, please refer to the document of FleetDatabaseResource
            string subscriptionId = "C3897315-3847-4D8A-B2FC-7307B066AD63";
            string resourceGroupName = "rg-database-operations";
            string fleetName = "data-fleet-01";
            string fleetspaceName = "prod-environment";
            string databaseName = "customer-db-prod";
            ResourceIdentifier fleetDatabaseResourceId = FleetDatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName, fleetspaceName, databaseName);
            FleetDatabaseResource fleetDatabase = client.GetFleetDatabaseResource(fleetDatabaseResourceId);

            // invoke the operation
            await fleetDatabase.RevertAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
