// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DataFactory;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDataFactoryModelFactory
    {
        /// <summary> Initializes a new instance of DataFactoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity of the factory. Current supported identity types: SystemAssigned, UserAssigned, SystemAssigned,UserAssigned. </param>
        /// <param name="provisioningState"> Factory provisioning state, example Succeeded. </param>
        /// <param name="createdOn"> Time the factory was created in ISO8601 format. </param>
        /// <param name="version"> Version of the factory. </param>
        /// <param name="purviewResourceId"> Purview information of the factory. </param>
        /// <param name="repoConfiguration">
        /// Git repo information of the factory.
        /// Please note <see cref="FactoryRepoConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactoryGitHubConfiguration"/> and <see cref="FactoryVstsConfiguration"/>.
        /// </param>
        /// <param name="globalParameters"> List of parameters for factory. </param>
        /// <param name="encryption"> Properties to enable Customer Managed Key for the factory. </param>
        /// <param name="publicNetworkAccess"> Whether or not public network access is allowed for the data factory. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="DataFactory.DataFactoryData"/> instance for mocking. </returns>
        public static DataFactoryData DataFactoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string provisioningState = null, DateTimeOffset? createdOn = null, string version = null, ResourceIdentifier purviewResourceId = null, FactoryRepoConfiguration repoConfiguration = null, IDictionary<string, FactoryGlobalParameterSpecification> globalParameters = null, FactoryEncryptionConfiguration encryption = null, FactoryPublicNetworkAccess? publicNetworkAccess = null, ETag? eTag = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            globalParameters ??= new Dictionary<string, FactoryGlobalParameterSpecification>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataFactoryData(id, name, resourceType, systemData, tags, location, identity, provisioningState, createdOn, version, purviewResourceId != null ? new FactoryPurviewConfiguration(purviewResourceId) : null, repoConfiguration, globalParameters, encryption, publicNetworkAccess, eTag, additionalProperties);
        }

        /// <summary> Initializes a new instance of ExposureControlResult. </summary>
        /// <param name="featureName"> The feature name. </param>
        /// <param name="value"> The feature value. </param>
        /// <returns> A new <see cref="Models.ExposureControlResult"/> instance for mocking. </returns>
        public static ExposureControlResult ExposureControlResult(string featureName = null, string value = null)
        {
            return new ExposureControlResult(featureName, value);
        }

        /// <summary> Initializes a new instance of ExposureControlBatchResult. </summary>
        /// <param name="exposureControlResults"> List of exposure control feature values. </param>
        /// <returns> A new <see cref="Models.ExposureControlBatchResult"/> instance for mocking. </returns>
        public static ExposureControlBatchResult ExposureControlBatchResult(IEnumerable<ExposureControlResult> exposureControlResults = null)
        {
            exposureControlResults ??= new List<ExposureControlResult>();

            return new ExposureControlBatchResult(exposureControlResults?.ToList());
        }

        /// <summary> Initializes a new instance of GitHubAccessTokenResult. </summary>
        /// <param name="gitHubAccessToken"> GitHub access token. </param>
        /// <returns> A new <see cref="Models.GitHubAccessTokenResult"/> instance for mocking. </returns>
        public static GitHubAccessTokenResult GitHubAccessTokenResult(string gitHubAccessToken = null)
        {
            return new GitHubAccessTokenResult(gitHubAccessToken);
        }

        /// <summary> Initializes a new instance of FactoryDataPlaneAccessPolicyResult. </summary>
        /// <param name="policy"> The user access policy. </param>
        /// <param name="accessToken"> Data Plane read only access token. </param>
        /// <param name="dataPlaneUri"> Data Plane service base URL. </param>
        /// <returns> A new <see cref="Models.FactoryDataPlaneAccessPolicyResult"/> instance for mocking. </returns>
        public static FactoryDataPlaneAccessPolicyResult FactoryDataPlaneAccessPolicyResult(FactoryDataPlaneUserAccessPolicy policy = null, string accessToken = null, Uri dataPlaneUri = null)
        {
            return new FactoryDataPlaneAccessPolicyResult(policy, accessToken, dataPlaneUri);
        }

        /// <summary> Initializes a new instance of FactoryIntegrationRuntimeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntimeDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntime"/> and <see cref="SelfHostedIntegrationRuntime"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryIntegrationRuntimeData"/> instance for mocking. </returns>
        public static FactoryIntegrationRuntimeData FactoryIntegrationRuntimeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IntegrationRuntimeDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryIntegrationRuntimeData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatusResult. </summary>
        /// <param name="name"> The integration runtime name. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntimeStatus"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntimeStatus"/> and <see cref="SelfHostedIntegrationRuntimeStatus"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatusResult"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatusResult IntegrationRuntimeStatusResult(string name = null, IntegrationRuntimeStatus properties = null)
        {
            return new IntegrationRuntimeStatusResult(name, properties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatus. </summary>
        /// <param name="runtimeType"> Type of integration runtime. </param>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatus IntegrationRuntimeStatus(string runtimeType = "Unknown", string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeStatus(runtimeType, dataFactoryName, state, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint. </summary>
        /// <param name="category"> The category of outbound network dependency. </param>
        /// <param name="endpoints"> The endpoints for outbound network dependency. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(string category = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpoint> endpoints = null)
        {
            endpoints ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpoint>();

            return new IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpoint. </summary>
        /// <param name="domainName"> The domain name of endpoint. </param>
        /// <param name="endpointDetails"> The details of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpoint IntegrationRuntimeOutboundNetworkDependenciesEndpoint(string domainName = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails> endpointDetails = null)
        {
            endpointDetails ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails>();

            return new IntegrationRuntimeOutboundNetworkDependenciesEndpoint(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails. </summary>
        /// <param name="port"> The port of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(int? port = null)
        {
            return new IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(port);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeConnectionInfo. </summary>
        /// <param name="serviceToken"> The token generated in service. Callers use this token to authenticate to integration runtime. </param>
        /// <param name="identityCertThumbprint"> The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation. </param>
        /// <param name="hostServiceUri"> The on-premises integration runtime host URL. </param>
        /// <param name="version"> The integration runtime version. </param>
        /// <param name="publicKey"> The public key for encrypting a credential when transferring the credential to the integration runtime. </param>
        /// <param name="isIdentityCertExprired"> Whether the identity certificate is expired. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeConnectionInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeConnectionInfo IntegrationRuntimeConnectionInfo(string serviceToken = null, string identityCertThumbprint = null, Uri hostServiceUri = null, string version = null, string publicKey = null, bool? isIdentityCertExprired = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeConnectionInfo(serviceToken, identityCertThumbprint, hostServiceUri, version, publicKey, isIdentityCertExprired, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeAuthKeys. </summary>
        /// <param name="authKey1"> The primary integration runtime authentication key. </param>
        /// <param name="authKey2"> The secondary integration runtime authentication key. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeAuthKeys"/> instance for mocking. </returns>
        public static IntegrationRuntimeAuthKeys IntegrationRuntimeAuthKeys(string authKey1 = null, string authKey2 = null)
        {
            return new IntegrationRuntimeAuthKeys(authKey1, authKey2);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeMonitoringData. </summary>
        /// <param name="name"> Integration runtime name. </param>
        /// <param name="nodes"> Integration runtime node monitoring data. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeMonitoringData IntegrationRuntimeMonitoringData(string name = null, IEnumerable<IntegrationRuntimeNodeMonitoringData> nodes = null)
        {
            nodes ??= new List<IntegrationRuntimeNodeMonitoringData>();

            return new IntegrationRuntimeMonitoringData(name, nodes?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeMonitoringData. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="availableMemoryInMB"> Available memory (MB) on the integration runtime node. </param>
        /// <param name="cpuUtilization"> CPU percentage on the integration runtime node. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="concurrentJobsRunning"> The number of jobs currently running on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="sentBytes"> Sent bytes on the integration runtime node. </param>
        /// <param name="receivedBytes"> Received bytes on the integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeMonitoringData IntegrationRuntimeNodeMonitoringData(string nodeName = null, int? availableMemoryInMB = null, int? cpuUtilization = null, int? concurrentJobsLimit = null, int? concurrentJobsRunning = null, int? maxConcurrentJobs = null, float? sentBytes = null, float? receivedBytes = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeNodeMonitoringData(nodeName, availableMemoryInMB, cpuUtilization, concurrentJobsLimit, concurrentJobsRunning, maxConcurrentJobs, sentBytes, receivedBytes, additionalProperties);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadataStatusResult. </summary>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="name"> The operation name. </param>
        /// <param name="properties"> The operation properties. </param>
        /// <param name="error"> The operation error message. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadataStatusResult"/> instance for mocking. </returns>
        public static SsisObjectMetadataStatusResult SsisObjectMetadataStatusResult(string status = null, string name = null, string properties = null, string error = null)
        {
            return new SsisObjectMetadataStatusResult(status, name, properties, error);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadata. </summary>
        /// <param name="metadataType"> Type of metadata. </param>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadata"/> instance for mocking. </returns>
        public static SsisObjectMetadata SsisObjectMetadata(string metadataType = "Unknown", long? id = null, string name = null, string description = null)
        {
            return new UnknownSsisObjectMetadata(metadataType, id, name, description);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeNode. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="machineName"> Machine name of the integration runtime node. </param>
        /// <param name="hostServiceUri"> URI for the host machine of the integration runtime. </param>
        /// <param name="status"> Status of the integration runtime node. </param>
        /// <param name="capabilities"> The integration runtime capabilities dictionary. </param>
        /// <param name="versionStatus"> Status of the integration runtime node version. </param>
        /// <param name="version"> Version of the integration runtime node. </param>
        /// <param name="registerOn"> The time at which the integration runtime node was registered in ISO8601 format. </param>
        /// <param name="lastConnectOn"> The most recent time at which the integration runtime was connected in ISO8601 format. </param>
        /// <param name="expireOn"> The time at which the integration runtime will expire in ISO8601 format. </param>
        /// <param name="lastStartOn"> The time the node last started up. </param>
        /// <param name="lastStopOn"> The integration runtime node last stop time. </param>
        /// <param name="lastUpdateResult"> The result of the last integration runtime node update. </param>
        /// <param name="lastStartUpdateOn"> The last time for the integration runtime node update start. </param>
        /// <param name="lastEndUpdateOn"> The last time for the integration runtime node update end. </param>
        /// <param name="isActiveDispatcher"> Indicates whether this node is the active dispatcher for integration runtime requests. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeNode SelfHostedIntegrationRuntimeNode(string nodeName = null, string machineName = null, Uri hostServiceUri = null, SelfHostedIntegrationRuntimeNodeStatus? status = null, IReadOnlyDictionary<string, string> capabilities = null, string versionStatus = null, string version = null, DateTimeOffset? registerOn = null, DateTimeOffset? lastConnectOn = null, DateTimeOffset? expireOn = null, DateTimeOffset? lastStartOn = null, DateTimeOffset? lastStopOn = null, IntegrationRuntimeUpdateResult? lastUpdateResult = null, DateTimeOffset? lastStartUpdateOn = null, DateTimeOffset? lastEndUpdateOn = null, bool? isActiveDispatcher = null, int? concurrentJobsLimit = null, int? maxConcurrentJobs = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            capabilities ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SelfHostedIntegrationRuntimeNode(nodeName, machineName, hostServiceUri, status, capabilities, versionStatus, version, registerOn, lastConnectOn, expireOn, lastStartOn, lastStopOn, lastUpdateResult, lastStartUpdateOn, lastEndUpdateOn, isActiveDispatcher, concurrentJobsLimit, maxConcurrentJobs, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeIPAddress. </summary>
        /// <param name="ipAddress"> The IP address of self-hosted integration runtime node. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeIPAddress"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeIPAddress IntegrationRuntimeNodeIPAddress(IPAddress ipAddress = null)
        {
            return new IntegrationRuntimeNodeIPAddress(ipAddress);
        }

        /// <summary> Initializes a new instance of FactoryLinkedServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of linked service.
        /// Please note <see cref="FactoryLinkedServiceDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsLinkedService"/>, <see cref="AmazonRdsForOracleLinkedService"/>, <see cref="AmazonRdsForSqlServerLinkedService"/>, <see cref="AmazonRedshiftLinkedService"/>, <see cref="AmazonS3LinkedService"/>, <see cref="AmazonS3CompatibleLinkedService"/>, <see cref="AppFiguresLinkedService"/>, <see cref="AsanaLinkedService"/>, <see cref="AzureBatchLinkedService"/>, <see cref="AzureBlobFSLinkedService"/>, <see cref="AzureBlobStorageLinkedService"/>, <see cref="AzureDataExplorerLinkedService"/>, <see cref="AzureDataLakeAnalyticsLinkedService"/>, <see cref="AzureDataLakeStoreLinkedService"/>, <see cref="AzureDatabricksLinkedService"/>, <see cref="AzureDatabricksDeltaLakeLinkedService"/>, <see cref="AzureFileStorageLinkedService"/>, <see cref="AzureFunctionLinkedService"/>, <see cref="AzureKeyVaultLinkedService"/>, <see cref="AzureMLLinkedService"/>, <see cref="AzureMLServiceLinkedService"/>, <see cref="AzureMariaDBLinkedService"/>, <see cref="AzureMySqlLinkedService"/>, <see cref="AzurePostgreSqlLinkedService"/>, <see cref="AzureSearchLinkedService"/>, <see cref="AzureSqlDWLinkedService"/>, <see cref="AzureSqlDatabaseLinkedService"/>, <see cref="AzureSqlMILinkedService"/>, <see cref="AzureStorageLinkedService"/>, <see cref="AzureTableStorageLinkedService"/>, <see cref="CassandraLinkedService"/>, <see cref="CommonDataServiceForAppsLinkedService"/>, <see cref="ConcurLinkedService"/>, <see cref="CosmosDBLinkedService"/>, <see cref="CosmosDBMongoDBApiLinkedService"/>, <see cref="CouchbaseLinkedService"/>, <see cref="CustomDataSourceLinkedService"/>, <see cref="DataworldLinkedService"/>, <see cref="Db2LinkedService"/>, <see cref="DrillLinkedService"/>, <see cref="DynamicsLinkedService"/>, <see cref="DynamicsAXLinkedService"/>, <see cref="DynamicsCrmLinkedService"/>, <see cref="EloquaLinkedService"/>, <see cref="FileServerLinkedService"/>, <see cref="FtpServerLinkedService"/>, <see cref="GoogleAdWordsLinkedService"/>, <see cref="GoogleBigQueryLinkedService"/>, <see cref="GoogleCloudStorageLinkedService"/>, <see cref="GreenplumLinkedService"/>, <see cref="HBaseLinkedService"/>, <see cref="HDInsightLinkedService"/>, <see cref="HDInsightOnDemandLinkedService"/>, <see cref="HdfsLinkedService"/>, <see cref="HiveLinkedService"/>, <see cref="HttpLinkedService"/>, <see cref="HubspotLinkedService"/>, <see cref="ImpalaLinkedService"/>, <see cref="InformixLinkedService"/>, <see cref="JiraLinkedService"/>, <see cref="MagentoLinkedService"/>, <see cref="MariaDBLinkedService"/>, <see cref="MarketoLinkedService"/>, <see cref="MicrosoftAccessLinkedService"/>, <see cref="MongoDBLinkedService"/>, <see cref="MongoDBAtlasLinkedService"/>, <see cref="MongoDBV2LinkedService"/>, <see cref="MySqlLinkedService"/>, <see cref="NetezzaLinkedService"/>, <see cref="ODataLinkedService"/>, <see cref="OdbcLinkedService"/>, <see cref="Office365LinkedService"/>, <see cref="OracleLinkedService"/>, <see cref="OracleCloudStorageLinkedService"/>, <see cref="OracleServiceCloudLinkedService"/>, <see cref="PaypalLinkedService"/>, <see cref="PhoenixLinkedService"/>, <see cref="PostgreSqlLinkedService"/>, <see cref="PrestoLinkedService"/>, <see cref="QuickBooksLinkedService"/>, <see cref="QuickbaseLinkedService"/>, <see cref="ResponsysLinkedService"/>, <see cref="RestServiceLinkedService"/>, <see cref="SalesforceLinkedService"/>, <see cref="SalesforceMarketingCloudLinkedService"/>, <see cref="SalesforceServiceCloudLinkedService"/>, <see cref="SapBWLinkedService"/>, <see cref="SapCloudForCustomerLinkedService"/>, <see cref="SapEccLinkedService"/>, <see cref="SapHanaLinkedService"/>, <see cref="SapOdpLinkedService"/>, <see cref="SapOpenHubLinkedService"/>, <see cref="SapTableLinkedService"/>, <see cref="ServiceNowLinkedService"/>, <see cref="SftpServerLinkedService"/>, <see cref="SharePointOnlineListLinkedService"/>, <see cref="ShopifyLinkedService"/>, <see cref="SmartsheetLinkedService"/>, <see cref="SnowflakeLinkedService"/>, <see cref="SparkLinkedService"/>, <see cref="SqlServerLinkedService"/>, <see cref="SquareLinkedService"/>, <see cref="SybaseLinkedService"/>, <see cref="TeamDeskLinkedService"/>, <see cref="TeradataLinkedService"/>, <see cref="TwilioLinkedService"/>, <see cref="VerticaLinkedService"/>, <see cref="WebLinkedService"/>, <see cref="XeroLinkedService"/>, <see cref="ZendeskLinkedService"/> and <see cref="ZohoLinkedService"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryLinkedServiceData"/> instance for mocking. </returns>
        public static FactoryLinkedServiceData FactoryLinkedServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryLinkedServiceDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryLinkedServiceData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryDatasetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Dataset properties.
        /// Please note <see cref="FactoryDatasetDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsObjectDataset"/>, <see cref="AmazonRdsForOracleTableDataset"/>, <see cref="AmazonRdsForSqlServerTableDataset"/>, <see cref="AmazonRedshiftTableDataset"/>, <see cref="AmazonS3Dataset"/>, <see cref="AvroDataset"/>, <see cref="AzureBlobDataset"/>, <see cref="AzureBlobFSDataset"/>, <see cref="AzureDataExplorerTableDataset"/>, <see cref="AzureDataLakeStoreDataset"/>, <see cref="AzureDatabricksDeltaLakeDataset"/>, <see cref="AzureMariaDBTableDataset"/>, <see cref="AzureMySqlTableDataset"/>, <see cref="AzurePostgreSqlTableDataset"/>, <see cref="AzureSearchIndexDataset"/>, <see cref="AzureSqlDWTableDataset"/>, <see cref="AzureSqlMITableDataset"/>, <see cref="AzureSqlTableDataset"/>, <see cref="AzureTableDataset"/>, <see cref="BinaryDataset"/>, <see cref="CassandraTableDataset"/>, <see cref="CommonDataServiceForAppsEntityDataset"/>, <see cref="ConcurObjectDataset"/>, <see cref="CosmosDBMongoDBApiCollectionDataset"/>, <see cref="CosmosDBSqlApiCollectionDataset"/>, <see cref="CouchbaseTableDataset"/>, <see cref="CustomDataset"/>, <see cref="Db2TableDataset"/>, <see cref="DelimitedTextDataset"/>, <see cref="DocumentDBCollectionDataset"/>, <see cref="DrillTableDataset"/>, <see cref="DynamicsAXResourceDataset"/>, <see cref="DynamicsCrmEntityDataset"/>, <see cref="DynamicsEntityDataset"/>, <see cref="EloquaObjectDataset"/>, <see cref="ExcelDataset"/>, <see cref="FileShareDataset"/>, <see cref="GoogleAdWordsObjectDataset"/>, <see cref="GoogleBigQueryObjectDataset"/>, <see cref="GreenplumTableDataset"/>, <see cref="HBaseObjectDataset"/>, <see cref="HiveObjectDataset"/>, <see cref="HttpFileDataset"/>, <see cref="HubspotObjectDataset"/>, <see cref="ImpalaObjectDataset"/>, <see cref="InformixTableDataset"/>, <see cref="JiraObjectDataset"/>, <see cref="JsonDataset"/>, <see cref="MagentoObjectDataset"/>, <see cref="MariaDBTableDataset"/>, <see cref="MarketoObjectDataset"/>, <see cref="MicrosoftAccessTableDataset"/>, <see cref="MongoDBAtlasCollectionDataset"/>, <see cref="MongoDBCollectionDataset"/>, <see cref="MongoDBV2CollectionDataset"/>, <see cref="MySqlTableDataset"/>, <see cref="NetezzaTableDataset"/>, <see cref="ODataResourceDataset"/>, <see cref="OdbcTableDataset"/>, <see cref="Office365Dataset"/>, <see cref="OracleServiceCloudObjectDataset"/>, <see cref="OracleTableDataset"/>, <see cref="OrcDataset"/>, <see cref="ParquetDataset"/>, <see cref="PaypalObjectDataset"/>, <see cref="PhoenixObjectDataset"/>, <see cref="PostgreSqlTableDataset"/>, <see cref="PrestoObjectDataset"/>, <see cref="QuickBooksObjectDataset"/>, <see cref="RelationalTableDataset"/>, <see cref="ResponsysObjectDataset"/>, <see cref="RestResourceDataset"/>, <see cref="SalesforceMarketingCloudObjectDataset"/>, <see cref="SalesforceObjectDataset"/>, <see cref="SalesforceServiceCloudObjectDataset"/>, <see cref="SapBwCubeDataset"/>, <see cref="SapCloudForCustomerResourceDataset"/>, <see cref="SapEccResourceDataset"/>, <see cref="SapHanaTableDataset"/>, <see cref="SapOdpResourceDataset"/>, <see cref="SapOpenHubTableDataset"/>, <see cref="SapTableResourceDataset"/>, <see cref="ServiceNowObjectDataset"/>, <see cref="SharePointOnlineListResourceDataset"/>, <see cref="ShopifyObjectDataset"/>, <see cref="SnowflakeDataset"/>, <see cref="SparkObjectDataset"/>, <see cref="SqlServerTableDataset"/>, <see cref="SquareObjectDataset"/>, <see cref="SybaseTableDataset"/>, <see cref="TeradataTableDataset"/>, <see cref="VerticaTableDataset"/>, <see cref="WebTableDataset"/>, <see cref="XeroObjectDataset"/>, <see cref="XmlDataset"/> and <see cref="ZohoObjectDataset"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryDatasetData"/> instance for mocking. </returns>
        public static FactoryDatasetData FactoryDatasetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryDatasetDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryDatasetData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPipelineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of the pipeline. </param>
        /// <param name="activities">
        /// List of activities in pipeline.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <param name="parameters"> List of parameters for pipeline. </param>
        /// <param name="variables"> List of variables for pipeline. </param>
        /// <param name="concurrency"> The max number of concurrent runs for the pipeline. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Pipeline. </param>
        /// <param name="runDimensions"> Dimensions emitted by Pipeline. </param>
        /// <param name="folderName"> The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. </param>
        /// <param name="elapsedTimeMetricDuration"> Pipeline Policy. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPipelineData"/> instance for mocking. </returns>
        public static FactoryPipelineData FactoryPipelineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<PipelineActivity> activities = null, IDictionary<string, EntityParameterSpecification> parameters = null, IDictionary<string, PipelineVariableSpecification> variables = null, int? concurrency = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> runDimensions = null, string folderName = null, TimeSpan? elapsedTimeMetricDuration = null, ETag? eTag = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            activities ??= new List<PipelineActivity>();
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            variables ??= new Dictionary<string, PipelineVariableSpecification>();
            annotations ??= new List<BinaryData>();
            runDimensions ??= new Dictionary<string, BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryPipelineData(id, name, resourceType, systemData, description, activities?.ToList(), parameters, variables, concurrency, annotations?.ToList(), runDimensions, folderName != null ? new PipelineFolder(folderName) : null, elapsedTimeMetricDuration != null ? new FactoryPipelinePolicy(new PipelineElapsedTimeMetricPolicy(elapsedTimeMetricDuration)) : null, eTag, additionalProperties);
        }

        /// <summary> Initializes a new instance of PipelineCreateRunResult. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <returns> A new <see cref="Models.PipelineCreateRunResult"/> instance for mocking. </returns>
        public static PipelineCreateRunResult PipelineCreateRunResult(Guid runId = default)
        {
            return new PipelineCreateRunResult(runId);
        }

        /// <summary> Initializes a new instance of FactoryPipelineRunInfo. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <param name="runGroupId"> Identifier that correlates all the recovery runs of a pipeline run. </param>
        /// <param name="isLatest"> Indicates if the recovered pipeline run is the latest in its group. </param>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="parameters"> The full or partial list of parameter name, value pair used in the pipeline run. </param>
        /// <param name="runDimensions"> Run dimensions emitted by Pipeline run. </param>
        /// <param name="invokedBy"> Entity that started the pipeline run. </param>
        /// <param name="lastUpdated"> The last updated timestamp for the pipeline run event in ISO8601 format. </param>
        /// <param name="runStart"> The start time of a pipeline run in ISO8601 format. </param>
        /// <param name="runEnd"> The end time of a pipeline run in ISO8601 format. </param>
        /// <param name="durationInMs"> The duration of a pipeline run. </param>
        /// <param name="status"> The status of a pipeline run. Possible values: Queued, InProgress, Succeeded, Failed, Canceling, Cancelled. </param>
        /// <param name="message"> The message from a pipeline run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryPipelineRunInfo"/> instance for mocking. </returns>
        public static FactoryPipelineRunInfo FactoryPipelineRunInfo(Guid? runId = null, string runGroupId = null, bool? isLatest = null, string pipelineName = null, IReadOnlyDictionary<string, string> parameters = null, IReadOnlyDictionary<string, string> runDimensions = null, FactoryPipelineRunInvokedByInfo invokedBy = null, DateTimeOffset? lastUpdated = null, DateTimeOffset? runStart = null, DateTimeOffset? runEnd = null, int? durationInMs = null, string status = null, string message = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, string>();
            runDimensions ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryPipelineRunInfo(runId, runGroupId, isLatest, pipelineName, parameters, runDimensions, invokedBy, lastUpdated, runStart, runEnd, durationInMs, status, message, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryPipelineRunInvokedByInfo. </summary>
        /// <param name="name"> Name of the entity that started the pipeline run. </param>
        /// <param name="id"> The ID of the entity that started the run. </param>
        /// <param name="invokedByType"> The type of the entity that started the run. </param>
        /// <param name="pipelineName"> The name of the pipeline that triggered the run, if any. </param>
        /// <param name="pipelineRunId"> The run id of the pipeline that triggered the run, if any. </param>
        /// <returns> A new <see cref="Models.FactoryPipelineRunInvokedByInfo"/> instance for mocking. </returns>
        public static FactoryPipelineRunInvokedByInfo FactoryPipelineRunInvokedByInfo(string name = null, string id = null, string invokedByType = null, string pipelineName = null, Guid? pipelineRunId = null)
        {
            return new FactoryPipelineRunInvokedByInfo(name, id, invokedByType, pipelineName, pipelineRunId);
        }

        /// <summary> Initializes a new instance of ActivityRunInfo. </summary>
        /// <param name="pipelineName"> The name of the pipeline. </param>
        /// <param name="pipelineRunId"> The id of the pipeline run. </param>
        /// <param name="activityName"> The name of the activity. </param>
        /// <param name="activityType"> The type of the activity. </param>
        /// <param name="activityRunId"> The id of the activity run. </param>
        /// <param name="linkedServiceName"> The name of the compute linked service. </param>
        /// <param name="status"> The status of the activity run. </param>
        /// <param name="activityRunStart"> The start time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="endOn"> The end time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="durationInMs"> The duration of the activity run. </param>
        /// <param name="input"> The input for the activity. </param>
        /// <param name="output"> The output for the activity. </param>
        /// <param name="error"> The error if any from the activity run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityRunInfo"/> instance for mocking. </returns>
        public static ActivityRunInfo ActivityRunInfo(string pipelineName = null, Guid? pipelineRunId = null, string activityName = null, string activityType = null, Guid? activityRunId = null, string linkedServiceName = null, string status = null, DateTimeOffset? activityRunStart = null, DateTimeOffset? endOn = null, int? durationInMs = null, BinaryData input = null, BinaryData output = null, BinaryData error = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ActivityRunInfo(pipelineName, pipelineRunId, activityName, activityType, activityRunId, linkedServiceName, status, activityRunStart, endOn, durationInMs, input, output, error, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryTriggerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of the trigger.
        /// Please note <see cref="FactoryTriggerDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobEventsTrigger"/>, <see cref="AzureBlobTrigger"/>, <see cref="ChainingTrigger"/>, <see cref="CustomEventsTrigger"/>, <see cref="MultiplePipelineTrigger"/>, <see cref="RerunTumblingWindowTrigger"/>, <see cref="ScheduleTrigger"/> and <see cref="TumblingWindowTrigger"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryTriggerData"/> instance for mocking. </returns>
        public static FactoryTriggerData FactoryTriggerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryTriggerDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryTriggerData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryTriggerDefinition. </summary>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerDefinition"/> instance for mocking. </returns>
        public static FactoryTriggerDefinition FactoryTriggerDefinition(string triggerType = null, string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryTriggerDefinition(triggerType, description, runtimeState, annotations?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryTriggerSubscriptionOperationResult. </summary>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="status"> Event Subscription Status. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerSubscriptionOperationResult"/> instance for mocking. </returns>
        public static FactoryTriggerSubscriptionOperationResult FactoryTriggerSubscriptionOperationResult(string triggerName = null, EventSubscriptionStatus? status = null)
        {
            return new FactoryTriggerSubscriptionOperationResult(triggerName, status);
        }

        /// <summary> Initializes a new instance of FactoryTriggerRun. </summary>
        /// <param name="triggerRunId"> Trigger run id. </param>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="triggerRunTimestamp"> Trigger run start time. </param>
        /// <param name="status"> Trigger run status. </param>
        /// <param name="message"> Trigger error message. </param>
        /// <param name="properties"> List of property name and value related to trigger run. Name, value pair depends on type of trigger. </param>
        /// <param name="triggeredPipelines"> List of pipeline name and run Id triggered by the trigger run. </param>
        /// <param name="runDimension"> Run dimension for which trigger was fired. </param>
        /// <param name="dependencyStatus"> Status of the upstream pipelines. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerRun"/> instance for mocking. </returns>
        public static FactoryTriggerRun FactoryTriggerRun(string triggerRunId = null, string triggerName = null, string triggerType = null, DateTimeOffset? triggerRunTimestamp = null, FactoryTriggerRunStatus? status = null, string message = null, IReadOnlyDictionary<string, string> properties = null, IReadOnlyDictionary<string, string> triggeredPipelines = null, IReadOnlyDictionary<string, string> runDimension = null, IReadOnlyDictionary<string, BinaryData> dependencyStatus = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            properties ??= new Dictionary<string, string>();
            triggeredPipelines ??= new Dictionary<string, string>();
            runDimension ??= new Dictionary<string, string>();
            dependencyStatus ??= new Dictionary<string, BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryTriggerRun(triggerRunId, triggerName, triggerType, triggerRunTimestamp, status, message, properties, triggeredPipelines, runDimension, dependencyStatus, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Data flow properties.
        /// Please note <see cref="FactoryDataFlowDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactoryFlowletDefinition"/>, <see cref="FactoryMappingDataFlowDefinition"/> and <see cref="FactoryWranglingDataFlowDefinition"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryDataFlowData"/> instance for mocking. </returns>
        public static FactoryDataFlowData FactoryDataFlowData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryDataFlowDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryDataFlowData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowCreateDebugSessionResult. </summary>
        /// <param name="status"> The state of the debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowCreateDebugSessionResult"/> instance for mocking. </returns>
        public static FactoryDataFlowCreateDebugSessionResult FactoryDataFlowCreateDebugSessionResult(string status = null, Guid? sessionId = null)
        {
            return new FactoryDataFlowCreateDebugSessionResult(status, sessionId);
        }

        /// <summary> Initializes a new instance of DataFlowDebugSessionInfo. </summary>
        /// <param name="dataFlowName"> The name of the data flow. </param>
        /// <param name="computeType"> Compute type of the cluster. </param>
        /// <param name="coreCount"> Core count of the cluster. </param>
        /// <param name="nodeCount"> Node count of the cluster. (deprecated property). </param>
        /// <param name="integrationRuntimeName"> Attached integration runtime name of data flow debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="startOn"> Start time of data flow debug session. </param>
        /// <param name="timeToLiveInMinutes"> Compute type of the cluster. </param>
        /// <param name="lastActivityOn"> Last activity time of data flow debug session. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugSessionInfo"/> instance for mocking. </returns>
        public static DataFlowDebugSessionInfo DataFlowDebugSessionInfo(string dataFlowName = null, string computeType = null, int? coreCount = null, int? nodeCount = null, string integrationRuntimeName = null, Guid? sessionId = null, string startOn = null, int? timeToLiveInMinutes = null, DateTimeOffset? lastActivityOn = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataFlowDebugSessionInfo(dataFlowName, computeType, coreCount, nodeCount, integrationRuntimeName, sessionId, startOn, timeToLiveInMinutes, lastActivityOn, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowStartDebugSessionResult. </summary>
        /// <param name="jobVersion"> The ID of data flow debug job version. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowStartDebugSessionResult"/> instance for mocking. </returns>
        public static FactoryDataFlowStartDebugSessionResult FactoryDataFlowStartDebugSessionResult(string jobVersion = null)
        {
            return new FactoryDataFlowStartDebugSessionResult(jobVersion);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowDebugCommandResult. </summary>
        /// <param name="status"> The run status of data preview, statistics or expression preview. </param>
        /// <param name="data"> The result data of data preview, statistics or expression preview. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowDebugCommandResult"/> instance for mocking. </returns>
        public static FactoryDataFlowDebugCommandResult FactoryDataFlowDebugCommandResult(string status = null, string data = null)
        {
            return new FactoryDataFlowDebugCommandResult(status, data);
        }

        /// <summary> Initializes a new instance of FactoryVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Managed Virtual Network properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryVirtualNetworkData"/> instance for mocking. </returns>
        public static FactoryVirtualNetworkData FactoryVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedVirtualNetwork properties = null, ETag? eTag = null)
        {
            return new FactoryVirtualNetworkData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of ManagedVirtualNetwork. </summary>
        /// <param name="vnetId"> Managed Virtual Network ID. </param>
        /// <param name="alias"> Managed Virtual Network alias. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedVirtualNetwork"/> instance for mocking. </returns>
        public static ManagedVirtualNetwork ManagedVirtualNetwork(Guid? vnetId = null, string @alias = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedVirtualNetwork(vnetId, @alias, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Managed private endpoint properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPrivateEndpointData"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointData FactoryPrivateEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedPrivateEndpoint properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of ManagedPrivateEndpoint. </summary>
        /// <param name="connectionState"> The managed private endpoint connection state. </param>
        /// <param name="fqdns"> Fully qualified domain names. </param>
        /// <param name="groupId"> The groupId to which the managed private endpoint is created. </param>
        /// <param name="isReserved"> Denotes whether the managed private endpoint is reserved. </param>
        /// <param name="privateLinkResourceId"> The ARM resource ID of the resource to which the managed private endpoint is created. </param>
        /// <param name="provisioningState"> The managed private endpoint provisioning state. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedPrivateEndpoint"/> instance for mocking. </returns>
        public static ManagedPrivateEndpoint ManagedPrivateEndpoint(ConnectionStateProperties connectionState = null, IEnumerable<string> fqdns = null, string groupId = null, bool? isReserved = null, ResourceIdentifier privateLinkResourceId = null, string provisioningState = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            fqdns ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedPrivateEndpoint(connectionState, fqdns?.ToList(), groupId, isReserved, privateLinkResourceId, provisioningState, additionalProperties);
        }

        /// <summary> Initializes a new instance of ConnectionStateProperties. </summary>
        /// <param name="actionsRequired"> The actions required on the managed private endpoint. </param>
        /// <param name="description"> The managed private endpoint description. </param>
        /// <param name="status"> The approval status. </param>
        /// <returns> A new <see cref="Models.ConnectionStateProperties"/> instance for mocking. </returns>
        public static ConnectionStateProperties ConnectionStateProperties(string actionsRequired = null, string description = null, string status = null)
        {
            return new ConnectionStateProperties(actionsRequired, description, status);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointConnectionData FactoryPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryPrivateEndpointProperties properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointConnectionData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointProperties. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="privateEndpointId"> PrivateEndpoint of a remote private endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateEndpointProperties"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointProperties FactoryPrivateEndpointProperties(string provisioningState = null, ResourceIdentifier privateEndpointId = null, PrivateLinkConnectionState privateLinkServiceConnectionState = null)
        {
            return new FactoryPrivateEndpointProperties(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, privateLinkServiceConnectionState);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointConnectionCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateEndpointConnectionCreateOrUpdateContent"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointConnectionCreateOrUpdateContent FactoryPrivateEndpointConnectionCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateLinkConnectionApprovalRequest properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointConnectionCreateOrUpdateContent(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateLinkResource"/> instance for mocking. </returns>
        public static FactoryPrivateLinkResource FactoryPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryPrivateLinkResourceProperties properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateLinkResource(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> GroupId of a private link resource. </param>
        /// <param name="requiredMembers"> RequiredMembers of a private link resource. </param>
        /// <param name="requiredZoneNames"> RequiredZoneNames of a private link resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static FactoryPrivateLinkResourceProperties FactoryPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new FactoryPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of FactoryGlobalParameterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the global parameter. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryGlobalParameterData"/> instance for mocking. </returns>
        public static FactoryGlobalParameterData FactoryGlobalParameterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, FactoryGlobalParameterSpecification> properties = null, ETag? eTag = null)
        {
            properties ??= new Dictionary<string, FactoryGlobalParameterSpecification>();

            return new FactoryGlobalParameterData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="state"> Integration runtime state, only valid for managed dedicated integration runtime. </param>
        /// <param name="managedVirtualNetwork"> Managed Virtual Network reference. </param>
        /// <param name="computeProperties"> The compute resource for managed integration runtime. </param>
        /// <param name="ssisProperties"> SSIS properties for managed integration runtime. </param>
        /// <param name="customerVirtualNetworkSubnetId"> The name of virtual network to which Azure-SSIS integration runtime will join. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntime"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntime ManagedIntegrationRuntime(string description = null, IDictionary<string, BinaryData> additionalProperties = null, IntegrationRuntimeState? state = null, ManagedVirtualNetworkReference managedVirtualNetwork = null, IntegrationRuntimeComputeProperties computeProperties = null, IntegrationRuntimeSsisProperties ssisProperties = null, ResourceIdentifier customerVirtualNetworkSubnetId = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntime(IntegrationRuntimeType.Managed, description, additionalProperties, state, managedVirtualNetwork, computeProperties, ssisProperties, customerVirtualNetworkSubnetId != null ? new IntegrationRuntimeCustomerVirtualNetwork(customerVirtualNetworkSubnetId) : null);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createdOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="nodes"> The list of nodes for managed integration runtime. </param>
        /// <param name="otherErrors"> The errors that occurred on this integration runtime. </param>
        /// <param name="lastOperation"> The last operation result that occurred on this integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeStatus ManagedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createdOn = null, IEnumerable<ManagedIntegrationRuntimeNode> nodes = null, IEnumerable<ManagedIntegrationRuntimeError> otherErrors = null, ManagedIntegrationRuntimeOperationResult lastOperation = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<ManagedIntegrationRuntimeNode>();
            otherErrors ??= new List<ManagedIntegrationRuntimeError>();

            return new ManagedIntegrationRuntimeStatus(IntegrationRuntimeType.Managed, dataFactoryName, state, additionalProperties, createdOn, nodes?.ToList(), otherErrors?.ToList(), lastOperation);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeNode. </summary>
        /// <param name="nodeId"> The managed integration runtime node id. </param>
        /// <param name="status"> The managed integration runtime node status. </param>
        /// <param name="errors"> The errors that occurred on this integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeNode ManagedIntegrationRuntimeNode(string nodeId = null, ManagedIntegrationRuntimeNodeStatus? status = null, IEnumerable<ManagedIntegrationRuntimeError> errors = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            errors ??= new List<ManagedIntegrationRuntimeError>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeNode(nodeId, status, errors?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeError. </summary>
        /// <param name="time"> The time when the error occurred. </param>
        /// <param name="code"> Error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeError"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeError ManagedIntegrationRuntimeError(DateTimeOffset? time = null, string code = null, IEnumerable<string> parameters = null, string message = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeError(time, code, parameters?.ToList(), message, additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeOperationResult. </summary>
        /// <param name="managedIntegrationRuntimeOperationResultType"> The operation type. Could be start or stop. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="result"> The operation result. </param>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="activityId"> The activity id for the operation request. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeOperationResult"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeOperationResult ManagedIntegrationRuntimeOperationResult(string managedIntegrationRuntimeOperationResultType = null, DateTimeOffset? startOn = null, string result = null, string errorCode = null, IEnumerable<string> parameters = null, string activityId = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeOperationResult(managedIntegrationRuntimeOperationResultType, startOn, result, errorCode, parameters?.ToList(), activityId, additionalProperties);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createdOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="taskQueueId"> The task queue id of the integration runtime. </param>
        /// <param name="internalChannelEncryption"> It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist). </param>
        /// <param name="version"> Version of the integration runtime. </param>
        /// <param name="nodes"> The list of nodes for this integration runtime. </param>
        /// <param name="scheduledUpdateOn"> The date at which the integration runtime will be scheduled to update, in ISO8601 format. </param>
        /// <param name="updateDelayOffset"> The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours. </param>
        /// <param name="localTimeZoneOffset"> The local time zone offset in hours. </param>
        /// <param name="capabilities"> Object with additional information about integration runtime capabilities. </param>
        /// <param name="serviceUris"> The URLs for the services used in integration runtime backend service. </param>
        /// <param name="autoUpdate"> Whether Self-hosted integration runtime auto update has been turned on. </param>
        /// <param name="versionStatus"> Status of the integration runtime version. </param>
        /// <param name="links"> The list of linked integration runtimes that are created to share with this integration runtime. </param>
        /// <param name="pushedVersion"> The version that the integration runtime is going to update to. </param>
        /// <param name="latestVersion"> The latest version on download center. </param>
        /// <param name="autoUpdateEta"> The estimated time when the self-hosted integration runtime will be updated. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeStatus SelfHostedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createdOn = null, Guid? taskQueueId = null, IntegrationRuntimeInternalChannelEncryptionMode? internalChannelEncryption = null, string version = null, IEnumerable<SelfHostedIntegrationRuntimeNode> nodes = null, DateTimeOffset? scheduledUpdateOn = null, TimeSpan? updateDelayOffset = null, TimeSpan? localTimeZoneOffset = null, IReadOnlyDictionary<string, string> capabilities = null, IEnumerable<Uri> serviceUris = null, IntegrationRuntimeAutoUpdate? autoUpdate = null, string versionStatus = null, IEnumerable<LinkedIntegrationRuntime> links = null, string pushedVersion = null, string latestVersion = null, DateTimeOffset? autoUpdateEta = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<SelfHostedIntegrationRuntimeNode>();
            capabilities ??= new Dictionary<string, string>();
            serviceUris ??= new List<Uri>();
            links ??= new List<LinkedIntegrationRuntime>();

            return new SelfHostedIntegrationRuntimeStatus(IntegrationRuntimeType.SelfHosted, dataFactoryName, state, additionalProperties, createdOn, taskQueueId, internalChannelEncryption, version, nodes?.ToList(), scheduledUpdateOn, updateDelayOffset, localTimeZoneOffset, capabilities, serviceUris?.ToList(), autoUpdate, versionStatus, links?.ToList(), pushedVersion, latestVersion, autoUpdateEta);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntime. </summary>
        /// <param name="name"> The name of the linked integration runtime. </param>
        /// <param name="subscriptionId"> The subscription ID for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryName"> The name of the data factory for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryLocation"> The location of the data factory for which the linked integration runtime belong to. </param>
        /// <param name="createdOn"> The creating time of the linked integration runtime. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntime"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntime LinkedIntegrationRuntime(string name = null, string subscriptionId = null, string dataFactoryName = null, AzureLocation? dataFactoryLocation = null, DateTimeOffset? createdOn = null)
        {
            return new LinkedIntegrationRuntime(name, subscriptionId, dataFactoryName, dataFactoryLocation, createdOn);
        }

        /// <summary> Initializes a new instance of SsisFolder. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisFolder"/> instance for mocking. </returns>
        public static SsisFolder SsisFolder(long? id = null, string name = null, string description = null)
        {
            return new SsisFolder(SsisObjectMetadataType.Folder, id, name, description);
        }

        /// <summary> Initializes a new instance of SsisProject. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains project. </param>
        /// <param name="version"> Project version. </param>
        /// <param name="environmentRefs"> Environment reference in project. </param>
        /// <param name="parameters"> Parameters in project. </param>
        /// <returns> A new <see cref="Models.SsisProject"/> instance for mocking. </returns>
        public static SsisProject SsisProject(long? id = null, string name = null, string description = null, long? folderId = null, long? version = null, IEnumerable<SsisEnvironmentReference> environmentRefs = null, IEnumerable<SsisParameterInfo> parameters = null)
        {
            environmentRefs ??= new List<SsisEnvironmentReference>();
            parameters ??= new List<SsisParameterInfo>();

            return new SsisProject(SsisObjectMetadataType.Project, id, name, description, folderId, version, environmentRefs?.ToList(), parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironmentReference. </summary>
        /// <param name="id"> Environment reference id. </param>
        /// <param name="environmentFolderName"> Environment folder name. </param>
        /// <param name="environmentName"> Environment name. </param>
        /// <param name="referenceType"> Reference type. </param>
        /// <returns> A new <see cref="Models.SsisEnvironmentReference"/> instance for mocking. </returns>
        public static SsisEnvironmentReference SsisEnvironmentReference(long? id = null, string environmentFolderName = null, string environmentName = null, string referenceType = null)
        {
            return new SsisEnvironmentReference(id, environmentFolderName, environmentName, referenceType);
        }

        /// <summary> Initializes a new instance of SsisParameterInfo. </summary>
        /// <param name="id"> Parameter id. </param>
        /// <param name="name"> Parameter name. </param>
        /// <param name="description"> Parameter description. </param>
        /// <param name="dataType"> Parameter type. </param>
        /// <param name="isRequired"> Whether parameter is required. </param>
        /// <param name="isSensitive"> Whether parameter is sensitive. </param>
        /// <param name="designDefaultValue"> Design default value of parameter. </param>
        /// <param name="defaultValue"> Default value of parameter. </param>
        /// <param name="sensitiveDefaultValue"> Default sensitive value of parameter. </param>
        /// <param name="valueType"> Parameter value type. </param>
        /// <param name="hasValueSet"> Parameter value set. </param>
        /// <param name="variable"> Parameter reference variable. </param>
        /// <returns> A new <see cref="Models.SsisParameterInfo"/> instance for mocking. </returns>
        public static SsisParameterInfo SsisParameterInfo(long? id = null, string name = null, string description = null, string dataType = null, bool? isRequired = null, bool? isSensitive = null, string designDefaultValue = null, string defaultValue = null, string sensitiveDefaultValue = null, string valueType = null, bool? hasValueSet = null, string variable = null)
        {
            return new SsisParameterInfo(id, name, description, dataType, isRequired, isSensitive, designDefaultValue, defaultValue, sensitiveDefaultValue, valueType, hasValueSet, variable);
        }

        /// <summary> Initializes a new instance of SsisPackage. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains package. </param>
        /// <param name="projectVersion"> Project version which contains package. </param>
        /// <param name="projectId"> Project id which contains package. </param>
        /// <param name="parameters"> Parameters in package. </param>
        /// <returns> A new <see cref="Models.SsisPackage"/> instance for mocking. </returns>
        public static SsisPackage SsisPackage(long? id = null, string name = null, string description = null, long? folderId = null, long? projectVersion = null, long? projectId = null, IEnumerable<SsisParameterInfo> parameters = null)
        {
            parameters ??= new List<SsisParameterInfo>();

            return new SsisPackage(SsisObjectMetadataType.Package, id, name, description, folderId, projectVersion, projectId, parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironment. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains environment. </param>
        /// <param name="variables"> Variable in environment. </param>
        /// <returns> A new <see cref="Models.SsisEnvironment"/> instance for mocking. </returns>
        public static SsisEnvironment SsisEnvironment(long? id = null, string name = null, string description = null, long? folderId = null, IEnumerable<SsisVariable> variables = null)
        {
            variables ??= new List<SsisVariable>();

            return new SsisEnvironment(SsisObjectMetadataType.Environment, id, name, description, folderId, variables?.ToList());
        }

        /// <summary> Initializes a new instance of SsisVariable. </summary>
        /// <param name="id"> Variable id. </param>
        /// <param name="name"> Variable name. </param>
        /// <param name="description"> Variable description. </param>
        /// <param name="dataType"> Variable type. </param>
        /// <param name="isSensitive"> Whether variable is sensitive. </param>
        /// <param name="value"> Variable value. </param>
        /// <param name="sensitiveValue"> Variable sensitive value. </param>
        /// <returns> A new <see cref="Models.SsisVariable"/> instance for mocking. </returns>
        public static SsisVariable SsisVariable(long? id = null, string name = null, string description = null, string dataType = null, bool? isSensitive = null, string value = null, string sensitiveValue = null)
        {
            return new SsisVariable(id, name, description, dataType, isSensitive, value, sensitiveValue);
        }

        /// <summary> Initializes a new instance of MultiplePipelineTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <returns> A new <see cref="Models.MultiplePipelineTrigger"/> instance for mocking. </returns>
        public static MultiplePipelineTrigger MultiplePipelineTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new MultiplePipelineTrigger("MultiplePipelineTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList());
        }

        /// <summary> Initializes a new instance of ScheduleTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="recurrence"> Recurrence schedule configuration. </param>
        /// <returns> A new <see cref="Models.ScheduleTrigger"/> instance for mocking. </returns>
        public static ScheduleTrigger ScheduleTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, ScheduleTriggerRecurrence recurrence = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new ScheduleTrigger("ScheduleTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), recurrence);
        }

        /// <summary> Initializes a new instance of AzureBlobTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="folderPath"> The path of the container/folder that will trigger the pipeline. </param>
        /// <param name="maxConcurrency"> The max number of parallel files to handle when it is triggered. </param>
        /// <param name="linkedService"> The Azure Storage linked service reference. </param>
        /// <returns> A new <see cref="Models.AzureBlobTrigger"/> instance for mocking. </returns>
        public static AzureBlobTrigger AzureBlobTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string folderPath = null, int maxConcurrency = default, FactoryLinkedServiceReference linkedService = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new AzureBlobTrigger("BlobTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), folderPath, maxConcurrency, linkedService);
        }

        /// <summary> Initializes a new instance of AzureBlobEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="blobPathBeginsWith"> The blob path must begin with the pattern provided for trigger to fire. For example, &apos;/records/blobs/december/&apos; will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="blobPathEndsWith"> The blob path must end with the pattern provided for trigger to fire. For example, &apos;december/boxes.csv&apos; will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="ignoreEmptyBlobs"> If set to true, blobs with zero bytes will be ignored. </param>
        /// <param name="events"> The type of events that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Storage Account. </param>
        /// <returns> A new <see cref="Models.AzureBlobEventsTrigger"/> instance for mocking. </returns>
        public static AzureBlobEventsTrigger AzureBlobEventsTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string blobPathBeginsWith = null, string blobPathEndsWith = null, bool? ignoreEmptyBlobs = null, IEnumerable<AzureBlobEventType> events = null, string scope = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<AzureBlobEventType>();

            return new AzureBlobEventsTrigger("BlobEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), blobPathBeginsWith, blobPathEndsWith, ignoreEmptyBlobs, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of CustomEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="subjectBeginsWith"> The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="subjectEndsWith"> The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="events"> The list of event types that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Azure Event Grid Topic. </param>
        /// <returns> A new <see cref="Models.CustomEventsTrigger"/> instance for mocking. </returns>
        public static CustomEventsTrigger CustomEventsTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string subjectBeginsWith = null, string subjectEndsWith = null, IEnumerable<BinaryData> events = null, string scope = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<BinaryData>();

            return new CustomEventsTrigger("CustomEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), subjectBeginsWith, subjectEndsWith, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of TumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when an event is fired for trigger window that is ready. </param>
        /// <param name="frequency"> The frequency of the time windows. </param>
        /// <param name="interval"> The interval of the time windows. The minimum interval allowed is 15 Minutes. </param>
        /// <param name="startOn"> The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="endOn"> The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="delay"> Specifies how long the trigger waits past due time before triggering new run. It doesn&apos;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrency"> The max number of parallel time windows (ready for execution) for which a new run is triggered. </param>
        /// <param name="retryPolicy"> Retry policy that will be applied for failed pipeline runs. </param>
        /// <param name="dependsOn">
        /// Triggers that this trigger depends on. Only tumbling window triggers are supported.
        /// Please note <see cref="DependencyReference"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SelfDependencyTumblingWindowTriggerReference"/>, <see cref="TriggerDependencyReference"/> and <see cref="TumblingWindowTriggerDependencyReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TumblingWindowTrigger"/> instance for mocking. </returns>
        public static TumblingWindowTrigger TumblingWindowTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, TriggerPipelineReference pipeline = null, TumblingWindowFrequency frequency = default, int interval = default, DateTimeOffset startOn = default, DateTimeOffset? endOn = null, BinaryData delay = null, int maxConcurrency = default, RetryPolicy retryPolicy = null, IEnumerable<DependencyReference> dependsOn = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            dependsOn ??= new List<DependencyReference>();

            return new TumblingWindowTrigger("TumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, frequency, interval, startOn, endOn, delay, maxConcurrency, retryPolicy, dependsOn?.ToList());
        }

        /// <summary> Initializes a new instance of RerunTumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parentTrigger"> The parent trigger reference. </param>
        /// <param name="requestedStartOn"> The start time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="requestedEndOn"> The end time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="rerunConcurrency"> The max number of parallel time windows (ready for execution) for which a rerun is triggered. </param>
        /// <returns> A new <see cref="Models.RerunTumblingWindowTrigger"/> instance for mocking. </returns>
        public static RerunTumblingWindowTrigger RerunTumblingWindowTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData parentTrigger = null, DateTimeOffset requestedStartOn = default, DateTimeOffset requestedEndOn = default, int rerunConcurrency = default)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RerunTumblingWindowTrigger("RerunTumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, parentTrigger, requestedStartOn, requestedEndOn, rerunConcurrency);
        }

        /// <summary> Initializes a new instance of ChainingTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when all upstream pipelines complete successfully. </param>
        /// <param name="dependsOn"> Upstream Pipelines. </param>
        /// <param name="runDimension"> Run Dimension property that needs to be emitted by upstream pipelines. </param>
        /// <returns> A new <see cref="Models.ChainingTrigger"/> instance for mocking. </returns>
        public static ChainingTrigger ChainingTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, TriggerPipelineReference pipeline = null, IEnumerable<FactoryPipelineReference> dependsOn = null, string runDimension = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            dependsOn ??= new List<FactoryPipelineReference>();

            return new ChainingTrigger("ChainingTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, dependsOn?.ToList(), runDimension);
        }
    }
}
