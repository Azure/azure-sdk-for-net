// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DataFactory;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DataFactoryModelFactory
    {
        /// <summary> Initializes a new instance of DataFactoryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity of the factory. Current supported identity types: SystemAssigned, UserAssigned, SystemAssigned,UserAssigned. </param>
        /// <param name="provisioningState"> Factory provisioning state, example Succeeded. </param>
        /// <param name="createdOn"> Time the factory was created in ISO8601 format. </param>
        /// <param name="version"> Version of the factory. </param>
        /// <param name="purviewResourceId"> Purview information of the factory. </param>
        /// <param name="repoConfiguration">
        /// Git repo information of the factory.
        /// Please note <see cref="FactoryRepoConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactoryGitHubConfiguration"/> and <see cref="FactoryVstsConfiguration"/>.
        /// </param>
        /// <param name="globalParameters"> List of parameters for factory. </param>
        /// <param name="encryption"> Properties to enable Customer Managed Key for the factory. </param>
        /// <param name="publicNetworkAccess"> Whether or not public network access is allowed for the data factory. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="DataFactory.DataFactoryData"/> instance for mocking. </returns>
        public static DataFactoryData DataFactoryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string provisioningState = null, DateTimeOffset? createdOn = null, string version = null, ResourceIdentifier purviewResourceId = null, FactoryRepoConfiguration repoConfiguration = null, IDictionary<string, FactoryGlobalParameterSpecification> globalParameters = null, FactoryEncryptionConfiguration encryption = null, FactoryPublicNetworkAccess? publicNetworkAccess = null, ETag? eTag = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            globalParameters ??= new Dictionary<string, FactoryGlobalParameterSpecification>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataFactoryData(id, name, resourceType, systemData, tags, location, identity, provisioningState, createdOn, version, new FactoryPurviewConfiguration(purviewResourceId), repoConfiguration, globalParameters, encryption, publicNetworkAccess, eTag, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryRepoConfiguration. </summary>
        /// <param name="factoryRepoConfigurationType"> Type of repo configuration. </param>
        /// <param name="accountName"> Account name. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="collaborationBranch"> Collaboration branch. </param>
        /// <param name="rootFolder"> Root folder. </param>
        /// <param name="lastCommitId"> Last commit id. </param>
        /// <returns> A new <see cref="Models.FactoryRepoConfiguration"/> instance for mocking. </returns>
        public static FactoryRepoConfiguration FactoryRepoConfiguration(string factoryRepoConfigurationType = null, string accountName = null, string repositoryName = null, string collaborationBranch = null, string rootFolder = null, string lastCommitId = null)
        {
            return new UnknownFactoryRepoConfiguration(factoryRepoConfigurationType, accountName, repositoryName, collaborationBranch, rootFolder, lastCommitId);
        }

        /// <summary> Initializes a new instance of FactoryEncryptionConfiguration. </summary>
        /// <param name="keyName"> The name of the key in Azure Key Vault to use as Customer Managed Key. </param>
        /// <param name="vaultBaseUri"> The url of the Azure Key Vault used for CMK. </param>
        /// <param name="keyVersion"> The version of the key used for CMK. If not provided, latest version will be used. </param>
        /// <param name="userAssignedIdentity"> User assigned identity to use to authenticate to customer&apos;s key vault. If not provided Managed Service Identity will be used. </param>
        /// <returns> A new <see cref="Models.FactoryEncryptionConfiguration"/> instance for mocking. </returns>
        public static FactoryEncryptionConfiguration FactoryEncryptionConfiguration(string keyName = null, Uri vaultBaseUri = null, string keyVersion = null, string userAssignedIdentity = null)
        {
            return new FactoryEncryptionConfiguration(keyName, vaultBaseUri, keyVersion, new CmkIdentityDefinition(userAssignedIdentity));
        }

        /// <summary> Initializes a new instance of ExposureControlResult. </summary>
        /// <param name="featureName"> The feature name. </param>
        /// <param name="value"> The feature value. </param>
        /// <returns> A new <see cref="Models.ExposureControlResult"/> instance for mocking. </returns>
        public static ExposureControlResult ExposureControlResult(string featureName = null, string value = null)
        {
            return new ExposureControlResult(featureName, value);
        }

        /// <summary> Initializes a new instance of ExposureControlBatchResult. </summary>
        /// <param name="exposureControlResults"> List of exposure control feature values. </param>
        /// <returns> A new <see cref="Models.ExposureControlBatchResult"/> instance for mocking. </returns>
        public static ExposureControlBatchResult ExposureControlBatchResult(IEnumerable<ExposureControlResult> exposureControlResults = null)
        {
            exposureControlResults ??= new List<ExposureControlResult>();

            return new ExposureControlBatchResult(exposureControlResults?.ToList());
        }

        /// <summary> Initializes a new instance of GitHubClientSecret. </summary>
        /// <param name="byoaSecretAkvUri"> Bring your own app client secret AKV URL. </param>
        /// <param name="byoaSecretName"> Bring your own app client secret name in AKV. </param>
        /// <returns> A new <see cref="Models.GitHubClientSecret"/> instance for mocking. </returns>
        public static GitHubClientSecret GitHubClientSecret(Uri byoaSecretAkvUri = null, string byoaSecretName = null)
        {
            return new GitHubClientSecret(byoaSecretAkvUri, byoaSecretName);
        }

        /// <summary> Initializes a new instance of GitHubAccessTokenResult. </summary>
        /// <param name="gitHubAccessToken"> GitHub access token. </param>
        /// <returns> A new <see cref="Models.GitHubAccessTokenResult"/> instance for mocking. </returns>
        public static GitHubAccessTokenResult GitHubAccessTokenResult(string gitHubAccessToken = null)
        {
            return new GitHubAccessTokenResult(gitHubAccessToken);
        }

        /// <summary> Initializes a new instance of FactoryDataPlaneUserAccessPolicy. </summary>
        /// <param name="permissions"> The string with permissions for Data Plane access. Currently only &apos;r&apos; is supported which grants read only access. </param>
        /// <param name="accessResourcePath"> The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource. </param>
        /// <param name="profileName"> The name of the profile. Currently only the default is supported. The default value is DefaultProfile. </param>
        /// <param name="startTime"> Start time for the token. If not specified the current time will be used. </param>
        /// <param name="expireTime"> Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours. </param>
        /// <returns> A new <see cref="Models.FactoryDataPlaneUserAccessPolicy"/> instance for mocking. </returns>
        public static FactoryDataPlaneUserAccessPolicy FactoryDataPlaneUserAccessPolicy(string permissions = null, string accessResourcePath = null, string profileName = null, string startTime = null, string expireTime = null)
        {
            return new FactoryDataPlaneUserAccessPolicy(permissions, accessResourcePath, profileName, startTime, expireTime);
        }

        /// <summary> Initializes a new instance of FactoryDataPlaneAccessPolicyResult. </summary>
        /// <param name="policy"> The user access policy. </param>
        /// <param name="accessToken"> Data Plane read only access token. </param>
        /// <param name="dataPlaneUri"> Data Plane service base URL. </param>
        /// <returns> A new <see cref="Models.FactoryDataPlaneAccessPolicyResult"/> instance for mocking. </returns>
        public static FactoryDataPlaneAccessPolicyResult FactoryDataPlaneAccessPolicyResult(FactoryDataPlaneUserAccessPolicy policy = null, string accessToken = null, Uri dataPlaneUri = null)
        {
            return new FactoryDataPlaneAccessPolicyResult(policy, accessToken, dataPlaneUri);
        }

        /// <summary> Initializes a new instance of FactoryIntegrationRuntimeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntimeDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntime"/> and <see cref="SelfHostedIntegrationRuntime"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryIntegrationRuntimeData"/> instance for mocking. </returns>
        public static FactoryIntegrationRuntimeData FactoryIntegrationRuntimeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IntegrationRuntimeDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryIntegrationRuntimeData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDefinition. </summary>
        /// <param name="runtimeType"> Type of integration runtime. </param>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDefinition"/> instance for mocking. </returns>
        public static IntegrationRuntimeDefinition IntegrationRuntimeDefinition(string runtimeType = null, string description = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownIntegrationRuntime(runtimeType, description, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatusResult. </summary>
        /// <param name="name"> The integration runtime name. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntimeStatus"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntimeStatus"/> and <see cref="SelfHostedIntegrationRuntimeStatus"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatusResult"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatusResult IntegrationRuntimeStatusResult(string name = null, IntegrationRuntimeStatus properties = null)
        {
            return new IntegrationRuntimeStatusResult(name, properties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatus. </summary>
        /// <param name="runtimeType"> Type of integration runtime. </param>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatus IntegrationRuntimeStatus(string runtimeType = null, string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownIntegrationRuntimeStatus(runtimeType, dataFactoryName, state, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint. </summary>
        /// <param name="category"> The category of outbound network dependency. </param>
        /// <param name="endpoints"> The endpoints for outbound network dependency. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(string category = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpoint> endpoints = null)
        {
            endpoints ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpoint>();

            return new IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpoint. </summary>
        /// <param name="domainName"> The domain name of endpoint. </param>
        /// <param name="endpointDetails"> The details of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpoint IntegrationRuntimeOutboundNetworkDependenciesEndpoint(string domainName = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails> endpointDetails = null)
        {
            endpointDetails ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails>();

            return new IntegrationRuntimeOutboundNetworkDependenciesEndpoint(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails. </summary>
        /// <param name="port"> The port of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(int? port = null)
        {
            return new IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(port);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeConnectionInfo. </summary>
        /// <param name="serviceToken"> The token generated in service. Callers use this token to authenticate to integration runtime. </param>
        /// <param name="identityCertThumbprint"> The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation. </param>
        /// <param name="hostServiceUri"> The on-premises integration runtime host URL. </param>
        /// <param name="version"> The integration runtime version. </param>
        /// <param name="publicKey"> The public key for encrypting a credential when transferring the credential to the integration runtime. </param>
        /// <param name="isIdentityCertExprired"> Whether the identity certificate is expired. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeConnectionInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeConnectionInfo IntegrationRuntimeConnectionInfo(string serviceToken = null, string identityCertThumbprint = null, Uri hostServiceUri = null, string version = null, string publicKey = null, bool? isIdentityCertExprired = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeConnectionInfo(serviceToken, identityCertThumbprint, hostServiceUri, version, publicKey, isIdentityCertExprired, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeAuthKeys. </summary>
        /// <param name="authKey1"> The primary integration runtime authentication key. </param>
        /// <param name="authKey2"> The secondary integration runtime authentication key. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeAuthKeys"/> instance for mocking. </returns>
        public static IntegrationRuntimeAuthKeys IntegrationRuntimeAuthKeys(string authKey1 = null, string authKey2 = null)
        {
            return new IntegrationRuntimeAuthKeys(authKey1, authKey2);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeMonitoringData. </summary>
        /// <param name="name"> Integration runtime name. </param>
        /// <param name="nodes"> Integration runtime node monitoring data. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeMonitoringData IntegrationRuntimeMonitoringData(string name = null, IEnumerable<IntegrationRuntimeNodeMonitoringData> nodes = null)
        {
            nodes ??= new List<IntegrationRuntimeNodeMonitoringData>();

            return new IntegrationRuntimeMonitoringData(name, nodes?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeMonitoringData. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="availableMemoryInMB"> Available memory (MB) on the integration runtime node. </param>
        /// <param name="cpuUtilization"> CPU percentage on the integration runtime node. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="concurrentJobsRunning"> The number of jobs currently running on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="sentBytes"> Sent bytes on the integration runtime node. </param>
        /// <param name="receivedBytes"> Received bytes on the integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeMonitoringData IntegrationRuntimeNodeMonitoringData(string nodeName = null, int? availableMemoryInMB = null, int? cpuUtilization = null, int? concurrentJobsLimit = null, int? concurrentJobsRunning = null, int? maxConcurrentJobs = null, float? sentBytes = null, float? receivedBytes = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeNodeMonitoringData(nodeName, availableMemoryInMB, cpuUtilization, concurrentJobsLimit, concurrentJobsRunning, maxConcurrentJobs, sentBytes, receivedBytes, additionalProperties);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadataStatusResult. </summary>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="name"> The operation name. </param>
        /// <param name="properties"> The operation properties. </param>
        /// <param name="error"> The operation error message. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadataStatusResult"/> instance for mocking. </returns>
        public static SsisObjectMetadataStatusResult SsisObjectMetadataStatusResult(string status = null, string name = null, string properties = null, string error = null)
        {
            return new SsisObjectMetadataStatusResult(status, name, properties, error);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadata. </summary>
        /// <param name="metadataType"> Type of metadata. </param>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadata"/> instance for mocking. </returns>
        public static SsisObjectMetadata SsisObjectMetadata(string metadataType = null, long? id = null, string name = null, string description = null)
        {
            return new UnknownSsisObjectMetadata(metadataType, id, name, description);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeNode. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="machineName"> Machine name of the integration runtime node. </param>
        /// <param name="hostServiceUri"> URI for the host machine of the integration runtime. </param>
        /// <param name="status"> Status of the integration runtime node. </param>
        /// <param name="capabilities"> The integration runtime capabilities dictionary. </param>
        /// <param name="versionStatus"> Status of the integration runtime node version. </param>
        /// <param name="version"> Version of the integration runtime node. </param>
        /// <param name="registerOn"> The time at which the integration runtime node was registered in ISO8601 format. </param>
        /// <param name="lastConnectOn"> The most recent time at which the integration runtime was connected in ISO8601 format. </param>
        /// <param name="expireOn"> The time at which the integration runtime will expire in ISO8601 format. </param>
        /// <param name="lastStartOn"> The time the node last started up. </param>
        /// <param name="lastStopOn"> The integration runtime node last stop time. </param>
        /// <param name="lastUpdateResult"> The result of the last integration runtime node update. </param>
        /// <param name="lastStartUpdateOn"> The last time for the integration runtime node update start. </param>
        /// <param name="lastEndUpdateOn"> The last time for the integration runtime node update end. </param>
        /// <param name="isActiveDispatcher"> Indicates whether this node is the active dispatcher for integration runtime requests. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeNode SelfHostedIntegrationRuntimeNode(string nodeName = null, string machineName = null, Uri hostServiceUri = null, SelfHostedIntegrationRuntimeNodeStatus? status = null, IReadOnlyDictionary<string, string> capabilities = null, string versionStatus = null, string version = null, DateTimeOffset? registerOn = null, DateTimeOffset? lastConnectOn = null, DateTimeOffset? expireOn = null, DateTimeOffset? lastStartOn = null, DateTimeOffset? lastStopOn = null, IntegrationRuntimeUpdateResult? lastUpdateResult = null, DateTimeOffset? lastStartUpdateOn = null, DateTimeOffset? lastEndUpdateOn = null, bool? isActiveDispatcher = null, int? concurrentJobsLimit = null, int? maxConcurrentJobs = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            capabilities ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SelfHostedIntegrationRuntimeNode(nodeName, machineName, hostServiceUri, status, capabilities, versionStatus, version, registerOn, lastConnectOn, expireOn, lastStartOn, lastStopOn, lastUpdateResult, lastStartUpdateOn, lastEndUpdateOn, isActiveDispatcher, concurrentJobsLimit, maxConcurrentJobs, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeIPAddress. </summary>
        /// <param name="ipAddress"> The IP address of self-hosted integration runtime node. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeIPAddress"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeIPAddress IntegrationRuntimeNodeIPAddress(IPAddress ipAddress = null)
        {
            return new IntegrationRuntimeNodeIPAddress(ipAddress);
        }

        /// <summary> Initializes a new instance of FactoryLinkedServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of linked service.
        /// Please note <see cref="FactoryLinkedServiceDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsLinkedService"/>, <see cref="AmazonRdsForOracleLinkedService"/>, <see cref="AmazonRdsForSqlServerLinkedService"/>, <see cref="AmazonRedshiftLinkedService"/>, <see cref="AmazonS3LinkedService"/>, <see cref="AmazonS3CompatibleLinkedService"/>, <see cref="AppFiguresLinkedService"/>, <see cref="AsanaLinkedService"/>, <see cref="AzureBatchLinkedService"/>, <see cref="AzureBlobFSLinkedService"/>, <see cref="AzureBlobStorageLinkedService"/>, <see cref="AzureDataExplorerLinkedService"/>, <see cref="AzureDataLakeAnalyticsLinkedService"/>, <see cref="AzureDataLakeStoreLinkedService"/>, <see cref="AzureDatabricksLinkedService"/>, <see cref="AzureDatabricksDeltaLakeLinkedService"/>, <see cref="AzureFileStorageLinkedService"/>, <see cref="AzureFunctionLinkedService"/>, <see cref="AzureKeyVaultLinkedService"/>, <see cref="AzureMLLinkedService"/>, <see cref="AzureMLServiceLinkedService"/>, <see cref="AzureMariaDBLinkedService"/>, <see cref="AzureMySqlLinkedService"/>, <see cref="AzurePostgreSqlLinkedService"/>, <see cref="AzureSearchLinkedService"/>, <see cref="AzureSqlDWLinkedService"/>, <see cref="AzureSqlDatabaseLinkedService"/>, <see cref="AzureSqlMILinkedService"/>, <see cref="AzureStorageLinkedService"/>, <see cref="AzureTableStorageLinkedService"/>, <see cref="CassandraLinkedService"/>, <see cref="CommonDataServiceForAppsLinkedService"/>, <see cref="ConcurLinkedService"/>, <see cref="CosmosDBLinkedService"/>, <see cref="CosmosDBMongoDBApiLinkedService"/>, <see cref="CouchbaseLinkedService"/>, <see cref="CustomDataSourceLinkedService"/>, <see cref="DataworldLinkedService"/>, <see cref="Db2LinkedService"/>, <see cref="DrillLinkedService"/>, <see cref="DynamicsLinkedService"/>, <see cref="DynamicsAXLinkedService"/>, <see cref="DynamicsCrmLinkedService"/>, <see cref="EloquaLinkedService"/>, <see cref="FileServerLinkedService"/>, <see cref="FtpServerLinkedService"/>, <see cref="GoogleAdWordsLinkedService"/>, <see cref="GoogleBigQueryLinkedService"/>, <see cref="GoogleCloudStorageLinkedService"/>, <see cref="GreenplumLinkedService"/>, <see cref="HBaseLinkedService"/>, <see cref="HDInsightLinkedService"/>, <see cref="HDInsightOnDemandLinkedService"/>, <see cref="HdfsLinkedService"/>, <see cref="HiveLinkedService"/>, <see cref="HttpLinkedService"/>, <see cref="HubspotLinkedService"/>, <see cref="ImpalaLinkedService"/>, <see cref="InformixLinkedService"/>, <see cref="JiraLinkedService"/>, <see cref="MagentoLinkedService"/>, <see cref="MariaDBLinkedService"/>, <see cref="MarketoLinkedService"/>, <see cref="MicrosoftAccessLinkedService"/>, <see cref="MongoDBLinkedService"/>, <see cref="MongoDBAtlasLinkedService"/>, <see cref="MongoDBV2LinkedService"/>, <see cref="MySqlLinkedService"/>, <see cref="NetezzaLinkedService"/>, <see cref="ODataLinkedService"/>, <see cref="OdbcLinkedService"/>, <see cref="Office365LinkedService"/>, <see cref="OracleLinkedService"/>, <see cref="OracleCloudStorageLinkedService"/>, <see cref="OracleServiceCloudLinkedService"/>, <see cref="PaypalLinkedService"/>, <see cref="PhoenixLinkedService"/>, <see cref="PostgreSqlLinkedService"/>, <see cref="PrestoLinkedService"/>, <see cref="QuickBooksLinkedService"/>, <see cref="QuickbaseLinkedService"/>, <see cref="ResponsysLinkedService"/>, <see cref="RestServiceLinkedService"/>, <see cref="SalesforceLinkedService"/>, <see cref="SalesforceMarketingCloudLinkedService"/>, <see cref="SalesforceServiceCloudLinkedService"/>, <see cref="SapBWLinkedService"/>, <see cref="SapCloudForCustomerLinkedService"/>, <see cref="SapEccLinkedService"/>, <see cref="SapHanaLinkedService"/>, <see cref="SapOdpLinkedService"/>, <see cref="SapOpenHubLinkedService"/>, <see cref="SapTableLinkedService"/>, <see cref="ServiceNowLinkedService"/>, <see cref="SftpServerLinkedService"/>, <see cref="SharePointOnlineListLinkedService"/>, <see cref="ShopifyLinkedService"/>, <see cref="SmartsheetLinkedService"/>, <see cref="SnowflakeLinkedService"/>, <see cref="SparkLinkedService"/>, <see cref="SqlServerLinkedService"/>, <see cref="SquareLinkedService"/>, <see cref="SybaseLinkedService"/>, <see cref="TeamDeskLinkedService"/>, <see cref="TeradataLinkedService"/>, <see cref="TwilioLinkedService"/>, <see cref="VerticaLinkedService"/>, <see cref="WebLinkedService"/>, <see cref="XeroLinkedService"/>, <see cref="ZendeskLinkedService"/> and <see cref="ZohoLinkedService"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryLinkedServiceData"/> instance for mocking. </returns>
        public static FactoryLinkedServiceData FactoryLinkedServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryLinkedServiceDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryLinkedServiceData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryLinkedServiceDefinition. </summary>
        /// <param name="linkedServiceType"> Type of linked service. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryLinkedServiceDefinition"/> instance for mocking. </returns>
        public static FactoryLinkedServiceDefinition FactoryLinkedServiceDefinition(string linkedServiceType = null, IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownLinkedService(linkedServiceType, connectVia, description, parameters, annotations?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeReference. </summary>
        /// <param name="referenceType"> Type of integration runtime. </param>
        /// <param name="referenceName"> Reference integration runtime name. </param>
        /// <param name="parameters"> Arguments for integration runtime. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeReference"/> instance for mocking. </returns>
        public static IntegrationRuntimeReference IntegrationRuntimeReference(IntegrationRuntimeReferenceType referenceType = default, string referenceName = null, IDictionary<string, BinaryData> parameters = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeReference(referenceType, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of EntityParameterSpecification. </summary>
        /// <param name="parameterType"> Parameter type. </param>
        /// <param name="defaultValue"> Default value of parameter. </param>
        /// <returns> A new <see cref="Models.EntityParameterSpecification"/> instance for mocking. </returns>
        public static EntityParameterSpecification EntityParameterSpecification(EntityParameterType parameterType = default, BinaryData defaultValue = null)
        {
            return new EntityParameterSpecification(parameterType, defaultValue);
        }

        /// <summary> Initializes a new instance of FactoryDatasetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Dataset properties.
        /// Please note <see cref="FactoryDatasetDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsObjectDataset"/>, <see cref="AmazonRdsForOracleTableDataset"/>, <see cref="AmazonRdsForSqlServerTableDataset"/>, <see cref="AmazonRedshiftTableDataset"/>, <see cref="AmazonS3Dataset"/>, <see cref="AvroDataset"/>, <see cref="AzureBlobDataset"/>, <see cref="AzureBlobFSDataset"/>, <see cref="AzureDataExplorerTableDataset"/>, <see cref="AzureDataLakeStoreDataset"/>, <see cref="AzureDatabricksDeltaLakeDataset"/>, <see cref="AzureMariaDBTableDataset"/>, <see cref="AzureMySqlTableDataset"/>, <see cref="AzurePostgreSqlTableDataset"/>, <see cref="AzureSearchIndexDataset"/>, <see cref="AzureSqlDWTableDataset"/>, <see cref="AzureSqlMITableDataset"/>, <see cref="AzureSqlTableDataset"/>, <see cref="AzureTableDataset"/>, <see cref="BinaryDataset"/>, <see cref="CassandraTableDataset"/>, <see cref="CommonDataServiceForAppsEntityDataset"/>, <see cref="ConcurObjectDataset"/>, <see cref="CosmosDBMongoDBApiCollectionDataset"/>, <see cref="CosmosDBSqlApiCollectionDataset"/>, <see cref="CouchbaseTableDataset"/>, <see cref="CustomDataset"/>, <see cref="Db2TableDataset"/>, <see cref="DelimitedTextDataset"/>, <see cref="DocumentDBCollectionDataset"/>, <see cref="DrillTableDataset"/>, <see cref="DynamicsAXResourceDataset"/>, <see cref="DynamicsCrmEntityDataset"/>, <see cref="DynamicsEntityDataset"/>, <see cref="EloquaObjectDataset"/>, <see cref="ExcelDataset"/>, <see cref="FileShareDataset"/>, <see cref="GoogleAdWordsObjectDataset"/>, <see cref="GoogleBigQueryObjectDataset"/>, <see cref="GreenplumTableDataset"/>, <see cref="HBaseObjectDataset"/>, <see cref="HiveObjectDataset"/>, <see cref="HttpFileDataset"/>, <see cref="HubspotObjectDataset"/>, <see cref="ImpalaObjectDataset"/>, <see cref="InformixTableDataset"/>, <see cref="JiraObjectDataset"/>, <see cref="JsonDataset"/>, <see cref="MagentoObjectDataset"/>, <see cref="MariaDBTableDataset"/>, <see cref="MarketoObjectDataset"/>, <see cref="MicrosoftAccessTableDataset"/>, <see cref="MongoDBAtlasCollectionDataset"/>, <see cref="MongoDBCollectionDataset"/>, <see cref="MongoDBV2CollectionDataset"/>, <see cref="MySqlTableDataset"/>, <see cref="NetezzaTableDataset"/>, <see cref="ODataResourceDataset"/>, <see cref="OdbcTableDataset"/>, <see cref="Office365Dataset"/>, <see cref="OracleServiceCloudObjectDataset"/>, <see cref="OracleTableDataset"/>, <see cref="OrcDataset"/>, <see cref="ParquetDataset"/>, <see cref="PaypalObjectDataset"/>, <see cref="PhoenixObjectDataset"/>, <see cref="PostgreSqlTableDataset"/>, <see cref="PrestoObjectDataset"/>, <see cref="QuickBooksObjectDataset"/>, <see cref="RelationalTableDataset"/>, <see cref="ResponsysObjectDataset"/>, <see cref="RestResourceDataset"/>, <see cref="SalesforceMarketingCloudObjectDataset"/>, <see cref="SalesforceObjectDataset"/>, <see cref="SalesforceServiceCloudObjectDataset"/>, <see cref="SapBwCubeDataset"/>, <see cref="SapCloudForCustomerResourceDataset"/>, <see cref="SapEccResourceDataset"/>, <see cref="SapHanaTableDataset"/>, <see cref="SapOdpResourceDataset"/>, <see cref="SapOpenHubTableDataset"/>, <see cref="SapTableResourceDataset"/>, <see cref="ServiceNowObjectDataset"/>, <see cref="SharePointOnlineListResourceDataset"/>, <see cref="ShopifyObjectDataset"/>, <see cref="SnowflakeDataset"/>, <see cref="SparkObjectDataset"/>, <see cref="SqlServerTableDataset"/>, <see cref="SquareObjectDataset"/>, <see cref="SybaseTableDataset"/>, <see cref="TeradataTableDataset"/>, <see cref="VerticaTableDataset"/>, <see cref="WebTableDataset"/>, <see cref="XeroObjectDataset"/>, <see cref="XmlDataset"/> and <see cref="ZohoObjectDataset"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryDatasetData"/> instance for mocking. </returns>
        public static FactoryDatasetData FactoryDatasetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryDatasetDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryDatasetData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryDatasetDefinition. </summary>
        /// <param name="datasetType"> Type of dataset. </param>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryDatasetDefinition"/> instance for mocking. </returns>
        public static FactoryDatasetDefinition FactoryDatasetDefinition(string datasetType = null, string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownDataset(datasetType, description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryLinkedServiceReference. </summary>
        /// <param name="referenceType"> Linked service reference type. </param>
        /// <param name="referenceName"> Reference LinkedService name. </param>
        /// <param name="parameters"> Arguments for LinkedService. </param>
        /// <returns> A new <see cref="Models.FactoryLinkedServiceReference"/> instance for mocking. </returns>
        public static FactoryLinkedServiceReference FactoryLinkedServiceReference(FactoryLinkedServiceReferenceType referenceType = default, string referenceName = null, IDictionary<string, BinaryData> parameters = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();

            return new FactoryLinkedServiceReference(referenceType, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of FactoryPipelineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of the pipeline. </param>
        /// <param name="activities">
        /// List of activities in pipeline.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <param name="parameters"> List of parameters for pipeline. </param>
        /// <param name="variables"> List of variables for pipeline. </param>
        /// <param name="concurrency"> The max number of concurrent runs for the pipeline. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Pipeline. </param>
        /// <param name="runDimensions"> Dimensions emitted by Pipeline. </param>
        /// <param name="folderName"> The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. </param>
        /// <param name="elapsedTimeMetricDuration"> Pipeline Policy. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPipelineData"/> instance for mocking. </returns>
        public static FactoryPipelineData FactoryPipelineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IEnumerable<PipelineActivity> activities = null, IDictionary<string, EntityParameterSpecification> parameters = null, IDictionary<string, PipelineVariableSpecification> variables = null, int? concurrency = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> runDimensions = null, string folderName = null, TimeSpan? elapsedTimeMetricDuration = null, ETag? eTag = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            activities ??= new List<PipelineActivity>();
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            variables ??= new Dictionary<string, PipelineVariableSpecification>();
            annotations ??= new List<BinaryData>();
            runDimensions ??= new Dictionary<string, BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryPipelineData(id, name, resourceType, systemData, description, activities?.ToList(), parameters, variables, concurrency, annotations?.ToList(), runDimensions, new PipelineFolder(folderName), new FactoryPipelinePolicy(new PipelineElapsedTimeMetricPolicy(elapsedTimeMetricDuration)), eTag, additionalProperties);
        }

        /// <summary> Initializes a new instance of PipelineActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="activityType"> Type of activity. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PipelineActivity"/> instance for mocking. </returns>
        public static PipelineActivity PipelineActivity(string name = null, string activityType = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownActivity(name, activityType, description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ActivityDependency. </summary>
        /// <param name="activity"> Activity name. </param>
        /// <param name="dependencyConditions"> Match-Condition for the dependency. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityDependency"/> instance for mocking. </returns>
        public static ActivityDependency ActivityDependency(string activity = null, IEnumerable<DependencyCondition> dependencyConditions = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            dependencyConditions ??= new List<DependencyCondition>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ActivityDependency(activity, dependencyConditions?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of PipelineVariableSpecification. </summary>
        /// <param name="variableType"> Variable type. </param>
        /// <param name="defaultValue"> Default value of variable. </param>
        /// <returns> A new <see cref="Models.PipelineVariableSpecification"/> instance for mocking. </returns>
        public static PipelineVariableSpecification PipelineVariableSpecification(PipelineVariableType variableType = default, BinaryData defaultValue = null)
        {
            return new PipelineVariableSpecification(variableType, defaultValue);
        }

        /// <summary> Initializes a new instance of PipelineCreateRunResult. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <returns> A new <see cref="Models.PipelineCreateRunResult"/> instance for mocking. </returns>
        public static PipelineCreateRunResult PipelineCreateRunResult(Guid runId = default)
        {
            return new PipelineCreateRunResult(runId);
        }

        /// <summary> Initializes a new instance of FactoryPipelineRunInfo. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <param name="runGroupId"> Identifier that correlates all the recovery runs of a pipeline run. </param>
        /// <param name="isLatest"> Indicates if the recovered pipeline run is the latest in its group. </param>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="parameters"> The full or partial list of parameter name, value pair used in the pipeline run. </param>
        /// <param name="runDimensions"> Run dimensions emitted by Pipeline run. </param>
        /// <param name="invokedBy"> Entity that started the pipeline run. </param>
        /// <param name="lastUpdated"> The last updated timestamp for the pipeline run event in ISO8601 format. </param>
        /// <param name="runStart"> The start time of a pipeline run in ISO8601 format. </param>
        /// <param name="runEnd"> The end time of a pipeline run in ISO8601 format. </param>
        /// <param name="durationInMs"> The duration of a pipeline run. </param>
        /// <param name="status"> The status of a pipeline run. Possible values: Queued, InProgress, Succeeded, Failed, Canceling, Cancelled. </param>
        /// <param name="message"> The message from a pipeline run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryPipelineRunInfo"/> instance for mocking. </returns>
        public static FactoryPipelineRunInfo FactoryPipelineRunInfo(Guid? runId = null, string runGroupId = null, bool? isLatest = null, string pipelineName = null, IReadOnlyDictionary<string, string> parameters = null, IReadOnlyDictionary<string, string> runDimensions = null, FactoryPipelineRunInvokedByInfo invokedBy = null, DateTimeOffset? lastUpdated = null, DateTimeOffset? runStart = null, DateTimeOffset? runEnd = null, int? durationInMs = null, string status = null, string message = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, string>();
            runDimensions ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryPipelineRunInfo(runId, runGroupId, isLatest, pipelineName, parameters, runDimensions, invokedBy, lastUpdated, runStart, runEnd, durationInMs, status, message, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryPipelineRunInvokedByInfo. </summary>
        /// <param name="name"> Name of the entity that started the pipeline run. </param>
        /// <param name="id"> The ID of the entity that started the run. </param>
        /// <param name="invokedByType"> The type of the entity that started the run. </param>
        /// <param name="pipelineName"> The name of the pipeline that triggered the run, if any. </param>
        /// <param name="pipelineRunId"> The run id of the pipeline that triggered the run, if any. </param>
        /// <returns> A new <see cref="Models.FactoryPipelineRunInvokedByInfo"/> instance for mocking. </returns>
        public static FactoryPipelineRunInvokedByInfo FactoryPipelineRunInvokedByInfo(string name = null, string id = null, string invokedByType = null, string pipelineName = null, Guid? pipelineRunId = null)
        {
            return new FactoryPipelineRunInvokedByInfo(name, id, invokedByType, pipelineName, pipelineRunId);
        }

        /// <summary> Initializes a new instance of ActivityRunInfo. </summary>
        /// <param name="pipelineName"> The name of the pipeline. </param>
        /// <param name="pipelineRunId"> The id of the pipeline run. </param>
        /// <param name="activityName"> The name of the activity. </param>
        /// <param name="activityType"> The type of the activity. </param>
        /// <param name="activityRunId"> The id of the activity run. </param>
        /// <param name="linkedServiceName"> The name of the compute linked service. </param>
        /// <param name="status"> The status of the activity run. </param>
        /// <param name="activityRunStart"> The start time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="endOn"> The end time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="durationInMs"> The duration of the activity run. </param>
        /// <param name="input"> The input for the activity. </param>
        /// <param name="output"> The output for the activity. </param>
        /// <param name="error"> The error if any from the activity run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityRunInfo"/> instance for mocking. </returns>
        public static ActivityRunInfo ActivityRunInfo(string pipelineName = null, Guid? pipelineRunId = null, string activityName = null, string activityType = null, Guid? activityRunId = null, string linkedServiceName = null, string status = null, DateTimeOffset? activityRunStart = null, DateTimeOffset? endOn = null, int? durationInMs = null, BinaryData input = null, BinaryData output = null, BinaryData error = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ActivityRunInfo(pipelineName, pipelineRunId, activityName, activityType, activityRunId, linkedServiceName, status, activityRunStart, endOn, durationInMs, input, output, error, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryTriggerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of the trigger.
        /// Please note <see cref="FactoryTriggerDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobEventsTrigger"/>, <see cref="AzureBlobTrigger"/>, <see cref="ChainingTrigger"/>, <see cref="CustomEventsTrigger"/>, <see cref="MultiplePipelineTrigger"/>, <see cref="RerunTumblingWindowTrigger"/>, <see cref="ScheduleTrigger"/> and <see cref="TumblingWindowTrigger"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryTriggerData"/> instance for mocking. </returns>
        public static FactoryTriggerData FactoryTriggerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryTriggerDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryTriggerData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryTriggerDefinition. </summary>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerDefinition"/> instance for mocking. </returns>
        public static FactoryTriggerDefinition FactoryTriggerDefinition(string triggerType = null, string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownTrigger(triggerType, description, runtimeState, annotations?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryTriggerSubscriptionOperationResult. </summary>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="status"> Event Subscription Status. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerSubscriptionOperationResult"/> instance for mocking. </returns>
        public static FactoryTriggerSubscriptionOperationResult FactoryTriggerSubscriptionOperationResult(string triggerName = null, EventSubscriptionStatus? status = null)
        {
            return new FactoryTriggerSubscriptionOperationResult(triggerName, status);
        }

        /// <summary> Initializes a new instance of FactoryTriggerRun. </summary>
        /// <param name="triggerRunId"> Trigger run id. </param>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="triggerRunTimestamp"> Trigger run start time. </param>
        /// <param name="status"> Trigger run status. </param>
        /// <param name="message"> Trigger error message. </param>
        /// <param name="properties"> List of property name and value related to trigger run. Name, value pair depends on type of trigger. </param>
        /// <param name="triggeredPipelines"> List of pipeline name and run Id triggered by the trigger run. </param>
        /// <param name="runDimension"> Run dimension for which trigger was fired. </param>
        /// <param name="dependencyStatus"> Status of the upstream pipelines. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryTriggerRun"/> instance for mocking. </returns>
        public static FactoryTriggerRun FactoryTriggerRun(string triggerRunId = null, string triggerName = null, string triggerType = null, DateTimeOffset? triggerRunTimestamp = null, FactoryTriggerRunStatus? status = null, string message = null, IReadOnlyDictionary<string, string> properties = null, IReadOnlyDictionary<string, string> triggeredPipelines = null, IReadOnlyDictionary<string, string> runDimension = null, IReadOnlyDictionary<string, BinaryData> dependencyStatus = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            properties ??= new Dictionary<string, string>();
            triggeredPipelines ??= new Dictionary<string, string>();
            runDimension ??= new Dictionary<string, string>();
            dependencyStatus ??= new Dictionary<string, BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryTriggerRun(triggerRunId, triggerName, triggerType, triggerRunTimestamp, status, message, properties, triggeredPipelines, runDimension, dependencyStatus, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Data flow properties.
        /// Please note <see cref="FactoryDataFlowDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactoryFlowletDefinition"/>, <see cref="FactoryMappingDataFlowDefinition"/> and <see cref="FactoryWranglingDataFlowDefinition"/>.
        /// </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryDataFlowData"/> instance for mocking. </returns>
        public static FactoryDataFlowData FactoryDataFlowData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryDataFlowDefinition properties = null, ETag? eTag = null)
        {
            return new FactoryDataFlowData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowDefinition. </summary>
        /// <param name="dataFlowType"> Type of data flow. </param>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folderName"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowDefinition"/> instance for mocking. </returns>
        public static FactoryDataFlowDefinition FactoryDataFlowDefinition(string dataFlowType = null, string description = null, IEnumerable<BinaryData> annotations = null, string folderName = null)
        {
            annotations ??= new List<BinaryData>();

            return new UnknownDataFlow(dataFlowType, description, annotations?.ToList(), new DataFlowFolder(folderName));
        }

        /// <summary> Initializes a new instance of FactoryDataFlowCreateDebugSessionResult. </summary>
        /// <param name="status"> The state of the debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowCreateDebugSessionResult"/> instance for mocking. </returns>
        public static FactoryDataFlowCreateDebugSessionResult FactoryDataFlowCreateDebugSessionResult(string status = null, Guid? sessionId = null)
        {
            return new FactoryDataFlowCreateDebugSessionResult(status, sessionId);
        }

        /// <summary> Initializes a new instance of DataFlowDebugSessionInfo. </summary>
        /// <param name="dataFlowName"> The name of the data flow. </param>
        /// <param name="computeType"> Compute type of the cluster. </param>
        /// <param name="coreCount"> Core count of the cluster. </param>
        /// <param name="nodeCount"> Node count of the cluster. (deprecated property). </param>
        /// <param name="integrationRuntimeName"> Attached integration runtime name of data flow debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="startOn"> Start time of data flow debug session. </param>
        /// <param name="timeToLiveInMinutes"> Compute type of the cluster. </param>
        /// <param name="lastActivityOn"> Last activity time of data flow debug session. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugSessionInfo"/> instance for mocking. </returns>
        public static DataFlowDebugSessionInfo DataFlowDebugSessionInfo(string dataFlowName = null, string computeType = null, int? coreCount = null, int? nodeCount = null, string integrationRuntimeName = null, Guid? sessionId = null, string startOn = null, int? timeToLiveInMinutes = null, DateTimeOffset? lastActivityOn = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataFlowDebugSessionInfo(dataFlowName, computeType, coreCount, nodeCount, integrationRuntimeName, sessionId, startOn, timeToLiveInMinutes, lastActivityOn, additionalProperties);
        }

        /// <summary> Initializes a new instance of DataFlowStagingInfo. </summary>
        /// <param name="linkedService"> Staging linked service reference. </param>
        /// <param name="folderPath"> Folder path for staging blob. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DataFlowStagingInfo"/> instance for mocking. </returns>
        public static DataFlowStagingInfo DataFlowStagingInfo(FactoryLinkedServiceReference linkedService = null, BinaryData folderPath = null)
        {
            return new DataFlowStagingInfo(linkedService, folderPath);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowStartDebugSessionResult. </summary>
        /// <param name="jobVersion"> The ID of data flow debug job version. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowStartDebugSessionResult"/> instance for mocking. </returns>
        public static FactoryDataFlowStartDebugSessionResult FactoryDataFlowStartDebugSessionResult(string jobVersion = null)
        {
            return new FactoryDataFlowStartDebugSessionResult(jobVersion);
        }

        /// <summary> Initializes a new instance of FactoryDataFlowDebugCommandResult. </summary>
        /// <param name="status"> The run status of data preview, statistics or expression preview. </param>
        /// <param name="data"> The result data of data preview, statistics or expression preview. </param>
        /// <returns> A new <see cref="Models.FactoryDataFlowDebugCommandResult"/> instance for mocking. </returns>
        public static FactoryDataFlowDebugCommandResult FactoryDataFlowDebugCommandResult(string status = null, string data = null)
        {
            return new FactoryDataFlowDebugCommandResult(status, data);
        }

        /// <summary> Initializes a new instance of FactoryVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Managed Virtual Network properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryVirtualNetworkData"/> instance for mocking. </returns>
        public static FactoryVirtualNetworkData FactoryVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedVirtualNetwork properties = null, ETag? eTag = null)
        {
            return new FactoryVirtualNetworkData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of ManagedVirtualNetwork. </summary>
        /// <param name="vnetId"> Managed Virtual Network ID. </param>
        /// <param name="alias"> Managed Virtual Network alias. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedVirtualNetwork"/> instance for mocking. </returns>
        public static ManagedVirtualNetwork ManagedVirtualNetwork(Guid? vnetId = null, string @alias = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedVirtualNetwork(vnetId, @alias, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Managed private endpoint properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPrivateEndpointData"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointData FactoryPrivateEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedPrivateEndpoint properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of ManagedPrivateEndpoint. </summary>
        /// <param name="connectionState"> The managed private endpoint connection state. </param>
        /// <param name="fqdns"> Fully qualified domain names. </param>
        /// <param name="groupId"> The groupId to which the managed private endpoint is created. </param>
        /// <param name="isReserved"> Denotes whether the managed private endpoint is reserved. </param>
        /// <param name="privateLinkResourceId"> The ARM resource ID of the resource to which the managed private endpoint is created. </param>
        /// <param name="provisioningState"> The managed private endpoint provisioning state. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedPrivateEndpoint"/> instance for mocking. </returns>
        public static ManagedPrivateEndpoint ManagedPrivateEndpoint(ConnectionStateProperties connectionState = null, IEnumerable<string> fqdns = null, string groupId = null, bool? isReserved = null, ResourceIdentifier privateLinkResourceId = null, string provisioningState = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            fqdns ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedPrivateEndpoint(connectionState, fqdns?.ToList(), groupId, isReserved, privateLinkResourceId, provisioningState, additionalProperties);
        }

        /// <summary> Initializes a new instance of ConnectionStateProperties. </summary>
        /// <param name="actionsRequired"> The actions required on the managed private endpoint. </param>
        /// <param name="description"> The managed private endpoint description. </param>
        /// <param name="status"> The approval status. </param>
        /// <returns> A new <see cref="Models.ConnectionStateProperties"/> instance for mocking. </returns>
        public static ConnectionStateProperties ConnectionStateProperties(string actionsRequired = null, string description = null, string status = null)
        {
            return new ConnectionStateProperties(actionsRequired, description, status);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointConnectionData FactoryPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryPrivateEndpointProperties properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointConnectionData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointProperties. </summary>
        /// <param name="provisioningState"></param>
        /// <param name="privateEndpointId"> PrivateEndpoint of a remote private endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateEndpointProperties"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointProperties FactoryPrivateEndpointProperties(string provisioningState = null, ResourceIdentifier privateEndpointId = null, PrivateLinkConnectionState privateLinkServiceConnectionState = null)
        {
            return new FactoryPrivateEndpointProperties(provisioningState, ResourceManagerModelFactory.SubResource(privateEndpointId), privateLinkServiceConnectionState);
        }

        /// <summary> Initializes a new instance of PrivateLinkConnectionState. </summary>
        /// <param name="status"> Status of a private link connection. </param>
        /// <param name="description"> Description of a private link connection. </param>
        /// <param name="actionsRequired"> ActionsRequired for a private link connection. </param>
        /// <returns> A new <see cref="Models.PrivateLinkConnectionState"/> instance for mocking. </returns>
        public static PrivateLinkConnectionState PrivateLinkConnectionState(string status = null, string description = null, string actionsRequired = null)
        {
            return new PrivateLinkConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of FactoryPrivateEndpointConnectionCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateEndpointConnectionCreateOrUpdateContent"/> instance for mocking. </returns>
        public static FactoryPrivateEndpointConnectionCreateOrUpdateContent FactoryPrivateEndpointConnectionCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateLinkConnectionApprovalRequest properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateEndpointConnectionCreateOrUpdateContent(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of PrivateLinkConnectionApprovalRequest. </summary>
        /// <param name="privateLinkServiceConnectionState"> The state of a private link connection. </param>
        /// <param name="privateEndpointId"> The resource of private endpoint. </param>
        /// <returns> A new <see cref="Models.PrivateLinkConnectionApprovalRequest"/> instance for mocking. </returns>
        public static PrivateLinkConnectionApprovalRequest PrivateLinkConnectionApprovalRequest(PrivateLinkConnectionState privateLinkServiceConnectionState = null, ResourceIdentifier privateEndpointId = null)
        {
            return new PrivateLinkConnectionApprovalRequest(privateLinkServiceConnectionState, ResourceManagerModelFactory.WritableSubResource(privateEndpointId));
        }

        /// <summary> Initializes a new instance of FactoryPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Core resource properties. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateLinkResource"/> instance for mocking. </returns>
        public static FactoryPrivateLinkResource FactoryPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FactoryPrivateLinkResourceProperties properties = null, ETag? eTag = null)
        {
            return new FactoryPrivateLinkResource(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactoryPrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> GroupId of a private link resource. </param>
        /// <param name="requiredMembers"> RequiredMembers of a private link resource. </param>
        /// <param name="requiredZoneNames"> RequiredZoneNames of a private link resource. </param>
        /// <returns> A new <see cref="Models.FactoryPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static FactoryPrivateLinkResourceProperties FactoryPrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new FactoryPrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of FactoryGlobalParameterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the global parameter. </param>
        /// <param name="eTag"> Etag identifies change in the resource. </param>
        /// <returns> A new <see cref="DataFactory.FactoryGlobalParameterData"/> instance for mocking. </returns>
        public static FactoryGlobalParameterData FactoryGlobalParameterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, FactoryGlobalParameterSpecification> properties = null, ETag? eTag = null)
        {
            properties ??= new Dictionary<string, FactoryGlobalParameterSpecification>();

            return new FactoryGlobalParameterData(id, name, resourceType, systemData, properties, eTag);
        }

        /// <summary> Initializes a new instance of FactorySecretString. </summary>
        /// <param name="value"> Value of secure string. </param>
        /// <returns> A new <see cref="Models.FactorySecretString"/> instance for mocking. </returns>
        public static FactorySecretString FactorySecretString(string value = null)
        {
            return new FactorySecretString("SecureString", value);
        }

        /// <summary> Initializes a new instance of FactorySecretBaseDefinition. </summary>
        /// <param name="secretBaseType"> Type of the secret. </param>
        /// <returns> A new <see cref="Models.FactorySecretBaseDefinition"/> instance for mocking. </returns>
        public static FactorySecretBaseDefinition FactorySecretBaseDefinition(string secretBaseType = null)
        {
            return new UnknownSecretBase(secretBaseType);
        }

        /// <summary> Initializes a new instance of AzureKeyVaultSecretReference. </summary>
        /// <param name="store"> The Azure Key Vault linked service reference. </param>
        /// <param name="secretName"> The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string). </param>
        /// <param name="secretVersion"> The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureKeyVaultSecretReference"/> instance for mocking. </returns>
        public static AzureKeyVaultSecretReference AzureKeyVaultSecretReference(FactoryLinkedServiceReference store = null, BinaryData secretName = null, BinaryData secretVersion = null)
        {
            return new AzureKeyVaultSecretReference("AzureKeyVaultSecret", store, secretName, secretVersion);
        }

        /// <summary> Initializes a new instance of FactoryVstsConfiguration. </summary>
        /// <param name="accountName"> Account name. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="collaborationBranch"> Collaboration branch. </param>
        /// <param name="rootFolder"> Root folder. </param>
        /// <param name="lastCommitId"> Last commit id. </param>
        /// <param name="projectName"> VSTS project name. </param>
        /// <param name="tenantId"> VSTS tenant id. </param>
        /// <returns> A new <see cref="Models.FactoryVstsConfiguration"/> instance for mocking. </returns>
        public static FactoryVstsConfiguration FactoryVstsConfiguration(string accountName = null, string repositoryName = null, string collaborationBranch = null, string rootFolder = null, string lastCommitId = null, string projectName = null, Guid? tenantId = null)
        {
            return new FactoryVstsConfiguration("FactoryVSTSConfiguration", accountName, repositoryName, collaborationBranch, rootFolder, lastCommitId, projectName, tenantId);
        }

        /// <summary> Initializes a new instance of FactoryGitHubConfiguration. </summary>
        /// <param name="accountName"> Account name. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="collaborationBranch"> Collaboration branch. </param>
        /// <param name="rootFolder"> Root folder. </param>
        /// <param name="lastCommitId"> Last commit id. </param>
        /// <param name="hostName"> GitHub Enterprise host name. For example: `https://github.mydomain.com`. </param>
        /// <param name="clientId"> GitHub bring your own app client id. </param>
        /// <param name="clientSecret"> GitHub bring your own app client secret information. </param>
        /// <returns> A new <see cref="Models.FactoryGitHubConfiguration"/> instance for mocking. </returns>
        public static FactoryGitHubConfiguration FactoryGitHubConfiguration(string accountName = null, string repositoryName = null, string collaborationBranch = null, string rootFolder = null, string lastCommitId = null, string hostName = null, string clientId = null, GitHubClientSecret clientSecret = null)
        {
            return new FactoryGitHubConfiguration("FactoryGitHubConfiguration", accountName, repositoryName, collaborationBranch, rootFolder, lastCommitId, hostName, clientId, clientSecret);
        }

        /// <summary> Initializes a new instance of FactoryPipelineReference. </summary>
        /// <param name="referenceType"> Pipeline reference type. </param>
        /// <param name="referenceName"> Reference pipeline name. </param>
        /// <param name="name"> Reference name. </param>
        /// <returns> A new <see cref="Models.FactoryPipelineReference"/> instance for mocking. </returns>
        public static FactoryPipelineReference FactoryPipelineReference(FactoryPipelineReferenceType referenceType = default, string referenceName = null, string name = null)
        {
            return new FactoryPipelineReference(referenceType, referenceName, name);
        }

        /// <summary> Initializes a new instance of TriggerPipelineReference. </summary>
        /// <param name="pipelineReference"> Pipeline reference. </param>
        /// <param name="parameters"> Pipeline parameters. </param>
        /// <returns> A new <see cref="Models.TriggerPipelineReference"/> instance for mocking. </returns>
        public static TriggerPipelineReference TriggerPipelineReference(FactoryPipelineReference pipelineReference = null, IDictionary<string, BinaryData> parameters = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();

            return new TriggerPipelineReference(pipelineReference, parameters);
        }

        /// <summary> Initializes a new instance of DatasetReference. </summary>
        /// <param name="referenceType"> Dataset reference type. </param>
        /// <param name="referenceName"> Reference dataset name. </param>
        /// <param name="parameters"> Arguments for dataset. </param>
        /// <returns> A new <see cref="Models.DatasetReference"/> instance for mocking. </returns>
        public static DatasetReference DatasetReference(DatasetReferenceType referenceType = default, string referenceName = null, IDictionary<string, BinaryData> parameters = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();

            return new DatasetReference(referenceType, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of DataFlowReference. </summary>
        /// <param name="referenceType"> Data flow reference type. </param>
        /// <param name="referenceName"> Reference data flow name. </param>
        /// <param name="datasetParameters"> Reference data flow parameters from dataset. </param>
        /// <param name="parameters"> Data flow parameters. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowReference"/> instance for mocking. </returns>
        public static DataFlowReference DataFlowReference(DataFlowReferenceType referenceType = default, string referenceName = null, BinaryData datasetParameters = null, IDictionary<string, BinaryData> parameters = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataFlowReference(referenceType, referenceName, datasetParameters, parameters, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryCredentialReference. </summary>
        /// <param name="referenceType"> Credential reference type. </param>
        /// <param name="referenceName"> Reference credential name. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FactoryCredentialReference"/> instance for mocking. </returns>
        public static FactoryCredentialReference FactoryCredentialReference(FactoryCredentialReferenceType referenceType = default, string referenceName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FactoryCredentialReference(referenceType, referenceName, additionalProperties);
        }

        /// <summary> Initializes a new instance of FactoryMappingDataFlowDefinition. </summary>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folderName"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <param name="sources"> List of sources in data flow. </param>
        /// <param name="sinks"> List of sinks in data flow. </param>
        /// <param name="transformations"> List of transformations in data flow. </param>
        /// <param name="script"> DataFlow script. </param>
        /// <param name="scriptLines"> Data flow script lines. </param>
        /// <returns> A new <see cref="Models.FactoryMappingDataFlowDefinition"/> instance for mocking. </returns>
        public static FactoryMappingDataFlowDefinition FactoryMappingDataFlowDefinition(string description = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IEnumerable<DataFlowSource> sources = null, IEnumerable<DataFlowSink> sinks = null, IEnumerable<DataFlowTransformation> transformations = null, string script = null, IEnumerable<string> scriptLines = null)
        {
            annotations ??= new List<BinaryData>();
            sources ??= new List<DataFlowSource>();
            sinks ??= new List<DataFlowSink>();
            transformations ??= new List<DataFlowTransformation>();
            scriptLines ??= new List<string>();

            return new FactoryMappingDataFlowDefinition("MappingDataFlow", description, annotations?.ToList(), new DataFlowFolder(folderName), sources?.ToList(), sinks?.ToList(), transformations?.ToList(), script, scriptLines?.ToList());
        }

        /// <summary> Initializes a new instance of DataFlowSource. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <returns> A new <see cref="Models.DataFlowSource"/> instance for mocking. </returns>
        public static DataFlowSource DataFlowSource(string name = null, string description = null, DatasetReference dataset = null, FactoryLinkedServiceReference linkedService = null, DataFlowReference flowlet = null, FactoryLinkedServiceReference schemaLinkedService = null)
        {
            return new DataFlowSource(name, description, dataset, linkedService, flowlet, schemaLinkedService);
        }

        /// <summary> Initializes a new instance of DataFlowTransformation. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <returns> A new <see cref="Models.DataFlowTransformation"/> instance for mocking. </returns>
        public static DataFlowTransformation DataFlowTransformation(string name = null, string description = null, DatasetReference dataset = null, FactoryLinkedServiceReference linkedService = null, DataFlowReference flowlet = null)
        {
            return new DataFlowTransformation(name, description, dataset, linkedService, flowlet);
        }

        /// <summary> Initializes a new instance of DataFlowSink. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <param name="rejectedDataLinkedService"> Rejected data linked service reference. </param>
        /// <returns> A new <see cref="Models.DataFlowSink"/> instance for mocking. </returns>
        public static DataFlowSink DataFlowSink(string name = null, string description = null, DatasetReference dataset = null, FactoryLinkedServiceReference linkedService = null, DataFlowReference flowlet = null, FactoryLinkedServiceReference schemaLinkedService = null, FactoryLinkedServiceReference rejectedDataLinkedService = null)
        {
            return new DataFlowSink(name, description, dataset, linkedService, flowlet, schemaLinkedService, rejectedDataLinkedService);
        }

        /// <summary> Initializes a new instance of FactoryFlowletDefinition. </summary>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folderName"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <param name="sources"> List of sources in Flowlet. </param>
        /// <param name="sinks"> List of sinks in Flowlet. </param>
        /// <param name="transformations"> List of transformations in Flowlet. </param>
        /// <param name="script"> Flowlet script. </param>
        /// <param name="scriptLines"> Flowlet script lines. </param>
        /// <returns> A new <see cref="Models.FactoryFlowletDefinition"/> instance for mocking. </returns>
        public static FactoryFlowletDefinition FactoryFlowletDefinition(string description = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IEnumerable<DataFlowSource> sources = null, IEnumerable<DataFlowSink> sinks = null, IEnumerable<DataFlowTransformation> transformations = null, string script = null, IEnumerable<string> scriptLines = null)
        {
            annotations ??= new List<BinaryData>();
            sources ??= new List<DataFlowSource>();
            sinks ??= new List<DataFlowSink>();
            transformations ??= new List<DataFlowTransformation>();
            scriptLines ??= new List<string>();

            return new FactoryFlowletDefinition("Flowlet", description, annotations?.ToList(), new DataFlowFolder(folderName), sources?.ToList(), sinks?.ToList(), transformations?.ToList(), script, scriptLines?.ToList());
        }

        /// <summary> Initializes a new instance of FactoryWranglingDataFlowDefinition. </summary>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folderName"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <param name="sources"> List of sources in Power Query. </param>
        /// <param name="script"> Power query mashup script. </param>
        /// <param name="documentLocale"> Locale of the Power query mashup document. </param>
        /// <returns> A new <see cref="Models.FactoryWranglingDataFlowDefinition"/> instance for mocking. </returns>
        public static FactoryWranglingDataFlowDefinition FactoryWranglingDataFlowDefinition(string description = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IEnumerable<PowerQuerySource> sources = null, string script = null, string documentLocale = null)
        {
            annotations ??= new List<BinaryData>();
            sources ??= new List<PowerQuerySource>();

            return new FactoryWranglingDataFlowDefinition("WranglingDataFlow", description, annotations?.ToList(), new DataFlowFolder(folderName), sources?.ToList(), script, documentLocale);
        }

        /// <summary> Initializes a new instance of PowerQuerySource. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <param name="script"> source script. </param>
        /// <returns> A new <see cref="Models.PowerQuerySource"/> instance for mocking. </returns>
        public static PowerQuerySource PowerQuerySource(string name = null, string description = null, DatasetReference dataset = null, FactoryLinkedServiceReference linkedService = null, DataFlowReference flowlet = null, FactoryLinkedServiceReference schemaLinkedService = null, string script = null)
        {
            return new PowerQuerySource(name, description, dataset, linkedService, flowlet, schemaLinkedService, script);
        }

        /// <summary> Initializes a new instance of PowerQuerySink. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <param name="rejectedDataLinkedService"> Rejected data linked service reference. </param>
        /// <param name="script"> sink script. </param>
        /// <returns> A new <see cref="Models.PowerQuerySink"/> instance for mocking. </returns>
        public static PowerQuerySink PowerQuerySink(string name = null, string description = null, DatasetReference dataset = null, FactoryLinkedServiceReference linkedService = null, DataFlowReference flowlet = null, FactoryLinkedServiceReference schemaLinkedService = null, FactoryLinkedServiceReference rejectedDataLinkedService = null, string script = null)
        {
            return new PowerQuerySink(name, description, dataset, linkedService, flowlet, schemaLinkedService, rejectedDataLinkedService, script);
        }

        /// <summary> Initializes a new instance of DatasetLocation. </summary>
        /// <param name="datasetLocationType"> Type of dataset storage location. </param>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetLocation"/> instance for mocking. </returns>
        public static DatasetLocation DatasetLocation(string datasetLocationType = null, BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownDatasetLocation(datasetLocationType, folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="container"> Specify the container of azure blob. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageLocation"/> instance for mocking. </returns>
        public static AzureBlobStorageLocation AzureBlobStorageLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData container = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobStorageLocation("AzureBlobStorageLocation", folderPath, fileName, additionalProperties, container);
        }

        /// <summary> Initializes a new instance of AzureBlobFSLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="fileSystem"> Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSLocation"/> instance for mocking. </returns>
        public static AzureBlobFSLocation AzureBlobFSLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData fileSystem = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSLocation("AzureBlobFSLocation", folderPath, fileName, additionalProperties, fileSystem);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreLocation"/> instance for mocking. </returns>
        public static AzureDataLakeStoreLocation AzureDataLakeStoreLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreLocation("AzureDataLakeStoreLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3Location. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of amazon S3. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of amazon S3. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3Location"/> instance for mocking. </returns>
        public static AmazonS3Location AmazonS3Location(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData bucketName = null, BinaryData version = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3Location("AmazonS3Location", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of FileServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FileServerLocation"/> instance for mocking. </returns>
        public static FileServerLocation FileServerLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileServerLocation("FileServerLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureFileStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureFileStorageLocation"/> instance for mocking. </returns>
        public static AzureFileStorageLocation AzureFileStorageLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFileStorageLocation("AzureFileStorageLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3CompatibleLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3CompatibleLocation"/> instance for mocking. </returns>
        public static AmazonS3CompatibleLocation AmazonS3CompatibleLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData bucketName = null, BinaryData version = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3CompatibleLocation("AmazonS3CompatibleLocation", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of OracleCloudStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleCloudStorageLocation"/> instance for mocking. </returns>
        public static OracleCloudStorageLocation OracleCloudStorageLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData bucketName = null, BinaryData version = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleCloudStorageLocation("OracleCloudStorageLocation", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageLocation"/> instance for mocking. </returns>
        public static GoogleCloudStorageLocation GoogleCloudStorageLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData bucketName = null, BinaryData version = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleCloudStorageLocation("GoogleCloudStorageLocation", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of FtpServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FtpServerLocation"/> instance for mocking. </returns>
        public static FtpServerLocation FtpServerLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FtpServerLocation("FtpServerLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of SftpLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SftpLocation"/> instance for mocking. </returns>
        public static SftpLocation SftpLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SftpLocation("SftpLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of HttpServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUri"> Specify the relativeUrl of http server. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HttpServerLocation"/> instance for mocking. </returns>
        public static HttpServerLocation HttpServerLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData relativeUri = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HttpServerLocation("HttpServerLocation", folderPath, fileName, additionalProperties, relativeUri);
        }

        /// <summary> Initializes a new instance of HdfsLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.HdfsLocation"/> instance for mocking. </returns>
        public static HdfsLocation HdfsLocation(BinaryData folderPath = null, BinaryData fileName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HdfsLocation("HdfsLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetStorageFormat. </summary>
        /// <param name="datasetStorageFormatType"> Type of dataset storage format. </param>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetStorageFormat"/> instance for mocking. </returns>
        public static DatasetStorageFormat DatasetStorageFormat(string datasetStorageFormatType = null, BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownDatasetStorageFormat(datasetStorageFormatType, serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetTextFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="columnDelimiter"> The column delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="rowDelimiter"> The row delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="escapeChar"> The escape character. Type: string (or Expression with resultType string). </param>
        /// <param name="quoteChar"> The quote character. Type: string (or Expression with resultType string). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="treatEmptyAsNull"> Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipLineCount"> The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.DatasetTextFormat"/> instance for mocking. </returns>
        public static DatasetTextFormat DatasetTextFormat(BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData columnDelimiter = null, BinaryData rowDelimiter = null, BinaryData escapeChar = null, BinaryData quoteChar = null, BinaryData nullValue = null, BinaryData encodingName = null, BinaryData treatEmptyAsNull = null, BinaryData skipLineCount = null, BinaryData firstRowAsHeader = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetTextFormat("TextFormat", serializer, deserializer, additionalProperties, columnDelimiter, rowDelimiter, escapeChar, quoteChar, nullValue, encodingName, treatEmptyAsNull, skipLineCount, firstRowAsHeader);
        }

        /// <summary> Initializes a new instance of DatasetJsonFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filePattern"> File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is &apos;setOfObjects&apos;. It is case-sensitive. </param>
        /// <param name="nestingSeparator"> The character used to separate nesting levels. Default value is &apos;.&apos; (dot). Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not provided, the default value is &apos;utf-8&apos;, unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the &apos;Name&apos; column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string). </param>
        /// <param name="jsonNodeReference"> The JSONPath of the JSON array element to be flattened. Example: &quot;$.ArrayPath&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="jsonPathDefinition"> The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with &quot;$&quot;; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {&quot;Column1&quot;: &quot;$.Column1Path&quot;, &quot;Column2&quot;: &quot;Column2PathInArray&quot;}. Type: object (or Expression with resultType object). </param>
        /// <returns> A new <see cref="Models.DatasetJsonFormat"/> instance for mocking. </returns>
        public static DatasetJsonFormat DatasetJsonFormat(BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData filePattern = null, BinaryData nestingSeparator = null, BinaryData encodingName = null, BinaryData jsonNodeReference = null, BinaryData jsonPathDefinition = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetJsonFormat("JsonFormat", serializer, deserializer, additionalProperties, filePattern, nestingSeparator, encodingName, jsonNodeReference, jsonPathDefinition);
        }

        /// <summary> Initializes a new instance of DatasetAvroFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetAvroFormat"/> instance for mocking. </returns>
        public static DatasetAvroFormat DatasetAvroFormat(BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetAvroFormat("AvroFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetOrcFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetOrcFormat"/> instance for mocking. </returns>
        public static DatasetOrcFormat DatasetOrcFormat(BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetOrcFormat("OrcFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetParquetFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetParquetFormat"/> instance for mocking. </returns>
        public static DatasetParquetFormat DatasetParquetFormat(BinaryData serializer = null, BinaryData deserializer = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetParquetFormat("ParquetFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetCompression. </summary>
        /// <param name="datasetCompressionType"> Type of dataset compression. Type: string (or Expression with resultType string). </param>
        /// <param name="level"> The dataset compression level. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetCompression"/> instance for mocking. </returns>
        public static DatasetCompression DatasetCompression(BinaryData datasetCompressionType = null, BinaryData level = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DatasetCompression(datasetCompressionType, level, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3Dataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> The name of the Amazon S3 bucket. Type: string (or Expression with resultType string). </param>
        /// <param name="key"> The key of the Amazon S3 object. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the S3 object name. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> The version for the S3 object. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of S3 object&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of S3 object&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the Amazon S3 object. </param>
        /// <returns> A new <see cref="Models.AmazonS3Dataset"/> instance for mocking. </returns>
        public static AmazonS3Dataset AmazonS3Dataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData bucketName = null, BinaryData key = null, BinaryData prefix = null, BinaryData version = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3Dataset("AmazonS3Object", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, bucketName, key, prefix, version, modifiedDatetimeStart, modifiedDatetimeEnd, format, compression);
        }

        /// <summary> Initializes a new instance of AvroDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the avro storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="avroCompressionCodec"> The data avroCompressionCodec. Type: string (or Expression with resultType string). </param>
        /// <param name="avroCompressionLevel"></param>
        /// <returns> A new <see cref="Models.AvroDataset"/> instance for mocking. </returns>
        public static AvroDataset AvroDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData avroCompressionCodec = null, int? avroCompressionLevel = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AvroDataset("Avro", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, avroCompressionCodec, avroCompressionLevel);
        }

        /// <summary> Initializes a new instance of ExcelDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the excel storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="sheetName"> The sheet name of excel file. Type: string (or Expression with resultType string). </param>
        /// <param name="sheetIndex"> The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer). </param>
        /// <param name="range"> The partial data of one sheet. Type: string (or Expression with resultType string). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ExcelDataset"/> instance for mocking. </returns>
        public static ExcelDataset ExcelDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData sheetName = null, BinaryData sheetIndex = null, BinaryData range = null, BinaryData firstRowAsHeader = null, DatasetCompression compression = null, BinaryData nullValue = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ExcelDataset("Excel", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, sheetName, sheetIndex, range, firstRowAsHeader, compression, nullValue);
        }

        /// <summary> Initializes a new instance of ParquetDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the parquet storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="compressionCodec"> The data compressionCodec. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ParquetDataset"/> instance for mocking. </returns>
        public static ParquetDataset ParquetDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData compressionCodec = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ParquetDataset("Parquet", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, compressionCodec);
        }

        /// <summary> Initializes a new instance of DelimitedTextDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the delimited text storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="columnDelimiter"> The column delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="rowDelimiter"> The row delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="compressionCodec"> The data compressionCodec. Type: string (or Expression with resultType string). </param>
        /// <param name="compressionLevel"> The data compression method used for DelimitedText. </param>
        /// <param name="quoteChar"> The quote character. Type: string (or Expression with resultType string). </param>
        /// <param name="escapeChar"> The escape character. Type: string (or Expression with resultType string). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DelimitedTextDataset"/> instance for mocking. </returns>
        public static DelimitedTextDataset DelimitedTextDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData columnDelimiter = null, BinaryData rowDelimiter = null, BinaryData encodingName = null, BinaryData compressionCodec = null, BinaryData compressionLevel = null, BinaryData quoteChar = null, BinaryData escapeChar = null, BinaryData firstRowAsHeader = null, BinaryData nullValue = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DelimitedTextDataset("DelimitedText", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, columnDelimiter, rowDelimiter, encodingName, compressionCodec, compressionLevel, quoteChar, escapeChar, firstRowAsHeader, nullValue);
        }

        /// <summary> Initializes a new instance of JsonDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the json data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <returns> A new <see cref="Models.JsonDataset"/> instance for mocking. </returns>
        public static JsonDataset JsonDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData encodingName = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonDataset("Json", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, encodingName, compression);
        }

        /// <summary> Initializes a new instance of XmlDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the json data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <returns> A new <see cref="Models.XmlDataset"/> instance for mocking. </returns>
        public static XmlDataset XmlDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData encodingName = null, BinaryData nullValue = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XmlDataset("Xml", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, encodingName, nullValue, compression);
        }

        /// <summary> Initializes a new instance of OrcDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the ORC data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="orcCompressionCodec"> The data orcCompressionCodec. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OrcDataset"/> instance for mocking. </returns>
        public static OrcDataset OrcDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, BinaryData orcCompressionCodec = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OrcDataset("Orc", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, orcCompressionCodec);
        }

        /// <summary> Initializes a new instance of BinaryDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLocation">
        /// The location of the Binary storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleLocation"/>, <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/>, <see cref="OracleCloudStorageLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the binary dataset. </param>
        /// <returns> A new <see cref="Models.BinaryDataset"/> instance for mocking. </returns>
        public static BinaryDataset BinaryDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, DatasetLocation dataLocation = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new BinaryDataset("Binary", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, dataLocation, compression);
        }

        /// <summary> Initializes a new instance of AzureBlobDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the Azure Blob storage. Type: string (or Expression with resultType string). </param>
        /// <param name="tableRootLocation"> The root of blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the Azure Blob. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of Azure Blob&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of Azure Blob&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Azure Blob storage.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the blob storage. </param>
        /// <returns> A new <see cref="Models.AzureBlobDataset"/> instance for mocking. </returns>
        public static AzureBlobDataset AzureBlobDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData folderPath = null, BinaryData tableRootLocation = null, BinaryData fileName = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobDataset("AzureBlob", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, folderPath, tableRootLocation, fileName, modifiedDatetimeStart, modifiedDatetimeEnd, format, compression);
        }

        /// <summary> Initializes a new instance of AzureTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Azure Table storage. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableDataset"/> instance for mocking. </returns>
        public static AzureTableDataset AzureTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureTableDataset("AzureTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlTableDataset"/> instance for mocking. </returns>
        public static AzureSqlTableDataset AzureSqlTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlTableDataset("AzureSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AzureSqlMITableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlMITableDataset"/> instance for mocking. </returns>
        public static AzureSqlMITableDataset AzureSqlMITableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlMITableDataset("AzureSqlMITable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AzureSqlDWTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlDWTableDataset"/> instance for mocking. </returns>
        public static AzureSqlDWTableDataset AzureSqlDWTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlDWTableDataset("AzureSqlDWTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of CassandraTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Cassandra database. Type: string (or Expression with resultType string). </param>
        /// <param name="keyspace"> The keyspace of the Cassandra database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CassandraTableDataset"/> instance for mocking. </returns>
        public static CassandraTableDataset CassandraTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData keyspace = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CassandraTableDataset("CassandraTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, keyspace);
        }

        /// <summary> Initializes a new instance of CustomDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties"> Custom dataset properties. </param>
        /// <returns> A new <see cref="Models.CustomDataset"/> instance for mocking. </returns>
        public static CustomDataset CustomDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData typeProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CustomDataset("CustomDataset", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlApiCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlApiCollectionDataset"/> instance for mocking. </returns>
        public static CosmosDBSqlApiCollectionDataset CosmosDBSqlApiCollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collectionName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBSqlApiCollectionDataset("CosmosDbSqlApiCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of DocumentDBCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> Document Database collection name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DocumentDBCollectionDataset"/> instance for mocking. </returns>
        public static DocumentDBCollectionDataset DocumentDBCollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collectionName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DocumentDBCollectionDataset("DocumentDbCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of DynamicsEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsEntityDataset"/> instance for mocking. </returns>
        public static DynamicsEntityDataset DynamicsEntityDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData entityName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsEntityDataset("DynamicsEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of DynamicsCrmEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmEntityDataset"/> instance for mocking. </returns>
        public static DynamicsCrmEntityDataset DynamicsCrmEntityDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData entityName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsCrmEntityDataset("DynamicsCrmEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsEntityDataset"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsEntityDataset CommonDataServiceForAppsEntityDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData entityName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CommonDataServiceForAppsEntityDataset("CommonDataServiceForAppsEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Data Lake Store.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the item(s) in the Azure Data Lake Store. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreDataset"/> instance for mocking. </returns>
        public static AzureDataLakeStoreDataset AzureDataLakeStoreDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData folderPath = null, BinaryData fileName = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreDataset("AzureDataLakeStoreFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, folderPath, fileName, format, compression);
        }

        /// <summary> Initializes a new instance of AzureBlobFSDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Azure Data Lake Storage Gen2 storage.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the blob storage. </param>
        /// <returns> A new <see cref="Models.AzureBlobFSDataset"/> instance for mocking. </returns>
        public static AzureBlobFSDataset AzureBlobFSDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData folderPath = null, BinaryData fileName = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSDataset("AzureBlobFSFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, folderPath, fileName, format, compression);
        }

        /// <summary> Initializes a new instance of Office365Dataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string). </param>
        /// <param name="predicate"> A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Office365Dataset"/> instance for mocking. </returns>
        public static Office365Dataset Office365Dataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData predicate = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Office365Dataset("Office365Table", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, predicate);
        }

        /// <summary> Initializes a new instance of FileShareDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the on-premises file system. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the on-premises file system. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="fileFilter"> Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the file system. </param>
        /// <returns> A new <see cref="Models.FileShareDataset"/> instance for mocking. </returns>
        public static FileShareDataset FileShareDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData folderPath = null, BinaryData fileName = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, DatasetStorageFormat format = null, BinaryData fileFilter = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileShareDataset("FileShare", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, folderPath, fileName, modifiedDatetimeStart, modifiedDatetimeEnd, format, fileFilter, compression);
        }

        /// <summary> Initializes a new instance of MongoDBCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> The table name of the MongoDB database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBCollectionDataset"/> instance for mocking. </returns>
        public static MongoDBCollectionDataset MongoDBCollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collectionName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBCollectionDataset("MongoDbCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of MongoDBAtlasCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBAtlasCollectionDataset"/> instance for mocking. </returns>
        public static MongoDBAtlasCollectionDataset MongoDBAtlasCollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collection = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBAtlasCollectionDataset("MongoDbAtlasCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of MongoDBV2CollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the MongoDB database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBV2CollectionDataset"/> instance for mocking. </returns>
        public static MongoDBV2CollectionDataset MongoDBV2CollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collection = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBV2CollectionDataset("MongoDbV2Collection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of CosmosDBMongoDBApiCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDBMongoDBApiCollectionDataset"/> instance for mocking. </returns>
        public static CosmosDBMongoDBApiCollectionDataset CosmosDBMongoDBApiCollectionDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData collection = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBMongoDBApiCollectionDataset("CosmosDbMongoDbApiCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of ODataResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The OData resource path. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ODataResourceDataset"/> instance for mocking. </returns>
        public static ODataResourceDataset ODataResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData path = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ODataResourceDataset("ODataResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, path);
        }

        /// <summary> Initializes a new instance of OracleTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the on-premises Oracle database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the on-premises Oracle database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleTableDataset"/> instance for mocking. </returns>
        public static OracleTableDataset OracleTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleTableDataset("OracleTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleTableDataset"/> instance for mocking. </returns>
        public static AmazonRdsForOracleTableDataset AmazonRdsForOracleTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRdsForOracleTableDataset("AmazonRdsForOracleTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of TeradataTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="database"> The database name of Teradata. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of Teradata. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataTableDataset"/> instance for mocking. </returns>
        public static TeradataTableDataset TeradataTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData database = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TeradataTableDataset("TeradataTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, database, table);
        }

        /// <summary> Initializes a new instance of AzureMySqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Azure MySQL database table name. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The name of Azure MySQL database table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlTableDataset"/> instance for mocking. </returns>
        public static AzureMySqlTableDataset AzureMySqlTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMySqlTableDataset("AzureMySqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The Amazon Redshift table name. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The Amazon Redshift schema name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftTableDataset"/> instance for mocking. </returns>
        public static AmazonRedshiftTableDataset AmazonRedshiftTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRedshiftTableDataset("AmazonRedshiftTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of Db2TableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The Db2 schema name. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The Db2 table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2TableDataset"/> instance for mocking. </returns>
        public static Db2TableDataset Db2TableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Db2TableDataset("Db2Table", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of RelationalTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The relational table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RelationalTableDataset"/> instance for mocking. </returns>
        public static RelationalTableDataset RelationalTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RelationalTableDataset("RelationalTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of InformixTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Informix table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixTableDataset"/> instance for mocking. </returns>
        public static InformixTableDataset InformixTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new InformixTableDataset("InformixTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of OdbcTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The ODBC table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcTableDataset"/> instance for mocking. </returns>
        public static OdbcTableDataset OdbcTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OdbcTableDataset("OdbcTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MySqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The MySQL table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlTableDataset"/> instance for mocking. </returns>
        public static MySqlTableDataset MySqlTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MySqlTableDataset("MySqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PostgreSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The PostgreSQL table name. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The PostgreSQL schema name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlTableDataset"/> instance for mocking. </returns>
        public static PostgreSqlTableDataset PostgreSqlTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PostgreSqlTableDataset("PostgreSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Microsoft Access table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessTableDataset"/> instance for mocking. </returns>
        public static MicrosoftAccessTableDataset MicrosoftAccessTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MicrosoftAccessTableDataset("MicrosoftAccessTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SalesforceObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="objectApiName"> The Salesforce object API name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceObjectDataset"/> instance for mocking. </returns>
        public static SalesforceObjectDataset SalesforceObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData objectApiName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceObjectDataset("SalesforceObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, objectApiName);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="objectApiName"> The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudObjectDataset"/> instance for mocking. </returns>
        public static SalesforceServiceCloudObjectDataset SalesforceServiceCloudObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData objectApiName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceServiceCloudObjectDataset("SalesforceServiceCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, objectApiName);
        }

        /// <summary> Initializes a new instance of SybaseTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Sybase table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseTableDataset"/> instance for mocking. </returns>
        public static SybaseTableDataset SybaseTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SybaseTableDataset("SybaseTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SapBwCubeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SapBwCubeDataset"/> instance for mocking. </returns>
        public static SapBwCubeDataset SapBwCubeDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapBwCubeDataset("SapBwCube", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerResourceDataset"/> instance for mocking. </returns>
        public static SapCloudForCustomerResourceDataset SapCloudForCustomerResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData path = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapCloudForCustomerResourceDataset("SapCloudForCustomerResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, path);
        }

        /// <summary> Initializes a new instance of SapEccResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the SAP ECC OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapEccResourceDataset"/> instance for mocking. </returns>
        public static SapEccResourceDataset SapEccResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData path = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapEccResourceDataset("SapEccResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, path);
        }

        /// <summary> Initializes a new instance of SapHanaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of SAP HANA. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of SAP HANA. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapHanaTableDataset"/> instance for mocking. </returns>
        public static SapHanaTableDataset SapHanaTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapHanaTableDataset("SapHanaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of SapOpenHubTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="openHubDestinationName"> The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string). </param>
        /// <param name="excludeLastRequest"> Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="baseRequestId"> The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). </param>
        /// <returns> A new <see cref="Models.SapOpenHubTableDataset"/> instance for mocking. </returns>
        public static SapOpenHubTableDataset SapOpenHubTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData openHubDestinationName = null, BinaryData excludeLastRequest = null, BinaryData baseRequestId = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOpenHubTableDataset("SapOpenHubTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, openHubDestinationName, excludeLastRequest, baseRequestId);
        }

        /// <summary> Initializes a new instance of SqlServerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlServerTableDataset"/> instance for mocking. </returns>
        public static SqlServerTableDataset SqlServerTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SqlServerTableDataset("SqlServerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerTableDataset"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerTableDataset AmazonRdsForSqlServerTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRdsForSqlServerTableDataset("AmazonRdsForSqlServerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of RestResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUri"> The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string). </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="paginationRules"> The pagination rules to compose next page requests. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RestResourceDataset"/> instance for mocking. </returns>
        public static RestResourceDataset RestResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData relativeUri = null, BinaryData requestMethod = null, BinaryData requestBody = null, BinaryData additionalHeaders = null, BinaryData paginationRules = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RestResourceDataset("RestResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, relativeUri, requestMethod, requestBody, additionalHeaders, paginationRules);
        }

        /// <summary> Initializes a new instance of SapTableResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The name of the SAP Table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTableResourceDataset"/> instance for mocking. </returns>
        public static SapTableResourceDataset SapTableResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapTableResourceDataset("SapTableResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SapOdpResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="context"> The context of the SAP ODP Object. Type: string (or Expression with resultType string). </param>
        /// <param name="objectName"> The name of the SAP ODP Object. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOdpResourceDataset"/> instance for mocking. </returns>
        public static SapOdpResourceDataset SapOdpResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData context = null, BinaryData objectName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOdpResourceDataset("SapOdpResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, context, objectName);
        }

        /// <summary> Initializes a new instance of WebTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="index"> The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="path"> The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.WebTableDataset"/> instance for mocking. </returns>
        public static WebTableDataset WebTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData index = null, BinaryData path = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WebTableDataset("WebTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, index, path);
        }

        /// <summary> Initializes a new instance of AzureSearchIndexDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="indexName"> The name of the Azure Search Index. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSearchIndexDataset"/> instance for mocking. </returns>
        public static AzureSearchIndexDataset AzureSearchIndexDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData indexName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSearchIndexDataset("AzureSearchIndex", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, indexName);
        }

        /// <summary> Initializes a new instance of HttpFileDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUri"> The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string). </param>
        /// <param name="requestMethod"> The HTTP method for the HTTP request. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The body for the HTTP request. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders">
        /// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
        /// ...
        /// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
        /// </param>
        /// <param name="format">
        /// The format of files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatasetAvroFormat"/>, <see cref="DatasetJsonFormat"/>, <see cref="DatasetOrcFormat"/>, <see cref="DatasetParquetFormat"/> and <see cref="DatasetTextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used on files. </param>
        /// <returns> A new <see cref="Models.HttpFileDataset"/> instance for mocking. </returns>
        public static HttpFileDataset HttpFileDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData relativeUri = null, BinaryData requestMethod = null, BinaryData requestBody = null, BinaryData additionalHeaders = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HttpFileDataset("HttpFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, relativeUri, requestMethod, requestBody, additionalHeaders, format, compression);
        }

        /// <summary> Initializes a new instance of AmazonMwsObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMwsObjectDataset"/> instance for mocking. </returns>
        public static AmazonMwsObjectDataset AmazonMwsObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonMwsObjectDataset("AmazonMWSObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlTableDataset"/> instance for mocking. </returns>
        public static AzurePostgreSqlTableDataset AzurePostgreSqlTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzurePostgreSqlTableDataset("AzurePostgreSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of ConcurObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurObjectDataset"/> instance for mocking. </returns>
        public static ConcurObjectDataset ConcurObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConcurObjectDataset("ConcurObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of CouchbaseTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseTableDataset"/> instance for mocking. </returns>
        public static CouchbaseTableDataset CouchbaseTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CouchbaseTableDataset("CouchbaseTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of DrillTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Drill. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Drill. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillTableDataset"/> instance for mocking. </returns>
        public static DrillTableDataset DrillTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DrillTableDataset("DrillTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of EloquaObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaObjectDataset"/> instance for mocking. </returns>
        public static EloquaObjectDataset EloquaObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new EloquaObjectDataset("EloquaObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of GoogleBigQueryObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using database + table properties instead. </param>
        /// <param name="table"> The table name of the Google BigQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="dataset"> The database name of the Google BigQuery. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQueryObjectDataset"/> instance for mocking. </returns>
        public static GoogleBigQueryObjectDataset GoogleBigQueryObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData dataset = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleBigQueryObjectDataset("GoogleBigQueryObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, dataset);
        }

        /// <summary> Initializes a new instance of GreenplumTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of Greenplum. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of Greenplum. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumTableDataset"/> instance for mocking. </returns>
        public static GreenplumTableDataset GreenplumTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GreenplumTableDataset("GreenplumTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of HBaseObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseObjectDataset"/> instance for mocking. </returns>
        public static HBaseObjectDataset HBaseObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HBaseObjectDataset("HBaseObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of HiveObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Hive. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Hive. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveObjectDataset"/> instance for mocking. </returns>
        public static HiveObjectDataset HiveObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HiveObjectDataset("HiveObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of HubspotObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotObjectDataset"/> instance for mocking. </returns>
        public static HubspotObjectDataset HubspotObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HubspotObjectDataset("HubspotObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ImpalaObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Impala. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Impala. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaObjectDataset"/> instance for mocking. </returns>
        public static ImpalaObjectDataset ImpalaObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ImpalaObjectDataset("ImpalaObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of JiraObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraObjectDataset"/> instance for mocking. </returns>
        public static JiraObjectDataset JiraObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JiraObjectDataset("JiraObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MagentoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoObjectDataset"/> instance for mocking. </returns>
        public static MagentoObjectDataset MagentoObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MagentoObjectDataset("MagentoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MariaDBTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBTableDataset"/> instance for mocking. </returns>
        public static MariaDBTableDataset MariaDBTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MariaDBTableDataset("MariaDBTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureMariaDBTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBTableDataset"/> instance for mocking. </returns>
        public static AzureMariaDBTableDataset AzureMariaDBTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMariaDBTableDataset("AzureMariaDBTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MarketoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoObjectDataset"/> instance for mocking. </returns>
        public static MarketoObjectDataset MarketoObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MarketoObjectDataset("MarketoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PaypalObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalObjectDataset"/> instance for mocking. </returns>
        public static PaypalObjectDataset PaypalObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PaypalObjectDataset("PaypalObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PhoenixObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Phoenix. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Phoenix. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixObjectDataset"/> instance for mocking. </returns>
        public static PhoenixObjectDataset PhoenixObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PhoenixObjectDataset("PhoenixObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of PrestoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Presto. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Presto. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoObjectDataset"/> instance for mocking. </returns>
        public static PrestoObjectDataset PrestoObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PrestoObjectDataset("PrestoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of QuickBooksObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksObjectDataset"/> instance for mocking. </returns>
        public static QuickBooksObjectDataset QuickBooksObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QuickBooksObjectDataset("QuickBooksObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ServiceNowObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowObjectDataset"/> instance for mocking. </returns>
        public static ServiceNowObjectDataset ServiceNowObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ServiceNowObjectDataset("ServiceNowObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ShopifyObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifyObjectDataset"/> instance for mocking. </returns>
        public static ShopifyObjectDataset ShopifyObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ShopifyObjectDataset("ShopifyObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SparkObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Spark. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Spark. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkObjectDataset"/> instance for mocking. </returns>
        public static SparkObjectDataset SparkObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SparkObjectDataset("SparkObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of SquareObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareObjectDataset"/> instance for mocking. </returns>
        public static SquareObjectDataset SquareObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SquareObjectDataset("SquareObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of XeroObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroObjectDataset"/> instance for mocking. </returns>
        public static XeroObjectDataset XeroObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XeroObjectDataset("XeroObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ZohoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoObjectDataset"/> instance for mocking. </returns>
        public static ZohoObjectDataset ZohoObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ZohoObjectDataset("ZohoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of NetezzaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Netezza. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Netezza. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaTableDataset"/> instance for mocking. </returns>
        public static NetezzaTableDataset NetezzaTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new NetezzaTableDataset("NetezzaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of VerticaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Vertica. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Vertica. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaTableDataset"/> instance for mocking. </returns>
        public static VerticaTableDataset VerticaTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null, BinaryData table = null, BinaryData schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new VerticaTableDataset("VerticaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudObjectDataset"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudObjectDataset SalesforceMarketingCloudObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceMarketingCloudObjectDataset("SalesforceMarketingCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ResponsysObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysObjectDataset"/> instance for mocking. </returns>
        public static ResponsysObjectDataset ResponsysObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ResponsysObjectDataset("ResponsysObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of DynamicsAXResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsAXResourceDataset"/> instance for mocking. </returns>
        public static DynamicsAXResourceDataset DynamicsAXResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData path = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsAXResourceDataset("DynamicsAXResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, path);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudObjectDataset"/> instance for mocking. </returns>
        public static OracleServiceCloudObjectDataset OracleServiceCloudObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleServiceCloudObjectDataset("OracleServiceCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="table"> The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerTableDataset"/> instance for mocking. </returns>
        public static AzureDataExplorerTableDataset AzureDataExplorerTableDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataExplorerTableDataset("AzureDataExplorerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, table);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsObjectDataset"/> instance for mocking. </returns>
        public static GoogleAdWordsObjectDataset GoogleAdWordsObjectDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData tableName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleAdWordsObjectDataset("GoogleAdWordsObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SnowflakeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Snowflake database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Snowflake database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SnowflakeDataset"/> instance for mocking. </returns>
        public static SnowflakeDataset SnowflakeDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData schemaTypePropertiesSchema = null, BinaryData table = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SnowflakeDataset("SnowflakeTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="listName"> The name of the SharePoint Online list. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListResourceDataset"/> instance for mocking. </returns>
        public static SharePointOnlineListResourceDataset SharePointOnlineListResourceDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData listName = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SharePointOnlineListResourceDataset("SharePointOnlineListResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, listName);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folderName"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="table"> The name of delta table. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> The database name of delta table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeDataset"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeDataset AzureDatabricksDeltaLakeDataset(string description = null, BinaryData structure = null, BinaryData schema = null, FactoryLinkedServiceReference linkedServiceName = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, string folderName = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData table = null, BinaryData database = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeDataset("AzureDatabricksDeltaLakeDataset", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), new DatasetFolder(folderName), additionalProperties, table, database);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="state"> Integration runtime state, only valid for managed dedicated integration runtime. </param>
        /// <param name="managedVirtualNetwork"> Managed Virtual Network reference. </param>
        /// <param name="computeProperties"> The compute resource for managed integration runtime. </param>
        /// <param name="ssisProperties"> SSIS properties for managed integration runtime. </param>
        /// <param name="customerVirtualNetworkSubnetId"> The name of virtual network to which Azure-SSIS integration runtime will join. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntime"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntime ManagedIntegrationRuntime(string description = null, IDictionary<string, BinaryData> additionalProperties = null, IntegrationRuntimeState? state = null, ManagedVirtualNetworkReference managedVirtualNetwork = null, IntegrationRuntimeComputeProperties computeProperties = null, IntegrationRuntimeSsisProperties ssisProperties = null, ResourceIdentifier customerVirtualNetworkSubnetId = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntime("Managed", description, additionalProperties, state, managedVirtualNetwork, computeProperties, ssisProperties, new IntegrationRuntimeCustomerVirtualNetwork(customerVirtualNetworkSubnetId));
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeComputeProperties. </summary>
        /// <param name="location"> The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities. </param>
        /// <param name="nodeSize"> The node size requirement to managed integration runtime. </param>
        /// <param name="numberOfNodes"> The required number of nodes for managed integration runtime. </param>
        /// <param name="maxParallelExecutionsPerNode"> Maximum parallel executions count per node for managed integration runtime. </param>
        /// <param name="dataFlowProperties"> Data flow properties for managed integration runtime. </param>
        /// <param name="vNetProperties"> VNet properties for managed integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeComputeProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeComputeProperties IntegrationRuntimeComputeProperties(AzureLocation? location = null, string nodeSize = null, int? numberOfNodes = null, int? maxParallelExecutionsPerNode = null, IntegrationRuntimeDataFlowProperties dataFlowProperties = null, IntegrationRuntimeVNetProperties vNetProperties = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeComputeProperties(location, nodeSize, numberOfNodes, maxParallelExecutionsPerNode, dataFlowProperties, vNetProperties, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataFlowProperties. </summary>
        /// <param name="computeType"> Compute type of the cluster which will execute data flow job. </param>
        /// <param name="coreCount"> Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. </param>
        /// <param name="timeToLiveInMinutes"> Time to live (in minutes) setting of the cluster which will execute data flow job. </param>
        /// <param name="shouldCleanupAfterTtl"> Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataFlowProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataFlowProperties IntegrationRuntimeDataFlowProperties(DataFlowComputeType? computeType = null, int? coreCount = null, int? timeToLiveInMinutes = null, bool? shouldCleanupAfterTtl = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeDataFlowProperties(computeType, coreCount, timeToLiveInMinutes, shouldCleanupAfterTtl, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeVNetProperties. </summary>
        /// <param name="vnetId"> The ID of the VNet that this integration runtime will join. </param>
        /// <param name="subnet"> The name of the subnet this integration runtime will join. </param>
        /// <param name="publicIPs"> Resource IDs of the public IP addresses that this integration runtime will use. </param>
        /// <param name="subnetId"> The ID of subnet, to which this Azure-SSIS integration runtime will be joined. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeVNetProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeVNetProperties IntegrationRuntimeVNetProperties(Guid? vnetId = null, string subnet = null, IEnumerable<string> publicIPs = null, ResourceIdentifier subnetId = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            publicIPs ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeVNetProperties(vnetId, subnet, publicIPs?.ToList(), subnetId, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisProperties. </summary>
        /// <param name="catalogInfo"> Catalog information for managed dedicated integration runtime. </param>
        /// <param name="licenseType"> License type for bringing your own license scenario. </param>
        /// <param name="customSetupScriptProperties"> Custom setup script properties for a managed dedicated integration runtime. </param>
        /// <param name="dataProxyProperties"> Data proxy properties for a managed dedicated integration runtime. </param>
        /// <param name="edition"> The edition for the SSIS Integration Runtime. </param>
        /// <param name="expressCustomSetupProperties">
        /// Custom setup without script properties for a SSIS integration runtime.
        /// Please note <see cref="CustomSetupBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzPowerShellSetup"/>, <see cref="CmdkeySetup"/>, <see cref="ComponentSetup"/> and <see cref="EnvironmentVariableSetup"/>.
        /// </param>
        /// <param name="packageStores"> Package stores for the SSIS Integration Runtime. </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisProperties IntegrationRuntimeSsisProperties(IntegrationRuntimeSsisCatalogInfo catalogInfo = null, IntegrationRuntimeLicenseType? licenseType = null, IntegrationRuntimeCustomSetupScriptProperties customSetupScriptProperties = null, IntegrationRuntimeDataProxyProperties dataProxyProperties = null, IntegrationRuntimeEdition? edition = null, IEnumerable<CustomSetupBase> expressCustomSetupProperties = null, IEnumerable<IntegrationRuntimeSsisPackageStore> packageStores = null, FactoryCredentialReference credential = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            expressCustomSetupProperties ??= new List<CustomSetupBase>();
            packageStores ??= new List<IntegrationRuntimeSsisPackageStore>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeSsisProperties(catalogInfo, licenseType, customSetupScriptProperties, dataProxyProperties, edition, expressCustomSetupProperties?.ToList(), packageStores?.ToList(), credential, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisCatalogInfo. </summary>
        /// <param name="catalogServerEndpoint"> The catalog database server URL. </param>
        /// <param name="catalogAdminUserName"> The administrator user name of catalog database. </param>
        /// <param name="catalogAdminPassword"> The password of the administrator user account of the catalog database. </param>
        /// <param name="catalogPricingTier"> The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/. </param>
        /// <param name="dualStandbyPairName"> The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisCatalogInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisCatalogInfo IntegrationRuntimeSsisCatalogInfo(string catalogServerEndpoint = null, string catalogAdminUserName = null, FactorySecretString catalogAdminPassword = null, IntegrationRuntimeSsisCatalogPricingTier? catalogPricingTier = null, string dualStandbyPairName = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeSsisCatalogInfo(catalogServerEndpoint, catalogAdminUserName, catalogAdminPassword, catalogPricingTier, dualStandbyPairName, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeCustomSetupScriptProperties. </summary>
        /// <param name="blobContainerUri"> The URI of the Azure blob container that contains the custom setup script. </param>
        /// <param name="sasToken"> The SAS token of the Azure blob container. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeCustomSetupScriptProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeCustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptProperties(Uri blobContainerUri = null, FactorySecretString sasToken = null)
        {
            return new IntegrationRuntimeCustomSetupScriptProperties(blobContainerUri, sasToken);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataProxyProperties. </summary>
        /// <param name="connectVia"> The self-hosted integration runtime reference. </param>
        /// <param name="stagingLinkedService"> The staging linked service reference. </param>
        /// <param name="path"> The path to contain the staged data in the Blob storage. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataProxyProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataProxyProperties IntegrationRuntimeDataProxyProperties(EntityReference connectVia = null, EntityReference stagingLinkedService = null, string path = null)
        {
            return new IntegrationRuntimeDataProxyProperties(connectVia, stagingLinkedService, path);
        }

        /// <summary> Initializes a new instance of EntityReference. </summary>
        /// <param name="integrationRuntimeEntityReferenceType"> The type of this referenced entity. </param>
        /// <param name="referenceName"> The name of this referenced entity. </param>
        /// <returns> A new <see cref="Models.EntityReference"/> instance for mocking. </returns>
        public static EntityReference EntityReference(IntegrationRuntimeEntityReferenceType? integrationRuntimeEntityReferenceType = null, string referenceName = null)
        {
            return new EntityReference(integrationRuntimeEntityReferenceType, referenceName);
        }

        /// <summary> Initializes a new instance of CustomSetupBase. </summary>
        /// <param name="customSetupBaseType"> The type of custom setup. </param>
        /// <returns> A new <see cref="Models.CustomSetupBase"/> instance for mocking. </returns>
        public static CustomSetupBase CustomSetupBase(string customSetupBaseType = null)
        {
            return new UnknownCustomSetupBase(customSetupBaseType);
        }

        /// <summary> Initializes a new instance of CmdkeySetup. </summary>
        /// <param name="targetName"> The server name of data source access. </param>
        /// <param name="userName"> The user name of data source access. </param>
        /// <param name="password">
        /// The password of data source access.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.CmdkeySetup"/> instance for mocking. </returns>
        public static CmdkeySetup CmdkeySetup(BinaryData targetName = null, BinaryData userName = null, FactorySecretBaseDefinition password = null)
        {
            return new CmdkeySetup("CmdkeySetup", targetName, userName, password);
        }

        /// <summary> Initializes a new instance of EnvironmentVariableSetup. </summary>
        /// <param name="variableName"> The name of the environment variable. </param>
        /// <param name="variableValue"> The value of the environment variable. </param>
        /// <returns> A new <see cref="Models.EnvironmentVariableSetup"/> instance for mocking. </returns>
        public static EnvironmentVariableSetup EnvironmentVariableSetup(string variableName = null, string variableValue = null)
        {
            return new EnvironmentVariableSetup("EnvironmentVariableSetup", variableName, variableValue);
        }

        /// <summary> Initializes a new instance of ComponentSetup. </summary>
        /// <param name="componentName"> The name of the 3rd party component. </param>
        /// <param name="licenseKey">
        /// The license key to activate the component.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ComponentSetup"/> instance for mocking. </returns>
        public static ComponentSetup ComponentSetup(string componentName = null, FactorySecretBaseDefinition licenseKey = null)
        {
            return new ComponentSetup("ComponentSetup", componentName, licenseKey);
        }

        /// <summary> Initializes a new instance of AzPowerShellSetup. </summary>
        /// <param name="version"> The required version of Azure PowerShell to install. </param>
        /// <returns> A new <see cref="Models.AzPowerShellSetup"/> instance for mocking. </returns>
        public static AzPowerShellSetup AzPowerShellSetup(string version = null)
        {
            return new AzPowerShellSetup("AzPowerShellSetup", version);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedInfo">
        /// The base definition of a linked integration runtime.
        /// Please note <see cref="LinkedIntegrationRuntimeType"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LinkedIntegrationRuntimeKeyAuthorization"/> and <see cref="LinkedIntegrationRuntimeRbacAuthorization"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntime"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntime SelfHostedIntegrationRuntime(string description = null, IDictionary<string, BinaryData> additionalProperties = null, LinkedIntegrationRuntimeType linkedInfo = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SelfHostedIntegrationRuntime("SelfHosted", description, additionalProperties, linkedInfo);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeType. </summary>
        /// <param name="authorizationType"> The authorization type for integration runtime sharing. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeType"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeType LinkedIntegrationRuntimeType(string authorizationType = null)
        {
            return new UnknownLinkedIntegrationRuntimeType(authorizationType);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeKeyAuthorization. </summary>
        /// <param name="key"> The key used for authorization. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeKeyAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeKeyAuthorization LinkedIntegrationRuntimeKeyAuthorization(FactorySecretString key = null)
        {
            return new LinkedIntegrationRuntimeKeyAuthorization("Key", key);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeRbacAuthorization. </summary>
        /// <param name="resourceId"> The resource identifier of the integration runtime to be shared. </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeRbacAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeRbacAuthorization LinkedIntegrationRuntimeRbacAuthorization(string resourceId = null, FactoryCredentialReference credential = null)
        {
            return new LinkedIntegrationRuntimeRbacAuthorization("RBAC", resourceId, credential);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createdOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="nodes"> The list of nodes for managed integration runtime. </param>
        /// <param name="otherErrors"> The errors that occurred on this integration runtime. </param>
        /// <param name="lastOperation"> The last operation result that occurred on this integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeStatus ManagedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createdOn = null, IEnumerable<ManagedIntegrationRuntimeNode> nodes = null, IEnumerable<ManagedIntegrationRuntimeError> otherErrors = null, ManagedIntegrationRuntimeOperationResult lastOperation = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<ManagedIntegrationRuntimeNode>();
            otherErrors ??= new List<ManagedIntegrationRuntimeError>();

            return new ManagedIntegrationRuntimeStatus("Managed", dataFactoryName, state, additionalProperties, createdOn, nodes?.ToList(), otherErrors?.ToList(), lastOperation);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeNode. </summary>
        /// <param name="nodeId"> The managed integration runtime node id. </param>
        /// <param name="status"> The managed integration runtime node status. </param>
        /// <param name="errors"> The errors that occurred on this integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeNode ManagedIntegrationRuntimeNode(string nodeId = null, ManagedIntegrationRuntimeNodeStatus? status = null, IEnumerable<ManagedIntegrationRuntimeError> errors = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            errors ??= new List<ManagedIntegrationRuntimeError>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeNode(nodeId, status, errors?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeError. </summary>
        /// <param name="time"> The time when the error occurred. </param>
        /// <param name="code"> Error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeError"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeError ManagedIntegrationRuntimeError(DateTimeOffset? time = null, string code = null, IEnumerable<string> parameters = null, string message = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeError(time, code, parameters?.ToList(), message, additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeOperationResult. </summary>
        /// <param name="managedIntegrationRuntimeOperationResultType"> The operation type. Could be start or stop. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="result"> The operation result. </param>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="activityId"> The activity id for the operation request. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeOperationResult"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeOperationResult ManagedIntegrationRuntimeOperationResult(string managedIntegrationRuntimeOperationResultType = null, DateTimeOffset? startOn = null, string result = null, string errorCode = null, IEnumerable<string> parameters = null, string activityId = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeOperationResult(managedIntegrationRuntimeOperationResultType, startOn, result, errorCode, parameters?.ToList(), activityId, additionalProperties);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The data factory name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createdOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="taskQueueId"> The task queue id of the integration runtime. </param>
        /// <param name="internalChannelEncryption"> It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist). </param>
        /// <param name="version"> Version of the integration runtime. </param>
        /// <param name="nodes"> The list of nodes for this integration runtime. </param>
        /// <param name="scheduledUpdateOn"> The date at which the integration runtime will be scheduled to update, in ISO8601 format. </param>
        /// <param name="updateDelayOffset"> The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours. </param>
        /// <param name="localTimeZoneOffset"> The local time zone offset in hours. </param>
        /// <param name="capabilities"> Object with additional information about integration runtime capabilities. </param>
        /// <param name="serviceUris"> The URLs for the services used in integration runtime backend service. </param>
        /// <param name="autoUpdate"> Whether Self-hosted integration runtime auto update has been turned on. </param>
        /// <param name="versionStatus"> Status of the integration runtime version. </param>
        /// <param name="links"> The list of linked integration runtimes that are created to share with this integration runtime. </param>
        /// <param name="pushedVersion"> The version that the integration runtime is going to update to. </param>
        /// <param name="latestVersion"> The latest version on download center. </param>
        /// <param name="autoUpdateEta"> The estimated time when the self-hosted integration runtime will be updated. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeStatus SelfHostedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createdOn = null, Guid? taskQueueId = null, IntegrationRuntimeInternalChannelEncryptionMode? internalChannelEncryption = null, string version = null, IEnumerable<SelfHostedIntegrationRuntimeNode> nodes = null, DateTimeOffset? scheduledUpdateOn = null, TimeSpan? updateDelayOffset = null, TimeSpan? localTimeZoneOffset = null, IReadOnlyDictionary<string, string> capabilities = null, IEnumerable<Uri> serviceUris = null, IntegrationRuntimeAutoUpdate? autoUpdate = null, string versionStatus = null, IEnumerable<LinkedIntegrationRuntime> links = null, string pushedVersion = null, string latestVersion = null, DateTimeOffset? autoUpdateEta = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<SelfHostedIntegrationRuntimeNode>();
            capabilities ??= new Dictionary<string, string>();
            serviceUris ??= new List<Uri>();
            links ??= new List<LinkedIntegrationRuntime>();

            return new SelfHostedIntegrationRuntimeStatus("SelfHosted", dataFactoryName, state, additionalProperties, createdOn, taskQueueId, internalChannelEncryption, version, nodes?.ToList(), scheduledUpdateOn, updateDelayOffset, localTimeZoneOffset, capabilities, serviceUris?.ToList(), autoUpdate, versionStatus, links?.ToList(), pushedVersion, latestVersion, autoUpdateEta);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntime. </summary>
        /// <param name="name"> The name of the linked integration runtime. </param>
        /// <param name="subscriptionId"> The subscription ID for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryName"> The name of the data factory for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryLocation"> The location of the data factory for which the linked integration runtime belong to. </param>
        /// <param name="createdOn"> The creating time of the linked integration runtime. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntime"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntime LinkedIntegrationRuntime(string name = null, string subscriptionId = null, string dataFactoryName = null, AzureLocation? dataFactoryLocation = null, DateTimeOffset? createdOn = null)
        {
            return new LinkedIntegrationRuntime(name, subscriptionId, dataFactoryName, dataFactoryLocation, createdOn);
        }

        /// <summary> Initializes a new instance of SsisFolder. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisFolder"/> instance for mocking. </returns>
        public static SsisFolder SsisFolder(long? id = null, string name = null, string description = null)
        {
            return new SsisFolder("Folder", id, name, description);
        }

        /// <summary> Initializes a new instance of SsisProject. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains project. </param>
        /// <param name="version"> Project version. </param>
        /// <param name="environmentRefs"> Environment reference in project. </param>
        /// <param name="parameters"> Parameters in project. </param>
        /// <returns> A new <see cref="Models.SsisProject"/> instance for mocking. </returns>
        public static SsisProject SsisProject(long? id = null, string name = null, string description = null, long? folderId = null, long? version = null, IEnumerable<SsisEnvironmentReference> environmentRefs = null, IEnumerable<SsisParameterInfo> parameters = null)
        {
            environmentRefs ??= new List<SsisEnvironmentReference>();
            parameters ??= new List<SsisParameterInfo>();

            return new SsisProject("Project", id, name, description, folderId, version, environmentRefs?.ToList(), parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironmentReference. </summary>
        /// <param name="id"> Environment reference id. </param>
        /// <param name="environmentFolderName"> Environment folder name. </param>
        /// <param name="environmentName"> Environment name. </param>
        /// <param name="referenceType"> Reference type. </param>
        /// <returns> A new <see cref="Models.SsisEnvironmentReference"/> instance for mocking. </returns>
        public static SsisEnvironmentReference SsisEnvironmentReference(long? id = null, string environmentFolderName = null, string environmentName = null, string referenceType = null)
        {
            return new SsisEnvironmentReference(id, environmentFolderName, environmentName, referenceType);
        }

        /// <summary> Initializes a new instance of SsisParameterInfo. </summary>
        /// <param name="id"> Parameter id. </param>
        /// <param name="name"> Parameter name. </param>
        /// <param name="description"> Parameter description. </param>
        /// <param name="dataType"> Parameter type. </param>
        /// <param name="isRequired"> Whether parameter is required. </param>
        /// <param name="isSensitive"> Whether parameter is sensitive. </param>
        /// <param name="designDefaultValue"> Design default value of parameter. </param>
        /// <param name="defaultValue"> Default value of parameter. </param>
        /// <param name="sensitiveDefaultValue"> Default sensitive value of parameter. </param>
        /// <param name="valueType"> Parameter value type. </param>
        /// <param name="hasValueSet"> Parameter value set. </param>
        /// <param name="variable"> Parameter reference variable. </param>
        /// <returns> A new <see cref="Models.SsisParameterInfo"/> instance for mocking. </returns>
        public static SsisParameterInfo SsisParameterInfo(long? id = null, string name = null, string description = null, string dataType = null, bool? isRequired = null, bool? isSensitive = null, string designDefaultValue = null, string defaultValue = null, string sensitiveDefaultValue = null, string valueType = null, bool? hasValueSet = null, string variable = null)
        {
            return new SsisParameterInfo(id, name, description, dataType, isRequired, isSensitive, designDefaultValue, defaultValue, sensitiveDefaultValue, valueType, hasValueSet, variable);
        }

        /// <summary> Initializes a new instance of SsisPackage. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains package. </param>
        /// <param name="projectVersion"> Project version which contains package. </param>
        /// <param name="projectId"> Project id which contains package. </param>
        /// <param name="parameters"> Parameters in package. </param>
        /// <returns> A new <see cref="Models.SsisPackage"/> instance for mocking. </returns>
        public static SsisPackage SsisPackage(long? id = null, string name = null, string description = null, long? folderId = null, long? projectVersion = null, long? projectId = null, IEnumerable<SsisParameterInfo> parameters = null)
        {
            parameters ??= new List<SsisParameterInfo>();

            return new SsisPackage("Package", id, name, description, folderId, projectVersion, projectId, parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironment. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains environment. </param>
        /// <param name="variables"> Variable in environment. </param>
        /// <returns> A new <see cref="Models.SsisEnvironment"/> instance for mocking. </returns>
        public static SsisEnvironment SsisEnvironment(long? id = null, string name = null, string description = null, long? folderId = null, IEnumerable<SsisVariable> variables = null)
        {
            variables ??= new List<SsisVariable>();

            return new SsisEnvironment("Environment", id, name, description, folderId, variables?.ToList());
        }

        /// <summary> Initializes a new instance of SsisVariable. </summary>
        /// <param name="id"> Variable id. </param>
        /// <param name="name"> Variable name. </param>
        /// <param name="description"> Variable description. </param>
        /// <param name="dataType"> Variable type. </param>
        /// <param name="isSensitive"> Whether variable is sensitive. </param>
        /// <param name="value"> Variable value. </param>
        /// <param name="sensitiveValue"> Variable sensitive value. </param>
        /// <returns> A new <see cref="Models.SsisVariable"/> instance for mocking. </returns>
        public static SsisVariable SsisVariable(long? id = null, string name = null, string description = null, string dataType = null, bool? isSensitive = null, string value = null, string sensitiveValue = null)
        {
            return new SsisVariable(id, name, description, dataType, isSensitive, value, sensitiveValue);
        }

        /// <summary> Initializes a new instance of AzureStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureStorageLinkedService"/> instance for mocking. </returns>
        public static AzureStorageLinkedService AzureStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference accountKey = null, BinaryData sasUri = null, AzureKeyVaultSecretReference sasToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureStorageLinkedService("AzureStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="serviceEndpoint"> Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKind"> Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageLinkedService"/> instance for mocking. </returns>
        public static AzureBlobStorageLinkedService AzureBlobStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference accountKey = null, BinaryData sasUri = null, AzureKeyVaultSecretReference sasToken = null, string serviceEndpoint = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, string accountKind = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobStorageLinkedService("AzureBlobStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, serviceEndpoint, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, accountKind, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of AzureTableStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableStorageLinkedService"/> instance for mocking. </returns>
        public static AzureTableStorageLinkedService AzureTableStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference accountKey = null, BinaryData sasUri = null, AzureKeyVaultSecretReference sasToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureTableStorageLinkedService("AzureTableStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureSqlDWLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureSqlDWLinkedService"/> instance for mocking. </returns>
        public static AzureSqlDWLinkedService AzureSqlDWLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlDWLinkedService("AzureSqlDW", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of SqlServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="userName"> The on-premises Windows authentication user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The on-premises Windows authentication password.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="alwaysEncryptedSettings"> Sql always encrypted properties. </param>
        /// <returns> A new <see cref="Models.SqlServerLinkedService"/> instance for mocking. </returns>
        public static SqlServerLinkedService SqlServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null, SqlAlwaysEncryptedProperties alwaysEncryptedSettings = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SqlServerLinkedService("SqlServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, userName, password, encryptedCredential, alwaysEncryptedSettings);
        }

        /// <summary> Initializes a new instance of SqlAlwaysEncryptedProperties. </summary>
        /// <param name="alwaysEncryptedAkvAuthType"> Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure Key Vault.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.SqlAlwaysEncryptedProperties"/> instance for mocking. </returns>
        public static SqlAlwaysEncryptedProperties SqlAlwaysEncryptedProperties(SqlAlwaysEncryptedAkvAuthType alwaysEncryptedAkvAuthType = default, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, FactoryCredentialReference credential = null)
        {
            return new SqlAlwaysEncryptedProperties(alwaysEncryptedAkvAuthType, servicePrincipalId, servicePrincipalKey, credential);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="userName"> The on-premises Windows authentication user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The on-premises Windows authentication password.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="alwaysEncryptedSettings"> Sql always encrypted properties. </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerLinkedService"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerLinkedService AmazonRdsForSqlServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null, SqlAlwaysEncryptedProperties alwaysEncryptedSettings = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRdsForSqlServerLinkedService("AmazonRdsForSqlServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, userName, password, encryptedCredential, alwaysEncryptedSettings);
        }

        /// <summary> Initializes a new instance of AzureSqlDatabaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Database.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="alwaysEncryptedSettings"> Sql always encrypted properties. </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureSqlDatabaseLinkedService"/> instance for mocking. </returns>
        public static AzureSqlDatabaseLinkedService AzureSqlDatabaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData encryptedCredential = null, SqlAlwaysEncryptedProperties alwaysEncryptedSettings = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlDatabaseLinkedService("AzureSqlDatabase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential, alwaysEncryptedSettings, credential);
        }

        /// <summary> Initializes a new instance of AzureSqlMILinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Managed Instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="alwaysEncryptedSettings"> Sql always encrypted properties. </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureSqlMILinkedService"/> instance for mocking. </returns>
        public static AzureSqlMILinkedService AzureSqlMILinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData encryptedCredential = null, SqlAlwaysEncryptedProperties alwaysEncryptedSettings = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSqlMILinkedService("AzureSqlMI", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential, alwaysEncryptedSettings, credential);
        }

        /// <summary> Initializes a new instance of AzureBatchLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accountName"> The Azure Batch account name. Type: string (or Expression with resultType string). </param>
        /// <param name="accessKey">
        /// The Azure Batch account access key.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="batchUri"> The Azure Batch URI. Type: string (or Expression with resultType string). </param>
        /// <param name="poolName"> The Azure Batch pool name. Type: string (or Expression with resultType string). </param>
        /// <param name="linkedServiceName"> The Azure Storage linked service reference. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureBatchLinkedService"/> instance for mocking. </returns>
        public static AzureBatchLinkedService AzureBatchLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData accountName = null, FactorySecretBaseDefinition accessKey = null, BinaryData batchUri = null, BinaryData poolName = null, FactoryLinkedServiceReference linkedServiceName = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBatchLinkedService("AzureBatch", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accountName, accessKey, batchUri, poolName, linkedServiceName, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of AzureKeyVaultLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="baseUri"> The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureKeyVaultLinkedService"/> instance for mocking. </returns>
        public static AzureKeyVaultLinkedService AzureKeyVaultLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData baseUri = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureKeyVaultLinkedService("AzureKeyVault", connectVia, description, parameters, annotations?.ToList(), additionalProperties, baseUri, credential);
        }

        /// <summary> Initializes a new instance of CosmosDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountEndpoint"> The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> The name of the database. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKey">
        /// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="connectionMode"> The connection mode used to access CosmosDB account. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.CosmosDBLinkedService"/> instance for mocking. </returns>
        public static CosmosDBLinkedService CosmosDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData accountEndpoint = null, BinaryData database = null, FactorySecretBaseDefinition accountKey = null, BinaryData servicePrincipalId = null, CosmosDBServicePrincipalCredentialType? servicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalCredential = null, BinaryData tenant = null, BinaryData azureCloudType = null, CosmosDBConnectionMode? connectionMode = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBLinkedService("CosmosDb", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountEndpoint, database, accountKey, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, tenant, azureCloudType, connectionMode, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of DynamicsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Dynamics instance. &apos;Online&apos; for Dynamics Online and &apos;OnPremisesWithIfd&apos; for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Dynamics server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario, &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Dynamics instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Dynamics instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.DynamicsLinkedService"/> instance for mocking. </returns>
        public static DynamicsLinkedService DynamicsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData deploymentType = null, BinaryData hostName = null, BinaryData port = null, BinaryData serviceUri = null, BinaryData organizationName = null, BinaryData authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData servicePrincipalId = null, BinaryData servicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalCredential = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsLinkedService("Dynamics", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of DynamicsCrmLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Dynamics CRM instance. &apos;Online&apos; for Dynamics CRM Online and &apos;OnPremisesWithIfd&apos; for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Dynamics CRM server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario, &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Dynamics CRM instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmLinkedService"/> instance for mocking. </returns>
        public static DynamicsCrmLinkedService DynamicsCrmLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData deploymentType = null, BinaryData hostName = null, BinaryData port = null, BinaryData serviceUri = null, BinaryData organizationName = null, BinaryData authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData servicePrincipalId = null, BinaryData servicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalCredential = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsCrmLinkedService("DynamicsCrm", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Common Data Service for Apps instance. &apos;Online&apos; for Common Data Service for Apps Online and &apos;OnPremisesWithIfd&apos; for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Common Data Service for Apps server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario. &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Common Data Service for Apps instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsLinkedService"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsLinkedService CommonDataServiceForAppsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData deploymentType = null, BinaryData hostName = null, BinaryData port = null, BinaryData serviceUri = null, BinaryData organizationName = null, BinaryData authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData servicePrincipalId = null, BinaryData servicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalCredential = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CommonDataServiceForAppsLinkedService("CommonDataServiceForApps", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HDInsightLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clusterUri"> HDInsight cluster URI. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> HDInsight cluster user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// HDInsight cluster password.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="linkedServiceName"> The Azure Storage linked service reference. </param>
        /// <param name="hcatalogLinkedServiceName"> A reference to the Azure SQL linked service that points to the HCatalog database. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="isEspEnabled"> Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean. </param>
        /// <param name="fileSystem"> Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HDInsightLinkedService"/> instance for mocking. </returns>
        public static HDInsightLinkedService HDInsightLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData clusterUri = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, FactoryLinkedServiceReference linkedServiceName = null, FactoryLinkedServiceReference hcatalogLinkedServiceName = null, BinaryData encryptedCredential = null, BinaryData isEspEnabled = null, BinaryData fileSystem = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HDInsightLinkedService("HDInsight", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clusterUri, userName, password, linkedServiceName, hcatalogLinkedServiceName, encryptedCredential, isEspEnabled, fileSystem);
        }

        /// <summary> Initializes a new instance of FileServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the server. Type: string (or Expression with resultType string). </param>
        /// <param name="userId"> User ID to logon the server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the server.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FileServerLinkedService"/> instance for mocking. </returns>
        public static FileServerLinkedService FileServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData userId = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileServerLinkedService("FileServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, userId, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureFileStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the server. Type: string (or Expression with resultType string). </param>
        /// <param name="userId"> User ID to logon the server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the server.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="fileShare"> The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string). </param>
        /// <param name="snapshot"> The azure file share snapshot version. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFileStorageLinkedService"/> instance for mocking. </returns>
        public static AzureFileStorageLinkedService AzureFileStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData userId = null, FactorySecretBaseDefinition password = null, BinaryData connectionString = null, AzureKeyVaultSecretReference accountKey = null, BinaryData sasUri = null, AzureKeyVaultSecretReference sasToken = null, BinaryData fileShare = null, BinaryData snapshot = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFileStorageLinkedService("AzureFileStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, userId, password, connectionString, accountKey, sasUri, sasToken, fileShare, snapshot, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonS3CompatibleLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accessKeyId"> The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="serviceUri"> This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="forcePathStyle"> If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3CompatibleLinkedService"/> instance for mocking. </returns>
        public static AmazonS3CompatibleLinkedService AmazonS3CompatibleLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData accessKeyId = null, FactorySecretBaseDefinition secretAccessKey = null, BinaryData serviceUri = null, BinaryData forcePathStyle = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3CompatibleLinkedService("AmazonS3Compatible", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accessKeyId, secretAccessKey, serviceUri, forcePathStyle, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OracleCloudStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accessKeyId"> The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="serviceUri"> This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleCloudStorageLinkedService"/> instance for mocking. </returns>
        public static OracleCloudStorageLinkedService OracleCloudStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData accessKeyId = null, FactorySecretBaseDefinition secretAccessKey = null, BinaryData serviceUri = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleCloudStorageLinkedService("OracleCloudStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accessKeyId, secretAccessKey, serviceUri, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accessKeyId"> The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="serviceUri"> This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageLinkedService"/> instance for mocking. </returns>
        public static GoogleCloudStorageLinkedService GoogleCloudStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData accessKeyId = null, FactorySecretBaseDefinition secretAccessKey = null, BinaryData serviceUri = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleCloudStorageLinkedService("GoogleCloudStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accessKeyId, secretAccessKey, serviceUri, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OracleLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleLinkedService"/> instance for mocking. </returns>
        public static OracleLinkedService OracleLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleLinkedService("Oracle", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password">
        /// The Azure key vault secret reference of password in connection string.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleLinkedService"/> instance for mocking. </returns>
        public static AmazonRdsForOracleLinkedService AmazonRdsForOracleLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRdsForOracleLinkedService("AmazonRdsForOracle", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMySqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlLinkedService"/> instance for mocking. </returns>
        public static AzureMySqlLinkedService AzureMySqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMySqlLinkedService("AzureMySql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MySqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlLinkedService"/> instance for mocking. </returns>
        public static MySqlLinkedService MySqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MySqlLinkedService("MySql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PostgreSqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlLinkedService"/> instance for mocking. </returns>
        public static PostgreSqlLinkedService PostgreSqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PostgreSqlLinkedService("PostgreSql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SybaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Server name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> Database name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="schema"> Schema name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseLinkedService"/> instance for mocking. </returns>
        public static SybaseLinkedService SybaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData database = null, BinaryData schema = null, SybaseAuthenticationType? authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SybaseLinkedService("Sybase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, database, schema, authenticationType, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of Db2LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. It is mutually exclusive with connectionString property. </param>
        /// <param name="username"> Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="packageCollection"> Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="certificateCommonName"> Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2LinkedService"/> instance for mocking. </returns>
        public static Db2LinkedService Db2LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData server = null, BinaryData database = null, Db2AuthenticationType? authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData packageCollection = null, BinaryData certificateCommonName = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Db2LinkedService("Db2", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, database, authenticationType, username, password, packageCollection, certificateCommonName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of TeradataLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Server name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataLinkedService"/> instance for mocking. </returns>
        public static TeradataLinkedService TeradataLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData server = null, TeradataAuthenticationType? authenticationType = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TeradataLinkedService("Teradata", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, authenticationType, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMLLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="mlEndpoint"> The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="apiKey">
        /// The API key for accessing the Azure ML model endpoint.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="updateResourceEndpoint"> The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLLinkedService"/> instance for mocking. </returns>
        public static AzureMLLinkedService AzureMLLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData mlEndpoint = null, FactorySecretBaseDefinition apiKey = null, BinaryData updateResourceEndpoint = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData encryptedCredential = null, BinaryData authentication = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMLLinkedService("AzureML", connectVia, description, parameters, annotations?.ToList(), additionalProperties, mlEndpoint, apiKey, updateResourceEndpoint, servicePrincipalId, servicePrincipalKey, tenant, encryptedCredential, authentication);
        }

        /// <summary> Initializes a new instance of AzureMLServiceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="subscriptionId"> Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Azure ML Service workspace resource group name. Type: string (or Expression with resultType string). </param>
        /// <param name="mlWorkspaceName"> Azure ML Service workspace name. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLServiceLinkedService"/> instance for mocking. </returns>
        public static AzureMLServiceLinkedService AzureMLServiceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData subscriptionId = null, BinaryData resourceGroupName = null, BinaryData mlWorkspaceName = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMLServiceLinkedService("AzureMLService", connectVia, description, parameters, annotations?.ToList(), additionalProperties, subscriptionId, resourceGroupName, mlWorkspaceName, servicePrincipalId, servicePrincipalKey, tenant, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OdbcLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcLinkedService"/> instance for mocking. </returns>
        public static OdbcLinkedService OdbcLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData authenticationType = null, FactorySecretBaseDefinition credential = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OdbcLinkedService("Odbc", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of InformixLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixLinkedService"/> instance for mocking. </returns>
        public static InformixLinkedService InformixLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData authenticationType = null, FactorySecretBaseDefinition credential = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new InformixLinkedService("Informix", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessLinkedService"/> instance for mocking. </returns>
        public static MicrosoftAccessLinkedService MicrosoftAccessLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData authenticationType = null, FactorySecretBaseDefinition credential = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MicrosoftAccessLinkedService("MicrosoftAccess", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HdfsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> User name for Windows authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Windows authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.HdfsLinkedService"/> instance for mocking. </returns>
        public static HdfsLinkedService HdfsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, BinaryData authenticationType = null, BinaryData encryptedCredential = null, BinaryData userName = null, FactorySecretBaseDefinition password = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HdfsLinkedService("Hdfs", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, authenticationType, encryptedCredential, userName, password);
        }

        /// <summary> Initializes a new instance of ODataLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The URL of the OData service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the OData service. </param>
        /// <param name="userName"> User name of the OData service. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password of the OData service.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authHeaders"> The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). </param>
        /// <param name="tenant"> Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string). </param>
        /// <param name="aadServicePrincipalCredentialType"> Specify the credential type (key or cert) is used for service principal. </param>
        /// <param name="servicePrincipalKey">
        /// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalEmbeddedCert">
        /// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="servicePrincipalEmbeddedCertPassword">
        /// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ODataLinkedService"/> instance for mocking. </returns>
        public static ODataLinkedService ODataLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, ODataAuthenticationType? authenticationType = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData authHeaders = null, BinaryData tenant = null, BinaryData servicePrincipalId = null, BinaryData azureCloudType = null, BinaryData aadResourceId = null, ODataAadServicePrincipalCredentialType? aadServicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalKey = null, FactorySecretBaseDefinition servicePrincipalEmbeddedCert = null, FactorySecretBaseDefinition servicePrincipalEmbeddedCertPassword = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ODataLinkedService("OData", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, authenticationType, userName, password, authHeaders, tenant, servicePrincipalId, azureCloudType, aadResourceId, aadServicePrincipalCredentialType, servicePrincipalKey, servicePrincipalEmbeddedCert, servicePrincipalEmbeddedCertPassword, encryptedCredential);
        }

        /// <summary> Initializes a new instance of WebLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties">
        /// Web linked service properties.
        /// Please note <see cref="WebLinkedServiceTypeProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebAnonymousAuthentication"/>, <see cref="WebBasicAuthentication"/> and <see cref="WebClientCertificateAuthentication"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebLinkedService"/> instance for mocking. </returns>
        public static WebLinkedService WebLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, WebLinkedServiceTypeProperties typeProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WebLinkedService("Web", connectVia, description, parameters, annotations?.ToList(), additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of WebLinkedServiceTypeProperties. </summary>
        /// <param name="uri"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the web table source. </param>
        /// <returns> A new <see cref="Models.WebLinkedServiceTypeProperties"/> instance for mocking. </returns>
        public static WebLinkedServiceTypeProperties WebLinkedServiceTypeProperties(BinaryData uri = null, string authenticationType = null)
        {
            return new UnknownWebLinkedServiceTypeProperties(uri, authenticationType);
        }

        /// <summary> Initializes a new instance of WebAnonymousAuthentication. </summary>
        /// <param name="uri"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.WebAnonymousAuthentication"/> instance for mocking. </returns>
        public static WebAnonymousAuthentication WebAnonymousAuthentication(BinaryData uri = null)
        {
            return new WebAnonymousAuthentication(uri, "Anonymous");
        }

        /// <summary> Initializes a new instance of WebBasicAuthentication. </summary>
        /// <param name="uri"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebBasicAuthentication"/> instance for mocking. </returns>
        public static WebBasicAuthentication WebBasicAuthentication(BinaryData uri = null, BinaryData username = null, FactorySecretBaseDefinition password = null)
        {
            return new WebBasicAuthentication(uri, "Basic", username, password);
        }

        /// <summary> Initializes a new instance of WebClientCertificateAuthentication. </summary>
        /// <param name="uri"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="pfx">
        /// Base64-encoded contents of a PFX file.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="password">
        /// Password for the PFX file.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebClientCertificateAuthentication"/> instance for mocking. </returns>
        public static WebClientCertificateAuthentication WebClientCertificateAuthentication(BinaryData uri = null, FactorySecretBaseDefinition pfx = null, FactorySecretBaseDefinition password = null)
        {
            return new WebClientCertificateAuthentication(uri, "ClientCertificate", pfx, password);
        }

        /// <summary> Initializes a new instance of CassandraLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port for the connection. Type: integer (or Expression with resultType integer). </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CassandraLinkedService"/> instance for mocking. </returns>
        public static CassandraLinkedService CassandraLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData authenticationType = null, BinaryData port = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CassandraLinkedService("Cassandra", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, authenticationType, port, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MongoDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the MongoDB database. </param>
        /// <param name="databaseName"> The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authSource"> Database to verify the username and password. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBLinkedService"/> instance for mocking. </returns>
        public static MongoDBLinkedService MongoDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, MongoDBAuthenticationType? authenticationType = null, BinaryData databaseName = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData authSource = null, BinaryData port = null, BinaryData enableSsl = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBLinkedService("MongoDb", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, authenticationType, databaseName, username, password, authSource, port, enableSsl, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MongoDBAtlasLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBAtlasLinkedService"/> instance for mocking. </returns>
        public static MongoDBAtlasLinkedService MongoDBAtlasLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData database = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBAtlasLinkedService("MongoDbAtlas", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, database);
        }

        /// <summary> Initializes a new instance of MongoDBV2LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBV2LinkedService"/> instance for mocking. </returns>
        public static MongoDBV2LinkedService MongoDBV2LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData database = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBV2LinkedService("MongoDbV2", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, database);
        }

        /// <summary> Initializes a new instance of CosmosDBMongoDBApiLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="isServerVersionAbove32"> Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="connectionString"> The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDBMongoDBApiLinkedService"/> instance for mocking. </returns>
        public static CosmosDBMongoDBApiLinkedService CosmosDBMongoDBApiLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData isServerVersionAbove32 = null, BinaryData connectionString = null, BinaryData database = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBMongoDBApiLinkedService("CosmosDbMongoDbApi", connectVia, description, parameters, annotations?.ToList(), additionalProperties, isServerVersionAbove32, connectionString, database);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLakeStoreUri"> Data Lake Store service URI. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Store account.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="accountName"> Data Lake Store account name. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriptionId"> Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreLinkedService"/> instance for mocking. </returns>
        public static AzureDataLakeStoreLinkedService AzureDataLakeStoreLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData dataLakeStoreUri = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData accountName = null, BinaryData subscriptionId = null, BinaryData resourceGroupName = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreLinkedService("AzureDataLakeStore", connectVia, description, parameters, annotations?.ToList(), additionalProperties, dataLakeStoreUri, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, accountName, subscriptionId, resourceGroupName, encryptedCredential, credential);
        }

        /// <summary> Initializes a new instance of AzureBlobFSLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKey"> Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AzureBlobFSLinkedService"/> instance for mocking. </returns>
        public static AzureBlobFSLinkedService AzureBlobFSLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, BinaryData accountKey = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null, BinaryData servicePrincipalCredentialType = null, FactorySecretBaseDefinition servicePrincipalCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSLinkedService("AzureBlobFS", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, accountKey, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential, credential, servicePrincipalCredentialType, servicePrincipalCredential);
        }

        /// <summary> Initializes a new instance of Office365LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="office365TenantId"> Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalTenantId"> Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> Specify the application&apos;s client ID. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// Specify the application&apos;s key.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Office365LinkedService"/> instance for mocking. </returns>
        public static Office365LinkedService Office365LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData office365TenantId = null, BinaryData servicePrincipalTenantId = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Office365LinkedService("Office365", connectVia, description, parameters, annotations?.ToList(), additionalProperties, office365TenantId, servicePrincipalTenantId, servicePrincipalId, servicePrincipalKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="environmentUri"> The URL of Salesforce instance. Default is &apos;https://login.salesforce.com&apos;. To copy data from sandbox, specify &apos;https://test.salesforce.com&apos;. To copy data from custom domain, specify, for example, &apos;https://[domain].my.salesforce.com&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication of the Salesforce instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="securityToken">
        /// The security token is optional to remotely access Salesforce instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="apiVersion"> The Salesforce API version used in ADF. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceLinkedService"/> instance for mocking. </returns>
        public static SalesforceLinkedService SalesforceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData environmentUri = null, BinaryData username = null, FactorySecretBaseDefinition password = null, FactorySecretBaseDefinition securityToken = null, BinaryData apiVersion = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceLinkedService("Salesforce", connectVia, description, parameters, annotations?.ToList(), additionalProperties, environmentUri, username, password, securityToken, apiVersion, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="environmentUri"> The URL of Salesforce Service Cloud instance. Default is &apos;https://login.salesforce.com&apos;. To copy data from sandbox, specify &apos;https://test.salesforce.com&apos;. To copy data from custom domain, specify, for example, &apos;https://[domain].my.salesforce.com&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication of the Salesforce instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="securityToken">
        /// The security token is optional to remotely access Salesforce instance.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="apiVersion"> The Salesforce API version used in ADF. Type: string (or Expression with resultType string). </param>
        /// <param name="extendedProperties"> Extended properties appended to the connection string. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudLinkedService"/> instance for mocking. </returns>
        public static SalesforceServiceCloudLinkedService SalesforceServiceCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData environmentUri = null, BinaryData username = null, FactorySecretBaseDefinition password = null, FactorySecretBaseDefinition securityToken = null, BinaryData apiVersion = null, BinaryData extendedProperties = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceServiceCloudLinkedService("SalesforceServiceCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, environmentUri, username, password, securityToken, apiVersion, extendedProperties, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The URL of SAP Cloud for Customer OData API. For example, &apos;[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerLinkedService"/> instance for mocking. </returns>
        public static SapCloudForCustomerLinkedService SapCloudForCustomerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapCloudForCustomerLinkedService("SapCloudForCustomer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapEccLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The URL of SAP ECC OData API. For example, &apos;[https://hostname:port/sap/opu/odata/sap/servicename/]&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapEccLinkedService"/> instance for mocking. </returns>
        public static SapEccLinkedService SapEccLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, Uri uri = null, string username = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapEccLinkedService("SapEcc", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapOpenHubLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP BW server where the open hub destination is located.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOpenHubLinkedService"/> instance for mocking. </returns>
        public static SapOpenHubLinkedService SapOpenHubLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData systemNumber = null, BinaryData clientId = null, BinaryData language = null, BinaryData systemId = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData messageServer = null, BinaryData messageServerService = null, BinaryData logonGroup = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOpenHubLinkedService("SapOpenHub", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, logonGroup, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapOdpLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP server where the table is located.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="sncMode"> SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). </param>
        /// <param name="sncMyName"> Initiator&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncPartnerName"> Communication partner&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncLibraryPath"> External security product&apos;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncQop"> SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). </param>
        /// <param name="x509CertificatePath"> SNC X509 certificate file path. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriberName"> The subscriber name. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOdpLinkedService"/> instance for mocking. </returns>
        public static SapOdpLinkedService SapOdpLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData systemNumber = null, BinaryData clientId = null, BinaryData language = null, BinaryData systemId = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData messageServer = null, BinaryData messageServerService = null, BinaryData sncMode = null, BinaryData sncMyName = null, BinaryData sncPartnerName = null, BinaryData sncLibraryPath = null, BinaryData sncQop = null, BinaryData x509CertificatePath = null, BinaryData logonGroup = null, BinaryData subscriberName = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOdpLinkedService("SapOdp", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, sncMode, sncMyName, sncPartnerName, sncLibraryPath, sncQop, x509CertificatePath, logonGroup, subscriberName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of RestServiceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The base URL of the REST service. </param>
        /// <param name="enableServerCertificateValidation"> Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the REST service. </param>
        /// <param name="userName"> The user name used in Basic authentication type. </param>
        /// <param name="password">
        /// The password used in Basic authentication type.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authHeaders"> The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). </param>
        /// <param name="servicePrincipalId"> The application&apos;s client ID used in AadServicePrincipal authentication type. </param>
        /// <param name="servicePrincipalKey">
        /// The application&apos;s key used in AadServicePrincipal authentication type.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> The resource you are requesting authorization to use. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <param name="clientId"> The client ID associated with your application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with your application.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tokenEndpoint"> The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string). </param>
        /// <param name="resource"> The target service or resource to which the access will be requested. Type: string (or Expression with resultType string). </param>
        /// <param name="scope"> The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RestServiceLinkedService"/> instance for mocking. </returns>
        public static RestServiceLinkedService RestServiceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, BinaryData enableServerCertificateValidation = null, RestServiceAuthenticationType authenticationType = default, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData authHeaders = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData azureCloudType = null, BinaryData aadResourceId = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData tokenEndpoint = null, BinaryData resource = null, BinaryData scope = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RestServiceLinkedService("RestService", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, enableServerCertificateValidation, authenticationType, userName, password, authHeaders, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, aadResourceId, encryptedCredential, credential, clientId, clientSecret, tokenEndpoint, resource, scope);
        }

        /// <summary> Initializes a new instance of AmazonS3LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string). </param>
        /// <param name="accessKeyId"> The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="serviceUri"> This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="sessionToken">
        /// The session token for the S3 temporary security credential.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3LinkedService"/> instance for mocking. </returns>
        public static AmazonS3LinkedService AmazonS3LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData authenticationType = null, BinaryData accessKeyId = null, FactorySecretBaseDefinition secretAccessKey = null, BinaryData serviceUri = null, FactorySecretBaseDefinition sessionToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3LinkedService("AmazonS3", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, accessKeyId, secretAccessKey, serviceUri, sessionToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of TeamDeskLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="uri"> The url to connect TeamDesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> The username of the TeamDesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the TeamDesk source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="apiToken">
        /// The api token for the TeamDesk source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeamDeskLinkedService"/> instance for mocking. </returns>
        public static TeamDeskLinkedService TeamDeskLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, TeamDeskAuthenticationType authenticationType = default, BinaryData uri = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, FactorySecretBaseDefinition apiToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TeamDeskLinkedService("TeamDesk", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, uri, userName, password, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of QuickbaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The url to connect Quickbase source. Type: string (or Expression with resultType string). </param>
        /// <param name="userToken">
        /// The user token for the Quickbase source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickbaseLinkedService"/> instance for mocking. </returns>
        public static QuickbaseLinkedService QuickbaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, FactorySecretBaseDefinition userToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QuickbaseLinkedService("Quickbase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, userToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SmartsheetLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Smartsheet source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SmartsheetLinkedService"/> instance for mocking. </returns>
        public static SmartsheetLinkedService SmartsheetLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, FactorySecretBaseDefinition apiToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SmartsheetLinkedService("Smartsheet", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ZendeskLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="uri"> The url to connect Zendesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> The username of the Zendesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the Zendesk source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="apiToken">
        /// The api token for the Zendesk source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZendeskLinkedService"/> instance for mocking. </returns>
        public static ZendeskLinkedService ZendeskLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, ZendeskAuthenticationType authenticationType = default, BinaryData uri = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, FactorySecretBaseDefinition apiToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ZendeskLinkedService("Zendesk", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, uri, userName, password, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DataworldLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Dataworld source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DataworldLinkedService"/> instance for mocking. </returns>
        public static DataworldLinkedService DataworldLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, FactorySecretBaseDefinition apiToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DataworldLinkedService("Dataworld", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AppFiguresLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="userName"> The username of the Appfigures source. </param>
        /// <param name="password">
        /// The password of the AppFigures source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clientKey">
        /// The client key for the AppFigures source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AppFiguresLinkedService"/> instance for mocking. </returns>
        public static AppFiguresLinkedService AppFiguresLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, FactorySecretBaseDefinition clientKey = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AppFiguresLinkedService("AppFigures", connectVia, description, parameters, annotations?.ToList(), additionalProperties, userName, password, clientKey);
        }

        /// <summary> Initializes a new instance of AsanaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Asana source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AsanaLinkedService"/> instance for mocking. </returns>
        public static AsanaLinkedService AsanaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, FactorySecretBaseDefinition apiToken = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AsanaLinkedService("Asana", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of TwilioLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="userName"> The Account SID of Twilio service. </param>
        /// <param name="password">
        /// The auth token of Twilio service.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TwilioLinkedService"/> instance for mocking. </returns>
        public static TwilioLinkedService TwilioLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData userName = null, FactorySecretBaseDefinition password = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TwilioLinkedService("Twilio", connectVia, description, parameters, annotations?.ToList(), additionalProperties, userName, password);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> The name of the Amazon Redshift server. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username of the Amazon Redshift source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the Amazon Redshift source.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="database"> The database name of the Amazon Redshift source. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftLinkedService"/> instance for mocking. </returns>
        public static AmazonRedshiftLinkedService AmazonRedshiftLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData database = null, BinaryData port = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRedshiftLinkedService("AmazonRedshift", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, username, password, database, port, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CustomDataSourceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties"> Custom linked service properties. </param>
        /// <returns> A new <see cref="Models.CustomDataSourceLinkedService"/> instance for mocking. </returns>
        public static CustomDataSourceLinkedService CustomDataSourceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData typeProperties = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CustomDataSourceLinkedService("CustomDataSource", connectVia, description, parameters, annotations?.ToList(), additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of AzureSearchLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> URL for Azure Search service. Type: string (or Expression with resultType string). </param>
        /// <param name="key">
        /// Admin Key for Azure Search service
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSearchLinkedService"/> instance for mocking. </returns>
        public static AzureSearchLinkedService AzureSearchLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, FactorySecretBaseDefinition key = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSearchLinkedService("AzureSearch", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, key, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HttpLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the HTTP server. </param>
        /// <param name="userName"> User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authHeaders"> The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object). </param>
        /// <param name="embeddedCertData"> Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). </param>
        /// <param name="certThumbprint"> Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="enableServerCertificateValidation"> If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.HttpLinkedService"/> instance for mocking. </returns>
        public static HttpLinkedService HttpLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, HttpAuthenticationType? authenticationType = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData authHeaders = null, BinaryData embeddedCertData = null, BinaryData certThumbprint = null, BinaryData encryptedCredential = null, BinaryData enableServerCertificateValidation = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HttpLinkedService("HttpServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, authenticationType, userName, password, authHeaders, embeddedCertData, certThumbprint, encryptedCredential, enableServerCertificateValidation);
        }

        /// <summary> Initializes a new instance of FtpServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the FTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the FTP server. </param>
        /// <param name="userName"> Username to logon the FTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the FTP server.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="enableSsl"> If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="enableServerCertificateValidation"> If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.FtpServerLinkedService"/> instance for mocking. </returns>
        public static FtpServerLinkedService FtpServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, FtpAuthenticationType? authenticationType = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null, BinaryData enableSsl = null, BinaryData enableServerCertificateValidation = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FtpServerLinkedService("FtpServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, userName, password, encryptedCredential, enableSsl, enableServerCertificateValidation);
        }

        /// <summary> Initializes a new instance of SftpServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The SFTP server host name. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the FTP server. </param>
        /// <param name="userName"> The username used to log on to the SFTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the SFTP server for Basic authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="privateKeyPath"> The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string). </param>
        /// <param name="privateKeyContent">
        /// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="passPhrase">
        /// The password to decrypt the SSH private key if the SSH private key is encrypted.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="skipHostKeyValidation"> If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="hostKeyFingerprint"> The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SftpServerLinkedService"/> instance for mocking. </returns>
        public static SftpServerLinkedService SftpServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, SftpAuthenticationType? authenticationType = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null, BinaryData privateKeyPath = null, FactorySecretBaseDefinition privateKeyContent = null, FactorySecretBaseDefinition passPhrase = null, BinaryData skipHostKeyValidation = null, BinaryData hostKeyFingerprint = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SftpServerLinkedService("Sftp", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, userName, password, encryptedCredential, privateKeyPath, privateKeyContent, passPhrase, skipHostKeyValidation, hostKeyFingerprint);
        }

        /// <summary> Initializes a new instance of SapBWLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP BW instance. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP BW server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP BW server.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapBWLinkedService"/> instance for mocking. </returns>
        public static SapBWLinkedService SapBWLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData systemNumber = null, BinaryData clientId = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapBWLinkedService("SapBW", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapHanaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Host name of the SAP HANA server. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the SAP HANA server. </param>
        /// <param name="userName"> Username to access the SAP HANA server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP HANA server.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapHanaLinkedService"/> instance for mocking. </returns>
        public static SapHanaLinkedService SapHanaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, BinaryData server = null, SapHanaAuthenticationType? authenticationType = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapHanaLinkedService("SapHana", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, authenticationType, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonMwsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com). </param>
        /// <param name="marketplaceId"> The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2). </param>
        /// <param name="sellerId"> The Amazon seller ID. </param>
        /// <param name="mwsAuthToken">
        /// The Amazon MWS authentication token.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessKeyId"> The access key id used to access data. </param>
        /// <param name="secretKey">
        /// The secret key used to access data.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMwsLinkedService"/> instance for mocking. </returns>
        public static AmazonMwsLinkedService AmazonMwsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, BinaryData marketplaceId = null, BinaryData sellerId = null, FactorySecretBaseDefinition mwsAuthToken = null, BinaryData accessKeyId = null, FactorySecretBaseDefinition secretKey = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonMwsLinkedService("AmazonMWS", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, marketplaceId, sellerId, mwsAuthToken, accessKeyId, secretKey, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlLinkedService"/> instance for mocking. </returns>
        public static AzurePostgreSqlLinkedService AzurePostgreSqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzurePostgreSqlLinkedService("AzurePostgreSql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ConcurLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientId"> Application client_id supplied by Concur App Management. </param>
        /// <param name="username"> The user name that you use to access Concur Service. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username field.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurLinkedService"/> instance for mocking. </returns>
        public static ConcurLinkedService ConcurLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData clientId = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConcurLinkedService("Concur", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientId, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CouchbaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="credString"> The Azure key vault secret reference of credString in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseLinkedService"/> instance for mocking. </returns>
        public static CouchbaseLinkedService CouchbaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference credString = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CouchbaseLinkedService("Couchbase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, credString, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DrillLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillLinkedService"/> instance for mocking. </returns>
        public static DrillLinkedService DrillLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DrillLinkedService("Drill", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of EloquaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Eloqua server. (i.e. eloqua.example.com). </param>
        /// <param name="username"> The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice). </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaLinkedService"/> instance for mocking. </returns>
        public static EloquaLinkedService EloquaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new EloquaLinkedService("Eloqua", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleBigQueryLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="project"> The default BigQuery project to query against. </param>
        /// <param name="additionalProjects"> A comma-separated list of public BigQuery projects to access. </param>
        /// <param name="requestGoogleDriveScope"> Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. </param>
        /// <param name="authenticationType"> The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. </param>
        /// <param name="refreshToken">
        /// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clientId"> The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret of the google application used to acquire the refresh token.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="email"> The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. </param>
        /// <param name="keyFilePath"> The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQueryLinkedService"/> instance for mocking. </returns>
        public static GoogleBigQueryLinkedService GoogleBigQueryLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData project = null, BinaryData additionalProjects = null, BinaryData requestGoogleDriveScope = null, GoogleBigQueryAuthenticationType authenticationType = default, FactorySecretBaseDefinition refreshToken = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData email = null, BinaryData keyFilePath = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleBigQueryLinkedService("GoogleBigQuery", connectVia, description, parameters, annotations?.ToList(), additionalProperties, project, additionalProjects, requestGoogleDriveScope, authenticationType, refreshToken, clientId, clientSecret, email, keyFilePath, trustedCertPath, useSystemTrustStore, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GreenplumLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumLinkedService"/> instance for mocking. </returns>
        public static GreenplumLinkedService GreenplumLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GreenplumLinkedService("Greenplum", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HBaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the HBase server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the HBase instance uses to listen for client connections. The default value is 9090. </param>
        /// <param name="httpPath"> The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version). </param>
        /// <param name="authenticationType"> The authentication mechanism to use to connect to the HBase server. </param>
        /// <param name="username"> The user name used to connect to the HBase instance. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseLinkedService"/> instance for mocking. </returns>
        public static HBaseLinkedService HBaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, BinaryData httpPath = null, HBaseAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HBaseLinkedService("HBase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, httpPath, authenticationType, username, password, enableSsl, trustedCertPath, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HiveLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> IP address or host name of the Hive server, separated by &apos;;&apos; for multiple hosts (only when serviceDiscoveryMode is enable). </param>
        /// <param name="port"> The TCP port that the Hive server uses to listen for client connections. </param>
        /// <param name="serverType"> The type of Hive server. </param>
        /// <param name="thriftTransportProtocol"> The transport protocol to use in the Thrift layer. </param>
        /// <param name="authenticationType"> The authentication method used to access the Hive server. </param>
        /// <param name="serviceDiscoveryMode"> true to indicate using the ZooKeeper service, false not. </param>
        /// <param name="zooKeeperNameSpace"> The namespace on ZooKeeper under which Hive Server 2 nodes are added. </param>
        /// <param name="useNativeQuery"> Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL. </param>
        /// <param name="username"> The user name that you use to access Hive Server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the Username field
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="httpPath"> The partial URL corresponding to the Hive server. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveLinkedService"/> instance for mocking. </returns>
        public static HiveLinkedService HiveLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, HiveServerType? serverType = null, HiveThriftTransportProtocol? thriftTransportProtocol = null, HiveAuthenticationType authenticationType = default, BinaryData serviceDiscoveryMode = null, BinaryData zooKeeperNameSpace = null, BinaryData useNativeQuery = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData httpPath = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HiveLinkedService("Hive", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, serverType, thriftTransportProtocol, authenticationType, serviceDiscoveryMode, zooKeeperNameSpace, useNativeQuery, username, password, httpPath, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HubspotLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clientId"> The client ID associated with your Hubspot application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your Hubspot application.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessToken">
        /// The access token obtained when initially authenticating your OAuth integration.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="refreshToken">
        /// The refresh token obtained when initially authenticating your OAuth integration.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotLinkedService"/> instance for mocking. </returns>
        public static HubspotLinkedService HubspotLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, FactorySecretBaseDefinition accessToken = null, FactorySecretBaseDefinition refreshToken = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HubspotLinkedService("Hubspot", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clientId, clientSecret, accessToken, refreshToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ImpalaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Impala server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the Impala server uses to listen for client connections. The default value is 21050. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="username"> The user name used to access the Impala server. The default value is anonymous when using SASLUsername. </param>
        /// <param name="password">
        /// The password corresponding to the user name when using UsernameAndPassword.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaLinkedService"/> instance for mocking. </returns>
        public static ImpalaLinkedService ImpalaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, ImpalaAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ImpalaLinkedService("Impala", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of JiraLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Jira service. (e.g. jira.example.com). </param>
        /// <param name="port"> The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP. </param>
        /// <param name="username"> The user name that you use to access Jira Service. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username field.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraLinkedService"/> instance for mocking. </returns>
        public static JiraLinkedService JiraLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JiraLinkedService("Jira", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MagentoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the Magento instance. (i.e. 192.168.222.110/magento3). </param>
        /// <param name="accessToken">
        /// The access token from Magento.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoLinkedService"/> instance for mocking. </returns>
        public static MagentoLinkedService MagentoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, FactorySecretBaseDefinition accessToken = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MagentoLinkedService("Magento", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MariaDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBLinkedService"/> instance for mocking. </returns>
        public static MariaDBLinkedService MariaDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MariaDBLinkedService("MariaDB", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMariaDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBLinkedService"/> instance for mocking. </returns>
        public static AzureMariaDBLinkedService AzureMariaDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMariaDBLinkedService("AzureMariaDB", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MarketoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com). </param>
        /// <param name="clientId"> The client Id of your Marketo service. </param>
        /// <param name="clientSecret">
        /// The client secret of your Marketo service.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoLinkedService"/> instance for mocking. </returns>
        public static MarketoLinkedService MarketoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MarketoLinkedService("Marketo", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PaypalLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the PayPal instance. (i.e. api.sandbox.paypal.com). </param>
        /// <param name="clientId"> The client ID associated with your PayPal application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your PayPal application.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalLinkedService"/> instance for mocking. </returns>
        public static PaypalLinkedService PaypalLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PaypalLinkedService("Paypal", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PhoenixLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Phoenix server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765. </param>
        /// <param name="httpPath"> The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService. </param>
        /// <param name="authenticationType"> The authentication mechanism used to connect to the Phoenix server. </param>
        /// <param name="username"> The user name used to connect to the Phoenix server. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixLinkedService"/> instance for mocking. </returns>
        public static PhoenixLinkedService PhoenixLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, BinaryData httpPath = null, PhoenixAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PhoenixLinkedService("Phoenix", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, httpPath, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PrestoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Presto server. (i.e. 192.168.222.160). </param>
        /// <param name="serverVersion"> The version of the Presto server. (i.e. 0.148-t). </param>
        /// <param name="catalog"> The catalog context for all request against the server. </param>
        /// <param name="port"> The TCP port that the Presto server uses to listen for client connections. The default value is 8080. </param>
        /// <param name="authenticationType"> The authentication mechanism used to connect to the Presto server. </param>
        /// <param name="username"> The user name used to connect to the Presto server. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="timeZoneId"> The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoLinkedService"/> instance for mocking. </returns>
        public static PrestoLinkedService PrestoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData serverVersion = null, BinaryData catalog = null, BinaryData port = null, PrestoAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData timeZoneId = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PrestoLinkedService("Presto", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, serverVersion, catalog, port, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, timeZoneId, encryptedCredential);
        }

        /// <summary> Initializes a new instance of QuickBooksLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="endpoint"> The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com). </param>
        /// <param name="companyId"> The company ID of the QuickBooks company to authorize. </param>
        /// <param name="consumerKey"> The consumer key for OAuth 1.0 authentication. </param>
        /// <param name="consumerSecret">
        /// The consumer secret for OAuth 1.0 authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessToken">
        /// The access token for OAuth 1.0 authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessTokenSecret">
        /// The access token secret for OAuth 1.0 authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksLinkedService"/> instance for mocking. </returns>
        public static QuickBooksLinkedService QuickBooksLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData endpoint = null, BinaryData companyId = null, BinaryData consumerKey = null, FactorySecretBaseDefinition consumerSecret = null, FactorySecretBaseDefinition accessToken = null, FactorySecretBaseDefinition accessTokenSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QuickBooksLinkedService("QuickBooks", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, endpoint, companyId, consumerKey, consumerSecret, accessToken, accessTokenSecret, useEncryptedEndpoints, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ServiceNowLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the ServiceNow server. (i.e. &lt;instance&gt;.service-now.com). </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="username"> The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication. </param>
        /// <param name="password">
        /// The password corresponding to the user name for Basic and OAuth2 authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clientId"> The client id for OAuth2 authentication. </param>
        /// <param name="clientSecret">
        /// The client secret for OAuth2 authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowLinkedService"/> instance for mocking. </returns>
        public static ServiceNowLinkedService ServiceNowLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, ServiceNowAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ServiceNowLinkedService("ServiceNow", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, authenticationType, username, password, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ShopifyLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The endpoint of the Shopify server. (i.e. mystore.myshopify.com). </param>
        /// <param name="accessToken">
        /// The API access token that can be used to access Shopify’s data. The token won&apos;t expire if it is offline mode.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifyLinkedService"/> instance for mocking. </returns>
        public static ShopifyLinkedService ShopifyLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, FactorySecretBaseDefinition accessToken = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ShopifyLinkedService("Shopify", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SparkLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> IP address or host name of the Spark server. </param>
        /// <param name="port"> The TCP port that the Spark server uses to listen for client connections. </param>
        /// <param name="serverType"> The type of Spark server. </param>
        /// <param name="thriftTransportProtocol"> The transport protocol to use in the Thrift layer. </param>
        /// <param name="authenticationType"> The authentication method used to access the Spark server. </param>
        /// <param name="username"> The user name that you use to access Spark Server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the Username field
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="httpPath"> The partial URL corresponding to the Spark server. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkLinkedService"/> instance for mocking. </returns>
        public static SparkLinkedService SparkLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData port = null, SparkServerType? serverType = null, SparkThriftTransportProtocol? thriftTransportProtocol = null, SparkAuthenticationType authenticationType = default, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData httpPath = null, BinaryData enableSsl = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData allowHostNameCNMismatch = null, BinaryData allowSelfSignedServerCert = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SparkLinkedService("Spark", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, serverType, thriftTransportProtocol, authenticationType, username, password, httpPath, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SquareLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="host"> The URL of the Square instance. (i.e. mystore.mysquare.com). </param>
        /// <param name="clientId"> The client ID associated with your Square application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your Square application.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="redirectUri"> The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500). </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareLinkedService"/> instance for mocking. </returns>
        public static SquareLinkedService SquareLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData host = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData redirectUri = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SquareLinkedService("Square", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, host, clientId, clientSecret, redirectUri, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of XeroLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="host"> The endpoint of the Xero server. (i.e. api.xero.com). </param>
        /// <param name="consumerKey">
        /// The consumer key associated with the Xero application.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="privateKey">
        /// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
        /// ).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroLinkedService"/> instance for mocking. </returns>
        public static XeroLinkedService XeroLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData host = null, FactorySecretBaseDefinition consumerKey = null, FactorySecretBaseDefinition privateKey = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XeroLinkedService("Xero", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, host, consumerKey, privateKey, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ZohoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="endpoint"> The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private). </param>
        /// <param name="accessToken">
        /// The access token for Zoho authentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoLinkedService"/> instance for mocking. </returns>
        public static ZohoLinkedService ZohoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData endpoint = null, FactorySecretBaseDefinition accessToken = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ZohoLinkedService("Zoho", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, endpoint, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of VerticaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaLinkedService"/> instance for mocking. </returns>
        public static VerticaLinkedService VerticaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new VerticaLinkedService("Vertica", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of NetezzaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaLinkedService"/> instance for mocking. </returns>
        public static NetezzaLinkedService NetezzaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new NetezzaLinkedService("Netezza", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientId"> The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudLinkedService"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudLinkedService SalesforceMarketingCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceMarketingCloudLinkedService("SalesforceMarketingCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HDInsightOnDemandLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clusterSize"> Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string). </param>
        /// <param name="timeToLiveExpression"> The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Version of the HDInsight cluster.  Type: string (or Expression with resultType string). </param>
        /// <param name="linkedServiceName"> Azure Storage linked service to be used by the on-demand cluster for storing and processing data. </param>
        /// <param name="hostSubscriptionId"> The customer’s subscription to host the cluster. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key for the service principal id.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterResourceGroup"> The resource group where the cluster belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterNamePrefix"> The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterUserName"> The username to access the cluster. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterPassword">
        /// The password to access the cluster.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clusterSshUserName"> The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string). </param>
        /// <param name="clusterSshPassword">
        /// The password to SSH remotely connect cluster’s node (for Linux).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="additionalLinkedServiceNames"> Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf. </param>
        /// <param name="hcatalogLinkedServiceName"> The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore. </param>
        /// <param name="clusterType"> The cluster type. Type: string (or Expression with resultType string). </param>
        /// <param name="sparkVersion"> The version of spark if the cluster type is &apos;spark&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="coreConfiguration"> Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created. </param>
        /// <param name="hBaseConfiguration"> Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster. </param>
        /// <param name="hdfsConfiguration"> Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster. </param>
        /// <param name="hiveConfiguration"> Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster. </param>
        /// <param name="mapReduceConfiguration"> Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster. </param>
        /// <param name="oozieConfiguration"> Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster. </param>
        /// <param name="stormConfiguration"> Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster. </param>
        /// <param name="yarnConfiguration"> Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="headNodeSize"> Specifies the size of the head node for the HDInsight cluster. </param>
        /// <param name="dataNodeSize"> Specifies the size of the data node for the HDInsight cluster. </param>
        /// <param name="zookeeperNodeSize"> Specifies the size of the Zoo Keeper node for the HDInsight cluster. </param>
        /// <param name="scriptActions"> Custom script actions to run on HDI ondemand cluster once it&apos;s up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&amp;bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions. </param>
        /// <param name="virtualNetworkId"> The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string). </param>
        /// <param name="subnetName"> The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.HDInsightOnDemandLinkedService"/> instance for mocking. </returns>
        public static HDInsightOnDemandLinkedService HDInsightOnDemandLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData clusterSize = null, BinaryData timeToLiveExpression = null, BinaryData version = null, FactoryLinkedServiceReference linkedServiceName = null, BinaryData hostSubscriptionId = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData clusterResourceGroup = null, BinaryData clusterNamePrefix = null, BinaryData clusterUserName = null, FactorySecretBaseDefinition clusterPassword = null, BinaryData clusterSshUserName = null, FactorySecretBaseDefinition clusterSshPassword = null, IEnumerable<FactoryLinkedServiceReference> additionalLinkedServiceNames = null, FactoryLinkedServiceReference hcatalogLinkedServiceName = null, BinaryData clusterType = null, BinaryData sparkVersion = null, BinaryData coreConfiguration = null, BinaryData hBaseConfiguration = null, BinaryData hdfsConfiguration = null, BinaryData hiveConfiguration = null, BinaryData mapReduceConfiguration = null, BinaryData oozieConfiguration = null, BinaryData stormConfiguration = null, BinaryData yarnConfiguration = null, BinaryData encryptedCredential = null, BinaryData headNodeSize = null, BinaryData dataNodeSize = null, BinaryData zookeeperNodeSize = null, IEnumerable<ScriptAction> scriptActions = null, BinaryData virtualNetworkId = null, BinaryData subnetName = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            additionalLinkedServiceNames ??= new List<FactoryLinkedServiceReference>();
            scriptActions ??= new List<ScriptAction>();

            return new HDInsightOnDemandLinkedService("HDInsightOnDemand", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clusterSize, timeToLiveExpression, version, linkedServiceName, hostSubscriptionId, servicePrincipalId, servicePrincipalKey, tenant, clusterResourceGroup, clusterNamePrefix, clusterUserName, clusterPassword, clusterSshUserName, clusterSshPassword, additionalLinkedServiceNames?.ToList(), hcatalogLinkedServiceName, clusterType, sparkVersion, coreConfiguration, hBaseConfiguration, hdfsConfiguration, hiveConfiguration, mapReduceConfiguration, oozieConfiguration, stormConfiguration, yarnConfiguration, encryptedCredential, headNodeSize, dataNodeSize, zookeeperNodeSize, scriptActions?.ToList(), virtualNetworkId, subnetName, credential);
        }

        /// <summary> Initializes a new instance of ScriptAction. </summary>
        /// <param name="name"> The user provided name of the script action. </param>
        /// <param name="uri"> The URI for the script action. </param>
        /// <param name="roles"> The node types on which the script action should be executed. </param>
        /// <param name="parameters"> The parameters for the script action. </param>
        /// <returns> A new <see cref="Models.ScriptAction"/> instance for mocking. </returns>
        public static ScriptAction ScriptAction(string name = null, Uri uri = null, BinaryData roles = null, string parameters = null)
        {
            return new ScriptAction(name, uri, roles, parameters);
        }

        /// <summary> Initializes a new instance of AzureDataLakeAnalyticsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accountName"> The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriptionId"> Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="dataLakeAnalyticsUri"> Azure Data Lake Analytics URI Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeAnalyticsLinkedService"/> instance for mocking. </returns>
        public static AzureDataLakeAnalyticsLinkedService AzureDataLakeAnalyticsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData accountName = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData subscriptionId = null, BinaryData resourceGroupName = null, BinaryData dataLakeAnalyticsUri = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeAnalyticsLinkedService("AzureDataLakeAnalytics", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accountName, servicePrincipalId, servicePrincipalKey, tenant, subscriptionId, resourceGroupName, dataLakeAnalyticsUri, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureDatabricksLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="domain"> &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). </param>
        /// <param name="accessToken">
        /// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authentication"> Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). </param>
        /// <param name="workspaceResourceId"> Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). </param>
        /// <param name="existingClusterId"> The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string). </param>
        /// <param name="instancePoolId"> The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterVersion"> If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterNumOfWorker"> If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like &apos;1&apos; means numOfWorker is 1 or &apos;1:10&apos; means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as &apos;2&apos;. Required if newClusterVersion is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterNodeType"> The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterSparkConf"> A set of optional, user-specified Spark configuration key-value pairs. </param>
        /// <param name="newClusterSparkEnvVars"> A set of optional, user-specified Spark environment variables key-value pairs. </param>
        /// <param name="newClusterCustomTags"> Additional tags for cluster resources. This property is ignored in instance pool configurations. </param>
        /// <param name="newClusterLogDestination"> Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterDriverNodeType"> The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterInitScripts"> User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="newClusterEnableElasticDisk"> Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="policyId"> The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureDatabricksLinkedService"/> instance for mocking. </returns>
        public static AzureDatabricksLinkedService AzureDatabricksLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData domain = null, FactorySecretBaseDefinition accessToken = null, BinaryData authentication = null, BinaryData workspaceResourceId = null, BinaryData existingClusterId = null, BinaryData instancePoolId = null, BinaryData newClusterVersion = null, BinaryData newClusterNumOfWorker = null, BinaryData newClusterNodeType = null, IDictionary<string, BinaryData> newClusterSparkConf = null, IDictionary<string, BinaryData> newClusterSparkEnvVars = null, IDictionary<string, BinaryData> newClusterCustomTags = null, BinaryData newClusterLogDestination = null, BinaryData newClusterDriverNodeType = null, BinaryData newClusterInitScripts = null, BinaryData newClusterEnableElasticDisk = null, BinaryData encryptedCredential = null, BinaryData policyId = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            newClusterSparkConf ??= new Dictionary<string, BinaryData>();
            newClusterSparkEnvVars ??= new Dictionary<string, BinaryData>();
            newClusterCustomTags ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksLinkedService("AzureDatabricks", connectVia, description, parameters, annotations?.ToList(), additionalProperties, domain, accessToken, authentication, workspaceResourceId, existingClusterId, instancePoolId, newClusterVersion, newClusterNumOfWorker, newClusterNodeType, newClusterSparkConf, newClusterSparkEnvVars, newClusterCustomTags, newClusterLogDestination, newClusterDriverNodeType, newClusterInitScripts, newClusterEnableElasticDisk, encryptedCredential, policyId, credential);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="domain"> &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). </param>
        /// <param name="accessToken">
        /// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clusterId"> The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <param name="workspaceResourceId"> Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeLinkedService"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeLinkedService AzureDatabricksDeltaLakeLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData domain = null, FactorySecretBaseDefinition accessToken = null, BinaryData clusterId = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null, BinaryData workspaceResourceId = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeLinkedService("AzureDatabricksDeltaLake", connectVia, description, parameters, annotations?.ToList(), additionalProperties, domain, accessToken, clusterId, encryptedCredential, credential, workspaceResourceId);
        }

        /// <summary> Initializes a new instance of ResponsysLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Responsys server. </param>
        /// <param name="clientId"> The client ID associated with the Responsys application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysLinkedService"/> instance for mocking. </returns>
        public static ResponsysLinkedService ResponsysLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ResponsysLinkedService("Responsys", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DynamicsAXLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri"> The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint. </param>
        /// <param name="servicePrincipalId"> Specify the application&apos;s client ID. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// Specify the application&apos;s key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant"> Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> Specify the resource you are requesting authorization. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsAXLinkedService"/> instance for mocking. </returns>
        public static DynamicsAXLinkedService DynamicsAXLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData uri = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData tenant = null, BinaryData aadResourceId = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsAXLinkedService("DynamicsAX", connectVia, description, parameters, annotations?.ToList(), additionalProperties, uri, servicePrincipalId, servicePrincipalKey, tenant, aadResourceId, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the Oracle Service Cloud instance. </param>
        /// <param name="username"> The user name that you use to access Oracle Service Cloud server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username key.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudLinkedService"/> instance for mocking. </returns>
        public static OracleServiceCloudLinkedService OracleServiceCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData host = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData useEncryptedEndpoints = null, BinaryData useHostVerification = null, BinaryData usePeerVerification = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleServiceCloudLinkedService("OracleServiceCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientCustomerId"> The Client customer ID of the AdWords account that you want to fetch report data for. </param>
        /// <param name="developerToken">
        /// The developer token associated with the manager account that you use to grant access to the AdWords API.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authenticationType"> The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. </param>
        /// <param name="refreshToken">
        /// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="clientId"> The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret of the google application used to acquire the refresh token.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="email"> The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. </param>
        /// <param name="keyFilePath"> The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsLinkedService"/> instance for mocking. </returns>
        public static GoogleAdWordsLinkedService GoogleAdWordsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionProperties = null, BinaryData clientCustomerId = null, FactorySecretBaseDefinition developerToken = null, GoogleAdWordsAuthenticationType? authenticationType = null, FactorySecretBaseDefinition refreshToken = null, BinaryData clientId = null, FactorySecretBaseDefinition clientSecret = null, BinaryData email = null, BinaryData keyFilePath = null, BinaryData trustedCertPath = null, BinaryData useSystemTrustStore = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleAdWordsLinkedService("GoogleAdWords", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientCustomerId, developerToken, authenticationType, refreshToken, clientId, clientSecret, email, keyFilePath, trustedCertPath, useSystemTrustStore, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapTableLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP server where the table is located.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="sncMode"> SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). </param>
        /// <param name="sncMyName"> Initiator&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncPartnerName"> Communication partner&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncLibraryPath"> External security product&apos;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncQop"> SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTableLinkedService"/> instance for mocking. </returns>
        public static SapTableLinkedService SapTableLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData server = null, BinaryData systemNumber = null, BinaryData clientId = null, BinaryData language = null, BinaryData systemId = null, BinaryData userName = null, FactorySecretBaseDefinition password = null, BinaryData messageServer = null, BinaryData messageServerService = null, BinaryData sncMode = null, BinaryData sncMyName = null, BinaryData sncPartnerName = null, BinaryData sncLibraryPath = null, BinaryData sncQop = null, BinaryData logonGroup = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapTableLinkedService("SapTable", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, sncMode, sncMyName, sncPartnerName, sncLibraryPath, sncQop, logonGroup, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of Azure Data Explorer (the engine&apos;s endpoint). URL will be in the format https://&lt;clusterName&gt;.&lt;regionName&gt;.kusto.windows.net. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Kusto.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="database"> Database name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerLinkedService"/> instance for mocking. </returns>
        public static AzureDataExplorerLinkedService AzureDataExplorerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData endpoint = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData database = null, BinaryData tenant = null, FactoryCredentialReference credential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataExplorerLinkedService("AzureDataExplorer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, servicePrincipalId, servicePrincipalKey, database, tenant, credential);
        }

        /// <summary> Initializes a new instance of AzureFunctionLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="functionAppUri"> The endpoint of the Azure Function App. URL will be in the format https://&lt;accountName&gt;.azurewebsites.net. </param>
        /// <param name="functionKey">
        /// Function or Host key for Azure Function App.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <param name="resourceId"> Allowed token audiences for azure function. </param>
        /// <param name="authentication"> Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFunctionLinkedService"/> instance for mocking. </returns>
        public static AzureFunctionLinkedService AzureFunctionLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData functionAppUri = null, FactorySecretBaseDefinition functionKey = null, BinaryData encryptedCredential = null, FactoryCredentialReference credential = null, BinaryData resourceId = null, BinaryData authentication = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFunctionLinkedService("AzureFunction", connectVia, description, parameters, annotations?.ToList(), additionalProperties, functionAppUri, functionKey, encryptedCredential, credential, resourceId, authentication);
        }

        /// <summary> Initializes a new instance of SnowflakeLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string of snowflake. Type: string, SecureString. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SnowflakeLinkedService"/> instance for mocking. </returns>
        public static SnowflakeLinkedService SnowflakeLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData connectionString = null, AzureKeyVaultSecretReference password = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SnowflakeLinkedService("Snowflake", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="siteUri"> The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string). </param>
        /// <param name="tenantId"> The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListLinkedService"/> instance for mocking. </returns>
        public static SharePointOnlineListLinkedService SharePointOnlineListLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, EntityParameterSpecification> parameters = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData siteUri = null, BinaryData tenantId = null, BinaryData servicePrincipalId = null, FactorySecretBaseDefinition servicePrincipalKey = null, BinaryData encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, EntityParameterSpecification>();
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SharePointOnlineListLinkedService("SharePointOnlineList", connectVia, description, parameters, annotations?.ToList(), additionalProperties, siteUri, tenantId, servicePrincipalId, servicePrincipalKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ControlActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ControlActivity"/> instance for mocking. </returns>
        public static ControlActivity ControlActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ControlActivity(name, "Container", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ExecutionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <returns> A new <see cref="Models.ExecutionActivity"/> instance for mocking. </returns>
        public static ExecutionActivity ExecutionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ExecutionActivity(name, "Execution", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy);
        }

        /// <summary> Initializes a new instance of ActivityPolicy. </summary>
        /// <param name="timeout"> Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="retry"> Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="retryIntervalInSeconds"> Interval between each retry attempt (in seconds). The default is 30 sec. </param>
        /// <param name="enableSecureInput"> When set to true, Input from activity is considered as secure and will not be logged to monitoring. </param>
        /// <param name="enableSecureOutput"> When set to true, Output from activity is considered as secure and will not be logged to monitoring. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityPolicy"/> instance for mocking. </returns>
        public static ActivityPolicy ActivityPolicy(BinaryData timeout = null, BinaryData retry = null, int? retryIntervalInSeconds = null, bool? enableSecureInput = null, bool? enableSecureOutput = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ActivityPolicy(timeout, retry, retryIntervalInSeconds, enableSecureInput, enableSecureOutput, additionalProperties);
        }

        /// <summary> Initializes a new instance of StoreReadSettings. </summary>
        /// <param name="storeReadSettingsType"> The read setting type. </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StoreReadSettings"/> instance for mocking. </returns>
        public static StoreReadSettings StoreReadSettings(string storeReadSettingsType = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownStoreReadSettings(storeReadSettingsType, maxConcurrentConnections, disableMetricsCollection, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure blob wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure blob wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageReadSettings"/> instance for mocking. </returns>
        public static AzureBlobStorageReadSettings AzureBlobStorageReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobStorageReadSettings("AzureBlobStorageReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AzureBlobFSReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure blobFS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSReadSettings"/> instance for mocking. </returns>
        public static AzureBlobFSReadSettings AzureBlobFSReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSReadSettings("AzureBlobFSReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> ADLS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> ADLS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="listAfter"> Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="listBefore"> Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreReadSettings"/> instance for mocking. </returns>
        public static AzureDataLakeStoreReadSettings AzureDataLakeStoreReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData fileListPath = null, BinaryData listAfter = null, BinaryData listBefore = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreReadSettings("AzureDataLakeStoreReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, listAfter, listBefore, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AmazonS3ReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> AmazonS3 wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the S3 object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3ReadSettings"/> instance for mocking. </returns>
        public static AmazonS3ReadSettings AmazonS3ReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3ReadSettings("AmazonS3ReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of FileServerReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> FileServer wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> FileServer wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="fileFilter"> Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FileServerReadSettings"/> instance for mocking. </returns>
        public static FileServerReadSettings FileServerReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, BinaryData fileFilter = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileServerReadSettings("FileServerReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd, fileFilter);
        }

        /// <summary> Initializes a new instance of AzureFileStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure File Storage wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFileStorageReadSettings"/> instance for mocking. </returns>
        public static AzureFileStorageReadSettings AzureFileStorageReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFileStorageReadSettings("AzureFileStorageReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of SftpWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="operationTimeout"> Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string). </param>
        /// <param name="useTempFileRename"> Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&apos;t support rename operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SftpWriteSettings"/> instance for mocking. </returns>
        public static SftpWriteSettings SftpWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData operationTimeout = null, BinaryData useTempFileRename = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SftpWriteSettings("SftpWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties, operationTimeout, useTempFileRename);
        }

        /// <summary> Initializes a new instance of StoreWriteSettings. </summary>
        /// <param name="storeWriteSettingsType"> The write setting type. </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StoreWriteSettings"/> instance for mocking. </returns>
        public static StoreWriteSettings StoreWriteSettings(string storeWriteSettingsType = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownStoreWriteSettings(storeWriteSettingsType, maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3CompatibleReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3CompatibleReadSettings"/> instance for mocking. </returns>
        public static AmazonS3CompatibleReadSettings AmazonS3CompatibleReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonS3CompatibleReadSettings("AmazonS3CompatibleReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of OracleCloudStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleCloudStorageReadSettings"/> instance for mocking. </returns>
        public static OracleCloudStorageReadSettings OracleCloudStorageReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleCloudStorageReadSettings("OracleCloudStorageReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageReadSettings"/> instance for mocking. </returns>
        public static GoogleCloudStorageReadSettings GoogleCloudStorageReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData prefix = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleCloudStorageReadSettings("GoogleCloudStorageReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of FtpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Ftp wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Ftp wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="useBinaryTransfer"> Specify whether to use binary transfer mode for FTP stores. </param>
        /// <param name="disableChunking"> If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.FtpReadSettings"/> instance for mocking. </returns>
        public static FtpReadSettings FtpReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData fileListPath = null, bool? useBinaryTransfer = null, BinaryData disableChunking = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FtpReadSettings("FtpReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, fileListPath, useBinaryTransfer, disableChunking);
        }

        /// <summary> Initializes a new instance of SftpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Sftp wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Sftp wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="disableChunking"> If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SftpReadSettings"/> instance for mocking. </returns>
        public static SftpReadSettings SftpReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData fileListPath = null, BinaryData deleteFilesAfterCompletion = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, BinaryData disableChunking = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SftpReadSettings("SftpReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, enablePartitionDiscovery, partitionRootPath, fileListPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd, disableChunking);
        }

        /// <summary> Initializes a new instance of HttpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="requestTimeout"> Specifies the timeout for a HTTP client to get HTTP response from HTTP server. </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HttpReadSettings"/> instance for mocking. </returns>
        public static HttpReadSettings HttpReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData requestMethod = null, BinaryData requestBody = null, BinaryData additionalHeaders = null, BinaryData requestTimeout = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HttpReadSettings("HttpReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, requestMethod, requestBody, additionalHeaders, requestTimeout, enablePartitionDiscovery, partitionRootPath);
        }

        /// <summary> Initializes a new instance of HdfsReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> HDFS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> HDFS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="distcpSettings"> Specifies Distcp-related settings. </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.HdfsReadSettings"/> instance for mocking. </returns>
        public static HdfsReadSettings HdfsReadSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData wildcardFolderPath = null, BinaryData wildcardFileName = null, BinaryData fileListPath = null, bool? enablePartitionDiscovery = null, BinaryData partitionRootPath = null, BinaryData modifiedDatetimeStart = null, BinaryData modifiedDatetimeEnd = null, DistcpSettings distcpSettings = null, BinaryData deleteFilesAfterCompletion = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HdfsReadSettings("HdfsReadSettings", maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, modifiedDatetimeStart, modifiedDatetimeEnd, distcpSettings, deleteFilesAfterCompletion);
        }

        /// <summary> Initializes a new instance of DistcpSettings. </summary>
        /// <param name="resourceManagerEndpoint"> Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="tempScriptPath"> Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string). </param>
        /// <param name="distcpOptions"> Specifies the Distcp options. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DistcpSettings"/> instance for mocking. </returns>
        public static DistcpSettings DistcpSettings(BinaryData resourceManagerEndpoint = null, BinaryData tempScriptPath = null, BinaryData distcpOptions = null)
        {
            return new DistcpSettings(resourceManagerEndpoint, tempScriptPath, distcpOptions);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blockSizeInMB"> Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageWriteSettings"/> instance for mocking. </returns>
        public static AzureBlobStorageWriteSettings AzureBlobStorageWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData blockSizeInMB = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobStorageWriteSettings("AzureBlobStorageWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties, blockSizeInMB);
        }

        /// <summary> Initializes a new instance of AzureBlobFSWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blockSizeInMB"> Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSWriteSettings"/> instance for mocking. </returns>
        public static AzureBlobFSWriteSettings AzureBlobFSWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData blockSizeInMB = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSWriteSettings("AzureBlobFSWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties, blockSizeInMB);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expiryDateTime"> Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of &quot;2018-12-01T05:00:00Z&quot;. Default value is NULL. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreWriteSettings"/> instance for mocking. </returns>
        public static AzureDataLakeStoreWriteSettings AzureDataLakeStoreWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData expiryDateTime = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreWriteSettings("AzureDataLakeStoreWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties, expiryDateTime);
        }

        /// <summary> Initializes a new instance of FileServerWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FileServerWriteSettings"/> instance for mocking. </returns>
        public static FileServerWriteSettings FileServerWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileServerWriteSettings("FileServerWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureFileStorageWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureFileStorageWriteSettings"/> instance for mocking. </returns>
        public static AzureFileStorageWriteSettings AzureFileStorageWriteSettings(BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, BinaryData copyBehavior = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFileStorageWriteSettings("AzureFileStorageWriteSettings", maxConcurrentConnections, disableMetricsCollection, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of FormatReadSettings. </summary>
        /// <param name="formatReadSettingsType"> The read setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FormatReadSettings"/> instance for mocking. </returns>
        public static FormatReadSettings FormatReadSettings(string formatReadSettingsType = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownFormatReadSettings(formatReadSettingsType, additionalProperties);
        }

        /// <summary> Initializes a new instance of CompressionReadSettings. </summary>
        /// <param name="compressionReadSettingsType"> The Compression setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CompressionReadSettings"/> instance for mocking. </returns>
        public static CompressionReadSettings CompressionReadSettings(string compressionReadSettingsType = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownCompressionReadSettings(compressionReadSettingsType, additionalProperties);
        }

        /// <summary> Initializes a new instance of ZipDeflateReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveZipFileNameAsFolder"> Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.ZipDeflateReadSettings"/> instance for mocking. </returns>
        public static ZipDeflateReadSettings ZipDeflateReadSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData preserveZipFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ZipDeflateReadSettings("ZipDeflateReadSettings", additionalProperties, preserveZipFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of TarReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveCompressionFileNameAsFolder"> Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.TarReadSettings"/> instance for mocking. </returns>
        public static TarReadSettings TarReadSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData preserveCompressionFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TarReadSettings("TarReadSettings", additionalProperties, preserveCompressionFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of TarGzipReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveCompressionFileNameAsFolder"> Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.TarGzipReadSettings"/> instance for mocking. </returns>
        public static TarGzipReadSettings TarGzipReadSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData preserveCompressionFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TarGzipReadSettings("TarGZipReadSettings", additionalProperties, preserveCompressionFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of DelimitedTextReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="skipLineCount"> Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer). </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGzipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DelimitedTextReadSettings"/> instance for mocking. </returns>
        public static DelimitedTextReadSettings DelimitedTextReadSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData skipLineCount = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DelimitedTextReadSettings("DelimitedTextReadSettings", additionalProperties, skipLineCount, compressionProperties);
        }

        /// <summary> Initializes a new instance of JsonReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGzipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.JsonReadSettings"/> instance for mocking. </returns>
        public static JsonReadSettings JsonReadSettings(IDictionary<string, BinaryData> additionalProperties = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonReadSettings("JsonReadSettings", additionalProperties, compressionProperties);
        }

        /// <summary> Initializes a new instance of XmlReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGzipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <param name="validationMode"> Indicates what validation method is used when reading the xml files. Allowed values: &apos;none&apos;, &apos;xsd&apos;, or &apos;dtd&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="detectDataType"> Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="namespaces"> Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="namespacePrefixes"> Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: &quot;{&quot;http://www.example.com/xml&quot;:&quot;prefix&quot;}&quot; Type: object (or Expression with resultType object). </param>
        /// <returns> A new <see cref="Models.XmlReadSettings"/> instance for mocking. </returns>
        public static XmlReadSettings XmlReadSettings(IDictionary<string, BinaryData> additionalProperties = null, CompressionReadSettings compressionProperties = null, BinaryData validationMode = null, BinaryData detectDataType = null, BinaryData namespaces = null, BinaryData namespacePrefixes = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XmlReadSettings("XmlReadSettings", additionalProperties, compressionProperties, validationMode, detectDataType, namespaces, namespacePrefixes);
        }

        /// <summary> Initializes a new instance of BinaryReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGzipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.BinaryReadSettings"/> instance for mocking. </returns>
        public static BinaryReadSettings BinaryReadSettings(IDictionary<string, BinaryData> additionalProperties = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new BinaryReadSettings("BinaryReadSettings", additionalProperties, compressionProperties);
        }

        /// <summary> Initializes a new instance of FormatWriteSettings. </summary>
        /// <param name="formatWriteSettingsType"> The write setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FormatWriteSettings"/> instance for mocking. </returns>
        public static FormatWriteSettings FormatWriteSettings(string formatWriteSettingsType = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownFormatWriteSettings(formatWriteSettingsType, additionalProperties);
        }

        /// <summary> Initializes a new instance of AvroWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recordName"> Top level record name in write result, which is required in AVRO spec. </param>
        /// <param name="recordNamespace"> Record namespace in the write result. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AvroWriteSettings"/> instance for mocking. </returns>
        public static AvroWriteSettings AvroWriteSettings(IDictionary<string, BinaryData> additionalProperties = null, string recordName = null, string recordNamespace = null, BinaryData maxRowsPerFile = null, BinaryData fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AvroWriteSettings("AvroWriteSettings", additionalProperties, recordName, recordNamespace, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of OrcWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OrcWriteSettings"/> instance for mocking. </returns>
        public static OrcWriteSettings OrcWriteSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData maxRowsPerFile = null, BinaryData fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OrcWriteSettings("OrcWriteSettings", additionalProperties, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of ParquetWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ParquetWriteSettings"/> instance for mocking. </returns>
        public static ParquetWriteSettings ParquetWriteSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData maxRowsPerFile = null, BinaryData fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ParquetWriteSettings("ParquetWriteSettings", additionalProperties, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of DelimitedTextWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="quoteAllText"> Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="fileExtension"> The file extension used to create the files. Type: string (or Expression with resultType string). </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DelimitedTextWriteSettings"/> instance for mocking. </returns>
        public static DelimitedTextWriteSettings DelimitedTextWriteSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData quoteAllText = null, BinaryData fileExtension = null, BinaryData maxRowsPerFile = null, BinaryData fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DelimitedTextWriteSettings("DelimitedTextWriteSettings", additionalProperties, quoteAllText, fileExtension, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of JsonWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filePattern"> File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &apos;setOfObjects&apos;. It is case-sensitive. </param>
        /// <returns> A new <see cref="Models.JsonWriteSettings"/> instance for mocking. </returns>
        public static JsonWriteSettings JsonWriteSettings(IDictionary<string, BinaryData> additionalProperties = null, BinaryData filePattern = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonWriteSettings("JsonWriteSettings", additionalProperties, filePattern);
        }

        /// <summary> Initializes a new instance of AvroSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Avro store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AvroSource"/> instance for mocking. </returns>
        public static AvroSource AvroSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AvroSource("AvroSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of CopyActivitySource. </summary>
        /// <param name="copySourceType"> Copy source type. </param>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CopyActivitySource"/> instance for mocking. </returns>
        public static CopyActivitySource CopyActivitySource(string copySourceType = null, BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownCopySource(copySourceType, sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties);
        }

        /// <summary> Initializes a new instance of ExcelSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Excel store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ExcelSource"/> instance for mocking. </returns>
        public static ExcelSource ExcelSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ExcelSource("ExcelSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of ParquetSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Parquet store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ParquetSource"/> instance for mocking. </returns>
        public static ParquetSource ParquetSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ParquetSource("ParquetSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of DelimitedTextSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// DelimitedText store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> DelimitedText format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DelimitedTextSource"/> instance for mocking. </returns>
        public static DelimitedTextSource DelimitedTextSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, DelimitedTextReadSettings formatSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DelimitedTextSource("DelimitedTextSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of JsonSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Json store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Json format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.JsonSource"/> instance for mocking. </returns>
        public static JsonSource JsonSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, JsonReadSettings formatSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonSource("JsonSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of XmlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Xml store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Xml format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.XmlSource"/> instance for mocking. </returns>
        public static XmlSource XmlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, XmlReadSettings formatSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XmlSource("XmlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of OrcSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// ORC store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.OrcSource"/> instance for mocking. </returns>
        public static OrcSource OrcSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OrcSource("OrcSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of DelimitedTextSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// DelimitedText store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> DelimitedText format settings. </param>
        /// <returns> A new <see cref="Models.DelimitedTextSink"/> instance for mocking. </returns>
        public static DelimitedTextSink DelimitedTextSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null, DelimitedTextWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DelimitedTextSink("DelimitedTextSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of CopySink. </summary>
        /// <param name="copySinkType"> Copy sink type. </param>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CopySink"/> instance for mocking. </returns>
        public static CopySink CopySink(string copySinkType = null, BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownCopySink(copySinkType, writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties);
        }

        /// <summary> Initializes a new instance of JsonSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Json store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Json format settings. </param>
        /// <returns> A new <see cref="Models.JsonSink"/> instance for mocking. </returns>
        public static JsonSink JsonSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null, JsonWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JsonSink("JsonSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of OrcSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// ORC store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> ORC format settings. </param>
        /// <returns> A new <see cref="Models.OrcSink"/> instance for mocking. </returns>
        public static OrcSink OrcSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null, OrcWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OrcSink("OrcSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of CopyActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="inputs"> List of inputs for the activity. </param>
        /// <param name="outputs"> List of outputs for the activity. </param>
        /// <param name="source">
        /// Copy activity source.
        /// Please note <see cref="CopyActivitySource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsSource"/>, <see cref="AmazonRdsForOracleSource"/>, <see cref="AmazonRdsForSqlServerSource"/>, <see cref="AmazonRedshiftSource"/>, <see cref="AvroSource"/>, <see cref="AzureBlobFSSource"/>, <see cref="AzureDataExplorerSource"/>, <see cref="AzureDataLakeStoreSource"/>, <see cref="AzureDatabricksDeltaLakeSource"/>, <see cref="AzureMariaDBSource"/>, <see cref="AzureMySqlSource"/>, <see cref="AzurePostgreSqlSource"/>, <see cref="AzureSqlSource"/>, <see cref="AzureTableSource"/>, <see cref="BinarySource"/>, <see cref="AzureBlobSource"/>, <see cref="CassandraSource"/>, <see cref="CommonDataServiceForAppsSource"/>, <see cref="ConcurSource"/>, <see cref="CosmosDBMongoDBApiSource"/>, <see cref="CosmosDBSqlApiSource"/>, <see cref="CouchbaseSource"/>, <see cref="Db2Source"/>, <see cref="DelimitedTextSource"/>, <see cref="DocumentDBCollectionSource"/>, <see cref="DrillSource"/>, <see cref="DynamicsAXSource"/>, <see cref="DynamicsCrmSource"/>, <see cref="DynamicsSource"/>, <see cref="EloquaSource"/>, <see cref="ExcelSource"/>, <see cref="FileSystemSource"/>, <see cref="GoogleAdWordsSource"/>, <see cref="GoogleBigQuerySource"/>, <see cref="GreenplumSource"/>, <see cref="HBaseSource"/>, <see cref="HdfsSource"/>, <see cref="HiveSource"/>, <see cref="HttpFileSource"/>, <see cref="HubspotSource"/>, <see cref="ImpalaSource"/>, <see cref="InformixSource"/>, <see cref="JiraSource"/>, <see cref="JsonSource"/>, <see cref="MagentoSource"/>, <see cref="MariaDBSource"/>, <see cref="MarketoSource"/>, <see cref="MicrosoftAccessSource"/>, <see cref="MongoDBAtlasSource"/>, <see cref="MongoDBSource"/>, <see cref="MongoDBV2Source"/>, <see cref="MySqlSource"/>, <see cref="NetezzaSource"/>, <see cref="ODataSource"/>, <see cref="OdbcSource"/>, <see cref="Office365Source"/>, <see cref="OracleServiceCloudSource"/>, <see cref="OracleSource"/>, <see cref="OrcSource"/>, <see cref="ParquetSource"/>, <see cref="PaypalSource"/>, <see cref="PhoenixSource"/>, <see cref="PostgreSqlSource"/>, <see cref="PrestoSource"/>, <see cref="QuickBooksSource"/>, <see cref="RelationalSource"/>, <see cref="ResponsysSource"/>, <see cref="RestSource"/>, <see cref="SalesforceMarketingCloudSource"/>, <see cref="SalesforceServiceCloudSource"/>, <see cref="SalesforceSource"/>, <see cref="SapBwSource"/>, <see cref="SapCloudForCustomerSource"/>, <see cref="SapEccSource"/>, <see cref="SapHanaSource"/>, <see cref="SapOdpSource"/>, <see cref="SapOpenHubSource"/>, <see cref="SapTableSource"/>, <see cref="ServiceNowSource"/>, <see cref="SharePointOnlineListSource"/>, <see cref="ShopifySource"/>, <see cref="SnowflakeSource"/>, <see cref="SparkSource"/>, <see cref="SqlDWSource"/>, <see cref="SqlMISource"/>, <see cref="SqlServerSource"/>, <see cref="SqlSource"/>, <see cref="SquareSource"/>, <see cref="SybaseSource"/>, <see cref="TabularSource"/>, <see cref="TeradataSource"/>, <see cref="VerticaSource"/>, <see cref="WebSource"/>, <see cref="XeroSource"/>, <see cref="XmlSource"/> and <see cref="ZohoSource"/>.
        /// </param>
        /// <param name="sink">
        /// Copy activity sink.
        /// Please note <see cref="CopySink"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroSink"/>, <see cref="AzureBlobFSSink"/>, <see cref="AzureDataExplorerSink"/>, <see cref="AzureDataLakeStoreSink"/>, <see cref="AzureDatabricksDeltaLakeSink"/>, <see cref="AzureMySqlSink"/>, <see cref="AzurePostgreSqlSink"/>, <see cref="AzureQueueSink"/>, <see cref="AzureSearchIndexSink"/>, <see cref="AzureSqlSink"/>, <see cref="AzureTableSink"/>, <see cref="BinarySink"/>, <see cref="AzureBlobSink"/>, <see cref="CommonDataServiceForAppsSink"/>, <see cref="CosmosDBMongoDBApiSink"/>, <see cref="CosmosDBSqlApiSink"/>, <see cref="DelimitedTextSink"/>, <see cref="DocumentDBCollectionSink"/>, <see cref="DynamicsCrmSink"/>, <see cref="DynamicsSink"/>, <see cref="FileSystemSink"/>, <see cref="InformixSink"/>, <see cref="JsonSink"/>, <see cref="MicrosoftAccessSink"/>, <see cref="MongoDBAtlasSink"/>, <see cref="MongoDBV2Sink"/>, <see cref="OdbcSink"/>, <see cref="OracleSink"/>, <see cref="OrcSink"/>, <see cref="ParquetSink"/>, <see cref="RestSink"/>, <see cref="SalesforceServiceCloudSink"/>, <see cref="SalesforceSink"/>, <see cref="SapCloudForCustomerSink"/>, <see cref="SnowflakeSink"/>, <see cref="SqlDWSink"/>, <see cref="SqlMISink"/>, <see cref="SqlServerSink"/> and <see cref="SqlSink"/>.
        /// </param>
        /// <param name="translator"> Copy activity translator. If not specified, tabular translator is used. </param>
        /// <param name="enableStaging"> Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="stagingSettings"> Specifies interim staging settings when EnableStaging is true. </param>
        /// <param name="parallelCopies"> Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="dataIntegrationUnits"> Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="enableSkipIncompatibleRow"> Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="redirectIncompatibleRowSettings"> Redirect incompatible row settings when EnableSkipIncompatibleRow is true. </param>
        /// <param name="logStorageSettings"> (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log. </param>
        /// <param name="logSettings"> Log settings customer needs provide when enabling log. </param>
        /// <param name="preserveRules"> Preserve Rules. </param>
        /// <param name="preserve"> Preserve rules. </param>
        /// <param name="validateDataConsistency"> Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipErrorFile"> Specify the fault tolerance for data consistency. </param>
        /// <returns> A new <see cref="Models.CopyActivity"/> instance for mocking. </returns>
        public static CopyActivity CopyActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<DatasetReference> inputs = null, IEnumerable<DatasetReference> outputs = null, CopyActivitySource source = null, CopySink sink = null, BinaryData translator = null, BinaryData enableStaging = null, StagingSettings stagingSettings = null, BinaryData parallelCopies = null, BinaryData dataIntegrationUnits = null, BinaryData enableSkipIncompatibleRow = null, RedirectIncompatibleRowSettings redirectIncompatibleRowSettings = null, LogStorageSettings logStorageSettings = null, LogSettings logSettings = null, IEnumerable<BinaryData> preserveRules = null, IEnumerable<BinaryData> preserve = null, BinaryData validateDataConsistency = null, SkipErrorFile skipErrorFile = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            inputs ??= new List<DatasetReference>();
            outputs ??= new List<DatasetReference>();
            preserveRules ??= new List<BinaryData>();
            preserve ??= new List<BinaryData>();

            return new CopyActivity(name, "Copy", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, inputs?.ToList(), outputs?.ToList(), source, sink, translator, enableStaging, stagingSettings, parallelCopies, dataIntegrationUnits, enableSkipIncompatibleRow, redirectIncompatibleRowSettings, logStorageSettings, logSettings, preserveRules?.ToList(), preserve?.ToList(), validateDataConsistency, skipErrorFile);
        }

        /// <summary> Initializes a new instance of StagingSettings. </summary>
        /// <param name="linkedServiceName"> Staging linked service reference. </param>
        /// <param name="path"> The path to storage for storing the interim data. Type: string (or Expression with resultType string). </param>
        /// <param name="enableCompression"> Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StagingSettings"/> instance for mocking. </returns>
        public static StagingSettings StagingSettings(FactoryLinkedServiceReference linkedServiceName = null, BinaryData path = null, BinaryData enableCompression = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new StagingSettings(linkedServiceName, path, enableCompression, additionalProperties);
        }

        /// <summary> Initializes a new instance of RedirectIncompatibleRowSettings. </summary>
        /// <param name="linkedServiceName"> Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="path"> The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RedirectIncompatibleRowSettings"/> instance for mocking. </returns>
        public static RedirectIncompatibleRowSettings RedirectIncompatibleRowSettings(BinaryData linkedServiceName = null, BinaryData path = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RedirectIncompatibleRowSettings(linkedServiceName, path, additionalProperties);
        }

        /// <summary> Initializes a new instance of LogStorageSettings. </summary>
        /// <param name="linkedServiceName"> Log storage linked service reference. </param>
        /// <param name="path"> The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). </param>
        /// <param name="logLevel"> Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). </param>
        /// <param name="enableReliableLogging"> Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.LogStorageSettings"/> instance for mocking. </returns>
        public static LogStorageSettings LogStorageSettings(FactoryLinkedServiceReference linkedServiceName = null, BinaryData path = null, BinaryData logLevel = null, BinaryData enableReliableLogging = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LogStorageSettings(linkedServiceName, path, logLevel, enableReliableLogging, additionalProperties);
        }

        /// <summary> Initializes a new instance of LogSettings. </summary>
        /// <param name="enableCopyActivityLog"> Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyActivityLogSettings"> Specifies settings for copy activity log. </param>
        /// <param name="logLocationSettings"> Log location settings customer needs to provide when enabling log. </param>
        /// <returns> A new <see cref="Models.LogSettings"/> instance for mocking. </returns>
        public static LogSettings LogSettings(BinaryData enableCopyActivityLog = null, CopyActivityLogSettings copyActivityLogSettings = null, LogLocationSettings logLocationSettings = null)
        {
            return new LogSettings(enableCopyActivityLog, copyActivityLogSettings, logLocationSettings);
        }

        /// <summary> Initializes a new instance of CopyActivityLogSettings. </summary>
        /// <param name="logLevel"> Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). </param>
        /// <param name="enableReliableLogging"> Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.CopyActivityLogSettings"/> instance for mocking. </returns>
        public static CopyActivityLogSettings CopyActivityLogSettings(BinaryData logLevel = null, BinaryData enableReliableLogging = null)
        {
            return new CopyActivityLogSettings(logLevel, enableReliableLogging);
        }

        /// <summary> Initializes a new instance of LogLocationSettings. </summary>
        /// <param name="linkedServiceName"> Log storage linked service reference. </param>
        /// <param name="path"> The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.LogLocationSettings"/> instance for mocking. </returns>
        public static LogLocationSettings LogLocationSettings(FactoryLinkedServiceReference linkedServiceName = null, BinaryData path = null)
        {
            return new LogLocationSettings(linkedServiceName, path);
        }

        /// <summary> Initializes a new instance of SkipErrorFile. </summary>
        /// <param name="fileMissing"> Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dataInconsistency"> Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SkipErrorFile"/> instance for mocking. </returns>
        public static SkipErrorFile SkipErrorFile(BinaryData fileMissing = null, BinaryData dataInconsistency = null)
        {
            return new SkipErrorFile(fileMissing, dataInconsistency);
        }

        /// <summary> Initializes a new instance of BinarySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Binary store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Binary format settings. </param>
        /// <returns> A new <see cref="Models.BinarySource"/> instance for mocking. </returns>
        public static BinarySource BinarySource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryReadSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new BinarySource("BinarySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of TabularSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.TabularSource"/> instance for mocking. </returns>
        public static TabularSource TabularSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TabularSource("TabularSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of AzureTableSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="azureTableSourceQuery"> Azure Table source query. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableSourceIgnoreTableNotFound"> Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureTableSource"/> instance for mocking. </returns>
        public static AzureTableSource AzureTableSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData azureTableSourceQuery = null, BinaryData azureTableSourceIgnoreTableNotFound = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureTableSource("AzureTableSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, azureTableSourceQuery, azureTableSourceIgnoreTableNotFound);
        }

        /// <summary> Initializes a new instance of AzureBlobSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="treatEmptyAsNull"> Treat empty as null. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipHeaderLineCount"> Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureBlobSource"/> instance for mocking. </returns>
        public static AzureBlobSource AzureBlobSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData treatEmptyAsNull = null, BinaryData skipHeaderLineCount = null, BinaryData recursive = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobSource("BlobSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, treatEmptyAsNull, skipHeaderLineCount, recursive);
        }

        /// <summary> Initializes a new instance of DocumentDBCollectionSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Documents query. Type: string (or Expression with resultType string). </param>
        /// <param name="nestingSeparator"> Nested properties separator. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DocumentDBCollectionSource"/> instance for mocking. </returns>
        public static DocumentDBCollectionSource DocumentDBCollectionSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData nestingSeparator = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DocumentDBCollectionSource("DocumentDbCollectionSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, nestingSeparator, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlApiSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> SQL API query. Type: string (or Expression with resultType string). </param>
        /// <param name="pageSize"> Page size of the result. Type: integer (or Expression with resultType integer). </param>
        /// <param name="preferredRegions"> Preferred regions. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="detectDatetime"> Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlApiSource"/> instance for mocking. </returns>
        public static CosmosDBSqlApiSource CosmosDBSqlApiSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData pageSize = null, BinaryData preferredRegions = null, BinaryData detectDatetime = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBSqlApiSource("CosmosDbSqlApiSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, pageSize, preferredRegions, detectDatetime, additionalColumns);
        }

        /// <summary> Initializes a new instance of DynamicsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Dynamics (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DynamicsSource"/> instance for mocking. </returns>
        public static DynamicsSource DynamicsSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsSource("DynamicsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of DynamicsCrmSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmSource"/> instance for mocking. </returns>
        public static DynamicsCrmSource DynamicsCrmSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsCrmSource("DynamicsCrmSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsSource"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsSource CommonDataServiceForAppsSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CommonDataServiceForAppsSource("CommonDataServiceForAppsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of RelationalSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.RelationalSource"/> instance for mocking. </returns>
        public static RelationalSource RelationalSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RelationalSource("RelationalSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of InformixSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixSource"/> instance for mocking. </returns>
        public static InformixSource InformixSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new InformixSource("InformixSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessSource"/> instance for mocking. </returns>
        public static MicrosoftAccessSource MicrosoftAccessSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MicrosoftAccessSource("MicrosoftAccessSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of Db2Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2Source"/> instance for mocking. </returns>
        public static Db2Source Db2Source(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Db2Source("Db2Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of OdbcSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcSource"/> instance for mocking. </returns>
        public static OdbcSource OdbcSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OdbcSource("OdbcSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MySqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlSource"/> instance for mocking. </returns>
        public static MySqlSource MySqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MySqlSource("MySqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PostgreSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlSource"/> instance for mocking. </returns>
        public static PostgreSqlSource PostgreSqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PostgreSqlSource("PostgreSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SybaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseSource"/> instance for mocking. </returns>
        public static SybaseSource SybaseSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SybaseSource("SybaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SapBwSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> MDX query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapBwSource"/> instance for mocking. </returns>
        public static SapBwSource SapBwSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapBwSource("SapBwSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ODataSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ODataSource"/> instance for mocking. </returns>
        public static ODataSource ODataSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData httpRequestTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ODataSource("ODataSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, httpRequestTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of SalesforceSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="readBehavior"> The read behavior for the operation. Default is Query. </param>
        /// <returns> A new <see cref="Models.SalesforceSource"/> instance for mocking. </returns>
        public static SalesforceSource SalesforceSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, SalesforceSourceReadBehavior? readBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceSource("SalesforceSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, readBehavior);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="readBehavior"> The read behavior for the operation. Default is Query. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudSource"/> instance for mocking. </returns>
        public static SalesforceServiceCloudSource SalesforceServiceCloudSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, SalesforceSourceReadBehavior? readBehavior = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceServiceCloudSource("SalesforceServiceCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, readBehavior, additionalColumns);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP Cloud for Customer OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerSource"/> instance for mocking. </returns>
        public static SapCloudForCustomerSource SapCloudForCustomerSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapCloudForCustomerSource("SapCloudForCustomerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of SapEccSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP ECC OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapEccSource"/> instance for mocking. </returns>
        public static SapEccSource SapEccSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapEccSource("SapEccSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of SapHanaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP HANA Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="packetSize"> The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;SapHanaDynamicRange&quot;. </param>
        /// <param name="partitionColumnName"> The settings that will be leveraged for SAP HANA source partitioning. </param>
        /// <returns> A new <see cref="Models.SapHanaSource"/> instance for mocking. </returns>
        public static SapHanaSource SapHanaSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData packetSize = null, BinaryData partitionOption = null, BinaryData partitionColumnName = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapHanaSource("SapHanaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, packetSize, partitionOption, new SapHanaPartitionSettings(partitionColumnName));
        }

        /// <summary> Initializes a new instance of SapOpenHubSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="excludeLastRequest"> Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="baseRequestId"> The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). </param>
        /// <param name="customRfcReadTableFunctionModule"> Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). </param>
        /// <param name="sapDataColumnDelimiter"> The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOpenHubSource"/> instance for mocking. </returns>
        public static SapOpenHubSource SapOpenHubSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData excludeLastRequest = null, BinaryData baseRequestId = null, BinaryData customRfcReadTableFunctionModule = null, BinaryData sapDataColumnDelimiter = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOpenHubSource("SapOpenHubSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, excludeLastRequest, baseRequestId, customRfcReadTableFunctionModule, sapDataColumnDelimiter);
        }

        /// <summary> Initializes a new instance of SapOdpSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="extractionMode"> The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriberProcess"> The subscriber process to manage the delta process. Type: string (or Expression with resultType string). </param>
        /// <param name="selection"> Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects). </param>
        /// <param name="projection"> Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.SapOdpSource"/> instance for mocking. </returns>
        public static SapOdpSource SapOdpSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData extractionMode = null, BinaryData subscriberProcess = null, BinaryData selection = null, BinaryData projection = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapOdpSource("SapOdpSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, extractionMode, subscriberProcess, selection, projection);
        }

        /// <summary> Initializes a new instance of SapTableSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="rowCount"> The number of rows to be retrieved. Type: integer(or Expression with resultType integer). </param>
        /// <param name="rowSkips"> The number of rows that will be skipped. Type: integer (or Expression with resultType integer). </param>
        /// <param name="rfcTableFields"> The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string). </param>
        /// <param name="rfcTableOptions"> The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string). </param>
        /// <param name="batchSize"> Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer). </param>
        /// <param name="customRfcReadTableFunctionModule"> Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). </param>
        /// <param name="sapDataColumnDelimiter"> The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for SAP table read in parallel. Possible values include: &quot;None&quot;, &quot;PartitionOnInt&quot;, &quot;PartitionOnCalendarYear&quot;, &quot;PartitionOnCalendarMonth&quot;, &quot;PartitionOnCalendarDate&quot;, &quot;PartitionOnTime&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for SAP table source partitioning. </param>
        /// <returns> A new <see cref="Models.SapTableSource"/> instance for mocking. </returns>
        public static SapTableSource SapTableSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData rowCount = null, BinaryData rowSkips = null, BinaryData rfcTableFields = null, BinaryData rfcTableOptions = null, BinaryData batchSize = null, BinaryData customRfcReadTableFunctionModule = null, BinaryData sapDataColumnDelimiter = null, BinaryData partitionOption = null, SapTablePartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapTableSource("SapTableSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, rowCount, rowSkips, rfcTableFields, rfcTableOptions, batchSize, customRfcReadTableFunctionModule, sapDataColumnDelimiter, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SapTablePartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="maxPartitionsNumber"> The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTablePartitionSettings"/> instance for mocking. </returns>
        public static SapTablePartitionSettings SapTablePartitionSettings(BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null, BinaryData maxPartitionsNumber = null)
        {
            return new SapTablePartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound, maxPartitionsNumber);
        }

        /// <summary> Initializes a new instance of RestSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="requestInterval"> The time to await before sending next request, in milliseconds. </param>
        /// <param name="httpCompressionType"> Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. </param>
        /// <returns> A new <see cref="Models.RestSink"/> instance for mocking. </returns>
        public static RestSink RestSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData requestMethod = null, BinaryData additionalHeaders = null, BinaryData httpRequestTimeout = null, BinaryData requestInterval = null, BinaryData httpCompressionType = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RestSink("RestSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, requestMethod, additionalHeaders, httpRequestTimeout, requestInterval, httpCompressionType);
        }

        /// <summary> Initializes a new instance of RestSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="paginationRules"> The pagination rules to compose next page requests. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="requestInterval"> The time to await before sending next page request. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.RestSource"/> instance for mocking. </returns>
        public static RestSource RestSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData requestMethod = null, BinaryData requestBody = null, BinaryData additionalHeaders = null, BinaryData paginationRules = null, BinaryData httpRequestTimeout = null, BinaryData requestInterval = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RestSource("RestSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, requestMethod, requestBody, additionalHeaders, paginationRules, httpRequestTimeout, requestInterval, additionalColumns);
        }

        /// <summary> Initializes a new instance of SqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="isolationLevel"> Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlSource"/> instance for mocking. </returns>
        public static SqlSource SqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData isolationLevel = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlSource("SqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, isolationLevel, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of StoredProcedureParameter. </summary>
        /// <param name="value"> Stored procedure parameter value. Type: string (or Expression with resultType string). </param>
        /// <param name="parameterType"> Stored procedure parameter type. </param>
        /// <returns> A new <see cref="Models.StoredProcedureParameter"/> instance for mocking. </returns>
        public static StoredProcedureParameter StoredProcedureParameter(BinaryData value = null, StoredProcedureParameterType? parameterType = null)
        {
            return new StoredProcedureParameter(value, parameterType);
        }

        /// <summary> Initializes a new instance of SqlPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlPartitionSettings"/> instance for mocking. </returns>
        public static SqlPartitionSettings SqlPartitionSettings(BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null)
        {
            return new SqlPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of SqlServerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlServerSource"/> instance for mocking. </returns>
        public static SqlServerSource SqlServerSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData produceAdditionalTypes = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlServerSource("SqlServerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerSource"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerSource AmazonRdsForSqlServerSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData produceAdditionalTypes = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AmazonRdsForSqlServerSource("AmazonRdsForSqlServerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of AzureSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.AzureSqlSource"/> instance for mocking. </returns>
        public static AzureSqlSource AzureSqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData produceAdditionalTypes = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AzureSqlSource("AzureSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SqlMISource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlMISource"/> instance for mocking. </returns>
        public static SqlMISource SqlMISource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData produceAdditionalTypes = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlMISource("SqlMISource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SqlDWSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL Data Warehouse reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. Type: object (or Expression with resultType object), itemType: StoredProcedureParameter. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlDWSource"/> instance for mocking. </returns>
        public static SqlDWSource SqlDWSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData sqlReaderQuery = null, BinaryData sqlReaderStoredProcedureName = null, BinaryData storedProcedureParameters = null, BinaryData partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SqlDWSource("SqlDWSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of FileSystemSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.FileSystemSource"/> instance for mocking. </returns>
        public static FileSystemSource FileSystemSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileSystemSource("FileSystemSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, additionalColumns);
        }

        /// <summary> Initializes a new instance of HdfsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="distcpSettings"> Specifies Distcp-related settings. </param>
        /// <returns> A new <see cref="Models.HdfsSource"/> instance for mocking. </returns>
        public static HdfsSource HdfsSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null, DistcpSettings distcpSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HdfsSource("HdfsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive, distcpSettings);
        }

        /// <summary> Initializes a new instance of AzureMySqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlSource"/> instance for mocking. </returns>
        public static AzureMySqlSource AzureMySqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMySqlSource("AzureMySqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string). </param>
        /// <param name="noTruncation"> The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerSource"/> instance for mocking. </returns>
        public static AzureDataExplorerSource AzureDataExplorerSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData noTruncation = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataExplorerSource("AzureDataExplorerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, noTruncation, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of OracleSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="oracleReaderQuery"> Oracle reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Oracle read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Oracle source partitioning. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.OracleSource"/> instance for mocking. </returns>
        public static OracleSource OracleSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData oracleReaderQuery = null, BinaryData queryTimeout = null, BinaryData partitionOption = null, OraclePartitionSettings partitionSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleSource("OracleSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, oracleReaderQuery, queryTimeout, partitionOption, partitionSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of OraclePartitionSettings. </summary>
        /// <param name="partitionNames"> Names of the physical partitions of Oracle table. </param>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OraclePartitionSettings"/> instance for mocking. </returns>
        public static OraclePartitionSettings OraclePartitionSettings(BinaryData partitionNames = null, BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null)
        {
            return new OraclePartitionSettings(partitionNames, partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="oracleReaderQuery"> AmazonRdsForOracle reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for AmazonRdsForOracle source partitioning. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleSource"/> instance for mocking. </returns>
        public static AmazonRdsForOracleSource AmazonRdsForOracleSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData oracleReaderQuery = null, BinaryData queryTimeout = null, BinaryData partitionOption = null, AmazonRdsForOraclePartitionSettings partitionSettings = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRdsForOracleSource("AmazonRdsForOracleSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, oracleReaderQuery, queryTimeout, partitionOption, partitionSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOraclePartitionSettings. </summary>
        /// <param name="partitionNames"> Names of the physical partitions of AmazonRdsForOracle table. </param>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOraclePartitionSettings"/> instance for mocking. </returns>
        public static AmazonRdsForOraclePartitionSettings AmazonRdsForOraclePartitionSettings(BinaryData partitionNames = null, BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null)
        {
            return new AmazonRdsForOraclePartitionSettings(partitionNames, partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of TeradataSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Teradata query. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for teradata read in parallel. Possible values include: &quot;None&quot;, &quot;Hash&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for teradata source partitioning. </param>
        /// <returns> A new <see cref="Models.TeradataSource"/> instance for mocking. </returns>
        public static TeradataSource TeradataSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData partitionOption = null, TeradataPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new TeradataSource("TeradataSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of TeradataPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataPartitionSettings"/> instance for mocking. </returns>
        public static TeradataPartitionSettings TeradataPartitionSettings(BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null)
        {
            return new TeradataPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of WebSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.WebSource"/> instance for mocking. </returns>
        public static WebSource WebSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WebSource("WebSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, additionalColumns);
        }

        /// <summary> Initializes a new instance of CassandraSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string). </param>
        /// <param name="consistencyLevel"> The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is &apos;ONE&apos;. It is case-insensitive. </param>
        /// <returns> A new <see cref="Models.CassandraSource"/> instance for mocking. </returns>
        public static CassandraSource CassandraSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, CassandraSourceReadConsistencyLevel? consistencyLevel = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CassandraSource("CassandraSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, consistencyLevel);
        }

        /// <summary> Initializes a new instance of MongoDBSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDBSource"/> instance for mocking. </returns>
        public static MongoDBSource MongoDBSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBSource("MongoDbSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of MongoDBAtlasSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDBAtlasSource"/> instance for mocking. </returns>
        public static MongoDBAtlasSource MongoDBAtlasSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData filter = null, MongoDBCursorMethodsProperties cursorMethods = null, BinaryData batchSize = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBAtlasSource("MongoDbAtlasSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of MongoDBCursorMethodsProperties. </summary>
        /// <param name="project"> Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string). </param>
        /// <param name="sort"> Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <param name="skip"> Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer). </param>
        /// <param name="limit"> Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.MongoDBCursorMethodsProperties"/> instance for mocking. </returns>
        public static MongoDBCursorMethodsProperties MongoDBCursorMethodsProperties(BinaryData project = null, BinaryData sort = null, BinaryData skip = null, BinaryData limit = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBCursorMethodsProperties(project, sort, skip, limit, additionalProperties);
        }

        /// <summary> Initializes a new instance of MongoDBV2Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDBV2Source"/> instance for mocking. </returns>
        public static MongoDBV2Source MongoDBV2Source(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData filter = null, MongoDBCursorMethodsProperties cursorMethods = null, BinaryData batchSize = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBV2Source("MongoDbV2Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of CosmosDBMongoDBApiSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CosmosDBMongoDBApiSource"/> instance for mocking. </returns>
        public static CosmosDBMongoDBApiSource CosmosDBMongoDBApiSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData filter = null, MongoDBCursorMethodsProperties cursorMethods = null, BinaryData batchSize = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBMongoDBApiSource("CosmosDbMongoDbApiSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of Office365Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="allowedGroups"> The groups containing all the users. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="userScopeFilterUri"> The user scope uri. Type: string (or Expression with resultType string). </param>
        /// <param name="dateFilterColumn"> The Column to apply the &lt;paramref name=&quot;StartTime&quot;/&gt; and &lt;paramref name=&quot;EndTime&quot;/&gt;. Type: string (or Expression with resultType string). </param>
        /// <param name="startOn"> Start time of the requested range for this dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="endOn"> End time of the requested range for this dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="outputColumns"> The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { &quot;name&quot;: &quot;Id&quot; }, { &quot;name&quot;: &quot;CreatedDateTime&quot; } ]. </param>
        /// <returns> A new <see cref="Models.Office365Source"/> instance for mocking. </returns>
        public static Office365Source Office365Source(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData allowedGroups = null, BinaryData userScopeFilterUri = null, BinaryData dateFilterColumn = null, BinaryData startOn = null, BinaryData endOn = null, BinaryData outputColumns = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new Office365Source("Office365Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, allowedGroups, userScopeFilterUri, dateFilterColumn, startOn, endOn, outputColumns);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreSource"/> instance for mocking. </returns>
        public static AzureDataLakeStoreSource AzureDataLakeStoreSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData recursive = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreSource("AzureDataLakeStoreSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, recursive);
        }

        /// <summary> Initializes a new instance of AzureBlobFSSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="treatEmptyAsNull"> Treat empty as null. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipHeaderLineCount"> Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSSource"/> instance for mocking. </returns>
        public static AzureBlobFSSource AzureBlobFSSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData treatEmptyAsNull = null, BinaryData skipHeaderLineCount = null, BinaryData recursive = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureBlobFSSource("AzureBlobFSSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, treatEmptyAsNull, skipHeaderLineCount, recursive);
        }

        /// <summary> Initializes a new instance of HttpFileSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="httpRequestTimeout"> Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.HttpFileSource"/> instance for mocking. </returns>
        public static HttpFileSource HttpFileSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HttpFileSource("HttpSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of AmazonMwsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMwsSource"/> instance for mocking. </returns>
        public static AmazonMwsSource AmazonMwsSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonMwsSource("AmazonMWSSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlSource"/> instance for mocking. </returns>
        public static AzurePostgreSqlSource AzurePostgreSqlSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzurePostgreSqlSource("AzurePostgreSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlSink"/> instance for mocking. </returns>
        public static AzurePostgreSqlSink AzurePostgreSqlSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzurePostgreSqlSink("AzurePostgreSqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of AzureMySqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlSink"/> instance for mocking. </returns>
        public static AzureMySqlSink AzureMySqlSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMySqlSink("AzureMySqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of ConcurSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurSource"/> instance for mocking. </returns>
        public static ConcurSource ConcurSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConcurSource("ConcurSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of CouchbaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseSource"/> instance for mocking. </returns>
        public static CouchbaseSource CouchbaseSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CouchbaseSource("CouchbaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of DrillSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillSource"/> instance for mocking. </returns>
        public static DrillSource DrillSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DrillSource("DrillSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of EloquaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaSource"/> instance for mocking. </returns>
        public static EloquaSource EloquaSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new EloquaSource("EloquaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GoogleBigQuerySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQuerySource"/> instance for mocking. </returns>
        public static GoogleBigQuerySource GoogleBigQuerySource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleBigQuerySource("GoogleBigQuerySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GreenplumSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumSource"/> instance for mocking. </returns>
        public static GreenplumSource GreenplumSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GreenplumSource("GreenplumSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HBaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseSource"/> instance for mocking. </returns>
        public static HBaseSource HBaseSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HBaseSource("HBaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HiveSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveSource"/> instance for mocking. </returns>
        public static HiveSource HiveSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HiveSource("HiveSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HubspotSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotSource"/> instance for mocking. </returns>
        public static HubspotSource HubspotSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new HubspotSource("HubspotSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ImpalaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaSource"/> instance for mocking. </returns>
        public static ImpalaSource ImpalaSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ImpalaSource("ImpalaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of JiraSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraSource"/> instance for mocking. </returns>
        public static JiraSource JiraSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new JiraSource("JiraSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MagentoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoSource"/> instance for mocking. </returns>
        public static MagentoSource MagentoSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MagentoSource("MagentoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MariaDBSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBSource"/> instance for mocking. </returns>
        public static MariaDBSource MariaDBSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MariaDBSource("MariaDBSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzureMariaDBSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBSource"/> instance for mocking. </returns>
        public static AzureMariaDBSource AzureMariaDBSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMariaDBSource("AzureMariaDBSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MarketoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoSource"/> instance for mocking. </returns>
        public static MarketoSource MarketoSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MarketoSource("MarketoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PaypalSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalSource"/> instance for mocking. </returns>
        public static PaypalSource PaypalSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PaypalSource("PaypalSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PhoenixSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixSource"/> instance for mocking. </returns>
        public static PhoenixSource PhoenixSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PhoenixSource("PhoenixSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PrestoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoSource"/> instance for mocking. </returns>
        public static PrestoSource PrestoSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PrestoSource("PrestoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of QuickBooksSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksSource"/> instance for mocking. </returns>
        public static QuickBooksSource QuickBooksSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new QuickBooksSource("QuickBooksSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ServiceNowSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowSource"/> instance for mocking. </returns>
        public static ServiceNowSource ServiceNowSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ServiceNowSource("ServiceNowSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ShopifySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifySource"/> instance for mocking. </returns>
        public static ShopifySource ShopifySource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ShopifySource("ShopifySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SparkSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkSource"/> instance for mocking. </returns>
        public static SparkSource SparkSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SparkSource("SparkSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SquareSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareSource"/> instance for mocking. </returns>
        public static SquareSource SquareSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SquareSource("SquareSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of XeroSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroSource"/> instance for mocking. </returns>
        public static XeroSource XeroSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new XeroSource("XeroSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ZohoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoSource"/> instance for mocking. </returns>
        public static ZohoSource ZohoSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ZohoSource("ZohoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of NetezzaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Netezza read in parallel. Possible values include: &quot;None&quot;, &quot;DataSlice&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Netezza source partitioning. </param>
        /// <returns> A new <see cref="Models.NetezzaSource"/> instance for mocking. </returns>
        public static NetezzaSource NetezzaSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData partitionOption = null, NetezzaPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new NetezzaSource("NetezzaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of NetezzaPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaPartitionSettings"/> instance for mocking. </returns>
        public static NetezzaPartitionSettings NetezzaPartitionSettings(BinaryData partitionColumnName = null, BinaryData partitionUpperBound = null, BinaryData partitionLowerBound = null)
        {
            return new NetezzaPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of VerticaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaSource"/> instance for mocking. </returns>
        public static VerticaSource VerticaSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new VerticaSource("VerticaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudSource"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudSource SalesforceMarketingCloudSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceMarketingCloudSource("SalesforceMarketingCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ResponsysSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysSource"/> instance for mocking. </returns>
        public static ResponsysSource ResponsysSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ResponsysSource("ResponsysSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of DynamicsAXSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.DynamicsAXSource"/> instance for mocking. </returns>
        public static DynamicsAXSource DynamicsAXSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsAXSource("DynamicsAXSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudSource"/> instance for mocking. </returns>
        public static OracleServiceCloudSource OracleServiceCloudSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleServiceCloudSource("OracleServiceCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsSource"/> instance for mocking. </returns>
        public static GoogleAdWordsSource GoogleAdWordsSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new GoogleAdWordsSource("GoogleAdWordsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="redshiftUnloadSettings"> The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3. </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftSource"/> instance for mocking. </returns>
        public static AmazonRedshiftSource AmazonRedshiftSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData queryTimeout = null, BinaryData additionalColumns = null, BinaryData query = null, RedshiftUnloadSettings redshiftUnloadSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AmazonRedshiftSource("AmazonRedshiftSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns, query, redshiftUnloadSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Snowflake Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="exportSettings"> Snowflake export settings. </param>
        /// <returns> A new <see cref="Models.SnowflakeSource"/> instance for mocking. </returns>
        public static SnowflakeSource SnowflakeSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, SnowflakeExportCopyCommand exportSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SnowflakeSource("SnowflakeSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, exportSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeExportCopyCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalCopyOptions"> Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalCopyOptions&quot;: { &quot;DATE_FORMAT&quot;: &quot;MM/DD/YYYY&quot;, &quot;TIME_FORMAT&quot;: &quot;&apos;HH24:MI:SS.FF&apos;&quot; }. </param>
        /// <param name="additionalFormatOptions"> Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalFormatOptions&quot;: { &quot;OVERWRITE&quot;: &quot;TRUE&quot;, &quot;MAX_FILE_SIZE&quot;: &quot;&apos;FALSE&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.SnowflakeExportCopyCommand"/> instance for mocking. </returns>
        public static SnowflakeExportCopyCommand SnowflakeExportCopyCommand(IDictionary<string, BinaryData> additionalProperties = null, IDictionary<string, BinaryData> additionalCopyOptions = null, IDictionary<string, BinaryData> additionalFormatOptions = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            additionalCopyOptions ??= new Dictionary<string, BinaryData>();
            additionalFormatOptions ??= new Dictionary<string, BinaryData>();

            return new SnowflakeExportCopyCommand("SnowflakeExportCopyCommand", additionalProperties, additionalCopyOptions, additionalFormatOptions);
        }

        /// <summary> Initializes a new instance of ExportSettings. </summary>
        /// <param name="exportSettingsType"> The export setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ExportSettings"/> instance for mocking. </returns>
        public static ExportSettings ExportSettings(string exportSettingsType = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownExportSettings(exportSettingsType, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="exportSettings"> Azure Databricks Delta Lake export settings. </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeSource"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeSource AzureDatabricksDeltaLakeSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, AzureDatabricksDeltaLakeExportCommand exportSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeSource("AzureDatabricksDeltaLakeSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, exportSettings);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeExportCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dateFormat"> Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <param name="timestampFormat"> Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeExportCommand"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeExportCommand AzureDatabricksDeltaLakeExportCommand(IDictionary<string, BinaryData> additionalProperties = null, BinaryData dateFormat = null, BinaryData timestampFormat = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeExportCommand("AzureDatabricksDeltaLakeExportCommand", additionalProperties, dateFormat, timestampFormat);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="importSettings"> Azure Databricks Delta Lake import settings. </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeSink"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeSink AzureDatabricksDeltaLakeSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null, AzureDatabricksDeltaLakeImportCommand importSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeSink("AzureDatabricksDeltaLakeSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript, importSettings);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeImportCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dateFormat"> Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <param name="timestampFormat"> Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeImportCommand"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeImportCommand AzureDatabricksDeltaLakeImportCommand(IDictionary<string, BinaryData> additionalProperties = null, BinaryData dateFormat = null, BinaryData timestampFormat = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDatabricksDeltaLakeImportCommand("AzureDatabricksDeltaLakeImportCommand", additionalProperties, dateFormat, timestampFormat);
        }

        /// <summary> Initializes a new instance of ImportSettings. </summary>
        /// <param name="importSettingsType"> The import setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ImportSettings"/> instance for mocking. </returns>
        public static ImportSettings ImportSettings(string importSettingsType = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownImportSettings(importSettingsType, additionalProperties);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is &apos;Insert&apos;. </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerSink"/> instance for mocking. </returns>
        public static SapCloudForCustomerSink SapCloudForCustomerSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, SapCloudForCustomerSinkWriteBehavior? writeBehavior = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SapCloudForCustomerSink("SapCloudForCustomerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of AzureQueueSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureQueueSink"/> instance for mocking. </returns>
        public static AzureQueueSink AzureQueueSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureQueueSink("AzureQueueSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureTableSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="azureTableDefaultPartitionKeyValue"> Azure Table default partition key value. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTablePartitionKeyName"> Azure Table partition key name. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableRowKeyName"> Azure Table row key name. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableInsertType"> Azure Table insert type. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableSink"/> instance for mocking. </returns>
        public static AzureTableSink AzureTableSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData azureTableDefaultPartitionKeyValue = null, BinaryData azureTablePartitionKeyName = null, BinaryData azureTableRowKeyName = null, BinaryData azureTableInsertType = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureTableSink("AzureTableSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, azureTableDefaultPartitionKeyValue, azureTablePartitionKeyName, azureTableRowKeyName, azureTableInsertType);
        }

        /// <summary> Initializes a new instance of AvroSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Avro store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Avro format settings. </param>
        /// <returns> A new <see cref="Models.AvroSink"/> instance for mocking. </returns>
        public static AvroSink AvroSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null, AvroWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AvroSink("AvroSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of ParquetSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Parquet store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Parquet format settings. </param>
        /// <returns> A new <see cref="Models.ParquetSink"/> instance for mocking. </returns>
        public static ParquetSink ParquetSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null, ParquetWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ParquetSink("ParquetSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of BinarySink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Binary store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.BinarySink"/> instance for mocking. </returns>
        public static BinarySink BinarySink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, StoreWriteSettings storeSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new BinarySink("BinarySink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, storeSettings);
        }

        /// <summary> Initializes a new instance of AzureBlobSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blobWriterOverwriteFiles"> Blob writer overwrite files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="blobWriterDateTimeFormat"> Blob writer date time format. Type: string (or Expression with resultType string). </param>
        /// <param name="blobWriterAddHeader"> Blob writer add header. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="metadata"> Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AzureBlobSink"/> instance for mocking. </returns>
        public static AzureBlobSink AzureBlobSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData blobWriterOverwriteFiles = null, BinaryData blobWriterDateTimeFormat = null, BinaryData blobWriterAddHeader = null, BinaryData copyBehavior = null, IEnumerable<FactoryMetadataItemInfo> metadata = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            metadata ??= new List<FactoryMetadataItemInfo>();

            return new AzureBlobSink("BlobSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, blobWriterOverwriteFiles, blobWriterDateTimeFormat, blobWriterAddHeader, copyBehavior, metadata?.ToList());
        }

        /// <summary> Initializes a new instance of FactoryMetadataItemInfo. </summary>
        /// <param name="name"> Metadata item key name. Type: string (or Expression with resultType string). </param>
        /// <param name="value"> Metadata item value. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FactoryMetadataItemInfo"/> instance for mocking. </returns>
        public static FactoryMetadataItemInfo FactoryMetadataItemInfo(BinaryData name = null, BinaryData value = null)
        {
            return new FactoryMetadataItemInfo(name, value);
        }

        /// <summary> Initializes a new instance of FileSystemSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <returns> A new <see cref="Models.FileSystemSink"/> instance for mocking. </returns>
        public static FileSystemSink FileSystemSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData copyBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FileSystemSink("FileSystemSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, copyBehavior);
        }

        /// <summary> Initializes a new instance of DocumentDBCollectionSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="nestingSeparator"> Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string). </param>
        /// <param name="writeBehavior"> Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. </param>
        /// <returns> A new <see cref="Models.DocumentDBCollectionSink"/> instance for mocking. </returns>
        public static DocumentDBCollectionSink DocumentDBCollectionSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData nestingSeparator = null, BinaryData writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DocumentDBCollectionSink("DocumentDbCollectionSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, nestingSeparator, writeBehavior);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlApiSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlApiSink"/> instance for mocking. </returns>
        public static CosmosDBSqlApiSink CosmosDBSqlApiSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBSqlApiSink("CosmosDbSqlApiSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of SqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterUseTableLock"> Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="writeBehavior"> Write behavior when copying data into sql. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum). </param>
        /// <param name="upsertSettings"> SQL upsert settings. </param>
        /// <returns> A new <see cref="Models.SqlSink"/> instance for mocking. </returns>
        public static SqlSink SqlSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData sqlWriterStoredProcedureName = null, BinaryData sqlWriterTableType = null, BinaryData preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData storedProcedureTableTypeParameterName = null, BinaryData tableOption = null, BinaryData sqlWriterUseTableLock = null, BinaryData writeBehavior = null, SqlUpsertSettings upsertSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlSink("SqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption, sqlWriterUseTableLock, writeBehavior, upsertSettings);
        }

        /// <summary> Initializes a new instance of SqlUpsertSettings. </summary>
        /// <param name="useTempDB"> Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="interimSchemaName"> Schema name for interim table. Type: string (or Expression with resultType string). </param>
        /// <param name="keys"> Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <returns> A new <see cref="Models.SqlUpsertSettings"/> instance for mocking. </returns>
        public static SqlUpsertSettings SqlUpsertSettings(BinaryData useTempDB = null, BinaryData interimSchemaName = null, BinaryData keys = null)
        {
            return new SqlUpsertSettings(useTempDB, interimSchemaName, keys);
        }

        /// <summary> Initializes a new instance of SqlServerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterUseTableLock"> Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="writeBehavior"> Write behavior when copying data into sql server. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum). </param>
        /// <param name="upsertSettings"> SQL upsert settings. </param>
        /// <returns> A new <see cref="Models.SqlServerSink"/> instance for mocking. </returns>
        public static SqlServerSink SqlServerSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData sqlWriterStoredProcedureName = null, BinaryData sqlWriterTableType = null, BinaryData preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData storedProcedureTableTypeParameterName = null, BinaryData tableOption = null, BinaryData sqlWriterUseTableLock = null, BinaryData writeBehavior = null, SqlUpsertSettings upsertSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlServerSink("SqlServerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption, sqlWriterUseTableLock, writeBehavior, upsertSettings);
        }

        /// <summary> Initializes a new instance of AzureSqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterUseTableLock"> Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="writeBehavior"> Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum). </param>
        /// <param name="upsertSettings"> SQL upsert settings. </param>
        /// <returns> A new <see cref="Models.AzureSqlSink"/> instance for mocking. </returns>
        public static AzureSqlSink AzureSqlSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData sqlWriterStoredProcedureName = null, BinaryData sqlWriterTableType = null, BinaryData preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData storedProcedureTableTypeParameterName = null, BinaryData tableOption = null, BinaryData sqlWriterUseTableLock = null, BinaryData writeBehavior = null, SqlUpsertSettings upsertSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AzureSqlSink("AzureSqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption, sqlWriterUseTableLock, writeBehavior, upsertSettings);
        }

        /// <summary> Initializes a new instance of SqlMISink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterUseTableLock"> Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="writeBehavior"> White behavior when copying data into azure SQL MI. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum). </param>
        /// <param name="upsertSettings"> SQL upsert settings. </param>
        /// <returns> A new <see cref="Models.SqlMISink"/> instance for mocking. </returns>
        public static SqlMISink SqlMISink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData sqlWriterStoredProcedureName = null, BinaryData sqlWriterTableType = null, BinaryData preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, BinaryData storedProcedureTableTypeParameterName = null, BinaryData tableOption = null, BinaryData sqlWriterUseTableLock = null, BinaryData writeBehavior = null, SqlUpsertSettings upsertSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlMISink("SqlMISink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption, sqlWriterUseTableLock, writeBehavior, upsertSettings);
        }

        /// <summary> Initializes a new instance of SqlDWSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="allowPolyBase"> Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="polyBaseSettings"> Specifies PolyBase-related settings when allowPolyBase is true. </param>
        /// <param name="allowCopyCommand"> Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyCommandSettings"> Specifies Copy Command related settings when allowCopyCommand is true. </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterUseTableLock"> Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="writeBehavior"> Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum). </param>
        /// <param name="upsertSettings"> SQL DW upsert settings. </param>
        /// <returns> A new <see cref="Models.SqlDWSink"/> instance for mocking. </returns>
        public static SqlDWSink SqlDWSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null, BinaryData allowPolyBase = null, PolybaseSettings polyBaseSettings = null, BinaryData allowCopyCommand = null, DWCopyCommandSettings copyCommandSettings = null, BinaryData tableOption = null, BinaryData sqlWriterUseTableLock = null, BinaryData writeBehavior = null, SqlDWUpsertSettings upsertSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SqlDWSink("SqlDWSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript, allowPolyBase, polyBaseSettings, allowCopyCommand, copyCommandSettings, tableOption, sqlWriterUseTableLock, writeBehavior, upsertSettings);
        }

        /// <summary> Initializes a new instance of PolybaseSettings. </summary>
        /// <param name="rejectType"> Reject type. </param>
        /// <param name="rejectValue"> Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0. </param>
        /// <param name="rejectSampleValue"> Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="useTypeDefault"> Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PolybaseSettings"/> instance for mocking. </returns>
        public static PolybaseSettings PolybaseSettings(PolybaseSettingsRejectType? rejectType = null, BinaryData rejectValue = null, BinaryData rejectSampleValue = null, BinaryData useTypeDefault = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new PolybaseSettings(rejectType, rejectValue, rejectSampleValue, useTypeDefault, additionalProperties);
        }

        /// <summary> Initializes a new instance of DWCopyCommandSettings. </summary>
        /// <param name="defaultValues"> Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects). </param>
        /// <param name="additionalOptions"> Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalOptions&quot;: { &quot;MAXERRORS&quot;: &quot;1000&quot;, &quot;DATEFORMAT&quot;: &quot;&apos;ymd&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.DWCopyCommandSettings"/> instance for mocking. </returns>
        public static DWCopyCommandSettings DWCopyCommandSettings(IEnumerable<DWCopyCommandDefaultValue> defaultValues = null, IDictionary<string, string> additionalOptions = null)
        {
            defaultValues ??= new List<DWCopyCommandDefaultValue>();
            additionalOptions ??= new Dictionary<string, string>();

            return new DWCopyCommandSettings(defaultValues?.ToList(), additionalOptions);
        }

        /// <summary> Initializes a new instance of DWCopyCommandDefaultValue. </summary>
        /// <param name="columnName"> Column name. Type: object (or Expression with resultType string). </param>
        /// <param name="defaultValue"> The default value of the column. Type: object (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DWCopyCommandDefaultValue"/> instance for mocking. </returns>
        public static DWCopyCommandDefaultValue DWCopyCommandDefaultValue(BinaryData columnName = null, BinaryData defaultValue = null)
        {
            return new DWCopyCommandDefaultValue(columnName, defaultValue);
        }

        /// <summary> Initializes a new instance of SqlDWUpsertSettings. </summary>
        /// <param name="interimSchemaName"> Schema name for interim table. Type: string (or Expression with resultType string). </param>
        /// <param name="keys"> Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <returns> A new <see cref="Models.SqlDWUpsertSettings"/> instance for mocking. </returns>
        public static SqlDWUpsertSettings SqlDWUpsertSettings(BinaryData interimSchemaName = null, BinaryData keys = null)
        {
            return new SqlDWUpsertSettings(interimSchemaName, keys);
        }

        /// <summary> Initializes a new instance of SnowflakeSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="importSettings"> Snowflake import settings. </param>
        /// <returns> A new <see cref="Models.SnowflakeSink"/> instance for mocking. </returns>
        public static SnowflakeSink SnowflakeSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null, SnowflakeImportCopyCommand importSettings = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SnowflakeSink("SnowflakeSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript, importSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeImportCopyCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalCopyOptions"> Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalCopyOptions&quot;: { &quot;DATE_FORMAT&quot;: &quot;MM/DD/YYYY&quot;, &quot;TIME_FORMAT&quot;: &quot;&apos;HH24:MI:SS.FF&apos;&quot; }. </param>
        /// <param name="additionalFormatOptions"> Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalFormatOptions&quot;: { &quot;FORCE&quot;: &quot;TRUE&quot;, &quot;LOAD_UNCERTAIN_FILES&quot;: &quot;&apos;FALSE&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.SnowflakeImportCopyCommand"/> instance for mocking. </returns>
        public static SnowflakeImportCopyCommand SnowflakeImportCopyCommand(IDictionary<string, BinaryData> additionalProperties = null, IDictionary<string, BinaryData> additionalCopyOptions = null, IDictionary<string, BinaryData> additionalFormatOptions = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            additionalCopyOptions ??= new Dictionary<string, BinaryData>();
            additionalFormatOptions ??= new Dictionary<string, BinaryData>();

            return new SnowflakeImportCopyCommand("SnowflakeImportCopyCommand", additionalProperties, additionalCopyOptions, additionalFormatOptions);
        }

        /// <summary> Initializes a new instance of OracleSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleSink"/> instance for mocking. </returns>
        public static OracleSink OracleSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OracleSink("OracleSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="enableAdlsSingleFileParallel"> Single File Parallel. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreSink"/> instance for mocking. </returns>
        public static AzureDataLakeStoreSink AzureDataLakeStoreSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData copyBehavior = null, BinaryData enableAdlsSingleFileParallel = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataLakeStoreSink("AzureDataLakeStoreSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, copyBehavior, enableAdlsSingleFileParallel);
        }

        /// <summary> Initializes a new instance of AzureBlobFSSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="metadata"> Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSSink"/> instance for mocking. </returns>
        public static AzureBlobFSSink AzureBlobFSSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData copyBehavior = null, IEnumerable<FactoryMetadataItemInfo> metadata = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            metadata ??= new List<FactoryMetadataItemInfo>();

            return new AzureBlobFSSink("AzureBlobFSSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, copyBehavior, metadata?.ToList());
        }

        /// <summary> Initializes a new instance of AzureSearchIndexSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specify the write behavior when upserting documents into Azure Search Index. </param>
        /// <returns> A new <see cref="Models.AzureSearchIndexSink"/> instance for mocking. </returns>
        public static AzureSearchIndexSink AzureSearchIndexSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, AzureSearchIndexWriteBehaviorType? writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureSearchIndexSink("AzureSearchIndexSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of OdbcSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcSink"/> instance for mocking. </returns>
        public static OdbcSink OdbcSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new OdbcSink("OdbcSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of InformixSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixSink"/> instance for mocking. </returns>
        public static InformixSink InformixSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new InformixSink("InformixSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessSink"/> instance for mocking. </returns>
        public static MicrosoftAccessSink MicrosoftAccessSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MicrosoftAccessSink("MicrosoftAccessSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of DynamicsSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsSink"/> instance for mocking. </returns>
        public static DynamicsSink DynamicsSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, BinaryData ignoreNullValues = null, BinaryData alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsSink("DynamicsSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of DynamicsCrmSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmSink"/> instance for mocking. </returns>
        public static DynamicsCrmSink DynamicsCrmSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, BinaryData ignoreNullValues = null, BinaryData alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DynamicsCrmSink("DynamicsCrmSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsSink"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsSink CommonDataServiceForAppsSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, BinaryData ignoreNullValues = null, BinaryData alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CommonDataServiceForAppsSink("CommonDataServiceForAppsSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="ingestionMappingName"> A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string. </param>
        /// <param name="ingestionMappingAsJson"> An explicit column mapping description provided in a json format. Type: string. </param>
        /// <param name="flushImmediately"> If set to true, any aggregation will be skipped. Default is false. Type: boolean. </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerSink"/> instance for mocking. </returns>
        public static AzureDataExplorerSink AzureDataExplorerSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData ingestionMappingName = null, BinaryData ingestionMappingAsJson = null, BinaryData flushImmediately = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataExplorerSink("AzureDataExplorerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, ingestionMappingName, ingestionMappingAsJson, flushImmediately);
        }

        /// <summary> Initializes a new instance of SalesforceSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is Insert. </param>
        /// <param name="externalIdFieldName"> The name of the external ID field for upsert operation. Default value is &apos;Id&apos; column. Type: string (or Expression with resultType string). </param>
        /// <param name="ignoreNullValues"> The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SalesforceSink"/> instance for mocking. </returns>
        public static SalesforceSink SalesforceSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, SalesforceSinkWriteBehavior? writeBehavior = null, BinaryData externalIdFieldName = null, BinaryData ignoreNullValues = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceSink("SalesforceSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, externalIdFieldName, ignoreNullValues);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is Insert. </param>
        /// <param name="externalIdFieldName"> The name of the external ID field for upsert operation. Default value is &apos;Id&apos; column. Type: string (or Expression with resultType string). </param>
        /// <param name="ignoreNullValues"> The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudSink"/> instance for mocking. </returns>
        public static SalesforceServiceCloudSink SalesforceServiceCloudSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, SalesforceSinkWriteBehavior? writeBehavior = null, BinaryData externalIdFieldName = null, BinaryData ignoreNullValues = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SalesforceServiceCloudSink("SalesforceServiceCloudSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior, externalIdFieldName, ignoreNullValues);
        }

        /// <summary> Initializes a new instance of MongoDBAtlasSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is &quot;insert&quot;. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBAtlasSink"/> instance for mocking. </returns>
        public static MongoDBAtlasSink MongoDBAtlasSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBAtlasSink("MongoDbAtlasSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of MongoDBV2Sink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is &quot;insert&quot;. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDBV2Sink"/> instance for mocking. </returns>
        public static MongoDBV2Sink MongoDBV2Sink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new MongoDBV2Sink("MongoDbV2Sink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of CosmosDBMongoDBApiSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is &quot;insert&quot;. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDBMongoDBApiSink"/> instance for mocking. </returns>
        public static CosmosDBMongoDBApiSink CosmosDBMongoDBApiSink(BinaryData writeBatchSize = null, BinaryData writeBatchTimeout = null, BinaryData sinkRetryCount = null, BinaryData sinkRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new CosmosDBMongoDBApiSink("CosmosDbMongoDbApiSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of HDInsightHiveActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="scriptPath"> Script path. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="defines"> Allows user to specify defines for Hive job request. </param>
        /// <param name="variables"> User specified arguments under hivevar namespace. </param>
        /// <param name="queryTimeout"> Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package). </param>
        /// <returns> A new <see cref="Models.HDInsightHiveActivity"/> instance for mocking. </returns>
        public static HDInsightHiveActivity HDInsightHiveActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<FactoryLinkedServiceReference> storageLinkedServices = null, IEnumerable<BinaryData> arguments = null, HDInsightActivityDebugInfoOptionSetting? getDebugInfo = null, BinaryData scriptPath = null, FactoryLinkedServiceReference scriptLinkedService = null, IDictionary<string, BinaryData> defines = null, IEnumerable<BinaryData> variables = null, int? queryTimeout = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storageLinkedServices ??= new List<FactoryLinkedServiceReference>();
            arguments ??= new List<BinaryData>();
            defines ??= new Dictionary<string, BinaryData>();
            variables ??= new List<BinaryData>();

            return new HDInsightHiveActivity(name, "HDInsightHive", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, scriptPath, scriptLinkedService, defines, variables?.ToList(), queryTimeout);
        }

        /// <summary> Initializes a new instance of HDInsightPigActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array). </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="scriptPath"> Script path. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="defines"> Allows user to specify defines for Pig job request. </param>
        /// <returns> A new <see cref="Models.HDInsightPigActivity"/> instance for mocking. </returns>
        public static HDInsightPigActivity HDInsightPigActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<FactoryLinkedServiceReference> storageLinkedServices = null, BinaryData arguments = null, HDInsightActivityDebugInfoOptionSetting? getDebugInfo = null, BinaryData scriptPath = null, FactoryLinkedServiceReference scriptLinkedService = null, IDictionary<string, BinaryData> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storageLinkedServices ??= new List<FactoryLinkedServiceReference>();
            defines ??= new Dictionary<string, BinaryData>();

            return new HDInsightPigActivity(name, "HDInsightPig", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments, getDebugInfo, scriptPath, scriptLinkedService, defines);
        }

        /// <summary> Initializes a new instance of HDInsightMapReduceActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="className"> Class name. Type: string (or Expression with resultType string). </param>
        /// <param name="jarFilePath"> Jar path. Type: string (or Expression with resultType string). </param>
        /// <param name="jarLinkedService"> Jar linked service reference. </param>
        /// <param name="jarLibs"> Jar libs. </param>
        /// <param name="defines"> Allows user to specify defines for the MapReduce job request. </param>
        /// <returns> A new <see cref="Models.HDInsightMapReduceActivity"/> instance for mocking. </returns>
        public static HDInsightMapReduceActivity HDInsightMapReduceActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<FactoryLinkedServiceReference> storageLinkedServices = null, IEnumerable<BinaryData> arguments = null, HDInsightActivityDebugInfoOptionSetting? getDebugInfo = null, BinaryData className = null, BinaryData jarFilePath = null, FactoryLinkedServiceReference jarLinkedService = null, IEnumerable<BinaryData> jarLibs = null, IDictionary<string, BinaryData> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storageLinkedServices ??= new List<FactoryLinkedServiceReference>();
            arguments ??= new List<BinaryData>();
            jarLibs ??= new List<BinaryData>();
            defines ??= new Dictionary<string, BinaryData>();

            return new HDInsightMapReduceActivity(name, "HDInsightMapReduce", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, className, jarFilePath, jarLinkedService, jarLibs?.ToList(), defines);
        }

        /// <summary> Initializes a new instance of HDInsightStreamingActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="mapper"> Mapper executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="reducer"> Reducer executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="input"> Input blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="output"> Output blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="filePaths"> Paths to streaming job files. Can be directories. </param>
        /// <param name="fileLinkedService"> Linked service reference where the files are located. </param>
        /// <param name="combiner"> Combiner executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="commandEnvironment"> Command line environment values. </param>
        /// <param name="defines"> Allows user to specify defines for streaming job request. </param>
        /// <returns> A new <see cref="Models.HDInsightStreamingActivity"/> instance for mocking. </returns>
        public static HDInsightStreamingActivity HDInsightStreamingActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<FactoryLinkedServiceReference> storageLinkedServices = null, IEnumerable<BinaryData> arguments = null, HDInsightActivityDebugInfoOptionSetting? getDebugInfo = null, BinaryData mapper = null, BinaryData reducer = null, BinaryData input = null, BinaryData output = null, IEnumerable<BinaryData> filePaths = null, FactoryLinkedServiceReference fileLinkedService = null, BinaryData combiner = null, IEnumerable<BinaryData> commandEnvironment = null, IDictionary<string, BinaryData> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            storageLinkedServices ??= new List<FactoryLinkedServiceReference>();
            arguments ??= new List<BinaryData>();
            filePaths ??= new List<BinaryData>();
            commandEnvironment ??= new List<BinaryData>();
            defines ??= new Dictionary<string, BinaryData>();

            return new HDInsightStreamingActivity(name, "HDInsightStreaming", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, mapper, reducer, input, output, filePaths?.ToList(), fileLinkedService, combiner, commandEnvironment?.ToList(), defines);
        }

        /// <summary> Initializes a new instance of HDInsightSparkActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="rootPath"> The root path in &apos;sparkJobLinkedService&apos; for all the job’s files. Type: string (or Expression with resultType string). </param>
        /// <param name="entryFilePath"> The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string). </param>
        /// <param name="arguments"> The user-specified arguments to HDInsightSparkActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="sparkJobLinkedService"> The storage linked service for uploading the entry file and dependencies, and for receiving logs. </param>
        /// <param name="className"> The application&apos;s Java/Spark main class. </param>
        /// <param name="proxyUser"> The user to impersonate that will execute the job. Type: string (or Expression with resultType string). </param>
        /// <param name="sparkConfig"> Spark configuration property. </param>
        /// <returns> A new <see cref="Models.HDInsightSparkActivity"/> instance for mocking. </returns>
        public static HDInsightSparkActivity HDInsightSparkActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData rootPath = null, BinaryData entryFilePath = null, IEnumerable<BinaryData> arguments = null, HDInsightActivityDebugInfoOptionSetting? getDebugInfo = null, FactoryLinkedServiceReference sparkJobLinkedService = null, string className = null, BinaryData proxyUser = null, IDictionary<string, BinaryData> sparkConfig = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            arguments ??= new List<BinaryData>();
            sparkConfig ??= new Dictionary<string, BinaryData>();

            return new HDInsightSparkActivity(name, "HDInsightSpark", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, rootPath, entryFilePath, arguments?.ToList(), getDebugInfo, sparkJobLinkedService, className, proxyUser, sparkConfig);
        }

        /// <summary> Initializes a new instance of ExecuteSsisPackageActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="packageLocation"> SSIS package location. </param>
        /// <param name="runtime"> Specifies the runtime to execute SSIS package. The value should be &quot;x86&quot; or &quot;x64&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="loggingLevel"> The logging level of SSIS package execution. Type: string (or Expression with resultType string). </param>
        /// <param name="environmentPath"> The environment path to execute the SSIS package. Type: string (or Expression with resultType string). </param>
        /// <param name="executionCredential"> The package execution credential. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="projectParameters"> The project level parameters to execute the SSIS package. </param>
        /// <param name="packageParameters"> The package level parameters to execute the SSIS package. </param>
        /// <param name="projectConnectionManagers"> The project level connection managers to execute the SSIS package. </param>
        /// <param name="packageConnectionManagers"> The package level connection managers to execute the SSIS package. </param>
        /// <param name="propertyOverrides"> The property overrides to execute the SSIS package. </param>
        /// <param name="logLocation"> SSIS package execution log location. </param>
        /// <returns> A new <see cref="Models.ExecuteSsisPackageActivity"/> instance for mocking. </returns>
        public static ExecuteSsisPackageActivity ExecuteSsisPackageActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, SsisPackageLocation packageLocation = null, BinaryData runtime = null, BinaryData loggingLevel = null, BinaryData environmentPath = null, SsisExecutionCredential executionCredential = null, IntegrationRuntimeReference connectVia = null, IDictionary<string, SsisExecutionParameter> projectParameters = null, IDictionary<string, SsisExecutionParameter> packageParameters = null, IDictionary<string, IDictionary<string, SsisExecutionParameter>> projectConnectionManagers = null, IDictionary<string, IDictionary<string, SsisExecutionParameter>> packageConnectionManagers = null, IDictionary<string, SsisPropertyOverride> propertyOverrides = null, SsisLogLocation logLocation = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            projectParameters ??= new Dictionary<string, SsisExecutionParameter>();
            packageParameters ??= new Dictionary<string, SsisExecutionParameter>();
            projectConnectionManagers ??= new Dictionary<string, IDictionary<string, SsisExecutionParameter>>();
            packageConnectionManagers ??= new Dictionary<string, IDictionary<string, SsisExecutionParameter>>();
            propertyOverrides ??= new Dictionary<string, SsisPropertyOverride>();

            return new ExecuteSsisPackageActivity(name, "ExecuteSSISPackage", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, packageLocation, runtime, loggingLevel, environmentPath, executionCredential, connectVia, projectParameters, packageParameters, projectConnectionManagers, packageConnectionManagers, propertyOverrides, logLocation);
        }

        /// <summary> Initializes a new instance of SsisPackageLocation. </summary>
        /// <param name="packagePath"> The SSIS package path. Type: string (or Expression with resultType string). </param>
        /// <param name="locationType"> The type of SSIS package location. </param>
        /// <param name="packagePassword">
        /// Password of the package.
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessCredential"> The package access credential. </param>
        /// <param name="configurationPath"> The configuration file of the package execution. Type: string (or Expression with resultType string). </param>
        /// <param name="configurationAccessCredential"> The configuration file access credential. </param>
        /// <param name="packageName"> The package name. </param>
        /// <param name="packageContent"> The embedded package content. Type: string (or Expression with resultType string). </param>
        /// <param name="packageLastModifiedDate"> The embedded package last modified date. </param>
        /// <param name="childPackages"> The embedded child package list. </param>
        /// <returns> A new <see cref="Models.SsisPackageLocation"/> instance for mocking. </returns>
        public static SsisPackageLocation SsisPackageLocation(BinaryData packagePath = null, SsisPackageLocationType? locationType = null, FactorySecretBaseDefinition packagePassword = null, SsisAccessCredential accessCredential = null, BinaryData configurationPath = null, SsisAccessCredential configurationAccessCredential = null, string packageName = null, BinaryData packageContent = null, string packageLastModifiedDate = null, IEnumerable<SsisChildPackage> childPackages = null)
        {
            childPackages ??= new List<SsisChildPackage>();

            return new SsisPackageLocation(packagePath, locationType, packagePassword, accessCredential, configurationPath, configurationAccessCredential, packageName, packageContent, packageLastModifiedDate, childPackages?.ToList());
        }

        /// <summary> Initializes a new instance of SsisChildPackage. </summary>
        /// <param name="packagePath"> Path for embedded child package. Type: string (or Expression with resultType string). </param>
        /// <param name="packageName"> Name for embedded child package. </param>
        /// <param name="packageContent"> Content for embedded child package. Type: string (or Expression with resultType string). </param>
        /// <param name="packageLastModifiedDate"> Last modified date for embedded child package. </param>
        /// <returns> A new <see cref="Models.SsisChildPackage"/> instance for mocking. </returns>
        public static SsisChildPackage SsisChildPackage(BinaryData packagePath = null, string packageName = null, BinaryData packageContent = null, string packageLastModifiedDate = null)
        {
            return new SsisChildPackage(packagePath, packageName, packageContent, packageLastModifiedDate);
        }

        /// <summary> Initializes a new instance of SsisPropertyOverride. </summary>
        /// <param name="value"> SSIS package property override value. Type: string (or Expression with resultType string). </param>
        /// <param name="isSensitive"> Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true. </param>
        /// <returns> A new <see cref="Models.SsisPropertyOverride"/> instance for mocking. </returns>
        public static SsisPropertyOverride SsisPropertyOverride(BinaryData value = null, bool? isSensitive = null)
        {
            return new SsisPropertyOverride(value, isSensitive);
        }

        /// <summary> Initializes a new instance of SsisLogLocation. </summary>
        /// <param name="logPath"> The SSIS package execution log path. Type: string (or Expression with resultType string). </param>
        /// <param name="locationType"> The type of SSIS log location. </param>
        /// <param name="accessCredential"> The package execution log access credential. </param>
        /// <param name="logRefreshInterval"> Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SsisLogLocation"/> instance for mocking. </returns>
        public static SsisLogLocation SsisLogLocation(BinaryData logPath = null, SsisLogLocationType locationType = default, SsisAccessCredential accessCredential = null, BinaryData logRefreshInterval = null)
        {
            return new SsisLogLocation(logPath, locationType, accessCredential, logRefreshInterval);
        }

        /// <summary> Initializes a new instance of CustomActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="command"> Command for custom activity Type: string (or Expression with resultType string). </param>
        /// <param name="resourceLinkedService"> Resource linked service reference. </param>
        /// <param name="folderPath"> Folder path for resource files Type: string (or Expression with resultType string). </param>
        /// <param name="referenceObjects"> Reference objects. </param>
        /// <param name="extendedProperties"> User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined. </param>
        /// <param name="retentionTimeInDays"> The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double). </param>
        /// <param name="autoUserSpecification"> Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double). </param>
        /// <returns> A new <see cref="Models.CustomActivity"/> instance for mocking. </returns>
        public static CustomActivity CustomActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData command = null, FactoryLinkedServiceReference resourceLinkedService = null, BinaryData folderPath = null, CustomActivityReferenceObject referenceObjects = null, IDictionary<string, BinaryData> extendedProperties = null, BinaryData retentionTimeInDays = null, BinaryData autoUserSpecification = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            extendedProperties ??= new Dictionary<string, BinaryData>();

            return new CustomActivity(name, "Custom", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, command, resourceLinkedService, folderPath, referenceObjects, extendedProperties, retentionTimeInDays, autoUserSpecification);
        }

        /// <summary> Initializes a new instance of CustomActivityReferenceObject. </summary>
        /// <param name="linkedServices"> Linked service references. </param>
        /// <param name="datasets"> Dataset references. </param>
        /// <returns> A new <see cref="Models.CustomActivityReferenceObject"/> instance for mocking. </returns>
        public static CustomActivityReferenceObject CustomActivityReferenceObject(IEnumerable<FactoryLinkedServiceReference> linkedServices = null, IEnumerable<DatasetReference> datasets = null)
        {
            linkedServices ??= new List<FactoryLinkedServiceReference>();
            datasets ??= new List<DatasetReference>();

            return new CustomActivityReferenceObject(linkedServices?.ToList(), datasets?.ToList());
        }

        /// <summary> Initializes a new instance of SqlServerStoredProcedureActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storedProcedureName"> Stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <returns> A new <see cref="Models.SqlServerStoredProcedureActivity"/> instance for mocking. </returns>
        public static SqlServerStoredProcedureActivity SqlServerStoredProcedureActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData storedProcedureName = null, BinaryData storedProcedureParameters = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SqlServerStoredProcedureActivity(name, "SqlServerStoredProcedure", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storedProcedureName, storedProcedureParameters);
        }

        /// <summary> Initializes a new instance of ExecutePipelineActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="policy"> Execute pipeline activity policy. </param>
        /// <param name="pipeline"> Pipeline reference. </param>
        /// <param name="parameters"> Pipeline parameters. </param>
        /// <param name="waitOnCompletion"> Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false. </param>
        /// <returns> A new <see cref="Models.ExecutePipelineActivity"/> instance for mocking. </returns>
        public static ExecutePipelineActivity ExecutePipelineActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, ExecutePipelineActivityPolicy policy = null, FactoryPipelineReference pipeline = null, IDictionary<string, BinaryData> parameters = null, bool? waitOnCompletion = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            parameters ??= new Dictionary<string, BinaryData>();

            return new ExecutePipelineActivity(name, "ExecutePipeline", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, policy, pipeline, parameters, waitOnCompletion);
        }

        /// <summary> Initializes a new instance of ExecutePipelineActivityPolicy. </summary>
        /// <param name="enableSecureInput"> When set to true, Input from activity is considered as secure and will not be logged to monitoring. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ExecutePipelineActivityPolicy"/> instance for mocking. </returns>
        public static ExecutePipelineActivityPolicy ExecutePipelineActivityPolicy(bool? enableSecureInput = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ExecutePipelineActivityPolicy(enableSecureInput, additionalProperties);
        }

        /// <summary> Initializes a new instance of DeleteActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="recursive"> If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="maxConcurrentConnections"> The max concurrent connections to connect data source at the same time. </param>
        /// <param name="enableLogging"> Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="logStorageSettings"> Log storage settings customer need to provide when enableLogging is true. </param>
        /// <param name="dataset"> Delete activity dataset reference. </param>
        /// <param name="storeSettings">
        /// Delete activity store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeleteActivity"/> instance for mocking. </returns>
        public static DeleteActivity DeleteActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData recursive = null, int? maxConcurrentConnections = null, BinaryData enableLogging = null, LogStorageSettings logStorageSettings = null, DatasetReference dataset = null, StoreReadSettings storeSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new DeleteActivity(name, "Delete", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, recursive, maxConcurrentConnections, enableLogging, logStorageSettings, dataset, storeSettings);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerCommandActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="command"> A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string). </param>
        /// <param name="commandTimeout"> Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerCommandActivity"/> instance for mocking. </returns>
        public static AzureDataExplorerCommandActivity AzureDataExplorerCommandActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData command = null, BinaryData commandTimeout = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureDataExplorerCommandActivity(name, "AzureDataExplorerCommand", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, command, commandTimeout);
        }

        /// <summary> Initializes a new instance of LookupActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="source">
        /// Dataset-specific source properties, same as copy activity source.
        /// Please note <see cref="CopyActivitySource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMwsSource"/>, <see cref="AmazonRdsForOracleSource"/>, <see cref="AmazonRdsForSqlServerSource"/>, <see cref="AmazonRedshiftSource"/>, <see cref="AvroSource"/>, <see cref="AzureBlobFSSource"/>, <see cref="AzureDataExplorerSource"/>, <see cref="AzureDataLakeStoreSource"/>, <see cref="AzureDatabricksDeltaLakeSource"/>, <see cref="AzureMariaDBSource"/>, <see cref="AzureMySqlSource"/>, <see cref="AzurePostgreSqlSource"/>, <see cref="AzureSqlSource"/>, <see cref="AzureTableSource"/>, <see cref="BinarySource"/>, <see cref="AzureBlobSource"/>, <see cref="CassandraSource"/>, <see cref="CommonDataServiceForAppsSource"/>, <see cref="ConcurSource"/>, <see cref="CosmosDBMongoDBApiSource"/>, <see cref="CosmosDBSqlApiSource"/>, <see cref="CouchbaseSource"/>, <see cref="Db2Source"/>, <see cref="DelimitedTextSource"/>, <see cref="DocumentDBCollectionSource"/>, <see cref="DrillSource"/>, <see cref="DynamicsAXSource"/>, <see cref="DynamicsCrmSource"/>, <see cref="DynamicsSource"/>, <see cref="EloquaSource"/>, <see cref="ExcelSource"/>, <see cref="FileSystemSource"/>, <see cref="GoogleAdWordsSource"/>, <see cref="GoogleBigQuerySource"/>, <see cref="GreenplumSource"/>, <see cref="HBaseSource"/>, <see cref="HdfsSource"/>, <see cref="HiveSource"/>, <see cref="HttpFileSource"/>, <see cref="HubspotSource"/>, <see cref="ImpalaSource"/>, <see cref="InformixSource"/>, <see cref="JiraSource"/>, <see cref="JsonSource"/>, <see cref="MagentoSource"/>, <see cref="MariaDBSource"/>, <see cref="MarketoSource"/>, <see cref="MicrosoftAccessSource"/>, <see cref="MongoDBAtlasSource"/>, <see cref="MongoDBSource"/>, <see cref="MongoDBV2Source"/>, <see cref="MySqlSource"/>, <see cref="NetezzaSource"/>, <see cref="ODataSource"/>, <see cref="OdbcSource"/>, <see cref="Office365Source"/>, <see cref="OracleServiceCloudSource"/>, <see cref="OracleSource"/>, <see cref="OrcSource"/>, <see cref="ParquetSource"/>, <see cref="PaypalSource"/>, <see cref="PhoenixSource"/>, <see cref="PostgreSqlSource"/>, <see cref="PrestoSource"/>, <see cref="QuickBooksSource"/>, <see cref="RelationalSource"/>, <see cref="ResponsysSource"/>, <see cref="RestSource"/>, <see cref="SalesforceMarketingCloudSource"/>, <see cref="SalesforceServiceCloudSource"/>, <see cref="SalesforceSource"/>, <see cref="SapBwSource"/>, <see cref="SapCloudForCustomerSource"/>, <see cref="SapEccSource"/>, <see cref="SapHanaSource"/>, <see cref="SapOdpSource"/>, <see cref="SapOpenHubSource"/>, <see cref="SapTableSource"/>, <see cref="ServiceNowSource"/>, <see cref="SharePointOnlineListSource"/>, <see cref="ShopifySource"/>, <see cref="SnowflakeSource"/>, <see cref="SparkSource"/>, <see cref="SqlDWSource"/>, <see cref="SqlMISource"/>, <see cref="SqlServerSource"/>, <see cref="SqlSource"/>, <see cref="SquareSource"/>, <see cref="SybaseSource"/>, <see cref="TabularSource"/>, <see cref="TeradataSource"/>, <see cref="VerticaSource"/>, <see cref="WebSource"/>, <see cref="XeroSource"/>, <see cref="XmlSource"/> and <see cref="ZohoSource"/>.
        /// </param>
        /// <param name="dataset"> Lookup activity dataset reference. </param>
        /// <param name="firstRowOnly"> Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.LookupActivity"/> instance for mocking. </returns>
        public static LookupActivity LookupActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, CopyActivitySource source = null, DatasetReference dataset = null, BinaryData firstRowOnly = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new LookupActivity(name, "Lookup", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, source, dataset, firstRowOnly);
        }

        /// <summary> Initializes a new instance of WebActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="uri"> Web activity target endpoint and path. Type: string (or Expression with resultType string). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Authentication method used for calling the endpoint. </param>
        /// <param name="disableCertValidation"> When set to true, Certificate validation will be disabled. </param>
        /// <param name="datasets"> List of datasets passed to web endpoint. </param>
        /// <param name="linkedServices"> List of linked services passed to web endpoint. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <returns> A new <see cref="Models.WebActivity"/> instance for mocking. </returns>
        public static WebActivity WebActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, WebActivityMethod method = default, BinaryData uri = null, BinaryData headers = null, BinaryData body = null, WebActivityAuthentication authentication = null, bool? disableCertValidation = null, IEnumerable<DatasetReference> datasets = null, IEnumerable<FactoryLinkedServiceReference> linkedServices = null, IntegrationRuntimeReference connectVia = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            datasets ??= new List<DatasetReference>();
            linkedServices ??= new List<FactoryLinkedServiceReference>();

            return new WebActivity(name, "WebActivity", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, method, uri, headers, body, authentication, disableCertValidation, datasets?.ToList(), linkedServices?.ToList(), connectVia);
        }

        /// <summary> Initializes a new instance of WebActivityAuthentication. </summary>
        /// <param name="webActivityAuthenticationType"> Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal). </param>
        /// <param name="pfx">
        /// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="username"> Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="resource"> Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="userTenant"> TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        /// <returns> A new <see cref="Models.WebActivityAuthentication"/> instance for mocking. </returns>
        public static WebActivityAuthentication WebActivityAuthentication(string webActivityAuthenticationType = null, FactorySecretBaseDefinition pfx = null, BinaryData username = null, FactorySecretBaseDefinition password = null, BinaryData resource = null, BinaryData userTenant = null, FactoryCredentialReference credential = null)
        {
            return new WebActivityAuthentication(webActivityAuthenticationType, pfx, username, password, resource, userTenant, credential);
        }

        /// <summary> Initializes a new instance of GetDatasetMetadataActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="dataset"> GetMetadata activity dataset reference. </param>
        /// <param name="fieldList"> Fields of metadata to get from dataset. </param>
        /// <param name="storeSettings">
        /// GetMetadata activity store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3CompatibleReadSettings"/>, <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/>, <see cref="OracleCloudStorageReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings">
        /// GetMetadata activity format settings.
        /// Please note <see cref="FormatReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BinaryReadSettings"/>, <see cref="JsonReadSettings"/>, <see cref="XmlReadSettings"/> and <see cref="DelimitedTextReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.GetDatasetMetadataActivity"/> instance for mocking. </returns>
        public static GetDatasetMetadataActivity GetDatasetMetadataActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, DatasetReference dataset = null, IEnumerable<BinaryData> fieldList = null, StoreReadSettings storeSettings = null, FormatReadSettings formatSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            fieldList ??= new List<BinaryData>();

            return new GetDatasetMetadataActivity(name, "GetMetadata", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, dataset, fieldList?.ToList(), storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of IfConditionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. </param>
        /// <param name="ifTrueActivities">
        /// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <param name="ifFalseActivities">
        /// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IfConditionActivity"/> instance for mocking. </returns>
        public static IfConditionActivity IfConditionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryExpressionDefinition expression = null, IEnumerable<PipelineActivity> ifTrueActivities = null, IEnumerable<PipelineActivity> ifFalseActivities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            ifTrueActivities ??= new List<PipelineActivity>();
            ifFalseActivities ??= new List<PipelineActivity>();

            return new IfConditionActivity(name, "IfCondition", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, expression, ifTrueActivities?.ToList(), ifFalseActivities?.ToList());
        }

        /// <summary> Initializes a new instance of SwitchActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="on"> An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed. </param>
        /// <param name="cases"> List of cases that correspond to expected values of the &apos;on&apos; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities. </param>
        /// <param name="defaultActivities">
        /// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SwitchActivity"/> instance for mocking. </returns>
        public static SwitchActivity SwitchActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryExpressionDefinition @on = null, IEnumerable<SwitchCaseActivity> cases = null, IEnumerable<PipelineActivity> defaultActivities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            cases ??= new List<SwitchCaseActivity>();
            defaultActivities ??= new List<PipelineActivity>();

            return new SwitchActivity(name, "Switch", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, @on, cases?.ToList(), defaultActivities?.ToList());
        }

        /// <summary> Initializes a new instance of SwitchCaseActivity. </summary>
        /// <param name="value"> Expected value that satisfies the expression result of the &apos;on&apos; property. </param>
        /// <param name="activities">
        /// List of activities to execute for satisfied case condition.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SwitchCaseActivity"/> instance for mocking. </returns>
        public static SwitchCaseActivity SwitchCaseActivity(string value = null, IEnumerable<PipelineActivity> activities = null)
        {
            activities ??= new List<PipelineActivity>();

            return new SwitchCaseActivity(value, activities?.ToList());
        }

        /// <summary> Initializes a new instance of ForEachActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="isSequential"> Should the loop be executed in sequence or in parallel (max 50). </param>
        /// <param name="batchCount"> Batch count to be used for controlling the number of parallel execution (when isSequential is set to false). </param>
        /// <param name="items"> Collection to iterate. </param>
        /// <param name="activities">
        /// List of activities to execute .
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ForEachActivity"/> instance for mocking. </returns>
        public static ForEachActivity ForEachActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, bool? isSequential = null, int? batchCount = null, FactoryExpressionDefinition items = null, IEnumerable<PipelineActivity> activities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            activities ??= new List<PipelineActivity>();

            return new ForEachActivity(name, "ForEach", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, isSequential, batchCount, items, activities?.ToList());
        }

        /// <summary> Initializes a new instance of AzureMLBatchExecutionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="globalParameters"> Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request. </param>
        /// <param name="webServiceOutputs"> Key,Value pairs, mapping the names of Azure ML endpoint&apos;s Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request. </param>
        /// <param name="webServiceInputs"> Key,Value pairs, mapping the names of Azure ML endpoint&apos;s Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request. </param>
        /// <returns> A new <see cref="Models.AzureMLBatchExecutionActivity"/> instance for mocking. </returns>
        public static AzureMLBatchExecutionActivity AzureMLBatchExecutionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IDictionary<string, BinaryData> globalParameters = null, IDictionary<string, AzureMLWebServiceFile> webServiceOutputs = null, IDictionary<string, AzureMLWebServiceFile> webServiceInputs = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            globalParameters ??= new Dictionary<string, BinaryData>();
            webServiceOutputs ??= new Dictionary<string, AzureMLWebServiceFile>();
            webServiceInputs ??= new Dictionary<string, AzureMLWebServiceFile>();

            return new AzureMLBatchExecutionActivity(name, "AzureMLBatchExecution", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, globalParameters, webServiceOutputs, webServiceInputs);
        }

        /// <summary> Initializes a new instance of AzureMLUpdateResourceActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="trainedModelName"> Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string). </param>
        /// <param name="trainedModelLinkedServiceName"> Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation. </param>
        /// <param name="trainedModelFilePath"> The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLUpdateResourceActivity"/> instance for mocking. </returns>
        public static AzureMLUpdateResourceActivity AzureMLUpdateResourceActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData trainedModelName = null, FactoryLinkedServiceReference trainedModelLinkedServiceName = null, BinaryData trainedModelFilePath = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMLUpdateResourceActivity(name, "AzureMLUpdateResource", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, trainedModelName, trainedModelLinkedServiceName, trainedModelFilePath);
        }

        /// <summary> Initializes a new instance of AzureMLExecutePipelineActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="mlPipelineId"> ID of the published Azure ML pipeline. Type: string (or Expression with resultType string). </param>
        /// <param name="mlPipelineEndpointId"> ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="experimentName"> Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string). </param>
        /// <param name="mlPipelineParameters"> Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object). </param>
        /// <param name="dataPathAssignments"> Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object). </param>
        /// <param name="mlParentRunId"> The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string). </param>
        /// <param name="continueOnStepFailure"> Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureMLExecutePipelineActivity"/> instance for mocking. </returns>
        public static AzureMLExecutePipelineActivity AzureMLExecutePipelineActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData mlPipelineId = null, BinaryData mlPipelineEndpointId = null, BinaryData version = null, BinaryData experimentName = null, BinaryData mlPipelineParameters = null, BinaryData dataPathAssignments = null, BinaryData mlParentRunId = null, BinaryData continueOnStepFailure = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureMLExecutePipelineActivity(name, "AzureMLExecutePipeline", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, mlPipelineId, mlPipelineEndpointId, version, experimentName, mlPipelineParameters, dataPathAssignments, mlParentRunId, continueOnStepFailure);
        }

        /// <summary> Initializes a new instance of DataLakeAnalyticsUsqlActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="scriptPath"> Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="degreeOfParallelism"> The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1. </param>
        /// <param name="priority"> Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1. </param>
        /// <param name="parameters"> Parameters for U-SQL job request. </param>
        /// <param name="runtimeVersion"> Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string). </param>
        /// <param name="compilationMode"> Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DataLakeAnalyticsUsqlActivity"/> instance for mocking. </returns>
        public static DataLakeAnalyticsUsqlActivity DataLakeAnalyticsUsqlActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData scriptPath = null, FactoryLinkedServiceReference scriptLinkedService = null, BinaryData degreeOfParallelism = null, BinaryData priority = null, IDictionary<string, BinaryData> parameters = null, BinaryData runtimeVersion = null, BinaryData compilationMode = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            parameters ??= new Dictionary<string, BinaryData>();

            return new DataLakeAnalyticsUsqlActivity(name, "DataLakeAnalyticsU-SQL", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, scriptPath, scriptLinkedService, degreeOfParallelism, priority, parameters, runtimeVersion, compilationMode);
        }

        /// <summary> Initializes a new instance of WaitActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="waitTimeInSeconds"> Duration in seconds. </param>
        /// <returns> A new <see cref="Models.WaitActivity"/> instance for mocking. </returns>
        public static WaitActivity WaitActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData waitTimeInSeconds = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WaitActivity(name, "Wait", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, waitTimeInSeconds);
        }

        /// <summary> Initializes a new instance of FailActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="message"> The error message that surfaced in the Fail activity. It can be dynamic content that&apos;s evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). </param>
        /// <param name="errorCode"> The error code that categorizes the error type of the Fail activity. It can be dynamic content that&apos;s evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FailActivity"/> instance for mocking. </returns>
        public static FailActivity FailActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData message = null, BinaryData errorCode = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FailActivity(name, "Fail", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, message, errorCode);
        }

        /// <summary> Initializes a new instance of UntilActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true. </param>
        /// <param name="timeout"> Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="activities">
        /// List of activities to execute.
        /// Please note <see cref="PipelineActivity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecuteWranglingDataflowActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetDatasetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.UntilActivity"/> instance for mocking. </returns>
        public static UntilActivity UntilActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryExpressionDefinition expression = null, BinaryData timeout = null, IEnumerable<PipelineActivity> activities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            activities ??= new List<PipelineActivity>();

            return new UntilActivity(name, "Until", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, expression, timeout, activities?.ToList());
        }

        /// <summary> Initializes a new instance of ValidationActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="timeout"> Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sleep"> A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer). </param>
        /// <param name="minimumSize"> Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer). </param>
        /// <param name="childItems"> Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dataset"> Validation activity dataset reference. </param>
        /// <returns> A new <see cref="Models.ValidationActivity"/> instance for mocking. </returns>
        public static ValidationActivity ValidationActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData timeout = null, BinaryData sleep = null, BinaryData minimumSize = null, BinaryData childItems = null, DatasetReference dataset = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ValidationActivity(name, "Validation", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, timeout, sleep, minimumSize, childItems, dataset);
        }

        /// <summary> Initializes a new instance of FilterActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="items"> Input array on which filter should be applied. </param>
        /// <param name="condition"> Condition to be used for filtering the input. </param>
        /// <returns> A new <see cref="Models.FilterActivity"/> instance for mocking. </returns>
        public static FilterActivity FilterActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryExpressionDefinition items = null, FactoryExpressionDefinition condition = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new FilterActivity(name, "Filter", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, items, condition);
        }

        /// <summary> Initializes a new instance of DatabricksNotebookActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="notebookPath"> The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string). </param>
        /// <param name="baseParameters"> Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksNotebookActivity"/> instance for mocking. </returns>
        public static DatabricksNotebookActivity DatabricksNotebookActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData notebookPath = null, IDictionary<string, BinaryData> baseParameters = null, IEnumerable<IDictionary<string, BinaryData>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            baseParameters ??= new Dictionary<string, BinaryData>();
            libraries ??= new List<IDictionary<string, BinaryData>>();

            return new DatabricksNotebookActivity(name, "DatabricksNotebook", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, notebookPath, baseParameters, libraries?.ToList());
        }

        /// <summary> Initializes a new instance of DatabricksSparkJarActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="mainClassName"> The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string). </param>
        /// <param name="parameters"> Parameters that will be passed to the main method. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksSparkJarActivity"/> instance for mocking. </returns>
        public static DatabricksSparkJarActivity DatabricksSparkJarActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData mainClassName = null, IEnumerable<BinaryData> parameters = null, IEnumerable<IDictionary<string, BinaryData>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            parameters ??= new List<BinaryData>();
            libraries ??= new List<IDictionary<string, BinaryData>>();

            return new DatabricksSparkJarActivity(name, "DatabricksSparkJar", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, mainClassName, parameters?.ToList(), libraries?.ToList());
        }

        /// <summary> Initializes a new instance of DatabricksSparkPythonActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="pythonFile"> The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string). </param>
        /// <param name="parameters"> Command line parameters that will be passed to the Python file. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksSparkPythonActivity"/> instance for mocking. </returns>
        public static DatabricksSparkPythonActivity DatabricksSparkPythonActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, BinaryData pythonFile = null, IEnumerable<BinaryData> parameters = null, IEnumerable<IDictionary<string, BinaryData>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            parameters ??= new List<BinaryData>();
            libraries ??= new List<IDictionary<string, BinaryData>>();

            return new DatabricksSparkPythonActivity(name, "DatabricksSparkPython", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, pythonFile, parameters?.ToList(), libraries?.ToList());
        }

        /// <summary> Initializes a new instance of SetVariableActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="variableName"> Name of the variable whose value needs to be set. </param>
        /// <param name="value"> Value to be set. Could be a static value or Expression. </param>
        /// <returns> A new <see cref="Models.SetVariableActivity"/> instance for mocking. </returns>
        public static SetVariableActivity SetVariableActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, string variableName = null, BinaryData value = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SetVariableActivity(name, "SetVariable", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, variableName, value);
        }

        /// <summary> Initializes a new instance of AppendVariableActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="variableName"> Name of the variable whose value needs to be appended to. </param>
        /// <param name="value"> Value to be appended. Could be a static value or Expression. </param>
        /// <returns> A new <see cref="Models.AppendVariableActivity"/> instance for mocking. </returns>
        public static AppendVariableActivity AppendVariableActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, string variableName = null, BinaryData value = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AppendVariableActivity(name, "AppendVariable", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, variableName, value);
        }

        /// <summary> Initializes a new instance of AzureFunctionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="functionName"> Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFunctionActivity"/> instance for mocking. </returns>
        public static AzureFunctionActivity AzureFunctionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, AzureFunctionActivityMethod method = default, BinaryData functionName = null, BinaryData headers = null, BinaryData body = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new AzureFunctionActivity(name, "AzureFunctionActivity", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, method, functionName, headers, body);
        }

        /// <summary> Initializes a new instance of WebHookActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="uri"> WebHook activity target endpoint and path. Type: string (or Expression with resultType string). </param>
        /// <param name="timeout"> The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Authentication method used for calling the endpoint. </param>
        /// <param name="reportStatusOnCallBack"> When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode &gt;= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.WebHookActivity"/> instance for mocking. </returns>
        public static WebHookActivity WebHookActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, WebHookActivityMethod method = default, BinaryData uri = null, string timeout = null, BinaryData headers = null, BinaryData body = null, WebActivityAuthentication authentication = null, BinaryData reportStatusOnCallBack = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new WebHookActivity(name, "WebHook", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, method, uri, timeout, headers, body, authentication, reportStatusOnCallBack);
        }

        /// <summary> Initializes a new instance of ExecuteDataFlowActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="dataFlow"> Data flow reference. </param>
        /// <param name="staging"> Staging info for execute data flow activity. </param>
        /// <param name="integrationRuntime"> The integration runtime reference. </param>
        /// <param name="compute"> Compute properties for data flow activity. </param>
        /// <param name="traceLevel"> Trace level setting used for data flow monitoring output. Supported values are: &apos;coarse&apos;, &apos;fine&apos;, and &apos;none&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="continueOnError"> Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="runConcurrently"> Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="sourceStagingConcurrency"> Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.ExecuteDataFlowActivity"/> instance for mocking. </returns>
        public static ExecuteDataFlowActivity ExecuteDataFlowActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, DataFlowReference dataFlow = null, DataFlowStagingInfo staging = null, IntegrationRuntimeReference integrationRuntime = null, ExecuteDataFlowActivityTypePropertiesCompute compute = null, BinaryData traceLevel = null, BinaryData continueOnError = null, BinaryData runConcurrently = null, BinaryData sourceStagingConcurrency = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ExecuteDataFlowActivity(name, "ExecuteDataFlow", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, dataFlow, staging, integrationRuntime, compute, traceLevel, continueOnError, runConcurrently, sourceStagingConcurrency);
        }

        /// <summary> Initializes a new instance of ExecuteDataFlowActivityTypePropertiesCompute. </summary>
        /// <param name="computeType"> Compute type of the cluster which will execute data flow job. Possible values include: &apos;General&apos;, &apos;MemoryOptimized&apos;, &apos;ComputeOptimized&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="coreCount"> Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.ExecuteDataFlowActivityTypePropertiesCompute"/> instance for mocking. </returns>
        public static ExecuteDataFlowActivityTypePropertiesCompute ExecuteDataFlowActivityTypePropertiesCompute(BinaryData computeType = null, BinaryData coreCount = null)
        {
            return new ExecuteDataFlowActivityTypePropertiesCompute(computeType, coreCount);
        }

        /// <summary> Initializes a new instance of ExecuteWranglingDataflowActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="dataFlow"> Data flow reference. </param>
        /// <param name="staging"> Staging info for execute data flow activity. </param>
        /// <param name="integrationRuntime"> The integration runtime reference. </param>
        /// <param name="compute"> Compute properties for data flow activity. </param>
        /// <param name="traceLevel"> Trace level setting used for data flow monitoring output. Supported values are: &apos;coarse&apos;, &apos;fine&apos;, and &apos;none&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="continueOnError"> Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="runConcurrently"> Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="sourceStagingConcurrency"> Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinks"> (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName. </param>
        /// <param name="queries"> List of mapping for Power Query mashup query to sink dataset(s). </param>
        /// <returns> A new <see cref="Models.ExecuteWranglingDataflowActivity"/> instance for mocking. </returns>
        public static ExecuteWranglingDataflowActivity ExecuteWranglingDataflowActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, ActivityPolicy policy = null, DataFlowReference dataFlow = null, DataFlowStagingInfo staging = null, IntegrationRuntimeReference integrationRuntime = null, ExecuteDataFlowActivityTypePropertiesCompute compute = null, BinaryData traceLevel = null, BinaryData continueOnError = null, BinaryData runConcurrently = null, BinaryData sourceStagingConcurrency = null, IDictionary<string, PowerQuerySink> sinks = null, IEnumerable<PowerQuerySinkMapping> queries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            sinks ??= new Dictionary<string, PowerQuerySink>();
            queries ??= new List<PowerQuerySinkMapping>();

            return new ExecuteWranglingDataflowActivity(name, "ExecuteWranglingDataflow", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, policy, dataFlow, staging, integrationRuntime, compute, traceLevel, continueOnError, runConcurrently, sourceStagingConcurrency, sinks, queries?.ToList());
        }

        /// <summary> Initializes a new instance of PowerQuerySinkMapping. </summary>
        /// <param name="queryName"> Name of the query in Power Query mashup document. </param>
        /// <param name="dataflowSinks"> List of sinks mapped to Power Query mashup query. </param>
        /// <returns> A new <see cref="Models.PowerQuerySinkMapping"/> instance for mocking. </returns>
        public static PowerQuerySinkMapping PowerQuerySinkMapping(string queryName = null, IEnumerable<PowerQuerySink> dataflowSinks = null)
        {
            dataflowSinks ??= new List<PowerQuerySink>();

            return new PowerQuerySinkMapping(queryName, dataflowSinks?.ToList());
        }

        /// <summary> Initializes a new instance of ScriptActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="scripts"> Array of script blocks. Type: array. </param>
        /// <param name="logSettings"> Log settings of script activity. </param>
        /// <returns> A new <see cref="Models.ScriptActivity"/> instance for mocking. </returns>
        public static ScriptActivity ScriptActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<ActivityUserProperty> userProperties = null, IDictionary<string, BinaryData> additionalProperties = null, FactoryLinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<ScriptActivityScriptBlock> scripts = null, ScriptActivityTypePropertiesLogSettings logSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<ActivityUserProperty>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            scripts ??= new List<ScriptActivityScriptBlock>();

            return new ScriptActivity(name, "Script", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, scripts?.ToList(), logSettings);
        }

        /// <summary> Initializes a new instance of ScriptActivityScriptBlock. </summary>
        /// <param name="text"> The query text. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptType"> The type of the query. Type: string. </param>
        /// <param name="parameters"> Array of script parameters. Type: array. </param>
        /// <returns> A new <see cref="Models.ScriptActivityScriptBlock"/> instance for mocking. </returns>
        public static ScriptActivityScriptBlock ScriptActivityScriptBlock(BinaryData text = null, ScriptType scriptType = default, IEnumerable<ScriptActivityParameter> parameters = null)
        {
            parameters ??= new List<ScriptActivityParameter>();

            return new ScriptActivityScriptBlock(text, scriptType, parameters?.ToList());
        }

        /// <summary> Initializes a new instance of ScriptActivityParameter. </summary>
        /// <param name="name"> The name of the parameter. Type: string (or Expression with resultType string). </param>
        /// <param name="parameterType"> The type of the parameter. </param>
        /// <param name="value"> The value of the parameter. </param>
        /// <param name="direction"> The direction of the parameter. </param>
        /// <param name="size"> The size of the output direction parameter. </param>
        /// <returns> A new <see cref="Models.ScriptActivityParameter"/> instance for mocking. </returns>
        public static ScriptActivityParameter ScriptActivityParameter(BinaryData name = null, ScriptActivityParameterType? parameterType = null, BinaryData value = null, ScriptActivityParameterDirection? direction = null, int? size = null)
        {
            return new ScriptActivityParameter(name, parameterType, value, direction, size);
        }

        /// <summary> Initializes a new instance of ScriptActivityTypePropertiesLogSettings. </summary>
        /// <param name="logDestination"> The destination of logs. Type: string. </param>
        /// <param name="logLocationSettings"> Log location settings customer needs to provide when enabling log. </param>
        /// <returns> A new <see cref="Models.ScriptActivityTypePropertiesLogSettings"/> instance for mocking. </returns>
        public static ScriptActivityTypePropertiesLogSettings ScriptActivityTypePropertiesLogSettings(ScriptActivityLogDestination logDestination = default, LogLocationSettings logLocationSettings = null)
        {
            return new ScriptActivityTypePropertiesLogSettings(logDestination, logLocationSettings);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="disableMetricsCollection"> If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> The OData query to filter the data in SharePoint Online list. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListSource"/> instance for mocking. </returns>
        public static SharePointOnlineListSource SharePointOnlineListSource(BinaryData sourceRetryCount = null, BinaryData sourceRetryWait = null, BinaryData maxConcurrentConnections = null, BinaryData disableMetricsCollection = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData query = null, BinaryData httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SharePointOnlineListSource("SharePointOnlineListSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of MultiplePipelineTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <returns> A new <see cref="Models.MultiplePipelineTrigger"/> instance for mocking. </returns>
        public static MultiplePipelineTrigger MultiplePipelineTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new MultiplePipelineTrigger("MultiplePipelineTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList());
        }

        /// <summary> Initializes a new instance of ScheduleTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="recurrence"> Recurrence schedule configuration. </param>
        /// <returns> A new <see cref="Models.ScheduleTrigger"/> instance for mocking. </returns>
        public static ScheduleTrigger ScheduleTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, ScheduleTriggerRecurrence recurrence = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new ScheduleTrigger("ScheduleTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), recurrence);
        }

        /// <summary> Initializes a new instance of ScheduleTriggerRecurrence. </summary>
        /// <param name="frequency"> The frequency. </param>
        /// <param name="interval"> The interval. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="timeZone"> The time zone. </param>
        /// <param name="schedule"> The recurrence schedule. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ScheduleTriggerRecurrence"/> instance for mocking. </returns>
        public static ScheduleTriggerRecurrence ScheduleTriggerRecurrence(RecurrenceFrequency? frequency = null, int? interval = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeZone = null, RecurrenceSchedule schedule = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ScheduleTriggerRecurrence(frequency, interval, startOn, endOn, timeZone, schedule, additionalProperties);
        }

        /// <summary> Initializes a new instance of RecurrenceSchedule. </summary>
        /// <param name="minutes"> The minutes. </param>
        /// <param name="hours"> The hours. </param>
        /// <param name="weekDays"> The days of the week. </param>
        /// <param name="monthDays"> The month days. </param>
        /// <param name="monthlyOccurrences"> The monthly occurrences. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RecurrenceSchedule"/> instance for mocking. </returns>
        public static RecurrenceSchedule RecurrenceSchedule(IEnumerable<int> minutes = null, IEnumerable<int> hours = null, IEnumerable<FactoryDayOfWeek> weekDays = null, IEnumerable<int> monthDays = null, IEnumerable<RecurrenceScheduleOccurrence> monthlyOccurrences = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            minutes ??= new List<int>();
            hours ??= new List<int>();
            weekDays ??= new List<FactoryDayOfWeek>();
            monthDays ??= new List<int>();
            monthlyOccurrences ??= new List<RecurrenceScheduleOccurrence>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RecurrenceSchedule(minutes?.ToList(), hours?.ToList(), weekDays?.ToList(), monthDays?.ToList(), monthlyOccurrences?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of RecurrenceScheduleOccurrence. </summary>
        /// <param name="day"> The day of the week. </param>
        /// <param name="occurrence"> The occurrence. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RecurrenceScheduleOccurrence"/> instance for mocking. </returns>
        public static RecurrenceScheduleOccurrence RecurrenceScheduleOccurrence(DayOfWeek? day = null, int? occurrence = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RecurrenceScheduleOccurrence(day, occurrence, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureBlobTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="folderPath"> The path of the container/folder that will trigger the pipeline. </param>
        /// <param name="maxConcurrency"> The max number of parallel files to handle when it is triggered. </param>
        /// <param name="linkedService"> The Azure Storage linked service reference. </param>
        /// <returns> A new <see cref="Models.AzureBlobTrigger"/> instance for mocking. </returns>
        public static AzureBlobTrigger AzureBlobTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string folderPath = null, int maxConcurrency = default, FactoryLinkedServiceReference linkedService = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new AzureBlobTrigger("BlobTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), folderPath, maxConcurrency, linkedService);
        }

        /// <summary> Initializes a new instance of AzureBlobEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="blobPathBeginsWith"> The blob path must begin with the pattern provided for trigger to fire. For example, &apos;/records/blobs/december/&apos; will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="blobPathEndsWith"> The blob path must end with the pattern provided for trigger to fire. For example, &apos;december/boxes.csv&apos; will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="ignoreEmptyBlobs"> If set to true, blobs with zero bytes will be ignored. </param>
        /// <param name="events"> The type of events that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Storage Account. </param>
        /// <returns> A new <see cref="Models.AzureBlobEventsTrigger"/> instance for mocking. </returns>
        public static AzureBlobEventsTrigger AzureBlobEventsTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string blobPathBeginsWith = null, string blobPathEndsWith = null, bool? ignoreEmptyBlobs = null, IEnumerable<AzureBlobEventType> events = null, string scope = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<AzureBlobEventType>();

            return new AzureBlobEventsTrigger("BlobEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), blobPathBeginsWith, blobPathEndsWith, ignoreEmptyBlobs, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of CustomEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="subjectBeginsWith"> The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="subjectEndsWith"> The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="events"> The list of event types that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Azure Event Grid Topic. </param>
        /// <returns> A new <see cref="Models.CustomEventsTrigger"/> instance for mocking. </returns>
        public static CustomEventsTrigger CustomEventsTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string subjectBeginsWith = null, string subjectEndsWith = null, IEnumerable<BinaryData> events = null, string scope = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<BinaryData>();

            return new CustomEventsTrigger("CustomEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), subjectBeginsWith, subjectEndsWith, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of TumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when an event is fired for trigger window that is ready. </param>
        /// <param name="frequency"> The frequency of the time windows. </param>
        /// <param name="interval"> The interval of the time windows. The minimum interval allowed is 15 Minutes. </param>
        /// <param name="startOn"> The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="endOn"> The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="delay"> Specifies how long the trigger waits past due time before triggering new run. It doesn&apos;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrency"> The max number of parallel time windows (ready for execution) for which a new run is triggered. </param>
        /// <param name="retryPolicy"> Retry policy that will be applied for failed pipeline runs. </param>
        /// <param name="dependsOn">
        /// Triggers that this trigger depends on. Only tumbling window triggers are supported.
        /// Please note <see cref="DependencyReference"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SelfDependencyTumblingWindowTriggerReference"/>, <see cref="TriggerDependencyReference"/> and <see cref="TumblingWindowTriggerDependencyReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TumblingWindowTrigger"/> instance for mocking. </returns>
        public static TumblingWindowTrigger TumblingWindowTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, TriggerPipelineReference pipeline = null, TumblingWindowFrequency frequency = default, int interval = default, DateTimeOffset startOn = default, DateTimeOffset? endOn = null, BinaryData delay = null, int maxConcurrency = default, RetryPolicy retryPolicy = null, IEnumerable<DependencyReference> dependsOn = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            dependsOn ??= new List<DependencyReference>();

            return new TumblingWindowTrigger("TumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, frequency, interval, startOn, endOn, delay, maxConcurrency, retryPolicy, dependsOn?.ToList());
        }

        /// <summary> Initializes a new instance of RetryPolicy. </summary>
        /// <param name="count"> Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="intervalInSeconds"> Interval between retries in seconds. Default is 30. </param>
        /// <returns> A new <see cref="Models.RetryPolicy"/> instance for mocking. </returns>
        public static RetryPolicy RetryPolicy(BinaryData count = null, int? intervalInSeconds = null)
        {
            return new RetryPolicy(count, intervalInSeconds);
        }

        /// <summary> Initializes a new instance of DependencyReference. </summary>
        /// <param name="dependencyReferenceType"> The type of dependency reference. </param>
        /// <returns> A new <see cref="Models.DependencyReference"/> instance for mocking. </returns>
        public static DependencyReference DependencyReference(string dependencyReferenceType = null)
        {
            return new UnknownDependencyReference(dependencyReferenceType);
        }

        /// <summary> Initializes a new instance of TriggerDependencyReference. </summary>
        /// <param name="referenceTrigger"> Referenced trigger. </param>
        /// <returns> A new <see cref="Models.TriggerDependencyReference"/> instance for mocking. </returns>
        public static TriggerDependencyReference TriggerDependencyReference(FactoryTriggerReference referenceTrigger = null)
        {
            return new TriggerDependencyReference("TriggerDependencyReference", referenceTrigger);
        }

        /// <summary> Initializes a new instance of TumblingWindowTriggerDependencyReference. </summary>
        /// <param name="referenceTrigger"> Referenced trigger. </param>
        /// <param name="offset"> Timespan applied to the start time of a tumbling window when evaluating dependency. </param>
        /// <param name="size"> The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. </param>
        /// <returns> A new <see cref="Models.TumblingWindowTriggerDependencyReference"/> instance for mocking. </returns>
        public static TumblingWindowTriggerDependencyReference TumblingWindowTriggerDependencyReference(FactoryTriggerReference referenceTrigger = null, string offset = null, string size = null)
        {
            return new TumblingWindowTriggerDependencyReference("TumblingWindowTriggerDependencyReference", referenceTrigger, offset, size);
        }

        /// <summary> Initializes a new instance of SelfDependencyTumblingWindowTriggerReference. </summary>
        /// <param name="offset"> Timespan applied to the start time of a tumbling window when evaluating dependency. </param>
        /// <param name="size"> The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. </param>
        /// <returns> A new <see cref="Models.SelfDependencyTumblingWindowTriggerReference"/> instance for mocking. </returns>
        public static SelfDependencyTumblingWindowTriggerReference SelfDependencyTumblingWindowTriggerReference(string offset = null, string size = null)
        {
            return new SelfDependencyTumblingWindowTriggerReference("SelfDependencyTumblingWindowTriggerReference", offset, size);
        }

        /// <summary> Initializes a new instance of RerunTumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parentTrigger"> The parent trigger reference. </param>
        /// <param name="requestedStartOn"> The start time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="requestedEndOn"> The end time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="rerunConcurrency"> The max number of parallel time windows (ready for execution) for which a rerun is triggered. </param>
        /// <returns> A new <see cref="Models.RerunTumblingWindowTrigger"/> instance for mocking. </returns>
        public static RerunTumblingWindowTrigger RerunTumblingWindowTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, BinaryData parentTrigger = null, DateTimeOffset requestedStartOn = default, DateTimeOffset requestedEndOn = default, int rerunConcurrency = default)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new RerunTumblingWindowTrigger("RerunTumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, parentTrigger, requestedStartOn, requestedEndOn, rerunConcurrency);
        }

        /// <summary> Initializes a new instance of ChainingTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when all upstream pipelines complete successfully. </param>
        /// <param name="dependsOn"> Upstream Pipelines. </param>
        /// <param name="runDimension"> Run Dimension property that needs to be emitted by upstream pipelines. </param>
        /// <returns> A new <see cref="Models.ChainingTrigger"/> instance for mocking. </returns>
        public static ChainingTrigger ChainingTrigger(string description = null, FactoryTriggerRuntimeState? runtimeState = null, IEnumerable<BinaryData> annotations = null, IDictionary<string, BinaryData> additionalProperties = null, TriggerPipelineReference pipeline = null, IEnumerable<FactoryPipelineReference> dependsOn = null, string runDimension = null)
        {
            annotations ??= new List<BinaryData>();
            additionalProperties ??= new Dictionary<string, BinaryData>();
            dependsOn ??= new List<FactoryPipelineReference>();

            return new ChainingTrigger("ChainingTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, dependsOn?.ToList(), runDimension);
        }
    }
}
