// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Factory's git repo information.
    /// Serialized Name: FactoryRepoConfiguration
    /// Please note <see cref="FactoryRepoConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="FactoryGitHubConfiguration"/> and <see cref="FactoryVstsConfiguration"/>.
    /// </summary>
    public abstract partial class FactoryRepoConfiguration
    {
        /// <summary> Initializes a new instance of FactoryRepoConfiguration. </summary>
        /// <param name="accountName">
        /// Account name.
        /// Serialized Name: FactoryRepoConfiguration.accountName
        /// </param>
        /// <param name="repositoryName">
        /// Repository name.
        /// Serialized Name: FactoryRepoConfiguration.repositoryName
        /// </param>
        /// <param name="collaborationBranch">
        /// Collaboration branch.
        /// Serialized Name: FactoryRepoConfiguration.collaborationBranch
        /// </param>
        /// <param name="rootFolder">
        /// Root folder.
        /// Serialized Name: FactoryRepoConfiguration.rootFolder
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/>, <paramref name="repositoryName"/>, <paramref name="collaborationBranch"/> or <paramref name="rootFolder"/> is null. </exception>
        protected FactoryRepoConfiguration(string accountName, string repositoryName, string collaborationBranch, string rootFolder)
        {
            Argument.AssertNotNull(accountName, nameof(accountName));
            Argument.AssertNotNull(repositoryName, nameof(repositoryName));
            Argument.AssertNotNull(collaborationBranch, nameof(collaborationBranch));
            Argument.AssertNotNull(rootFolder, nameof(rootFolder));

            AccountName = accountName;
            RepositoryName = repositoryName;
            CollaborationBranch = collaborationBranch;
            RootFolder = rootFolder;
        }

        /// <summary> Initializes a new instance of FactoryRepoConfiguration. </summary>
        /// <param name="factoryRepoConfigurationType">
        /// Type of repo configuration.
        /// Serialized Name: FactoryRepoConfiguration.type
        /// </param>
        /// <param name="accountName">
        /// Account name.
        /// Serialized Name: FactoryRepoConfiguration.accountName
        /// </param>
        /// <param name="repositoryName">
        /// Repository name.
        /// Serialized Name: FactoryRepoConfiguration.repositoryName
        /// </param>
        /// <param name="collaborationBranch">
        /// Collaboration branch.
        /// Serialized Name: FactoryRepoConfiguration.collaborationBranch
        /// </param>
        /// <param name="rootFolder">
        /// Root folder.
        /// Serialized Name: FactoryRepoConfiguration.rootFolder
        /// </param>
        /// <param name="lastCommitId">
        /// Last commit id.
        /// Serialized Name: FactoryRepoConfiguration.lastCommitId
        /// </param>
        /// <param name="disablePublish">
        /// Disable manual publish operation in ADF studio to favor automated publish.
        /// Serialized Name: FactoryRepoConfiguration.disablePublish
        /// </param>
        internal FactoryRepoConfiguration(string factoryRepoConfigurationType, string accountName, string repositoryName, string collaborationBranch, string rootFolder, string lastCommitId, bool? disablePublish)
        {
            FactoryRepoConfigurationType = factoryRepoConfigurationType;
            AccountName = accountName;
            RepositoryName = repositoryName;
            CollaborationBranch = collaborationBranch;
            RootFolder = rootFolder;
            LastCommitId = lastCommitId;
            DisablePublish = disablePublish;
        }

        /// <summary>
        /// Type of repo configuration.
        /// Serialized Name: FactoryRepoConfiguration.type
        /// </summary>
        internal string FactoryRepoConfigurationType { get; set; }
        /// <summary>
        /// Account name.
        /// Serialized Name: FactoryRepoConfiguration.accountName
        /// </summary>
        public string AccountName { get; set; }
        /// <summary>
        /// Repository name.
        /// Serialized Name: FactoryRepoConfiguration.repositoryName
        /// </summary>
        public string RepositoryName { get; set; }
        /// <summary>
        /// Collaboration branch.
        /// Serialized Name: FactoryRepoConfiguration.collaborationBranch
        /// </summary>
        public string CollaborationBranch { get; set; }
        /// <summary>
        /// Root folder.
        /// Serialized Name: FactoryRepoConfiguration.rootFolder
        /// </summary>
        public string RootFolder { get; set; }
        /// <summary>
        /// Last commit id.
        /// Serialized Name: FactoryRepoConfiguration.lastCommitId
        /// </summary>
        public string LastCommitId { get; set; }
        /// <summary>
        /// Disable manual publish operation in ADF studio to favor automated publish.
        /// Serialized Name: FactoryRepoConfiguration.disablePublish
        /// </summary>
        public bool? DisablePublish { get; set; }
    }
}
