// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class SqlUpsertSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(UseTempDB))
            {
                writer.WritePropertyName("useTempDB");
                writer.WriteStringValue(UseTempDB.AbsoluteUri);
            }
            if (Optional.IsDefined(InterimSchemaName))
            {
                writer.WritePropertyName("interimSchemaName");
                writer.WriteStringValue(InterimSchemaName.AbsoluteUri);
            }
            if (Optional.IsDefined(Keys))
            {
                writer.WritePropertyName("keys");
                writer.WriteStringValue(Keys.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static SqlUpsertSettings DeserializeSqlUpsertSettings(JsonElement element)
        {
            Optional<Uri> useTempDB = default;
            Optional<Uri> interimSchemaName = default;
            Optional<Uri> keys = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("useTempDB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        useTempDB = null;
                        continue;
                    }
                    useTempDB = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("interimSchemaName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        interimSchemaName = null;
                        continue;
                    }
                    interimSchemaName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keys"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keys = null;
                        continue;
                    }
                    keys = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new SqlUpsertSettings(useTempDB.Value, interimSchemaName.Value, keys.Value);
        }
    }
}
