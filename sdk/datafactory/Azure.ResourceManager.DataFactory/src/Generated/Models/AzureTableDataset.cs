// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// The Azure Table storage dataset.
    /// Serialized Name: AzureTableDataset
    /// </summary>
    public partial class AzureTableDataset : FactoryDatasetDefinition
    {
        /// <summary> Initializes a new instance of AzureTableDataset. </summary>
        /// <param name="linkedServiceName">
        /// Linked service reference.
        /// Serialized Name: Dataset.linkedServiceName
        /// </param>
        /// <param name="tableName">
        /// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureTableDataset.typeProperties.tableName
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="linkedServiceName"/> or <paramref name="tableName"/> is null. </exception>
        public AzureTableDataset(LinkedServiceReference linkedServiceName, BinaryData tableName) : base(linkedServiceName)
        {
            if (linkedServiceName == null)
            {
                throw new ArgumentNullException(nameof(linkedServiceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            TableName = tableName;
            DatasetType = "AzureTable";
        }

        /// <summary> Initializes a new instance of AzureTableDataset. </summary>
        /// <param name="datasetType">
        /// Type of dataset.
        /// Serialized Name: Dataset.type
        /// </param>
        /// <param name="description">
        /// Dataset description.
        /// Serialized Name: Dataset.description
        /// </param>
        /// <param name="structure">
        /// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
        /// Serialized Name: Dataset.structure
        /// </param>
        /// <param name="schema">
        /// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
        /// Serialized Name: Dataset.schema
        /// </param>
        /// <param name="linkedServiceName">
        /// Linked service reference.
        /// Serialized Name: Dataset.linkedServiceName
        /// </param>
        /// <param name="parameters">
        /// Parameters for dataset.
        /// Serialized Name: Dataset.parameters
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the Dataset.
        /// Serialized Name: Dataset.annotations
        /// </param>
        /// <param name="folder">
        /// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
        /// Serialized Name: Dataset.folder
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName">
        /// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureTableDataset.typeProperties.tableName
        /// </param>
        internal AzureTableDataset(string datasetType, string description, BinaryData structure, BinaryData schema, LinkedServiceReference linkedServiceName, IDictionary<string, ParameterSpecification> parameters, IList<BinaryData> annotations, DatasetFolder folder, IDictionary<string, BinaryData> additionalProperties, BinaryData tableName) : base(datasetType, description, structure, schema, linkedServiceName, parameters, annotations, folder, additionalProperties)
        {
            TableName = tableName;
            DatasetType = datasetType ?? "AzureTable";
        }

        /// <summary>
        /// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureTableDataset.typeProperties.tableName
        /// </summary>
        public BinaryData TableName { get; set; }
    }
}
