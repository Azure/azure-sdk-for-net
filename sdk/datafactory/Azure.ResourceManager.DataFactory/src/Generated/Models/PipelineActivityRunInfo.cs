// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Information about an activity run in a pipeline.
    /// Serialized Name: ActivityRun
    /// </summary>
    public partial class PipelineActivityRunInfo
    {
        /// <summary> Initializes a new instance of PipelineActivityRunInfo. </summary>
        internal PipelineActivityRunInfo()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of PipelineActivityRunInfo. </summary>
        /// <param name="pipelineName">
        /// The name of the pipeline.
        /// Serialized Name: ActivityRun.pipelineName
        /// </param>
        /// <param name="pipelineRunId">
        /// The id of the pipeline run.
        /// Serialized Name: ActivityRun.pipelineRunId
        /// </param>
        /// <param name="activityName">
        /// The name of the activity.
        /// Serialized Name: ActivityRun.activityName
        /// </param>
        /// <param name="activityType">
        /// The type of the activity.
        /// Serialized Name: ActivityRun.activityType
        /// </param>
        /// <param name="activityRunId">
        /// The id of the activity run.
        /// Serialized Name: ActivityRun.activityRunId
        /// </param>
        /// <param name="linkedServiceName">
        /// The name of the compute linked service.
        /// Serialized Name: ActivityRun.linkedServiceName
        /// </param>
        /// <param name="status">
        /// The status of the activity run.
        /// Serialized Name: ActivityRun.status
        /// </param>
        /// <param name="activityRunStart">
        /// The start time of the activity run in &apos;ISO 8601&apos; format.
        /// Serialized Name: ActivityRun.activityRunStart
        /// </param>
        /// <param name="activityRunEnd">
        /// The end time of the activity run in &apos;ISO 8601&apos; format.
        /// Serialized Name: ActivityRun.activityRunEnd
        /// </param>
        /// <param name="durationInMs">
        /// The duration of the activity run.
        /// Serialized Name: ActivityRun.durationInMs
        /// </param>
        /// <param name="input">
        /// The input for the activity.
        /// Serialized Name: ActivityRun.input
        /// </param>
        /// <param name="output">
        /// The output for the activity.
        /// Serialized Name: ActivityRun.output
        /// </param>
        /// <param name="error">
        /// The error if any from the activity run.
        /// Serialized Name: ActivityRun.error
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal PipelineActivityRunInfo(string pipelineName, string pipelineRunId, string activityName, string activityType, string activityRunId, string linkedServiceName, string status, DateTimeOffset? activityRunStart, DateTimeOffset? activityRunEnd, int? durationInMs, BinaryData input, BinaryData output, BinaryData error, IReadOnlyDictionary<string, BinaryData> additionalProperties)
        {
            PipelineName = pipelineName;
            PipelineRunId = pipelineRunId;
            ActivityName = activityName;
            ActivityType = activityType;
            ActivityRunId = activityRunId;
            LinkedServiceName = linkedServiceName;
            Status = status;
            ActivityRunStart = activityRunStart;
            ActivityRunEnd = activityRunEnd;
            DurationInMs = durationInMs;
            Input = input;
            Output = output;
            Error = error;
            AdditionalProperties = additionalProperties;
        }

        /// <summary>
        /// The name of the pipeline.
        /// Serialized Name: ActivityRun.pipelineName
        /// </summary>
        public string PipelineName { get; }
        /// <summary>
        /// The id of the pipeline run.
        /// Serialized Name: ActivityRun.pipelineRunId
        /// </summary>
        public string PipelineRunId { get; }
        /// <summary>
        /// The name of the activity.
        /// Serialized Name: ActivityRun.activityName
        /// </summary>
        public string ActivityName { get; }
        /// <summary>
        /// The type of the activity.
        /// Serialized Name: ActivityRun.activityType
        /// </summary>
        public string ActivityType { get; }
        /// <summary>
        /// The id of the activity run.
        /// Serialized Name: ActivityRun.activityRunId
        /// </summary>
        public string ActivityRunId { get; }
        /// <summary>
        /// The name of the compute linked service.
        /// Serialized Name: ActivityRun.linkedServiceName
        /// </summary>
        public string LinkedServiceName { get; }
        /// <summary>
        /// The status of the activity run.
        /// Serialized Name: ActivityRun.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// The start time of the activity run in &apos;ISO 8601&apos; format.
        /// Serialized Name: ActivityRun.activityRunStart
        /// </summary>
        public DateTimeOffset? ActivityRunStart { get; }
        /// <summary>
        /// The end time of the activity run in &apos;ISO 8601&apos; format.
        /// Serialized Name: ActivityRun.activityRunEnd
        /// </summary>
        public DateTimeOffset? ActivityRunEnd { get; }
        /// <summary>
        /// The duration of the activity run.
        /// Serialized Name: ActivityRun.durationInMs
        /// </summary>
        public int? DurationInMs { get; }
        /// <summary>
        /// The input for the activity.
        /// Serialized Name: ActivityRun.input
        /// </summary>
        public BinaryData Input { get; }
        /// <summary>
        /// The output for the activity.
        /// Serialized Name: ActivityRun.output
        /// </summary>
        public BinaryData Output { get; }
        /// <summary>
        /// The error if any from the activity run.
        /// Serialized Name: ActivityRun.error
        /// </summary>
        public BinaryData Error { get; }
        /// <summary> Additional Properties. </summary>
        public IReadOnlyDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
