// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DataFactory.Models
{
    internal partial class UnknownFormatReadSettings : IUtf8JsonSerializable, IModelJsonSerializable<FormatReadSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FormatReadSettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FormatReadSettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FormatReadSettings>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(FormatReadSettingsType);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static FormatReadSettings DeserializeUnknownFormatReadSettings(JsonElement element, ModelSerializerOptions options = default) => DeserializeFormatReadSettings(element, options);

        FormatReadSettings IModelJsonSerializable<FormatReadSettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FormatReadSettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeUnknownFormatReadSettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FormatReadSettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FormatReadSettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FormatReadSettings IModelSerializable<FormatReadSettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FormatReadSettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFormatReadSettings(doc.RootElement, options);
        }
    }
}
