// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class CopySink : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySinkType);
            if (Optional.IsDefined(WriteBatchSize))
            {
                writer.WritePropertyName("writeBatchSize");
                writer.WriteStringValue(WriteBatchSize.AbsoluteUri);
            }
            if (Optional.IsDefined(WriteBatchTimeout))
            {
                writer.WritePropertyName("writeBatchTimeout");
                writer.WriteStringValue(WriteBatchTimeout.AbsoluteUri);
            }
            if (Optional.IsDefined(SinkRetryCount))
            {
                writer.WritePropertyName("sinkRetryCount");
                writer.WriteStringValue(SinkRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SinkRetryWait))
            {
                writer.WritePropertyName("sinkRetryWait");
                writer.WriteStringValue(SinkRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static CopySink DeserializeCopySink(JsonElement element)
        {
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AvroSink": return AvroSink.DeserializeAvroSink(element);
                    case "AzureBlobFSSink": return AzureBlobFSSink.DeserializeAzureBlobFSSink(element);
                    case "AzureDataExplorerSink": return AzureDataExplorerSink.DeserializeAzureDataExplorerSink(element);
                    case "AzureDataLakeStoreSink": return AzureDataLakeStoreSink.DeserializeAzureDataLakeStoreSink(element);
                    case "AzureDatabricksDeltaLakeSink": return AzureDatabricksDeltaLakeSink.DeserializeAzureDatabricksDeltaLakeSink(element);
                    case "AzureMySqlSink": return AzureMySqlSink.DeserializeAzureMySqlSink(element);
                    case "AzurePostgreSqlSink": return AzurePostgreSqlSink.DeserializeAzurePostgreSqlSink(element);
                    case "AzureQueueSink": return AzureQueueSink.DeserializeAzureQueueSink(element);
                    case "AzureSearchIndexSink": return AzureSearchIndexSink.DeserializeAzureSearchIndexSink(element);
                    case "AzureSqlSink": return AzureSqlSink.DeserializeAzureSqlSink(element);
                    case "AzureTableSink": return AzureTableSink.DeserializeAzureTableSink(element);
                    case "BinarySink": return BinarySink.DeserializeBinarySink(element);
                    case "BlobSink": return BlobSink.DeserializeBlobSink(element);
                    case "CommonDataServiceForAppsSink": return CommonDataServiceForAppsSink.DeserializeCommonDataServiceForAppsSink(element);
                    case "CosmosDbMongoDbApiSink": return CosmosDbMongoDbApiSink.DeserializeCosmosDbMongoDbApiSink(element);
                    case "CosmosDbSqlApiSink": return CosmosDbSqlApiSink.DeserializeCosmosDbSqlApiSink(element);
                    case "DelimitedTextSink": return DelimitedTextSink.DeserializeDelimitedTextSink(element);
                    case "DocumentDbCollectionSink": return DocumentDbCollectionSink.DeserializeDocumentDbCollectionSink(element);
                    case "DynamicsCrmSink": return DynamicsCrmSink.DeserializeDynamicsCrmSink(element);
                    case "DynamicsSink": return DynamicsSink.DeserializeDynamicsSink(element);
                    case "FileSystemSink": return FileSystemSink.DeserializeFileSystemSink(element);
                    case "InformixSink": return InformixSink.DeserializeInformixSink(element);
                    case "JsonSink": return JsonSink.DeserializeJsonSink(element);
                    case "MicrosoftAccessSink": return MicrosoftAccessSink.DeserializeMicrosoftAccessSink(element);
                    case "MongoDbAtlasSink": return MongoDbAtlasSink.DeserializeMongoDbAtlasSink(element);
                    case "MongoDbV2Sink": return MongoDbV2Sink.DeserializeMongoDbV2Sink(element);
                    case "OdbcSink": return OdbcSink.DeserializeOdbcSink(element);
                    case "OracleSink": return OracleSink.DeserializeOracleSink(element);
                    case "OrcSink": return OrcSink.DeserializeOrcSink(element);
                    case "ParquetSink": return ParquetSink.DeserializeParquetSink(element);
                    case "RestSink": return RestSink.DeserializeRestSink(element);
                    case "SalesforceServiceCloudSink": return SalesforceServiceCloudSink.DeserializeSalesforceServiceCloudSink(element);
                    case "SalesforceSink": return SalesforceSink.DeserializeSalesforceSink(element);
                    case "SapCloudForCustomerSink": return SapCloudForCustomerSink.DeserializeSapCloudForCustomerSink(element);
                    case "SnowflakeSink": return SnowflakeSink.DeserializeSnowflakeSink(element);
                    case "SqlDWSink": return SqlDWSink.DeserializeSqlDWSink(element);
                    case "SqlMISink": return SqlMISink.DeserializeSqlMISink(element);
                    case "SqlServerSink": return SqlServerSink.DeserializeSqlServerSink(element);
                    case "SqlSink": return SqlSink.DeserializeSqlSink(element);
                }
            }
            string type = default;
            Optional<Uri> writeBatchSize = default;
            Optional<Uri> writeBatchTimeout = default;
            Optional<Uri> sinkRetryCount = default;
            Optional<Uri> sinkRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("writeBatchSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        writeBatchSize = null;
                        continue;
                    }
                    writeBatchSize = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("writeBatchTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        writeBatchTimeout = null;
                        continue;
                    }
                    writeBatchTimeout = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sinkRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sinkRetryCount = null;
                        continue;
                    }
                    sinkRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sinkRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sinkRetryWait = null;
                        continue;
                    }
                    sinkRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new CopySink(type, writeBatchSize.Value, writeBatchTimeout.Value, sinkRetryCount.Value, sinkRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties);
        }
    }
}
