// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Execute Synapse notebook activity.
    /// Serialized Name: SynapseNotebookActivity
    /// </summary>
    public partial class SynapseNotebookActivity : ExecutionActivity
    {
        /// <summary> Initializes a new instance of SynapseNotebookActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="notebook">
        /// Synapse notebook reference.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.notebook
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="notebook"/> is null. </exception>
        public SynapseNotebookActivity(string name, SynapseNotebookReference notebook) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(notebook, nameof(notebook));

            Notebook = notebook;
            Parameters = new ChangeTrackingDictionary<string, NotebookParameter>();
            SparkConfig = new ChangeTrackingDictionary<string, BinaryData>();
            ActivityType = "SynapseNotebook";
        }

        /// <summary> Initializes a new instance of SynapseNotebookActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="state">
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// Serialized Name: Activity.state
        /// </param>
        /// <param name="onInactiveMarkAs">
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// Serialized Name: Activity.onInactiveMarkAs
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName">
        /// Linked service reference.
        /// Serialized Name: ExecutionActivity.linkedServiceName
        /// </param>
        /// <param name="policy">
        /// Activity policy.
        /// Serialized Name: ExecutionActivity.policy
        /// </param>
        /// <param name="notebook">
        /// Synapse notebook reference.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.notebook
        /// </param>
        /// <param name="sparkPool">
        /// The name of the big data pool which will be used to execute the notebook.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.sparkPool
        /// </param>
        /// <param name="parameters">
        /// Notebook parameters.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.parameters
        /// </param>
        /// <param name="executorSize">
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.executorSize
        /// </param>
        /// <param name="conf">
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.conf
        /// </param>
        /// <param name="driverSize">
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.driverSize
        /// </param>
        /// <param name="numExecutors">
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.numExecutors
        /// </param>
        /// <param name="configurationType">
        /// The type of the spark config.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.configurationType
        /// </param>
        /// <param name="targetSparkConfiguration">
        /// The spark configuration of the spark job.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.targetSparkConfiguration
        /// </param>
        /// <param name="sparkConfig">
        /// Spark configuration property.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.sparkConfig
        /// </param>
        internal SynapseNotebookActivity(string name, string activityType, string description, ActivityState? state, ActivityOnInactiveMarkA? onInactiveMarkAs, IList<ActivityDependency> dependsOn, IList<ActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, FactoryLinkedServiceReference linkedServiceName, ActivityPolicy policy, SynapseNotebookReference notebook, BigDataPoolParametrizationReference sparkPool, IDictionary<string, NotebookParameter> parameters, DataFactoryElement<string> executorSize, BinaryData conf, DataFactoryElement<string> driverSize, DataFactoryElement<int> numExecutors, ConfigurationType? configurationType, SparkConfigurationParametrizationReference targetSparkConfiguration, IDictionary<string, BinaryData> sparkConfig) : base(name, activityType, description, state, onInactiveMarkAs, dependsOn, userProperties, additionalProperties, linkedServiceName, policy)
        {
            Notebook = notebook;
            SparkPool = sparkPool;
            Parameters = parameters;
            ExecutorSize = executorSize;
            Conf = conf;
            DriverSize = driverSize;
            NumExecutors = numExecutors;
            ConfigurationType = configurationType;
            TargetSparkConfiguration = targetSparkConfiguration;
            SparkConfig = sparkConfig;
            ActivityType = activityType ?? "SynapseNotebook";
        }

        /// <summary>
        /// Synapse notebook reference.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.notebook
        /// </summary>
        public SynapseNotebookReference Notebook { get; set; }
        /// <summary>
        /// The name of the big data pool which will be used to execute the notebook.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.sparkPool
        /// </summary>
        public BigDataPoolParametrizationReference SparkPool { get; set; }
        /// <summary>
        /// Notebook parameters.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.parameters
        /// </summary>
        public IDictionary<string, NotebookParameter> Parameters { get; }
        /// <summary>
        /// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.executorSize
        /// </summary>
        public DataFactoryElement<string> ExecutorSize { get; set; }
        /// <summary>
        /// Spark configuration properties, which will override the 'conf' of the notebook you provide.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.conf
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Conf { get; set; }
        /// <summary>
        /// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.driverSize
        /// </summary>
        public DataFactoryElement<string> DriverSize { get; set; }
        /// <summary>
        /// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
        /// Serialized Name: SynapseNotebookActivity.typeProperties.numExecutors
        /// </summary>
        public DataFactoryElement<int> NumExecutors { get; set; }
        /// <summary>
        /// The type of the spark config.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.configurationType
        /// </summary>
        public ConfigurationType? ConfigurationType { get; set; }
        /// <summary>
        /// The spark configuration of the spark job.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.targetSparkConfiguration
        /// </summary>
        public SparkConfigurationParametrizationReference TargetSparkConfiguration { get; set; }
        /// <summary>
        /// Spark configuration property.
        /// Serialized Name: SynapseNotebookActivity.typeProperties.sparkConfig
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> SparkConfig { get; }
    }
}
