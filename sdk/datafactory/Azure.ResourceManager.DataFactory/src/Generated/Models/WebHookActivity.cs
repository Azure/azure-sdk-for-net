// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// WebHook activity.
    /// Serialized Name: WebHookActivity
    /// </summary>
    public partial class WebHookActivity : ControlActivity
    {
        /// <summary> Initializes a new instance of WebHookActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="method">
        /// Rest API method for target endpoint.
        /// Serialized Name: WebHookActivity.typeProperties.method
        /// </param>
        /// <param name="uri">
        /// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.url
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="uri"/> is null. </exception>
        public WebHookActivity(string name, WebHookActivityMethod method, DataFactoryElement<string> uri) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(uri, nameof(uri));

            Method = method;
            Uri = uri;
            ActivityType = "WebHook";
        }

        /// <summary> Initializes a new instance of WebHookActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="state">
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// Serialized Name: Activity.state
        /// </param>
        /// <param name="onInactiveMarkAs">
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// Serialized Name: Activity.onInactiveMarkAs
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="method">
        /// Rest API method for target endpoint.
        /// Serialized Name: WebHookActivity.typeProperties.method
        /// </param>
        /// <param name="uri">
        /// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.url
        /// </param>
        /// <param name="timeout">
        /// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: WebHookActivity.typeProperties.timeout
        /// </param>
        /// <param name="headers">
        /// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.headers
        /// </param>
        /// <param name="body">
        /// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.body
        /// </param>
        /// <param name="authentication">
        /// Authentication method used for calling the endpoint.
        /// Serialized Name: WebHookActivity.typeProperties.authentication
        /// </param>
        /// <param name="reportStatusOnCallBack">
        /// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode &gt;= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: WebHookActivity.typeProperties.reportStatusOnCallBack
        /// </param>
        internal WebHookActivity(string name, string activityType, string description, ActivityState? state, ActivityOnInactiveMarkA? onInactiveMarkAs, IList<ActivityDependency> dependsOn, IList<ActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, WebHookActivityMethod method, DataFactoryElement<string> uri, string timeout, DataFactoryElement<string> headers, DataFactoryElement<string> body, WebActivityAuthentication authentication, DataFactoryElement<bool> reportStatusOnCallBack) : base(name, activityType, description, state, onInactiveMarkAs, dependsOn, userProperties, additionalProperties)
        {
            Method = method;
            Uri = uri;
            Timeout = timeout;
            Headers = headers;
            Body = body;
            Authentication = authentication;
            ReportStatusOnCallBack = reportStatusOnCallBack;
            ActivityType = activityType ?? "WebHook";
        }

        /// <summary>
        /// Rest API method for target endpoint.
        /// Serialized Name: WebHookActivity.typeProperties.method
        /// </summary>
        public WebHookActivityMethod Method { get; set; }
        /// <summary>
        /// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.url
        /// </summary>
        public DataFactoryElement<string> Uri { get; set; }
        /// <summary>
        /// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: WebHookActivity.typeProperties.timeout
        /// </summary>
        public string Timeout { get; set; }
        /// <summary>
        /// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.headers
        /// </summary>
        public DataFactoryElement<string> Headers { get; set; }
        /// <summary>
        /// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
        /// Serialized Name: WebHookActivity.typeProperties.body
        /// </summary>
        public DataFactoryElement<string> Body { get; set; }
        /// <summary>
        /// Authentication method used for calling the endpoint.
        /// Serialized Name: WebHookActivity.typeProperties.authentication
        /// </summary>
        public WebActivityAuthentication Authentication { get; set; }
        /// <summary>
        /// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode &gt;= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: WebHookActivity.typeProperties.reportStatusOnCallBack
        /// </summary>
        public DataFactoryElement<bool> ReportStatusOnCallBack { get; set; }
    }
}
