// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// The workflow trigger recurrence.
    /// Serialized Name: ScheduleTriggerRecurrence
    /// </summary>
    public partial class ScheduleTriggerRecurrence
    {
        /// <summary> Initializes a new instance of ScheduleTriggerRecurrence. </summary>
        public ScheduleTriggerRecurrence()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of ScheduleTriggerRecurrence. </summary>
        /// <param name="frequency">
        /// The frequency.
        /// Serialized Name: ScheduleTriggerRecurrence.frequency
        /// </param>
        /// <param name="interval">
        /// The interval.
        /// Serialized Name: ScheduleTriggerRecurrence.interval
        /// </param>
        /// <param name="startOn">
        /// The start time.
        /// Serialized Name: ScheduleTriggerRecurrence.startTime
        /// </param>
        /// <param name="endOn">
        /// The end time.
        /// Serialized Name: ScheduleTriggerRecurrence.endTime
        /// </param>
        /// <param name="timeZone">
        /// The time zone.
        /// Serialized Name: ScheduleTriggerRecurrence.timeZone
        /// </param>
        /// <param name="schedule">
        /// The recurrence schedule.
        /// Serialized Name: ScheduleTriggerRecurrence.schedule
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal ScheduleTriggerRecurrence(RecurrenceFrequency? frequency, int? interval, DateTimeOffset? startOn, DateTimeOffset? endOn, string timeZone, RecurrenceSchedule schedule, IDictionary<string, BinaryData> additionalProperties)
        {
            Frequency = frequency;
            Interval = interval;
            StartOn = startOn;
            EndOn = endOn;
            TimeZone = timeZone;
            Schedule = schedule;
            AdditionalProperties = additionalProperties;
        }

        /// <summary>
        /// The frequency.
        /// Serialized Name: ScheduleTriggerRecurrence.frequency
        /// </summary>
        public RecurrenceFrequency? Frequency { get; set; }
        /// <summary>
        /// The interval.
        /// Serialized Name: ScheduleTriggerRecurrence.interval
        /// </summary>
        public int? Interval { get; set; }
        /// <summary>
        /// The start time.
        /// Serialized Name: ScheduleTriggerRecurrence.startTime
        /// </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary>
        /// The end time.
        /// Serialized Name: ScheduleTriggerRecurrence.endTime
        /// </summary>
        public DateTimeOffset? EndOn { get; set; }
        /// <summary>
        /// The time zone.
        /// Serialized Name: ScheduleTriggerRecurrence.timeZone
        /// </summary>
        public string TimeZone { get; set; }
        /// <summary>
        /// The recurrence schedule.
        /// Serialized Name: ScheduleTriggerRecurrence.schedule
        /// </summary>
        public RecurrenceSchedule Schedule { get; set; }
        /// <summary> Additional Properties. </summary>
        public IDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
