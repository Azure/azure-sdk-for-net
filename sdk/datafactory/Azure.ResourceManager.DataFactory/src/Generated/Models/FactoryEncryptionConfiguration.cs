// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Definition of CMK for the factory.
    /// Serialized Name: EncryptionConfiguration
    /// </summary>
    public partial class FactoryEncryptionConfiguration
    {
        /// <summary> Initializes a new instance of FactoryEncryptionConfiguration. </summary>
        /// <param name="keyName">
        /// The name of the key in Azure Key Vault to use as Customer Managed Key.
        /// Serialized Name: EncryptionConfiguration.keyName
        /// </param>
        /// <param name="vaultBaseUri">
        /// The url of the Azure Key Vault used for CMK.
        /// Serialized Name: EncryptionConfiguration.vaultBaseUrl
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> or <paramref name="vaultBaseUri"/> is null. </exception>
        public FactoryEncryptionConfiguration(string keyName, Uri vaultBaseUri)
        {
            if (keyName == null)
            {
                throw new ArgumentNullException(nameof(keyName));
            }
            if (vaultBaseUri == null)
            {
                throw new ArgumentNullException(nameof(vaultBaseUri));
            }

            KeyName = keyName;
            VaultBaseUri = vaultBaseUri;
        }

        /// <summary> Initializes a new instance of FactoryEncryptionConfiguration. </summary>
        /// <param name="keyName">
        /// The name of the key in Azure Key Vault to use as Customer Managed Key.
        /// Serialized Name: EncryptionConfiguration.keyName
        /// </param>
        /// <param name="vaultBaseUri">
        /// The url of the Azure Key Vault used for CMK.
        /// Serialized Name: EncryptionConfiguration.vaultBaseUrl
        /// </param>
        /// <param name="keyVersion">
        /// The version of the key used for CMK. If not provided, latest version will be used.
        /// Serialized Name: EncryptionConfiguration.keyVersion
        /// </param>
        /// <param name="identity">
        /// User assigned identity to use to authenticate to customer&apos;s key vault. If not provided Managed Service Identity will be used.
        /// Serialized Name: EncryptionConfiguration.identity
        /// </param>
        internal FactoryEncryptionConfiguration(string keyName, Uri vaultBaseUri, string keyVersion, CMKIdentityDefinition identity)
        {
            KeyName = keyName;
            VaultBaseUri = vaultBaseUri;
            KeyVersion = keyVersion;
            Identity = identity;
        }

        /// <summary>
        /// The name of the key in Azure Key Vault to use as Customer Managed Key.
        /// Serialized Name: EncryptionConfiguration.keyName
        /// </summary>
        public string KeyName { get; set; }
        /// <summary>
        /// The url of the Azure Key Vault used for CMK.
        /// Serialized Name: EncryptionConfiguration.vaultBaseUrl
        /// </summary>
        public Uri VaultBaseUri { get; set; }
        /// <summary>
        /// The version of the key used for CMK. If not provided, latest version will be used.
        /// Serialized Name: EncryptionConfiguration.keyVersion
        /// </summary>
        public string KeyVersion { get; set; }
        /// <summary>
        /// User assigned identity to use to authenticate to customer&apos;s key vault. If not provided Managed Service Identity will be used.
        /// Serialized Name: EncryptionConfiguration.identity
        /// </summary>
        internal CMKIdentityDefinition Identity { get; set; }
        /// <summary>
        /// The resource id of the user assigned identity to authenticate to customer&apos;s key vault.
        /// Serialized Name: CMKIdentityDefinition.userAssignedIdentity
        /// </summary>
        public string UserAssignedIdentity
        {
            get => Identity is null ? default : Identity.UserAssignedIdentity;
            set
            {
                if (Identity is null)
                    Identity = new CMKIdentityDefinition();
                Identity.UserAssignedIdentity = value;
            }
        }
    }
}
