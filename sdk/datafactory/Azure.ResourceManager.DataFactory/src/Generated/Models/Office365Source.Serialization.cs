// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class Office365Source : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AllowedGroups))
            {
                writer.WritePropertyName("allowedGroups");
                writer.WriteStringValue(AllowedGroups.AbsoluteUri);
            }
            if (Optional.IsDefined(UserScopeFilterUri))
            {
                writer.WritePropertyName("userScopeFilterUri");
                writer.WriteStringValue(UserScopeFilterUri.AbsoluteUri);
            }
            if (Optional.IsDefined(DateFilterColumn))
            {
                writer.WritePropertyName("dateFilterColumn");
                writer.WriteStringValue(DateFilterColumn.AbsoluteUri);
            }
            if (Optional.IsDefined(StartTime))
            {
                writer.WritePropertyName("startTime");
                writer.WriteStringValue(StartTime.AbsoluteUri);
            }
            if (Optional.IsDefined(EndTime))
            {
                writer.WritePropertyName("endTime");
                writer.WriteStringValue(EndTime.AbsoluteUri);
            }
            if (Optional.IsDefined(OutputColumns))
            {
                writer.WritePropertyName("outputColumns");
                writer.WriteStringValue(OutputColumns.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySourceType);
            if (Optional.IsDefined(SourceRetryCount))
            {
                writer.WritePropertyName("sourceRetryCount");
                writer.WriteStringValue(SourceRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SourceRetryWait))
            {
                writer.WritePropertyName("sourceRetryWait");
                writer.WriteStringValue(SourceRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static Office365Source DeserializeOffice365Source(JsonElement element)
        {
            Optional<Uri> allowedGroups = default;
            Optional<Uri> userScopeFilterUri = default;
            Optional<Uri> dateFilterColumn = default;
            Optional<Uri> startTime = default;
            Optional<Uri> endTime = default;
            Optional<Uri> outputColumns = default;
            string type = default;
            Optional<Uri> sourceRetryCount = default;
            Optional<Uri> sourceRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allowedGroups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        allowedGroups = null;
                        continue;
                    }
                    allowedGroups = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("userScopeFilterUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        userScopeFilterUri = null;
                        continue;
                    }
                    userScopeFilterUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dateFilterColumn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dateFilterColumn = null;
                        continue;
                    }
                    dateFilterColumn = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startTime = null;
                        continue;
                    }
                    startTime = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("outputColumns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        outputColumns = null;
                        continue;
                    }
                    outputColumns = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryCount = null;
                        continue;
                    }
                    sourceRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryWait = null;
                        continue;
                    }
                    sourceRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new Office365Source(type, sourceRetryCount.Value, sourceRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, allowedGroups.Value, userScopeFilterUri.Value, dateFilterColumn.Value, startTime.Value, endTime.Value, outputColumns.Value);
        }
    }
}
