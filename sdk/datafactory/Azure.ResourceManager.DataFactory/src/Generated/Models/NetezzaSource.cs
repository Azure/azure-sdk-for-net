// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// A copy activity Netezza source.
    /// Serialized Name: NetezzaSource
    /// </summary>
    public partial class NetezzaSource : TabularSource
    {
        /// <summary> Initializes a new instance of NetezzaSource. </summary>
        public NetezzaSource()
        {
            CopySourceType = "NetezzaSource";
        }

        /// <summary> Initializes a new instance of NetezzaSource. </summary>
        /// <param name="copySourceType">
        /// Copy source type.
        /// Serialized Name: CopySource.type
        /// </param>
        /// <param name="sourceRetryCount">
        /// Source retry count. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySource.sourceRetryCount
        /// </param>
        /// <param name="sourceRetryWait">
        /// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySource.sourceRetryWait
        /// </param>
        /// <param name="maxConcurrentConnections">
        /// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySource.maxConcurrentConnections
        /// </param>
        /// <param name="disableMetricsCollection">
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: CopySource.disableMetricsCollection
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout">
        /// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: TabularSource.queryTimeout
        /// </param>
        /// <param name="additionalColumns">
        /// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
        /// Serialized Name: TabularSource.additionalColumns
        /// </param>
        /// <param name="query">
        /// A query to retrieve data from source. Type: string (or Expression with resultType string).
        /// Serialized Name: NetezzaSource.query
        /// </param>
        /// <param name="partitionOption">
        /// The partition mechanism that will be used for Netezza read in parallel. Possible values include: &quot;None&quot;, &quot;DataSlice&quot;, &quot;DynamicRange&quot;.
        /// Serialized Name: NetezzaSource.partitionOption
        /// </param>
        /// <param name="partitionSettings">
        /// The settings that will be leveraged for Netezza source partitioning.
        /// Serialized Name: NetezzaSource.partitionSettings
        /// </param>
        internal NetezzaSource(string copySourceType, BinaryData sourceRetryCount, BinaryData sourceRetryWait, BinaryData maxConcurrentConnections, BinaryData disableMetricsCollection, IDictionary<string, BinaryData> additionalProperties, BinaryData queryTimeout, BinaryData additionalColumns, BinaryData query, BinaryData partitionOption, NetezzaPartitionSettings partitionSettings) : base(copySourceType, sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties, queryTimeout, additionalColumns)
        {
            Query = query;
            PartitionOption = partitionOption;
            PartitionSettings = partitionSettings;
            CopySourceType = copySourceType ?? "NetezzaSource";
        }

        /// <summary>
        /// A query to retrieve data from source. Type: string (or Expression with resultType string).
        /// Serialized Name: NetezzaSource.query
        /// </summary>
        public BinaryData Query { get; set; }
        /// <summary>
        /// The partition mechanism that will be used for Netezza read in parallel. Possible values include: &quot;None&quot;, &quot;DataSlice&quot;, &quot;DynamicRange&quot;.
        /// Serialized Name: NetezzaSource.partitionOption
        /// </summary>
        public BinaryData PartitionOption { get; set; }
        /// <summary>
        /// The settings that will be leveraged for Netezza source partitioning.
        /// Serialized Name: NetezzaSource.partitionSettings
        /// </summary>
        public NetezzaPartitionSettings PartitionSettings { get; set; }
    }
}
