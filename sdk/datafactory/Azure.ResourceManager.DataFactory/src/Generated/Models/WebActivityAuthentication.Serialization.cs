// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class WebActivityAuthentication : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(WebActivityAuthenticationType))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(WebActivityAuthenticationType);
            }
            if (Optional.IsDefined(Pfx))
            {
                writer.WritePropertyName("pfx");
                writer.WriteObjectValue(Pfx);
            }
            if (Optional.IsDefined(Username))
            {
                writer.WritePropertyName("username");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Username);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Username.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password");
                writer.WriteObjectValue(Password);
            }
            if (Optional.IsDefined(Resource))
            {
                writer.WritePropertyName("resource");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Resource);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Resource.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(UserTenant))
            {
                writer.WritePropertyName("userTenant");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(UserTenant);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(UserTenant.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(Credential))
            {
                writer.WritePropertyName("credential");
                writer.WriteObjectValue(Credential);
            }
            writer.WriteEndObject();
        }

        internal static WebActivityAuthentication DeserializeWebActivityAuthentication(JsonElement element)
        {
            Optional<string> type = default;
            Optional<FactorySecretBaseDefinition> pfx = default;
            Optional<BinaryData> username = default;
            Optional<FactorySecretBaseDefinition> password = default;
            Optional<BinaryData> resource = default;
            Optional<BinaryData> userTenant = default;
            Optional<FactoryCredentialReference> credential = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pfx"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pfx = FactorySecretBaseDefinition.DeserializeFactorySecretBaseDefinition(property.Value);
                    continue;
                }
                if (property.NameEquals("username"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    username = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("password"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    password = FactorySecretBaseDefinition.DeserializeFactorySecretBaseDefinition(property.Value);
                    continue;
                }
                if (property.NameEquals("resource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resource = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("userTenant"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    userTenant = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("credential"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    credential = FactoryCredentialReference.DeserializeFactoryCredentialReference(property.Value);
                    continue;
                }
            }
            return new WebActivityAuthentication(type.Value, pfx.Value, username.Value, password.Value, resource.Value, userTenant.Value, credential.Value);
        }
    }
}
