// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class MapperAttributeMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(MappingType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(MappingType.Value.ToString());
            }
            if (Optional.IsDefined(FunctionName))
            {
                writer.WritePropertyName("functionName"u8);
                writer.WriteStringValue(FunctionName);
            }
            if (Optional.IsDefined(Expression))
            {
                writer.WritePropertyName("expression"u8);
                writer.WriteStringValue(Expression);
            }
            if (Optional.IsDefined(AttributeReference))
            {
                writer.WritePropertyName("attributeReference"u8);
                writer.WriteObjectValue(AttributeReference);
            }
            if (Optional.IsCollectionDefined(AttributeReferences))
            {
                writer.WritePropertyName("attributeReferences"u8);
                writer.WriteStartArray();
                foreach (var item in AttributeReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MapperAttributeMapping DeserializeMapperAttributeMapping(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<MappingType> type = default;
            Optional<string> functionName = default;
            Optional<string> expression = default;
            Optional<MapperAttributeReference> attributeReference = default;
            Optional<IList<MapperAttributeReference>> attributeReferences = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new MappingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("functionName"u8))
                {
                    functionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("expression"u8))
                {
                    expression = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attributeReference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attributeReference = MapperAttributeReference.DeserializeMapperAttributeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("attributeReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MapperAttributeReference> array = new List<MapperAttributeReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MapperAttributeReference.DeserializeMapperAttributeReference(item));
                    }
                    attributeReferences = array;
                    continue;
                }
            }
            return new MapperAttributeMapping(name.Value, Optional.ToNullable(type), functionName.Value, expression.Value, attributeReference.Value, Optional.ToList(attributeReferences));
        }
    }
}
