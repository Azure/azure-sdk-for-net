// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Trigger that creates pipeline runs periodically, on schedule.
    /// Serialized Name: ScheduleTrigger
    /// </summary>
    public partial class ScheduleTrigger : MultiplePipelineTrigger
    {
        /// <summary> Initializes a new instance of ScheduleTrigger. </summary>
        /// <param name="recurrence">
        /// Recurrence schedule configuration.
        /// Serialized Name: ScheduleTrigger.typeProperties.recurrence
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recurrence"/> is null. </exception>
        public ScheduleTrigger(ScheduleTriggerRecurrence recurrence)
        {
            if (recurrence == null)
            {
                throw new ArgumentNullException(nameof(recurrence));
            }

            Recurrence = recurrence;
            TriggerType = "ScheduleTrigger";
        }

        /// <summary> Initializes a new instance of ScheduleTrigger. </summary>
        /// <param name="triggerType">
        /// Trigger type.
        /// Serialized Name: Trigger.type
        /// </param>
        /// <param name="description">
        /// Trigger description.
        /// Serialized Name: Trigger.description
        /// </param>
        /// <param name="runtimeState">
        /// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
        /// Serialized Name: Trigger.runtimeState
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the trigger.
        /// Serialized Name: Trigger.annotations
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines">
        /// Pipelines that need to be started.
        /// Serialized Name: MultiplePipelineTrigger.pipelines
        /// </param>
        /// <param name="recurrence">
        /// Recurrence schedule configuration.
        /// Serialized Name: ScheduleTrigger.typeProperties.recurrence
        /// </param>
        internal ScheduleTrigger(string triggerType, string description, FactoryTriggerRuntimeState? runtimeState, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, IList<TriggerPipelineReference> pipelines, ScheduleTriggerRecurrence recurrence) : base(triggerType, description, runtimeState, annotations, additionalProperties, pipelines)
        {
            Recurrence = recurrence;
            TriggerType = triggerType ?? "ScheduleTrigger";
        }

        /// <summary>
        /// Recurrence schedule configuration.
        /// Serialized Name: ScheduleTrigger.typeProperties.recurrence
        /// </summary>
        public ScheduleTriggerRecurrence Recurrence { get; set; }
    }
}
