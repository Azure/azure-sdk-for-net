// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Xml read settings.
    /// Serialized Name: XmlReadSettings
    /// </summary>
    public partial class XmlReadSettings : FormatReadSettings
    {
        /// <summary> Initializes a new instance of XmlReadSettings. </summary>
        public XmlReadSettings()
        {
            FormatReadSettingsType = "XmlReadSettings";
        }

        /// <summary> Initializes a new instance of XmlReadSettings. </summary>
        /// <param name="formatReadSettingsType">
        /// The read setting type.
        /// Serialized Name: FormatReadSettings.type
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Serialized Name: XmlReadSettings.compressionProperties
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <param name="validationMode">
        /// Indicates what validation method is used when reading the xml files. Allowed values: &apos;none&apos;, &apos;xsd&apos;, or &apos;dtd&apos;. Type: string (or Expression with resultType string).
        /// Serialized Name: XmlReadSettings.validationMode
        /// </param>
        /// <param name="detectDataType">
        /// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: XmlReadSettings.detectDataType
        /// </param>
        /// <param name="namespaces">
        /// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: XmlReadSettings.namespaces
        /// </param>
        /// <param name="namespacePrefixes">
        /// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: &quot;{&quot;http://www.example.com/xml&quot;:&quot;prefix&quot;}&quot; Type: object (or Expression with resultType object).
        /// Serialized Name: XmlReadSettings.namespacePrefixes
        /// </param>
        internal XmlReadSettings(string formatReadSettingsType, IDictionary<string, BinaryData> additionalProperties, CompressionReadSettings compressionProperties, BinaryData validationMode, BinaryData detectDataType, BinaryData namespaces, BinaryData namespacePrefixes) : base(formatReadSettingsType, additionalProperties)
        {
            CompressionProperties = compressionProperties;
            ValidationMode = validationMode;
            DetectDataType = detectDataType;
            Namespaces = namespaces;
            NamespacePrefixes = namespacePrefixes;
            FormatReadSettingsType = formatReadSettingsType ?? "XmlReadSettings";
        }

        /// <summary>
        /// Compression settings.
        /// Serialized Name: XmlReadSettings.compressionProperties
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </summary>
        public CompressionReadSettings CompressionProperties { get; set; }
        /// <summary>
        /// Indicates what validation method is used when reading the xml files. Allowed values: &apos;none&apos;, &apos;xsd&apos;, or &apos;dtd&apos;. Type: string (or Expression with resultType string).
        /// Serialized Name: XmlReadSettings.validationMode
        /// </summary>
        public BinaryData ValidationMode { get; set; }
        /// <summary>
        /// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: XmlReadSettings.detectDataType
        /// </summary>
        public BinaryData DetectDataType { get; set; }
        /// <summary>
        /// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: XmlReadSettings.namespaces
        /// </summary>
        public BinaryData Namespaces { get; set; }
        /// <summary>
        /// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: &quot;{&quot;http://www.example.com/xml&quot;:&quot;prefix&quot;}&quot; Type: object (or Expression with resultType object).
        /// Serialized Name: XmlReadSettings.namespacePrefixes
        /// </summary>
        public BinaryData NamespacePrefixes { get; set; }
    }
}
