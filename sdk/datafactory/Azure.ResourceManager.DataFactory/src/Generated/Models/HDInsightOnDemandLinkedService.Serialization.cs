// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class HDInsightOnDemandLinkedService : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(LinkedServiceType);
            if (Optional.IsDefined(ConnectVia))
            {
                writer.WritePropertyName("connectVia");
                writer.WriteObjectValue(ConnectVia);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartObject();
                foreach (var item in Parameters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Annotations))
            {
                writer.WritePropertyName("annotations");
                writer.WriteStartArray();
                foreach (var item in Annotations)
                {
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("typeProperties");
            writer.WriteStartObject();
            writer.WritePropertyName("clusterSize");
            writer.WriteStringValue(ClusterSize.AbsoluteUri);
            writer.WritePropertyName("timeToLive");
            writer.WriteStringValue(TimeToLive.AbsoluteUri);
            writer.WritePropertyName("version");
            writer.WriteStringValue(Version.AbsoluteUri);
            writer.WritePropertyName("linkedServiceName");
            writer.WriteObjectValue(LinkedServiceName);
            writer.WritePropertyName("hostSubscriptionId");
            writer.WriteStringValue(HostSubscriptionId.AbsoluteUri);
            if (Optional.IsDefined(ServicePrincipalId))
            {
                writer.WritePropertyName("servicePrincipalId");
                writer.WriteStringValue(ServicePrincipalId.AbsoluteUri);
            }
            if (Optional.IsDefined(ServicePrincipalKey))
            {
                writer.WritePropertyName("servicePrincipalKey");
                writer.WriteObjectValue(ServicePrincipalKey);
            }
            writer.WritePropertyName("tenant");
            writer.WriteStringValue(Tenant.AbsoluteUri);
            writer.WritePropertyName("clusterResourceGroup");
            writer.WriteStringValue(ClusterResourceGroup.AbsoluteUri);
            if (Optional.IsDefined(ClusterNamePrefix))
            {
                writer.WritePropertyName("clusterNamePrefix");
                writer.WriteStringValue(ClusterNamePrefix.AbsoluteUri);
            }
            if (Optional.IsDefined(ClusterUserName))
            {
                writer.WritePropertyName("clusterUserName");
                writer.WriteStringValue(ClusterUserName.AbsoluteUri);
            }
            if (Optional.IsDefined(ClusterPassword))
            {
                writer.WritePropertyName("clusterPassword");
                writer.WriteObjectValue(ClusterPassword);
            }
            if (Optional.IsDefined(ClusterSshUserName))
            {
                writer.WritePropertyName("clusterSshUserName");
                writer.WriteStringValue(ClusterSshUserName.AbsoluteUri);
            }
            if (Optional.IsDefined(ClusterSshPassword))
            {
                writer.WritePropertyName("clusterSshPassword");
                writer.WriteObjectValue(ClusterSshPassword);
            }
            if (Optional.IsCollectionDefined(AdditionalLinkedServiceNames))
            {
                writer.WritePropertyName("additionalLinkedServiceNames");
                writer.WriteStartArray();
                foreach (var item in AdditionalLinkedServiceNames)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HcatalogLinkedServiceName))
            {
                writer.WritePropertyName("hcatalogLinkedServiceName");
                writer.WriteObjectValue(HcatalogLinkedServiceName);
            }
            if (Optional.IsDefined(ClusterType))
            {
                writer.WritePropertyName("clusterType");
                writer.WriteStringValue(ClusterType.AbsoluteUri);
            }
            if (Optional.IsDefined(SparkVersion))
            {
                writer.WritePropertyName("sparkVersion");
                writer.WriteStringValue(SparkVersion.AbsoluteUri);
            }
            if (Optional.IsDefined(CoreConfiguration))
            {
                writer.WritePropertyName("coreConfiguration");
                writer.WriteStringValue(CoreConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(HBaseConfiguration))
            {
                writer.WritePropertyName("hBaseConfiguration");
                writer.WriteStringValue(HBaseConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(HdfsConfiguration))
            {
                writer.WritePropertyName("hdfsConfiguration");
                writer.WriteStringValue(HdfsConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(HiveConfiguration))
            {
                writer.WritePropertyName("hiveConfiguration");
                writer.WriteStringValue(HiveConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(MapReduceConfiguration))
            {
                writer.WritePropertyName("mapReduceConfiguration");
                writer.WriteStringValue(MapReduceConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(OozieConfiguration))
            {
                writer.WritePropertyName("oozieConfiguration");
                writer.WriteStringValue(OozieConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(StormConfiguration))
            {
                writer.WritePropertyName("stormConfiguration");
                writer.WriteStringValue(StormConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(YarnConfiguration))
            {
                writer.WritePropertyName("yarnConfiguration");
                writer.WriteStringValue(YarnConfiguration.AbsoluteUri);
            }
            if (Optional.IsDefined(EncryptedCredential))
            {
                writer.WritePropertyName("encryptedCredential");
                writer.WriteStringValue(EncryptedCredential.AbsoluteUri);
            }
            if (Optional.IsDefined(HeadNodeSize))
            {
                writer.WritePropertyName("headNodeSize");
                writer.WriteStringValue(HeadNodeSize.AbsoluteUri);
            }
            if (Optional.IsDefined(DataNodeSize))
            {
                writer.WritePropertyName("dataNodeSize");
                writer.WriteStringValue(DataNodeSize.AbsoluteUri);
            }
            if (Optional.IsDefined(ZookeeperNodeSize))
            {
                writer.WritePropertyName("zookeeperNodeSize");
                writer.WriteStringValue(ZookeeperNodeSize.AbsoluteUri);
            }
            if (Optional.IsCollectionDefined(ScriptActions))
            {
                writer.WritePropertyName("scriptActions");
                writer.WriteStartArray();
                foreach (var item in ScriptActions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(VirtualNetworkId))
            {
                writer.WritePropertyName("virtualNetworkId");
                writer.WriteStringValue(VirtualNetworkId.AbsoluteUri);
            }
            if (Optional.IsDefined(SubnetName))
            {
                writer.WritePropertyName("subnetName");
                writer.WriteStringValue(SubnetName.AbsoluteUri);
            }
            if (Optional.IsDefined(Credential))
            {
                writer.WritePropertyName("credential");
                writer.WriteObjectValue(Credential);
            }
            writer.WriteEndObject();
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static HDInsightOnDemandLinkedService DeserializeHDInsightOnDemandLinkedService(JsonElement element)
        {
            string type = default;
            Optional<IntegrationRuntimeReference> connectVia = default;
            Optional<string> description = default;
            Optional<IDictionary<string, ParameterSpecification>> parameters = default;
            Optional<IList<Uri>> annotations = default;
            Uri clusterSize = default;
            Uri timeToLive = default;
            Uri version = default;
            LinkedServiceReference linkedServiceName = default;
            Uri hostSubscriptionId = default;
            Optional<Uri> servicePrincipalId = default;
            Optional<SecretBase> servicePrincipalKey = default;
            Uri tenant = default;
            Uri clusterResourceGroup = default;
            Optional<Uri> clusterNamePrefix = default;
            Optional<Uri> clusterUserName = default;
            Optional<SecretBase> clusterPassword = default;
            Optional<Uri> clusterSshUserName = default;
            Optional<SecretBase> clusterSshPassword = default;
            Optional<IList<LinkedServiceReference>> additionalLinkedServiceNames = default;
            Optional<LinkedServiceReference> hcatalogLinkedServiceName = default;
            Optional<Uri> clusterType = default;
            Optional<Uri> sparkVersion = default;
            Optional<Uri> coreConfiguration = default;
            Optional<Uri> hBaseConfiguration = default;
            Optional<Uri> hdfsConfiguration = default;
            Optional<Uri> hiveConfiguration = default;
            Optional<Uri> mapReduceConfiguration = default;
            Optional<Uri> oozieConfiguration = default;
            Optional<Uri> stormConfiguration = default;
            Optional<Uri> yarnConfiguration = default;
            Optional<Uri> encryptedCredential = default;
            Optional<Uri> headNodeSize = default;
            Optional<Uri> dataNodeSize = default;
            Optional<Uri> zookeeperNodeSize = default;
            Optional<IList<ScriptAction>> scriptActions = default;
            Optional<Uri> virtualNetworkId = default;
            Optional<Uri> subnetName = default;
            Optional<CredentialReference> credential = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectVia"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    connectVia = IntegrationRuntimeReference.DeserializeIntegrationRuntimeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, ParameterSpecification> dictionary = new Dictionary<string, ParameterSpecification>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ParameterSpecification.DeserializeParameterSpecification(property0.Value));
                    }
                    parameters = dictionary;
                    continue;
                }
                if (property.NameEquals("annotations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Uri(item.GetString()));
                    }
                    annotations = array;
                    continue;
                }
                if (property.NameEquals("typeProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("clusterSize"))
                        {
                            clusterSize = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeToLive"))
                        {
                            timeToLive = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("linkedServiceName"))
                        {
                            linkedServiceName = LinkedServiceReference.DeserializeLinkedServiceReference(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("hostSubscriptionId"))
                        {
                            hostSubscriptionId = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("servicePrincipalId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                servicePrincipalId = null;
                                continue;
                            }
                            servicePrincipalId = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("servicePrincipalKey"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            servicePrincipalKey = SecretBase.DeserializeSecretBase(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("tenant"))
                        {
                            tenant = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterResourceGroup"))
                        {
                            clusterResourceGroup = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterNamePrefix"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clusterNamePrefix = null;
                                continue;
                            }
                            clusterNamePrefix = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterUserName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clusterUserName = null;
                                continue;
                            }
                            clusterUserName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterPassword"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clusterPassword = SecretBase.DeserializeSecretBase(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("clusterSshUserName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clusterSshUserName = null;
                                continue;
                            }
                            clusterSshUserName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clusterSshPassword"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            clusterSshPassword = SecretBase.DeserializeSecretBase(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("additionalLinkedServiceNames"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<LinkedServiceReference> array = new List<LinkedServiceReference>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(LinkedServiceReference.DeserializeLinkedServiceReference(item));
                            }
                            additionalLinkedServiceNames = array;
                            continue;
                        }
                        if (property0.NameEquals("hcatalogLinkedServiceName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            hcatalogLinkedServiceName = LinkedServiceReference.DeserializeLinkedServiceReference(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("clusterType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clusterType = null;
                                continue;
                            }
                            clusterType = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sparkVersion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sparkVersion = null;
                                continue;
                            }
                            sparkVersion = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("coreConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                coreConfiguration = null;
                                continue;
                            }
                            coreConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("hBaseConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                hBaseConfiguration = null;
                                continue;
                            }
                            hBaseConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("hdfsConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                hdfsConfiguration = null;
                                continue;
                            }
                            hdfsConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("hiveConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                hiveConfiguration = null;
                                continue;
                            }
                            hiveConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("mapReduceConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                mapReduceConfiguration = null;
                                continue;
                            }
                            mapReduceConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("oozieConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                oozieConfiguration = null;
                                continue;
                            }
                            oozieConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("stormConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                stormConfiguration = null;
                                continue;
                            }
                            stormConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("yarnConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                yarnConfiguration = null;
                                continue;
                            }
                            yarnConfiguration = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("encryptedCredential"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                encryptedCredential = null;
                                continue;
                            }
                            encryptedCredential = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("headNodeSize"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                headNodeSize = null;
                                continue;
                            }
                            headNodeSize = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("dataNodeSize"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                dataNodeSize = null;
                                continue;
                            }
                            dataNodeSize = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("zookeeperNodeSize"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                zookeeperNodeSize = null;
                                continue;
                            }
                            zookeeperNodeSize = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scriptActions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ScriptAction> array = new List<ScriptAction>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ScriptAction.DeserializeScriptAction(item));
                            }
                            scriptActions = array;
                            continue;
                        }
                        if (property0.NameEquals("virtualNetworkId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                virtualNetworkId = null;
                                continue;
                            }
                            virtualNetworkId = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("subnetName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                subnetName = null;
                                continue;
                            }
                            subnetName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("credential"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            credential = CredentialReference.DeserializeCredentialReference(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new HDInsightOnDemandLinkedService(type, connectVia.Value, description.Value, Optional.ToDictionary(parameters), Optional.ToList(annotations), additionalProperties, clusterSize, timeToLive, version, linkedServiceName, hostSubscriptionId, servicePrincipalId.Value, servicePrincipalKey.Value, tenant, clusterResourceGroup, clusterNamePrefix.Value, clusterUserName.Value, clusterPassword.Value, clusterSshUserName.Value, clusterSshPassword.Value, Optional.ToList(additionalLinkedServiceNames), hcatalogLinkedServiceName.Value, clusterType.Value, sparkVersion.Value, coreConfiguration.Value, hBaseConfiguration.Value, hdfsConfiguration.Value, hiveConfiguration.Value, mapReduceConfiguration.Value, oozieConfiguration.Value, stormConfiguration.Value, yarnConfiguration.Value, encryptedCredential.Value, headNodeSize.Value, dataNodeSize.Value, zookeeperNodeSize.Value, Optional.ToList(scriptActions), virtualNetworkId.Value, subnetName.Value, credential.Value);
        }
    }
}
