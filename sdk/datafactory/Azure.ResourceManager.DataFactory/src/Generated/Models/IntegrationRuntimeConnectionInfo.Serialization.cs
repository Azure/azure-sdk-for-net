// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class IntegrationRuntimeConnectionInfo
    {
        internal static IntegrationRuntimeConnectionInfo DeserializeIntegrationRuntimeConnectionInfo(JsonElement element)
        {
            Optional<string> serviceToken = default;
            Optional<string> identityCertThumbprint = default;
            Optional<Uri> hostServiceUri = default;
            Optional<string> version = default;
            Optional<string> publicKey = default;
            Optional<bool> isIdentityCertExprired = default;
            IReadOnlyDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("serviceToken"))
                {
                    serviceToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identityCertThumbprint"))
                {
                    identityCertThumbprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostServiceUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        hostServiceUri = null;
                        continue;
                    }
                    hostServiceUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicKey"))
                {
                    publicKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isIdentityCertExprired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isIdentityCertExprired = property.Value.GetBoolean();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new IntegrationRuntimeConnectionInfo(serviceToken.Value, identityCertThumbprint.Value, hostServiceUri.Value, version.Value, publicKey.Value, Optional.ToNullable(isIdentityCertExprired), additionalProperties);
        }
    }
}
