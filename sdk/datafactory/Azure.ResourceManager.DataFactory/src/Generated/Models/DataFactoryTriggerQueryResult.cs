// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> A query of triggers. </summary>
    internal partial class DataFactoryTriggerQueryResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="DataFactoryTriggerQueryResult"/>. </summary>
        /// <param name="value"> List of triggers. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal DataFactoryTriggerQueryResult(IEnumerable<DataFactoryTriggerData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DataFactoryTriggerQueryResult"/>. </summary>
        /// <param name="value"> List of triggers. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal DataFactoryTriggerQueryResult(IReadOnlyList<DataFactoryTriggerData> value, string continuationToken, Dictionary<string, BinaryData> rawData)
        {
            Value = value;
            ContinuationToken = continuationToken;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="DataFactoryTriggerQueryResult"/> for deserialization. </summary>
        internal DataFactoryTriggerQueryResult()
        {
        }

        /// <summary> List of triggers. </summary>
        public IReadOnlyList<DataFactoryTriggerData> Value { get; }
        /// <summary> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </summary>
        public string ContinuationToken { get; }
    }
}
