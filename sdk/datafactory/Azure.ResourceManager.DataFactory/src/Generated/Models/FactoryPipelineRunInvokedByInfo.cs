// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Provides entity name and id that started the pipeline run. </summary>
    public partial class FactoryPipelineRunInvokedByInfo
    {
        /// <summary> Initializes a new instance of FactoryPipelineRunInvokedByInfo. </summary>
        internal FactoryPipelineRunInvokedByInfo()
        {
        }

        /// <summary> Initializes a new instance of FactoryPipelineRunInvokedByInfo. </summary>
        /// <param name="name"> Name of the entity that started the pipeline run. </param>
        /// <param name="id"> The ID of the entity that started the run. </param>
        /// <param name="invokedByType"> The type of the entity that started the run. </param>
        /// <param name="pipelineName"> The name of the pipeline that triggered the run, if any. </param>
        /// <param name="pipelineRunId"> The run id of the pipeline that triggered the run, if any. </param>
        internal FactoryPipelineRunInvokedByInfo(string name, string id, string invokedByType, string pipelineName, Guid? pipelineRunId)
        {
            Name = name;
            Id = id;
            InvokedByType = invokedByType;
            PipelineName = pipelineName;
            PipelineRunId = pipelineRunId;
        }

        /// <summary> Name of the entity that started the pipeline run. </summary>
        public string Name { get; }
        /// <summary> The ID of the entity that started the run. </summary>
        public string Id { get; }
        /// <summary> The type of the entity that started the run. </summary>
        public string InvokedByType { get; }
        /// <summary> The name of the pipeline that triggered the run, if any. </summary>
        public string PipelineName { get; }
        /// <summary> The run id of the pipeline that triggered the run, if any. </summary>
        public Guid? PipelineRunId { get; }
    }
}
