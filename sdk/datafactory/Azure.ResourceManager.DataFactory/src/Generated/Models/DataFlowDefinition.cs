// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Azure Data Factory nested object which contains a flow with data movements and transformations.
    /// Serialized Name: DataFlowDefinition
    /// Please note <see cref="DataFlowDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="Flowlet"/>, <see cref="MappingDataFlow"/> and <see cref="WranglingDataFlow"/>.
    /// </summary>
    public partial class DataFlowDefinition
    {
        /// <summary> Initializes a new instance of DataFlowDefinition. </summary>
        public DataFlowDefinition()
        {
            Annotations = new ChangeTrackingList<BinaryData>();
        }

        /// <summary> Initializes a new instance of DataFlowDefinition. </summary>
        /// <param name="dataFlowType">
        /// Type of data flow.
        /// Serialized Name: DataFlowDefinition.type
        /// </param>
        /// <param name="description">
        /// The description of the data flow.
        /// Serialized Name: DataFlowDefinition.description
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the data flow.
        /// Serialized Name: DataFlowDefinition.annotations
        /// </param>
        /// <param name="folder">
        /// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
        /// Serialized Name: DataFlowDefinition.folder
        /// </param>
        internal DataFlowDefinition(string dataFlowType, string description, IList<BinaryData> annotations, DataFlowFolder folder)
        {
            DataFlowType = dataFlowType;
            Description = description;
            Annotations = annotations;
            Folder = folder;
        }

        /// <summary>
        /// Type of data flow.
        /// Serialized Name: DataFlowDefinition.type
        /// </summary>
        internal string DataFlowType { get; set; }
        /// <summary>
        /// The description of the data flow.
        /// Serialized Name: DataFlowDefinition.description
        /// </summary>
        public string Description { get; set; }
        /// <summary>
        /// List of tags that can be used for describing the data flow.
        /// Serialized Name: DataFlowDefinition.annotations
        /// </summary>
        public IList<BinaryData> Annotations { get; }
        /// <summary>
        /// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
        /// Serialized Name: DataFlowDefinition.folder
        /// </summary>
        internal DataFlowFolder Folder { get; set; }
        /// <summary>
        /// The name of the folder that this data flow is in.
        /// Serialized Name: DataFlowFolder.name
        /// </summary>
        public string FolderName
        {
            get => Folder is null ? default : Folder.Name;
            set
            {
                if (Folder is null)
                    Folder = new DataFlowFolder();
                Folder.Name = value;
            }
        }
    }
}
