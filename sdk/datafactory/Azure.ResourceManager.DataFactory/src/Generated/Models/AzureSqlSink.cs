// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// A copy activity Azure SQL sink.
    /// Serialized Name: AzureSqlSink
    /// </summary>
    public partial class AzureSqlSink : CopySink
    {
        /// <summary> Initializes a new instance of AzureSqlSink. </summary>
        public AzureSqlSink()
        {
            CopySinkType = "AzureSqlSink";
        }

        /// <summary> Initializes a new instance of AzureSqlSink. </summary>
        /// <param name="copySinkType">
        /// Copy sink type.
        /// Serialized Name: CopySink.type
        /// </param>
        /// <param name="writeBatchSize">
        /// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
        /// Serialized Name: CopySink.writeBatchSize
        /// </param>
        /// <param name="writeBatchTimeout">
        /// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySink.writeBatchTimeout
        /// </param>
        /// <param name="sinkRetryCount">
        /// Sink retry count. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySink.sinkRetryCount
        /// </param>
        /// <param name="sinkRetryWait">
        /// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySink.sinkRetryWait
        /// </param>
        /// <param name="maxConcurrentConnections">
        /// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySink.maxConcurrentConnections
        /// </param>
        /// <param name="disableMetricsCollection">
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: CopySink.disableMetricsCollection
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName">
        /// SQL writer stored procedure name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.sqlWriterStoredProcedureName
        /// </param>
        /// <param name="sqlWriterTableType">
        /// SQL writer table type. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.sqlWriterTableType
        /// </param>
        /// <param name="preCopyScript">
        /// SQL pre-copy script. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.preCopyScript
        /// </param>
        /// <param name="storedProcedureParameters">
        /// SQL stored procedure parameters.
        /// Serialized Name: AzureSqlSink.storedProcedureParameters
        /// </param>
        /// <param name="storedProcedureTableTypeParameterName">
        /// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.storedProcedureTableTypeParameterName
        /// </param>
        /// <param name="tableOption">
        /// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.tableOption
        /// </param>
        /// <param name="sqlWriterUseTableLock">
        /// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: AzureSqlSink.sqlWriterUseTableLock
        /// </param>
        /// <param name="writeBehavior">
        /// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
        /// Serialized Name: AzureSqlSink.writeBehavior
        /// </param>
        /// <param name="upsertSettings">
        /// SQL upsert settings.
        /// Serialized Name: AzureSqlSink.upsertSettings
        /// </param>
        internal AzureSqlSink(string copySinkType, DataFactoryElement<int> writeBatchSize, DataFactoryElement<string> writeBatchTimeout, DataFactoryElement<int> sinkRetryCount, DataFactoryElement<string> sinkRetryWait, DataFactoryElement<int> maxConcurrentConnections, DataFactoryElement<bool> disableMetricsCollection, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> sqlWriterStoredProcedureName, DataFactoryElement<string> sqlWriterTableType, DataFactoryElement<string> preCopyScript, BinaryData storedProcedureParameters, DataFactoryElement<string> storedProcedureTableTypeParameterName, DataFactoryElement<string> tableOption, DataFactoryElement<bool> sqlWriterUseTableLock, BinaryData writeBehavior, SqlUpsertSettings upsertSettings) : base(copySinkType, writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties)
        {
            SqlWriterStoredProcedureName = sqlWriterStoredProcedureName;
            SqlWriterTableType = sqlWriterTableType;
            PreCopyScript = preCopyScript;
            StoredProcedureParameters = storedProcedureParameters;
            StoredProcedureTableTypeParameterName = storedProcedureTableTypeParameterName;
            TableOption = tableOption;
            SqlWriterUseTableLock = sqlWriterUseTableLock;
            WriteBehavior = writeBehavior;
            UpsertSettings = upsertSettings;
            CopySinkType = copySinkType ?? "AzureSqlSink";
        }

        /// <summary>
        /// SQL writer stored procedure name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.sqlWriterStoredProcedureName
        /// </summary>
        public DataFactoryElement<string> SqlWriterStoredProcedureName { get; set; }
        /// <summary>
        /// SQL writer table type. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.sqlWriterTableType
        /// </summary>
        public DataFactoryElement<string> SqlWriterTableType { get; set; }
        /// <summary>
        /// SQL pre-copy script. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.preCopyScript
        /// </summary>
        public DataFactoryElement<string> PreCopyScript { get; set; }
        /// <summary>
        /// SQL stored procedure parameters.
        /// Serialized Name: AzureSqlSink.storedProcedureParameters
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData StoredProcedureParameters { get; set; }
        /// <summary>
        /// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.storedProcedureTableTypeParameterName
        /// </summary>
        public DataFactoryElement<string> StoredProcedureTableTypeParameterName { get; set; }
        /// <summary>
        /// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureSqlSink.tableOption
        /// </summary>
        public DataFactoryElement<string> TableOption { get; set; }
        /// <summary>
        /// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: AzureSqlSink.sqlWriterUseTableLock
        /// </summary>
        public DataFactoryElement<bool> SqlWriterUseTableLock { get; set; }
        /// <summary>
        /// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
        /// Serialized Name: AzureSqlSink.writeBehavior
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData WriteBehavior { get; set; }
        /// <summary>
        /// SQL upsert settings.
        /// Serialized Name: AzureSqlSink.upsertSettings
        /// </summary>
        public SqlUpsertSettings UpsertSettings { get; set; }
    }
}
