// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class DelimitedTextWriteSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(QuoteAllText))
            {
                writer.WritePropertyName("quoteAllText");
                writer.WriteStringValue(QuoteAllText.AbsoluteUri);
            }
            writer.WritePropertyName("fileExtension");
            writer.WriteStringValue(FileExtension.AbsoluteUri);
            if (Optional.IsDefined(MaxRowsPerFile))
            {
                writer.WritePropertyName("maxRowsPerFile");
                writer.WriteStringValue(MaxRowsPerFile.AbsoluteUri);
            }
            if (Optional.IsDefined(FileNamePrefix))
            {
                writer.WritePropertyName("fileNamePrefix");
                writer.WriteStringValue(FileNamePrefix.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(FormatWriteSettingsType);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static DelimitedTextWriteSettings DeserializeDelimitedTextWriteSettings(JsonElement element)
        {
            Optional<Uri> quoteAllText = default;
            Uri fileExtension = default;
            Optional<Uri> maxRowsPerFile = default;
            Optional<Uri> fileNamePrefix = default;
            string type = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("quoteAllText"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        quoteAllText = null;
                        continue;
                    }
                    quoteAllText = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileExtension"))
                {
                    fileExtension = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxRowsPerFile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxRowsPerFile = null;
                        continue;
                    }
                    maxRowsPerFile = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileNamePrefix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fileNamePrefix = null;
                        continue;
                    }
                    fileNamePrefix = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new DelimitedTextWriteSettings(type, additionalProperties, quoteAllText.Value, fileExtension, maxRowsPerFile.Value, fileNamePrefix.Value);
        }
    }
}
