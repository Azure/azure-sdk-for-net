// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Set value for a Variable.
    /// Serialized Name: SetVariableActivity
    /// </summary>
    public partial class SetVariableActivity : ControlActivity
    {
        /// <summary> Initializes a new instance of SetVariableActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public SetVariableActivity(string name) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));

            ActivityType = "SetVariable";
        }

        /// <summary> Initializes a new instance of SetVariableActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="state">
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// Serialized Name: Activity.state
        /// </param>
        /// <param name="onInactiveMarkAs">
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// Serialized Name: Activity.onInactiveMarkAs
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="variableName">
        /// Name of the variable whose value needs to be set.
        /// Serialized Name: SetVariableActivity.typeProperties.variableName
        /// </param>
        /// <param name="value">
        /// Value to be set. Could be a static value or Expression.
        /// Serialized Name: SetVariableActivity.typeProperties.value
        /// </param>
        /// <param name="setSystemVariable">
        /// If set to true, it sets the pipeline run return value.
        /// Serialized Name: SetVariableActivity.typeProperties.setSystemVariable
        /// </param>
        internal SetVariableActivity(string name, string activityType, string description, ActivityState? state, ActivityOnInactiveMarkA? onInactiveMarkAs, IList<ActivityDependency> dependsOn, IList<ActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, string variableName, DataFactoryElement<BinaryData> value, bool? setSystemVariable) : base(name, activityType, description, state, onInactiveMarkAs, dependsOn, userProperties, additionalProperties)
        {
            VariableName = variableName;
            Value = value;
            SetSystemVariable = setSystemVariable;
            ActivityType = activityType ?? "SetVariable";
        }

        /// <summary>
        /// Name of the variable whose value needs to be set.
        /// Serialized Name: SetVariableActivity.typeProperties.variableName
        /// </summary>
        public string VariableName { get; set; }
        /// <summary>
        /// Value to be set. Could be a static value or Expression.
        /// Serialized Name: SetVariableActivity.typeProperties.value
        /// </summary>
        public DataFactoryElement<BinaryData> Value { get; set; }
        /// <summary>
        /// If set to true, it sets the pipeline run return value.
        /// Serialized Name: SetVariableActivity.typeProperties.setSystemVariable
        /// </summary>
        public bool? SetSystemVariable { get; set; }
    }
}
