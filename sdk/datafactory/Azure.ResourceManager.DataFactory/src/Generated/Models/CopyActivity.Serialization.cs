// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class CopyActivity : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Inputs))
            {
                writer.WritePropertyName("inputs");
                writer.WriteStartArray();
                foreach (var item in Inputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs");
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LinkedServiceName))
            {
                writer.WritePropertyName("linkedServiceName");
                writer.WriteObjectValue(LinkedServiceName);
            }
            if (Optional.IsDefined(Policy))
            {
                writer.WritePropertyName("policy");
                writer.WriteObjectValue(Policy);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("type");
            writer.WriteStringValue(ActivityType);
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(DependsOn))
            {
                writer.WritePropertyName("dependsOn");
                writer.WriteStartArray();
                foreach (var item in DependsOn)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UserProperties))
            {
                writer.WritePropertyName("userProperties");
                writer.WriteStartArray();
                foreach (var item in UserProperties)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("typeProperties");
            writer.WriteStartObject();
            writer.WritePropertyName("source");
            writer.WriteObjectValue(Source);
            writer.WritePropertyName("sink");
            writer.WriteObjectValue(Sink);
            if (Optional.IsDefined(Translator))
            {
                writer.WritePropertyName("translator");
                writer.WriteStringValue(Translator.AbsoluteUri);
            }
            if (Optional.IsDefined(EnableStaging))
            {
                writer.WritePropertyName("enableStaging");
                writer.WriteStringValue(EnableStaging.AbsoluteUri);
            }
            if (Optional.IsDefined(StagingSettings))
            {
                writer.WritePropertyName("stagingSettings");
                writer.WriteObjectValue(StagingSettings);
            }
            if (Optional.IsDefined(ParallelCopies))
            {
                writer.WritePropertyName("parallelCopies");
                writer.WriteStringValue(ParallelCopies.AbsoluteUri);
            }
            if (Optional.IsDefined(DataIntegrationUnits))
            {
                writer.WritePropertyName("dataIntegrationUnits");
                writer.WriteStringValue(DataIntegrationUnits.AbsoluteUri);
            }
            if (Optional.IsDefined(EnableSkipIncompatibleRow))
            {
                writer.WritePropertyName("enableSkipIncompatibleRow");
                writer.WriteStringValue(EnableSkipIncompatibleRow.AbsoluteUri);
            }
            if (Optional.IsDefined(RedirectIncompatibleRowSettings))
            {
                writer.WritePropertyName("redirectIncompatibleRowSettings");
                writer.WriteObjectValue(RedirectIncompatibleRowSettings);
            }
            if (Optional.IsDefined(LogStorageSettings))
            {
                writer.WritePropertyName("logStorageSettings");
                writer.WriteObjectValue(LogStorageSettings);
            }
            if (Optional.IsDefined(LogSettings))
            {
                writer.WritePropertyName("logSettings");
                writer.WriteObjectValue(LogSettings);
            }
            if (Optional.IsCollectionDefined(PreserveRules))
            {
                writer.WritePropertyName("preserveRules");
                writer.WriteStartArray();
                foreach (var item in PreserveRules)
                {
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Preserve))
            {
                writer.WritePropertyName("preserve");
                writer.WriteStartArray();
                foreach (var item in Preserve)
                {
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ValidateDataConsistency))
            {
                writer.WritePropertyName("validateDataConsistency");
                writer.WriteStringValue(ValidateDataConsistency.AbsoluteUri);
            }
            if (Optional.IsDefined(SkipErrorFile))
            {
                writer.WritePropertyName("skipErrorFile");
                writer.WriteObjectValue(SkipErrorFile);
            }
            writer.WriteEndObject();
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static CopyActivity DeserializeCopyActivity(JsonElement element)
        {
            Optional<IList<DatasetReference>> inputs = default;
            Optional<IList<DatasetReference>> outputs = default;
            Optional<LinkedServiceReference> linkedServiceName = default;
            Optional<ActivityPolicy> policy = default;
            string name = default;
            string type = default;
            Optional<string> description = default;
            Optional<IList<ActivityDependency>> dependsOn = default;
            Optional<IList<UserProperty>> userProperties = default;
            CopySource source = default;
            CopySink sink = default;
            Optional<Uri> translator = default;
            Optional<Uri> enableStaging = default;
            Optional<StagingSettings> stagingSettings = default;
            Optional<Uri> parallelCopies = default;
            Optional<Uri> dataIntegrationUnits = default;
            Optional<Uri> enableSkipIncompatibleRow = default;
            Optional<RedirectIncompatibleRowSettings> redirectIncompatibleRowSettings = default;
            Optional<LogStorageSettings> logStorageSettings = default;
            Optional<LogSettings> logSettings = default;
            Optional<IList<Uri>> preserveRules = default;
            Optional<IList<Uri>> preserve = default;
            Optional<Uri> validateDataConsistency = default;
            Optional<SkipErrorFile> skipErrorFile = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("inputs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DatasetReference> array = new List<DatasetReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasetReference.DeserializeDatasetReference(item));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("outputs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DatasetReference> array = new List<DatasetReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasetReference.DeserializeDatasetReference(item));
                    }
                    outputs = array;
                    continue;
                }
                if (property.NameEquals("linkedServiceName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    linkedServiceName = LinkedServiceReference.DeserializeLinkedServiceReference(property.Value);
                    continue;
                }
                if (property.NameEquals("policy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policy = ActivityPolicy.DeserializeActivityPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dependsOn"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ActivityDependency> array = new List<ActivityDependency>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ActivityDependency.DeserializeActivityDependency(item));
                    }
                    dependsOn = array;
                    continue;
                }
                if (property.NameEquals("userProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UserProperty> array = new List<UserProperty>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserProperty.DeserializeUserProperty(item));
                    }
                    userProperties = array;
                    continue;
                }
                if (property.NameEquals("typeProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("source"))
                        {
                            source = CopySource.DeserializeCopySource(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("sink"))
                        {
                            sink = CopySink.DeserializeCopySink(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("translator"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                translator = null;
                                continue;
                            }
                            translator = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableStaging"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                enableStaging = null;
                                continue;
                            }
                            enableStaging = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("stagingSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            stagingSettings = StagingSettings.DeserializeStagingSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("parallelCopies"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                parallelCopies = null;
                                continue;
                            }
                            parallelCopies = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("dataIntegrationUnits"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                dataIntegrationUnits = null;
                                continue;
                            }
                            dataIntegrationUnits = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableSkipIncompatibleRow"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                enableSkipIncompatibleRow = null;
                                continue;
                            }
                            enableSkipIncompatibleRow = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("redirectIncompatibleRowSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            redirectIncompatibleRowSettings = RedirectIncompatibleRowSettings.DeserializeRedirectIncompatibleRowSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("logStorageSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            logStorageSettings = LogStorageSettings.DeserializeLogStorageSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("logSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            logSettings = LogSettings.DeserializeLogSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("preserveRules"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Uri> array = new List<Uri>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new Uri(item.GetString()));
                            }
                            preserveRules = array;
                            continue;
                        }
                        if (property0.NameEquals("preserve"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Uri> array = new List<Uri>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new Uri(item.GetString()));
                            }
                            preserve = array;
                            continue;
                        }
                        if (property0.NameEquals("validateDataConsistency"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                validateDataConsistency = null;
                                continue;
                            }
                            validateDataConsistency = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("skipErrorFile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            skipErrorFile = SkipErrorFile.DeserializeSkipErrorFile(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new CopyActivity(name, type, description.Value, Optional.ToList(dependsOn), Optional.ToList(userProperties), additionalProperties, linkedServiceName.Value, policy.Value, Optional.ToList(inputs), Optional.ToList(outputs), source, sink, translator.Value, enableStaging.Value, stagingSettings.Value, parallelCopies.Value, dataIntegrationUnits.Value, enableSkipIncompatibleRow.Value, redirectIncompatibleRowSettings.Value, logStorageSettings.Value, logSettings.Value, Optional.ToList(preserveRules), Optional.ToList(preserve), validateDataConsistency.Value, skipErrorFile.Value);
        }
    }
}
