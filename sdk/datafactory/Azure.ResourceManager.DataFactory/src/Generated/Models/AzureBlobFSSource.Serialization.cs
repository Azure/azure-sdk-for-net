// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class AzureBlobFSSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TreatEmptyAsNull))
            {
                writer.WritePropertyName("treatEmptyAsNull");
                writer.WriteStringValue(TreatEmptyAsNull.AbsoluteUri);
            }
            if (Optional.IsDefined(SkipHeaderLineCount))
            {
                writer.WritePropertyName("skipHeaderLineCount");
                writer.WriteStringValue(SkipHeaderLineCount.AbsoluteUri);
            }
            if (Optional.IsDefined(Recursive))
            {
                writer.WritePropertyName("recursive");
                writer.WriteStringValue(Recursive.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySourceType);
            if (Optional.IsDefined(SourceRetryCount))
            {
                writer.WritePropertyName("sourceRetryCount");
                writer.WriteStringValue(SourceRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SourceRetryWait))
            {
                writer.WritePropertyName("sourceRetryWait");
                writer.WriteStringValue(SourceRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static AzureBlobFSSource DeserializeAzureBlobFSSource(JsonElement element)
        {
            Optional<Uri> treatEmptyAsNull = default;
            Optional<Uri> skipHeaderLineCount = default;
            Optional<Uri> recursive = default;
            string type = default;
            Optional<Uri> sourceRetryCount = default;
            Optional<Uri> sourceRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("treatEmptyAsNull"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        treatEmptyAsNull = null;
                        continue;
                    }
                    treatEmptyAsNull = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("skipHeaderLineCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        skipHeaderLineCount = null;
                        continue;
                    }
                    skipHeaderLineCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recursive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recursive = null;
                        continue;
                    }
                    recursive = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryCount = null;
                        continue;
                    }
                    sourceRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryWait = null;
                        continue;
                    }
                    sourceRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AzureBlobFSSource(type, sourceRetryCount.Value, sourceRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, treatEmptyAsNull.Value, skipHeaderLineCount.Value, recursive.Value);
        }
    }
}
