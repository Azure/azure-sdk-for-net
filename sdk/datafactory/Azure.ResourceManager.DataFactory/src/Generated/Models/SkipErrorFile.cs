// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Skip error file. </summary>
    public partial class SkipErrorFile
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SkipErrorFile"/>. </summary>
        public SkipErrorFile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SkipErrorFile"/>. </summary>
        /// <param name="fileMissing"> Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dataInconsistency"> Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SkipErrorFile(DataFactoryElement<bool> fileMissing, DataFactoryElement<bool> dataInconsistency, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileMissing = fileMissing;
            DataInconsistency = dataInconsistency;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean). </summary>
        public DataFactoryElement<bool> FileMissing { get; set; }
        /// <summary> Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean). </summary>
        public DataFactoryElement<bool> DataInconsistency { get; set; }
    }
}
