// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Base class for all triggers that support one to many model for trigger to pipeline.
    /// Please note <see cref="MultiplePipelineTrigger"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="AzureBlobEventsTrigger"/>, <see cref="AzureBlobTrigger"/>, <see cref="CustomEventsTrigger"/> and <see cref="ScheduleTrigger"/>.
    /// </summary>
    public partial class MultiplePipelineTrigger : FactoryTriggerDefinition
    {
        /// <summary> Initializes a new instance of MultiplePipelineTrigger. </summary>
        public MultiplePipelineTrigger()
        {
            Pipelines = new ChangeTrackingList<TriggerPipelineReference>();
            TriggerType = "MultiplePipelineTrigger";
        }

        /// <summary> Initializes a new instance of MultiplePipelineTrigger. </summary>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        internal MultiplePipelineTrigger(string triggerType, string description, FactoryTriggerRuntimeState? runtimeState, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, IList<TriggerPipelineReference> pipelines) : base(triggerType, description, runtimeState, annotations, additionalProperties)
        {
            Pipelines = pipelines;
            TriggerType = triggerType ?? "MultiplePipelineTrigger";
        }

        /// <summary> Pipelines that need to be started. </summary>
        public IList<TriggerPipelineReference> Pipelines { get; }
    }
}
