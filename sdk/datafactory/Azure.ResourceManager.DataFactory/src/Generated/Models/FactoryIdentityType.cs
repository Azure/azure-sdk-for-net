// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> The identity type. </summary>
    public readonly partial struct FactoryIdentityType : IEquatable<FactoryIdentityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FactoryIdentityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FactoryIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SystemAssignedValue = "SystemAssigned";
        private const string UserAssignedValue = "UserAssigned";
        private const string SystemAssignedUserAssignedValue = "SystemAssigned,UserAssigned";

        /// <summary> SystemAssigned. </summary>
        public static FactoryIdentityType SystemAssigned { get; } = new FactoryIdentityType(SystemAssignedValue);
        /// <summary> UserAssigned. </summary>
        public static FactoryIdentityType UserAssigned { get; } = new FactoryIdentityType(UserAssignedValue);
        /// <summary> SystemAssigned,UserAssigned. </summary>
        public static FactoryIdentityType SystemAssignedUserAssigned { get; } = new FactoryIdentityType(SystemAssignedUserAssignedValue);
        /// <summary> Determines if two <see cref="FactoryIdentityType"/> values are the same. </summary>
        public static bool operator ==(FactoryIdentityType left, FactoryIdentityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FactoryIdentityType"/> values are not the same. </summary>
        public static bool operator !=(FactoryIdentityType left, FactoryIdentityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FactoryIdentityType"/>. </summary>
        public static implicit operator FactoryIdentityType(string value) => new FactoryIdentityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FactoryIdentityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FactoryIdentityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
