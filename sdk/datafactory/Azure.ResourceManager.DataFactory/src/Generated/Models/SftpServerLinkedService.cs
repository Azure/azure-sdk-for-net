// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// A linked service for an SSH File Transfer Protocol (SFTP) server. 
    /// Serialized Name: SftpServerLinkedService
    /// </summary>
    public partial class SftpServerLinkedService : FactoryLinkedServiceDefinition
    {
        /// <summary> Initializes a new instance of SftpServerLinkedService. </summary>
        /// <param name="host">
        /// The SFTP server host name. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.host
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="host"/> is null. </exception>
        public SftpServerLinkedService(DataFactoryElement<string> host)
        {
            Argument.AssertNotNull(host, nameof(host));

            Host = host;
            LinkedServiceType = "Sftp";
        }

        /// <summary> Initializes a new instance of SftpServerLinkedService. </summary>
        /// <param name="linkedServiceType">
        /// Type of linked service.
        /// Serialized Name: LinkedService.type
        /// </param>
        /// <param name="connectVia">
        /// The integration runtime reference.
        /// Serialized Name: LinkedService.connectVia
        /// </param>
        /// <param name="description">
        /// Linked service description.
        /// Serialized Name: LinkedService.description
        /// </param>
        /// <param name="parameters">
        /// Parameters for linked service.
        /// Serialized Name: LinkedService.parameters
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the linked service.
        /// Serialized Name: LinkedService.annotations
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host">
        /// The SFTP server host name. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.host
        /// </param>
        /// <param name="port">
        /// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
        /// Serialized Name: SftpServerLinkedService.typeProperties.port
        /// </param>
        /// <param name="authenticationType">
        /// The authentication type to be used to connect to the FTP server.
        /// Serialized Name: SftpServerLinkedService.typeProperties.authenticationType
        /// </param>
        /// <param name="userName">
        /// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.userName
        /// </param>
        /// <param name="password">
        /// Password to logon the SFTP server for Basic authentication.
        /// Serialized Name: SftpServerLinkedService.typeProperties.password
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="encryptedCredential">
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: SftpServerLinkedService.typeProperties.encryptedCredential
        /// </param>
        /// <param name="privateKeyPath">
        /// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.privateKeyPath
        /// </param>
        /// <param name="privateKeyContent">
        /// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
        /// Serialized Name: SftpServerLinkedService.typeProperties.privateKeyContent
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="passPhrase">
        /// The password to decrypt the SSH private key if the SSH private key is encrypted.
        /// Serialized Name: SftpServerLinkedService.typeProperties.passPhrase
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="skipHostKeyValidation">
        /// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: SftpServerLinkedService.typeProperties.skipHostKeyValidation
        /// </param>
        /// <param name="hostKeyFingerprint">
        /// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.hostKeyFingerprint
        /// </param>
        internal SftpServerLinkedService(string linkedServiceType, IntegrationRuntimeReference connectVia, string description, IDictionary<string, EntityParameterSpecification> parameters, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> host, DataFactoryElement<int> port, SftpAuthenticationType? authenticationType, DataFactoryElement<string> userName, FactorySecretBaseDefinition password, BinaryData encryptedCredential, DataFactoryElement<string> privateKeyPath, FactorySecretBaseDefinition privateKeyContent, FactorySecretBaseDefinition passPhrase, DataFactoryElement<bool> skipHostKeyValidation, DataFactoryElement<string> hostKeyFingerprint) : base(linkedServiceType, connectVia, description, parameters, annotations, additionalProperties)
        {
            Host = host;
            Port = port;
            AuthenticationType = authenticationType;
            UserName = userName;
            Password = password;
            EncryptedCredential = encryptedCredential;
            PrivateKeyPath = privateKeyPath;
            PrivateKeyContent = privateKeyContent;
            PassPhrase = passPhrase;
            SkipHostKeyValidation = skipHostKeyValidation;
            HostKeyFingerprint = hostKeyFingerprint;
            LinkedServiceType = linkedServiceType ?? "Sftp";
        }

        /// <summary>
        /// The SFTP server host name. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.host
        /// </summary>
        public DataFactoryElement<string> Host { get; set; }
        /// <summary>
        /// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
        /// Serialized Name: SftpServerLinkedService.typeProperties.port
        /// </summary>
        public DataFactoryElement<int> Port { get; set; }
        /// <summary>
        /// The authentication type to be used to connect to the FTP server.
        /// Serialized Name: SftpServerLinkedService.typeProperties.authenticationType
        /// </summary>
        public SftpAuthenticationType? AuthenticationType { get; set; }
        /// <summary>
        /// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.userName
        /// </summary>
        public DataFactoryElement<string> UserName { get; set; }
        /// <summary>
        /// Password to logon the SFTP server for Basic authentication.
        /// Serialized Name: SftpServerLinkedService.typeProperties.password
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition Password { get; set; }
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: SftpServerLinkedService.typeProperties.encryptedCredential
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EncryptedCredential { get; set; }
        /// <summary>
        /// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.privateKeyPath
        /// </summary>
        public DataFactoryElement<string> PrivateKeyPath { get; set; }
        /// <summary>
        /// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
        /// Serialized Name: SftpServerLinkedService.typeProperties.privateKeyContent
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition PrivateKeyContent { get; set; }
        /// <summary>
        /// The password to decrypt the SSH private key if the SSH private key is encrypted.
        /// Serialized Name: SftpServerLinkedService.typeProperties.passPhrase
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition PassPhrase { get; set; }
        /// <summary>
        /// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: SftpServerLinkedService.typeProperties.skipHostKeyValidation
        /// </summary>
        public DataFactoryElement<bool> SkipHostKeyValidation { get; set; }
        /// <summary>
        /// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: SftpServerLinkedService.typeProperties.hostKeyFingerprint
        /// </summary>
        public DataFactoryElement<string> HostKeyFingerprint { get; set; }
    }
}
