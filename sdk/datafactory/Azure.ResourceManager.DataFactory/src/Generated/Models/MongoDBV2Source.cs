// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// A copy activity source for a MongoDB database.
    /// Serialized Name: MongoDbV2Source
    /// </summary>
    public partial class MongoDBV2Source : CopyActivitySource
    {
        /// <summary> Initializes a new instance of MongoDBV2Source. </summary>
        public MongoDBV2Source()
        {
            CopySourceType = "MongoDbV2Source";
        }

        /// <summary> Initializes a new instance of MongoDBV2Source. </summary>
        /// <param name="copySourceType">
        /// Copy source type.
        /// Serialized Name: CopySource.type
        /// </param>
        /// <param name="sourceRetryCount">
        /// Source retry count. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySource.sourceRetryCount
        /// </param>
        /// <param name="sourceRetryWait">
        /// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySource.sourceRetryWait
        /// </param>
        /// <param name="maxConcurrentConnections">
        /// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySource.maxConcurrentConnections
        /// </param>
        /// <param name="disableMetricsCollection">
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: CopySource.disableMetricsCollection
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter">
        /// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
        /// Serialized Name: MongoDbV2Source.filter
        /// </param>
        /// <param name="cursorMethods">
        /// Cursor methods for Mongodb query
        /// Serialized Name: MongoDbV2Source.cursorMethods
        /// </param>
        /// <param name="batchSize">
        /// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
        /// Serialized Name: MongoDbV2Source.batchSize
        /// </param>
        /// <param name="queryTimeout">
        /// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: MongoDbV2Source.queryTimeout
        /// </param>
        /// <param name="additionalColumns">
        /// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
        /// Serialized Name: MongoDbV2Source.additionalColumns
        /// </param>
        internal MongoDBV2Source(string copySourceType, DataFactoryElement<int> sourceRetryCount, DataFactoryElement<string> sourceRetryWait, DataFactoryElement<int> maxConcurrentConnections, DataFactoryElement<bool> disableMetricsCollection, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> filter, MongoDBCursorMethodsProperties cursorMethods, DataFactoryElement<int> batchSize, DataFactoryElement<string> queryTimeout, BinaryData additionalColumns) : base(copySourceType, sourceRetryCount, sourceRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties)
        {
            Filter = filter;
            CursorMethods = cursorMethods;
            BatchSize = batchSize;
            QueryTimeout = queryTimeout;
            AdditionalColumns = additionalColumns;
            CopySourceType = copySourceType ?? "MongoDbV2Source";
        }

        /// <summary>
        /// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
        /// Serialized Name: MongoDbV2Source.filter
        /// </summary>
        public DataFactoryElement<string> Filter { get; set; }
        /// <summary>
        /// Cursor methods for Mongodb query
        /// Serialized Name: MongoDbV2Source.cursorMethods
        /// </summary>
        public MongoDBCursorMethodsProperties CursorMethods { get; set; }
        /// <summary>
        /// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
        /// Serialized Name: MongoDbV2Source.batchSize
        /// </summary>
        public DataFactoryElement<int> BatchSize { get; set; }
        /// <summary>
        /// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: MongoDbV2Source.queryTimeout
        /// </summary>
        public DataFactoryElement<string> QueryTimeout { get; set; }
        /// <summary>
        /// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
        /// Serialized Name: MongoDbV2Source.additionalColumns
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData AdditionalColumns { get; set; }
    }
}
