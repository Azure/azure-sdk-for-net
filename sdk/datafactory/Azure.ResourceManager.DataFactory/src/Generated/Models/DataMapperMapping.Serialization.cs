// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class DataMapperMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TargetEntityName))
            {
                writer.WritePropertyName("targetEntityName"u8);
                writer.WriteStringValue(TargetEntityName);
            }
            if (Optional.IsDefined(SourceEntityName))
            {
                writer.WritePropertyName("sourceEntityName"u8);
                writer.WriteStringValue(SourceEntityName);
            }
            if (Optional.IsDefined(SourceConnectionReference))
            {
                writer.WritePropertyName("sourceConnectionReference"u8);
                writer.WriteObjectValue(SourceConnectionReference);
            }
            if (Optional.IsDefined(AttributeMappingInfo))
            {
                writer.WritePropertyName("attributeMappingInfo"u8);
                writer.WriteObjectValue(AttributeMappingInfo);
            }
            if (Optional.IsDefined(SourceDenormalizeInfo))
            {
                writer.WritePropertyName("sourceDenormalizeInfo"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(SourceDenormalizeInfo);
#else
                using (JsonDocument document = JsonDocument.Parse(SourceDenormalizeInfo))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        internal static DataMapperMapping DeserializeDataMapperMapping(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> targetEntityName = default;
            Optional<string> sourceEntityName = default;
            Optional<MapperConnectionReference> sourceConnectionReference = default;
            Optional<MapperAttributeMappings> attributeMappingInfo = default;
            Optional<BinaryData> sourceDenormalizeInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetEntityName"u8))
                {
                    targetEntityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceEntityName"u8))
                {
                    sourceEntityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceConnectionReference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceConnectionReference = MapperConnectionReference.DeserializeMapperConnectionReference(property.Value);
                    continue;
                }
                if (property.NameEquals("attributeMappingInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attributeMappingInfo = MapperAttributeMappings.DeserializeMapperAttributeMappings(property.Value);
                    continue;
                }
                if (property.NameEquals("sourceDenormalizeInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceDenormalizeInfo = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new DataMapperMapping(targetEntityName.Value, sourceEntityName.Value, sourceConnectionReference.Value, attributeMappingInfo.Value, sourceDenormalizeInfo.Value);
        }
    }
}
