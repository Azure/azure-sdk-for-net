// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class XmlReadSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CompressionProperties))
            {
                writer.WritePropertyName("compressionProperties");
                writer.WriteObjectValue(CompressionProperties);
            }
            if (Optional.IsDefined(ValidationMode))
            {
                writer.WritePropertyName("validationMode");
                writer.WriteStringValue(ValidationMode.AbsoluteUri);
            }
            if (Optional.IsDefined(DetectDataType))
            {
                writer.WritePropertyName("detectDataType");
                writer.WriteStringValue(DetectDataType.AbsoluteUri);
            }
            if (Optional.IsDefined(Namespaces))
            {
                writer.WritePropertyName("namespaces");
                writer.WriteStringValue(Namespaces.AbsoluteUri);
            }
            if (Optional.IsDefined(NamespacePrefixes))
            {
                writer.WritePropertyName("namespacePrefixes");
                writer.WriteStringValue(NamespacePrefixes.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(FormatReadSettingsType);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static XmlReadSettings DeserializeXmlReadSettings(JsonElement element)
        {
            Optional<CompressionReadSettings> compressionProperties = default;
            Optional<Uri> validationMode = default;
            Optional<Uri> detectDataType = default;
            Optional<Uri> namespaces = default;
            Optional<Uri> namespacePrefixes = default;
            string type = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("compressionProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    compressionProperties = CompressionReadSettings.DeserializeCompressionReadSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("validationMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        validationMode = null;
                        continue;
                    }
                    validationMode = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("detectDataType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        detectDataType = null;
                        continue;
                    }
                    detectDataType = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("namespaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        namespaces = null;
                        continue;
                    }
                    namespaces = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("namespacePrefixes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        namespacePrefixes = null;
                        continue;
                    }
                    namespacePrefixes = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new XmlReadSettings(type, additionalProperties, compressionProperties.Value, validationMode.Value, detectDataType.Value, namespaces.Value, namespacePrefixes.Value);
        }
    }
}
