// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class TextFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ColumnDelimiter))
            {
                writer.WritePropertyName("columnDelimiter");
                writer.WriteStringValue(ColumnDelimiter.AbsoluteUri);
            }
            if (Optional.IsDefined(RowDelimiter))
            {
                writer.WritePropertyName("rowDelimiter");
                writer.WriteStringValue(RowDelimiter.AbsoluteUri);
            }
            if (Optional.IsDefined(EscapeChar))
            {
                writer.WritePropertyName("escapeChar");
                writer.WriteStringValue(EscapeChar.AbsoluteUri);
            }
            if (Optional.IsDefined(QuoteChar))
            {
                writer.WritePropertyName("quoteChar");
                writer.WriteStringValue(QuoteChar.AbsoluteUri);
            }
            if (Optional.IsDefined(NullValue))
            {
                writer.WritePropertyName("nullValue");
                writer.WriteStringValue(NullValue.AbsoluteUri);
            }
            if (Optional.IsDefined(EncodingName))
            {
                writer.WritePropertyName("encodingName");
                writer.WriteStringValue(EncodingName.AbsoluteUri);
            }
            if (Optional.IsDefined(TreatEmptyAsNull))
            {
                writer.WritePropertyName("treatEmptyAsNull");
                writer.WriteStringValue(TreatEmptyAsNull.AbsoluteUri);
            }
            if (Optional.IsDefined(SkipLineCount))
            {
                writer.WritePropertyName("skipLineCount");
                writer.WriteStringValue(SkipLineCount.AbsoluteUri);
            }
            if (Optional.IsDefined(FirstRowAsHeader))
            {
                writer.WritePropertyName("firstRowAsHeader");
                writer.WriteStringValue(FirstRowAsHeader.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(DatasetStorageFormatType);
            if (Optional.IsDefined(Serializer))
            {
                writer.WritePropertyName("serializer");
                writer.WriteStringValue(Serializer.AbsoluteUri);
            }
            if (Optional.IsDefined(Deserializer))
            {
                writer.WritePropertyName("deserializer");
                writer.WriteStringValue(Deserializer.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static TextFormat DeserializeTextFormat(JsonElement element)
        {
            Optional<Uri> columnDelimiter = default;
            Optional<Uri> rowDelimiter = default;
            Optional<Uri> escapeChar = default;
            Optional<Uri> quoteChar = default;
            Optional<Uri> nullValue = default;
            Optional<Uri> encodingName = default;
            Optional<Uri> treatEmptyAsNull = default;
            Optional<Uri> skipLineCount = default;
            Optional<Uri> firstRowAsHeader = default;
            string type = default;
            Optional<Uri> serializer = default;
            Optional<Uri> deserializer = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("columnDelimiter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        columnDelimiter = null;
                        continue;
                    }
                    columnDelimiter = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rowDelimiter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rowDelimiter = null;
                        continue;
                    }
                    rowDelimiter = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("escapeChar"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        escapeChar = null;
                        continue;
                    }
                    escapeChar = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("quoteChar"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        quoteChar = null;
                        continue;
                    }
                    quoteChar = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nullValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nullValue = null;
                        continue;
                    }
                    nullValue = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("encodingName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        encodingName = null;
                        continue;
                    }
                    encodingName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("treatEmptyAsNull"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        treatEmptyAsNull = null;
                        continue;
                    }
                    treatEmptyAsNull = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("skipLineCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        skipLineCount = null;
                        continue;
                    }
                    skipLineCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("firstRowAsHeader"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        firstRowAsHeader = null;
                        continue;
                    }
                    firstRowAsHeader = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serializer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        serializer = null;
                        continue;
                    }
                    serializer = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deserializer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        deserializer = null;
                        continue;
                    }
                    deserializer = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new TextFormat(type, serializer.Value, deserializer.Value, additionalProperties, columnDelimiter.Value, rowDelimiter.Value, escapeChar.Value, quoteChar.Value, nullValue.Value, encodingName.Value, treatEmptyAsNull.Value, skipLineCount.Value, firstRowAsHeader.Value);
        }
    }
}
