// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class MapperTargetConnectionsInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(TargetEntities))
            {
                writer.WritePropertyName("targetEntities"u8);
                writer.WriteStartArray();
                foreach (var item in TargetEntities)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Connection))
            {
                writer.WritePropertyName("connection"u8);
                writer.WriteObjectValue(Connection);
            }
            if (Optional.IsCollectionDefined(DataMapperMappings))
            {
                writer.WritePropertyName("dataMapperMappings"u8);
                writer.WriteStartArray();
                foreach (var item in DataMapperMappings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Relationships))
            {
                writer.WritePropertyName("relationships"u8);
                writer.WriteStartArray();
                foreach (var item in Relationships)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item);
#else
                    using (JsonDocument document = JsonDocument.Parse(item))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MapperTargetConnectionsInfo DeserializeMapperTargetConnectionsInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<MapperTable>> targetEntities = default;
            Optional<MapperConnection> connection = default;
            Optional<IList<DataMapperMapping>> dataMapperMappings = default;
            Optional<IList<BinaryData>> relationships = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetEntities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MapperTable> array = new List<MapperTable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MapperTable.DeserializeMapperTable(item));
                    }
                    targetEntities = array;
                    continue;
                }
                if (property.NameEquals("connection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connection = MapperConnection.DeserializeMapperConnection(property.Value);
                    continue;
                }
                if (property.NameEquals("dataMapperMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataMapperMapping> array = new List<DataMapperMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataMapperMapping.DeserializeDataMapperMapping(item));
                    }
                    dataMapperMappings = array;
                    continue;
                }
                if (property.NameEquals("relationships"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BinaryData> array = new List<BinaryData>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(BinaryData.FromString(item.GetRawText()));
                        }
                    }
                    relationships = array;
                    continue;
                }
            }
            return new MapperTargetConnectionsInfo(Optional.ToList(targetEntities), connection.Value, Optional.ToList(dataMapperMappings), Optional.ToList(relationships));
        }
    }
}
