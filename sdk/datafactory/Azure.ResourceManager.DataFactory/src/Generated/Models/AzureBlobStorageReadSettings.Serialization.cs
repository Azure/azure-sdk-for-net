// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class AzureBlobStorageReadSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Recursive))
            {
                writer.WritePropertyName("recursive");
                writer.WriteStringValue(Recursive.AbsoluteUri);
            }
            if (Optional.IsDefined(WildcardFolderPath))
            {
                writer.WritePropertyName("wildcardFolderPath");
                writer.WriteStringValue(WildcardFolderPath.AbsoluteUri);
            }
            if (Optional.IsDefined(WildcardFileName))
            {
                writer.WritePropertyName("wildcardFileName");
                writer.WriteStringValue(WildcardFileName.AbsoluteUri);
            }
            if (Optional.IsDefined(Prefix))
            {
                writer.WritePropertyName("prefix");
                writer.WriteStringValue(Prefix.AbsoluteUri);
            }
            if (Optional.IsDefined(FileListPath))
            {
                writer.WritePropertyName("fileListPath");
                writer.WriteStringValue(FileListPath.AbsoluteUri);
            }
            if (Optional.IsDefined(EnablePartitionDiscovery))
            {
                writer.WritePropertyName("enablePartitionDiscovery");
                writer.WriteBooleanValue(EnablePartitionDiscovery.Value);
            }
            if (Optional.IsDefined(PartitionRootPath))
            {
                writer.WritePropertyName("partitionRootPath");
                writer.WriteStringValue(PartitionRootPath.AbsoluteUri);
            }
            if (Optional.IsDefined(DeleteFilesAfterCompletion))
            {
                writer.WritePropertyName("deleteFilesAfterCompletion");
                writer.WriteStringValue(DeleteFilesAfterCompletion.AbsoluteUri);
            }
            if (Optional.IsDefined(ModifiedDatetimeStart))
            {
                writer.WritePropertyName("modifiedDatetimeStart");
                writer.WriteStringValue(ModifiedDatetimeStart.AbsoluteUri);
            }
            if (Optional.IsDefined(ModifiedDatetimeEnd))
            {
                writer.WritePropertyName("modifiedDatetimeEnd");
                writer.WriteStringValue(ModifiedDatetimeEnd.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(StoreReadSettingsType);
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static AzureBlobStorageReadSettings DeserializeAzureBlobStorageReadSettings(JsonElement element)
        {
            Optional<Uri> recursive = default;
            Optional<Uri> wildcardFolderPath = default;
            Optional<Uri> wildcardFileName = default;
            Optional<Uri> prefix = default;
            Optional<Uri> fileListPath = default;
            Optional<bool> enablePartitionDiscovery = default;
            Optional<Uri> partitionRootPath = default;
            Optional<Uri> deleteFilesAfterCompletion = default;
            Optional<Uri> modifiedDatetimeStart = default;
            Optional<Uri> modifiedDatetimeEnd = default;
            string type = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recursive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recursive = null;
                        continue;
                    }
                    recursive = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("wildcardFolderPath"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        wildcardFolderPath = null;
                        continue;
                    }
                    wildcardFolderPath = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("wildcardFileName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        wildcardFileName = null;
                        continue;
                    }
                    wildcardFileName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("prefix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        prefix = null;
                        continue;
                    }
                    prefix = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fileListPath"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fileListPath = null;
                        continue;
                    }
                    fileListPath = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enablePartitionDiscovery"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enablePartitionDiscovery = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("partitionRootPath"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        partitionRootPath = null;
                        continue;
                    }
                    partitionRootPath = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deleteFilesAfterCompletion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        deleteFilesAfterCompletion = null;
                        continue;
                    }
                    deleteFilesAfterCompletion = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("modifiedDatetimeStart"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modifiedDatetimeStart = null;
                        continue;
                    }
                    modifiedDatetimeStart = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("modifiedDatetimeEnd"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modifiedDatetimeEnd = null;
                        continue;
                    }
                    modifiedDatetimeEnd = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AzureBlobStorageReadSettings(type, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, recursive.Value, wildcardFolderPath.Value, wildcardFileName.Value, prefix.Value, fileListPath.Value, Optional.ToNullable(enablePartitionDiscovery), partitionRootPath.Value, deleteFilesAfterCompletion.Value, modifiedDatetimeStart.Value, modifiedDatetimeEnd.Value);
        }
    }
}
