// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class SapOdpLinkedService : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(LinkedServiceType);
            if (Optional.IsDefined(ConnectVia))
            {
                writer.WritePropertyName("connectVia");
                writer.WriteObjectValue(ConnectVia);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartObject();
                foreach (var item in Parameters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Annotations))
            {
                writer.WritePropertyName("annotations");
                writer.WriteStartArray();
                foreach (var item in Annotations)
                {
                    writer.WriteStringValue(item.AbsoluteUri);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("typeProperties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Server))
            {
                writer.WritePropertyName("server");
                writer.WriteStringValue(Server.AbsoluteUri);
            }
            if (Optional.IsDefined(SystemNumber))
            {
                writer.WritePropertyName("systemNumber");
                writer.WriteStringValue(SystemNumber.AbsoluteUri);
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId");
                writer.WriteStringValue(ClientId.AbsoluteUri);
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language");
                writer.WriteStringValue(Language.AbsoluteUri);
            }
            if (Optional.IsDefined(SystemId))
            {
                writer.WritePropertyName("systemId");
                writer.WriteStringValue(SystemId.AbsoluteUri);
            }
            if (Optional.IsDefined(UserName))
            {
                writer.WritePropertyName("userName");
                writer.WriteStringValue(UserName.AbsoluteUri);
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password");
                writer.WriteObjectValue(Password);
            }
            if (Optional.IsDefined(MessageServer))
            {
                writer.WritePropertyName("messageServer");
                writer.WriteStringValue(MessageServer.AbsoluteUri);
            }
            if (Optional.IsDefined(MessageServerService))
            {
                writer.WritePropertyName("messageServerService");
                writer.WriteStringValue(MessageServerService.AbsoluteUri);
            }
            if (Optional.IsDefined(SncMode))
            {
                writer.WritePropertyName("sncMode");
                writer.WriteStringValue(SncMode.AbsoluteUri);
            }
            if (Optional.IsDefined(SncMyName))
            {
                writer.WritePropertyName("sncMyName");
                writer.WriteStringValue(SncMyName.AbsoluteUri);
            }
            if (Optional.IsDefined(SncPartnerName))
            {
                writer.WritePropertyName("sncPartnerName");
                writer.WriteStringValue(SncPartnerName.AbsoluteUri);
            }
            if (Optional.IsDefined(SncLibraryPath))
            {
                writer.WritePropertyName("sncLibraryPath");
                writer.WriteStringValue(SncLibraryPath.AbsoluteUri);
            }
            if (Optional.IsDefined(SncQop))
            {
                writer.WritePropertyName("sncQop");
                writer.WriteStringValue(SncQop.AbsoluteUri);
            }
            if (Optional.IsDefined(X509CertificatePath))
            {
                writer.WritePropertyName("x509CertificatePath");
                writer.WriteStringValue(X509CertificatePath.AbsoluteUri);
            }
            if (Optional.IsDefined(LogonGroup))
            {
                writer.WritePropertyName("logonGroup");
                writer.WriteStringValue(LogonGroup.AbsoluteUri);
            }
            if (Optional.IsDefined(SubscriberName))
            {
                writer.WritePropertyName("subscriberName");
                writer.WriteStringValue(SubscriberName.AbsoluteUri);
            }
            if (Optional.IsDefined(EncryptedCredential))
            {
                writer.WritePropertyName("encryptedCredential");
                writer.WriteStringValue(EncryptedCredential.AbsoluteUri);
            }
            writer.WriteEndObject();
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static SapOdpLinkedService DeserializeSapOdpLinkedService(JsonElement element)
        {
            string type = default;
            Optional<IntegrationRuntimeReference> connectVia = default;
            Optional<string> description = default;
            Optional<IDictionary<string, ParameterSpecification>> parameters = default;
            Optional<IList<Uri>> annotations = default;
            Optional<Uri> server = default;
            Optional<Uri> systemNumber = default;
            Optional<Uri> clientId = default;
            Optional<Uri> language = default;
            Optional<Uri> systemId = default;
            Optional<Uri> userName = default;
            Optional<SecretBase> password = default;
            Optional<Uri> messageServer = default;
            Optional<Uri> messageServerService = default;
            Optional<Uri> sncMode = default;
            Optional<Uri> sncMyName = default;
            Optional<Uri> sncPartnerName = default;
            Optional<Uri> sncLibraryPath = default;
            Optional<Uri> sncQop = default;
            Optional<Uri> x509CertificatePath = default;
            Optional<Uri> logonGroup = default;
            Optional<Uri> subscriberName = default;
            Optional<Uri> encryptedCredential = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectVia"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    connectVia = IntegrationRuntimeReference.DeserializeIntegrationRuntimeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, ParameterSpecification> dictionary = new Dictionary<string, ParameterSpecification>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ParameterSpecification.DeserializeParameterSpecification(property0.Value));
                    }
                    parameters = dictionary;
                    continue;
                }
                if (property.NameEquals("annotations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Uri> array = new List<Uri>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Uri(item.GetString()));
                    }
                    annotations = array;
                    continue;
                }
                if (property.NameEquals("typeProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("server"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                server = null;
                                continue;
                            }
                            server = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("systemNumber"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                systemNumber = null;
                                continue;
                            }
                            systemNumber = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("clientId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                clientId = null;
                                continue;
                            }
                            clientId = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("language"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                language = null;
                                continue;
                            }
                            language = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("systemId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                systemId = null;
                                continue;
                            }
                            systemId = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("userName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                userName = null;
                                continue;
                            }
                            userName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("password"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            password = SecretBase.DeserializeSecretBase(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("messageServer"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                messageServer = null;
                                continue;
                            }
                            messageServer = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("messageServerService"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                messageServerService = null;
                                continue;
                            }
                            messageServerService = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sncMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sncMode = null;
                                continue;
                            }
                            sncMode = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sncMyName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sncMyName = null;
                                continue;
                            }
                            sncMyName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sncPartnerName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sncPartnerName = null;
                                continue;
                            }
                            sncPartnerName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sncLibraryPath"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sncLibraryPath = null;
                                continue;
                            }
                            sncLibraryPath = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sncQop"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                sncQop = null;
                                continue;
                            }
                            sncQop = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("x509CertificatePath"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                x509CertificatePath = null;
                                continue;
                            }
                            x509CertificatePath = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("logonGroup"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                logonGroup = null;
                                continue;
                            }
                            logonGroup = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("subscriberName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                subscriberName = null;
                                continue;
                            }
                            subscriberName = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("encryptedCredential"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                encryptedCredential = null;
                                continue;
                            }
                            encryptedCredential = new Uri(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SapOdpLinkedService(type, connectVia.Value, description.Value, Optional.ToDictionary(parameters), Optional.ToList(annotations), additionalProperties, server.Value, systemNumber.Value, clientId.Value, language.Value, systemId.Value, userName.Value, password.Value, messageServer.Value, messageServerService.Value, sncMode.Value, sncMyName.Value, sncPartnerName.Value, sncLibraryPath.Value, sncQop.Value, x509CertificatePath.Value, logonGroup.Value, subscriberName.Value, encryptedCredential.Value);
        }
    }
}
