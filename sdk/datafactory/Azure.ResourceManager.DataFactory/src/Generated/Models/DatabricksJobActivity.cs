// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary> Databricks Job activity. </summary>
    public partial class DatabricksJobActivity : ExecutionActivity
    {
        /// <summary> Initializes a new instance of <see cref="DatabricksJobActivity"/>. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="jobId"> The Id of the Databricks Job to be executed. Type: string (or Expression with resultType string). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="jobId"/> is null. </exception>
        public DatabricksJobActivity(string name, DataFactoryElement<string> jobId) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(jobId, nameof(jobId));

            JobId = jobId;
            JobParameters = new ChangeTrackingDictionary<string, BinaryData>();
            ActivityType = "DatabricksJob";
        }

        /// <summary> Initializes a new instance of <see cref="DatabricksJobActivity"/>. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="activityType"> Type of activity. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="state"> Activity state. This is an optional property and if not provided, the state will be Active by default. </param>
        /// <param name="onInactiveMarkAs"> Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="jobId"> The Id of the Databricks Job to be executed. Type: string (or Expression with resultType string). </param>
        /// <param name="jobParameters"> Job parameters to be used for each run of this job. If the job takes a parameter that is not specified, the default value from the job will be used. </param>
        internal DatabricksJobActivity(string name, string activityType, string description, PipelineActivityState? state, ActivityOnInactiveMarkAs? onInactiveMarkAs, IList<PipelineActivityDependency> dependsOn, IList<PipelineActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, DataFactoryLinkedServiceReference linkedServiceName, PipelineActivityPolicy policy, DataFactoryElement<string> jobId, IDictionary<string, BinaryData> jobParameters) : base(name, activityType, description, state, onInactiveMarkAs, dependsOn, userProperties, additionalProperties, linkedServiceName, policy)
        {
            JobId = jobId;
            JobParameters = jobParameters;
            ActivityType = activityType ?? "DatabricksJob";
        }

        /// <summary> Initializes a new instance of <see cref="DatabricksJobActivity"/> for deserialization. </summary>
        internal DatabricksJobActivity()
        {
        }

        /// <summary> The Id of the Databricks Job to be executed. Type: string (or Expression with resultType string). </summary>
        public DataFactoryElement<string> JobId { get; set; }
        /// <summary>
        /// Job parameters to be used for each run of this job. If the job takes a parameter that is not specified, the default value from the job will be used.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> JobParameters { get; }
    }
}
