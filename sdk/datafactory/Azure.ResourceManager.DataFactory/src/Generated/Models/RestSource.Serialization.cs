// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class RestSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RequestMethod))
            {
                writer.WritePropertyName("requestMethod");
                writer.WriteStringValue(RequestMethod.AbsoluteUri);
            }
            if (Optional.IsDefined(RequestBody))
            {
                writer.WritePropertyName("requestBody");
                writer.WriteStringValue(RequestBody.AbsoluteUri);
            }
            if (Optional.IsDefined(AdditionalHeaders))
            {
                writer.WritePropertyName("additionalHeaders");
                writer.WriteStringValue(AdditionalHeaders.AbsoluteUri);
            }
            if (Optional.IsDefined(PaginationRules))
            {
                writer.WritePropertyName("paginationRules");
                writer.WriteStringValue(PaginationRules.AbsoluteUri);
            }
            if (Optional.IsDefined(HttpRequestTimeout))
            {
                writer.WritePropertyName("httpRequestTimeout");
                writer.WriteStringValue(HttpRequestTimeout.AbsoluteUri);
            }
            if (Optional.IsDefined(RequestInterval))
            {
                writer.WritePropertyName("requestInterval");
                writer.WriteStringValue(RequestInterval.AbsoluteUri);
            }
            if (Optional.IsDefined(AdditionalColumns))
            {
                writer.WritePropertyName("additionalColumns");
                writer.WriteStringValue(AdditionalColumns.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySourceType);
            if (Optional.IsDefined(SourceRetryCount))
            {
                writer.WritePropertyName("sourceRetryCount");
                writer.WriteStringValue(SourceRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SourceRetryWait))
            {
                writer.WritePropertyName("sourceRetryWait");
                writer.WriteStringValue(SourceRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static RestSource DeserializeRestSource(JsonElement element)
        {
            Optional<Uri> requestMethod = default;
            Optional<Uri> requestBody = default;
            Optional<Uri> additionalHeaders = default;
            Optional<Uri> paginationRules = default;
            Optional<Uri> httpRequestTimeout = default;
            Optional<Uri> requestInterval = default;
            Optional<Uri> additionalColumns = default;
            string type = default;
            Optional<Uri> sourceRetryCount = default;
            Optional<Uri> sourceRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestMethod"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestMethod = null;
                        continue;
                    }
                    requestMethod = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requestBody"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestBody = null;
                        continue;
                    }
                    requestBody = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("additionalHeaders"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        additionalHeaders = null;
                        continue;
                    }
                    additionalHeaders = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("paginationRules"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        paginationRules = null;
                        continue;
                    }
                    paginationRules = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpRequestTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        httpRequestTimeout = null;
                        continue;
                    }
                    httpRequestTimeout = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requestInterval"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        requestInterval = null;
                        continue;
                    }
                    requestInterval = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("additionalColumns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        additionalColumns = null;
                        continue;
                    }
                    additionalColumns = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryCount = null;
                        continue;
                    }
                    sourceRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryWait = null;
                        continue;
                    }
                    sourceRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new RestSource(type, sourceRetryCount.Value, sourceRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, requestMethod.Value, requestBody.Value, additionalHeaders.Value, paginationRules.Value, httpRequestTimeout.Value, requestInterval.Value, additionalColumns.Value);
        }
    }
}
