// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Azure ML Service linked service.
    /// Serialized Name: AzureMLServiceLinkedService
    /// </summary>
    public partial class AzureMLServiceLinkedService : FactoryLinkedServiceDefinition
    {
        /// <summary> Initializes a new instance of AzureMLServiceLinkedService. </summary>
        /// <param name="subscriptionId">
        /// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.subscriptionId
        /// </param>
        /// <param name="resourceGroupName">
        /// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.resourceGroupName
        /// </param>
        /// <param name="mlWorkspaceName">
        /// Azure ML Service workspace name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.mlWorkspaceName
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="mlWorkspaceName"/> is null. </exception>
        public AzureMLServiceLinkedService(DataFactoryElement<string> subscriptionId, DataFactoryElement<string> resourceGroupName, DataFactoryElement<string> mlWorkspaceName)
        {
            Argument.AssertNotNull(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNull(mlWorkspaceName, nameof(mlWorkspaceName));

            SubscriptionId = subscriptionId;
            ResourceGroupName = resourceGroupName;
            MlWorkspaceName = mlWorkspaceName;
            LinkedServiceType = "AzureMLService";
        }

        /// <summary> Initializes a new instance of AzureMLServiceLinkedService. </summary>
        /// <param name="linkedServiceType">
        /// Type of linked service.
        /// Serialized Name: LinkedService.type
        /// </param>
        /// <param name="connectVia">
        /// The integration runtime reference.
        /// Serialized Name: LinkedService.connectVia
        /// </param>
        /// <param name="description">
        /// Linked service description.
        /// Serialized Name: LinkedService.description
        /// </param>
        /// <param name="parameters">
        /// Parameters for linked service.
        /// Serialized Name: LinkedService.parameters
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the linked service.
        /// Serialized Name: LinkedService.annotations
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="subscriptionId">
        /// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.subscriptionId
        /// </param>
        /// <param name="resourceGroupName">
        /// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.resourceGroupName
        /// </param>
        /// <param name="mlWorkspaceName">
        /// Azure ML Service workspace name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.mlWorkspaceName
        /// </param>
        /// <param name="servicePrincipalId">
        /// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.servicePrincipalId
        /// </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.servicePrincipalKey
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="tenant">
        /// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.tenant
        /// </param>
        /// <param name="encryptedCredential">
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.encryptedCredential
        /// </param>
        internal AzureMLServiceLinkedService(string linkedServiceType, IntegrationRuntimeReference connectVia, string description, IDictionary<string, EntityParameterSpecification> parameters, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> subscriptionId, DataFactoryElement<string> resourceGroupName, DataFactoryElement<string> mlWorkspaceName, DataFactoryElement<string> servicePrincipalId, FactorySecretBaseDefinition servicePrincipalKey, DataFactoryElement<string> tenant, BinaryData encryptedCredential) : base(linkedServiceType, connectVia, description, parameters, annotations, additionalProperties)
        {
            SubscriptionId = subscriptionId;
            ResourceGroupName = resourceGroupName;
            MlWorkspaceName = mlWorkspaceName;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            Tenant = tenant;
            EncryptedCredential = encryptedCredential;
            LinkedServiceType = linkedServiceType ?? "AzureMLService";
        }

        /// <summary>
        /// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.subscriptionId
        /// </summary>
        public DataFactoryElement<string> SubscriptionId { get; set; }
        /// <summary>
        /// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.resourceGroupName
        /// </summary>
        public DataFactoryElement<string> ResourceGroupName { get; set; }
        /// <summary>
        /// Azure ML Service workspace name. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.mlWorkspaceName
        /// </summary>
        public DataFactoryElement<string> MlWorkspaceName { get; set; }
        /// <summary>
        /// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.servicePrincipalId
        /// </summary>
        public DataFactoryElement<string> ServicePrincipalId { get; set; }
        /// <summary>
        /// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.servicePrincipalKey
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition ServicePrincipalKey { get; set; }
        /// <summary>
        /// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.tenant
        /// </summary>
        public DataFactoryElement<string> Tenant { get; set; }
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: AzureMLServiceLinkedService.typeProperties.encryptedCredential
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EncryptedCredential { get; set; }
    }
}
