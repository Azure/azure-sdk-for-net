// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class CopyActivityLogSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LogLevel))
            {
                writer.WritePropertyName("logLevel");
                writer.WriteStringValue(LogLevel.AbsoluteUri);
            }
            if (Optional.IsDefined(EnableReliableLogging))
            {
                writer.WritePropertyName("enableReliableLogging");
                writer.WriteStringValue(EnableReliableLogging.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static CopyActivityLogSettings DeserializeCopyActivityLogSettings(JsonElement element)
        {
            Optional<Uri> logLevel = default;
            Optional<Uri> enableReliableLogging = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("logLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logLevel = null;
                        continue;
                    }
                    logLevel = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableReliableLogging"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableReliableLogging = null;
                        continue;
                    }
                    enableReliableLogging = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new CopyActivityLogSettings(logLevel.Value, enableReliableLogging.Value);
        }
    }
}
