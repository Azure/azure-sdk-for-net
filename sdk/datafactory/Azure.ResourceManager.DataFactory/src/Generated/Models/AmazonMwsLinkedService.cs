// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Amazon Marketplace Web Service linked service.
    /// Serialized Name: AmazonMWSLinkedService
    /// </summary>
    public partial class AmazonMwsLinkedService : FactoryLinkedServiceDefinition
    {
        /// <summary> Initializes a new instance of AmazonMwsLinkedService. </summary>
        /// <param name="endpoint">
        /// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.endpoint
        /// </param>
        /// <param name="marketplaceId">
        /// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.marketplaceID
        /// </param>
        /// <param name="sellerId">
        /// The Amazon seller ID.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.sellerID
        /// </param>
        /// <param name="accessKeyId">
        /// The access key id used to access data.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.accessKeyId
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="marketplaceId"/>, <paramref name="sellerId"/> or <paramref name="accessKeyId"/> is null. </exception>
        public AmazonMwsLinkedService(DataFactoryElement<string> endpoint, DataFactoryElement<string> marketplaceId, DataFactoryElement<string> sellerId, DataFactoryElement<string> accessKeyId)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(marketplaceId, nameof(marketplaceId));
            Argument.AssertNotNull(sellerId, nameof(sellerId));
            Argument.AssertNotNull(accessKeyId, nameof(accessKeyId));

            Endpoint = endpoint;
            MarketplaceId = marketplaceId;
            SellerId = sellerId;
            AccessKeyId = accessKeyId;
            LinkedServiceType = "AmazonMWS";
        }

        /// <summary> Initializes a new instance of AmazonMwsLinkedService. </summary>
        /// <param name="linkedServiceType">
        /// Type of linked service.
        /// Serialized Name: LinkedService.type
        /// </param>
        /// <param name="connectVia">
        /// The integration runtime reference.
        /// Serialized Name: LinkedService.connectVia
        /// </param>
        /// <param name="description">
        /// Linked service description.
        /// Serialized Name: LinkedService.description
        /// </param>
        /// <param name="parameters">
        /// Parameters for linked service.
        /// Serialized Name: LinkedService.parameters
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the linked service.
        /// Serialized Name: LinkedService.annotations
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint">
        /// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.endpoint
        /// </param>
        /// <param name="marketplaceId">
        /// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.marketplaceID
        /// </param>
        /// <param name="sellerId">
        /// The Amazon seller ID.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.sellerID
        /// </param>
        /// <param name="mwsAuthToken">
        /// The Amazon MWS authentication token.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.mwsAuthToken
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="accessKeyId">
        /// The access key id used to access data.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.accessKeyId
        /// </param>
        /// <param name="secretKey">
        /// The secret key used to access data.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.secretKey
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints">
        /// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.useEncryptedEndpoints
        /// </param>
        /// <param name="useHostVerification">
        /// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.useHostVerification
        /// </param>
        /// <param name="usePeerVerification">
        /// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.usePeerVerification
        /// </param>
        /// <param name="encryptedCredential">
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.encryptedCredential
        /// </param>
        internal AmazonMwsLinkedService(string linkedServiceType, IntegrationRuntimeReference connectVia, string description, IDictionary<string, EntityParameterSpecification> parameters, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> endpoint, DataFactoryElement<string> marketplaceId, DataFactoryElement<string> sellerId, FactorySecretBaseDefinition mwsAuthToken, DataFactoryElement<string> accessKeyId, FactorySecretBaseDefinition secretKey, DataFactoryElement<bool> useEncryptedEndpoints, DataFactoryElement<bool> useHostVerification, DataFactoryElement<bool> usePeerVerification, BinaryData encryptedCredential) : base(linkedServiceType, connectVia, description, parameters, annotations, additionalProperties)
        {
            Endpoint = endpoint;
            MarketplaceId = marketplaceId;
            SellerId = sellerId;
            MwsAuthToken = mwsAuthToken;
            AccessKeyId = accessKeyId;
            SecretKey = secretKey;
            UseEncryptedEndpoints = useEncryptedEndpoints;
            UseHostVerification = useHostVerification;
            UsePeerVerification = usePeerVerification;
            EncryptedCredential = encryptedCredential;
            LinkedServiceType = linkedServiceType ?? "AmazonMWS";
        }

        /// <summary>
        /// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.endpoint
        /// </summary>
        public DataFactoryElement<string> Endpoint { get; set; }
        /// <summary>
        /// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.marketplaceID
        /// </summary>
        public DataFactoryElement<string> MarketplaceId { get; set; }
        /// <summary>
        /// The Amazon seller ID.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.sellerID
        /// </summary>
        public DataFactoryElement<string> SellerId { get; set; }
        /// <summary>
        /// The Amazon MWS authentication token.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.mwsAuthToken
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition MwsAuthToken { get; set; }
        /// <summary>
        /// The access key id used to access data.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.accessKeyId
        /// </summary>
        public DataFactoryElement<string> AccessKeyId { get; set; }
        /// <summary>
        /// The secret key used to access data.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.secretKey
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition SecretKey { get; set; }
        /// <summary>
        /// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.useEncryptedEndpoints
        /// </summary>
        public DataFactoryElement<bool> UseEncryptedEndpoints { get; set; }
        /// <summary>
        /// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.useHostVerification
        /// </summary>
        public DataFactoryElement<bool> UseHostVerification { get; set; }
        /// <summary>
        /// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.usePeerVerification
        /// </summary>
        public DataFactoryElement<bool> UsePeerVerification { get; set; }
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
        /// Serialized Name: AmazonMWSLinkedService.typeProperties.encryptedCredential
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EncryptedCredential { get; set; }
    }
}
