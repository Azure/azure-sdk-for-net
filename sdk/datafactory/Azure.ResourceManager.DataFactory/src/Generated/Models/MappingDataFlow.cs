// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Mapping data flow.
    /// Serialized Name: MappingDataFlow
    /// </summary>
    public partial class MappingDataFlow : DataFlowDefinition
    {
        /// <summary> Initializes a new instance of MappingDataFlow. </summary>
        public MappingDataFlow()
        {
            Sources = new ChangeTrackingList<DataFlowSource>();
            Sinks = new ChangeTrackingList<DataFlowSink>();
            Transformations = new ChangeTrackingList<Transformation>();
            ScriptLines = new ChangeTrackingList<string>();
            DataFlowType = "MappingDataFlow";
        }

        /// <summary> Initializes a new instance of MappingDataFlow. </summary>
        /// <param name="dataFlowType">
        /// Type of data flow.
        /// Serialized Name: DataFlowDefinition.type
        /// </param>
        /// <param name="description">
        /// The description of the data flow.
        /// Serialized Name: DataFlowDefinition.description
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the data flow.
        /// Serialized Name: DataFlowDefinition.annotations
        /// </param>
        /// <param name="folder">
        /// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
        /// Serialized Name: DataFlowDefinition.folder
        /// </param>
        /// <param name="sources">
        /// List of sources in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.sources
        /// </param>
        /// <param name="sinks">
        /// List of sinks in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.sinks
        /// </param>
        /// <param name="transformations">
        /// List of transformations in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.transformations
        /// </param>
        /// <param name="script">
        /// DataFlow script.
        /// Serialized Name: MappingDataFlow.typeProperties.script
        /// </param>
        /// <param name="scriptLines">
        /// Data flow script lines.
        /// Serialized Name: MappingDataFlow.typeProperties.scriptLines
        /// </param>
        internal MappingDataFlow(string dataFlowType, string description, IList<BinaryData> annotations, DataFlowFolder folder, IList<DataFlowSource> sources, IList<DataFlowSink> sinks, IList<Transformation> transformations, string script, IList<string> scriptLines) : base(dataFlowType, description, annotations, folder)
        {
            Sources = sources;
            Sinks = sinks;
            Transformations = transformations;
            Script = script;
            ScriptLines = scriptLines;
            DataFlowType = dataFlowType ?? "MappingDataFlow";
        }

        /// <summary>
        /// List of sources in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.sources
        /// </summary>
        public IList<DataFlowSource> Sources { get; }
        /// <summary>
        /// List of sinks in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.sinks
        /// </summary>
        public IList<DataFlowSink> Sinks { get; }
        /// <summary>
        /// List of transformations in data flow.
        /// Serialized Name: MappingDataFlow.typeProperties.transformations
        /// </summary>
        public IList<Transformation> Transformations { get; }
        /// <summary>
        /// DataFlow script.
        /// Serialized Name: MappingDataFlow.typeProperties.script
        /// </summary>
        public string Script { get; set; }
        /// <summary>
        /// Data flow script lines.
        /// Serialized Name: MappingDataFlow.typeProperties.scriptLines
        /// </summary>
        public IList<string> ScriptLines { get; }
    }
}
