// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// A copy activity Azure Data Lake Store sink.
    /// Serialized Name: AzureDataLakeStoreSink
    /// </summary>
    public partial class AzureDataLakeStoreSink : CopySink
    {
        /// <summary> Initializes a new instance of AzureDataLakeStoreSink. </summary>
        public AzureDataLakeStoreSink()
        {
            CopySinkType = "AzureDataLakeStoreSink";
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreSink. </summary>
        /// <param name="copySinkType">
        /// Copy sink type.
        /// Serialized Name: CopySink.type
        /// </param>
        /// <param name="writeBatchSize">
        /// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
        /// Serialized Name: CopySink.writeBatchSize
        /// </param>
        /// <param name="writeBatchTimeout">
        /// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySink.writeBatchTimeout
        /// </param>
        /// <param name="sinkRetryCount">
        /// Sink retry count. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySink.sinkRetryCount
        /// </param>
        /// <param name="sinkRetryWait">
        /// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
        /// Serialized Name: CopySink.sinkRetryWait
        /// </param>
        /// <param name="maxConcurrentConnections">
        /// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
        /// Serialized Name: CopySink.maxConcurrentConnections
        /// </param>
        /// <param name="disableMetricsCollection">
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: CopySink.disableMetricsCollection
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior">
        /// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureDataLakeStoreSink.copyBehavior
        /// </param>
        /// <param name="enableAdlsSingleFileParallel">
        /// Single File Parallel.
        /// Serialized Name: AzureDataLakeStoreSink.enableAdlsSingleFileParallel
        /// </param>
        internal AzureDataLakeStoreSink(string copySinkType, DataFactoryElement<int> writeBatchSize, DataFactoryElement<string> writeBatchTimeout, DataFactoryElement<int> sinkRetryCount, DataFactoryElement<string> sinkRetryWait, DataFactoryElement<int> maxConcurrentConnections, DataFactoryElement<bool> disableMetricsCollection, IDictionary<string, BinaryData> additionalProperties, DataFactoryElement<string> copyBehavior, BinaryData enableAdlsSingleFileParallel) : base(copySinkType, writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, disableMetricsCollection, additionalProperties)
        {
            CopyBehavior = copyBehavior;
            EnableAdlsSingleFileParallel = enableAdlsSingleFileParallel;
            CopySinkType = copySinkType ?? "AzureDataLakeStoreSink";
        }

        /// <summary>
        /// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
        /// Serialized Name: AzureDataLakeStoreSink.copyBehavior
        /// </summary>
        public DataFactoryElement<string> CopyBehavior { get; set; }
        /// <summary>
        /// Single File Parallel.
        /// Serialized Name: AzureDataLakeStoreSink.enableAdlsSingleFileParallel
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData EnableAdlsSingleFileParallel { get; set; }
    }
}
