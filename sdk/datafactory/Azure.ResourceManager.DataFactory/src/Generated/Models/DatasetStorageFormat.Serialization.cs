// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class DatasetStorageFormat : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(DatasetStorageFormatType);
            if (Optional.IsDefined(Serializer))
            {
                writer.WritePropertyName("serializer");
                writer.WriteStringValue(Serializer.AbsoluteUri);
            }
            if (Optional.IsDefined(Deserializer))
            {
                writer.WritePropertyName("deserializer");
                writer.WriteStringValue(Deserializer.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static DatasetStorageFormat DeserializeDatasetStorageFormat(JsonElement element)
        {
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AvroFormat": return AvroFormat.DeserializeAvroFormat(element);
                    case "JsonFormat": return JsonFormat.DeserializeJsonFormat(element);
                    case "OrcFormat": return OrcFormat.DeserializeOrcFormat(element);
                    case "ParquetFormat": return ParquetFormat.DeserializeParquetFormat(element);
                    case "TextFormat": return TextFormat.DeserializeTextFormat(element);
                }
            }
            string type = default;
            Optional<Uri> serializer = default;
            Optional<Uri> deserializer = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serializer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        serializer = null;
                        continue;
                    }
                    serializer = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deserializer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        deserializer = null;
                        continue;
                    }
                    deserializer = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new DatasetStorageFormat(type, serializer.Value, deserializer.Value, additionalProperties);
        }
    }
}
