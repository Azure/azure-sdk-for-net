// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class SqlServerSink : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SqlWriterStoredProcedureName))
            {
                writer.WritePropertyName("sqlWriterStoredProcedureName");
                writer.WriteStringValue(SqlWriterStoredProcedureName.AbsoluteUri);
            }
            if (Optional.IsDefined(SqlWriterTableType))
            {
                writer.WritePropertyName("sqlWriterTableType");
                writer.WriteStringValue(SqlWriterTableType.AbsoluteUri);
            }
            if (Optional.IsDefined(PreCopyScript))
            {
                writer.WritePropertyName("preCopyScript");
                writer.WriteStringValue(PreCopyScript.AbsoluteUri);
            }
            if (Optional.IsCollectionDefined(StoredProcedureParameters))
            {
                writer.WritePropertyName("storedProcedureParameters");
                writer.WriteStartObject();
                foreach (var item in StoredProcedureParameters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(StoredProcedureTableTypeParameterName))
            {
                writer.WritePropertyName("storedProcedureTableTypeParameterName");
                writer.WriteStringValue(StoredProcedureTableTypeParameterName.AbsoluteUri);
            }
            if (Optional.IsDefined(TableOption))
            {
                writer.WritePropertyName("tableOption");
                writer.WriteStringValue(TableOption.AbsoluteUri);
            }
            if (Optional.IsDefined(SqlWriterUseTableLock))
            {
                writer.WritePropertyName("sqlWriterUseTableLock");
                writer.WriteStringValue(SqlWriterUseTableLock.AbsoluteUri);
            }
            if (Optional.IsDefined(WriteBehavior))
            {
                writer.WritePropertyName("writeBehavior");
                writer.WriteStringValue(WriteBehavior.AbsoluteUri);
            }
            if (Optional.IsDefined(UpsertSettings))
            {
                writer.WritePropertyName("upsertSettings");
                writer.WriteObjectValue(UpsertSettings);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySinkType);
            if (Optional.IsDefined(WriteBatchSize))
            {
                writer.WritePropertyName("writeBatchSize");
                writer.WriteStringValue(WriteBatchSize.AbsoluteUri);
            }
            if (Optional.IsDefined(WriteBatchTimeout))
            {
                writer.WritePropertyName("writeBatchTimeout");
                writer.WriteStringValue(WriteBatchTimeout.AbsoluteUri);
            }
            if (Optional.IsDefined(SinkRetryCount))
            {
                writer.WritePropertyName("sinkRetryCount");
                writer.WriteStringValue(SinkRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SinkRetryWait))
            {
                writer.WritePropertyName("sinkRetryWait");
                writer.WriteStringValue(SinkRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static SqlServerSink DeserializeSqlServerSink(JsonElement element)
        {
            Optional<Uri> sqlWriterStoredProcedureName = default;
            Optional<Uri> sqlWriterTableType = default;
            Optional<Uri> preCopyScript = default;
            Optional<IDictionary<string, StoredProcedureParameter>> storedProcedureParameters = default;
            Optional<Uri> storedProcedureTableTypeParameterName = default;
            Optional<Uri> tableOption = default;
            Optional<Uri> sqlWriterUseTableLock = default;
            Optional<Uri> writeBehavior = default;
            Optional<SqlUpsertSettings> upsertSettings = default;
            string type = default;
            Optional<Uri> writeBatchSize = default;
            Optional<Uri> writeBatchTimeout = default;
            Optional<Uri> sinkRetryCount = default;
            Optional<Uri> sinkRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sqlWriterStoredProcedureName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sqlWriterStoredProcedureName = null;
                        continue;
                    }
                    sqlWriterStoredProcedureName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sqlWriterTableType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sqlWriterTableType = null;
                        continue;
                    }
                    sqlWriterTableType = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preCopyScript"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preCopyScript = null;
                        continue;
                    }
                    preCopyScript = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storedProcedureParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, StoredProcedureParameter> dictionary = new Dictionary<string, StoredProcedureParameter>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, StoredProcedureParameter.DeserializeStoredProcedureParameter(property0.Value));
                    }
                    storedProcedureParameters = dictionary;
                    continue;
                }
                if (property.NameEquals("storedProcedureTableTypeParameterName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storedProcedureTableTypeParameterName = null;
                        continue;
                    }
                    storedProcedureTableTypeParameterName = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tableOption"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tableOption = null;
                        continue;
                    }
                    tableOption = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sqlWriterUseTableLock"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sqlWriterUseTableLock = null;
                        continue;
                    }
                    sqlWriterUseTableLock = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("writeBehavior"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        writeBehavior = null;
                        continue;
                    }
                    writeBehavior = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("upsertSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    upsertSettings = SqlUpsertSettings.DeserializeSqlUpsertSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("writeBatchSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        writeBatchSize = null;
                        continue;
                    }
                    writeBatchSize = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("writeBatchTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        writeBatchTimeout = null;
                        continue;
                    }
                    writeBatchTimeout = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sinkRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sinkRetryCount = null;
                        continue;
                    }
                    sinkRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sinkRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sinkRetryWait = null;
                        continue;
                    }
                    sinkRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SqlServerSink(type, writeBatchSize.Value, writeBatchTimeout.Value, sinkRetryCount.Value, sinkRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, sqlWriterStoredProcedureName.Value, sqlWriterTableType.Value, preCopyScript.Value, Optional.ToDictionary(storedProcedureParameters), storedProcedureTableTypeParameterName.Value, tableOption.Value, sqlWriterUseTableLock.Value, writeBehavior.Value, upsertSettings.Value);
        }
    }
}
