// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class ActivityPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Timeout))
            {
                writer.WritePropertyName("timeout");
                writer.WriteStringValue(Timeout.AbsoluteUri);
            }
            if (Optional.IsDefined(Retry))
            {
                writer.WritePropertyName("retry");
                writer.WriteStringValue(Retry.AbsoluteUri);
            }
            if (Optional.IsDefined(RetryIntervalInSeconds))
            {
                writer.WritePropertyName("retryIntervalInSeconds");
                writer.WriteNumberValue(RetryIntervalInSeconds.Value);
            }
            if (Optional.IsDefined(SecureInput))
            {
                writer.WritePropertyName("secureInput");
                writer.WriteBooleanValue(SecureInput.Value);
            }
            if (Optional.IsDefined(SecureOutput))
            {
                writer.WritePropertyName("secureOutput");
                writer.WriteBooleanValue(SecureOutput.Value);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static ActivityPolicy DeserializeActivityPolicy(JsonElement element)
        {
            Optional<Uri> timeout = default;
            Optional<Uri> retry = default;
            Optional<int> retryIntervalInSeconds = default;
            Optional<bool> secureInput = default;
            Optional<bool> secureOutput = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeout = null;
                        continue;
                    }
                    timeout = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("retry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        retry = null;
                        continue;
                    }
                    retry = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("retryIntervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retryIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("secureInput"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    secureInput = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("secureOutput"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    secureOutput = property.Value.GetBoolean();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ActivityPolicy(timeout.Value, retry.Value, Optional.ToNullable(retryIntervalInSeconds), Optional.ToNullable(secureInput), Optional.ToNullable(secureOutput), additionalProperties);
        }
    }
}
