// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    public partial class SapTableSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RowCount))
            {
                writer.WritePropertyName("rowCount");
                writer.WriteStringValue(RowCount.AbsoluteUri);
            }
            if (Optional.IsDefined(RowSkips))
            {
                writer.WritePropertyName("rowSkips");
                writer.WriteStringValue(RowSkips.AbsoluteUri);
            }
            if (Optional.IsDefined(RfcTableFields))
            {
                writer.WritePropertyName("rfcTableFields");
                writer.WriteStringValue(RfcTableFields.AbsoluteUri);
            }
            if (Optional.IsDefined(RfcTableOptions))
            {
                writer.WritePropertyName("rfcTableOptions");
                writer.WriteStringValue(RfcTableOptions.AbsoluteUri);
            }
            if (Optional.IsDefined(BatchSize))
            {
                writer.WritePropertyName("batchSize");
                writer.WriteStringValue(BatchSize.AbsoluteUri);
            }
            if (Optional.IsDefined(CustomRfcReadTableFunctionModule))
            {
                writer.WritePropertyName("customRfcReadTableFunctionModule");
                writer.WriteStringValue(CustomRfcReadTableFunctionModule.AbsoluteUri);
            }
            if (Optional.IsDefined(SapDataColumnDelimiter))
            {
                writer.WritePropertyName("sapDataColumnDelimiter");
                writer.WriteStringValue(SapDataColumnDelimiter.AbsoluteUri);
            }
            if (Optional.IsDefined(PartitionOption))
            {
                writer.WritePropertyName("partitionOption");
                writer.WriteStringValue(PartitionOption.AbsoluteUri);
            }
            if (Optional.IsDefined(PartitionSettings))
            {
                writer.WritePropertyName("partitionSettings");
                writer.WriteObjectValue(PartitionSettings);
            }
            if (Optional.IsDefined(QueryTimeout))
            {
                writer.WritePropertyName("queryTimeout");
                writer.WriteStringValue(QueryTimeout.AbsoluteUri);
            }
            if (Optional.IsDefined(AdditionalColumns))
            {
                writer.WritePropertyName("additionalColumns");
                writer.WriteStringValue(AdditionalColumns.AbsoluteUri);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(CopySourceType);
            if (Optional.IsDefined(SourceRetryCount))
            {
                writer.WritePropertyName("sourceRetryCount");
                writer.WriteStringValue(SourceRetryCount.AbsoluteUri);
            }
            if (Optional.IsDefined(SourceRetryWait))
            {
                writer.WritePropertyName("sourceRetryWait");
                writer.WriteStringValue(SourceRetryWait.AbsoluteUri);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteStringValue(MaxConcurrentConnections.AbsoluteUri);
            }
            if (Optional.IsDefined(DisableMetricsCollection))
            {
                writer.WritePropertyName("disableMetricsCollection");
                writer.WriteStringValue(DisableMetricsCollection.AbsoluteUri);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static SapTableSource DeserializeSapTableSource(JsonElement element)
        {
            Optional<Uri> rowCount = default;
            Optional<Uri> rowSkips = default;
            Optional<Uri> rfcTableFields = default;
            Optional<Uri> rfcTableOptions = default;
            Optional<Uri> batchSize = default;
            Optional<Uri> customRfcReadTableFunctionModule = default;
            Optional<Uri> sapDataColumnDelimiter = default;
            Optional<Uri> partitionOption = default;
            Optional<SapTablePartitionSettings> partitionSettings = default;
            Optional<Uri> queryTimeout = default;
            Optional<Uri> additionalColumns = default;
            string type = default;
            Optional<Uri> sourceRetryCount = default;
            Optional<Uri> sourceRetryWait = default;
            Optional<Uri> maxConcurrentConnections = default;
            Optional<Uri> disableMetricsCollection = default;
            IDictionary<string, Uri> additionalProperties = default;
            Dictionary<string, Uri> additionalPropertiesDictionary = new Dictionary<string, Uri>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rowCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rowCount = null;
                        continue;
                    }
                    rowCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rowSkips"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rowSkips = null;
                        continue;
                    }
                    rowSkips = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rfcTableFields"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rfcTableFields = null;
                        continue;
                    }
                    rfcTableFields = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rfcTableOptions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rfcTableOptions = null;
                        continue;
                    }
                    rfcTableOptions = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("batchSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        batchSize = null;
                        continue;
                    }
                    batchSize = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customRfcReadTableFunctionModule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        customRfcReadTableFunctionModule = null;
                        continue;
                    }
                    customRfcReadTableFunctionModule = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sapDataColumnDelimiter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sapDataColumnDelimiter = null;
                        continue;
                    }
                    sapDataColumnDelimiter = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("partitionOption"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        partitionOption = null;
                        continue;
                    }
                    partitionOption = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("partitionSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    partitionSettings = SapTablePartitionSettings.DeserializeSapTablePartitionSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("queryTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        queryTimeout = null;
                        continue;
                    }
                    queryTimeout = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("additionalColumns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        additionalColumns = null;
                        continue;
                    }
                    additionalColumns = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceRetryCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryCount = null;
                        continue;
                    }
                    sourceRetryCount = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceRetryWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sourceRetryWait = null;
                        continue;
                    }
                    sourceRetryWait = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentConnections = null;
                        continue;
                    }
                    maxConcurrentConnections = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("disableMetricsCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableMetricsCollection = null;
                        continue;
                    }
                    disableMetricsCollection = new Uri(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, new Uri(property.Value.GetString()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SapTableSource(type, sourceRetryCount.Value, sourceRetryWait.Value, maxConcurrentConnections.Value, disableMetricsCollection.Value, additionalProperties, queryTimeout.Value, additionalColumns.Value, rowCount.Value, rowSkips.Value, rfcTableFields.Value, rfcTableOptions.Value, batchSize.Value, customRfcReadTableFunctionModule.Value, sapDataColumnDelimiter.Value, partitionOption.Value, partitionSettings.Value);
        }
    }
}
