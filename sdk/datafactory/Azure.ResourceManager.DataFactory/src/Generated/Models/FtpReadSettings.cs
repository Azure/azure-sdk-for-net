// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Ftp read settings.
    /// Serialized Name: FtpReadSettings
    /// </summary>
    public partial class FtpReadSettings : StoreReadSettings
    {
        /// <summary> Initializes a new instance of FtpReadSettings. </summary>
        public FtpReadSettings()
        {
            StoreReadSettingsType = "FtpReadSettings";
        }

        /// <summary> Initializes a new instance of FtpReadSettings. </summary>
        /// <param name="storeReadSettingsType">
        /// The read setting type.
        /// Serialized Name: StoreReadSettings.type
        /// </param>
        /// <param name="maxConcurrentConnections">
        /// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
        /// Serialized Name: StoreReadSettings.maxConcurrentConnections
        /// </param>
        /// <param name="disableMetricsCollection">
        /// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: StoreReadSettings.disableMetricsCollection
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive">
        /// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.recursive
        /// </param>
        /// <param name="wildcardFolderPath">
        /// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.wildcardFolderPath
        /// </param>
        /// <param name="wildcardFileName">
        /// Ftp wildcardFileName. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.wildcardFileName
        /// </param>
        /// <param name="enablePartitionDiscovery">
        /// Indicates whether to enable partition discovery.
        /// Serialized Name: FtpReadSettings.enablePartitionDiscovery
        /// </param>
        /// <param name="partitionRootPath">
        /// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.partitionRootPath
        /// </param>
        /// <param name="deleteFilesAfterCompletion">
        /// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.deleteFilesAfterCompletion
        /// </param>
        /// <param name="fileListPath">
        /// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.fileListPath
        /// </param>
        /// <param name="useBinaryTransfer">
        /// Specify whether to use binary transfer mode for FTP stores.
        /// Serialized Name: FtpReadSettings.useBinaryTransfer
        /// </param>
        /// <param name="disableChunking">
        /// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.disableChunking
        /// </param>
        internal FtpReadSettings(string storeReadSettingsType, BinaryData maxConcurrentConnections, BinaryData disableMetricsCollection, IDictionary<string, BinaryData> additionalProperties, BinaryData recursive, BinaryData wildcardFolderPath, BinaryData wildcardFileName, bool? enablePartitionDiscovery, BinaryData partitionRootPath, BinaryData deleteFilesAfterCompletion, BinaryData fileListPath, bool? useBinaryTransfer, BinaryData disableChunking) : base(storeReadSettingsType, maxConcurrentConnections, disableMetricsCollection, additionalProperties)
        {
            Recursive = recursive;
            WildcardFolderPath = wildcardFolderPath;
            WildcardFileName = wildcardFileName;
            EnablePartitionDiscovery = enablePartitionDiscovery;
            PartitionRootPath = partitionRootPath;
            DeleteFilesAfterCompletion = deleteFilesAfterCompletion;
            FileListPath = fileListPath;
            UseBinaryTransfer = useBinaryTransfer;
            DisableChunking = disableChunking;
            StoreReadSettingsType = storeReadSettingsType ?? "FtpReadSettings";
        }

        /// <summary>
        /// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.recursive
        /// </summary>
        public BinaryData Recursive { get; set; }
        /// <summary>
        /// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.wildcardFolderPath
        /// </summary>
        public BinaryData WildcardFolderPath { get; set; }
        /// <summary>
        /// Ftp wildcardFileName. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.wildcardFileName
        /// </summary>
        public BinaryData WildcardFileName { get; set; }
        /// <summary>
        /// Indicates whether to enable partition discovery.
        /// Serialized Name: FtpReadSettings.enablePartitionDiscovery
        /// </summary>
        public bool? EnablePartitionDiscovery { get; set; }
        /// <summary>
        /// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.partitionRootPath
        /// </summary>
        public BinaryData PartitionRootPath { get; set; }
        /// <summary>
        /// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.deleteFilesAfterCompletion
        /// </summary>
        public BinaryData DeleteFilesAfterCompletion { get; set; }
        /// <summary>
        /// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
        /// Serialized Name: FtpReadSettings.fileListPath
        /// </summary>
        public BinaryData FileListPath { get; set; }
        /// <summary>
        /// Specify whether to use binary transfer mode for FTP stores.
        /// Serialized Name: FtpReadSettings.useBinaryTransfer
        /// </summary>
        public bool? UseBinaryTransfer { get; set; }
        /// <summary>
        /// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: FtpReadSettings.disableChunking
        /// </summary>
        public BinaryData DisableChunking { get; set; }
    }
}
