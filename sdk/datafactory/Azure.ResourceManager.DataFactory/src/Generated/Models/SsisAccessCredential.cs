// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// SSIS access credential.
    /// Serialized Name: SsisAccessCredential
    /// </summary>
    public partial class SsisAccessCredential
    {
        /// <summary> Initializes a new instance of SsisAccessCredential. </summary>
        /// <param name="domain">
        /// Domain for windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: SsisAccessCredential.domain
        /// </param>
        /// <param name="userName">
        /// UseName for windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: SsisAccessCredential.userName
        /// </param>
        /// <param name="password">
        /// Password for windows authentication.
        /// Serialized Name: SsisAccessCredential.password
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domain"/>, <paramref name="userName"/> or <paramref name="password"/> is null. </exception>
        public SsisAccessCredential(DataFactoryElement<string> domain, DataFactoryElement<string> userName, FactorySecretBaseDefinition password)
        {
            Argument.AssertNotNull(domain, nameof(domain));
            Argument.AssertNotNull(userName, nameof(userName));
            Argument.AssertNotNull(password, nameof(password));

            Domain = domain;
            UserName = userName;
            Password = password;
        }

        /// <summary>
        /// Domain for windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: SsisAccessCredential.domain
        /// </summary>
        public DataFactoryElement<string> Domain { get; set; }
        /// <summary>
        /// UseName for windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: SsisAccessCredential.userName
        /// </summary>
        public DataFactoryElement<string> UserName { get; set; }
        /// <summary>
        /// Password for windows authentication.
        /// Serialized Name: SsisAccessCredential.password
        /// Please note <see cref="FactorySecretBaseDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FactorySecretString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public FactorySecretBaseDefinition Password { get; set; }
    }
}
