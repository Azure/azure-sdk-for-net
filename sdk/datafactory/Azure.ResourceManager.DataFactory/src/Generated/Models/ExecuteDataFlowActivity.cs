// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Execute data flow activity.
    /// Serialized Name: ExecuteDataFlowActivity
    /// </summary>
    public partial class ExecuteDataFlowActivity : ExecutionActivity
    {
        /// <summary> Initializes a new instance of ExecuteDataFlowActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="dataFlow">
        /// Data flow reference.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.dataFlow
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="dataFlow"/> is null. </exception>
        public ExecuteDataFlowActivity(string name, DataFlowReference dataFlow) : base(name)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(dataFlow, nameof(dataFlow));

            DataFlow = dataFlow;
            ActivityType = "ExecuteDataFlow";
        }

        /// <summary> Initializes a new instance of ExecuteDataFlowActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="state">
        /// Activity state. This is an optional property and if not provided, the state will be Active by default.
        /// Serialized Name: Activity.state
        /// </param>
        /// <param name="onInactiveMarkAs">
        /// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
        /// Serialized Name: Activity.onInactiveMarkAs
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName">
        /// Linked service reference.
        /// Serialized Name: ExecutionActivity.linkedServiceName
        /// </param>
        /// <param name="policy">
        /// Activity policy.
        /// Serialized Name: ExecutionActivity.policy
        /// </param>
        /// <param name="dataFlow">
        /// Data flow reference.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.dataFlow
        /// </param>
        /// <param name="staging">
        /// Staging info for execute data flow activity.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.staging
        /// </param>
        /// <param name="integrationRuntime">
        /// The integration runtime reference.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.integrationRuntime
        /// </param>
        /// <param name="compute">
        /// Compute properties for data flow activity.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.compute
        /// </param>
        /// <param name="traceLevel">
        /// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.traceLevel
        /// </param>
        /// <param name="continueOnError">
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.continueOnError
        /// </param>
        /// <param name="runConcurrently">
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.runConcurrently
        /// </param>
        /// <param name="sourceStagingConcurrency">
        /// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.sourceStagingConcurrency
        /// </param>
        internal ExecuteDataFlowActivity(string name, string activityType, string description, ActivityState? state, ActivityOnInactiveMarkA? onInactiveMarkAs, IList<ActivityDependency> dependsOn, IList<ActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, FactoryLinkedServiceReference linkedServiceName, ActivityPolicy policy, DataFlowReference dataFlow, DataFlowStagingInfo staging, IntegrationRuntimeReference integrationRuntime, ExecuteDataFlowActivityTypePropertiesCompute compute, DataFactoryElement<string> traceLevel, DataFactoryElement<bool> continueOnError, DataFactoryElement<bool> runConcurrently, DataFactoryElement<int> sourceStagingConcurrency) : base(name, activityType, description, state, onInactiveMarkAs, dependsOn, userProperties, additionalProperties, linkedServiceName, policy)
        {
            DataFlow = dataFlow;
            Staging = staging;
            IntegrationRuntime = integrationRuntime;
            Compute = compute;
            TraceLevel = traceLevel;
            ContinueOnError = continueOnError;
            RunConcurrently = runConcurrently;
            SourceStagingConcurrency = sourceStagingConcurrency;
            ActivityType = activityType ?? "ExecuteDataFlow";
        }

        /// <summary>
        /// Data flow reference.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.dataFlow
        /// </summary>
        public DataFlowReference DataFlow { get; set; }
        /// <summary>
        /// Staging info for execute data flow activity.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.staging
        /// </summary>
        public DataFlowStagingInfo Staging { get; set; }
        /// <summary>
        /// The integration runtime reference.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.integrationRuntime
        /// </summary>
        public IntegrationRuntimeReference IntegrationRuntime { get; set; }
        /// <summary>
        /// Compute properties for data flow activity.
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.compute
        /// </summary>
        public ExecuteDataFlowActivityTypePropertiesCompute Compute { get; set; }
        /// <summary>
        /// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.traceLevel
        /// </summary>
        public DataFactoryElement<string> TraceLevel { get; set; }
        /// <summary>
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.continueOnError
        /// </summary>
        public DataFactoryElement<bool> ContinueOnError { get; set; }
        /// <summary>
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.runConcurrently
        /// </summary>
        public DataFactoryElement<bool> RunConcurrently { get; set; }
        /// <summary>
        /// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
        /// Serialized Name: ExecuteDataFlowActivity.typeProperties.sourceStagingConcurrency
        /// </summary>
        public DataFactoryElement<int> SourceStagingConcurrency { get; set; }
    }
}
