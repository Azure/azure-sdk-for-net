// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// HDInsight Spark activity.
    /// Serialized Name: HDInsightSparkActivity
    /// </summary>
    public partial class HDInsightSparkActivity : ExecutionActivity
    {
        /// <summary> Initializes a new instance of HDInsightSparkActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="rootPath">
        /// The root path in &apos;sparkJobLinkedService&apos; for all the job’s files. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.rootPath
        /// </param>
        /// <param name="entryFilePath">
        /// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.entryFilePath
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="rootPath"/> or <paramref name="entryFilePath"/> is null. </exception>
        public HDInsightSparkActivity(string name, BinaryData rootPath, BinaryData entryFilePath) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (rootPath == null)
            {
                throw new ArgumentNullException(nameof(rootPath));
            }
            if (entryFilePath == null)
            {
                throw new ArgumentNullException(nameof(entryFilePath));
            }

            RootPath = rootPath;
            EntryFilePath = entryFilePath;
            Arguments = new ChangeTrackingList<BinaryData>();
            SparkConfig = new ChangeTrackingDictionary<string, BinaryData>();
            ActivityType = "HDInsightSpark";
        }

        /// <summary> Initializes a new instance of HDInsightSparkActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName">
        /// Linked service reference.
        /// Serialized Name: ExecutionActivity.linkedServiceName
        /// </param>
        /// <param name="policy">
        /// Activity policy.
        /// Serialized Name: ExecutionActivity.policy
        /// </param>
        /// <param name="rootPath">
        /// The root path in &apos;sparkJobLinkedService&apos; for all the job’s files. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.rootPath
        /// </param>
        /// <param name="entryFilePath">
        /// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.entryFilePath
        /// </param>
        /// <param name="arguments">
        /// The user-specified arguments to HDInsightSparkActivity.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.arguments
        /// </param>
        /// <param name="getDebugInfo">
        /// Debug info option.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.getDebugInfo
        /// </param>
        /// <param name="sparkJobLinkedService">
        /// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.sparkJobLinkedService
        /// </param>
        /// <param name="className">
        /// The application&apos;s Java/Spark main class.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.className
        /// </param>
        /// <param name="proxyUser">
        /// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.proxyUser
        /// </param>
        /// <param name="sparkConfig">
        /// Spark configuration property.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.sparkConfig
        /// </param>
        internal HDInsightSparkActivity(string name, string activityType, string description, IList<ActivityDependency> dependsOn, IList<ActivityUserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, FactoryLinkedServiceReference linkedServiceName, ActivityPolicy policy, BinaryData rootPath, BinaryData entryFilePath, IList<BinaryData> arguments, HDInsightActivityDebugInfoOptionSetting? getDebugInfo, FactoryLinkedServiceReference sparkJobLinkedService, string className, BinaryData proxyUser, IDictionary<string, BinaryData> sparkConfig) : base(name, activityType, description, dependsOn, userProperties, additionalProperties, linkedServiceName, policy)
        {
            RootPath = rootPath;
            EntryFilePath = entryFilePath;
            Arguments = arguments;
            GetDebugInfo = getDebugInfo;
            SparkJobLinkedService = sparkJobLinkedService;
            ClassName = className;
            ProxyUser = proxyUser;
            SparkConfig = sparkConfig;
            ActivityType = activityType ?? "HDInsightSpark";
        }

        /// <summary>
        /// The root path in &apos;sparkJobLinkedService&apos; for all the job’s files. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.rootPath
        /// </summary>
        public BinaryData RootPath { get; set; }
        /// <summary>
        /// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.entryFilePath
        /// </summary>
        public BinaryData EntryFilePath { get; set; }
        /// <summary>
        /// The user-specified arguments to HDInsightSparkActivity.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.arguments
        /// </summary>
        public IList<BinaryData> Arguments { get; }
        /// <summary>
        /// Debug info option.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.getDebugInfo
        /// </summary>
        public HDInsightActivityDebugInfoOptionSetting? GetDebugInfo { get; set; }
        /// <summary>
        /// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.sparkJobLinkedService
        /// </summary>
        public FactoryLinkedServiceReference SparkJobLinkedService { get; set; }
        /// <summary>
        /// The application&apos;s Java/Spark main class.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.className
        /// </summary>
        public string ClassName { get; set; }
        /// <summary>
        /// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
        /// Serialized Name: HDInsightSparkActivity.typeProperties.proxyUser
        /// </summary>
        public BinaryData ProxyUser { get; set; }
        /// <summary>
        /// Spark configuration property.
        /// Serialized Name: HDInsightSparkActivity.typeProperties.sparkConfig
        /// </summary>
        public IDictionary<string, BinaryData> SparkConfig { get; }
    }
}
