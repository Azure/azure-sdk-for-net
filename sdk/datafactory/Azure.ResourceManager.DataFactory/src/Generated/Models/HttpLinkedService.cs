// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Linked service for an HTTP source.
    /// Serialized Name: HttpLinkedService
    /// </summary>
    public partial class HttpLinkedService : FactoryLinkedServiceDefinition
    {
        /// <summary> Initializes a new instance of HttpLinkedService. </summary>
        /// <param name="uri">
        /// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.url
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        public HttpLinkedService(BinaryData uri)
        {
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }

            Uri = uri;
            LinkedServiceType = "HttpServer";
        }

        /// <summary> Initializes a new instance of HttpLinkedService. </summary>
        /// <param name="linkedServiceType">
        /// Type of linked service.
        /// Serialized Name: LinkedService.type
        /// </param>
        /// <param name="connectVia">
        /// The integration runtime reference.
        /// Serialized Name: LinkedService.connectVia
        /// </param>
        /// <param name="description">
        /// Linked service description.
        /// Serialized Name: LinkedService.description
        /// </param>
        /// <param name="parameters">
        /// Parameters for linked service.
        /// Serialized Name: LinkedService.parameters
        /// </param>
        /// <param name="annotations">
        /// List of tags that can be used for describing the linked service.
        /// Serialized Name: LinkedService.annotations
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="uri">
        /// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.url
        /// </param>
        /// <param name="authenticationType">
        /// The authentication type to be used to connect to the HTTP server.
        /// Serialized Name: HttpLinkedService.typeProperties.authenticationType
        /// </param>
        /// <param name="userName">
        /// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.userName
        /// </param>
        /// <param name="password">
        /// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
        /// Serialized Name: HttpLinkedService.typeProperties.password
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecureString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </param>
        /// <param name="authHeaders">
        /// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
        /// Serialized Name: HttpLinkedService.typeProperties.authHeaders
        /// </param>
        /// <param name="embeddedCertData">
        /// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.embeddedCertData
        /// </param>
        /// <param name="certThumbprint">
        /// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.certThumbprint
        /// </param>
        /// <param name="encryptedCredential">
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.encryptedCredential
        /// </param>
        /// <param name="enableServerCertificateValidation">
        /// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: HttpLinkedService.typeProperties.enableServerCertificateValidation
        /// </param>
        internal HttpLinkedService(string linkedServiceType, IntegrationRuntimeReference connectVia, string description, IDictionary<string, ParameterSpecification> parameters, IList<BinaryData> annotations, IDictionary<string, BinaryData> additionalProperties, BinaryData uri, HttpAuthenticationType? authenticationType, BinaryData userName, SecretBase password, BinaryData authHeaders, BinaryData embeddedCertData, BinaryData certThumbprint, BinaryData encryptedCredential, BinaryData enableServerCertificateValidation) : base(linkedServiceType, connectVia, description, parameters, annotations, additionalProperties)
        {
            Uri = uri;
            AuthenticationType = authenticationType;
            UserName = userName;
            Password = password;
            AuthHeaders = authHeaders;
            EmbeddedCertData = embeddedCertData;
            CertThumbprint = certThumbprint;
            EncryptedCredential = encryptedCredential;
            EnableServerCertificateValidation = enableServerCertificateValidation;
            LinkedServiceType = linkedServiceType ?? "HttpServer";
        }

        /// <summary>
        /// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.url
        /// </summary>
        public BinaryData Uri { get; set; }
        /// <summary>
        /// The authentication type to be used to connect to the HTTP server.
        /// Serialized Name: HttpLinkedService.typeProperties.authenticationType
        /// </summary>
        public HttpAuthenticationType? AuthenticationType { get; set; }
        /// <summary>
        /// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.userName
        /// </summary>
        public BinaryData UserName { get; set; }
        /// <summary>
        /// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
        /// Serialized Name: HttpLinkedService.typeProperties.password
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecureString"/> and <see cref="AzureKeyVaultSecretReference"/>.
        /// </summary>
        public SecretBase Password { get; set; }
        /// <summary>
        /// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
        /// Serialized Name: HttpLinkedService.typeProperties.authHeaders
        /// </summary>
        public BinaryData AuthHeaders { get; set; }
        /// <summary>
        /// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.embeddedCertData
        /// </summary>
        public BinaryData EmbeddedCertData { get; set; }
        /// <summary>
        /// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.certThumbprint
        /// </summary>
        public BinaryData CertThumbprint { get; set; }
        /// <summary>
        /// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
        /// Serialized Name: HttpLinkedService.typeProperties.encryptedCredential
        /// </summary>
        public BinaryData EncryptedCredential { get; set; }
        /// <summary>
        /// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
        /// Serialized Name: HttpLinkedService.typeProperties.enableServerCertificateValidation
        /// </summary>
        public BinaryData EnableServerCertificateValidation { get; set; }
    }
}
