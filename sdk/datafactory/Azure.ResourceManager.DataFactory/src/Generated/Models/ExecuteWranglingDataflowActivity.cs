// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataFactory.Models
{
    /// <summary>
    /// Execute power query activity.
    /// Serialized Name: ExecuteWranglingDataflowActivity
    /// </summary>
    public partial class ExecuteWranglingDataflowActivity : PipelineActivityDefinition
    {
        /// <summary> Initializes a new instance of ExecuteWranglingDataflowActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="dataFlow">
        /// Data flow reference.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.dataFlow
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="dataFlow"/> is null. </exception>
        public ExecuteWranglingDataflowActivity(string name, DataFlowReference dataFlow) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (dataFlow == null)
            {
                throw new ArgumentNullException(nameof(dataFlow));
            }

            DataFlow = dataFlow;
            Sinks = new ChangeTrackingDictionary<string, PowerQuerySink>();
            Queries = new ChangeTrackingList<PowerQuerySinkMapping>();
            ActivityType = "ExecuteWranglingDataflow";
        }

        /// <summary> Initializes a new instance of ExecuteWranglingDataflowActivity. </summary>
        /// <param name="name">
        /// Activity name.
        /// Serialized Name: Activity.name
        /// </param>
        /// <param name="activityType">
        /// Type of activity.
        /// Serialized Name: Activity.type
        /// </param>
        /// <param name="description">
        /// Activity description.
        /// Serialized Name: Activity.description
        /// </param>
        /// <param name="dependsOn">
        /// Activity depends on condition.
        /// Serialized Name: Activity.dependsOn
        /// </param>
        /// <param name="userProperties">
        /// Activity user properties.
        /// Serialized Name: Activity.userProperties
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="policy">
        /// Activity policy.
        /// Serialized Name: ExecuteWranglingDataflowActivity.policy
        /// </param>
        /// <param name="dataFlow">
        /// Data flow reference.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.dataFlow
        /// </param>
        /// <param name="staging">
        /// Staging info for execute data flow activity.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.staging
        /// </param>
        /// <param name="integrationRuntime">
        /// The integration runtime reference.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.integrationRuntime
        /// </param>
        /// <param name="compute">
        /// Compute properties for data flow activity.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.compute
        /// </param>
        /// <param name="traceLevel">
        /// Trace level setting used for data flow monitoring output. Supported values are: &apos;coarse&apos;, &apos;fine&apos;, and &apos;none&apos;. Type: string (or Expression with resultType string)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.traceLevel
        /// </param>
        /// <param name="continueOnError">
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.continueOnError
        /// </param>
        /// <param name="runConcurrently">
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.runConcurrently
        /// </param>
        /// <param name="sourceStagingConcurrency">
        /// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.sourceStagingConcurrency
        /// </param>
        /// <param name="sinks">
        /// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.sinks
        /// </param>
        /// <param name="queries">
        /// List of mapping for Power Query mashup query to sink dataset(s).
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.queries
        /// </param>
        internal ExecuteWranglingDataflowActivity(string name, string activityType, string description, IList<PipelineActivityDependencyInfo> dependsOn, IList<UserProperty> userProperties, IDictionary<string, BinaryData> additionalProperties, PipelineActivityPolicyInfo policy, DataFlowReference dataFlow, DataFlowStagingInfo staging, IntegrationRuntimeReference integrationRuntime, ExecuteDataFlowActivityTypePropertiesCompute compute, BinaryData traceLevel, BinaryData continueOnError, BinaryData runConcurrently, BinaryData sourceStagingConcurrency, IDictionary<string, PowerQuerySink> sinks, IList<PowerQuerySinkMapping> queries) : base(name, activityType, description, dependsOn, userProperties, additionalProperties)
        {
            Policy = policy;
            DataFlow = dataFlow;
            Staging = staging;
            IntegrationRuntime = integrationRuntime;
            Compute = compute;
            TraceLevel = traceLevel;
            ContinueOnError = continueOnError;
            RunConcurrently = runConcurrently;
            SourceStagingConcurrency = sourceStagingConcurrency;
            Sinks = sinks;
            Queries = queries;
            ActivityType = activityType ?? "ExecuteWranglingDataflow";
        }

        /// <summary>
        /// Activity policy.
        /// Serialized Name: ExecuteWranglingDataflowActivity.policy
        /// </summary>
        public PipelineActivityPolicyInfo Policy { get; set; }
        /// <summary>
        /// Data flow reference.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.dataFlow
        /// </summary>
        public DataFlowReference DataFlow { get; set; }
        /// <summary>
        /// Staging info for execute data flow activity.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.staging
        /// </summary>
        public DataFlowStagingInfo Staging { get; set; }
        /// <summary>
        /// The integration runtime reference.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.integrationRuntime
        /// </summary>
        public IntegrationRuntimeReference IntegrationRuntime { get; set; }
        /// <summary>
        /// Compute properties for data flow activity.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.compute
        /// </summary>
        public ExecuteDataFlowActivityTypePropertiesCompute Compute { get; set; }
        /// <summary>
        /// Trace level setting used for data flow monitoring output. Supported values are: &apos;coarse&apos;, &apos;fine&apos;, and &apos;none&apos;. Type: string (or Expression with resultType string)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.traceLevel
        /// </summary>
        public BinaryData TraceLevel { get; set; }
        /// <summary>
        /// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.continueOnError
        /// </summary>
        public BinaryData ContinueOnError { get; set; }
        /// <summary>
        /// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.runConcurrently
        /// </summary>
        public BinaryData RunConcurrently { get; set; }
        /// <summary>
        /// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.sourceStagingConcurrency
        /// </summary>
        public BinaryData SourceStagingConcurrency { get; set; }
        /// <summary>
        /// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.sinks
        /// </summary>
        public IDictionary<string, PowerQuerySink> Sinks { get; }
        /// <summary>
        /// List of mapping for Power Query mashup query to sink dataset(s).
        /// Serialized Name: ExecuteWranglingDataflowActivity.typeProperties.queries
        /// </summary>
        public IList<PowerQuerySinkMapping> Queries { get; }
    }
}
