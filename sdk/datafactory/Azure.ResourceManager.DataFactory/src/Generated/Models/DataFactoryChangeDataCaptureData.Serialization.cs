// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.DataFactory.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataFactory
{
    public partial class DataFactoryChangeDataCaptureData : IUtf8JsonSerializable, IModelJsonSerializable<DataFactoryChangeDataCaptureData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DataFactoryChangeDataCaptureData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DataFactoryChangeDataCaptureData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Folder))
            {
                writer.WritePropertyName("folder"u8);
                if (Folder is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ChangeDataCaptureFolder>)Folder).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("sourceConnectionsInfo"u8);
            writer.WriteStartArray();
            foreach (var item in SourceConnectionsInfo)
            {
                if (item is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<MapperSourceConnectionsInfo>)item).Serialize(writer, options);
                }
            }
            writer.WriteEndArray();
            writer.WritePropertyName("targetConnectionsInfo"u8);
            writer.WriteStartArray();
            foreach (var item in TargetConnectionsInfo)
            {
                if (item is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<MapperTargetConnectionsInfo>)item).Serialize(writer, options);
                }
            }
            writer.WriteEndArray();
            writer.WritePropertyName("policy"u8);
            if (Policy is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<MapperPolicy>)Policy).Serialize(writer, options);
            }
            if (Optional.IsDefined(AllowVnetOverride))
            {
                writer.WritePropertyName("allowVNetOverride"u8);
                writer.WriteBooleanValue(AllowVnetOverride.Value);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            writer.WriteEndObject();
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static DataFactoryChangeDataCaptureData DeserializeDataFactoryChangeDataCaptureData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ETag> etag = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<ChangeDataCaptureFolder> folder = default;
            Optional<string> description = default;
            IList<MapperSourceConnectionsInfo> sourceConnectionsInfo = default;
            IList<MapperTargetConnectionsInfo> targetConnectionsInfo = default;
            MapperPolicy policy = default;
            Optional<bool> allowVnetOverride = default;
            Optional<string> status = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("folder"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            folder = ChangeDataCaptureFolder.DeserializeChangeDataCaptureFolder(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sourceConnectionsInfo"u8))
                        {
                            List<MapperSourceConnectionsInfo> array = new List<MapperSourceConnectionsInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MapperSourceConnectionsInfo.DeserializeMapperSourceConnectionsInfo(item));
                            }
                            sourceConnectionsInfo = array;
                            continue;
                        }
                        if (property0.NameEquals("targetConnectionsInfo"u8))
                        {
                            List<MapperTargetConnectionsInfo> array = new List<MapperTargetConnectionsInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MapperTargetConnectionsInfo.DeserializeMapperTargetConnectionsInfo(item));
                            }
                            targetConnectionsInfo = array;
                            continue;
                        }
                        if (property0.NameEquals("policy"u8))
                        {
                            policy = MapperPolicy.DeserializeMapperPolicy(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("allowVNetOverride"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            allowVnetOverride = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            status = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new DataFactoryChangeDataCaptureData(id, name, type, systemData.Value, folder.Value, description.Value, sourceConnectionsInfo, targetConnectionsInfo, policy, Optional.ToNullable(allowVnetOverride), status.Value, Optional.ToNullable(etag), additionalProperties);
        }

        DataFactoryChangeDataCaptureData IModelJsonSerializable<DataFactoryChangeDataCaptureData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDataFactoryChangeDataCaptureData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DataFactoryChangeDataCaptureData>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DataFactoryChangeDataCaptureData IModelSerializable<DataFactoryChangeDataCaptureData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDataFactoryChangeDataCaptureData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="DataFactoryChangeDataCaptureData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="DataFactoryChangeDataCaptureData"/> to convert. </param>
        public static implicit operator RequestContent(DataFactoryChangeDataCaptureData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="DataFactoryChangeDataCaptureData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator DataFactoryChangeDataCaptureData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDataFactoryChangeDataCaptureData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
