// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataFactory.Models;

namespace Azure.ResourceManager.DataFactory
{
    public partial class Sample_FactoryPipelineResource
    {
        // Pipelines_Create
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PipelinesCreate()
        {
            // Generated from example definition: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Create.json
            // this example is just showing the usage of "Pipelines_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FactoryPipelineResource created on azure
            // for more information of creating FactoryPipelineResource, please refer to the document of FactoryPipelineResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string factoryName = "exampleFactoryName";
            string pipelineName = "examplePipeline";
            ResourceIdentifier factoryPipelineResourceId = FactoryPipelineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, factoryName, pipelineName);
            FactoryPipelineResource factoryPipeline = client.GetFactoryPipelineResource(factoryPipelineResourceId);

            // invoke the operation
            FactoryPipelineData data = new FactoryPipelineData()
            {
                Activities =
{
new PipelineActivity("ExampleForeachActivity")
{
ActivityType = "ForEach",
}
},
                Parameters =
{
["JobId"] = new EntityParameterSpecification(EntityParameterType.String),
["OutputBlobNameList"] = new EntityParameterSpecification(EntityParameterType.Array),
},
                Variables =
{
["TestVariableArray"] = new PipelineVariableSpecification(PipelineVariableType.Array),
},
                RunDimensions =
{
["JobId"] = BinaryData.FromObjectAsJson(new
{
type = "Expression",
value = "@pipeline().parameters.JobId"}),
},
                ElapsedTimeMetricDuration = XmlConvert.ToTimeSpan("0.00:10:00"),
            };
            ArmOperation<FactoryPipelineResource> lro = await factoryPipeline.UpdateAsync(WaitUntil.Completed, data);
            FactoryPipelineResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FactoryPipelineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Pipelines_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PipelinesUpdate()
        {
            // Generated from example definition: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Update.json
            // this example is just showing the usage of "Pipelines_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FactoryPipelineResource created on azure
            // for more information of creating FactoryPipelineResource, please refer to the document of FactoryPipelineResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string factoryName = "exampleFactoryName";
            string pipelineName = "examplePipeline";
            ResourceIdentifier factoryPipelineResourceId = FactoryPipelineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, factoryName, pipelineName);
            FactoryPipelineResource factoryPipeline = client.GetFactoryPipelineResource(factoryPipelineResourceId);

            // invoke the operation
            FactoryPipelineData data = new FactoryPipelineData()
            {
                Description = "Example description",
                Activities =
{
new PipelineActivity("ExampleForeachActivity")
{
ActivityType = "ForEach",
}
},
                Parameters =
{
["OutputBlobNameList"] = new EntityParameterSpecification(EntityParameterType.Array),
},
                ElapsedTimeMetricDuration = XmlConvert.ToTimeSpan("0.00:10:00"),
            };
            ArmOperation<FactoryPipelineResource> lro = await factoryPipeline.UpdateAsync(WaitUntil.Completed, data);
            FactoryPipelineResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FactoryPipelineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Pipelines_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_PipelinesGet()
        {
            // Generated from example definition: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Get.json
            // this example is just showing the usage of "Pipelines_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FactoryPipelineResource created on azure
            // for more information of creating FactoryPipelineResource, please refer to the document of FactoryPipelineResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string factoryName = "exampleFactoryName";
            string pipelineName = "examplePipeline";
            ResourceIdentifier factoryPipelineResourceId = FactoryPipelineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, factoryName, pipelineName);
            FactoryPipelineResource factoryPipeline = client.GetFactoryPipelineResource(factoryPipelineResourceId);

            // invoke the operation
            FactoryPipelineResource result = await factoryPipeline.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FactoryPipelineData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Pipelines_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_PipelinesDelete()
        {
            // Generated from example definition: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_Delete.json
            // this example is just showing the usage of "Pipelines_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FactoryPipelineResource created on azure
            // for more information of creating FactoryPipelineResource, please refer to the document of FactoryPipelineResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string factoryName = "exampleFactoryName";
            string pipelineName = "examplePipeline";
            ResourceIdentifier factoryPipelineResourceId = FactoryPipelineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, factoryName, pipelineName);
            FactoryPipelineResource factoryPipeline = client.GetFactoryPipelineResource(factoryPipelineResourceId);

            // invoke the operation
            await factoryPipeline.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Pipelines_CreateRun
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateRun_PipelinesCreateRun()
        {
            // Generated from example definition: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/Pipelines_CreateRun.json
            // this example is just showing the usage of "Pipelines_CreateRun" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FactoryPipelineResource created on azure
            // for more information of creating FactoryPipelineResource, please refer to the document of FactoryPipelineResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string factoryName = "exampleFactoryName";
            string pipelineName = "examplePipeline";
            ResourceIdentifier factoryPipelineResourceId = FactoryPipelineResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, factoryName, pipelineName);
            FactoryPipelineResource factoryPipeline = client.GetFactoryPipelineResource(factoryPipelineResourceId);

            // invoke the operation
            IDictionary<string, BinaryData> parameterValueSpecification = new System.Collections.Generic.IDictionary<string, BinaryData>()
            {
                ["OutputBlobNameList"] = BinaryData.FromObjectAsJson(new[] { "exampleoutput.csv" }),
            };
            string referencePipelineRunId = null;
            PipelineCreateRunResult result = await factoryPipeline.CreateRunAsync(parameterValueSpecification: parameterValueSpecification, referencePipelineRunId: referencePipelineRunId);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
