// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure Batch linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureBatch")]
    [Rest.Serialization.JsonTransformation]
    public partial class AzureBatchLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureBatchLinkedService class.
        /// </summary>
        public AzureBatchLinkedService()
        {
            LinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBatchLinkedService class.
        /// </summary>
        /// <param name="accountName">The Azure Batch account name. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="batchUri">The Azure Batch URI. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="poolName">The Azure Batch pool name. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="linkedServiceName">The Azure Storage linked service
        /// reference.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="accessKey">The Azure Batch account access key.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public AzureBatchLinkedService(object accountName, object batchUri, object poolName, LinkedServiceReference linkedServiceName, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), SecretBase accessKey = default(SecretBase), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            AccountName = accountName;
            AccessKey = accessKey;
            BatchUri = batchUri;
            PoolName = poolName;
            LinkedServiceName = linkedServiceName;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Azure Batch account name. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accountName")]
        public object AccountName { get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch account access key.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accessKey")]
        public SecretBase AccessKey { get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch URI. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.batchUri")]
        public object BatchUri { get; set; }

        /// <summary>
        /// Gets or sets the Azure Batch pool name. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.poolName")]
        public object PoolName { get; set; }

        /// <summary>
        /// Gets or sets the Azure Storage linked service reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.linkedServiceName")]
        public LinkedServiceReference LinkedServiceName { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (AccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountName");
            }
            if (BatchUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BatchUri");
            }
            if (PoolName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PoolName");
            }
            if (LinkedServiceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LinkedServiceName");
            }
            if (LinkedServiceName != null)
            {
                LinkedServiceName.Validate();
            }
        }
    }
}
