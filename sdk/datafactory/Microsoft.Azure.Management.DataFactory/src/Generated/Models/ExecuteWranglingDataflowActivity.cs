// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Execute power query activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ExecuteWranglingDataflow")]
    [Rest.Serialization.JsonTransformation]
    public partial class ExecuteWranglingDataflowActivity : Activity
    {
        /// <summary>
        /// Initializes a new instance of the ExecuteWranglingDataflowActivity
        /// class.
        /// </summary>
        public ExecuteWranglingDataflowActivity()
        {
            DataFlow = new DataFlowReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExecuteWranglingDataflowActivity
        /// class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="dataFlow">Data flow reference.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        /// <param name="staging">Staging info for execute data flow
        /// activity.</param>
        /// <param name="integrationRuntime">The integration runtime
        /// reference.</param>
        /// <param name="compute">Compute properties for data flow
        /// activity.</param>
        /// <param name="traceLevel">Trace level setting used for data flow
        /// monitoring output. Supported values are: 'coarse', 'fine', and
        /// 'none'. Type: string (or Expression with resultType string)</param>
        /// <param name="continueOnError">Continue on error setting used for
        /// data flow execution. Enables processing to continue if a sink
        /// fails. Type: boolean (or Expression with resultType
        /// boolean)</param>
        /// <param name="runConcurrently">Concurrent run setting used for data
        /// flow execution. Allows sinks with the same save order to be
        /// processed concurrently. Type: boolean (or Expression with
        /// resultType boolean)</param>
        /// <param name="sourceStagingConcurrency">Specify number of parallel
        /// staging for sources applicable to the sink. Type: integer (or
        /// Expression with resultType integer)</param>
        /// <param name="sinks">(Deprecated. Please use Queries). List of Power
        /// Query activity sinks mapped to a queryName.</param>
        /// <param name="queries">List of mapping for Power Query mashup query
        /// to sink dataset(s).</param>
        /// <param name="policy">Activity policy.</param>
        public ExecuteWranglingDataflowActivity(string name, DataFlowReference dataFlow, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>), DataFlowStagingInfo staging = default(DataFlowStagingInfo), IntegrationRuntimeReference integrationRuntime = default(IntegrationRuntimeReference), ExecuteDataFlowActivityTypePropertiesCompute compute = default(ExecuteDataFlowActivityTypePropertiesCompute), object traceLevel = default(object), object continueOnError = default(object), object runConcurrently = default(object), object sourceStagingConcurrency = default(object), IDictionary<string, PowerQuerySink> sinks = default(IDictionary<string, PowerQuerySink>), IList<PowerQuerySinkMapping> queries = default(IList<PowerQuerySinkMapping>), ActivityPolicy policy = default(ActivityPolicy))
            : base(name, additionalProperties, description, dependsOn, userProperties)
        {
            DataFlow = dataFlow;
            Staging = staging;
            IntegrationRuntime = integrationRuntime;
            Compute = compute;
            TraceLevel = traceLevel;
            ContinueOnError = continueOnError;
            RunConcurrently = runConcurrently;
            SourceStagingConcurrency = sourceStagingConcurrency;
            Sinks = sinks;
            Queries = queries;
            Policy = policy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets data flow reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.dataFlow")]
        public DataFlowReference DataFlow { get; set; }

        /// <summary>
        /// Gets or sets staging info for execute data flow activity.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.staging")]
        public DataFlowStagingInfo Staging { get; set; }

        /// <summary>
        /// Gets or sets the integration runtime reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.integrationRuntime")]
        public IntegrationRuntimeReference IntegrationRuntime { get; set; }

        /// <summary>
        /// Gets or sets compute properties for data flow activity.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.compute")]
        public ExecuteDataFlowActivityTypePropertiesCompute Compute { get; set; }

        /// <summary>
        /// Gets or sets trace level setting used for data flow monitoring
        /// output. Supported values are: 'coarse', 'fine', and 'none'. Type:
        /// string (or Expression with resultType string)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.traceLevel")]
        public object TraceLevel { get; set; }

        /// <summary>
        /// Gets or sets continue on error setting used for data flow
        /// execution. Enables processing to continue if a sink fails. Type:
        /// boolean (or Expression with resultType boolean)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.continueOnError")]
        public object ContinueOnError { get; set; }

        /// <summary>
        /// Gets or sets concurrent run setting used for data flow execution.
        /// Allows sinks with the same save order to be processed concurrently.
        /// Type: boolean (or Expression with resultType boolean)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.runConcurrently")]
        public object RunConcurrently { get; set; }

        /// <summary>
        /// Gets or sets specify number of parallel staging for sources
        /// applicable to the sink. Type: integer (or Expression with
        /// resultType integer)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sourceStagingConcurrency")]
        public object SourceStagingConcurrency { get; set; }

        /// <summary>
        /// Gets or sets (Deprecated. Please use Queries). List of Power Query
        /// activity sinks mapped to a queryName.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sinks")]
        public IDictionary<string, PowerQuerySink> Sinks { get; set; }

        /// <summary>
        /// Gets or sets list of mapping for Power Query mashup query to sink
        /// dataset(s).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.queries")]
        public IList<PowerQuerySinkMapping> Queries { get; set; }

        /// <summary>
        /// Gets or sets activity policy.
        /// </summary>
        [JsonProperty(PropertyName = "policy")]
        public ActivityPolicy Policy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DataFlow == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataFlow");
            }
            if (DataFlow != null)
            {
                DataFlow.Validate();
            }
            if (Staging != null)
            {
                Staging.Validate();
            }
            if (IntegrationRuntime != null)
            {
                IntegrationRuntime.Validate();
            }
            if (Sinks != null)
            {
                foreach (var valueElement in Sinks.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (Policy != null)
            {
                Policy.Validate();
            }
        }
    }
}
