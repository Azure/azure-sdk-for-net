// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Connector write settings.
    /// </summary>
    public partial class ConnectorWriteSetting
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorWriteSetting class.
        /// </summary>
        public ConnectorWriteSetting()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectorWriteSetting class.
        /// </summary>
        /// <param name="type">The write setting type.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="maxConcurrentConnections">The maximum concurrent
        /// connection count for the source data store. Type: integer (or
        /// Expression with resultType integer).</param>
        /// <param name="copyBehavior">The type of copy behavior for copy
        /// sink.</param>
        public ConnectorWriteSetting(string type, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), object maxConcurrentConnections = default(object), object copyBehavior = default(object))
        {
            AdditionalProperties = additionalProperties;
            Type = type;
            MaxConcurrentConnections = maxConcurrentConnections;
            CopyBehavior = copyBehavior;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets the write setting type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the maximum concurrent connection count for the source
        /// data store. Type: integer (or Expression with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentConnections")]
        public object MaxConcurrentConnections { get; set; }

        /// <summary>
        /// Gets or sets the type of copy behavior for copy sink.
        /// </summary>
        [JsonProperty(PropertyName = "copyBehavior")]
        public object CopyBehavior { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
