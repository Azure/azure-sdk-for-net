// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This activity will fail within its own scope and output a custom error
    /// message and error code. The error message and code can provided either
    /// as a string literal or as an expression that can be evaluated to a
    /// string at runtime. The activity scope can be the whole pipeline or a
    /// control activity (e.g. foreach, switch, until), if the fail activity is
    /// contained in it.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Fail")]
    [Rest.Serialization.JsonTransformation]
    public partial class FailActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the FailActivity class.
        /// </summary>
        public FailActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FailActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="message">The error message that surfaced in the Fail
        /// activity. It can be dynamic content that's evaluated to a non
        /// empty/blank string at runtime. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="errorCode">The error code that categorizes the error
        /// type of the Fail activity. It can be dynamic content that's
        /// evaluated to a non empty/blank string at runtime. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        public FailActivity(string name, object message, object errorCode, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>))
            : base(name, additionalProperties, description, dependsOn, userProperties)
        {
            Message = message;
            ErrorCode = errorCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the error message that surfaced in the Fail activity.
        /// It can be dynamic content that's evaluated to a non empty/blank
        /// string at runtime. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.message")]
        public object Message { get; set; }

        /// <summary>
        /// Gets or sets the error code that categorizes the error type of the
        /// Fail activity. It can be dynamic content that's evaluated to a non
        /// empty/blank string at runtime. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.errorCode")]
        public object ErrorCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (ErrorCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ErrorCode");
            }
        }
    }
}
