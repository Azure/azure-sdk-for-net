// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Linked service for AppFigures.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AppFigures")]
    [Rest.Serialization.JsonTransformation]
    public partial class AppFiguresLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AppFiguresLinkedService class.
        /// </summary>
        public AppFiguresLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppFiguresLinkedService class.
        /// </summary>
        /// <param name="userName">The username of the Appfigures
        /// source.</param>
        /// <param name="password">The password of the AppFigures
        /// source.</param>
        /// <param name="clientKey">The client key for the AppFigures
        /// source.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        public AppFiguresLinkedService(object userName, SecretBase password, SecretBase clientKey, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            UserName = userName;
            Password = password;
            ClientKey = clientKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the username of the Appfigures source.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.userName")]
        public object UserName { get; set; }

        /// <summary>
        /// Gets or sets the password of the AppFigures source.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password { get; set; }

        /// <summary>
        /// Gets or sets the client key for the AppFigures source.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientKey")]
        public SecretBase ClientKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (ClientKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientKey");
            }
        }
    }
}
