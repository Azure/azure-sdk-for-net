// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A copy activity source for SAP Table source.
    /// </summary>
    public partial class SapTableSource : TabularSource
    {
        /// <summary>
        /// Initializes a new instance of the SapTableSource class.
        /// </summary>
        public SapTableSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SapTableSource class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="sourceRetryCount">Source retry count. Type: integer
        /// (or Expression with resultType integer).</param>
        /// <param name="sourceRetryWait">Source retry wait. Type: string (or
        /// Expression with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).</param>
        /// <param name="maxConcurrentConnections">The maximum concurrent
        /// connection count for the source data store. Type: integer (or
        /// Expression with resultType integer).</param>
        /// <param name="queryTimeout">Query timeout. Type: string (or
        /// Expression with resultType string), pattern:
        /// ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).</param>
        /// <param name="additionalColumns">Specifies the additional columns to
        /// be added to source data. Type: array of objects (or Expression with
        /// resultType array of objects).</param>
        /// <param name="rowCount">The number of rows to be retrieved. Type:
        /// integer(or Expression with resultType integer).</param>
        /// <param name="rowSkips">The number of rows that will be skipped.
        /// Type: integer (or Expression with resultType integer).</param>
        /// <param name="rfcTableFields">The fields of the SAP table that will
        /// be retrieved. For example, column0, column1. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="rfcTableOptions">The options for the filtering of the
        /// SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="batchSize">Specifies the maximum number of rows that
        /// will be retrieved at a time when retrieving data from SAP Table.
        /// Type: integer (or Expression with resultType integer).</param>
        /// <param name="customRfcReadTableFunctionModule">Specifies the custom
        /// RFC function module that will be used to read data from SAP Table.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="sapDataColumnDelimiter">The single character that will
        /// be used as delimiter passed to SAP RFC as well as splitting the
        /// output data retrieved. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="partitionOption">The partition mechanism that will be
        /// used for SAP table read in parallel. Possible values include:
        /// "None", "PartitionOnInt", "PartitionOnCalendarYear",
        /// "PartitionOnCalendarMonth", "PartitionOnCalendarDate",
        /// "PartitionOnTime".</param>
        /// <param name="partitionSettings">The settings that will be leveraged
        /// for SAP table source partitioning.</param>
        public SapTableSource(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), object sourceRetryCount = default(object), object sourceRetryWait = default(object), object maxConcurrentConnections = default(object), object queryTimeout = default(object), IList<AdditionalColumns> additionalColumns = default(IList<AdditionalColumns>), object rowCount = default(object), object rowSkips = default(object), object rfcTableFields = default(object), object rfcTableOptions = default(object), object batchSize = default(object), object customRfcReadTableFunctionModule = default(object), object sapDataColumnDelimiter = default(object), object partitionOption = default(object), SapTablePartitionSettings partitionSettings = default(SapTablePartitionSettings))
            : base(additionalProperties, sourceRetryCount, sourceRetryWait, maxConcurrentConnections, queryTimeout, additionalColumns)
        {
            RowCount = rowCount;
            RowSkips = rowSkips;
            RfcTableFields = rfcTableFields;
            RfcTableOptions = rfcTableOptions;
            BatchSize = batchSize;
            CustomRfcReadTableFunctionModule = customRfcReadTableFunctionModule;
            SapDataColumnDelimiter = sapDataColumnDelimiter;
            PartitionOption = partitionOption;
            PartitionSettings = partitionSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of rows to be retrieved. Type: integer(or
        /// Expression with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "rowCount")]
        public object RowCount { get; set; }

        /// <summary>
        /// Gets or sets the number of rows that will be skipped. Type: integer
        /// (or Expression with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "rowSkips")]
        public object RowSkips { get; set; }

        /// <summary>
        /// Gets or sets the fields of the SAP table that will be retrieved.
        /// For example, column0, column1. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "rfcTableFields")]
        public object RfcTableFields { get; set; }

        /// <summary>
        /// Gets or sets the options for the filtering of the SAP Table. For
        /// example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "rfcTableOptions")]
        public object RfcTableOptions { get; set; }

        /// <summary>
        /// Gets or sets specifies the maximum number of rows that will be
        /// retrieved at a time when retrieving data from SAP Table. Type:
        /// integer (or Expression with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "batchSize")]
        public object BatchSize { get; set; }

        /// <summary>
        /// Gets or sets specifies the custom RFC function module that will be
        /// used to read data from SAP Table. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "customRfcReadTableFunctionModule")]
        public object CustomRfcReadTableFunctionModule { get; set; }

        /// <summary>
        /// Gets or sets the single character that will be used as delimiter
        /// passed to SAP RFC as well as splitting the output data retrieved.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "sapDataColumnDelimiter")]
        public object SapDataColumnDelimiter { get; set; }

        /// <summary>
        /// Gets or sets the partition mechanism that will be used for SAP
        /// table read in parallel. Possible values include: "None",
        /// "PartitionOnInt", "PartitionOnCalendarYear",
        /// "PartitionOnCalendarMonth", "PartitionOnCalendarDate",
        /// "PartitionOnTime".
        /// </summary>
        [JsonProperty(PropertyName = "partitionOption")]
        public object PartitionOption { get; set; }

        /// <summary>
        /// Gets or sets the settings that will be leveraged for SAP table
        /// source partitioning.
        /// </summary>
        [JsonProperty(PropertyName = "partitionSettings")]
        public SapTablePartitionSettings PartitionSettings { get; set; }

    }
}
