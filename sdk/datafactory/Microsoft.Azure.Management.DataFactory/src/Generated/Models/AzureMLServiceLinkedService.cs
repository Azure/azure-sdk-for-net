// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure ML Service linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureMLService")]
    [Rest.Serialization.JsonTransformation]
    public partial class AzureMLServiceLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureMLServiceLinkedService
        /// class.
        /// </summary>
        public AzureMLServiceLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMLServiceLinkedService
        /// class.
        /// </summary>
        /// <param name="subscriptionId">Azure ML Service workspace
        /// subscription ID. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="resourceGroupName">Azure ML Service workspace resource
        /// group name. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="mlWorkspaceName">Azure ML Service workspace name.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="servicePrincipalId">The ID of the service principal
        /// used to authenticate against the endpoint of a published Azure ML
        /// Service pipeline. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="servicePrincipalKey">The key of the service principal
        /// used to authenticate against the endpoint of a published Azure ML
        /// Service pipeline.</param>
        /// <param name="tenant">The name or ID of the tenant to which the
        /// service principal belongs. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public AzureMLServiceLinkedService(object subscriptionId, object resourceGroupName, object mlWorkspaceName, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase), object tenant = default(object), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            SubscriptionId = subscriptionId;
            ResourceGroupName = resourceGroupName;
            MlWorkspaceName = mlWorkspaceName;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            Tenant = tenant;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure ML Service workspace subscription ID. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.subscriptionId")]
        public object SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets azure ML Service workspace resource group name. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.resourceGroupName")]
        public object ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets azure ML Service workspace name. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.mlWorkspaceName")]
        public object MlWorkspaceName { get; set; }

        /// <summary>
        /// Gets or sets the ID of the service principal used to authenticate
        /// against the endpoint of a published Azure ML Service pipeline.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the key of the service principal used to authenticate
        /// against the endpoint of a published Azure ML Service pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalKey")]
        public SecretBase ServicePrincipalKey { get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service
        /// principal belongs. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenant")]
        public object Tenant { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubscriptionId");
            }
            if (ResourceGroupName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceGroupName");
            }
            if (MlWorkspaceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MlWorkspaceName");
            }
        }
    }
}
