// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// SSIS package execution credential.
    /// </summary>
    public partial class SSISExecutionCredential
    {
        /// <summary>
        /// Initializes a new instance of the SSISExecutionCredential class.
        /// </summary>
        public SSISExecutionCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SSISExecutionCredential class.
        /// </summary>
        /// <param name="domain">Domain for windows authentication.</param>
        /// <param name="userName">UseName for windows authentication.</param>
        /// <param name="password">Password for windows authentication.</param>
        public SSISExecutionCredential(object domain, object userName, SecureString password)
        {
            Domain = domain;
            UserName = userName;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets domain for windows authentication.
        /// </summary>
        [JsonProperty(PropertyName = "domain")]
        public object Domain { get; set; }

        /// <summary>
        /// Gets or sets useName for windows authentication.
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public object UserName { get; set; }

        /// <summary>
        /// Gets or sets password for windows authentication.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public SecureString Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Domain == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Domain");
            }
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (Password != null)
            {
                Password.Validate();
            }
        }
    }
}
