// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Sql always encrypted properties.
    /// </summary>
    public partial class SqlAlwaysEncryptedProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlAlwaysEncryptedProperties
        /// class.
        /// </summary>
        public SqlAlwaysEncryptedProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlAlwaysEncryptedProperties
        /// class.
        /// </summary>
        /// <param name="alwaysEncryptedAkvAuthType">Sql always encrypted AKV
        /// authentication type. Type: string (or Expression with resultType
        /// string). Possible values include: 'ServicePrincipal',
        /// 'ManagedIdentity'</param>
        /// <param name="servicePrincipalId">The client ID of the application
        /// in Azure Active Directory used for Azure Key Vault authentication.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="servicePrincipalKey">The key of the service principal
        /// used to authenticate against Azure Key Vault.</param>
        public SqlAlwaysEncryptedProperties(string alwaysEncryptedAkvAuthType, object servicePrincipalId = default(object), SecretBase servicePrincipalKey = default(SecretBase))
        {
            AlwaysEncryptedAkvAuthType = alwaysEncryptedAkvAuthType;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets sql always encrypted AKV authentication type. Type:
        /// string (or Expression with resultType string). Possible values
        /// include: 'ServicePrincipal', 'ManagedIdentity'
        /// </summary>
        [JsonProperty(PropertyName = "alwaysEncryptedAkvAuthType")]
        public string AlwaysEncryptedAkvAuthType { get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application in Azure Active
        /// Directory used for Azure Key Vault authentication. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the key of the service principal used to authenticate
        /// against Azure Key Vault.
        /// </summary>
        [JsonProperty(PropertyName = "servicePrincipalKey")]
        public SecretBase ServicePrincipalKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AlwaysEncryptedAkvAuthType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AlwaysEncryptedAkvAuthType");
            }
        }
    }
}
