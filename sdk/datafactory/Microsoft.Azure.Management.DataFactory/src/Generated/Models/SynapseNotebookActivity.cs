// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Execute Synapse notebook activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SynapseNotebook")]
    [Rest.Serialization.JsonTransformation]
    public partial class SynapseNotebookActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the SynapseNotebookActivity class.
        /// </summary>
        public SynapseNotebookActivity()
        {
            Notebook = new SynapseNotebookReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseNotebookActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="notebook">Synapse notebook reference.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        /// <param name="linkedServiceName">Linked service reference.</param>
        /// <param name="policy">Activity policy.</param>
        /// <param name="sparkPool">The name of the big data pool which will be
        /// used to execute the notebook.</param>
        /// <param name="parameters">Notebook parameters.</param>
        /// <param name="executorSize">Number of core and memory to be used for
        /// executors allocated in the specified Spark pool for the session,
        /// which will be used for overriding 'executorCores' and
        /// 'executorMemory' of the notebook you provide. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="conf">Spark configuration properties, which will
        /// override the 'conf' of the notebook you provide.</param>
        /// <param name="driverSize">Number of core and memory to be used for
        /// driver allocated in the specified Spark pool for the session, which
        /// will be used for overriding 'driverCores' and 'driverMemory' of the
        /// notebook you provide. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="numExecutors">Number of executors to launch for this
        /// session, which will override the 'numExecutors' of the notebook you
        /// provide.</param>
        public SynapseNotebookActivity(string name, SynapseNotebookReference notebook, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), BigDataPoolParametrizationReference sparkPool = default(BigDataPoolParametrizationReference), IDictionary<string, NotebookParameter> parameters = default(IDictionary<string, NotebookParameter>), object executorSize = default(object), object conf = default(object), object driverSize = default(object), int? numExecutors = default(int?))
            : base(name, additionalProperties, description, dependsOn, userProperties, linkedServiceName, policy)
        {
            Notebook = notebook;
            SparkPool = sparkPool;
            Parameters = parameters;
            ExecutorSize = executorSize;
            Conf = conf;
            DriverSize = driverSize;
            NumExecutors = numExecutors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets synapse notebook reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.notebook")]
        public SynapseNotebookReference Notebook { get; set; }

        /// <summary>
        /// Gets or sets the name of the big data pool which will be used to
        /// execute the notebook.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sparkPool")]
        public BigDataPoolParametrizationReference SparkPool { get; set; }

        /// <summary>
        /// Gets or sets notebook parameters.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.parameters")]
        public IDictionary<string, NotebookParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or sets number of core and memory to be used for executors
        /// allocated in the specified Spark pool for the session, which will
        /// be used for overriding 'executorCores' and 'executorMemory' of the
        /// notebook you provide. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.executorSize")]
        public object ExecutorSize { get; set; }

        /// <summary>
        /// Gets or sets spark configuration properties, which will override
        /// the 'conf' of the notebook you provide.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.conf")]
        public object Conf { get; set; }

        /// <summary>
        /// Gets or sets number of core and memory to be used for driver
        /// allocated in the specified Spark pool for the session, which will
        /// be used for overriding 'driverCores' and 'driverMemory' of the
        /// notebook you provide. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.driverSize")]
        public object DriverSize { get; set; }

        /// <summary>
        /// Gets or sets number of executors to launch for this session, which
        /// will override the 'numExecutors' of the notebook you provide.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.numExecutors")]
        public int? NumExecutors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Notebook == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Notebook");
            }
            if (Notebook != null)
            {
                Notebook.Validate();
            }
            if (SparkPool != null)
            {
                SparkPool.Validate();
            }
        }
    }
}
