// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Log location settings.
    /// </summary>
    public partial class LogLocationSettings
    {
        /// <summary>
        /// Initializes a new instance of the LogLocationSettings class.
        /// </summary>
        public LogLocationSettings()
        {
            LinkedServiceName = new LinkedServiceReference();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LogLocationSettings class.
        /// </summary>
        /// <param name="linkedServiceName">Log storage linked service
        /// reference.</param>
        /// <param name="path">The path to storage for storing detailed logs of
        /// activity execution. Type: string (or Expression with resultType
        /// string).</param>
        public LogLocationSettings(LinkedServiceReference linkedServiceName, object path = default(object))
        {
            LinkedServiceName = linkedServiceName;
            Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets log storage linked service reference.
        /// </summary>
        [JsonProperty(PropertyName = "linkedServiceName")]
        public LinkedServiceReference LinkedServiceName { get; set; }

        /// <summary>
        /// Gets or sets the path to storage for storing detailed logs of
        /// activity execution. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public object Path { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LinkedServiceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LinkedServiceName");
            }
            if (LinkedServiceName != null)
            {
                LinkedServiceName.Validate();
            }
        }
    }
}
