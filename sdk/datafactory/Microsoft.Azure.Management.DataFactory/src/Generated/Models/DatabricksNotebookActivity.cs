// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// DatabricksNotebook activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DatabricksNotebook")]
    [Rest.Serialization.JsonTransformation]
    public partial class DatabricksNotebookActivity : ExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the DatabricksNotebookActivity class.
        /// </summary>
        public DatabricksNotebookActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabricksNotebookActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="notebookPath">The absolute path of the notebook to be
        /// run in the Databricks Workspace. This path must begin with a slash.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        /// <param name="linkedServiceName">Linked service reference.</param>
        /// <param name="policy">Activity policy.</param>
        /// <param name="baseParameters">Base parameters to be used for each
        /// run of this job.If the notebook takes a parameter that is not
        /// specified, the default value from the notebook will be
        /// used.</param>
        /// <param name="libraries">A list of libraries to be installed on the
        /// cluster that will execute the job.</param>
        public DatabricksNotebookActivity(string name, object notebookPath, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>), LinkedServiceReference linkedServiceName = default(LinkedServiceReference), ActivityPolicy policy = default(ActivityPolicy), IDictionary<string, object> baseParameters = default(IDictionary<string, object>), IList<IDictionary<string, object>> libraries = default(IList<IDictionary<string, object>>))
            : base(name, additionalProperties, description, dependsOn, userProperties, linkedServiceName, policy)
        {
            NotebookPath = notebookPath;
            BaseParameters = baseParameters;
            Libraries = libraries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the absolute path of the notebook to be run in the
        /// Databricks Workspace. This path must begin with a slash. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.notebookPath")]
        public object NotebookPath { get; set; }

        /// <summary>
        /// Gets or sets base parameters to be used for each run of this job.If
        /// the notebook takes a parameter that is not specified, the default
        /// value from the notebook will be used.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.baseParameters")]
        public IDictionary<string, object> BaseParameters { get; set; }

        /// <summary>
        /// Gets or sets a list of libraries to be installed on the cluster
        /// that will execute the job.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.libraries")]
        public IList<IDictionary<string, object>> Libraries { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (NotebookPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NotebookPath");
            }
        }
    }
}
