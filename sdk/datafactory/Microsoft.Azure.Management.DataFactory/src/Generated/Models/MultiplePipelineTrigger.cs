// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Base class for all triggers that support one to many model for trigger
    /// to pipeline.
    /// </summary>
    public partial class MultiplePipelineTrigger : Trigger
    {
        /// <summary>
        /// Initializes a new instance of the MultiplePipelineTrigger class.
        /// </summary>
        public MultiplePipelineTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MultiplePipelineTrigger class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Trigger description.</param>
        /// <param name="runtimeState">Indicates if trigger is running or not.
        /// Updated when Start/Stop APIs are called on the Trigger. Possible
        /// values include: 'Started', 'Stopped', 'Disabled'</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the trigger.</param>
        /// <param name="pipelines">Pipelines that need to be started.</param>
        public MultiplePipelineTrigger(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), string runtimeState = default(string), IList<object> annotations = default(IList<object>), IList<TriggerPipelineReference> pipelines = default(IList<TriggerPipelineReference>))
            : base(additionalProperties, description, runtimeState, annotations)
        {
            Pipelines = pipelines;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pipelines that need to be started.
        /// </summary>
        [JsonProperty(PropertyName = "pipelines")]
        public IList<TriggerPipelineReference> Pipelines { get; set; }

    }
}
