// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Script block of scripts.
    /// </summary>
    public partial class ScriptActivityScriptBlock
    {
        /// <summary>
        /// Initializes a new instance of the ScriptActivityScriptBlock class.
        /// </summary>
        public ScriptActivityScriptBlock()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScriptActivityScriptBlock class.
        /// </summary>
        /// <param name="text">The query text. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="type">The type of the query. Type: string. Possible
        /// values include: 'Query', 'NonQuery'</param>
        /// <param name="parameters">Array of script parameters. Type:
        /// array.</param>
        public ScriptActivityScriptBlock(object text, string type, IList<ScriptActivityParameter> parameters = default(IList<ScriptActivityParameter>))
        {
            Text = text;
            Type = type;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the query text. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public object Text { get; set; }

        /// <summary>
        /// Gets or sets the type of the query. Type: string. Possible values
        /// include: 'Query', 'NonQuery'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets array of script parameters. Type: array.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<ScriptActivityParameter> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
