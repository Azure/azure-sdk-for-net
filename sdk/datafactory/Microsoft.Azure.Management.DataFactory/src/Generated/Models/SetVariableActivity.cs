// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Set value for a Variable.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SetVariable")]
    [Rest.Serialization.JsonTransformation]
    public partial class SetVariableActivity : ControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the SetVariableActivity class.
        /// </summary>
        public SetVariableActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SetVariableActivity class.
        /// </summary>
        /// <param name="name">Activity name.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Activity description.</param>
        /// <param name="dependsOn">Activity depends on condition.</param>
        /// <param name="userProperties">Activity user properties.</param>
        /// <param name="variableName">Name of the variable whose value needs
        /// to be set.</param>
        /// <param name="value">Value to be set. Could be a static value or
        /// Expression</param>
        public SetVariableActivity(string name, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), IList<ActivityDependency> dependsOn = default(IList<ActivityDependency>), IList<UserProperty> userProperties = default(IList<UserProperty>), string variableName = default(string), object value = default(object))
            : base(name, additionalProperties, description, dependsOn, userProperties)
        {
            VariableName = variableName;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the variable whose value needs to be set.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.variableName")]
        public string VariableName { get; set; }

        /// <summary>
        /// Gets or sets value to be set. Could be a static value or Expression
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.value")]
        public object Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
