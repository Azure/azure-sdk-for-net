// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Microsoft Azure Cosmos Database (CosmosDB) linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("CosmosDb")]
    [Rest.Serialization.JsonTransformation]
    public partial class CosmosDbLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the CosmosDbLinkedService class.
        /// </summary>
        public CosmosDbLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CosmosDbLinkedService class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="connectionString">The connection string. Type: string,
        /// SecureString or AzureKeyVaultSecretReference.</param>
        /// <param name="accountEndpoint">The endpoint of the Azure CosmosDB
        /// account. Type: string (or Expression with resultType
        /// string)</param>
        /// <param name="database">The name of the database. Type: string (or
        /// Expression with resultType string)</param>
        /// <param name="accountKey">The account key of the Azure CosmosDB
        /// account. Type: SecureString or
        /// AzureKeyVaultSecretReference.</param>
        /// <param name="servicePrincipalId">The client ID of the application
        /// in Azure Active Directory used for Server-To-Server authentication.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="servicePrincipalCredentialType">The service principal
        /// credential type to use in Server-To-Server authentication.
        /// 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for
        /// certificate. Type: string (or Expression with resultType string).
        /// Possible values include: 'ServicePrincipalKey',
        /// 'ServicePrincipalCert'</param>
        /// <param name="servicePrincipalCredential">The credential of the
        /// service principal object in Azure Active Directory. If
        /// servicePrincipalCredentialType is 'ServicePrincipalKey',
        /// servicePrincipalCredential can be SecureString or
        /// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is
        /// 'ServicePrincipalCert', servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.</param>
        /// <param name="tenant">The name or ID of the tenant to which the
        /// service principal belongs. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="azureCloudType">Indicates the azure cloud type of the
        /// service principle auth. Allowed values are AzurePublic, AzureChina,
        /// AzureUsGovernment, AzureGermany. Default value is the data factory
        /// regions’ cloud type. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="connectionMode">The connection mode used to access
        /// CosmosDB account. Type: string (or Expression with resultType
        /// string). Possible values include: 'Gateway', 'Direct'</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public CosmosDbLinkedService(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object connectionString = default(object), object accountEndpoint = default(object), object database = default(object), SecretBase accountKey = default(SecretBase), object servicePrincipalId = default(object), string servicePrincipalCredentialType = default(string), SecretBase servicePrincipalCredential = default(SecretBase), object tenant = default(object), object azureCloudType = default(object), string connectionMode = default(string), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            ConnectionString = connectionString;
            AccountEndpoint = accountEndpoint;
            Database = database;
            AccountKey = accountKey;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalCredentialType = servicePrincipalCredentialType;
            ServicePrincipalCredential = servicePrincipalCredential;
            Tenant = tenant;
            AzureCloudType = azureCloudType;
            ConnectionMode = connectionMode;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the connection string. Type: string, SecureString or
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionString")]
        public object ConnectionString { get; set; }

        /// <summary>
        /// Gets or sets the endpoint of the Azure CosmosDB account. Type:
        /// string (or Expression with resultType string)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accountEndpoint")]
        public object AccountEndpoint { get; set; }

        /// <summary>
        /// Gets or sets the name of the database. Type: string (or Expression
        /// with resultType string)
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.database")]
        public object Database { get; set; }

        /// <summary>
        /// Gets or sets the account key of the Azure CosmosDB account. Type:
        /// SecureString or AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.accountKey")]
        public SecretBase AccountKey { get; set; }

        /// <summary>
        /// Gets or sets the client ID of the application in Azure Active
        /// Directory used for Server-To-Server authentication. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the service principal credential type to use in
        /// Server-To-Server authentication. 'ServicePrincipalKey' for
        /// key/secret, 'ServicePrincipalCert' for certificate. Type: string
        /// (or Expression with resultType string). Possible values include:
        /// 'ServicePrincipalKey', 'ServicePrincipalCert'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalCredentialType")]
        public string ServicePrincipalCredentialType { get; set; }

        /// <summary>
        /// Gets or sets the credential of the service principal object in
        /// Azure Active Directory. If servicePrincipalCredentialType is
        /// 'ServicePrincipalKey', servicePrincipalCredential can be
        /// SecureString or AzureKeyVaultSecretReference. If
        /// servicePrincipalCredentialType is 'ServicePrincipalCert',
        /// servicePrincipalCredential can only be
        /// AzureKeyVaultSecretReference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalCredential")]
        public SecretBase ServicePrincipalCredential { get; set; }

        /// <summary>
        /// Gets or sets the name or ID of the tenant to which the service
        /// principal belongs. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenant")]
        public object Tenant { get; set; }

        /// <summary>
        /// Gets or sets indicates the azure cloud type of the service
        /// principle auth. Allowed values are AzurePublic, AzureChina,
        /// AzureUsGovernment, AzureGermany. Default value is the data factory
        /// regions’ cloud type. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.azureCloudType")]
        public object AzureCloudType { get; set; }

        /// <summary>
        /// Gets or sets the connection mode used to access CosmosDB account.
        /// Type: string (or Expression with resultType string). Possible
        /// values include: 'Gateway', 'Direct'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.connectionMode")]
        public string ConnectionMode { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
