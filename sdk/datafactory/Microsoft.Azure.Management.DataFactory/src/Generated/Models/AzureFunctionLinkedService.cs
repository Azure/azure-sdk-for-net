// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure Function linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureFunction")]
    [Rest.Serialization.JsonTransformation]
    public partial class AzureFunctionLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the AzureFunctionLinkedService class.
        /// </summary>
        public AzureFunctionLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFunctionLinkedService class.
        /// </summary>
        /// <param name="functionAppUrl">The endpoint of the Azure Function
        /// App. URL will be in the format
        /// https://&lt;accountName&gt;.azurewebsites.net.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="functionKey">Function or Host key for Azure Function
        /// App.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="credential">The credential reference containing
        /// authentication information.</param>
        /// <param name="resourceId">Allowed token audiences for azure
        /// function.</param>
        /// <param name="authentication">Type of authentication (Required to
        /// specify MSI) used to connect to AzureFunction. Type: string (or
        /// Expression with resultType string).</param>
        public AzureFunctionLinkedService(object functionAppUrl, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), SecretBase functionKey = default(SecretBase), object encryptedCredential = default(object), CredentialReference credential = default(CredentialReference), object resourceId = default(object), object authentication = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            FunctionAppUrl = functionAppUrl;
            FunctionKey = functionKey;
            EncryptedCredential = encryptedCredential;
            Credential = credential;
            ResourceId = resourceId;
            Authentication = authentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the endpoint of the Azure Function App. URL will be in
        /// the format https://&amp;lt;accountName&amp;gt;.azurewebsites.net.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.functionAppUrl")]
        public object FunctionAppUrl { get; set; }

        /// <summary>
        /// Gets or sets function or Host key for Azure Function App.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.functionKey")]
        public SecretBase FunctionKey { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Gets or sets the credential reference containing authentication
        /// information.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.credential")]
        public CredentialReference Credential { get; set; }

        /// <summary>
        /// Gets or sets allowed token audiences for azure function.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.resourceId")]
        public object ResourceId { get; set; }

        /// <summary>
        /// Gets or sets type of authentication (Required to specify MSI) used
        /// to connect to AzureFunction. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authentication")]
        public object Authentication { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (FunctionAppUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FunctionAppUrl");
            }
            if (Credential != null)
            {
                Credential.Validate();
            }
        }
    }
}
