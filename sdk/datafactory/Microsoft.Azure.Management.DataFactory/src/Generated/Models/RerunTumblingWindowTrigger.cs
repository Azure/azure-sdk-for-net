// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Trigger that schedules pipeline reruns for all fixed time interval
    /// windows from a requested start time to requested end time.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RerunTumblingWindowTrigger : Trigger
    {
        /// <summary>
        /// Initializes a new instance of the RerunTumblingWindowTrigger class.
        /// </summary>
        public RerunTumblingWindowTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RerunTumblingWindowTrigger class.
        /// </summary>
        /// <param name="parentTrigger">The parent trigger reference.</param>
        /// <param name="requestedStartTime">The start time for the time period
        /// for which restatement is initiated. Only UTC time is currently
        /// supported.</param>
        /// <param name="requestedEndTime">The end time for the time period for
        /// which restatement is initiated. Only UTC time is currently
        /// supported.</param>
        /// <param name="rerunConcurrency">The max number of parallel time
        /// windows (ready for execution) for which a rerun is
        /// triggered.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Trigger description.</param>
        /// <param name="runtimeState">Indicates if trigger is running or not.
        /// Updated when Start/Stop APIs are called on the Trigger. Possible
        /// values include: 'Started', 'Stopped', 'Disabled'</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the trigger.</param>
        public RerunTumblingWindowTrigger(object parentTrigger, System.DateTime requestedStartTime, System.DateTime requestedEndTime, int rerunConcurrency, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), string runtimeState = default(string), IList<object> annotations = default(IList<object>))
            : base(additionalProperties, description, runtimeState, annotations)
        {
            ParentTrigger = parentTrigger;
            RequestedStartTime = requestedStartTime;
            RequestedEndTime = requestedEndTime;
            RerunConcurrency = rerunConcurrency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the parent trigger reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.parentTrigger")]
        public object ParentTrigger { get; set; }

        /// <summary>
        /// Gets or sets the start time for the time period for which
        /// restatement is initiated. Only UTC time is currently supported.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.requestedStartTime")]
        public System.DateTime RequestedStartTime { get; set; }

        /// <summary>
        /// Gets or sets the end time for the time period for which restatement
        /// is initiated. Only UTC time is currently supported.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.requestedEndTime")]
        public System.DateTime RequestedEndTime { get; set; }

        /// <summary>
        /// Gets or sets the max number of parallel time windows (ready for
        /// execution) for which a rerun is triggered.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.rerunConcurrency")]
        public int RerunConcurrency { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ParentTrigger == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParentTrigger");
            }
            if (RerunConcurrency > 50)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RerunConcurrency", 50);
            }
            if (RerunConcurrency < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RerunConcurrency", 1);
            }
        }
    }
}
