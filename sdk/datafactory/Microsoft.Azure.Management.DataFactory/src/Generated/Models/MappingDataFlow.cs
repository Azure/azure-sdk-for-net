// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Mapping data flow.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MappingDataFlow : DataFlow
    {
        /// <summary>
        /// Initializes a new instance of the MappingDataFlow class.
        /// </summary>
        public MappingDataFlow()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MappingDataFlow class.
        /// </summary>
        /// <param name="description">The description of the data flow.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the data flow.</param>
        /// <param name="folder">The folder that this data flow is in. If not
        /// specified, Data flow will appear at the root level.</param>
        /// <param name="sources">List of sources in data flow.</param>
        /// <param name="sinks">List of sinks in data flow.</param>
        /// <param name="transformations">List of transformations in data
        /// flow.</param>
        /// <param name="script">DataFlow script.</param>
        public MappingDataFlow(string description = default(string), IList<object> annotations = default(IList<object>), DataFlowFolder folder = default(DataFlowFolder), IList<DataFlowSource> sources = default(IList<DataFlowSource>), IList<DataFlowSink> sinks = default(IList<DataFlowSink>), IList<Transformation> transformations = default(IList<Transformation>), string script = default(string))
            : base(description, annotations, folder)
        {
            Sources = sources;
            Sinks = sinks;
            Transformations = transformations;
            Script = script;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of sources in data flow.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sources")]
        public IList<DataFlowSource> Sources { get; set; }

        /// <summary>
        /// Gets or sets list of sinks in data flow.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sinks")]
        public IList<DataFlowSink> Sinks { get; set; }

        /// <summary>
        /// Gets or sets list of transformations in data flow.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.transformations")]
        public IList<Transformation> Transformations { get; set; }

        /// <summary>
        /// Gets or sets dataFlow script.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.script")]
        public string Script { get; set; }

    }
}
