// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The data stored in text format.
    /// </summary>
    public partial class TextFormat : DatasetStorageFormat
    {
        /// <summary>
        /// Initializes a new instance of the TextFormat class.
        /// </summary>
        public TextFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TextFormat class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="serializer">Serializer. Type: string (or Expression
        /// with resultType string).</param>
        /// <param name="deserializer">Deserializer. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="columnDelimiter">The column delimiter. Type: string
        /// (or Expression with resultType string).</param>
        /// <param name="rowDelimiter">The row delimiter. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="escapeChar">The escape character. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="quoteChar">The quote character. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="nullValue">The null value string. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="encodingName">The code page name of the preferred
        /// encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM
        /// denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of
        /// the table in the following link to set supported values:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="treatEmptyAsNull">Treat empty column values in the
        /// text file as null. The default value is true. Type: boolean (or
        /// Expression with resultType boolean).</param>
        /// <param name="skipLineCount">The number of lines/rows to be skipped
        /// when parsing text files. The default value is 0. Type: integer (or
        /// Expression with resultType integer).</param>
        /// <param name="firstRowAsHeader">When used as input, treat the first
        /// row of data as headers. When used as output,write the headers into
        /// the output as the first row of data. The default value is false.
        /// Type: boolean (or Expression with resultType boolean).</param>
        public TextFormat(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), object serializer = default(object), object deserializer = default(object), object columnDelimiter = default(object), object rowDelimiter = default(object), object escapeChar = default(object), object quoteChar = default(object), object nullValue = default(object), object encodingName = default(object), object treatEmptyAsNull = default(object), object skipLineCount = default(object), object firstRowAsHeader = default(object))
            : base(additionalProperties, serializer, deserializer)
        {
            ColumnDelimiter = columnDelimiter;
            RowDelimiter = rowDelimiter;
            EscapeChar = escapeChar;
            QuoteChar = quoteChar;
            NullValue = nullValue;
            EncodingName = encodingName;
            TreatEmptyAsNull = treatEmptyAsNull;
            SkipLineCount = skipLineCount;
            FirstRowAsHeader = firstRowAsHeader;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the column delimiter. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "columnDelimiter")]
        public object ColumnDelimiter { get; set; }

        /// <summary>
        /// Gets or sets the row delimiter. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "rowDelimiter")]
        public object RowDelimiter { get; set; }

        /// <summary>
        /// Gets or sets the escape character. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "escapeChar")]
        public object EscapeChar { get; set; }

        /// <summary>
        /// Gets or sets the quote character. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "quoteChar")]
        public object QuoteChar { get; set; }

        /// <summary>
        /// Gets or sets the null value string. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "nullValue")]
        public object NullValue { get; set; }

        /// <summary>
        /// Gets or sets the code page name of the preferred encoding. If miss,
        /// the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another
        /// Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in
        /// the following link to set supported values:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "encodingName")]
        public object EncodingName { get; set; }

        /// <summary>
        /// Gets or sets treat empty column values in the text file as null.
        /// The default value is true. Type: boolean (or Expression with
        /// resultType boolean).
        /// </summary>
        [JsonProperty(PropertyName = "treatEmptyAsNull")]
        public object TreatEmptyAsNull { get; set; }

        /// <summary>
        /// Gets or sets the number of lines/rows to be skipped when parsing
        /// text files. The default value is 0. Type: integer (or Expression
        /// with resultType integer).
        /// </summary>
        [JsonProperty(PropertyName = "skipLineCount")]
        public object SkipLineCount { get; set; }

        /// <summary>
        /// Gets or sets when used as input, treat the first row of data as
        /// headers. When used as output,write the headers into the output as
        /// the first row of data. The default value is false. Type: boolean
        /// (or Expression with resultType boolean).
        /// </summary>
        [JsonProperty(PropertyName = "firstRowAsHeader")]
        public object FirstRowAsHeader { get; set; }

    }
}
