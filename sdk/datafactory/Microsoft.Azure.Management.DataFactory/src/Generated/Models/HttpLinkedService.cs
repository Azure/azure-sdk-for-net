// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Linked service for an HTTP source.
    /// </summary>
    [Newtonsoft.Json.JsonObject("HttpServer")]
    [Rest.Serialization.JsonTransformation]
    public partial class HttpLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the HttpLinkedService class.
        /// </summary>
        public HttpLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpLinkedService class.
        /// </summary>
        /// <param name="url">The base URL of the HTTP endpoint, e.g.
        /// http://www.microsoft.com. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="authenticationType">The authentication type to be used
        /// to connect to the HTTP server. Possible values include: 'Basic',
        /// 'Anonymous', 'Digest', 'Windows', 'ClientCertificate'</param>
        /// <param name="userName">User name for Basic, Digest, or Windows
        /// authentication. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="password">Password for Basic, Digest, Windows, or
        /// ClientCertificate with EmbeddedCertData authentication.</param>
        /// <param name="authHeaders">The additional HTTP headers in the
        /// request to RESTful API used for authorization. Type: object (or
        /// Expression with resultType object).</param>
        /// <param name="embeddedCertData">Base64 encoded certificate data for
        /// ClientCertificate authentication. For on-premises copy with
        /// ClientCertificate authentication, either CertThumbprint or
        /// EmbeddedCertData/Password should be specified. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="certThumbprint">Thumbprint of certificate for
        /// ClientCertificate authentication. Only valid for on-premises copy.
        /// For on-premises copy with ClientCertificate authentication, either
        /// CertThumbprint or EmbeddedCertData/Password should be specified.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        /// <param name="enableServerCertificateValidation">If true, validate
        /// the HTTPS server SSL certificate. Default value is true. Type:
        /// boolean (or Expression with resultType boolean).</param>
        public HttpLinkedService(object url, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), string authenticationType = default(string), object userName = default(object), SecretBase password = default(SecretBase), object authHeaders = default(object), object embeddedCertData = default(object), object certThumbprint = default(object), object encryptedCredential = default(object), object enableServerCertificateValidation = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            Url = url;
            AuthenticationType = authenticationType;
            UserName = userName;
            Password = password;
            AuthHeaders = authHeaders;
            EmbeddedCertData = embeddedCertData;
            CertThumbprint = certThumbprint;
            EncryptedCredential = encryptedCredential;
            EnableServerCertificateValidation = enableServerCertificateValidation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the base URL of the HTTP endpoint, e.g.
        /// http://www.microsoft.com. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.url")]
        public object Url { get; set; }

        /// <summary>
        /// Gets or sets the authentication type to be used to connect to the
        /// HTTP server. Possible values include: 'Basic', 'Anonymous',
        /// 'Digest', 'Windows', 'ClientCertificate'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authenticationType")]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets user name for Basic, Digest, or Windows
        /// authentication. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.userName")]
        public object UserName { get; set; }

        /// <summary>
        /// Gets or sets password for Basic, Digest, Windows, or
        /// ClientCertificate with EmbeddedCertData authentication.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password { get; set; }

        /// <summary>
        /// Gets or sets the additional HTTP headers in the request to RESTful
        /// API used for authorization. Type: object (or Expression with
        /// resultType object).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.authHeaders")]
        public object AuthHeaders { get; set; }

        /// <summary>
        /// Gets or sets base64 encoded certificate data for ClientCertificate
        /// authentication. For on-premises copy with ClientCertificate
        /// authentication, either CertThumbprint or EmbeddedCertData/Password
        /// should be specified. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.embeddedCertData")]
        public object EmbeddedCertData { get; set; }

        /// <summary>
        /// Gets or sets thumbprint of certificate for ClientCertificate
        /// authentication. Only valid for on-premises copy. For on-premises
        /// copy with ClientCertificate authentication, either CertThumbprint
        /// or EmbeddedCertData/Password should be specified. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.certThumbprint")]
        public object CertThumbprint { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Gets or sets if true, validate the HTTPS server SSL certificate.
        /// Default value is true. Type: boolean (or Expression with resultType
        /// boolean).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.enableServerCertificateValidation")]
        public object EnableServerCertificateValidation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
        }
    }
}
