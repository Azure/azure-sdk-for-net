// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SharePoint Online List linked service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SharePointOnlineList")]
    [Rest.Serialization.JsonTransformation]
    public partial class SharePointOnlineListLinkedService : LinkedService
    {
        /// <summary>
        /// Initializes a new instance of the SharePointOnlineListLinkedService
        /// class.
        /// </summary>
        public SharePointOnlineListLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SharePointOnlineListLinkedService
        /// class.
        /// </summary>
        /// <param name="siteUrl">The URL of the SharePoint Online site. For
        /// example, https://contoso.sharepoint.com/sites/siteName. Type:
        /// string (or Expression with resultType string).</param>
        /// <param name="tenantId">The tenant ID under which your application
        /// resides. You can find it from Azure portal Active Directory
        /// overview page. Type: string (or Expression with resultType
        /// string).</param>
        /// <param name="servicePrincipalId">The application (client) ID of
        /// your application registered in Azure Active Directory. Make sure to
        /// grant SharePoint site permission to this application. Type: string
        /// (or Expression with resultType string).</param>
        /// <param name="servicePrincipalKey">The client secret of your
        /// application registered in Azure Active Directory. Type: string (or
        /// Expression with resultType string).</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="connectVia">The integration runtime reference.</param>
        /// <param name="description">Linked service description.</param>
        /// <param name="parameters">Parameters for linked service.</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the linked service.</param>
        /// <param name="encryptedCredential">The encrypted credential used for
        /// authentication. Credentials are encrypted using the integration
        /// runtime credential manager. Type: string (or Expression with
        /// resultType string).</param>
        public SharePointOnlineListLinkedService(object siteUrl, object tenantId, object servicePrincipalId, SecretBase servicePrincipalKey, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IntegrationRuntimeReference connectVia = default(IntegrationRuntimeReference), string description = default(string), IDictionary<string, ParameterSpecification> parameters = default(IDictionary<string, ParameterSpecification>), IList<object> annotations = default(IList<object>), object encryptedCredential = default(object))
            : base(additionalProperties, connectVia, description, parameters, annotations)
        {
            SiteUrl = siteUrl;
            TenantId = tenantId;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            EncryptedCredential = encryptedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the URL of the SharePoint Online site. For example,
        /// https://contoso.sharepoint.com/sites/siteName. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.siteUrl")]
        public object SiteUrl { get; set; }

        /// <summary>
        /// Gets or sets the tenant ID under which your application resides.
        /// You can find it from Azure portal Active Directory overview page.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.tenantId")]
        public object TenantId { get; set; }

        /// <summary>
        /// Gets or sets the application (client) ID of your application
        /// registered in Azure Active Directory. Make sure to grant SharePoint
        /// site permission to this application. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalId")]
        public object ServicePrincipalId { get; set; }

        /// <summary>
        /// Gets or sets the client secret of your application registered in
        /// Azure Active Directory. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.servicePrincipalKey")]
        public SecretBase ServicePrincipalKey { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (SiteUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SiteUrl");
            }
            if (TenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TenantId");
            }
            if (ServicePrincipalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServicePrincipalId");
            }
            if (ServicePrincipalKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServicePrincipalKey");
            }
        }
    }
}
