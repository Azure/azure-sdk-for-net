// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Staging info for execute data flow activity.
    /// </summary>
    public partial class DataFlowStagingInfo
    {
        /// <summary>
        /// Initializes a new instance of the DataFlowStagingInfo class.
        /// </summary>
        public DataFlowStagingInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataFlowStagingInfo class.
        /// </summary>
        /// <param name="linkedService">Staging linked service
        /// reference.</param>
        /// <param name="folderPath">Folder path for staging blob. Type: string
        /// (or Expression with resultType string)</param>
        public DataFlowStagingInfo(LinkedServiceReference linkedService = default(LinkedServiceReference), object folderPath = default(object))
        {
            LinkedService = linkedService;
            FolderPath = folderPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets staging linked service reference.
        /// </summary>
        [JsonProperty(PropertyName = "linkedService")]
        public LinkedServiceReference LinkedService { get; set; }

        /// <summary>
        /// Gets or sets folder path for staging blob. Type: string (or
        /// Expression with resultType string)
        /// </summary>
        [JsonProperty(PropertyName = "folderPath")]
        public object FolderPath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LinkedService != null)
            {
                LinkedService.Validate();
            }
        }
    }
}
