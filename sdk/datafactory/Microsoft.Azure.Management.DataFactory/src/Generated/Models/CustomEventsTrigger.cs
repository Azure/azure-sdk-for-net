// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Trigger that runs every time a custom event is received.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CustomEventsTrigger : MultiplePipelineTrigger
    {
        /// <summary>
        /// Initializes a new instance of the CustomEventsTrigger class.
        /// </summary>
        public CustomEventsTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomEventsTrigger class.
        /// </summary>
        /// <param name="events">The list of event types that cause this
        /// trigger to fire.</param>
        /// <param name="scope">The ARM resource ID of the Azure Event Grid
        /// Topic.</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="description">Trigger description.</param>
        /// <param name="runtimeState">Indicates if trigger is running or not.
        /// Updated when Start/Stop APIs are called on the Trigger. Possible
        /// values include: 'Started', 'Stopped', 'Disabled'</param>
        /// <param name="annotations">List of tags that can be used for
        /// describing the trigger.</param>
        /// <param name="pipelines">Pipelines that need to be started.</param>
        /// <param name="subjectBeginsWith">The event subject must begin with
        /// the pattern provided for trigger to fire. At least one of these
        /// must be provided: subjectBeginsWith, subjectEndsWith.</param>
        /// <param name="subjectEndsWith">The event subject must end with the
        /// pattern provided for trigger to fire. At least one of these must be
        /// provided: subjectBeginsWith, subjectEndsWith.</param>
        public CustomEventsTrigger(IList<object> events, string scope, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string description = default(string), string runtimeState = default(string), IList<object> annotations = default(IList<object>), IList<TriggerPipelineReference> pipelines = default(IList<TriggerPipelineReference>), string subjectBeginsWith = default(string), string subjectEndsWith = default(string))
            : base(additionalProperties, description, runtimeState, annotations, pipelines)
        {
            SubjectBeginsWith = subjectBeginsWith;
            SubjectEndsWith = subjectEndsWith;
            Events = events;
            Scope = scope;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the event subject must begin with the pattern provided
        /// for trigger to fire. At least one of these must be provided:
        /// subjectBeginsWith, subjectEndsWith.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.subjectBeginsWith")]
        public string SubjectBeginsWith { get; set; }

        /// <summary>
        /// Gets or sets the event subject must end with the pattern provided
        /// for trigger to fire. At least one of these must be provided:
        /// subjectBeginsWith, subjectEndsWith.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.subjectEndsWith")]
        public string SubjectEndsWith { get; set; }

        /// <summary>
        /// Gets or sets the list of event types that cause this trigger to
        /// fire.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.events")]
        public IList<object> Events { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource ID of the Azure Event Grid Topic.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Events == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Events");
            }
            if (Scope == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scope");
            }
        }
    }
}
