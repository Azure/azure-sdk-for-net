// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RerunTriggersOperations.
    /// </summary>
    public static partial class RerunTriggersOperationsExtensions
    {
            /// <summary>
            /// Creates a rerun trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='rerunTumblingWindowTriggerActionParameters'>
            /// Rerun tumbling window trigger action parameters.
            /// </param>
            public static TriggerResource Create(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters)
            {
                return operations.CreateAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a rerun trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='rerunTumblingWindowTriggerActionParameters'>
            /// Rerun tumbling window trigger action parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggerResource> CreateAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, RerunTumblingWindowTriggerActionParameters rerunTumblingWindowTriggerActionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, rerunTumblingWindowTriggerActionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void Start(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.StartAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void Stop(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.StopAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void Cancel(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.CancelAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists rerun triggers by an original trigger name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            public static IPage<RerunTriggerResource> ListByTrigger(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName)
            {
                return operations.ListByTriggerAsync(resourceGroupName, factoryName, triggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists rerun triggers by an original trigger name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RerunTriggerResource>> ListByTriggerAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTriggerWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void BeginStart(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.BeginStartAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void BeginStop(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.BeginStopAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancels a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            public static void BeginCancel(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName)
            {
                operations.BeginCancelAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a trigger.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='factoryName'>
            /// The factory name.
            /// </param>
            /// <param name='triggerName'>
            /// The trigger name.
            /// </param>
            /// <param name='rerunTriggerName'>
            /// The rerun trigger name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCancelAsync(this IRerunTriggersOperations operations, string resourceGroupName, string factoryName, string triggerName, string rerunTriggerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginCancelWithHttpMessagesAsync(resourceGroupName, factoryName, triggerName, rerunTriggerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists rerun triggers by an original trigger name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RerunTriggerResource> ListByTriggerNext(this IRerunTriggersOperations operations, string nextPageLink)
            {
                return operations.ListByTriggerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists rerun triggers by an original trigger name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RerunTriggerResource>> ListByTriggerNextAsync(this IRerunTriggersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTriggerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
