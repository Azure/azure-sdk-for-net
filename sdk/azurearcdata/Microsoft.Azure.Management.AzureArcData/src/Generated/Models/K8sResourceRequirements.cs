// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The kubernetes resource limits and requests used to restrict or reserve
    /// resource usage.
    /// </summary>
    public partial class K8sResourceRequirements
    {
        /// <summary>
        /// Initializes a new instance of the K8sResourceRequirements class.
        /// </summary>
        public K8sResourceRequirements()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the K8sResourceRequirements class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="requests">Requests for a kubernetes resource type (e.g
        /// 'cpu', 'memory'). The 'cpu' request must be less than or equal to
        /// 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is
        /// '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum
        /// 'cpu' is 24 and maximum 'memory' is '128Gi'.</param>
        /// <param name="limits">Limits for a kubernetes resource type (e.g
        /// 'cpu', 'memory'). The 'cpu' request must be less than or equal to
        /// 'cpu' limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is
        /// '4Gi', minimum is '2Gi. If sku.tier is GeneralPurpose, maximum
        /// 'cpu' is 24 and maximum 'memory' is '128Gi'.</param>
        public K8sResourceRequirements(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), IDictionary<string, string> requests = default(IDictionary<string, string>), IDictionary<string, string> limits = default(IDictionary<string, string>))
        {
            AdditionalProperties = additionalProperties;
            Requests = requests;
            Limits = limits;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets requests for a kubernetes resource type (e.g 'cpu',
        /// 'memory'). The 'cpu' request must be less than or equal to 'cpu'
        /// limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi',
        /// minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24
        /// and maximum 'memory' is '128Gi'.
        /// </summary>
        [JsonProperty(PropertyName = "requests")]
        public IDictionary<string, string> Requests { get; set; }

        /// <summary>
        /// Gets or sets limits for a kubernetes resource type (e.g 'cpu',
        /// 'memory'). The 'cpu' request must be less than or equal to 'cpu'
        /// limit. Default 'cpu' is 2, minimum is 1. Default 'memory' is '4Gi',
        /// minimum is '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24
        /// and maximum 'memory' is '128Gi'.
        /// </summary>
        [JsonProperty(PropertyName = "limits")]
        public IDictionary<string, string> Limits { get; set; }

    }
}
