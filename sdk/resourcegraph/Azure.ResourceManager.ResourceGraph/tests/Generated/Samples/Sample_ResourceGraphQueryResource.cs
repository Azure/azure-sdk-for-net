// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ResourceGraph.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ResourceGraph.Samples
{
    public partial class Sample_ResourceGraphQueryResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetGraphQuery()
        {
            // Generated from example definition: specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/stable/2024-04-01/examples/GraphQueryGet.json
            // this example is just showing the usage of "GraphQuery_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGraphQueryResource created on azure
            // for more information of creating ResourceGraphQueryResource, please refer to the document of ResourceGraphQueryResource
            string subscriptionId = "024e2271-06fa-46b6-9079-f1ed3c7b070e";
            string resourceGroupName = "my-resource-group";
            string resourceName = "MyDockerVMs";
            ResourceIdentifier resourceGraphQueryResourceId = ResourceGraphQueryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ResourceGraphQueryResource resourceGraphQuery = client.GetResourceGraphQueryResource(resourceGraphQueryResourceId);

            // invoke the operation
            ResourceGraphQueryResource result = await resourceGraphQuery.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceGraphQueryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteGraphQuery()
        {
            // Generated from example definition: specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/stable/2024-04-01/examples/GraphQueryDelete.json
            // this example is just showing the usage of "GraphQuery_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGraphQueryResource created on azure
            // for more information of creating ResourceGraphQueryResource, please refer to the document of ResourceGraphQueryResource
            string subscriptionId = "024e2271-06fa-46b6-9079-f1ed3c7b070e";
            string resourceGroupName = "my-resource-group";
            string resourceName = "MyDockerVM";
            ResourceIdentifier resourceGraphQueryResourceId = ResourceGraphQueryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ResourceGraphQueryResource resourceGraphQuery = client.GetResourceGraphQueryResource(resourceGraphQueryResourceId);

            // invoke the operation
            await resourceGraphQuery.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateGraphQuery()
        {
            // Generated from example definition: specification/resourcegraph/resource-manager/Microsoft.ResourceGraph/stable/2024-04-01/examples/GraphQueryUpdate.json
            // this example is just showing the usage of "GraphQuery_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGraphQueryResource created on azure
            // for more information of creating ResourceGraphQueryResource, please refer to the document of ResourceGraphQueryResource
            string subscriptionId = "024e2271-06fa-46b6-9079-f1ed3c7b070e";
            string resourceGroupName = "my-resource-group";
            string resourceName = "MyDockerVMs";
            ResourceIdentifier resourceGraphQueryResourceId = ResourceGraphQueryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceName);
            ResourceGraphQueryResource resourceGraphQuery = client.GetResourceGraphQueryResource(resourceGraphQueryResourceId);

            // invoke the operation
            ResourceGraphQueryPatch patch = new ResourceGraphQueryPatch
            {
                Tags = { },
                ETag = new ETag("b0809832-ca62-4133-8f13-0c46580f9db1"),
                Description = "Modified description",
                Query = "where isnotnull(tags['Prod']) and properties.extensions[0].Name == 'docker'",
            };
            ResourceGraphQueryResource result = await resourceGraphQuery.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ResourceGraphQueryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
