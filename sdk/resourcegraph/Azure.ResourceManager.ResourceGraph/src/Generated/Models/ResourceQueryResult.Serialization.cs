// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ResourceGraph.Models
{
    public partial class ResourceQueryResult
    {
        internal static ResourceQueryResult DeserializeResourceQueryResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long totalRecords = default;
            long count = default;
            ResultTruncated resultTruncated = default;
            Optional<string> skipToken = default;
            BinaryData data = default;
            Optional<IReadOnlyList<Facet>> facets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalRecords"u8))
                {
                    totalRecords = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resultTruncated"u8))
                {
                    resultTruncated = property.Value.GetString().ToResultTruncated();
                    continue;
                }
                if (property.NameEquals("$skipToken"u8))
                {
                    skipToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("data"u8))
                {
                    data = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("facets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Facet> array = new List<Facet>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Facet.DeserializeFacet(item));
                    }
                    facets = array;
                    continue;
                }
            }
            return new ResourceQueryResult(totalRecords, count, resultTruncated, skipToken.Value, data, Optional.ToList(facets));
        }
    }
}
