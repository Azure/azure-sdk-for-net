// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters for a specific changes request.
    /// </summary>
    public partial class ResourceChangesRequestParameters
    {
        /// <summary>
        /// Initializes a new instance of the ResourceChangesRequestParameters
        /// class.
        /// </summary>
        public ResourceChangesRequestParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceChangesRequestParameters
        /// class.
        /// </summary>
        /// <param name="interval">Specifies the date and time interval for a
        /// changes request.</param>
        /// <param name="resourceIds">Specifies the list of resources for a
        /// changes request.</param>
        /// <param name="subscriptionId">The subscription id of resources to
        /// query the changes from. </param>
        /// <param name="skipToken">Acts as the continuation token for paged
        /// responses.</param>
        /// <param name="top">The maximum number of changes the client can
        /// accept in a paged response.</param>
        /// <param name="table">The table name to query resources from.</param>
        /// <param name="fetchPropertyChanges">The flag if set to true will
        /// fetch property changes</param>
        /// <param name="fetchSnapshots">The flag if set to true will fetch
        /// change snapshots</param>
        public ResourceChangesRequestParameters(ResourceChangesRequestParametersInterval interval, IList<string> resourceIds = default(IList<string>), string subscriptionId = default(string), string skipToken = default(string), int? top = default(int?), string table = default(string), bool? fetchPropertyChanges = default(bool?), bool? fetchSnapshots = default(bool?))
        {
            ResourceIds = resourceIds;
            SubscriptionId = subscriptionId;
            Interval = interval;
            SkipToken = skipToken;
            Top = top;
            Table = table;
            FetchPropertyChanges = fetchPropertyChanges;
            FetchSnapshots = fetchSnapshots;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the list of resources for a changes request.
        /// </summary>
        [JsonProperty(PropertyName = "resourceIds")]
        public IList<string> ResourceIds { get; set; }

        /// <summary>
        /// Gets or sets the subscription id of resources to query the changes
        /// from.
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets specifies the date and time interval for a changes
        /// request.
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public ResourceChangesRequestParametersInterval Interval { get; set; }

        /// <summary>
        /// Gets or sets acts as the continuation token for paged responses.
        /// </summary>
        [JsonProperty(PropertyName = "$skipToken")]
        public string SkipToken { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of changes the client can accept in
        /// a paged response.
        /// </summary>
        [JsonProperty(PropertyName = "$top")]
        public int? Top { get; set; }

        /// <summary>
        /// Gets or sets the table name to query resources from.
        /// </summary>
        [JsonProperty(PropertyName = "table")]
        public string Table { get; set; }

        /// <summary>
        /// Gets or sets the flag if set to true will fetch property changes
        /// </summary>
        [JsonProperty(PropertyName = "fetchPropertyChanges")]
        public bool? FetchPropertyChanges { get; set; }

        /// <summary>
        /// Gets or sets the flag if set to true will fetch change snapshots
        /// </summary>
        [JsonProperty(PropertyName = "fetchSnapshots")]
        public bool? FetchSnapshots { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Interval == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Interval");
            }
            if (Interval != null)
            {
                Interval.Validate();
            }
            if (Top > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Top", 1000);
            }
            if (Top < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Top", 1);
            }
        }
    }
}
