// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a query to be executed.
    /// </summary>
    public partial class QueryRequest
    {
        /// <summary>
        /// Initializes a new instance of the QueryRequest class.
        /// </summary>
        public QueryRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryRequest class.
        /// </summary>
        /// <param name="subscriptions">Azure subscriptions against which to
        /// execute the query.</param>
        /// <param name="query">The resources query.</param>
        /// <param name="options">The query evaluation options</param>
        /// <param name="facets">An array of facet requests to be computed
        /// against the query result.</param>
        public QueryRequest(IList<string> subscriptions, string query, QueryRequestOptions options = default(QueryRequestOptions), IList<FacetRequest> facets = default(IList<FacetRequest>))
        {
            Subscriptions = subscriptions;
            Query = query;
            Options = options;
            Facets = facets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure subscriptions against which to execute the
        /// query.
        /// </summary>
        [JsonProperty(PropertyName = "subscriptions")]
        public IList<string> Subscriptions { get; set; }

        /// <summary>
        /// Gets or sets the resources query.
        /// </summary>
        [JsonProperty(PropertyName = "query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets the query evaluation options
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public QueryRequestOptions Options { get; set; }

        /// <summary>
        /// Gets or sets an array of facet requests to be computed against the
        /// query result.
        /// </summary>
        [JsonProperty(PropertyName = "facets")]
        public IList<FacetRequest> Facets { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Subscriptions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subscriptions");
            }
            if (Query == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Query");
            }
            if (Options != null)
            {
                Options.Validate();
            }
            if (Facets != null)
            {
                foreach (var element in Facets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
