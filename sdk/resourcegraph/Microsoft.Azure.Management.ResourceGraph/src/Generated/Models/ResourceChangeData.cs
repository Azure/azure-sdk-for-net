// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Data on a specific change, represented by a pair of before and after
    /// resource snapshots.
    /// </summary>
    public partial class ResourceChangeData
    {
        /// <summary>
        /// Initializes a new instance of the ResourceChangeData class.
        /// </summary>
        public ResourceChangeData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceChangeData class.
        /// </summary>
        /// <param name="changeId">The change ID. Valid and unique within the
        /// specified resource only.</param>
        /// <param name="beforeSnapshot">The snapshot before the
        /// change.</param>
        /// <param name="afterSnapshot">The snapshot after the change.</param>
        /// <param name="resourceId">The resource for a change.</param>
        /// <param name="changeType">The change type for snapshot.
        /// PropertyChanges will be provided in case of Update change type.
        /// Possible values include: 'Create', 'Update', 'Delete'</param>
        /// <param name="propertyChanges">An array of resource property
        /// change</param>
        public ResourceChangeData(string changeId, ResourceChangeDataBeforeSnapshot beforeSnapshot, ResourceChangeDataAfterSnapshot afterSnapshot, string resourceId = default(string), ChangeType? changeType = default(ChangeType?), IList<ResourcePropertyChange> propertyChanges = default(IList<ResourcePropertyChange>))
        {
            ResourceId = resourceId;
            ChangeId = changeId;
            BeforeSnapshot = beforeSnapshot;
            AfterSnapshot = afterSnapshot;
            ChangeType = changeType;
            PropertyChanges = propertyChanges;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource for a change.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the change ID. Valid and unique within the specified
        /// resource only.
        /// </summary>
        [JsonProperty(PropertyName = "changeId")]
        public string ChangeId { get; set; }

        /// <summary>
        /// Gets or sets the snapshot before the change.
        /// </summary>
        [JsonProperty(PropertyName = "beforeSnapshot")]
        public ResourceChangeDataBeforeSnapshot BeforeSnapshot { get; set; }

        /// <summary>
        /// Gets or sets the snapshot after the change.
        /// </summary>
        [JsonProperty(PropertyName = "afterSnapshot")]
        public ResourceChangeDataAfterSnapshot AfterSnapshot { get; set; }

        /// <summary>
        /// Gets or sets the change type for snapshot. PropertyChanges will be
        /// provided in case of Update change type. Possible values include:
        /// 'Create', 'Update', 'Delete'
        /// </summary>
        [JsonProperty(PropertyName = "changeType")]
        public ChangeType? ChangeType { get; set; }

        /// <summary>
        /// Gets or sets an array of resource property change
        /// </summary>
        [JsonProperty(PropertyName = "propertyChanges")]
        public IList<ResourcePropertyChange> PropertyChanges { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ChangeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ChangeId");
            }
            if (BeforeSnapshot == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BeforeSnapshot");
            }
            if (AfterSnapshot == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AfterSnapshot");
            }
            if (BeforeSnapshot != null)
            {
                BeforeSnapshot.Validate();
            }
            if (AfterSnapshot != null)
            {
                AfterSnapshot.Validate();
            }
            if (PropertyChanges != null)
            {
                foreach (var element in PropertyChanges)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
