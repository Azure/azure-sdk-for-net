// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A facet whose execution resulted in an error.
    /// </summary>
    public partial class FacetError : Facet
    {
        /// <summary>
        /// Initializes a new instance of the FacetError class.
        /// </summary>
        public FacetError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacetError class.
        /// </summary>
        /// <param name="expression">Facet expression, same as in the
        /// corresponding facet request.</param>
        /// <param name="errors">An array containing detected facet errors with
        /// details.</param>
        public FacetError(string expression, IList<ErrorDetails> errors)
            : base(expression)
        {
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array containing detected facet errors with
        /// details.
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<ErrorDetails> Errors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Errors == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Errors");
            }
            if (Errors != null)
            {
                foreach (var element in Errors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
