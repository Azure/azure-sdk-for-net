// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PackagesOperations.
    /// </summary>
    public static partial class PackagesOperationsExtensions
    {
            /// <summary>
            /// Lists all the packages under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static IPage<PackageResource> ListByTestBaseAccount(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.ListByTestBaseAccountAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the packages under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PackageResource>> ListByTestBaseAccountAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTestBaseAccountWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Create(this IPackagesOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.CreateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> CreateAsync(this IPackagesOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Update(this IPackagesOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.UpdateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> UpdateAsync(this IPackagesOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackagesDeleteHeaders Delete(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.DeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackagesDeleteHeaders> DeleteAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource Get(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> GetAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackagesHardDeleteHeaders HardDelete(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.HardDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackagesHardDeleteHeaders> HardDeleteAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HardDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the download URL of a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static DownloadURLResponse GetDownloadURL(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.GetDownloadURLAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the download URL of a package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadURLResponse> GetDownloadURLAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadURLWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Trigger a test run on the package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the Test Base Package to start a Test Run.
            /// </param>
            public static PackagesRunTestHeaders RunTest(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, PackageRunTestParameters parameters = default(PackageRunTestParameters))
            {
                return operations.RunTestAsync(resourceGroupName, testBaseAccountName, packageName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Trigger a test run on the package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the Test Base Package to start a Test Run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackagesRunTestHeaders> RunTestAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, PackageRunTestParameters parameters = default(PackageRunTestParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunTestWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource BeginCreate(this IPackagesOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginCreateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace (overwrite/recreate, with potential downtime) a Test Base
            /// Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> BeginCreateAsync(this IPackagesOperations operations, PackageResource parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackageResource BeginUpdate(this IPackagesOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginUpdateAsync(parameters, resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a Test Base Package.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackageResource> BeginUpdateAsync(this IPackagesOperations operations, PackageUpdateParameters parameters, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackagesDeleteHeaders BeginDelete(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackagesDeleteHeaders> BeginDeleteAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            public static PackagesHardDeleteHeaders BeginHardDelete(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName)
            {
                return operations.BeginHardDeleteAsync(resourceGroupName, testBaseAccountName, packageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Hard Delete a Test Base Package.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='packageName'>
            /// The resource name of the Test Base Package.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PackagesHardDeleteHeaders> BeginHardDeleteAsync(this IPackagesOperations operations, string resourceGroupName, string testBaseAccountName, string packageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginHardDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, packageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all the packages under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PackageResource> ListByTestBaseAccountNext(this IPackagesOperations operations, string nextPageLink)
            {
                return operations.ListByTestBaseAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the packages under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PackageResource>> ListByTestBaseAccountNextAsync(this IPackagesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTestBaseAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
