// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The validation results. There's validation on package when it's created
    /// or updated.
    /// </summary>
    public partial class PackageValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the PackageValidationResult class.
        /// </summary>
        public PackageValidationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PackageValidationResult class.
        /// </summary>
        /// <param name="validationName">Validation name.</param>
        /// <param name="isValid">Indicates whether the package passed the
        /// validation.</param>
        /// <param name="errors">Error information.</param>
        public PackageValidationResult(string validationName = default(string), bool? isValid = default(bool?), IList<string> errors = default(IList<string>))
        {
            ValidationName = validationName;
            IsValid = isValid;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets validation name.
        /// </summary>
        [JsonProperty(PropertyName = "validationName")]
        public string ValidationName { get; private set; }

        /// <summary>
        /// Gets indicates whether the package passed the validation.
        /// </summary>
        [JsonProperty(PropertyName = "isValid")]
        public bool? IsValid { get; private set; }

        /// <summary>
        /// Gets error information.
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<string> Errors { get; private set; }

    }
}
