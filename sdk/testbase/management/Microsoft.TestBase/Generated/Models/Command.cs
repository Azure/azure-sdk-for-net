// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The command used in the test
    /// </summary>
    public partial class Command
    {
        /// <summary>
        /// Initializes a new instance of the Command class.
        /// </summary>
        public Command()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Command class.
        /// </summary>
        /// <param name="name">The name of the command.</param>
        /// <param name="action">The action of the command. Possible values
        /// include: 'Install', 'Launch', 'Close', 'Uninstall',
        /// 'Custom'</param>
        /// <param name="contentType">The type of command content. Possible
        /// values include: 'Inline', 'File', 'Path'</param>
        /// <param name="content">The content of the command. The content
        /// depends on source type.</param>
        /// <param name="runElevated">Specifies whether to run the command as
        /// administrator.</param>
        /// <param name="restartAfter">Specifies whether to restart the VM
        /// after the command executed.</param>
        /// <param name="maxRunTime">Specifies the max run time of the
        /// command.</param>
        /// <param name="runAsInteractive">Specifies whether to run the command
        /// in interactive mode.</param>
        /// <param name="alwaysRun">Specifies whether to run the command even
        /// if a previous command is failed.</param>
        /// <param name="applyUpdateBefore">Specifies whether to apply update
        /// before the command.</param>
        public Command(string name, string action, string contentType, string content, bool? runElevated = default(bool?), bool? restartAfter = default(bool?), int? maxRunTime = default(int?), bool? runAsInteractive = default(bool?), bool? alwaysRun = default(bool?), bool? applyUpdateBefore = default(bool?))
        {
            Name = name;
            Action = action;
            ContentType = contentType;
            Content = content;
            RunElevated = runElevated;
            RestartAfter = restartAfter;
            MaxRunTime = maxRunTime;
            RunAsInteractive = runAsInteractive;
            AlwaysRun = alwaysRun;
            ApplyUpdateBefore = applyUpdateBefore;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the command.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the action of the command. Possible values include:
        /// 'Install', 'Launch', 'Close', 'Uninstall', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets the type of command content. Possible values include:
        /// 'Inline', 'File', 'Path'
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the content of the command. The content depends on
        /// source type.
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to run the command as administrator.
        /// </summary>
        [JsonProperty(PropertyName = "runElevated")]
        public bool? RunElevated { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to restart the VM after the command
        /// executed.
        /// </summary>
        [JsonProperty(PropertyName = "restartAfter")]
        public bool? RestartAfter { get; set; }

        /// <summary>
        /// Gets or sets specifies the max run time of the command.
        /// </summary>
        [JsonProperty(PropertyName = "maxRunTime")]
        public int? MaxRunTime { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to run the command in interactive
        /// mode.
        /// </summary>
        [JsonProperty(PropertyName = "runAsInteractive")]
        public bool? RunAsInteractive { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to run the command even if a
        /// previous command is failed.
        /// </summary>
        [JsonProperty(PropertyName = "alwaysRun")]
        public bool? AlwaysRun { get; set; }

        /// <summary>
        /// Gets or sets specifies whether to apply update before the command.
        /// </summary>
        [JsonProperty(PropertyName = "applyUpdateBefore")]
        public bool? ApplyUpdateBefore { get; set; }

    }
}
