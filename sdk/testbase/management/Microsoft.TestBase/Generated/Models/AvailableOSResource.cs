// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Available OS resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AvailableOSResource : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the AvailableOSResource class.
        /// </summary>
        public AvailableOSResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AvailableOSResource class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        /// <param name="osId">The Id of an Available OS of a Test Base
        /// Account.</param>
        /// <param name="osName">The name of an Available OS of a Test Base
        /// Account.</param>
        /// <param name="osVersion">The version of an Available OS of a Test
        /// Base Account.</param>
        /// <param name="insiderChannel">The insider channel of an Available OS
        /// of a Test Base Account.</param>
        /// <param name="osUpdateType">The OS update type of an Available OS of
        /// a Test Base Account.</param>
        /// <param name="osPlatform">The Platform of an Available OS of a Test
        /// Base Account.</param>
        public AvailableOSResource(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string osId = default(string), string osName = default(string), string osVersion = default(string), string insiderChannel = default(string), string osUpdateType = default(string), string osPlatform = default(string))
            : base(id, name, type)
        {
            SystemData = systemData;
            OsId = osId;
            OsName = osName;
            OsVersion = osVersion;
            InsiderChannel = insiderChannel;
            OsUpdateType = osUpdateType;
            OsPlatform = osPlatform;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets or sets the Id of an Available OS of a Test Base Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osId")]
        public string OsId { get; set; }

        /// <summary>
        /// Gets or sets the name of an Available OS of a Test Base Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets the version of an Available OS of a Test Base Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osVersion")]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or sets the insider channel of an Available OS of a Test Base
        /// Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.insiderChannel")]
        public string InsiderChannel { get; set; }

        /// <summary>
        /// Gets or sets the OS update type of an Available OS of a Test Base
        /// Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osUpdateType")]
        public string OsUpdateType { get; set; }

        /// <summary>
        /// Gets or sets the Platform of an Available OS of a Test Base
        /// Account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.osPlatform")]
        public string OsPlatform { get; set; }

    }
}
