// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters supplied to update a Test Base Package.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PackageUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the PackageUpdateParameters class.
        /// </summary>
        public PackageUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PackageUpdateParameters class.
        /// </summary>
        /// <param name="targetOSList">Specifies the target OSs of specific OS
        /// Update types.</param>
        /// <param name="flightingRing">The flighting ring for feature
        /// update.</param>
        /// <param name="isEnabled">Specifies whether the package is enabled.
        /// It doesn't schedule test for package which is not enabled.</param>
        /// <param name="blobPath">The file name of the package.</param>
        /// <param name="tests">The detailed test information.</param>
        /// <param name="tags">The tags of the Package.</param>
        public PackageUpdateParameters(IList<TargetOSInfo> targetOSList = default(IList<TargetOSInfo>), string flightingRing = default(string), bool? isEnabled = default(bool?), string blobPath = default(string), IList<Test> tests = default(IList<Test>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            TargetOSList = targetOSList;
            FlightingRing = flightingRing;
            IsEnabled = isEnabled;
            BlobPath = blobPath;
            Tests = tests;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the target OSs of specific OS Update types.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetOSList")]
        public IList<TargetOSInfo> TargetOSList { get; set; }

        /// <summary>
        /// Gets or sets the flighting ring for feature update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.flightingRing")]
        public string FlightingRing { get; set; }

        /// <summary>
        /// Gets or sets specifies whether the package is enabled. It doesn't
        /// schedule test for package which is not enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the file name of the package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.blobPath")]
        public string BlobPath { get; set; }

        /// <summary>
        /// Gets or sets the detailed test information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tests")]
        public IList<Test> Tests { get; set; }

        /// <summary>
        /// Gets or sets the tags of the Package.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
