// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FlightingRingsOperations.
    /// </summary>
    public static partial class FlightingRingsOperationsExtensions
    {
            /// <summary>
            /// Lists all the flighting rings of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static IPage<FlightingRingResource> List(this IFlightingRingsOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.ListAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the flighting rings of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FlightingRingResource>> ListAsync(this IFlightingRingsOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a flighting ring of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='flightingRingResourceName'>
            /// The resource name of a flighting ring.
            /// </param>
            public static FlightingRingResource Get(this IFlightingRingsOperations operations, string resourceGroupName, string testBaseAccountName, string flightingRingResourceName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName, flightingRingResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a flighting ring of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='flightingRingResourceName'>
            /// The resource name of a flighting ring.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FlightingRingResource> GetAsync(this IFlightingRingsOperations operations, string resourceGroupName, string testBaseAccountName, string flightingRingResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, flightingRingResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the flighting rings of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<FlightingRingResource> ListNext(this IFlightingRingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the flighting rings of a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FlightingRingResource>> ListNextAsync(this IFlightingRingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
