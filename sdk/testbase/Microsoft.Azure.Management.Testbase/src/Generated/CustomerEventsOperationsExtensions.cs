// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomerEventsOperations.
    /// </summary>
    public static partial class CustomerEventsOperationsExtensions
    {
            /// <summary>
            /// Lists all notification events subscribed under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            public static IPage<CustomerEventResource> ListByTestBaseAccount(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName)
            {
                return operations.ListByTestBaseAccountAsync(resourceGroupName, testBaseAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all notification events subscribed under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomerEventResource>> ListByTestBaseAccountAsync(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTestBaseAccountWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base CustomerEvent.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            public static CustomerEventResource Create(this ICustomerEventsOperations operations, CustomerEventResource parameters, string resourceGroupName, string testBaseAccountName, string customerEventName)
            {
                return operations.CreateAsync(parameters, resourceGroupName, testBaseAccountName, customerEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base CustomerEvent.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEventResource> CreateAsync(this ICustomerEventsOperations operations, CustomerEventResource parameters, string resourceGroupName, string testBaseAccountName, string customerEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, customerEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            public static CustomerEventsDeleteHeaders Delete(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName)
            {
                return operations.DeleteAsync(resourceGroupName, testBaseAccountName, customerEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEventsDeleteHeaders> DeleteAsync(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, customerEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a Test Base CustomerEvent.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            public static CustomerEventResource Get(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName)
            {
                return operations.GetAsync(resourceGroupName, testBaseAccountName, customerEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Test Base CustomerEvent.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEventResource> GetAsync(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, customerEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or replace a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base CustomerEvent.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            public static CustomerEventResource BeginCreate(this ICustomerEventsOperations operations, CustomerEventResource parameters, string resourceGroupName, string testBaseAccountName, string customerEventName)
            {
                return operations.BeginCreateAsync(parameters, resourceGroupName, testBaseAccountName, customerEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or replace a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to create a Test Base CustomerEvent.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEventResource> BeginCreateAsync(this ICustomerEventsOperations operations, CustomerEventResource parameters, string resourceGroupName, string testBaseAccountName, string customerEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(parameters, resourceGroupName, testBaseAccountName, customerEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            public static CustomerEventsDeleteHeaders BeginDelete(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, testBaseAccountName, customerEventName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Test Base Customer Event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource.
            /// </param>
            /// <param name='testBaseAccountName'>
            /// The resource name of the Test Base Account.
            /// </param>
            /// <param name='customerEventName'>
            /// The resource name of the Test Base Customer event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerEventsDeleteHeaders> BeginDeleteAsync(this ICustomerEventsOperations operations, string resourceGroupName, string testBaseAccountName, string customerEventName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, testBaseAccountName, customerEventName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all notification events subscribed under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CustomerEventResource> ListByTestBaseAccountNext(this ICustomerEventsOperations operations, string nextPageLink)
            {
                return operations.ListByTestBaseAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all notification events subscribed under a Test Base Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomerEventResource>> ListByTestBaseAccountNextAsync(this ICustomerEventsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByTestBaseAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
