// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The summary of a test.
    /// </summary>
    public partial class OSUpdateTestSummary
    {
        /// <summary>
        /// Initializes a new instance of the OSUpdateTestSummary class.
        /// </summary>
        public OSUpdateTestSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OSUpdateTestSummary class.
        /// </summary>
        /// <param name="osName">The operating system name. e.g. Windows 10
        /// 1809.</param>
        /// <param name="releaseName">The name of the tested release (OS
        /// update).</param>
        /// <param name="buildVersion">The build version of the tested release
        /// (OS update)</param>
        /// <param name="buildRevision">The build revision of the tested
        /// release (OS update)</param>
        /// <param name="releaseVersionDate">The release version date.</param>
        /// <param name="flightingRing">The flighting ring, only for release of
        /// feature updates.</param>
        /// <param name="executionStatus">The execution status of the test.
        /// Possible values include: 'None', 'InProgress', 'Processing',
        /// 'Completed', 'NotExecuted', 'Incomplete', 'Failed',
        /// 'Succeeded'</param>
        /// <param name="testStatus">The status of the test. Possible values
        /// include: 'None', 'TestExecutionInProgress', 'DataProcessing',
        /// 'TestFailure', 'UpdateFailure', 'TestAndUpdateFailure',
        /// 'InfrastructureFailure', 'Completed'</param>
        /// <param name="grade">The grade of the test. Possible values include:
        /// 'None', 'NotAvailable', 'Pass', 'Fail'</param>
        /// <param name="testRunTime">The run time of the test.</param>
        /// <param name="testType">The test type of the package</param>
        public OSUpdateTestSummary(string osName = default(string), string releaseName = default(string), string buildVersion = default(string), string buildRevision = default(string), System.DateTime? releaseVersionDate = default(System.DateTime?), string flightingRing = default(string), string executionStatus = default(string), string testStatus = default(string), string grade = default(string), string testRunTime = default(string), string testType = default(string))
        {
            OsName = osName;
            ReleaseName = releaseName;
            BuildVersion = buildVersion;
            BuildRevision = buildRevision;
            ReleaseVersionDate = releaseVersionDate;
            FlightingRing = flightingRing;
            ExecutionStatus = executionStatus;
            TestStatus = testStatus;
            Grade = grade;
            TestRunTime = testRunTime;
            TestType = testType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the operating system name. e.g. Windows 10 1809.
        /// </summary>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets the name of the tested release (OS update).
        /// </summary>
        [JsonProperty(PropertyName = "releaseName")]
        public string ReleaseName { get; set; }

        /// <summary>
        /// Gets or sets the build version of the tested release (OS update)
        /// </summary>
        [JsonProperty(PropertyName = "buildVersion")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Gets or sets the build revision of the tested release (OS update)
        /// </summary>
        [JsonProperty(PropertyName = "buildRevision")]
        public string BuildRevision { get; set; }

        /// <summary>
        /// Gets or sets the release version date.
        /// </summary>
        [JsonProperty(PropertyName = "releaseVersionDate")]
        public System.DateTime? ReleaseVersionDate { get; set; }

        /// <summary>
        /// Gets or sets the flighting ring, only for release of feature
        /// updates.
        /// </summary>
        [JsonProperty(PropertyName = "flightingRing")]
        public string FlightingRing { get; set; }

        /// <summary>
        /// Gets or sets the execution status of the test. Possible values
        /// include: 'None', 'InProgress', 'Processing', 'Completed',
        /// 'NotExecuted', 'Incomplete', 'Failed', 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "executionStatus")]
        public string ExecutionStatus { get; set; }

        /// <summary>
        /// Gets or sets the status of the test. Possible values include:
        /// 'None', 'TestExecutionInProgress', 'DataProcessing', 'TestFailure',
        /// 'UpdateFailure', 'TestAndUpdateFailure', 'InfrastructureFailure',
        /// 'Completed'
        /// </summary>
        [JsonProperty(PropertyName = "testStatus")]
        public string TestStatus { get; set; }

        /// <summary>
        /// Gets or sets the grade of the test. Possible values include:
        /// 'None', 'NotAvailable', 'Pass', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "grade")]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or sets the run time of the test.
        /// </summary>
        [JsonProperty(PropertyName = "testRunTime")]
        public string TestRunTime { get; set; }

        /// <summary>
        /// Gets or sets the test type of the package
        /// </summary>
        [JsonProperty(PropertyName = "testType")]
        public string TestType { get; set; }

    }
}
