// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Test Base Package resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PackageResource : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the PackageResource class.
        /// </summary>
        public PackageResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PackageResource class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="applicationName">Application name</param>
        /// <param name="version">Application version</param>
        /// <param name="targetOSList">Specifies the target OSs of specific OS
        /// Update types.</param>
        /// <param name="flightingRing">The flighting ring for feature
        /// update.</param>
        /// <param name="blobPath">The file path of the package.</param>
        /// <param name="tests">The detailed test information.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">The tags of the resource.</param>
        /// <param name="etag">Resource Etag.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource</param>
        /// <param name="provisioningState">The provisioning state of the
        /// resource. Possible values include: 'Succeeded', 'Failed',
        /// 'Cancelled', 'Creating', 'Deleting', 'Updating'</param>
        /// <param name="testTypes">OOB, functional or both. Mapped to the data
        /// in 'tests' property.</param>
        /// <param name="packageStatus">The status of the package. Possible
        /// values include: 'Unknown', 'Registered', 'Ready', 'Error',
        /// 'ValidatingPackage', 'PreValidationCheckPass', 'Deleted',
        /// 'ValidationLongerThanUsual', 'VerifyingPackage'</param>
        /// <param name="lastModifiedTime">The UTC timestamp when the package
        /// was last modified.</param>
        /// <param name="isEnabled">Flag showing that whether the package is
        /// enabled. It doesn't schedule test for package which is not
        /// enabled.</param>
        /// <param name="validationResults">The validation results. There's
        /// validation on package when it's created or updated.</param>
        public PackageResource(string location, string applicationName, string version, IList<TargetOSInfo> targetOSList, string flightingRing, string blobPath, IList<Test> tests, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), IList<string> testTypes = default(IList<string>), string packageStatus = default(string), System.DateTime? lastModifiedTime = default(System.DateTime?), bool? isEnabled = default(bool?), IList<PackageValidationResult> validationResults = default(IList<PackageValidationResult>))
            : base(location, id, name, type, tags, etag)
        {
            SystemData = systemData;
            ProvisioningState = provisioningState;
            ApplicationName = applicationName;
            Version = version;
            TestTypes = testTypes;
            TargetOSList = targetOSList;
            PackageStatus = packageStatus;
            LastModifiedTime = lastModifiedTime;
            FlightingRing = flightingRing;
            IsEnabled = isEnabled;
            BlobPath = blobPath;
            ValidationResults = validationResults;
            Tests = tests;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the system metadata relating to this resource
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the resource. Possible
        /// values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating',
        /// 'Deleting', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets application name
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationName")]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or sets application version
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets OOB, functional or both. Mapped to the data in 'tests'
        /// property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.testTypes")]
        public IList<string> TestTypes { get; private set; }

        /// <summary>
        /// Gets or sets specifies the target OSs of specific OS Update types.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetOSList")]
        public IList<TargetOSInfo> TargetOSList { get; set; }

        /// <summary>
        /// Gets the status of the package. Possible values include: 'Unknown',
        /// 'Registered', 'Ready', 'Error', 'ValidatingPackage',
        /// 'PreValidationCheckPass', 'Deleted', 'ValidationLongerThanUsual',
        /// 'VerifyingPackage'
        /// </summary>
        [JsonProperty(PropertyName = "properties.packageStatus")]
        public string PackageStatus { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the package was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; private set; }

        /// <summary>
        /// Gets or sets the flighting ring for feature update.
        /// </summary>
        [JsonProperty(PropertyName = "properties.flightingRing")]
        public string FlightingRing { get; set; }

        /// <summary>
        /// Gets flag showing that whether the package is enabled. It doesn't
        /// schedule test for package which is not enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isEnabled")]
        public bool? IsEnabled { get; private set; }

        /// <summary>
        /// Gets or sets the file path of the package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.blobPath")]
        public string BlobPath { get; set; }

        /// <summary>
        /// Gets the validation results. There's validation on package when
        /// it's created or updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.validationResults")]
        public IList<PackageValidationResult> ValidationResults { get; private set; }

        /// <summary>
        /// Gets or sets the detailed test information.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tests")]
        public IList<Test> Tests { get; set; }

    }
}
