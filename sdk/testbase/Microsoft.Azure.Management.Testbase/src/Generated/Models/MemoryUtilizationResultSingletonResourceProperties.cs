// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of Memory Utilization Result.
    /// </summary>
    [Newtonsoft.Json.JsonObject("MemoryUtilization")]
    public partial class MemoryUtilizationResultSingletonResourceProperties : AnalysisResultSingletonResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MemoryUtilizationResultSingletonResourceProperties class.
        /// </summary>
        public MemoryUtilizationResultSingletonResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MemoryUtilizationResultSingletonResourceProperties class.
        /// </summary>
        /// <param name="grade">The grade of the test. Possible values include:
        /// 'None', 'NotAvailable', 'Pass', 'Fail'</param>
        /// <param name="memoryUtilizationResults">The result array
        /// data.</param>
        public MemoryUtilizationResultSingletonResourceProperties(string grade = default(string), IList<UtilizationResult> memoryUtilizationResults = default(IList<UtilizationResult>))
            : base(grade)
        {
            MemoryUtilizationResults = memoryUtilizationResults;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the result array data.
        /// </summary>
        [JsonProperty(PropertyName = "memoryUtilizationResults")]
        public IList<UtilizationResult> MemoryUtilizationResults { get; set; }

    }
}
