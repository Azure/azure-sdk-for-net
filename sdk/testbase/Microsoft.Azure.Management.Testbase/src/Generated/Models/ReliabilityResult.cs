// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Reliability Result.
    /// </summary>
    public partial class ReliabilityResult
    {
        /// <summary>
        /// Initializes a new instance of the ReliabilityResult class.
        /// </summary>
        public ReliabilityResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReliabilityResult class.
        /// </summary>
        /// <param name="fileName">File name.</param>
        /// <param name="launchCount">Count of number of launches.</param>
        /// <param name="crashCount">Count of number of crashes.</param>
        /// <param name="hangCount">Count of number of hangs.</param>
        /// <param name="regressionGrade">The regression grade. Possible values
        /// include: 'None', 'NotAvailable', 'Pass', 'Fail'</param>
        /// <param name="crashRegressionGrade">The statistic regression grade
        /// for crash signal. Possible values include: 'None', 'NotAvailable',
        /// 'Pass', 'Fail'</param>
        /// <param name="crashRegressionTestDetails">Details related to the
        /// crash regression analysis.</param>
        /// <param name="hangRegressionGrade">The statistic regression grade
        /// for hang signal. Possible values include: 'None', 'NotAvailable',
        /// 'Pass', 'Fail'</param>
        /// <param name="hangRegressionTestDetails">Details related to the hang
        /// regression analysis.</param>
        public ReliabilityResult(string fileName = default(string), int? launchCount = default(int?), int? crashCount = default(int?), int? hangCount = default(int?), string regressionGrade = default(string), string crashRegressionGrade = default(string), RegressionTestDetails crashRegressionTestDetails = default(RegressionTestDetails), string hangRegressionGrade = default(string), RegressionTestDetails hangRegressionTestDetails = default(RegressionTestDetails))
        {
            FileName = fileName;
            LaunchCount = launchCount;
            CrashCount = crashCount;
            HangCount = hangCount;
            RegressionGrade = regressionGrade;
            CrashRegressionGrade = crashRegressionGrade;
            CrashRegressionTestDetails = crashRegressionTestDetails;
            HangRegressionGrade = hangRegressionGrade;
            HangRegressionTestDetails = hangRegressionTestDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets file name.
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets count of number of launches.
        /// </summary>
        [JsonProperty(PropertyName = "launchCount")]
        public int? LaunchCount { get; set; }

        /// <summary>
        /// Gets or sets count of number of crashes.
        /// </summary>
        [JsonProperty(PropertyName = "crashCount")]
        public int? CrashCount { get; set; }

        /// <summary>
        /// Gets or sets count of number of hangs.
        /// </summary>
        [JsonProperty(PropertyName = "hangCount")]
        public int? HangCount { get; set; }

        /// <summary>
        /// Gets or sets the regression grade. Possible values include: 'None',
        /// 'NotAvailable', 'Pass', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "regressionGrade")]
        public string RegressionGrade { get; set; }

        /// <summary>
        /// Gets or sets the statistic regression grade for crash signal.
        /// Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "crashRegressionGrade")]
        public string CrashRegressionGrade { get; set; }

        /// <summary>
        /// Gets or sets details related to the crash regression analysis.
        /// </summary>
        [JsonProperty(PropertyName = "crashRegressionTestDetails")]
        public RegressionTestDetails CrashRegressionTestDetails { get; set; }

        /// <summary>
        /// Gets or sets the statistic regression grade for hang signal.
        /// Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
        /// </summary>
        [JsonProperty(PropertyName = "hangRegressionGrade")]
        public string HangRegressionGrade { get; set; }

        /// <summary>
        /// Gets or sets details related to the hang regression analysis.
        /// </summary>
        [JsonProperty(PropertyName = "hangRegressionTestDetails")]
        public RegressionTestDetails HangRegressionTestDetails { get; set; }

    }
}
