// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.TestBase.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The definition of a Test.
    /// </summary>
    public partial class Test
    {
        /// <summary>
        /// Initializes a new instance of the Test class.
        /// </summary>
        public Test()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Test class.
        /// </summary>
        /// <param name="testType">The type of the test. Possible values
        /// include: 'OutOfBoxTest', 'FunctionalTest'</param>
        /// <param name="commands">The commands used in the test.</param>
        /// <param name="validationRunStatus">The status of the validation run
        /// of the package. Possible values include: 'Unknown', 'Pending',
        /// 'Passed', 'Failed'</param>
        /// <param name="validationResultId">Resource identifier of the
        /// validation test result.</param>
        /// <param name="isActive">Indicates if this test is active.It doesn't
        /// schedule test for not active Test.</param>
        public Test(string testType, IList<Command> commands, string validationRunStatus = default(string), string validationResultId = default(string), bool? isActive = default(bool?))
        {
            TestType = testType;
            ValidationRunStatus = validationRunStatus;
            ValidationResultId = validationResultId;
            IsActive = isActive;
            Commands = commands;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the test. Possible values include:
        /// 'OutOfBoxTest', 'FunctionalTest'
        /// </summary>
        [JsonProperty(PropertyName = "testType")]
        public string TestType { get; set; }

        /// <summary>
        /// Gets the status of the validation run of the package. Possible
        /// values include: 'Unknown', 'Pending', 'Passed', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "validationRunStatus")]
        public string ValidationRunStatus { get; private set; }

        /// <summary>
        /// Gets resource identifier of the validation test result.
        /// </summary>
        [JsonProperty(PropertyName = "validationResultId")]
        public string ValidationResultId { get; private set; }

        /// <summary>
        /// Gets or sets indicates if this test is active.It doesn't schedule
        /// test for not active Test.
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or sets the commands used in the test.
        /// </summary>
        [JsonProperty(PropertyName = "commands")]
        public IList<Command> Commands { get; set; }

    }
}
