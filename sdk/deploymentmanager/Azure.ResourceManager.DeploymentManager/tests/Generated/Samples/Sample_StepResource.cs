// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DeploymentManager.Models;

namespace Azure.ResourceManager.DeploymentManager
{
    public partial class Sample_StepResource
    {
        // Create health check step
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateHealthCheckStep()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_health_check_createorupdate.json
            // this example is just showing the usage of "Steps_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StepResource created on azure
            // for more information of creating StepResource, please refer to the document of StepResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string stepName = "healthCheckStep";
            ResourceIdentifier stepResourceId = StepResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, stepName);
            StepResource stepResource = client.GetStepResource(stepResourceId);

            // invoke the operation
            StepResourceData data = new StepResourceData(new AzureLocation("centralus"), new StepProperties()
            {
                StepType = StepType.HealthCheck,
            })
            {
                Tags =
{
},
            };
            ArmOperation<StepResource> lro = await stepResource.UpdateAsync(WaitUntil.Completed, data);
            StepResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StepResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create wait step
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateWaitStep()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_wait_createorupdate.json
            // this example is just showing the usage of "Steps_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StepResource created on azure
            // for more information of creating StepResource, please refer to the document of StepResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string stepName = "waitStep";
            ResourceIdentifier stepResourceId = StepResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, stepName);
            StepResource stepResource = client.GetStepResource(stepResourceId);

            // invoke the operation
            StepResourceData data = new StepResourceData(new AzureLocation("centralus"), new StepProperties()
            {
                StepType = StepType.Wait,
            })
            {
                Tags =
{
},
            };
            ArmOperation<StepResource> lro = await stepResource.UpdateAsync(WaitUntil.Completed, data);
            StepResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StepResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get deployment step
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetDeploymentStep()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_get.json
            // this example is just showing the usage of "Steps_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StepResource created on azure
            // for more information of creating StepResource, please refer to the document of StepResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string stepName = "waitStep";
            ResourceIdentifier stepResourceId = StepResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, stepName);
            StepResource stepResource = client.GetStepResource(stepResourceId);

            // invoke the operation
            StepResource result = await stepResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StepResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete deployment step
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteDeploymentStep()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_delete.json
            // this example is just showing the usage of "Steps_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this StepResource created on azure
            // for more information of creating StepResource, please refer to the document of StepResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string stepName = "deploymentStep1";
            ResourceIdentifier stepResourceId = StepResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, stepName);
            StepResource stepResource = client.GetStepResource(stepResourceId);

            // invoke the operation
            await stepResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
