// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DeploymentManager.Models;

namespace Azure.ResourceManager.DeploymentManager
{
    public partial class Sample_ArtifactSourceResource
    {
        // Create artifact source
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateArtifactSource()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate.json
            // this example is just showing the usage of "ArtifactSources_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ArtifactSourceResource created on azure
            // for more information of creating ArtifactSourceResource, please refer to the document of ArtifactSourceResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string artifactSourceName = "myArtifactSource";
            ResourceIdentifier artifactSourceResourceId = ArtifactSourceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, artifactSourceName);
            ArtifactSourceResource artifactSource = client.GetArtifactSourceResource(artifactSourceResourceId);

            // invoke the operation
            ArtifactSourceData data = new ArtifactSourceData(new AzureLocation("centralus"))
            {
                SourceType = "AzureStorage",
                Authentication = new Authentication()
                {
                    AuthenticationType = "Sas",
                },
                Tags =
{
},
            };
            ArmOperation<ArtifactSourceResource> lro = await artifactSource.UpdateAsync(WaitUntil.Completed, data);
            ArtifactSourceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ArtifactSourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create artifact source with artifact root, an offset into the storage container
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateArtifactSourceWithArtifactRootAnOffsetIntoTheStorageContainer()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate_artifactroot.json
            // this example is just showing the usage of "ArtifactSources_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ArtifactSourceResource created on azure
            // for more information of creating ArtifactSourceResource, please refer to the document of ArtifactSourceResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string artifactSourceName = "myArtifactSource";
            ResourceIdentifier artifactSourceResourceId = ArtifactSourceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, artifactSourceName);
            ArtifactSourceResource artifactSource = client.GetArtifactSourceResource(artifactSourceResourceId);

            // invoke the operation
            ArtifactSourceData data = new ArtifactSourceData(new AzureLocation("centralus"))
            {
                SourceType = "AzureStorage",
                ArtifactRoot = "1.0.0.0",
                Authentication = new Authentication()
                {
                    AuthenticationType = "Sas",
                },
                Tags =
{
},
            };
            ArmOperation<ArtifactSourceResource> lro = await artifactSource.UpdateAsync(WaitUntil.Completed, data);
            ArtifactSourceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ArtifactSourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get artifact source
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetArtifactSource()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_get.json
            // this example is just showing the usage of "ArtifactSources_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ArtifactSourceResource created on azure
            // for more information of creating ArtifactSourceResource, please refer to the document of ArtifactSourceResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string artifactSourceName = "myArtifactSource";
            ResourceIdentifier artifactSourceResourceId = ArtifactSourceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, artifactSourceName);
            ArtifactSourceResource artifactSource = client.GetArtifactSourceResource(artifactSourceResourceId);

            // invoke the operation
            ArtifactSourceResource result = await artifactSource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ArtifactSourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete artifact source
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteArtifactSource()
        {
            // Generated from example definition: specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_delete.json
            // this example is just showing the usage of "ArtifactSources_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ArtifactSourceResource created on azure
            // for more information of creating ArtifactSourceResource, please refer to the document of ArtifactSourceResource
            string subscriptionId = "caac1590-e859-444f-a9e0-62091c0f5929";
            string resourceGroupName = "myResourceGroup";
            string artifactSourceName = "myArtifactSource";
            ResourceIdentifier artifactSourceResourceId = ArtifactSourceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, artifactSourceName);
            ArtifactSourceResource artifactSource = client.GetArtifactSourceResource(artifactSourceResourceId);

            // invoke the operation
            await artifactSource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
