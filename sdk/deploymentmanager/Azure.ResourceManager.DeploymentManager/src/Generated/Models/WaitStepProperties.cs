// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DeploymentManager.Models
{
    /// <summary> Defines the properties of a Wait step. </summary>
    public partial class WaitStepProperties : StepProperties
    {
        /// <summary> Initializes a new instance of <see cref="WaitStepProperties"/>. </summary>
        /// <param name="attributes"> The Wait attributes. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="attributes"/> is null. </exception>
        public WaitStepProperties(WaitStepAttributes attributes)
        {
            Argument.AssertNotNull(attributes, nameof(attributes));

            Attributes = attributes;
            StepType = StepType.Wait;
        }

        /// <summary> Initializes a new instance of <see cref="WaitStepProperties"/>. </summary>
        /// <param name="stepType"> The type of step. </param>
        /// <param name="attributes"> The Wait attributes. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal WaitStepProperties(StepType stepType, WaitStepAttributes attributes, Dictionary<string, BinaryData> rawData) : base(stepType, rawData)
        {
            Attributes = attributes;
            StepType = stepType;
        }

        /// <summary> Initializes a new instance of <see cref="WaitStepProperties"/> for deserialization. </summary>
        internal WaitStepProperties()
        {
        }

        /// <summary> The Wait attributes. </summary>
        internal WaitStepAttributes Attributes { get; set; }
        /// <summary> The duration in ISO 8601 format of how long the wait should be. </summary>
        public TimeSpan? AttributesDuration
        {
            get => Attributes is null ? default(TimeSpan?) : Attributes.Duration;
            set
            {
                Attributes = value.HasValue ? new WaitStepAttributes(value.Value) : null;
            }
        }
    }
}
