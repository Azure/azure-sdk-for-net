// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DeploymentManager.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeploymentManager
{
    public partial class RolloutData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                writer.WriteObjectValue(Identity);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(BuildVersion))
            {
                writer.WritePropertyName("buildVersion"u8);
                writer.WriteStringValue(BuildVersion);
            }
            if (Core.Optional.IsDefined(ArtifactSourceId))
            {
                writer.WritePropertyName("artifactSourceId"u8);
                writer.WriteStringValue(ArtifactSourceId);
            }
            if (Core.Optional.IsDefined(TargetServiceTopologyId))
            {
                writer.WritePropertyName("targetServiceTopologyId"u8);
                writer.WriteStringValue(TargetServiceTopologyId);
            }
            if (Core.Optional.IsCollectionDefined(StepGroups))
            {
                writer.WritePropertyName("stepGroups"u8);
                writer.WriteStartArray();
                foreach (var item in StepGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static RolloutData DeserializeRolloutData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<Identity> identity = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> buildVersion = default;
            Core.Optional<string> artifactSourceId = default;
            Core.Optional<string> targetServiceTopologyId = default;
            Core.Optional<IList<StepGroup>> stepGroups = default;
            Core.Optional<string> status = default;
            Core.Optional<int> totalRetryAttempts = default;
            Core.Optional<RolloutOperationInfo> operationInfo = default;
            Core.Optional<IReadOnlyList<Service>> services = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = Identity.DeserializeIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("buildVersion"u8))
                        {
                            buildVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("artifactSourceId"u8))
                        {
                            artifactSourceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("targetServiceTopologyId"u8))
                        {
                            targetServiceTopologyId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("stepGroups"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StepGroup> array = new List<StepGroup>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StepGroup.DeserializeStepGroup(item));
                            }
                            stepGroups = array;
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            status = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("totalRetryAttempts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalRetryAttempts = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("operationInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            operationInfo = RolloutOperationInfo.DeserializeRolloutOperationInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("services"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<Service> array = new List<Service>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Service.DeserializeService(item));
                            }
                            services = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new RolloutData(id, name, type, systemData.Value, Core.Optional.ToDictionary(tags), location, identity.Value, buildVersion.Value, artifactSourceId.Value, targetServiceTopologyId.Value, Core.Optional.ToList(stepGroups), status.Value, Core.Optional.ToNullable(totalRetryAttempts), operationInfo.Value, Core.Optional.ToList(services));
        }
    }
}
