// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeploymentManager
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DeploymentManager. </summary>
    public static partial class DeploymentManagerExtensions
    {
        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new ResourceGroupResourceExtensionClient(client, resource.Id);
            });
        }

        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ResourceGroupResourceExtensionClient(client, scope);
            });
        }
        #region ServiceTopologyResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceTopologyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceTopologyResource.CreateResourceIdentifier" /> to create a <see cref="ServiceTopologyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceTopologyResource" /> object. </returns>
        public static ServiceTopologyResource GetServiceTopologyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceTopologyResource.ValidateResourceId(id);
                return new ServiceTopologyResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource" /> object. </returns>
        public static ServiceResource GetServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceResource.ValidateResourceId(id);
                return new ServiceResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceUnitResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceUnitResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceUnitResource.CreateResourceIdentifier" /> to create a <see cref="ServiceUnitResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceUnitResource" /> object. </returns>
        public static ServiceUnitResource GetServiceUnitResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceUnitResource.ValidateResourceId(id);
                return new ServiceUnitResource(client, id);
            }
            );
        }
        #endregion

        #region StepResource
        /// <summary>
        /// Gets an object representing a <see cref="StepResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StepResource.CreateResourceIdentifier" /> to create a <see cref="StepResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StepResource" /> object. </returns>
        public static StepResource GetStepResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StepResource.ValidateResourceId(id);
                return new StepResource(client, id);
            }
            );
        }
        #endregion

        #region RolloutResource
        /// <summary>
        /// Gets an object representing a <see cref="RolloutResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RolloutResource.CreateResourceIdentifier" /> to create a <see cref="RolloutResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RolloutResource" /> object. </returns>
        public static RolloutResource GetRolloutResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RolloutResource.ValidateResourceId(id);
                return new RolloutResource(client, id);
            }
            );
        }
        #endregion

        #region ArtifactSourceResource
        /// <summary>
        /// Gets an object representing an <see cref="ArtifactSourceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactSourceResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactSourceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArtifactSourceResource" /> object. </returns>
        public static ArtifactSourceResource GetArtifactSourceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ArtifactSourceResource.ValidateResourceId(id);
                return new ArtifactSourceResource(client, id);
            }
            );
        }
        #endregion

        /// <summary> Gets a collection of ServiceTopologyResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ServiceTopologyResources and their operations over a ServiceTopologyResource. </returns>
        public static ServiceTopologyResourceCollection GetServiceTopologyResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetServiceTopologyResources();
        }

        /// <summary>
        /// Gets the service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ServiceTopologyResource>> GetServiceTopologyResourceAsync(this ResourceGroupResource resourceGroupResource, string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetServiceTopologyResources().GetAsync(serviceTopologyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ServiceTopologyResource> GetServiceTopologyResource(this ResourceGroupResource resourceGroupResource, string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetServiceTopologyResources().Get(serviceTopologyName, cancellationToken);
        }

        /// <summary> Gets a collection of StepResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of StepResources and their operations over a StepResource. </returns>
        public static StepResourceCollection GetStepResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetStepResources();
        }

        /// <summary>
        /// Gets the step.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Steps_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="stepName"> The name of the deployment step. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="stepName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="stepName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<StepResource>> GetStepResourceAsync(this ResourceGroupResource resourceGroupResource, string stepName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetStepResources().GetAsync(stepName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the step.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Steps_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="stepName"> The name of the deployment step. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="stepName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="stepName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<StepResource> GetStepResource(this ResourceGroupResource resourceGroupResource, string stepName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetStepResources().Get(stepName, cancellationToken);
        }

        /// <summary> Gets a collection of RolloutResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RolloutResources and their operations over a RolloutResource. </returns>
        public static RolloutCollection GetRollouts(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetRollouts();
        }

        /// <summary>
        /// Gets detailed information of a rollout.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Rollouts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="rolloutName"> The rollout name. </param>
        /// <param name="retryAttempt"> Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="rolloutName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="rolloutName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<RolloutResource>> GetRolloutAsync(this ResourceGroupResource resourceGroupResource, string rolloutName, int? retryAttempt = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetRollouts().GetAsync(rolloutName, retryAttempt, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets detailed information of a rollout.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Rollouts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="rolloutName"> The rollout name. </param>
        /// <param name="retryAttempt"> Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="rolloutName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="rolloutName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<RolloutResource> GetRollout(this ResourceGroupResource resourceGroupResource, string rolloutName, int? retryAttempt = null, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetRollouts().Get(rolloutName, retryAttempt, cancellationToken);
        }

        /// <summary> Gets a collection of ArtifactSourceResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ArtifactSourceResources and their operations over a ArtifactSourceResource. </returns>
        public static ArtifactSourceCollection GetArtifactSources(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetArtifactSources();
        }

        /// <summary>
        /// Gets an artifact source.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ArtifactSources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="artifactSourceName"> The name of the artifact source. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="artifactSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactSourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ArtifactSourceResource>> GetArtifactSourceAsync(this ResourceGroupResource resourceGroupResource, string artifactSourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetArtifactSources().GetAsync(artifactSourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an artifact source.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ArtifactSources_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="artifactSourceName"> The name of the artifact source. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="artifactSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="artifactSourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ArtifactSourceResource> GetArtifactSource(this ResourceGroupResource resourceGroupResource, string artifactSourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetArtifactSources().Get(artifactSourceName, cancellationToken);
        }
    }
}
