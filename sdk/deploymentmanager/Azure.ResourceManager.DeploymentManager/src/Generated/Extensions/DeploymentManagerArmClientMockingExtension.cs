// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DeploymentManager;

namespace Azure.ResourceManager.DeploymentManager.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class DeploymentManagerArmClientMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="DeploymentManagerArmClientMockingExtension"/> class for mocking. </summary>
        protected DeploymentManagerArmClientMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DeploymentManagerArmClientMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal DeploymentManagerArmClientMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal DeploymentManagerArmClientMockingExtension(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets an object representing a <see cref="ServiceTopologyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceTopologyResource.CreateResourceIdentifier" /> to create a <see cref="ServiceTopologyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceTopologyResource" /> object. </returns>
        public virtual ServiceTopologyResource GetServiceTopologyResource(ResourceIdentifier id)
        {
            ServiceTopologyResource.ValidateResourceId(id);
            return new ServiceTopologyResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource" /> object. </returns>
        public virtual ServiceResource GetServiceResource(ResourceIdentifier id)
        {
            ServiceResource.ValidateResourceId(id);
            return new ServiceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ServiceUnitResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceUnitResource.CreateResourceIdentifier" /> to create a <see cref="ServiceUnitResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceUnitResource" /> object. </returns>
        public virtual ServiceUnitResource GetServiceUnitResource(ResourceIdentifier id)
        {
            ServiceUnitResource.ValidateResourceId(id);
            return new ServiceUnitResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="StepResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StepResource.CreateResourceIdentifier" /> to create a <see cref="StepResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StepResource" /> object. </returns>
        public virtual StepResource GetStepResource(ResourceIdentifier id)
        {
            StepResource.ValidateResourceId(id);
            return new StepResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="RolloutResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RolloutResource.CreateResourceIdentifier" /> to create a <see cref="RolloutResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RolloutResource" /> object. </returns>
        public virtual RolloutResource GetRolloutResource(ResourceIdentifier id)
        {
            RolloutResource.ValidateResourceId(id);
            return new RolloutResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ArtifactSourceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArtifactSourceResource.CreateResourceIdentifier" /> to create an <see cref="ArtifactSourceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArtifactSourceResource" /> object. </returns>
        public virtual ArtifactSourceResource GetArtifactSourceResource(ResourceIdentifier id)
        {
            ArtifactSourceResource.ValidateResourceId(id);
            return new ArtifactSourceResource(Client, id);
        }
    }
}
