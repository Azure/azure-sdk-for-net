// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DeploymentManager.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeploymentManager
{
    /// <summary>
    /// A class representing the ArtifactSource data model.
    /// The resource that defines the source location where the artifacts are located.
    /// </summary>
    public partial class ArtifactSourceData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of ArtifactSourceData. </summary>
        /// <param name="location"> The location. </param>
        public ArtifactSourceData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of ArtifactSourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sourceType"> The type of artifact source used. </param>
        /// <param name="artifactRoot"> The path from the location that the &apos;authentication&apos; property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. </param>
        /// <param name="authentication">
        /// The authentication method to use to access the artifact source.
        /// Please note <see cref="Authentication"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SasAuthentication"/>.
        /// </param>
        internal ArtifactSourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, string sourceType, string artifactRoot, Authentication authentication) : base(id, name, resourceType, systemData, tags, location)
        {
            SourceType = sourceType;
            ArtifactRoot = artifactRoot;
            Authentication = authentication;
        }

        /// <summary> The type of artifact source used. </summary>
        public string SourceType { get; set; }
        /// <summary> The path from the location that the &apos;authentication&apos; property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. </summary>
        public string ArtifactRoot { get; set; }
        /// <summary>
        /// The authentication method to use to access the artifact source.
        /// Please note <see cref="Authentication"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SasAuthentication"/>.
        /// </summary>
        public Authentication Authentication { get; set; }
    }
}
