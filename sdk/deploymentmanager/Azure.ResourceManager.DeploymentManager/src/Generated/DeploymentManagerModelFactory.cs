// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DeploymentManager;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeploymentManager.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DeploymentManagerModelFactory
    {
        /// <summary> Initializes a new instance of ServiceTopologyResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="artifactSourceId"> The resource Id of the artifact source that contains the artifacts that can be referenced in the service units. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceTopologyResourceData"/> instance for mocking. </returns>
        public static ServiceTopologyResourceData ServiceTopologyResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string artifactSourceId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceTopologyResourceData(id, name, resourceType, systemData, tags, location, artifactSourceId);
        }

        /// <summary> Initializes a new instance of ServiceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceResourceData"/> instance for mocking. </returns>
        public static ServiceResourceData ServiceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string targetLocation = null, string targetSubscriptionId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceResourceData(id, name, resourceType, systemData, tags, location, targetLocation, targetSubscriptionId);
        }

        /// <summary> Initializes a new instance of ServiceProperties. </summary>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetLocation"/> or <paramref name="targetSubscriptionId"/> is null. </exception>
        /// <returns> A new <see cref="Models.ServiceProperties"/> instance for mocking. </returns>
        public static ServiceProperties ServiceProperties(string targetLocation = null, string targetSubscriptionId = null)
        {
            if (targetLocation == null)
            {
                throw new ArgumentNullException(nameof(targetLocation));
            }
            if (targetSubscriptionId == null)
            {
                throw new ArgumentNullException(nameof(targetSubscriptionId));
            }

            return new ServiceProperties(targetLocation, targetSubscriptionId);
        }

        /// <summary> Initializes a new instance of ServiceUnitResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceUnitResourceData"/> instance for mocking. </returns>
        public static ServiceUnitResourceData ServiceUnitResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceUnitResourceData(id, name, resourceType, systemData, tags, location, targetResourceGroup, deploymentMode, artifacts);
        }

        /// <summary> Initializes a new instance of ServiceUnitProperties. </summary>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <returns> A new <see cref="Models.ServiceUnitProperties"/> instance for mocking. </returns>
        public static ServiceUnitProperties ServiceUnitProperties(string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null)
        {
            return new ServiceUnitProperties(targetResourceGroup, deploymentMode, artifacts);
        }

        /// <summary> Initializes a new instance of ServiceUnitArtifacts. </summary>
        /// <param name="templateUri"> The full URI of the ARM template file with the SAS token. </param>
        /// <param name="parametersUri"> The full URI of the ARM parameters file with the SAS token. </param>
        /// <param name="templateArtifactSourceRelativePath"> The path to the ARM template file relative to the artifact source. </param>
        /// <param name="parametersArtifactSourceRelativePath"> The path to the ARM parameters file relative to the artifact source. </param>
        /// <returns> A new <see cref="Models.ServiceUnitArtifacts"/> instance for mocking. </returns>
        public static ServiceUnitArtifacts ServiceUnitArtifacts(Uri templateUri = null, Uri parametersUri = null, string templateArtifactSourceRelativePath = null, string parametersArtifactSourceRelativePath = null)
        {
            return new ServiceUnitArtifacts(templateUri, parametersUri, templateArtifactSourceRelativePath, parametersArtifactSourceRelativePath);
        }

        /// <summary> Initializes a new instance of StepResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// The properties that define the step.
        /// Please note <see cref="StepProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="HealthCheckStepProperties"/> and <see cref="WaitStepProperties"/>.
        /// </param>
        /// <returns> A new <see cref="DeploymentManager.StepResourceData"/> instance for mocking. </returns>
        public static StepResourceData StepResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StepProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StepResourceData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of StepProperties. </summary>
        /// <param name="stepType"> The type of step. </param>
        /// <returns> A new <see cref="Models.StepProperties"/> instance for mocking. </returns>
        public static StepProperties StepProperties(string stepType = null)
        {
            return new UnknownStepProperties(stepType);
        }

        /// <summary> Initializes a new instance of RolloutCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="buildVersion"> The version of the build being deployed. </param>
        /// <param name="artifactSourceId"> The reference to the artifact source resource Id where the payload is located. </param>
        /// <param name="targetServiceTopologyId"> The resource Id of the service topology from which service units are being referenced in step groups to be deployed. </param>
        /// <param name="stepGroups"> The list of step groups that define the orchestration. </param>
        /// <returns> A new <see cref="Models.RolloutCreateOrUpdateContent"/> instance for mocking. </returns>
        public static RolloutCreateOrUpdateContent RolloutCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Identity identity = null, string buildVersion = null, string artifactSourceId = null, string targetServiceTopologyId = null, IEnumerable<StepGroup> stepGroups = null)
        {
            tags ??= new Dictionary<string, string>();
            stepGroups ??= new List<StepGroup>();

            return new RolloutCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, identity, buildVersion, artifactSourceId, targetServiceTopologyId, stepGroups?.ToList());
        }

        /// <summary> Initializes a new instance of StepGroup. </summary>
        /// <param name="name"> The name of the step group. </param>
        /// <param name="dependsOnStepGroups"> The list of step group names on which this step group depends on. </param>
        /// <param name="preDeploymentSteps"> The list of steps to be run before deploying the target. </param>
        /// <param name="deploymentTargetId"> The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId. </param>
        /// <param name="postDeploymentSteps"> The list of steps to be run after deploying the target. </param>
        /// <returns> A new <see cref="Models.StepGroup"/> instance for mocking. </returns>
        public static StepGroup StepGroup(string name = null, IEnumerable<string> dependsOnStepGroups = null, IEnumerable<PrePostStep> preDeploymentSteps = null, string deploymentTargetId = null, IEnumerable<PrePostStep> postDeploymentSteps = null)
        {
            dependsOnStepGroups ??= new List<string>();
            preDeploymentSteps ??= new List<PrePostStep>();
            postDeploymentSteps ??= new List<PrePostStep>();

            return new StepGroup(name, dependsOnStepGroups?.ToList(), preDeploymentSteps?.ToList(), deploymentTargetId, postDeploymentSteps?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="buildVersion"> The version of the build being deployed. </param>
        /// <param name="artifactSourceId"> The reference to the artifact source resource Id where the payload is located. </param>
        /// <param name="targetServiceTopologyId"> The resource Id of the service topology from which service units are being referenced in step groups to be deployed. </param>
        /// <param name="stepGroups"> The list of step groups that define the orchestration. </param>
        /// <param name="status"> The current status of the rollout. </param>
        /// <param name="totalRetryAttempts"> The cardinal count of total number of retries performed on the rollout at a given time. </param>
        /// <param name="operationInfo"> Operational information of the rollout. </param>
        /// <param name="services"> The detailed information on the services being deployed. </param>
        /// <returns> A new <see cref="DeploymentManager.RolloutData"/> instance for mocking. </returns>
        public static RolloutData RolloutData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Identity identity = null, string buildVersion = null, string artifactSourceId = null, string targetServiceTopologyId = null, IEnumerable<StepGroup> stepGroups = null, string status = null, int? totalRetryAttempts = null, RolloutOperationInfo operationInfo = null, IEnumerable<Service> services = null)
        {
            tags ??= new Dictionary<string, string>();
            stepGroups ??= new List<StepGroup>();
            services ??= new List<Service>();

            return new RolloutData(id, name, resourceType, systemData, tags, location, identity, buildVersion, artifactSourceId, targetServiceTopologyId, stepGroups?.ToList(), status, totalRetryAttempts, operationInfo, services?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutOperationInfo. </summary>
        /// <param name="retryAttempt"> The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0. </param>
        /// <param name="skipSucceededOnRetry"> True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise. </param>
        /// <param name="startOn"> The start time of the rollout in UTC. </param>
        /// <param name="endOn"> The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet. </param>
        /// <param name="error"> The detailed error information for any failure. </param>
        /// <returns> A new <see cref="Models.RolloutOperationInfo"/> instance for mocking. </returns>
        public static RolloutOperationInfo RolloutOperationInfo(int? retryAttempt = null, bool? skipSucceededOnRetry = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, ResponseError error = null)
        {
            return new RolloutOperationInfo(retryAttempt, skipSucceededOnRetry, startOn, endOn, error);
        }

        /// <summary> Initializes a new instance of Service. </summary>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="name"> Name of the service. </param>
        /// <param name="serviceUnits"> The detailed information about the units that make up the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetLocation"/> or <paramref name="targetSubscriptionId"/> is null. </exception>
        /// <returns> A new <see cref="Models.Service"/> instance for mocking. </returns>
        public static Service Service(string targetLocation = null, string targetSubscriptionId = null, string name = null, IEnumerable<ServiceUnit> serviceUnits = null)
        {
            if (targetLocation == null)
            {
                throw new ArgumentNullException(nameof(targetLocation));
            }
            if (targetSubscriptionId == null)
            {
                throw new ArgumentNullException(nameof(targetSubscriptionId));
            }
            serviceUnits ??= new List<ServiceUnit>();

            return new Service(targetLocation, targetSubscriptionId, name, serviceUnits?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceUnit. </summary>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <param name="name"> Name of the service unit. </param>
        /// <param name="steps"> Detailed step information, if present. </param>
        /// <returns> A new <see cref="Models.ServiceUnit"/> instance for mocking. </returns>
        public static ServiceUnit ServiceUnit(string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null, string name = null, IEnumerable<RolloutStep> steps = null)
        {
            steps ??= new List<RolloutStep>();

            return new ServiceUnit(targetResourceGroup, deploymentMode, artifacts, name, steps?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutStep. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Current state of the step. </param>
        /// <param name="stepGroup"> The step group the current step is part of. </param>
        /// <param name="operationInfo"> Detailed information of specific action execution. </param>
        /// <param name="resourceOperations"> Set of resource operations that were performed, if any, on an Azure resource. </param>
        /// <param name="messages"> Supplementary informative messages during rollout. </param>
        /// <returns> A new <see cref="Models.RolloutStep"/> instance for mocking. </returns>
        public static RolloutStep RolloutStep(string name = null, string status = null, string stepGroup = null, StepOperationInfo operationInfo = null, IEnumerable<ResourceOperation> resourceOperations = null, IEnumerable<Message> messages = null)
        {
            resourceOperations ??= new List<ResourceOperation>();
            messages ??= new List<Message>();

            return new RolloutStep(name, status, stepGroup, operationInfo, resourceOperations?.ToList(), messages?.ToList());
        }

        /// <summary> Initializes a new instance of StepOperationInfo. </summary>
        /// <param name="deploymentName"> The name of the ARM deployment initiated as part of the step. </param>
        /// <param name="correlationId"> Unique identifier to track the request for ARM-based resources. </param>
        /// <param name="startOn"> Start time of the action in UTC. </param>
        /// <param name="endOn"> End time of the action in UTC. </param>
        /// <param name="lastUpdatedOn"> Last time in UTC this operation was updated. </param>
        /// <param name="error"> The errors, if any, for the action. </param>
        /// <returns> A new <see cref="Models.StepOperationInfo"/> instance for mocking. </returns>
        public static StepOperationInfo StepOperationInfo(string deploymentName = null, string correlationId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? lastUpdatedOn = null, ResponseError error = null)
        {
            return new StepOperationInfo(deploymentName, correlationId, startOn, endOn, lastUpdatedOn, error);
        }

        /// <summary> Initializes a new instance of ResourceOperation. </summary>
        /// <param name="resourceName"> Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template. </param>
        /// <param name="operationId"> Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service. </param>
        /// <param name="resourceType"> Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template. </param>
        /// <param name="provisioningState"> State of the resource deployment. For ARM resources, this is the current provisioning state of the resource. </param>
        /// <param name="statusMessage"> Descriptive information of the resource operation. </param>
        /// <param name="statusCode"> Http status code of the operation. </param>
        /// <returns> A new <see cref="Models.ResourceOperation"/> instance for mocking. </returns>
        public static ResourceOperation ResourceOperation(string resourceName = null, string operationId = null, string resourceType = null, string provisioningState = null, string statusMessage = null, string statusCode = null)
        {
            return new ResourceOperation(resourceName, operationId, resourceType, provisioningState, statusMessage, statusCode);
        }

        /// <summary> Initializes a new instance of Message. </summary>
        /// <param name="timeStamp"> Time in UTC this message was provided. </param>
        /// <param name="messageValue"> The actual message text. </param>
        /// <returns> A new <see cref="Models.Message"/> instance for mocking. </returns>
        public static Message Message(DateTimeOffset? timeStamp = null, string messageValue = null)
        {
            return new Message(timeStamp, messageValue);
        }

        /// <summary> Initializes a new instance of ArtifactSourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sourceType"> The type of artifact source used. </param>
        /// <param name="artifactRoot"> The path from the location that the &apos;authentication&apos; property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. </param>
        /// <param name="authentication">
        /// The authentication method to use to access the artifact source.
        /// Please note <see cref="Authentication"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SasAuthentication"/>.
        /// </param>
        /// <returns> A new <see cref="DeploymentManager.ArtifactSourceData"/> instance for mocking. </returns>
        public static ArtifactSourceData ArtifactSourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string sourceType = null, string artifactRoot = null, Authentication authentication = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArtifactSourceData(id, name, resourceType, systemData, tags, location, sourceType, artifactRoot, authentication);
        }

        /// <summary> Initializes a new instance of Authentication. </summary>
        /// <param name="authenticationType"> The authentication type. </param>
        /// <returns> A new <see cref="Models.Authentication"/> instance for mocking. </returns>
        public static Authentication Authentication(string authenticationType = null)
        {
            return new UnknownAuthentication(authenticationType);
        }

        /// <summary> Initializes a new instance of SasAuthentication. </summary>
        /// <param name="sasUri"> The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot. </param>
        /// <returns> A new <see cref="Models.SasAuthentication"/> instance for mocking. </returns>
        public static SasAuthentication SasAuthentication(Uri sasUri = null)
        {
            return new SasAuthentication("Sas", sasUri);
        }

        /// <summary> Initializes a new instance of HealthCheckStepProperties. </summary>
        /// <param name="attributes">
        /// The health check step attributes
        /// Please note <see cref="HealthCheckStepAttributes"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RestHealthCheckStepAttributes"/>.
        /// </param>
        /// <returns> A new <see cref="Models.HealthCheckStepProperties"/> instance for mocking. </returns>
        public static HealthCheckStepProperties HealthCheckStepProperties(HealthCheckStepAttributes attributes = null)
        {
            return new HealthCheckStepProperties("HealthCheck", attributes);
        }

        /// <summary> Initializes a new instance of HealthCheckStepAttributes. </summary>
        /// <param name="healthCheckStepAttributesType"> The type of health check. </param>
        /// <param name="waitDuration"> The duration in ISO 8601 format for which health check waits idly without any checks. </param>
        /// <param name="maxElasticDuration"> The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&apos;t. Health check starts to enforce healthyStateDuration once resource becomes healthy. </param>
        /// <param name="healthyStateDuration"> The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal. </param>
        /// <returns> A new <see cref="Models.HealthCheckStepAttributes"/> instance for mocking. </returns>
        public static HealthCheckStepAttributes HealthCheckStepAttributes(string healthCheckStepAttributesType = null, TimeSpan? waitDuration = null, TimeSpan? maxElasticDuration = null, TimeSpan healthyStateDuration = default)
        {
            return new UnknownHealthCheckStepAttributes(healthCheckStepAttributesType, waitDuration, maxElasticDuration, healthyStateDuration);
        }

        /// <summary> Initializes a new instance of RestHealthCheckStepAttributes. </summary>
        /// <param name="waitDuration"> The duration in ISO 8601 format for which health check waits idly without any checks. </param>
        /// <param name="maxElasticDuration"> The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn&apos;t. Health check starts to enforce healthyStateDuration once resource becomes healthy. </param>
        /// <param name="healthyStateDuration"> The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal. </param>
        /// <param name="healthChecks"> The list of checks that form the health check step. </param>
        /// <returns> A new <see cref="Models.RestHealthCheckStepAttributes"/> instance for mocking. </returns>
        public static RestHealthCheckStepAttributes RestHealthCheckStepAttributes(TimeSpan? waitDuration = null, TimeSpan? maxElasticDuration = null, TimeSpan healthyStateDuration = default, IEnumerable<RestHealthCheck> healthChecks = null)
        {
            healthChecks ??= new List<RestHealthCheck>();

            return new RestHealthCheckStepAttributes("REST", waitDuration, maxElasticDuration, healthyStateDuration, healthChecks?.ToList());
        }

        /// <summary> Initializes a new instance of RestHealthCheck. </summary>
        /// <param name="name"> A unique name for this check. </param>
        /// <param name="request"> The request to the health provider. </param>
        /// <param name="response"> The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status code of 200 OK. </param>
        /// <returns> A new <see cref="Models.RestHealthCheck"/> instance for mocking. </returns>
        public static RestHealthCheck RestHealthCheck(string name = null, RestRequest request = null, RestResponse response = null)
        {
            return new RestHealthCheck(name, request, response);
        }

        /// <summary> Initializes a new instance of RestRequestAuthentication. </summary>
        /// <param name="authType"> The authentication type. </param>
        /// <returns> A new <see cref="Models.RestRequestAuthentication"/> instance for mocking. </returns>
        public static RestRequestAuthentication RestRequestAuthentication(string authType = null)
        {
            return new UnknownRestRequestAuthentication(authType);
        }

        /// <summary> Initializes a new instance of RestResponse. </summary>
        /// <param name="successStatusCodes"> The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK. </param>
        /// <param name="regex"> The regular expressions to match the response content with. </param>
        /// <returns> A new <see cref="Models.RestResponse"/> instance for mocking. </returns>
        public static RestResponse RestResponse(IEnumerable<string> successStatusCodes = null, RestResponseRegex regex = null)
        {
            successStatusCodes ??= new List<string>();

            return new RestResponse(successStatusCodes?.ToList(), regex);
        }

        /// <summary> Initializes a new instance of RestResponseRegex. </summary>
        /// <param name="matches"> The list of regular expressions. </param>
        /// <param name="matchQuantifier"> Indicates whether any or all of the expressions should match with the response content. </param>
        /// <returns> A new <see cref="Models.RestResponseRegex"/> instance for mocking. </returns>
        public static RestResponseRegex RestResponseRegex(IEnumerable<string> matches = null, RestMatchQuantifier? matchQuantifier = null)
        {
            matches ??= new List<string>();

            return new RestResponseRegex(matches?.ToList(), matchQuantifier);
        }

        /// <summary> Initializes a new instance of RolloutIdentityAuthentication. </summary>
        /// <returns> A new <see cref="Models.RolloutIdentityAuthentication"/> instance for mocking. </returns>
        public static RolloutIdentityAuthentication RolloutIdentityAuthentication()
        {
            return new RolloutIdentityAuthentication("RolloutIdentity");
        }

        /// <summary> Initializes a new instance of ApiKeyAuthentication. </summary>
        /// <param name="name"> The key name of the authentication key/value pair. </param>
        /// <param name="in"> The location of the authentication key/value pair in the request. </param>
        /// <param name="value"> The value of the authentication key/value pair. </param>
        /// <returns> A new <see cref="Models.ApiKeyAuthentication"/> instance for mocking. </returns>
        public static ApiKeyAuthentication ApiKeyAuthentication(string name = null, RestAuthLocation @in = default, string value = null)
        {
            return new ApiKeyAuthentication("ApiKey", name, @in, value);
        }

        /// <summary> Initializes a new instance of WaitStepProperties. </summary>
        /// <param name="attributesDuration"> The Wait attributes. </param>
        /// <returns> A new <see cref="Models.WaitStepProperties"/> instance for mocking. </returns>
        public static WaitStepProperties WaitStepProperties(TimeSpan attributesDuration = default)
        {
            return new WaitStepProperties("Wait", new WaitStepAttributes(attributesDuration));
        }
    }
}
