// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeploymentManager
{
    /// <summary>
    /// A class representing a collection of <see cref="ServiceTopologyResource" /> and their operations.
    /// Each <see cref="ServiceTopologyResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="ServiceTopologyResourceCollection" /> instance call the GetServiceTopologyResources method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class ServiceTopologyResourceCollection : ArmCollection, IEnumerable<ServiceTopologyResource>, IAsyncEnumerable<ServiceTopologyResource>
    {
        private readonly ClientDiagnostics _serviceTopologyResourceServiceTopologiesClientDiagnostics;
        private readonly ServiceTopologiesRestOperations _serviceTopologyResourceServiceTopologiesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ServiceTopologyResourceCollection"/> class for mocking. </summary>
        protected ServiceTopologyResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServiceTopologyResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ServiceTopologyResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _serviceTopologyResourceServiceTopologiesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DeploymentManager", ServiceTopologyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServiceTopologyResource.ResourceType, out string serviceTopologyResourceServiceTopologiesApiVersion);
            _serviceTopologyResourceServiceTopologiesRestClient = new ServiceTopologiesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serviceTopologyResourceServiceTopologiesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Synchronously creates a new service topology or updates an existing service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="data"> Source topology object defines the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ServiceTopologyResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string serviceTopologyName, ServiceTopologyResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _serviceTopologyResourceServiceTopologiesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, data, cancellationToken).ConfigureAwait(false);
                var operation = new DeploymentManagerArmOperation<ServiceTopologyResource>(Response.FromValue(new ServiceTopologyResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Synchronously creates a new service topology or updates an existing service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="data"> Source topology object defines the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ServiceTopologyResource> CreateOrUpdate(WaitUntil waitUntil, string serviceTopologyName, ServiceTopologyResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _serviceTopologyResourceServiceTopologiesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, data, cancellationToken);
                var operation = new DeploymentManagerArmOperation<ServiceTopologyResource>(Response.FromValue(new ServiceTopologyResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        public virtual async Task<Response<ServiceTopologyResource>> GetAsync(string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _serviceTopologyResourceServiceTopologiesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceTopologyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the service topology.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        public virtual Response<ServiceTopologyResource> Get(string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _serviceTopologyResourceServiceTopologiesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServiceTopologyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the service topologies in the resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServiceTopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServiceTopologyResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceTopologyResourceServiceTopologiesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new ServiceTopologyResource(Client, ServiceTopologyResourceData.DeserializeServiceTopologyResourceData(e)), _serviceTopologyResourceServiceTopologiesClientDiagnostics, Pipeline, "ServiceTopologyResourceCollection.GetAll", "", null, cancellationToken);
        }

        /// <summary>
        /// Lists the service topologies in the resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServiceTopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServiceTopologyResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serviceTopologyResourceServiceTopologiesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, null, e => new ServiceTopologyResource(Client, ServiceTopologyResourceData.DeserializeServiceTopologyResourceData(e)), _serviceTopologyResourceServiceTopologiesClientDiagnostics, Pipeline, "ServiceTopologyResourceCollection.GetAll", "", null, cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serviceTopologyResourceServiceTopologiesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServiceTopologies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serviceTopologyName"> The name of the service topology . </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceTopologyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceTopologyName"/> is null. </exception>
        public virtual Response<bool> Exists(string serviceTopologyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serviceTopologyName, nameof(serviceTopologyName));

            using var scope = _serviceTopologyResourceServiceTopologiesClientDiagnostics.CreateScope("ServiceTopologyResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _serviceTopologyResourceServiceTopologiesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, serviceTopologyName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServiceTopologyResource> IEnumerable<ServiceTopologyResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServiceTopologyResource> IAsyncEnumerable<ServiceTopologyResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
