// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DeploymentManager;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DeploymentManager.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDeploymentManagerModelFactory
    {
        /// <summary> Initializes a new instance of ServiceTopologyResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="artifactSourceId"> The resource Id of the artifact source that contains the artifacts that can be referenced in the service units. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceTopologyResourceData"/> instance for mocking. </returns>
        public static ServiceTopologyResourceData ServiceTopologyResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string artifactSourceId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceTopologyResourceData(id, name, resourceType, systemData, tags, location, artifactSourceId);
        }

        /// <summary> Initializes a new instance of ServiceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceResourceData"/> instance for mocking. </returns>
        public static ServiceResourceData ServiceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string targetLocation = null, string targetSubscriptionId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceResourceData(id, name, resourceType, systemData, tags, location, targetLocation, targetSubscriptionId);
        }

        /// <summary> Initializes a new instance of ServiceProperties. </summary>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetLocation"/> or <paramref name="targetSubscriptionId"/> is null. </exception>
        /// <returns> A new <see cref="Models.ServiceProperties"/> instance for mocking. </returns>
        public static ServiceProperties ServiceProperties(string targetLocation = null, string targetSubscriptionId = null)
        {
            if (targetLocation == null)
            {
                throw new ArgumentNullException(nameof(targetLocation));
            }
            if (targetSubscriptionId == null)
            {
                throw new ArgumentNullException(nameof(targetSubscriptionId));
            }

            return new ServiceProperties(targetLocation, targetSubscriptionId);
        }

        /// <summary> Initializes a new instance of ServiceUnitResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <returns> A new <see cref="DeploymentManager.ServiceUnitResourceData"/> instance for mocking. </returns>
        public static ServiceUnitResourceData ServiceUnitResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ServiceUnitResourceData(id, name, resourceType, systemData, tags, location, targetResourceGroup, deploymentMode, artifacts);
        }

        /// <summary> Initializes a new instance of ServiceUnitProperties. </summary>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <returns> A new <see cref="Models.ServiceUnitProperties"/> instance for mocking. </returns>
        public static ServiceUnitProperties ServiceUnitProperties(string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null)
        {
            return new ServiceUnitProperties(targetResourceGroup, deploymentMode, artifacts);
        }

        /// <summary> Initializes a new instance of StepResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// The properties that define the step.
        /// Please note <see cref="StepProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="HealthCheckStepProperties"/> and <see cref="WaitStepProperties"/>.
        /// </param>
        /// <returns> A new <see cref="DeploymentManager.StepResourceData"/> instance for mocking. </returns>
        public static StepResourceData StepResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StepProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StepResourceData(id, name, resourceType, systemData, tags, location, properties);
        }

        /// <summary> Initializes a new instance of RolloutCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="buildVersion"> The version of the build being deployed. </param>
        /// <param name="artifactSourceId"> The reference to the artifact source resource Id where the payload is located. </param>
        /// <param name="targetServiceTopologyId"> The resource Id of the service topology from which service units are being referenced in step groups to be deployed. </param>
        /// <param name="stepGroups"> The list of step groups that define the orchestration. </param>
        /// <returns> A new <see cref="Models.RolloutCreateOrUpdateContent"/> instance for mocking. </returns>
        public static RolloutCreateOrUpdateContent RolloutCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Identity identity = null, string buildVersion = null, string artifactSourceId = null, string targetServiceTopologyId = null, IEnumerable<StepGroup> stepGroups = null)
        {
            tags ??= new Dictionary<string, string>();
            stepGroups ??= new List<StepGroup>();

            return new RolloutCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, identity, buildVersion, artifactSourceId, targetServiceTopologyId, stepGroups?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="buildVersion"> The version of the build being deployed. </param>
        /// <param name="artifactSourceId"> The reference to the artifact source resource Id where the payload is located. </param>
        /// <param name="targetServiceTopologyId"> The resource Id of the service topology from which service units are being referenced in step groups to be deployed. </param>
        /// <param name="stepGroups"> The list of step groups that define the orchestration. </param>
        /// <param name="status"> The current status of the rollout. </param>
        /// <param name="totalRetryAttempts"> The cardinal count of total number of retries performed on the rollout at a given time. </param>
        /// <param name="operationInfo"> Operational information of the rollout. </param>
        /// <param name="services"> The detailed information on the services being deployed. </param>
        /// <returns> A new <see cref="DeploymentManager.RolloutData"/> instance for mocking. </returns>
        public static RolloutData RolloutData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Identity identity = null, string buildVersion = null, string artifactSourceId = null, string targetServiceTopologyId = null, IEnumerable<StepGroup> stepGroups = null, string status = null, int? totalRetryAttempts = null, RolloutOperationInfo operationInfo = null, IEnumerable<Service> services = null)
        {
            tags ??= new Dictionary<string, string>();
            stepGroups ??= new List<StepGroup>();
            services ??= new List<Service>();

            return new RolloutData(id, name, resourceType, systemData, tags, location, identity, buildVersion, artifactSourceId, targetServiceTopologyId, stepGroups?.ToList(), status, totalRetryAttempts, operationInfo, services?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutOperationInfo. </summary>
        /// <param name="retryAttempt"> The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0. </param>
        /// <param name="skipSucceededOnRetry"> True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise. </param>
        /// <param name="startOn"> The start time of the rollout in UTC. </param>
        /// <param name="endOn"> The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet. </param>
        /// <param name="error"> The detailed error information for any failure. </param>
        /// <returns> A new <see cref="Models.RolloutOperationInfo"/> instance for mocking. </returns>
        public static RolloutOperationInfo RolloutOperationInfo(int? retryAttempt = null, bool? skipSucceededOnRetry = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, ResponseError error = null)
        {
            return new RolloutOperationInfo(retryAttempt, skipSucceededOnRetry, startOn, endOn, error);
        }

        /// <summary> Initializes a new instance of Service. </summary>
        /// <param name="targetLocation"> The Azure location to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="targetSubscriptionId"> The subscription to which the resources in the service belong to or should be deployed to. </param>
        /// <param name="name"> Name of the service. </param>
        /// <param name="serviceUnits"> The detailed information about the units that make up the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetLocation"/> or <paramref name="targetSubscriptionId"/> is null. </exception>
        /// <returns> A new <see cref="Models.Service"/> instance for mocking. </returns>
        public static Service Service(string targetLocation = null, string targetSubscriptionId = null, string name = null, IEnumerable<ServiceUnit> serviceUnits = null)
        {
            if (targetLocation == null)
            {
                throw new ArgumentNullException(nameof(targetLocation));
            }
            if (targetSubscriptionId == null)
            {
                throw new ArgumentNullException(nameof(targetSubscriptionId));
            }
            serviceUnits ??= new List<ServiceUnit>();

            return new Service(targetLocation, targetSubscriptionId, name, serviceUnits?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceUnit. </summary>
        /// <param name="targetResourceGroup"> The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. </param>
        /// <param name="deploymentMode"> Describes the type of ARM deployment to be performed on the resource. </param>
        /// <param name="artifacts"> The artifacts for the service unit. </param>
        /// <param name="name"> Name of the service unit. </param>
        /// <param name="steps"> Detailed step information, if present. </param>
        /// <returns> A new <see cref="Models.ServiceUnit"/> instance for mocking. </returns>
        public static ServiceUnit ServiceUnit(string targetResourceGroup = null, DeploymentMode deploymentMode = default, ServiceUnitArtifacts artifacts = null, string name = null, IEnumerable<RolloutStep> steps = null)
        {
            steps ??= new List<RolloutStep>();

            return new ServiceUnit(targetResourceGroup, deploymentMode, artifacts, name, steps?.ToList());
        }

        /// <summary> Initializes a new instance of RolloutStep. </summary>
        /// <param name="name"> Name of the step. </param>
        /// <param name="status"> Current state of the step. </param>
        /// <param name="stepGroup"> The step group the current step is part of. </param>
        /// <param name="operationInfo"> Detailed information of specific action execution. </param>
        /// <param name="resourceOperations"> Set of resource operations that were performed, if any, on an Azure resource. </param>
        /// <param name="messages"> Supplementary informative messages during rollout. </param>
        /// <returns> A new <see cref="Models.RolloutStep"/> instance for mocking. </returns>
        public static RolloutStep RolloutStep(string name = null, string status = null, string stepGroup = null, StepOperationInfo operationInfo = null, IEnumerable<ResourceOperation> resourceOperations = null, IEnumerable<Message> messages = null)
        {
            resourceOperations ??= new List<ResourceOperation>();
            messages ??= new List<Message>();

            return new RolloutStep(name, status, stepGroup, operationInfo, resourceOperations?.ToList(), messages?.ToList());
        }

        /// <summary> Initializes a new instance of StepOperationInfo. </summary>
        /// <param name="deploymentName"> The name of the ARM deployment initiated as part of the step. </param>
        /// <param name="correlationId"> Unique identifier to track the request for ARM-based resources. </param>
        /// <param name="startOn"> Start time of the action in UTC. </param>
        /// <param name="endOn"> End time of the action in UTC. </param>
        /// <param name="lastUpdatedOn"> Last time in UTC this operation was updated. </param>
        /// <param name="error"> The errors, if any, for the action. </param>
        /// <returns> A new <see cref="Models.StepOperationInfo"/> instance for mocking. </returns>
        public static StepOperationInfo StepOperationInfo(string deploymentName = null, string correlationId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, DateTimeOffset? lastUpdatedOn = null, ResponseError error = null)
        {
            return new StepOperationInfo(deploymentName, correlationId, startOn, endOn, lastUpdatedOn, error);
        }

        /// <summary> Initializes a new instance of ResourceOperation. </summary>
        /// <param name="resourceName"> Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template. </param>
        /// <param name="operationId"> Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service. </param>
        /// <param name="resourceType"> Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template. </param>
        /// <param name="provisioningState"> State of the resource deployment. For ARM resources, this is the current provisioning state of the resource. </param>
        /// <param name="statusMessage"> Descriptive information of the resource operation. </param>
        /// <param name="statusCode"> Http status code of the operation. </param>
        /// <returns> A new <see cref="Models.ResourceOperation"/> instance for mocking. </returns>
        public static ResourceOperation ResourceOperation(string resourceName = null, string operationId = null, string resourceType = null, string provisioningState = null, string statusMessage = null, string statusCode = null)
        {
            return new ResourceOperation(resourceName, operationId, resourceType, provisioningState, statusMessage, statusCode);
        }

        /// <summary> Initializes a new instance of Message. </summary>
        /// <param name="timeStamp"> Time in UTC this message was provided. </param>
        /// <param name="messageValue"> The actual message text. </param>
        /// <returns> A new <see cref="Models.Message"/> instance for mocking. </returns>
        public static Message Message(DateTimeOffset? timeStamp = null, string messageValue = null)
        {
            return new Message(timeStamp, messageValue);
        }

        /// <summary> Initializes a new instance of ArtifactSourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sourceType"> The type of artifact source used. </param>
        /// <param name="artifactRoot"> The path from the location that the &apos;authentication&apos; property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. </param>
        /// <param name="authentication">
        /// The authentication method to use to access the artifact source.
        /// Please note <see cref="Authentication"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SasAuthentication"/>.
        /// </param>
        /// <returns> A new <see cref="DeploymentManager.ArtifactSourceData"/> instance for mocking. </returns>
        public static ArtifactSourceData ArtifactSourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string sourceType = null, string artifactRoot = null, Authentication authentication = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArtifactSourceData(id, name, resourceType, systemData, tags, location, sourceType, artifactRoot, authentication);
        }
    }
}
