// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a service unit.
    /// </summary>
    public partial class ServiceUnit : ServiceUnitProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServiceUnit class.
        /// </summary>
        public ServiceUnit()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceUnit class.
        /// </summary>
        /// <param name="targetResourceGroup">The Azure Resource Group to which
        /// the resources in the service unit belong to or should be deployed
        /// to.</param>
        /// <param name="deploymentMode">Describes the type of ARM deployment
        /// to be performed on the resource. Possible values include:
        /// 'Incremental', 'Complete'</param>
        /// <param name="artifacts">The artifacts for the service unit.</param>
        /// <param name="name">Name of the service unit.</param>
        /// <param name="steps">Detailed step information, if present.</param>
        public ServiceUnit(string targetResourceGroup, DeploymentMode deploymentMode, ServiceUnitArtifacts artifacts = default(ServiceUnitArtifacts), string name = default(string), IList<RolloutStep> steps = default(IList<RolloutStep>))
            : base(targetResourceGroup, deploymentMode, artifacts)
        {
            Name = name;
            Steps = steps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the service unit.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets detailed step information, if present.
        /// </summary>
        [JsonProperty(PropertyName = "steps")]
        public IList<RolloutStep> Steps { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Steps != null)
            {
                foreach (var element in Steps)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
