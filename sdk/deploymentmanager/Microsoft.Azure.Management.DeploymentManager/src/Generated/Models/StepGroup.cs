// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties that define a Step group in a rollout.
    /// </summary>
    public partial class StepGroup
    {
        /// <summary>
        /// Initializes a new instance of the StepGroup class.
        /// </summary>
        public StepGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StepGroup class.
        /// </summary>
        /// <param name="name">The name of the step group.</param>
        /// <param name="deploymentTargetId">The resource Id of service unit to
        /// be deployed. The service unit should be from the service topology
        /// referenced in targetServiceTopologyId</param>
        /// <param name="dependsOnStepGroups">The list of step group names on
        /// which this step group depends on.</param>
        /// <param name="preDeploymentSteps">The list of steps to be run before
        /// deploying the target.</param>
        /// <param name="postDeploymentSteps">The list of steps to be run after
        /// deploying the target.</param>
        public StepGroup(string name, string deploymentTargetId, IList<string> dependsOnStepGroups = default(IList<string>), IList<PrePostStep> preDeploymentSteps = default(IList<PrePostStep>), IList<PrePostStep> postDeploymentSteps = default(IList<PrePostStep>))
        {
            Name = name;
            DependsOnStepGroups = dependsOnStepGroups;
            PreDeploymentSteps = preDeploymentSteps;
            DeploymentTargetId = deploymentTargetId;
            PostDeploymentSteps = postDeploymentSteps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the step group.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the list of step group names on which this step group
        /// depends on.
        /// </summary>
        [JsonProperty(PropertyName = "dependsOnStepGroups")]
        public IList<string> DependsOnStepGroups { get; set; }

        /// <summary>
        /// Gets or sets the list of steps to be run before deploying the
        /// target.
        /// </summary>
        [JsonProperty(PropertyName = "preDeploymentSteps")]
        public IList<PrePostStep> PreDeploymentSteps { get; set; }

        /// <summary>
        /// Gets or sets the resource Id of service unit to be deployed. The
        /// service unit should be from the service topology referenced in
        /// targetServiceTopologyId
        /// </summary>
        [JsonProperty(PropertyName = "deploymentTargetId")]
        public string DeploymentTargetId { get; set; }

        /// <summary>
        /// Gets or sets the list of steps to be run after deploying the
        /// target.
        /// </summary>
        [JsonProperty(PropertyName = "postDeploymentSteps")]
        public IList<PrePostStep> PostDeploymentSteps { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (DeploymentTargetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DeploymentTargetId");
            }
            if (PreDeploymentSteps != null)
            {
                foreach (var element in PreDeploymentSteps)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (PostDeploymentSteps != null)
            {
                foreach (var element1 in PostDeploymentSteps)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
