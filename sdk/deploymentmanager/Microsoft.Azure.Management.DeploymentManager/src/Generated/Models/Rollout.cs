// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the rollout.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Rollout : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Rollout class.
        /// </summary>
        public Rollout()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Rollout class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="buildVersion">The version of the build being
        /// deployed.</param>
        /// <param name="targetServiceTopologyId">The resource Id of the
        /// service topology from which service units are being referenced in
        /// step groups to be deployed.</param>
        /// <param name="stepGroups">The list of step groups that define the
        /// orchestration.</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="identity">Identity for the resource.</param>
        /// <param name="artifactSourceId">The reference to the artifact source
        /// resource Id where the payload is located.</param>
        /// <param name="status">The current status of the rollout.</param>
        /// <param name="totalRetryAttempts">The cardinal count of total number
        /// of retries performed on the rollout at a given time.</param>
        /// <param name="operationInfo">Operational information of the
        /// rollout.</param>
        /// <param name="services">The detailed information on the services
        /// being deployed.</param>
        public Rollout(string location, string buildVersion, string targetServiceTopologyId, IList<StepGroup> stepGroups, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Identity identity = default(Identity), string artifactSourceId = default(string), string status = default(string), int? totalRetryAttempts = default(int?), RolloutOperationInfo operationInfo = default(RolloutOperationInfo), IList<Service> services = default(IList<Service>))
            : base(location, id, name, type, tags)
        {
            Identity = identity;
            BuildVersion = buildVersion;
            ArtifactSourceId = artifactSourceId;
            TargetServiceTopologyId = targetServiceTopologyId;
            StepGroups = stepGroups;
            Status = status;
            TotalRetryAttempts = totalRetryAttempts;
            OperationInfo = operationInfo;
            Services = services;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identity for the resource.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public Identity Identity { get; set; }

        /// <summary>
        /// Gets or sets the version of the build being deployed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.buildVersion")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Gets or sets the reference to the artifact source resource Id where
        /// the payload is located.
        /// </summary>
        [JsonProperty(PropertyName = "properties.artifactSourceId")]
        public string ArtifactSourceId { get; set; }

        /// <summary>
        /// Gets or sets the resource Id of the service topology from which
        /// service units are being referenced in step groups to be deployed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetServiceTopologyId")]
        public string TargetServiceTopologyId { get; set; }

        /// <summary>
        /// Gets or sets the list of step groups that define the orchestration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stepGroups")]
        public IList<StepGroup> StepGroups { get; set; }

        /// <summary>
        /// Gets the current status of the rollout.
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the cardinal count of total number of retries performed on the
        /// rollout at a given time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalRetryAttempts")]
        public int? TotalRetryAttempts { get; private set; }

        /// <summary>
        /// Gets operational information of the rollout.
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationInfo")]
        public RolloutOperationInfo OperationInfo { get; private set; }

        /// <summary>
        /// Gets the detailed information on the services being deployed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.services")]
        public IList<Service> Services { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (BuildVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BuildVersion");
            }
            if (TargetServiceTopologyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetServiceTopologyId");
            }
            if (StepGroups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StepGroups");
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
            if (StepGroups != null)
            {
                foreach (var element in StepGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Services != null)
            {
                foreach (var element1 in Services)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
