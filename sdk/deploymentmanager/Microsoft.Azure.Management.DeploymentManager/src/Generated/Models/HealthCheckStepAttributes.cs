// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The attributes for the health check step.
    /// </summary>
    public partial class HealthCheckStepAttributes
    {
        /// <summary>
        /// Initializes a new instance of the HealthCheckStepAttributes class.
        /// </summary>
        public HealthCheckStepAttributes()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HealthCheckStepAttributes class.
        /// </summary>
        /// <param name="healthyStateDuration">The duration in ISO 8601 format
        /// for which the resource is expected to be continuously healthy. If
        /// maxElasticDuration is specified, healthy state duration is enforced
        /// after the detection of first healthy signal.</param>
        /// <param name="waitDuration">The duration in ISO 8601 format for
        /// which health check waits idly without any checks.</param>
        /// <param name="maxElasticDuration">The duration in ISO 8601 format
        /// for which the health check waits for the resource to become
        /// healthy. Health check fails if it doesn't. Health check starts to
        /// enforce healthyStateDuration once resource becomes healthy.</param>
        public HealthCheckStepAttributes(string healthyStateDuration, string waitDuration = default(string), string maxElasticDuration = default(string))
        {
            WaitDuration = waitDuration;
            MaxElasticDuration = maxElasticDuration;
            HealthyStateDuration = healthyStateDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the duration in ISO 8601 format for which health check
        /// waits idly without any checks.
        /// </summary>
        [JsonProperty(PropertyName = "waitDuration")]
        public string WaitDuration { get; set; }

        /// <summary>
        /// Gets or sets the duration in ISO 8601 format for which the health
        /// check waits for the resource to become healthy. Health check fails
        /// if it doesn't. Health check starts to enforce healthyStateDuration
        /// once resource becomes healthy.
        /// </summary>
        [JsonProperty(PropertyName = "maxElasticDuration")]
        public string MaxElasticDuration { get; set; }

        /// <summary>
        /// Gets or sets the duration in ISO 8601 format for which the resource
        /// is expected to be continuously healthy. If maxElasticDuration is
        /// specified, healthy state duration is enforced after the detection
        /// of first healthy signal.
        /// </summary>
        [JsonProperty(PropertyName = "healthyStateDuration")]
        public string HealthyStateDuration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HealthyStateDuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HealthyStateDuration");
            }
        }
    }
}
