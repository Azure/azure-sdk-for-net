// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ArtifactSourcesOperations.
    /// </summary>
    public static partial class ArtifactSourcesOperationsExtensions
    {
            /// <summary>
            /// Creates or updates an artifact source.
            /// </summary>
            /// <remarks>
            /// Synchronously creates a new artifact source or updates an existing artifact
            /// source.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            /// <param name='artifactSourceInfo'>
            /// Source object that defines the resource.
            /// </param>
            public static ArtifactSource CreateOrUpdate(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName, ArtifactSource artifactSourceInfo = default(ArtifactSource))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, artifactSourceName, artifactSourceInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an artifact source.
            /// </summary>
            /// <remarks>
            /// Synchronously creates a new artifact source or updates an existing artifact
            /// source.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            /// <param name='artifactSourceInfo'>
            /// Source object that defines the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactSource> CreateOrUpdateAsync(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName, ArtifactSource artifactSourceInfo = default(ArtifactSource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, artifactSourceName, artifactSourceInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an artifact source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            public static ArtifactSource Get(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName)
            {
                return operations.GetAsync(resourceGroupName, artifactSourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an artifact source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactSource> GetAsync(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, artifactSourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an artifact source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            public static void Delete(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName)
            {
                operations.DeleteAsync(resourceGroupName, artifactSourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an artifact source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='artifactSourceName'>
            /// The name of the artifact source.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IArtifactSourcesOperations operations, string resourceGroupName, string artifactSourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, artifactSourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the artifact sources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IList<ArtifactSource> List(this IArtifactSourcesOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the artifact sources in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ArtifactSource>> ListAsync(this IArtifactSourcesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
