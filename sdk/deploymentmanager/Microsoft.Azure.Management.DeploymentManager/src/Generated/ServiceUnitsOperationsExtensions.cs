// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceUnitsOperations.
    /// </summary>
    public static partial class ServiceUnitsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a service unit under the service in the service
            /// topology.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// operation resource returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='serviceUnitInfo'>
            /// The service unit resource object.
            /// </param>
            public static ServiceUnitResource CreateOrUpdate(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, ServiceUnitResource serviceUnitInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a service unit under the service in the service
            /// topology.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// operation resource returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='serviceUnitInfo'>
            /// The service unit resource object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceUnitResource> CreateOrUpdateAsync(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, ServiceUnitResource serviceUnitInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the service unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            public static ServiceUnitResource Get(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName)
            {
                return operations.GetAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the service unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceUnitResource> GetAsync(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the service unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            public static void Delete(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName)
            {
                operations.DeleteAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the service unit.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the service units under a service in the service topology.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            public static IList<ServiceUnitResource> List(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName)
            {
                return operations.ListAsync(resourceGroupName, serviceTopologyName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the service units under a service in the service topology.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ServiceUnitResource>> ListAsync(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, serviceTopologyName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a service unit under the service in the service
            /// topology.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// operation resource returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='serviceUnitInfo'>
            /// The service unit resource object.
            /// </param>
            public static ServiceUnitResource BeginCreateOrUpdate(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, ServiceUnitResource serviceUnitInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a service unit under the service in the service
            /// topology.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// operation resource returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceTopologyName'>
            /// The name of the service topology .
            /// </param>
            /// <param name='serviceName'>
            /// The name of the service resource.
            /// </param>
            /// <param name='serviceUnitName'>
            /// The name of the service unit resource.
            /// </param>
            /// <param name='serviceUnitInfo'>
            /// The service unit resource object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceUnitResource> BeginCreateOrUpdateAsync(this IServiceUnitsOperations operations, string resourceGroupName, string serviceTopologyName, string serviceName, string serviceUnitName, ServiceUnitResource serviceUnitInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
