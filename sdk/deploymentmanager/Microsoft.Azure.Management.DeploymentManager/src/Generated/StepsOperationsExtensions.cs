// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StepsOperations.
    /// </summary>
    public static partial class StepsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a rollout step with the given step properties.
            /// </summary>
            /// <remarks>
            /// Synchronously creates a new step or updates an existing step.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            /// <param name='stepInfo'>
            /// The step object.
            /// </param>
            public static StepResource CreateOrUpdate(this IStepsOperations operations, string resourceGroupName, string stepName, StepResource stepInfo = default(StepResource))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, stepName, stepInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a rollout step with the given step properties.
            /// </summary>
            /// <remarks>
            /// Synchronously creates a new step or updates an existing step.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            /// <param name='stepInfo'>
            /// The step object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StepResource> CreateOrUpdateAsync(this IStepsOperations operations, string resourceGroupName, string stepName, StepResource stepInfo = default(StepResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, stepName, stepInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the step.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            public static StepResource Get(this IStepsOperations operations, string resourceGroupName, string stepName)
            {
                return operations.GetAsync(resourceGroupName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the step.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StepResource> GetAsync(this IStepsOperations operations, string resourceGroupName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, stepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the step.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            public static void Delete(this IStepsOperations operations, string resourceGroupName, string stepName)
            {
                operations.DeleteAsync(resourceGroupName, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the step.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='stepName'>
            /// The name of the deployment step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStepsOperations operations, string resourceGroupName, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, stepName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the steps in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IList<StepResource> List(this IStepsOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the steps in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StepResource>> ListAsync(this IStepsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
