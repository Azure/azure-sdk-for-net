// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeploymentManager
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RolloutsOperations.
    /// </summary>
    public static partial class RolloutsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a rollout.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// location header returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='rolloutRequest'>
            /// Source rollout request object that defines the rollout.
            /// </param>
            public static RolloutRequest CreateOrUpdate(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, RolloutRequest rolloutRequest = default(RolloutRequest))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, rolloutName, rolloutRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a rollout.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// location header returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='rolloutRequest'>
            /// Source rollout request object that defines the rollout.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RolloutRequest> CreateOrUpdateAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, RolloutRequest rolloutRequest = default(RolloutRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, rolloutName, rolloutRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets detailed information of a rollout.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='retryAttempt'>
            /// Rollout retry attempt ordinal to get the result of. If not specified,
            /// result of the latest attempt will be returned.
            /// </param>
            public static Rollout Get(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, int? retryAttempt = default(int?))
            {
                return operations.GetAsync(resourceGroupName, rolloutName, retryAttempt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets detailed information of a rollout.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='retryAttempt'>
            /// Rollout retry attempt ordinal to get the result of. If not specified,
            /// result of the latest attempt will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rollout> GetAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, int? retryAttempt = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, rolloutName, retryAttempt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a rollout resource.
            /// </summary>
            /// <remarks>
            /// Only rollouts in terminal state can be deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            public static void Delete(this IRolloutsOperations operations, string resourceGroupName, string rolloutName)
            {
                operations.DeleteAsync(resourceGroupName, rolloutName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a rollout resource.
            /// </summary>
            /// <remarks>
            /// Only rollouts in terminal state can be deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, rolloutName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a running rollout.
            /// </summary>
            /// <remarks>
            /// Only running rollouts can be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            public static Rollout Cancel(this IRolloutsOperations operations, string resourceGroupName, string rolloutName)
            {
                return operations.CancelAsync(resourceGroupName, rolloutName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a running rollout.
            /// </summary>
            /// <remarks>
            /// Only running rollouts can be canceled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rollout> CancelAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(resourceGroupName, rolloutName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts a failed rollout and optionally skips all succeeded steps.
            /// </summary>
            /// <remarks>
            /// Only failed rollouts can be restarted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='skipSucceeded'>
            /// If true, will skip all succeeded steps so far in the rollout. If false,
            /// will execute the entire rollout again regardless of the current state of
            /// individual resources. Defaults to false if not specified.
            /// </param>
            public static Rollout Restart(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, bool? skipSucceeded = default(bool?))
            {
                return operations.RestartAsync(resourceGroupName, rolloutName, skipSucceeded).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts a failed rollout and optionally skips all succeeded steps.
            /// </summary>
            /// <remarks>
            /// Only failed rollouts can be restarted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='skipSucceeded'>
            /// If true, will skip all succeeded steps so far in the rollout. If false,
            /// will execute the entire rollout again regardless of the current state of
            /// individual resources. Defaults to false if not specified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rollout> RestartAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, bool? skipSucceeded = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartWithHttpMessagesAsync(resourceGroupName, rolloutName, skipSucceeded, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the rollouts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IList<Rollout> List(this IRolloutsOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the rollouts in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Rollout>> ListAsync(this IRolloutsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a rollout.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// location header returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='rolloutRequest'>
            /// Source rollout request object that defines the rollout.
            /// </param>
            public static RolloutRequest BeginCreateOrUpdate(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, RolloutRequest rolloutRequest = default(RolloutRequest))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, rolloutName, rolloutRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a rollout.
            /// </summary>
            /// <remarks>
            /// This is an asynchronous operation and can be polled to completion using the
            /// location header returned by this operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='rolloutRequest'>
            /// Source rollout request object that defines the rollout.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RolloutRequest> BeginCreateOrUpdateAsync(this IRolloutsOperations operations, string resourceGroupName, string rolloutName, RolloutRequest rolloutRequest = default(RolloutRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, rolloutName, rolloutRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
