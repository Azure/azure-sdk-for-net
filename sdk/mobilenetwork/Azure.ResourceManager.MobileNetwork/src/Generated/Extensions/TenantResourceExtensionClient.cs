// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.MobileNetwork.Models;

namespace Azure.ResourceManager.MobileNetwork
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _attachedDataNetworksClientDiagnostics;
        private AttachedDataNetworksRestOperations _attachedDataNetworksRestClient;
        private ClientDiagnostics _dataNetworksClientDiagnostics;
        private DataNetworksRestOperations _dataNetworksRestClient;
        private ClientDiagnostics _diagnosticsPackagesClientDiagnostics;
        private DiagnosticsPackagesRestOperations _diagnosticsPackagesRestClient;
        private ClientDiagnostics _mobileNetworksClientDiagnostics;
        private MobileNetworksRestOperations _mobileNetworksRestClient;
        private ClientDiagnostics _packetCapturesClientDiagnostics;
        private PacketCapturesRestOperations _packetCapturesRestClient;
        private ClientDiagnostics _packetCoreControlPlanesClientDiagnostics;
        private PacketCoreControlPlanesRestOperations _packetCoreControlPlanesRestClient;
        private ClientDiagnostics _packetCoreControlPlaneVersionsClientDiagnostics;
        private PacketCoreControlPlaneVersionsRestOperations _packetCoreControlPlaneVersionsRestClient;
        private ClientDiagnostics _packetCoreDataPlanesClientDiagnostics;
        private PacketCoreDataPlanesRestOperations _packetCoreDataPlanesRestClient;
        private ClientDiagnostics _servicesClientDiagnostics;
        private ServicesRestOperations _servicesRestClient;
        private ClientDiagnostics _simsClientDiagnostics;
        private SimsRestOperations _simsRestClient;
        private ClientDiagnostics _simGroupsClientDiagnostics;
        private SimGroupsRestOperations _simGroupsRestClient;
        private ClientDiagnostics _simPoliciesClientDiagnostics;
        private SimPoliciesRestOperations _simPoliciesRestClient;
        private ClientDiagnostics _sitesClientDiagnostics;
        private SitesRestOperations _sitesRestClient;
        private ClientDiagnostics _slicesClientDiagnostics;
        private SlicesRestOperations _slicesRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics AttachedDataNetworksClientDiagnostics => _attachedDataNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AttachedDataNetworksRestOperations AttachedDataNetworksRestClient => _attachedDataNetworksRestClient ??= new AttachedDataNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DataNetworksClientDiagnostics => _dataNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DataNetworksRestOperations DataNetworksRestClient => _dataNetworksRestClient ??= new DataNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DiagnosticsPackagesClientDiagnostics => _diagnosticsPackagesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DiagnosticsPackagesRestOperations DiagnosticsPackagesRestClient => _diagnosticsPackagesRestClient ??= new DiagnosticsPackagesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics MobileNetworksClientDiagnostics => _mobileNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private MobileNetworksRestOperations MobileNetworksRestClient => _mobileNetworksRestClient ??= new MobileNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PacketCapturesClientDiagnostics => _packetCapturesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PacketCapturesRestOperations PacketCapturesRestClient => _packetCapturesRestClient ??= new PacketCapturesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PacketCoreControlPlanesClientDiagnostics => _packetCoreControlPlanesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PacketCoreControlPlanesRestOperations PacketCoreControlPlanesRestClient => _packetCoreControlPlanesRestClient ??= new PacketCoreControlPlanesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PacketCoreControlPlaneVersionsClientDiagnostics => _packetCoreControlPlaneVersionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PacketCoreControlPlaneVersionsRestOperations PacketCoreControlPlaneVersionsRestClient => _packetCoreControlPlaneVersionsRestClient ??= new PacketCoreControlPlaneVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PacketCoreDataPlanesClientDiagnostics => _packetCoreDataPlanesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PacketCoreDataPlanesRestOperations PacketCoreDataPlanesRestClient => _packetCoreDataPlanesRestClient ??= new PacketCoreDataPlanesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ServicesClientDiagnostics => _servicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ServicesRestOperations ServicesRestClient => _servicesRestClient ??= new ServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SimsClientDiagnostics => _simsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SimsRestOperations SimsRestClient => _simsRestClient ??= new SimsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SimGroupsClientDiagnostics => _simGroupsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SimGroupsRestOperations SimGroupsRestClient => _simGroupsRestClient ??= new SimGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SimPoliciesClientDiagnostics => _simPoliciesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SimPoliciesRestOperations SimPoliciesRestClient => _simPoliciesRestClient ??= new SimPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SitesClientDiagnostics => _sitesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SitesRestOperations SitesRestClient => _sitesRestClient ??= new SitesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SlicesClientDiagnostics => _slicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SlicesRestOperations SlicesRestClient => _slicesRestClient ??= new SlicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Deletes the specified attached data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="attachedDataNetworkName"> The name of the attached data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAttachedDataNetworkAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, string attachedDataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = await AttachedDataNetworksRestClient.DeleteAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(AttachedDataNetworksClientDiagnostics, Pipeline, AttachedDataNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified attached data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="attachedDataNetworkName"> The name of the attached data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteAttachedDataNetwork(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, string attachedDataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = AttachedDataNetworksRestClient.Delete(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName, cancellationToken);
                var operation = new MobileNetworkArmOperation(AttachedDataNetworksClientDiagnostics, Pipeline, AttachedDataNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified attached data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="attachedDataNetworkName"> The name of the attached data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AttachedDataNetwork>> GetAttachedDataNetworkAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, string attachedDataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = await AttachedDataNetworksRestClient.GetAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified attached data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="attachedDataNetworkName"> The name of the attached data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AttachedDataNetwork> GetAttachedDataNetwork(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, string attachedDataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = AttachedDataNetworksRestClient.Get(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, attachedDataNetworkName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an attached data network. Must be created in the same location as its parent packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AttachedDataNetwork>> CreateOrUpdateAttachedDataNetworkAsync(WaitUntil waitUntil, TenantResourceCreateOrUpdateAttachedDataNetworkOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = await AttachedDataNetworksRestClient.CreateOrUpdateAsync(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.AttachedDataNetwork, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AttachedDataNetwork>(new AttachedDataNetworkOperationSource(), AttachedDataNetworksClientDiagnostics, Pipeline, AttachedDataNetworksRestClient.CreateCreateOrUpdateRequest(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.AttachedDataNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates an attached data network. Must be created in the same location as its parent packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AttachedDataNetwork> CreateOrUpdateAttachedDataNetwork(WaitUntil waitUntil, TenantResourceCreateOrUpdateAttachedDataNetworkOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = AttachedDataNetworksRestClient.CreateOrUpdate(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.AttachedDataNetwork, cancellationToken);
                var operation = new MobileNetworkArmOperation<AttachedDataNetwork>(new AttachedDataNetworkOperationSource(), AttachedDataNetworksClientDiagnostics, Pipeline, AttachedDataNetworksRestClient.CreateCreateOrUpdateRequest(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.AttachedDataNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates an attached data network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AttachedDataNetwork>> UpdateTagsAttachedDataNetworkAsync(TenantResourceUpdateTagsAttachedDataNetworkOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = await AttachedDataNetworksRestClient.UpdateTagsAsync(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.TagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates an attached data network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks/{attachedDataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AttachedDataNetwork> UpdateTagsAttachedDataNetwork(TenantResourceUpdateTagsAttachedDataNetworkOptions options, CancellationToken cancellationToken = default)
        {
            using var scope = AttachedDataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsAttachedDataNetwork");
            scope.Start();
            try
            {
                var response = AttachedDataNetworksRestClient.UpdateTags(options.SubscriptionId, options.ResourceGroupName, options.PacketCoreControlPlaneName, options.PacketCoreDataPlaneName, options.AttachedDataNetworkName, options.TagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the attached data networks associated with a packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_ListByPacketCoreDataPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AttachedDataNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AttachedDataNetwork> GetAttachedDataNetworksByPacketCoreDataPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AttachedDataNetworksRestClient.CreateListByPacketCoreDataPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AttachedDataNetworksRestClient.CreateListByPacketCoreDataPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, AttachedDataNetwork.DeserializeAttachedDataNetwork, AttachedDataNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAttachedDataNetworksByPacketCoreDataPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the attached data networks associated with a packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}/attachedDataNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AttachedDataNetworks_ListByPacketCoreDataPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AttachedDataNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AttachedDataNetwork> GetAttachedDataNetworksByPacketCoreDataPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => AttachedDataNetworksRestClient.CreateListByPacketCoreDataPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => AttachedDataNetworksRestClient.CreateListByPacketCoreDataPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, AttachedDataNetwork.DeserializeAttachedDataNetwork, AttachedDataNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetAttachedDataNetworksByPacketCoreDataPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteDataNetworkAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteDataNetwork");
            scope.Start();
            try
            {
                var response = await DataNetworksRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(DataNetworksClientDiagnostics, Pipeline, DataNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteDataNetwork(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteDataNetwork");
            scope.Start();
            try
            {
                var response = DataNetworksRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, cancellationToken);
                var operation = new MobileNetworkArmOperation(DataNetworksClientDiagnostics, Pipeline, DataNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataNetwork>> GetDataNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDataNetwork");
            scope.Start();
            try
            {
                var response = await DataNetworksRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified data network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataNetwork> GetDataNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDataNetwork");
            scope.Start();
            try
            {
                var response = DataNetworksRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a data network. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="dataNetwork"> Parameters supplied to the create or update data network operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<DataNetwork>> CreateOrUpdateDataNetworkAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, DataNetwork dataNetwork, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateDataNetwork");
            scope.Start();
            try
            {
                var response = await DataNetworksRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, dataNetwork, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<DataNetwork>(new DataNetworkOperationSource(), DataNetworksClientDiagnostics, Pipeline, DataNetworksRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, dataNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a data network. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="dataNetwork"> Parameters supplied to the create or update data network operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<DataNetwork> CreateOrUpdateDataNetwork(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, DataNetwork dataNetwork, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateDataNetwork");
            scope.Start();
            try
            {
                var response = DataNetworksRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, dataNetwork, cancellationToken);
                var operation = new MobileNetworkArmOperation<DataNetwork>(new DataNetworkOperationSource(), DataNetworksClientDiagnostics, Pipeline, DataNetworksRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, dataNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates data network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="tagsObject"> Parameters supplied to update data network tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DataNetwork>> UpdateTagsDataNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsDataNetwork");
            scope.Start();
            try
            {
                var response = await DataNetworksRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates data network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks/{dataNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="dataNetworkName"> The name of the data network. </param>
        /// <param name="tagsObject"> Parameters supplied to update data network tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DataNetwork> UpdateTagsDataNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string dataNetworkName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = DataNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsDataNetwork");
            scope.Start();
            try
            {
                var response = DataNetworksRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, dataNetworkName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all data networks in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataNetwork> GetDataNetworksByMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DataNetworksRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DataNetworksRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, DataNetwork.DeserializeDataNetwork, DataNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetDataNetworksByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all data networks in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/dataNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataNetworks_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataNetwork> GetDataNetworksByMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DataNetworksRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DataNetworksRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, DataNetwork.DeserializeDataNetwork, DataNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetDataNetworksByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Creates or updates a diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<DiagnosticsPackage>> CreateOrUpdateDiagnosticsPackageAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = await DiagnosticsPackagesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<DiagnosticsPackage>(new DiagnosticsPackageOperationSource(), DiagnosticsPackagesClientDiagnostics, Pipeline, DiagnosticsPackagesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<DiagnosticsPackage> CreateOrUpdateDiagnosticsPackage(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = DiagnosticsPackagesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken);
                var operation = new MobileNetworkArmOperation<DiagnosticsPackage>(new DiagnosticsPackageOperationSource(), DiagnosticsPackagesClientDiagnostics, Pipeline, DiagnosticsPackagesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DiagnosticsPackage>> GetDiagnosticsPackageAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = await DiagnosticsPackagesRestClient.GetAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DiagnosticsPackage> GetDiagnosticsPackage(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = DiagnosticsPackagesRestClient.Get(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteDiagnosticsPackageAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = await DiagnosticsPackagesRestClient.DeleteAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(DiagnosticsPackagesClientDiagnostics, Pipeline, DiagnosticsPackagesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified diagnostics package.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages/{diagnosticsPackageName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="diagnosticsPackageName"> The name of the diagnostics package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteDiagnosticsPackage(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string diagnosticsPackageName, CancellationToken cancellationToken = default)
        {
            using var scope = DiagnosticsPackagesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteDiagnosticsPackage");
            scope.Start();
            try
            {
                var response = DiagnosticsPackagesRestClient.Delete(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName, cancellationToken);
                var operation = new MobileNetworkArmOperation(DiagnosticsPackagesClientDiagnostics, Pipeline, DiagnosticsPackagesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, diagnosticsPackageName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the diagnostics packages under a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiagnosticsPackage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DiagnosticsPackage> GetDiagnosticsPackagesByPacketCoreControlPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DiagnosticsPackagesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DiagnosticsPackagesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, DiagnosticsPackage.DeserializeDiagnosticsPackage, DiagnosticsPackagesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetDiagnosticsPackagesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the diagnostics packages under a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/diagnosticsPackages</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DiagnosticsPackages_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiagnosticsPackage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DiagnosticsPackage> GetDiagnosticsPackagesByPacketCoreControlPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DiagnosticsPackagesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DiagnosticsPackagesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, DiagnosticsPackage.DeserializeDiagnosticsPackage, DiagnosticsPackagesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetDiagnosticsPackagesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteMobileNetworkAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteMobileNetwork");
            scope.Start();
            try
            {
                var response = await MobileNetworksRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(MobileNetworksClientDiagnostics, Pipeline, MobileNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteMobileNetwork(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteMobileNetwork");
            scope.Start();
            try
            {
                var response = MobileNetworksRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, cancellationToken);
                var operation = new MobileNetworkArmOperation(MobileNetworksClientDiagnostics, Pipeline, MobileNetworksRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.MobileNetwork>> GetMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetMobileNetwork");
            scope.Start();
            try
            {
                var response = await MobileNetworksRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.MobileNetwork> GetMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetMobileNetwork");
            scope.Start();
            try
            {
                var response = MobileNetworksRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="mobileNetwork"> Parameters supplied to the create or update mobile network operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Models.MobileNetwork>> CreateOrUpdateMobileNetworkAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, Models.MobileNetwork mobileNetwork, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateMobileNetwork");
            scope.Start();
            try
            {
                var response = await MobileNetworksRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, mobileNetwork, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<Models.MobileNetwork>(new MobileNetworkOperationSource(), MobileNetworksClientDiagnostics, Pipeline, MobileNetworksRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, mobileNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="mobileNetwork"> Parameters supplied to the create or update mobile network operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Models.MobileNetwork> CreateOrUpdateMobileNetwork(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, Models.MobileNetwork mobileNetwork, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateMobileNetwork");
            scope.Start();
            try
            {
                var response = MobileNetworksRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, mobileNetwork, cancellationToken);
                var operation = new MobileNetworkArmOperation<Models.MobileNetwork>(new MobileNetworkOperationSource(), MobileNetworksClientDiagnostics, Pipeline, MobileNetworksRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, mobileNetwork).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates mobile network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="tagsObject"> Parameters supplied to update mobile network tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.MobileNetwork>> UpdateTagsMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsMobileNetwork");
            scope.Start();
            try
            {
                var response = await MobileNetworksRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates mobile network tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="tagsObject"> Parameters supplied to update mobile network tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.MobileNetwork> UpdateTagsMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = MobileNetworksClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsMobileNetwork");
            scope.Start();
            try
            {
                var response = MobileNetworksRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the mobile networks in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/mobileNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.MobileNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.MobileNetwork> GetMobileNetworksBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MobileNetworksRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MobileNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.MobileNetwork.DeserializeMobileNetwork, MobileNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetMobileNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the mobile networks in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/mobileNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.MobileNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.MobileNetwork> GetMobileNetworksBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MobileNetworksRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MobileNetworksRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.MobileNetwork.DeserializeMobileNetwork, MobileNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetMobileNetworksBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the mobile networks in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.MobileNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.MobileNetwork> GetMobileNetworksByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MobileNetworksRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MobileNetworksRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Models.MobileNetwork.DeserializeMobileNetwork, MobileNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetMobileNetworksByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the mobile networks in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MobileNetworks_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.MobileNetwork" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.MobileNetwork> GetMobileNetworksByResourceGroup(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => MobileNetworksRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => MobileNetworksRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Models.MobileNetwork.DeserializeMobileNetwork, MobileNetworksClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetMobileNetworksByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Creates or updates a packet capture.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="packetCapture"> Parameters supplied to the create or update packet capture operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<PacketCapture>> CreateOrUpdatePacketCaptureAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, PacketCapture packetCapture, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCapture");
            scope.Start();
            try
            {
                var response = await PacketCapturesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, packetCapture, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<PacketCapture>(new PacketCaptureOperationSource(), PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, packetCapture).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a packet capture.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="packetCapture"> Parameters supplied to the create or update packet capture operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<PacketCapture> CreateOrUpdatePacketCapture(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, PacketCapture packetCapture, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCapture");
            scope.Start();
            try
            {
                var response = PacketCapturesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, packetCapture, cancellationToken);
                var operation = new MobileNetworkArmOperation<PacketCapture>(new PacketCaptureOperationSource(), PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, packetCapture).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet capture session.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCapture>> GetPacketCaptureAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCapture");
            scope.Start();
            try
            {
                var response = await PacketCapturesRestClient.GetAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet capture session.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCapture> GetPacketCapture(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCapture");
            scope.Start();
            try
            {
                var response = PacketCapturesRestClient.Get(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified packet capture.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeletePacketCaptureAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCapture");
            scope.Start();
            try
            {
                var response = await PacketCapturesRestClient.DeleteAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified packet capture.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeletePacketCapture(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCapture");
            scope.Start();
            try
            {
                var response = PacketCapturesRestClient.Delete(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken);
                var operation = new MobileNetworkArmOperation(PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Stop a packet capture session.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}/stop</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Stop</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> StopPacketCaptureAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.StopPacketCapture");
            scope.Start();
            try
            {
                var response = await PacketCapturesRestClient.StopAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateStopRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Stop a packet capture session.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures/{packetCaptureName}/stop</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_Stop</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCaptureName"> The name of the packet capture session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> StopPacketCapture(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCaptureName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCapturesClientDiagnostics.CreateScope("TenantResourceExtensionClient.StopPacketCapture");
            scope.Start();
            try
            {
                var response = PacketCapturesRestClient.Stop(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCapturesClientDiagnostics, Pipeline, PacketCapturesRestClient.CreateStopRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCaptureName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the packet capture sessions under a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCapture" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCapture> GetPacketCapturesByPacketCoreControlPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCapturesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCapturesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCapture.DeserializePacketCapture, PacketCapturesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCapturesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the packet capture sessions under a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCaptures</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCaptures_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCapture" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCapture> GetPacketCapturesByPacketCoreControlPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCapturesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCapturesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCapture.DeserializePacketCapture, PacketCapturesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCapturesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeletePacketCoreControlPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.DeleteAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeletePacketCoreControlPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.Delete(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken);
                var operation = new MobileNetworkArmOperation(PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreControlPlane>> GetPacketCoreControlPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.GetAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreControlPlane> GetPacketCoreControlPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.Get(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreControlPlane"> Parameters supplied to the create or update packet core control plane operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<PacketCoreControlPlane>> CreateOrUpdatePacketCoreControlPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, PacketCoreControlPlane packetCoreControlPlane, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlane, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<PacketCoreControlPlane>(new PacketCoreControlPlaneOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlane).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreControlPlane"> Parameters supplied to the create or update packet core control plane operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<PacketCoreControlPlane> CreateOrUpdatePacketCoreControlPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, PacketCoreControlPlane packetCoreControlPlane, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlane, cancellationToken);
                var operation = new MobileNetworkArmOperation<PacketCoreControlPlane>(new PacketCoreControlPlaneOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlane).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch packet core control plane resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="identityAndTagsObject"> Parameters supplied to patch packet core control plane resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreControlPlane>> UpdateTagsPacketCoreControlPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, IdentityAndTagsObject identityAndTagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, identityAndTagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch packet core control plane resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="identityAndTagsObject"> Parameters supplied to patch packet core control plane resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreControlPlane> UpdateTagsPacketCoreControlPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, IdentityAndTagsObject identityAndTagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.UpdateTags(subscriptionId, resourceGroupName, packetCoreControlPlaneName, identityAndTagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the packet core control planes in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreControlPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreControlPlane> GetPacketCoreControlPlanesBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlanesRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlanesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlane.DeserializePacketCoreControlPlane, PacketCoreControlPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlanesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the packet core control planes in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreControlPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreControlPlane> GetPacketCoreControlPlanesBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlanesRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlanesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlane.DeserializePacketCoreControlPlane, PacketCoreControlPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlanesBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the packet core control planes in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreControlPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreControlPlane> GetPacketCoreControlPlanesByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlanesRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlanesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlane.DeserializePacketCoreControlPlane, PacketCoreControlPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlanesByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the packet core control planes in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreControlPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreControlPlane> GetPacketCoreControlPlanesByResourceGroup(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlanesRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlanesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlane.DeserializePacketCoreControlPlane, PacketCoreControlPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlanesByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Roll back the specified packet core control plane to the previous version, "rollbackVersion". Multiple consecutive rollbacks are not possible. This action may cause a service outage.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/rollback</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Rollback</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> RollbackPacketCoreControlPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.RollbackPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.RollbackAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateRollbackRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Roll back the specified packet core control plane to the previous version, "rollbackVersion". Multiple consecutive rollbacks are not possible. This action may cause a service outage.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/rollback</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Rollback</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> RollbackPacketCoreControlPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.RollbackPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.Rollback(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateRollbackRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reinstall the specified packet core control plane. This action will remove any transaction state from the packet core to return it to a known state. This action will cause a service outage.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/reinstall</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Reinstall</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> ReinstallPacketCoreControlPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.ReinstallPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.ReinstallAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateReinstallRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reinstall the specified packet core control plane. This action will remove any transaction state from the packet core to return it to a known state. This action will cause a service outage.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/reinstall</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_Reinstall</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> ReinstallPacketCoreControlPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.ReinstallPacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.Reinstall(subscriptionId, resourceGroupName, packetCoreControlPlaneName, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateReinstallRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Collect a diagnostics package for the specified packet core control plane. This action will upload the diagnostics to a storage account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/collectDiagnosticsPackage</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_CollectDiagnosticsPackage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreControlPlaneCollectDiagnosticsPackage"> Parameters supplied to the packet core control plane collect diagnostics package operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> CollectDiagnosticsPackagePacketCoreControlPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, PacketCoreControlPlaneCollectDiagnosticsPackage packetCoreControlPlaneCollectDiagnosticsPackage, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CollectDiagnosticsPackagePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlanesRestClient.CollectDiagnosticsPackageAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlaneCollectDiagnosticsPackage, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateCollectDiagnosticsPackageRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlaneCollectDiagnosticsPackage).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Collect a diagnostics package for the specified packet core control plane. This action will upload the diagnostics to a storage account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/collectDiagnosticsPackage</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlanes_CollectDiagnosticsPackage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreControlPlaneCollectDiagnosticsPackage"> Parameters supplied to the packet core control plane collect diagnostics package operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> CollectDiagnosticsPackagePacketCoreControlPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, PacketCoreControlPlaneCollectDiagnosticsPackage packetCoreControlPlaneCollectDiagnosticsPackage, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CollectDiagnosticsPackagePacketCoreControlPlane");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlanesRestClient.CollectDiagnosticsPackage(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlaneCollectDiagnosticsPackage, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), PacketCoreControlPlanesClientDiagnostics, Pipeline, PacketCoreControlPlanesRestClient.CreateCollectDiagnosticsPackageRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreControlPlaneCollectDiagnosticsPackage).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core control plane version.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the packet core control plane version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreControlPlaneVersion>> GetPacketCoreControlPlaneVersionAsync(string versionName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlaneVersionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreControlPlaneVersion");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlaneVersionsRestClient.GetAsync(versionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core control plane version.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The name of the packet core control plane version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreControlPlaneVersion> GetPacketCoreControlPlaneVersion(string versionName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlaneVersionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreControlPlaneVersion");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlaneVersionsRestClient.Get(versionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all supported packet core control planes versions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreControlPlaneVersion" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreControlPlaneVersion> GetPacketCoreControlPlaneVersionsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlaneVersionsRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlaneVersionsRestClient.CreateListNextPageRequest(nextLink);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlaneVersion.DeserializePacketCoreControlPlaneVersion, PacketCoreControlPlaneVersionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlaneVersions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all supported packet core control planes versions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreControlPlaneVersion" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreControlPlaneVersion> GetPacketCoreControlPlaneVersions(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlaneVersionsRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlaneVersionsRestClient.CreateListNextPageRequest(nextLink);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlaneVersion.DeserializePacketCoreControlPlaneVersion, PacketCoreControlPlaneVersionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlaneVersions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets information about the specified packet core control plane version.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_GetBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="versionName"> The name of the packet core control plane version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreControlPlaneVersion>> GetBySubscriptionPacketCoreControlPlaneVersionAsync(Guid subscriptionId, string versionName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlaneVersionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetBySubscriptionPacketCoreControlPlaneVersion");
            scope.Start();
            try
            {
                var response = await PacketCoreControlPlaneVersionsRestClient.GetBySubscriptionAsync(subscriptionId, versionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core control plane version.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_GetBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="versionName"> The name of the packet core control plane version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreControlPlaneVersion> GetBySubscriptionPacketCoreControlPlaneVersion(Guid subscriptionId, string versionName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreControlPlaneVersionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetBySubscriptionPacketCoreControlPlaneVersion");
            scope.Start();
            try
            {
                var response = PacketCoreControlPlaneVersionsRestClient.GetBySubscription(subscriptionId, versionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all supported packet core control planes versions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreControlPlaneVersion" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreControlPlaneVersion> GetPacketCoreControlPlaneVersionsBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlaneVersionsRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlaneVersionsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlaneVersion.DeserializePacketCoreControlPlaneVersion, PacketCoreControlPlaneVersionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlaneVersionsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all supported packet core control planes versions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreControlPlaneVersions_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreControlPlaneVersion" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreControlPlaneVersion> GetPacketCoreControlPlaneVersionsBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreControlPlaneVersionsRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreControlPlaneVersionsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCoreControlPlaneVersion.DeserializePacketCoreControlPlaneVersion, PacketCoreControlPlaneVersionsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreControlPlaneVersionsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeletePacketCoreDataPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreDataPlanesRestClient.DeleteAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(PacketCoreDataPlanesClientDiagnostics, Pipeline, PacketCoreDataPlanesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeletePacketCoreDataPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = PacketCoreDataPlanesRestClient.Delete(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, cancellationToken);
                var operation = new MobileNetworkArmOperation(PacketCoreDataPlanesClientDiagnostics, Pipeline, PacketCoreDataPlanesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreDataPlane>> GetPacketCoreDataPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreDataPlanesRestClient.GetAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified packet core data plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreDataPlane> GetPacketCoreDataPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetPacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = PacketCoreDataPlanesRestClient.Get(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a packet core data plane. Must be created in the same location as its parent packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="packetCoreDataPlane"> Parameters supplied to the create or update packet core data plane operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<PacketCoreDataPlane>> CreateOrUpdatePacketCoreDataPlaneAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, PacketCoreDataPlane packetCoreDataPlane, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreDataPlanesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, packetCoreDataPlane, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<PacketCoreDataPlane>(new PacketCoreDataPlaneOperationSource(), PacketCoreDataPlanesClientDiagnostics, Pipeline, PacketCoreDataPlanesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, packetCoreDataPlane).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a packet core data plane. Must be created in the same location as its parent packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="packetCoreDataPlane"> Parameters supplied to the create or update packet core data plane operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<PacketCoreDataPlane> CreateOrUpdatePacketCoreDataPlane(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, PacketCoreDataPlane packetCoreDataPlane, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdatePacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = PacketCoreDataPlanesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, packetCoreDataPlane, cancellationToken);
                var operation = new MobileNetworkArmOperation<PacketCoreDataPlane>(new PacketCoreDataPlaneOperationSource(), PacketCoreDataPlanesClientDiagnostics, Pipeline, PacketCoreDataPlanesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, packetCoreDataPlane).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates packet core data planes tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="tagsObject"> Parameters supplied to update packet core data plane tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PacketCoreDataPlane>> UpdateTagsPacketCoreDataPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsPacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = await PacketCoreDataPlanesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates packet core data planes tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes/{packetCoreDataPlaneName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="packetCoreDataPlaneName"> The name of the packet core data plane. </param>
        /// <param name="tagsObject"> Parameters supplied to update packet core data plane tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PacketCoreDataPlane> UpdateTagsPacketCoreDataPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, string packetCoreDataPlaneName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = PacketCoreDataPlanesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsPacketCoreDataPlane");
            scope.Start();
            try
            {
                var response = PacketCoreDataPlanesRestClient.UpdateTags(subscriptionId, resourceGroupName, packetCoreControlPlaneName, packetCoreDataPlaneName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the packet core data planes associated with a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreDataPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreDataPlane> GetPacketCoreDataPlanesByPacketCoreControlPlaneAsync(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreDataPlanesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreDataPlanesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PacketCoreDataPlane.DeserializePacketCoreDataPlane, PacketCoreDataPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreDataPlanesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all the packet core data planes associated with a packet core control plane.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/packetCoreDataPlanes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PacketCoreDataPlanes_ListByPacketCoreControlPlane</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="packetCoreControlPlaneName"> The name of the packet core control plane. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreDataPlane" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreDataPlane> GetPacketCoreDataPlanesByPacketCoreControlPlane(Guid subscriptionId, string resourceGroupName, string packetCoreControlPlaneName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => PacketCoreDataPlanesRestClient.CreateListByPacketCoreControlPlaneRequest(subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => PacketCoreDataPlanesRestClient.CreateListByPacketCoreControlPlaneNextPageRequest(nextLink, subscriptionId, resourceGroupName, packetCoreControlPlaneName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PacketCoreDataPlane.DeserializePacketCoreDataPlane, PacketCoreDataPlanesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetPacketCoreDataPlanesByPacketCoreControlPlane", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteServiceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteService");
            scope.Start();
            try
            {
                var response = await ServicesRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(ServicesClientDiagnostics, Pipeline, ServicesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, serviceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteService(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteService");
            scope.Start();
            try
            {
                var response = ServicesRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, cancellationToken);
                var operation = new MobileNetworkArmOperation(ServicesClientDiagnostics, Pipeline, ServicesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, serviceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Service>> GetServiceAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetService");
            scope.Start();
            try
            {
                var response = await ServicesRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Service> GetService(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetService");
            scope.Start();
            try
            {
                var response = ServicesRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a service. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="service"> Parameters supplied to the create or update service operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Service>> CreateOrUpdateServiceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, Service service, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateService");
            scope.Start();
            try
            {
                var response = await ServicesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, service, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<Service>(new ServiceOperationSource(), ServicesClientDiagnostics, Pipeline, ServicesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, service).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a service. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="service"> Parameters supplied to the create or update service operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Service> CreateOrUpdateService(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, Service service, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateService");
            scope.Start();
            try
            {
                var response = ServicesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, service, cancellationToken);
                var operation = new MobileNetworkArmOperation<Service>(new ServiceOperationSource(), ServicesClientDiagnostics, Pipeline, ServicesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, service).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates service tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="tagsObject"> Parameters supplied to update service tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Service>> UpdateTagsServiceAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsService");
            scope.Start();
            try
            {
                var response = await ServicesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates service tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="serviceName"> The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`. </param>
        /// <param name="tagsObject"> Parameters supplied to update service tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Service> UpdateTagsService(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string serviceName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsService");
            scope.Start();
            try
            {
                var response = ServicesRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, serviceName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the services in a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Service" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Service> GetServicesByMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ServicesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ServicesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Service.DeserializeService, ServicesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetServicesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the services in a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Services_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Service" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Service> GetServicesByMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ServicesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ServicesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Service.DeserializeService, ServicesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetServicesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSimAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.DeleteAsync(subscriptionId, resourceGroupName, simGroupName, simName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SimsClientDiagnostics, Pipeline, SimsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, simGroupName, simName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSim(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.Delete(subscriptionId, resourceGroupName, simGroupName, simName, cancellationToken);
                var operation = new MobileNetworkArmOperation(SimsClientDiagnostics, Pipeline, SimsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, simGroupName, simName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Sim>> GetSimAsync(Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.GetAsync(subscriptionId, resourceGroupName, simGroupName, simName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Sim> GetSim(Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.Get(subscriptionId, resourceGroupName, simGroupName, simName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="sim"> Parameters supplied to the create or update SIM operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Sim>> CreateOrUpdateSimAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, Sim sim, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, simGroupName, simName, sim, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<Sim>(new SimOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, simGroupName, simName, sim).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simName"> The name of the SIM. </param>
        /// <param name="sim"> Parameters supplied to the create or update SIM operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Sim> CreateOrUpdateSim(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, string simName, Sim sim, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, simGroupName, simName, sim, cancellationToken);
                var operation = new MobileNetworkArmOperation<Sim>(new SimOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, simGroupName, simName, sim).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the SIMs in a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_ListByGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Sim" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Sim> GetSimsByGroupAsync(Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimsRestClient.CreateListByGroupRequest(subscriptionId, resourceGroupName, simGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimsRestClient.CreateListByGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, simGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Sim.DeserializeSim, SimsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimsByGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the SIMs in a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_ListByGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Sim" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Sim> GetSimsByGroup(Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimsRestClient.CreateListByGroupRequest(subscriptionId, resourceGroupName, simGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimsRestClient.CreateListByGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName, simGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Sim.DeserializeSim, SimsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimsByGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Bulk upload SIMs to a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkUpload</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simUploadList"> Parameters supplied to the bulk SIM upload operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> BulkUploadSimAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimUploadList simUploadList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkUploadSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.BulkUploadAsync(subscriptionId, resourceGroupName, simGroupName, simUploadList, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkUploadRequest(subscriptionId, resourceGroupName, simGroupName, simUploadList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk upload SIMs to a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkUpload</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simUploadList"> Parameters supplied to the bulk SIM upload operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> BulkUploadSim(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimUploadList simUploadList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkUploadSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.BulkUpload(subscriptionId, resourceGroupName, simGroupName, simUploadList, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkUploadRequest(subscriptionId, resourceGroupName, simGroupName, simUploadList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk delete SIMs from a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/deleteSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkDelete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simDeleteList"> Parameters supplied to the bulk SIM delete operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> BulkDeleteSimAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimDeleteList simDeleteList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkDeleteSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.BulkDeleteAsync(subscriptionId, resourceGroupName, simGroupName, simDeleteList, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkDeleteRequest(subscriptionId, resourceGroupName, simGroupName, simDeleteList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk delete SIMs from a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/deleteSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkDelete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simDeleteList"> Parameters supplied to the bulk SIM delete operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> BulkDeleteSim(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimDeleteList simDeleteList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkDeleteSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.BulkDelete(subscriptionId, resourceGroupName, simGroupName, simDeleteList, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkDeleteRequest(subscriptionId, resourceGroupName, simGroupName, simDeleteList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadEncryptedSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkUploadEncrypted</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="encryptedSimUploadList"> Parameters supplied to the encrypted SIMs upload operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<AsyncOperationStatus>> BulkUploadEncryptedSimAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, EncryptedSimUploadList encryptedSimUploadList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkUploadEncryptedSim");
            scope.Start();
            try
            {
                var response = await SimsRestClient.BulkUploadEncryptedAsync(subscriptionId, resourceGroupName, simGroupName, encryptedSimUploadList, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkUploadEncryptedRequest(subscriptionId, resourceGroupName, simGroupName, encryptedSimUploadList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadEncryptedSims</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sims_BulkUploadEncrypted</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="encryptedSimUploadList"> Parameters supplied to the encrypted SIMs upload operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<AsyncOperationStatus> BulkUploadEncryptedSim(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, EncryptedSimUploadList encryptedSimUploadList, CancellationToken cancellationToken = default)
        {
            using var scope = SimsClientDiagnostics.CreateScope("TenantResourceExtensionClient.BulkUploadEncryptedSim");
            scope.Start();
            try
            {
                var response = SimsRestClient.BulkUploadEncrypted(subscriptionId, resourceGroupName, simGroupName, encryptedSimUploadList, cancellationToken);
                var operation = new MobileNetworkArmOperation<AsyncOperationStatus>(new AsyncOperationStatusOperationSource(), SimsClientDiagnostics, Pipeline, SimsRestClient.CreateBulkUploadEncryptedRequest(subscriptionId, resourceGroupName, simGroupName, encryptedSimUploadList).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSimGroupAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSimGroup");
            scope.Start();
            try
            {
                var response = await SimGroupsRestClient.DeleteAsync(subscriptionId, resourceGroupName, simGroupName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SimGroupsClientDiagnostics, Pipeline, SimGroupsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, simGroupName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSimGroup(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSimGroup");
            scope.Start();
            try
            {
                var response = SimGroupsRestClient.Delete(subscriptionId, resourceGroupName, simGroupName, cancellationToken);
                var operation = new MobileNetworkArmOperation(SimGroupsClientDiagnostics, Pipeline, SimGroupsRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, simGroupName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SimGroup>> GetSimGroupAsync(Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSimGroup");
            scope.Start();
            try
            {
                var response = await SimGroupsRestClient.GetAsync(subscriptionId, resourceGroupName, simGroupName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SimGroup> GetSimGroup(Guid subscriptionId, string resourceGroupName, string simGroupName, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSimGroup");
            scope.Start();
            try
            {
                var response = SimGroupsRestClient.Get(subscriptionId, resourceGroupName, simGroupName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simGroup"> Parameters supplied to the create or update SIM group operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SimGroup>> CreateOrUpdateSimGroupAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimGroup simGroup, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSimGroup");
            scope.Start();
            try
            {
                var response = await SimGroupsRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, simGroupName, simGroup, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<SimGroup>(new SimGroupOperationSource(), SimGroupsClientDiagnostics, Pipeline, SimGroupsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, simGroupName, simGroup).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="simGroup"> Parameters supplied to the create or update SIM group operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SimGroup> CreateOrUpdateSimGroup(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string simGroupName, SimGroup simGroup, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSimGroup");
            scope.Start();
            try
            {
                var response = SimGroupsRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, simGroupName, simGroup, cancellationToken);
                var operation = new MobileNetworkArmOperation<SimGroup>(new SimGroupOperationSource(), SimGroupsClientDiagnostics, Pipeline, SimGroupsRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, simGroupName, simGroup).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch SIM group resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="identityAndTagsObject"> Parameters supplied to patch SIM group resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SimGroup>> UpdateTagsSimGroupAsync(Guid subscriptionId, string resourceGroupName, string simGroupName, IdentityAndTagsObject identityAndTagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSimGroup");
            scope.Start();
            try
            {
                var response = await SimGroupsRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, simGroupName, identityAndTagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Patch SIM group resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="simGroupName"> The name of the SIM Group. </param>
        /// <param name="identityAndTagsObject"> Parameters supplied to patch SIM group resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SimGroup> UpdateTagsSimGroup(Guid subscriptionId, string resourceGroupName, string simGroupName, IdentityAndTagsObject identityAndTagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SimGroupsClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSimGroup");
            scope.Start();
            try
            {
                var response = SimGroupsRestClient.UpdateTags(subscriptionId, resourceGroupName, simGroupName, identityAndTagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the SIM groups in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/simGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SimGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SimGroup> GetSimGroupsBySubscriptionAsync(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimGroupsRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimGroupsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SimGroup.DeserializeSimGroup, SimGroupsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimGroupsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the SIM groups in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/simGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SimGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SimGroup> GetSimGroupsBySubscription(Guid subscriptionId, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimGroupsRestClient.CreateListBySubscriptionRequest(subscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimGroupsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, subscriptionId);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SimGroup.DeserializeSimGroup, SimGroupsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimGroupsBySubscription", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the SIM groups in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SimGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SimGroup> GetSimGroupsByResourceGroupAsync(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimGroupsRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimGroupsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SimGroup.DeserializeSimGroup, SimGroupsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimGroupsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the SIM groups in a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimGroups_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SimGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SimGroup> GetSimGroupsByResourceGroup(Guid subscriptionId, string resourceGroupName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimGroupsRestClient.CreateListByResourceGroupRequest(subscriptionId, resourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimGroupsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, subscriptionId, resourceGroupName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SimGroup.DeserializeSimGroup, SimGroupsClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimGroupsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified SIM policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSimPolicyAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSimPolicy");
            scope.Start();
            try
            {
                var response = await SimPoliciesRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SimPoliciesClientDiagnostics, Pipeline, SimPoliciesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified SIM policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSimPolicy(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSimPolicy");
            scope.Start();
            try
            {
                var response = SimPoliciesRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, cancellationToken);
                var operation = new MobileNetworkArmOperation(SimPoliciesClientDiagnostics, Pipeline, SimPoliciesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SimPolicy>> GetSimPolicyAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSimPolicy");
            scope.Start();
            try
            {
                var response = await SimPoliciesRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified SIM policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SimPolicy> GetSimPolicy(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSimPolicy");
            scope.Start();
            try
            {
                var response = SimPoliciesRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM policy. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="simPolicy"> Parameters supplied to the create or update SIM policy operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<SimPolicy>> CreateOrUpdateSimPolicyAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, SimPolicy simPolicy, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSimPolicy");
            scope.Start();
            try
            {
                var response = await SimPoliciesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, simPolicy, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<SimPolicy>(new SimPolicyOperationSource(), SimPoliciesClientDiagnostics, Pipeline, SimPoliciesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, simPolicy).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a SIM policy. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="simPolicy"> Parameters supplied to the create or update SIM policy operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<SimPolicy> CreateOrUpdateSimPolicy(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, SimPolicy simPolicy, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSimPolicy");
            scope.Start();
            try
            {
                var response = SimPoliciesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, simPolicy, cancellationToken);
                var operation = new MobileNetworkArmOperation<SimPolicy>(new SimPolicyOperationSource(), SimPoliciesClientDiagnostics, Pipeline, SimPoliciesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, simPolicy).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates SIM policy tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="tagsObject"> Parameters supplied to update SIM policy tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SimPolicy>> UpdateTagsSimPolicyAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSimPolicy");
            scope.Start();
            try
            {
                var response = await SimPoliciesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates SIM policy tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="simPolicyName"> The name of the SIM policy. </param>
        /// <param name="tagsObject"> Parameters supplied to update SIM policy tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SimPolicy> UpdateTagsSimPolicy(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string simPolicyName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SimPoliciesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSimPolicy");
            scope.Start();
            try
            {
                var response = SimPoliciesRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, simPolicyName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all the SIM policies in a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SimPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SimPolicy> GetSimPoliciesByMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimPoliciesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimPoliciesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, SimPolicy.DeserializeSimPolicy, SimPoliciesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimPoliciesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets all the SIM policies in a mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SimPolicies_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SimPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SimPolicy> GetSimPoliciesByMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SimPoliciesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SimPoliciesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, SimPolicy.DeserializeSimPolicy, SimPoliciesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSimPoliciesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes the specified mobile network site. This will also delete any network functions that are a part of this site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSiteAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSite");
            scope.Start();
            try
            {
                var response = await SitesRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, siteName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SitesClientDiagnostics, Pipeline, SitesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified mobile network site. This will also delete any network functions that are a part of this site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSite(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSite");
            scope.Start();
            try
            {
                var response = SitesRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, siteName, cancellationToken);
                var operation = new MobileNetworkArmOperation(SitesClientDiagnostics, Pipeline, SitesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified mobile network site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Site>> GetSiteAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSite");
            scope.Start();
            try
            {
                var response = await SitesRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, siteName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified mobile network site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Site> GetSite(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSite");
            scope.Start();
            try
            {
                var response = SitesRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, siteName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a mobile network site. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="site"> Parameters supplied to the create or update mobile network site operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Site>> CreateOrUpdateSiteAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, Site site, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSite");
            scope.Start();
            try
            {
                var response = await SitesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, siteName, site, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<Site>(new SiteOperationSource(), SitesClientDiagnostics, Pipeline, SitesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName, site).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a mobile network site. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="site"> Parameters supplied to the create or update mobile network site operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Site> CreateOrUpdateSite(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, Site site, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSite");
            scope.Start();
            try
            {
                var response = SitesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, siteName, site, cancellationToken);
                var operation = new MobileNetworkArmOperation<Site>(new SiteOperationSource(), SitesClientDiagnostics, Pipeline, SitesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName, site).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates site tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="tagsObject"> Parameters supplied to update network site tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Site>> UpdateTagsSiteAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSite");
            scope.Start();
            try
            {
                var response = await SitesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, siteName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates site tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="tagsObject"> Parameters supplied to update network site tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Site> UpdateTagsSite(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSite");
            scope.Start();
            try
            {
                var response = SitesRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, siteName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all sites in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Site" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Site> GetSitesByMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SitesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SitesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Site.DeserializeSite, SitesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSitesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all sites in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Site" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Site> GetSitesByMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SitesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SitesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Site.DeserializeSite, SitesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSitesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Deletes a packet core under the specified mobile network site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}/deletePacketCore</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_DeletePacketCore</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="siteDeletePacketCore"> Parameters supplied to delete a packet core under a site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeletePacketCoreSiteAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, SiteDeletePacketCore siteDeletePacketCore, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreSite");
            scope.Start();
            try
            {
                var response = await SitesRestClient.DeletePacketCoreAsync(subscriptionId, resourceGroupName, mobileNetworkName, siteName, siteDeletePacketCore, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SitesClientDiagnostics, Pipeline, SitesRestClient.CreateDeletePacketCoreRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName, siteDeletePacketCore).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a packet core under the specified mobile network site.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/sites/{siteName}/deletePacketCore</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Sites_DeletePacketCore</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="siteName"> The name of the mobile network site. </param>
        /// <param name="siteDeletePacketCore"> Parameters supplied to delete a packet core under a site. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeletePacketCoreSite(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string siteName, SiteDeletePacketCore siteDeletePacketCore, CancellationToken cancellationToken = default)
        {
            using var scope = SitesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeletePacketCoreSite");
            scope.Start();
            try
            {
                var response = SitesRestClient.DeletePacketCore(subscriptionId, resourceGroupName, mobileNetworkName, siteName, siteDeletePacketCore, cancellationToken);
                var operation = new MobileNetworkArmOperation(SitesClientDiagnostics, Pipeline, SitesRestClient.CreateDeletePacketCoreRequest(subscriptionId, resourceGroupName, mobileNetworkName, siteName, siteDeletePacketCore).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified network slice.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteSliceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSlice");
            scope.Start();
            try
            {
                var response = await SlicesRestClient.DeleteAsync(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation(SlicesClientDiagnostics, Pipeline, SlicesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, sliceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified network slice.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation DeleteSlice(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.DeleteSlice");
            scope.Start();
            try
            {
                var response = SlicesRestClient.Delete(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, cancellationToken);
                var operation = new MobileNetworkArmOperation(SlicesClientDiagnostics, Pipeline, SlicesRestClient.CreateDeleteRequest(subscriptionId, resourceGroupName, mobileNetworkName, sliceName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified network slice.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Slice>> GetSliceAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSlice");
            scope.Start();
            try
            {
                var response = await SlicesRestClient.GetAsync(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets information about the specified network slice.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Slice> GetSlice(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSlice");
            scope.Start();
            try
            {
                var response = SlicesRestClient.Get(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a network slice. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="slice"> Parameters supplied to the create or update network slice operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<Slice>> CreateOrUpdateSliceAsync(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, Slice slice, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSlice");
            scope.Start();
            try
            {
                var response = await SlicesRestClient.CreateOrUpdateAsync(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, slice, cancellationToken).ConfigureAwait(false);
                var operation = new MobileNetworkArmOperation<Slice>(new SliceOperationSource(), SlicesClientDiagnostics, Pipeline, SlicesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, slice).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a network slice. Must be created in the same location as its parent mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="slice"> Parameters supplied to the create or update network slice operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<Slice> CreateOrUpdateSlice(WaitUntil waitUntil, Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, Slice slice, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.CreateOrUpdateSlice");
            scope.Start();
            try
            {
                var response = SlicesRestClient.CreateOrUpdate(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, slice, cancellationToken);
                var operation = new MobileNetworkArmOperation<Slice>(new SliceOperationSource(), SlicesClientDiagnostics, Pipeline, SlicesRestClient.CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, slice).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates slice tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="tagsObject"> Parameters supplied to update network slice tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Slice>> UpdateTagsSliceAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSlice");
            scope.Start();
            try
            {
                var response = await SlicesRestClient.UpdateTagsAsync(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, tagsObject, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates slice tags.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices/{sliceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_UpdateTags</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="sliceName"> The name of the network slice. </param>
        /// <param name="tagsObject"> Parameters supplied to update network slice tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Slice> UpdateTagsSlice(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, string sliceName, TagsObject tagsObject, CancellationToken cancellationToken = default)
        {
            using var scope = SlicesClientDiagnostics.CreateScope("TenantResourceExtensionClient.UpdateTagsSlice");
            scope.Start();
            try
            {
                var response = SlicesRestClient.UpdateTags(subscriptionId, resourceGroupName, mobileNetworkName, sliceName, tagsObject, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all slices in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Slice" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Slice> GetSlicesByMobileNetworkAsync(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SlicesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SlicesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Slice.DeserializeSlice, SlicesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSlicesByMobileNetwork", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all slices in the mobile network.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/slices</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Slices_ListByMobileNetwork</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="mobileNetworkName"> The name of the mobile network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Slice" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Slice> GetSlicesByMobileNetwork(Guid subscriptionId, string resourceGroupName, string mobileNetworkName, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SlicesRestClient.CreateListByMobileNetworkRequest(subscriptionId, resourceGroupName, mobileNetworkName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SlicesRestClient.CreateListByMobileNetworkNextPageRequest(nextLink, subscriptionId, resourceGroupName, mobileNetworkName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Slice.DeserializeSlice, SlicesClientDiagnostics, Pipeline, "TenantResourceExtensionClient.GetSlicesByMobileNetwork", "value", "nextLink", cancellationToken);
        }
    }
}
