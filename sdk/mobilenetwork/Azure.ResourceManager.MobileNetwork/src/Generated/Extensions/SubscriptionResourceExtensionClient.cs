// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.MobileNetwork
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _mobileNetworkClientDiagnostics;
        private MobileNetworksRestOperations _mobileNetworkRestClient;
        private ClientDiagnostics _packetCoreControlPlaneClientDiagnostics;
        private PacketCoreControlPlanesRestOperations _packetCoreControlPlaneRestClient;
        private ClientDiagnostics _simGroupClientDiagnostics;
        private SimGroupsRestOperations _simGroupRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics MobileNetworkClientDiagnostics => _mobileNetworkClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", MobileNetworkResource.ResourceType.Namespace, Diagnostics);
        private MobileNetworksRestOperations MobileNetworkRestClient => _mobileNetworkRestClient ??= new MobileNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(MobileNetworkResource.ResourceType));
        private ClientDiagnostics PacketCoreControlPlaneClientDiagnostics => _packetCoreControlPlaneClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", PacketCoreControlPlaneResource.ResourceType.Namespace, Diagnostics);
        private PacketCoreControlPlanesRestOperations PacketCoreControlPlaneRestClient => _packetCoreControlPlaneRestClient ??= new PacketCoreControlPlanesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PacketCoreControlPlaneResource.ResourceType));
        private ClientDiagnostics SimGroupClientDiagnostics => _simGroupClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.MobileNetwork", SimGroupResource.ResourceType.Namespace, Diagnostics);
        private SimGroupsRestOperations SimGroupRestClient => _simGroupRestClient ??= new SimGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SimGroupResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists all the mobile networks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/mobileNetworks
        /// Operation Id: MobileNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MobileNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MobileNetworkResource> GetMobileNetworksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<MobileNetworkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MobileNetworkClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMobileNetworks");
                scope.Start();
                try
                {
                    var response = await MobileNetworkRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MobileNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MobileNetworkResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = MobileNetworkClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMobileNetworks");
                scope.Start();
                try
                {
                    var response = await MobileNetworkRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new MobileNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the mobile networks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/mobileNetworks
        /// Operation Id: MobileNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MobileNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MobileNetworkResource> GetMobileNetworks(CancellationToken cancellationToken = default)
        {
            Page<MobileNetworkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MobileNetworkClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMobileNetworks");
                scope.Start();
                try
                {
                    var response = MobileNetworkRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MobileNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MobileNetworkResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = MobileNetworkClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMobileNetworks");
                scope.Start();
                try
                {
                    var response = MobileNetworkRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new MobileNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the packet core control planes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes
        /// Operation Id: PacketCoreControlPlanes_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PacketCoreControlPlaneResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PacketCoreControlPlaneResource> GetPacketCoreControlPlanesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PacketCoreControlPlaneResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PacketCoreControlPlaneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPacketCoreControlPlanes");
                scope.Start();
                try
                {
                    var response = await PacketCoreControlPlaneRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PacketCoreControlPlaneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PacketCoreControlPlaneResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PacketCoreControlPlaneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPacketCoreControlPlanes");
                scope.Start();
                try
                {
                    var response = await PacketCoreControlPlaneRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PacketCoreControlPlaneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the packet core control planes in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes
        /// Operation Id: PacketCoreControlPlanes_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PacketCoreControlPlaneResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PacketCoreControlPlaneResource> GetPacketCoreControlPlanes(CancellationToken cancellationToken = default)
        {
            Page<PacketCoreControlPlaneResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PacketCoreControlPlaneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPacketCoreControlPlanes");
                scope.Start();
                try
                {
                    var response = PacketCoreControlPlaneRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PacketCoreControlPlaneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PacketCoreControlPlaneResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PacketCoreControlPlaneClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPacketCoreControlPlanes");
                scope.Start();
                try
                {
                    var response = PacketCoreControlPlaneRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PacketCoreControlPlaneResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all the SIM groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/simGroups
        /// Operation Id: SimGroups_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SimGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SimGroupResource> GetSimGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SimGroupResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SimGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSimGroups");
                scope.Start();
                try
                {
                    var response = await SimGroupRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SimGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SimGroupResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SimGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSimGroups");
                scope.Start();
                try
                {
                    var response = await SimGroupRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SimGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all the SIM groups in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MobileNetwork/simGroups
        /// Operation Id: SimGroups_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SimGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SimGroupResource> GetSimGroups(CancellationToken cancellationToken = default)
        {
            Page<SimGroupResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SimGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSimGroups");
                scope.Start();
                try
                {
                    var response = SimGroupRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SimGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SimGroupResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SimGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSimGroups");
                scope.Start();
                try
                {
                    var response = SimGroupRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SimGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
