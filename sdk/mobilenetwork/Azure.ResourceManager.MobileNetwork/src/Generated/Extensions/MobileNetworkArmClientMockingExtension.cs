// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.MobileNetwork;

namespace Azure.ResourceManager.MobileNetwork.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MobileNetworkArmClientMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MobileNetworkArmClientMockingExtension"/> class for mocking. </summary>
        protected MobileNetworkArmClientMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MobileNetworkArmClientMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MobileNetworkArmClientMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MobileNetworkArmClientMockingExtension(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets an object representing an <see cref="AttachedDataNetworkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AttachedDataNetworkResource.CreateResourceIdentifier" /> to create an <see cref="AttachedDataNetworkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AttachedDataNetworkResource" /> object. </returns>
        public virtual AttachedDataNetworkResource GetAttachedDataNetworkResource(ResourceIdentifier id)
        {
            AttachedDataNetworkResource.ValidateResourceId(id);
            return new AttachedDataNetworkResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DataNetworkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataNetworkResource.CreateResourceIdentifier" /> to create a <see cref="DataNetworkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataNetworkResource" /> object. </returns>
        public virtual DataNetworkResource GetDataNetworkResource(ResourceIdentifier id)
        {
            DataNetworkResource.ValidateResourceId(id);
            return new DataNetworkResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="MobileNetworkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MobileNetworkResource.CreateResourceIdentifier" /> to create a <see cref="MobileNetworkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MobileNetworkResource" /> object. </returns>
        public virtual MobileNetworkResource GetMobileNetworkResource(ResourceIdentifier id)
        {
            MobileNetworkResource.ValidateResourceId(id);
            return new MobileNetworkResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PacketCoreControlPlaneResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PacketCoreControlPlaneResource.CreateResourceIdentifier" /> to create a <see cref="PacketCoreControlPlaneResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PacketCoreControlPlaneResource" /> object. </returns>
        public virtual PacketCoreControlPlaneResource GetPacketCoreControlPlaneResource(ResourceIdentifier id)
        {
            PacketCoreControlPlaneResource.ValidateResourceId(id);
            return new PacketCoreControlPlaneResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PacketCoreControlPlaneVersionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PacketCoreControlPlaneVersionResource.CreateResourceIdentifier" /> to create a <see cref="PacketCoreControlPlaneVersionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PacketCoreControlPlaneVersionResource" /> object. </returns>
        public virtual PacketCoreControlPlaneVersionResource GetPacketCoreControlPlaneVersionResource(ResourceIdentifier id)
        {
            PacketCoreControlPlaneVersionResource.ValidateResourceId(id);
            return new PacketCoreControlPlaneVersionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PacketCoreDataPlaneResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PacketCoreDataPlaneResource.CreateResourceIdentifier" /> to create a <see cref="PacketCoreDataPlaneResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PacketCoreDataPlaneResource" /> object. </returns>
        public virtual PacketCoreDataPlaneResource GetPacketCoreDataPlaneResource(ResourceIdentifier id)
        {
            PacketCoreDataPlaneResource.ValidateResourceId(id);
            return new PacketCoreDataPlaneResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource" /> object. </returns>
        public virtual ServiceResource GetServiceResource(ResourceIdentifier id)
        {
            ServiceResource.ValidateResourceId(id);
            return new ServiceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SimResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SimResource.CreateResourceIdentifier" /> to create a <see cref="SimResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SimResource" /> object. </returns>
        public virtual SimResource GetSimResource(ResourceIdentifier id)
        {
            SimResource.ValidateResourceId(id);
            return new SimResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SimGroupResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SimGroupResource.CreateResourceIdentifier" /> to create a <see cref="SimGroupResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SimGroupResource" /> object. </returns>
        public virtual SimGroupResource GetSimGroupResource(ResourceIdentifier id)
        {
            SimGroupResource.ValidateResourceId(id);
            return new SimGroupResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SimPolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SimPolicyResource.CreateResourceIdentifier" /> to create a <see cref="SimPolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SimPolicyResource" /> object. </returns>
        public virtual SimPolicyResource GetSimPolicyResource(ResourceIdentifier id)
        {
            SimPolicyResource.ValidateResourceId(id);
            return new SimPolicyResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SiteResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SiteResource.CreateResourceIdentifier" /> to create a <see cref="SiteResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SiteResource" /> object. </returns>
        public virtual SiteResource GetSiteResource(ResourceIdentifier id)
        {
            SiteResource.ValidateResourceId(id);
            return new SiteResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SliceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SliceResource.CreateResourceIdentifier" /> to create a <see cref="SliceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SliceResource" /> object. </returns>
        public virtual SliceResource GetSliceResource(ResourceIdentifier id)
        {
            SliceResource.ValidateResourceId(id);
            return new SliceResource(Client, id);
        }
    }
}
