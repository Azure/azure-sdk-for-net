// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> The supported NAS Encryption types. </summary>
    public readonly partial struct NasEncryptionType : IEquatable<NasEncryptionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NasEncryptionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NasEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NEA0EEA0Value = "NEA0/EEA0";
        private const string NEA1EEA1Value = "NEA1/EEA1";
        private const string NEA2EEA2Value = "NEA2/EEA2";

        /// <summary> NAS signaling is not encrypted. </summary>
        public static NasEncryptionType NEA0EEA0 { get; } = new NasEncryptionType(NEA0EEA0Value);
        /// <summary> NAS signaling is encrypted with SNOW 3G cipher. </summary>
        public static NasEncryptionType NEA1EEA1 { get; } = new NasEncryptionType(NEA1EEA1Value);
        /// <summary> NAS signaling is encrypted with AES cipher. </summary>
        public static NasEncryptionType NEA2EEA2 { get; } = new NasEncryptionType(NEA2EEA2Value);
        /// <summary> Determines if two <see cref="NasEncryptionType"/> values are the same. </summary>
        public static bool operator ==(NasEncryptionType left, NasEncryptionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NasEncryptionType"/> values are not the same. </summary>
        public static bool operator !=(NasEncryptionType left, NasEncryptionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NasEncryptionType"/>. </summary>
        public static implicit operator NasEncryptionType(string value) => new NasEncryptionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NasEncryptionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NasEncryptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
