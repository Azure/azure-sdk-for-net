// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> The current status of an async operation. </summary>
    public partial class AsyncOperationStatus
    {
        /// <summary> Initializes a new instance of <see cref="AsyncOperationStatus"/>. </summary>
        /// <param name="status"> The operation status. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="status"/> is null. </exception>
        internal AsyncOperationStatus(string status)
        {
            Argument.AssertNotNull(status, nameof(status));

            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="AsyncOperationStatus"/>. </summary>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> The operation status. </param>
        /// <param name="resourceId"> Fully qualified ID for the resource that this async operation status relates to. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="percentComplete"> Percentage of the operation that is complete. </param>
        /// <param name="properties"> Properties returned by the resource provider on a successful operation. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        internal AsyncOperationStatus(string id, string name, string status, string resourceId, DateTimeOffset? startOn, DateTimeOffset? endOn, double? percentComplete, BinaryData properties, ResponseError error)
        {
            Id = id;
            Name = name;
            Status = status;
            ResourceId = resourceId;
            StartOn = startOn;
            EndOn = endOn;
            PercentComplete = percentComplete;
            Properties = properties;
            Error = error;
        }

        /// <summary> Fully qualified ID for the async operation. </summary>
        public string Id { get; }
        /// <summary> Name of the async operation. </summary>
        public string Name { get; }
        /// <summary> The operation status. </summary>
        public string Status { get; }
        /// <summary> Fully qualified ID for the resource that this async operation status relates to. </summary>
        public string ResourceId { get; }
        /// <summary> The start time of the operation. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> The end time of the operation. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Percentage of the operation that is complete. </summary>
        public double? PercentComplete { get; }
        /// <summary>
        /// Properties returned by the resource provider on a successful operation
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Properties { get; }
        /// <summary> If present, details of the operation error. </summary>
        public ResponseError Error { get; }
    }
}
