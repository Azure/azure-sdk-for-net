// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> The provisioning state of a resource e.g. SIM/SIM policy on a site. </summary>
    public readonly partial struct SiteProvisioningState : IEquatable<SiteProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SiteProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SiteProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotApplicableValue = "NotApplicable";
        private const string AddingValue = "Adding";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string ProvisionedValue = "Provisioned";
        private const string FailedValue = "Failed";

        /// <summary> The resource should not be provisioned on this site. </summary>
        public static SiteProvisioningState NotApplicable { get; } = new SiteProvisioningState(NotApplicableValue);
        /// <summary> The resource is being added to this site. </summary>
        public static SiteProvisioningState Adding { get; } = new SiteProvisioningState(AddingValue);
        /// <summary> The resource is being updated on this site. </summary>
        public static SiteProvisioningState Updating { get; } = new SiteProvisioningState(UpdatingValue);
        /// <summary> The resource is being deleted from this site. </summary>
        public static SiteProvisioningState Deleting { get; } = new SiteProvisioningState(DeletingValue);
        /// <summary> The resource is provisioned on this site. </summary>
        public static SiteProvisioningState Provisioned { get; } = new SiteProvisioningState(ProvisionedValue);
        /// <summary> The resource failed to be provisioned on this site. </summary>
        public static SiteProvisioningState Failed { get; } = new SiteProvisioningState(FailedValue);
        /// <summary> Determines if two <see cref="SiteProvisioningState"/> values are the same. </summary>
        public static bool operator ==(SiteProvisioningState left, SiteProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SiteProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(SiteProvisioningState left, SiteProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SiteProvisioningState"/>. </summary>
        public static implicit operator SiteProvisioningState(string value) => new SiteProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SiteProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SiteProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
