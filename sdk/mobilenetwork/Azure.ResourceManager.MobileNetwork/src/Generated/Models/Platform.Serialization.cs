// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    public partial class Platform : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PlatformType))
            {
                writer.WritePropertyName("platformType");
                writer.WriteStringValue(PlatformType.Value.ToString());
            }
            if (Optional.IsDefined(VersionState))
            {
                writer.WritePropertyName("versionState");
                writer.WriteStringValue(VersionState.Value.ToString());
            }
            if (Optional.IsDefined(MinimumPlatformSoftwareVersion))
            {
                writer.WritePropertyName("minimumPlatformSoftwareVersion");
                writer.WriteStringValue(MinimumPlatformSoftwareVersion);
            }
            if (Optional.IsDefined(MaximumPlatformSoftwareVersion))
            {
                writer.WritePropertyName("maximumPlatformSoftwareVersion");
                writer.WriteStringValue(MaximumPlatformSoftwareVersion);
            }
            if (Optional.IsDefined(RecommendedVersion))
            {
                writer.WritePropertyName("recommendedVersion");
                writer.WriteStringValue(RecommendedVersion.Value.ToString());
            }
            if (Optional.IsDefined(ObsoleteVersion))
            {
                writer.WritePropertyName("obsoleteVersion");
                writer.WriteStringValue(ObsoleteVersion.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static Platform DeserializePlatform(JsonElement element)
        {
            Optional<PlatformType> platformType = default;
            Optional<VersionState> versionState = default;
            Optional<string> minimumPlatformSoftwareVersion = default;
            Optional<string> maximumPlatformSoftwareVersion = default;
            Optional<RecommendedVersion> recommendedVersion = default;
            Optional<ObsoleteVersion> obsoleteVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("platformType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    platformType = new PlatformType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("versionState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    versionState = new VersionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("minimumPlatformSoftwareVersion"))
                {
                    minimumPlatformSoftwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maximumPlatformSoftwareVersion"))
                {
                    maximumPlatformSoftwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendedVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recommendedVersion = new RecommendedVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("obsoleteVersion"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    obsoleteVersion = new ObsoleteVersion(property.Value.GetString());
                    continue;
                }
            }
            return new Platform(Optional.ToNullable(platformType), Optional.ToNullable(versionState), minimumPlatformSoftwareVersion.Value, maximumPlatformSoftwareVersion.Value, Optional.ToNullable(recommendedVersion), Optional.ToNullable(obsoleteVersion));
        }
    }
}
