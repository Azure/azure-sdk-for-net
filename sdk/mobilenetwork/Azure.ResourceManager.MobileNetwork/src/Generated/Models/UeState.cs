// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> State of the UE. </summary>
    public readonly partial struct UeState : IEquatable<UeState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UeState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConnectedValue = "Connected";
        private const string IdleValue = "Idle";
        private const string DetachedValue = "Detached";
        private const string DeregisteredValue = "Deregistered";
        private const string UnknownValue = "Unknown";

        /// <summary> Connected. </summary>
        public static UeState Connected { get; } = new UeState(ConnectedValue);
        /// <summary> Idle. </summary>
        public static UeState Idle { get; } = new UeState(IdleValue);
        /// <summary> Detached. </summary>
        public static UeState Detached { get; } = new UeState(DetachedValue);
        /// <summary> Deregistered. </summary>
        public static UeState Deregistered { get; } = new UeState(DeregisteredValue);
        /// <summary> Unknown. </summary>
        public static UeState Unknown { get; } = new UeState(UnknownValue);
        /// <summary> Determines if two <see cref="UeState"/> values are the same. </summary>
        public static bool operator ==(UeState left, UeState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UeState"/> values are not the same. </summary>
        public static bool operator !=(UeState left, UeState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UeState"/>. </summary>
        public static implicit operator UeState(string value) => new UeState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UeState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UeState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
