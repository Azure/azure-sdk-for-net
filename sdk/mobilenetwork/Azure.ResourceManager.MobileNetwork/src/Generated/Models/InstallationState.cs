// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> The installation state of the packet core. </summary>
    public readonly partial struct InstallationState : IEquatable<InstallationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InstallationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InstallationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UninstalledValue = "Uninstalled";
        private const string InstallingValue = "Installing";
        private const string InstalledValue = "Installed";
        private const string UpdatingValue = "Updating";
        private const string UpgradingValue = "Upgrading";
        private const string UninstallingValue = "Uninstalling";
        private const string ReinstallingValue = "Reinstalling";
        private const string RollingBackValue = "RollingBack";
        private const string FailedValue = "Failed";

        /// <summary> The packet core is uninstalled. </summary>
        public static InstallationState Uninstalled { get; } = new InstallationState(UninstalledValue);
        /// <summary> The packet core is installing. </summary>
        public static InstallationState Installing { get; } = new InstallationState(InstallingValue);
        /// <summary> The packet core is installed. </summary>
        public static InstallationState Installed { get; } = new InstallationState(InstalledValue);
        /// <summary> The packet core is updating its configuration. </summary>
        public static InstallationState Updating { get; } = new InstallationState(UpdatingValue);
        /// <summary> The packet core is upgrading to a different software version. </summary>
        public static InstallationState Upgrading { get; } = new InstallationState(UpgradingValue);
        /// <summary> The packet core is uninstalling. </summary>
        public static InstallationState Uninstalling { get; } = new InstallationState(UninstallingValue);
        /// <summary> The packet core is reinstalling. </summary>
        public static InstallationState Reinstalling { get; } = new InstallationState(ReinstallingValue);
        /// <summary> The packet core is rolling back to its previous version. </summary>
        public static InstallationState RollingBack { get; } = new InstallationState(RollingBackValue);
        /// <summary> The packet core is in failed state. </summary>
        public static InstallationState Failed { get; } = new InstallationState(FailedValue);
        /// <summary> Determines if two <see cref="InstallationState"/> values are the same. </summary>
        public static bool operator ==(InstallationState left, InstallationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InstallationState"/> values are not the same. </summary>
        public static bool operator !=(InstallationState left, InstallationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InstallationState"/>. </summary>
        public static implicit operator InstallationState(string value) => new InstallationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InstallationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InstallationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
