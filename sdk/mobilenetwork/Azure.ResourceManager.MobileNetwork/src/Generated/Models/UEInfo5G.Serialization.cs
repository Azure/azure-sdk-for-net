// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    public partial class UEInfo5G : IUtf8JsonSerializable, IJsonModel<UEInfo5G>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<UEInfo5G>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<UEInfo5G>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UEInfo5G>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UEInfo5G)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("ratType"u8);
            writer.WriteStringValue(RatType.ToString());
            if (Optional.IsDefined(LastReadOn))
            {
                writer.WritePropertyName("lastReadAt"u8);
                writer.WriteStringValue(LastReadOn.Value, "O");
            }
            writer.WritePropertyName("info"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("supi"u8);
            writer.WriteStringValue(Supi);
            if (Optional.IsDefined(Pei))
            {
                writer.WritePropertyName("pei"u8);
                writer.WriteStringValue(Pei);
            }
            if (Optional.IsCollectionDefined(SessionInfo))
            {
                writer.WritePropertyName("sessionInfo"u8);
                writer.WriteStartArray();
                foreach (var item in SessionInfo)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("connectionInfo"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(PerUETnla))
            {
                writer.WritePropertyName("perUeTnla"u8);
                writer.WriteStringValue(PerUETnla);
            }
            if (Optional.IsDefined(AmfUENgapId))
            {
                writer.WritePropertyName("amfUeNgapId"u8);
                writer.WriteNumberValue(AmfUENgapId.Value);
            }
            if (Optional.IsDefined(RanUENgapId))
            {
                writer.WritePropertyName("ranUeNgapId"u8);
                writer.WriteNumberValue(RanUENgapId.Value);
            }
            if (Optional.IsDefined(LastVisitedTai))
            {
                writer.WritePropertyName("lastVisitedTai"u8);
                writer.WriteStringValue(LastVisitedTai);
            }
            if (Optional.IsCollectionDefined(AllowedNssai))
            {
                writer.WritePropertyName("allowedNssai"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedNssai)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(UEState))
            {
                writer.WritePropertyName("ueState"u8);
                writer.WriteStringValue(UEState.Value.ToString());
            }
            if (Optional.IsDefined(RrcEstablishmentCause))
            {
                writer.WritePropertyName("rrcEstablishmentCause"u8);
                writer.WriteStringValue(RrcEstablishmentCause.Value.ToString());
            }
            if (Optional.IsDefined(UEUsageSetting))
            {
                writer.WritePropertyName("ueUsageSetting"u8);
                writer.WriteStringValue(UEUsageSetting.Value.ToString());
            }
            if (Optional.IsDefined(LastActivityOn))
            {
                writer.WritePropertyName("lastActivityTime"u8);
                writer.WriteStringValue(LastActivityOn.Value, "O");
            }
            writer.WritePropertyName("globalRanNodeId"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(NgeNbId))
            {
                writer.WritePropertyName("ngeNbId"u8);
                writer.WriteStringValue(NgeNbId);
            }
            if (Optional.IsDefined(ENbId))
            {
                writer.WritePropertyName("eNbId"u8);
                writer.WriteStringValue(ENbId);
            }
            if (Optional.IsDefined(N3IwfId))
            {
                writer.WritePropertyName("n3IwfId"u8);
                writer.WriteStringValue(N3IwfId);
            }
            if (Optional.IsDefined(WagfId))
            {
                writer.WritePropertyName("wagfId"u8);
                writer.WriteStringValue(WagfId);
            }
            if (Optional.IsDefined(TngfId))
            {
                writer.WritePropertyName("tngfId"u8);
                writer.WriteStringValue(TngfId);
            }
            if (Optional.IsDefined(Nid))
            {
                writer.WritePropertyName("nid"u8);
                writer.WriteStringValue(Nid);
            }
            writer.WritePropertyName("gNbId"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(BitLength))
            {
                writer.WritePropertyName("bitLength"u8);
                writer.WriteNumberValue(BitLength.Value);
            }
            if (Optional.IsDefined(GNBValue))
            {
                writer.WritePropertyName("gNBValue"u8);
                writer.WriteStringValue(GNBValue);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("plmnId"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MccInfoConnectionInfoGlobalRanNodeIdPlmnIdMcc))
            {
                writer.WritePropertyName("mcc"u8);
                writer.WriteStringValue(MccInfoConnectionInfoGlobalRanNodeIdPlmnIdMcc);
            }
            if (Optional.IsDefined(MncInfoConnectionInfoGlobalRanNodeIdPlmnIdMnc))
            {
                writer.WritePropertyName("mnc"u8);
                writer.WriteStringValue(MncInfoConnectionInfoGlobalRanNodeIdPlmnIdMnc);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WritePropertyName("locationInfo"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(LocationType))
            {
                writer.WritePropertyName("locationType"u8);
                writer.WriteStringValue(LocationType);
            }
            if (Optional.IsDefined(Tac))
            {
                writer.WritePropertyName("tac"u8);
                writer.WriteStringValue(Tac);
            }
            writer.WritePropertyName("plmn"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MccInfoConnectionInfoLocationInfoPlmnMcc))
            {
                writer.WritePropertyName("mcc"u8);
                writer.WriteStringValue(MccInfoConnectionInfoLocationInfoPlmnMcc);
            }
            if (Optional.IsDefined(MncInfoConnectionInfoLocationInfoPlmnMnc))
            {
                writer.WritePropertyName("mnc"u8);
                writer.WriteStringValue(MncInfoConnectionInfoLocationInfoPlmnMnc);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WritePropertyName("fivegGuti"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("fivegTmsi"u8);
            writer.WriteNumberValue(FivegTmsi);
            writer.WritePropertyName("amfId"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("regionId"u8);
            writer.WriteNumberValue(RegionId);
            writer.WritePropertyName("setId"u8);
            writer.WriteNumberValue(SetId);
            writer.WritePropertyName("pointer"u8);
            writer.WriteNumberValue(Pointer);
            writer.WriteEndObject();
            writer.WritePropertyName("plmn"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("mcc"u8);
            writer.WriteStringValue(MccInfoFivegGutiPlmnMcc);
            writer.WritePropertyName("mnc"u8);
            writer.WriteStringValue(MncInfoFivegGutiPlmnMnc);
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        UEInfo5G IJsonModel<UEInfo5G>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UEInfo5G>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UEInfo5G)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeUEInfo5G(document.RootElement, options);
        }

        internal static UEInfo5G DeserializeUEInfo5G(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            RatType ratType = default;
            DateTimeOffset? lastReadAt = default;
            string supi = default;
            string pei = default;
            IList<UESessionInfo5G> sessionInfo = default;
            string perUETnla = default;
            long? amfUENgapId = default;
            int? ranUENgapId = default;
            string lastVisitedTai = default;
            IList<Snssai> allowedNssai = default;
            UEState? ueState = default;
            RrcEstablishmentCause? rrcEstablishmentCause = default;
            UEUsageSetting? ueUsageSetting = default;
            DateTimeOffset? lastActivityTime = default;
            string ngeNbId = default;
            string eNbId = default;
            string n3IwfId = default;
            string wagfId = default;
            string tngfId = default;
            string nid = default;
            int? bitLength = default;
            string gnbValue = default;
            string mcc = default;
            string mnc = default;
            string locationType = default;
            string tac = default;
            string mcc0 = default;
            string mnc0 = default;
            int fivegTmsi = default;
            int regionId = default;
            int setId = default;
            int pointer = default;
            string mcc1 = default;
            string mnc1 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ratType"u8))
                {
                    ratType = new RatType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastReadAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastReadAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("info"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("supi"u8))
                        {
                            supi = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pei"u8))
                        {
                            pei = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sessionInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<UESessionInfo5G> array = new List<UESessionInfo5G>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UESessionInfo5G.DeserializeUESessionInfo5G(item, options));
                            }
                            sessionInfo = array;
                            continue;
                        }
                        if (property0.NameEquals("connectionInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("perUeTnla"u8))
                                {
                                    perUETnla = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("amfUeNgapId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    amfUENgapId = property1.Value.GetInt64();
                                    continue;
                                }
                                if (property1.NameEquals("ranUeNgapId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    ranUENgapId = property1.Value.GetInt32();
                                    continue;
                                }
                                if (property1.NameEquals("lastVisitedTai"u8))
                                {
                                    lastVisitedTai = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("allowedNssai"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    List<Snssai> array = new List<Snssai>();
                                    foreach (var item in property1.Value.EnumerateArray())
                                    {
                                        array.Add(Snssai.DeserializeSnssai(item, options));
                                    }
                                    allowedNssai = array;
                                    continue;
                                }
                                if (property1.NameEquals("ueState"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    ueState = new UEState(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("rrcEstablishmentCause"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    rrcEstablishmentCause = new RrcEstablishmentCause(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("ueUsageSetting"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    ueUsageSetting = new UEUsageSetting(property1.Value.GetString());
                                    continue;
                                }
                                if (property1.NameEquals("lastActivityTime"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    lastActivityTime = property1.Value.GetDateTimeOffset("O");
                                    continue;
                                }
                                if (property1.NameEquals("globalRanNodeId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    foreach (var property2 in property1.Value.EnumerateObject())
                                    {
                                        if (property2.NameEquals("ngeNbId"u8))
                                        {
                                            ngeNbId = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("eNbId"u8))
                                        {
                                            eNbId = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("n3IwfId"u8))
                                        {
                                            n3IwfId = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("wagfId"u8))
                                        {
                                            wagfId = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("tngfId"u8))
                                        {
                                            tngfId = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("nid"u8))
                                        {
                                            nid = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("gNbId"u8))
                                        {
                                            if (property2.Value.ValueKind == JsonValueKind.Null)
                                            {
                                                property2.ThrowNonNullablePropertyIsNull();
                                                continue;
                                            }
                                            foreach (var property3 in property2.Value.EnumerateObject())
                                            {
                                                if (property3.NameEquals("bitLength"u8))
                                                {
                                                    if (property3.Value.ValueKind == JsonValueKind.Null)
                                                    {
                                                        continue;
                                                    }
                                                    bitLength = property3.Value.GetInt32();
                                                    continue;
                                                }
                                                if (property3.NameEquals("gNBValue"u8))
                                                {
                                                    gnbValue = property3.Value.GetString();
                                                    continue;
                                                }
                                            }
                                            continue;
                                        }
                                        if (property2.NameEquals("plmnId"u8))
                                        {
                                            if (property2.Value.ValueKind == JsonValueKind.Null)
                                            {
                                                property2.ThrowNonNullablePropertyIsNull();
                                                continue;
                                            }
                                            foreach (var property3 in property2.Value.EnumerateObject())
                                            {
                                                if (property3.NameEquals("mcc"u8))
                                                {
                                                    mcc = property3.Value.GetString();
                                                    continue;
                                                }
                                                if (property3.NameEquals("mnc"u8))
                                                {
                                                    mnc = property3.Value.GetString();
                                                    continue;
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                    continue;
                                }
                                if (property1.NameEquals("locationInfo"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    foreach (var property2 in property1.Value.EnumerateObject())
                                    {
                                        if (property2.NameEquals("locationType"u8))
                                        {
                                            locationType = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("tac"u8))
                                        {
                                            tac = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("plmn"u8))
                                        {
                                            if (property2.Value.ValueKind == JsonValueKind.Null)
                                            {
                                                property2.ThrowNonNullablePropertyIsNull();
                                                continue;
                                            }
                                            foreach (var property3 in property2.Value.EnumerateObject())
                                            {
                                                if (property3.NameEquals("mcc"u8))
                                                {
                                                    mcc0 = property3.Value.GetString();
                                                    continue;
                                                }
                                                if (property3.NameEquals("mnc"u8))
                                                {
                                                    mnc0 = property3.Value.GetString();
                                                    continue;
                                                }
                                            }
                                            continue;
                                        }
                                    }
                                    continue;
                                }
                            }
                            continue;
                        }
                        if (property0.NameEquals("fivegGuti"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("fivegTmsi"u8))
                                {
                                    fivegTmsi = property1.Value.GetInt32();
                                    continue;
                                }
                                if (property1.NameEquals("amfId"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    foreach (var property2 in property1.Value.EnumerateObject())
                                    {
                                        if (property2.NameEquals("regionId"u8))
                                        {
                                            regionId = property2.Value.GetInt32();
                                            continue;
                                        }
                                        if (property2.NameEquals("setId"u8))
                                        {
                                            setId = property2.Value.GetInt32();
                                            continue;
                                        }
                                        if (property2.NameEquals("pointer"u8))
                                        {
                                            pointer = property2.Value.GetInt32();
                                            continue;
                                        }
                                    }
                                    continue;
                                }
                                if (property1.NameEquals("plmn"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    foreach (var property2 in property1.Value.EnumerateObject())
                                    {
                                        if (property2.NameEquals("mcc"u8))
                                        {
                                            mcc1 = property2.Value.GetString();
                                            continue;
                                        }
                                        if (property2.NameEquals("mnc"u8))
                                        {
                                            mnc1 = property2.Value.GetString();
                                            continue;
                                        }
                                    }
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new UEInfo5G(
                ratType,
                lastReadAt,
                serializedAdditionalRawData,
                supi,
                pei,
                sessionInfo ?? new ChangeTrackingList<UESessionInfo5G>(),
                perUETnla,
                amfUENgapId,
                ranUENgapId,
                lastVisitedTai,
                allowedNssai ?? new ChangeTrackingList<Snssai>(),
                ueState,
                rrcEstablishmentCause,
                ueUsageSetting,
                lastActivityTime,
                ngeNbId,
                eNbId,
                n3IwfId,
                wagfId,
                tngfId,
                nid,
                bitLength,
                gnbValue,
                mcc,
                mnc,
                locationType,
                tac,
                mcc0,
                mnc0,
                fivegTmsi,
                regionId,
                setId,
                pointer,
                mcc1,
                mnc1);
        }

        BinaryData IPersistableModel<UEInfo5G>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UEInfo5G>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(UEInfo5G)} does not support writing '{options.Format}' format.");
            }
        }

        UEInfo5G IPersistableModel<UEInfo5G>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UEInfo5G>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeUEInfo5G(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(UEInfo5G)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<UEInfo5G>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
