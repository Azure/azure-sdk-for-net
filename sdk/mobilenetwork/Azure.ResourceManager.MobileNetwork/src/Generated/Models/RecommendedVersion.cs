// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> Indicates whether this is the recommended version to use for new packet core control plane deployments. </summary>
    public readonly partial struct RecommendedVersion : IEquatable<RecommendedVersion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecommendedVersion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecommendedVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RecommendedValue = "Recommended";
        private const string NotRecommendedValue = "NotRecommended";

        /// <summary> This is the recommended version to use for new packet core control plane deployments. </summary>
        public static RecommendedVersion Recommended { get; } = new RecommendedVersion(RecommendedValue);
        /// <summary> This is not the recommended version to use for new packet core control plane deployments. </summary>
        public static RecommendedVersion NotRecommended { get; } = new RecommendedVersion(NotRecommendedValue);
        /// <summary> Determines if two <see cref="RecommendedVersion"/> values are the same. </summary>
        public static bool operator ==(RecommendedVersion left, RecommendedVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecommendedVersion"/> values are not the same. </summary>
        public static bool operator !=(RecommendedVersion left, RecommendedVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RecommendedVersion"/>. </summary>
        public static implicit operator RecommendedVersion(string value) => new RecommendedVersion(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecommendedVersion other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecommendedVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
