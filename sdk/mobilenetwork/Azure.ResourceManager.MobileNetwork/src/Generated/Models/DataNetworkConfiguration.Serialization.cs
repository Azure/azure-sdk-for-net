// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    public partial class DataNetworkConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("dataNetwork"u8);
            JsonSerializer.Serialize(writer, DataNetwork); writer.WritePropertyName("sessionAmbr"u8);
            writer.WriteObjectValue(SessionAmbr);
            if (Core.Optional.IsDefined(FiveQi))
            {
                writer.WritePropertyName("5qi"u8);
                writer.WriteNumberValue(FiveQi.Value);
            }
            if (Core.Optional.IsDefined(AllocationAndRetentionPriorityLevel))
            {
                writer.WritePropertyName("allocationAndRetentionPriorityLevel"u8);
                writer.WriteNumberValue(AllocationAndRetentionPriorityLevel.Value);
            }
            if (Core.Optional.IsDefined(PreemptionCapability))
            {
                writer.WritePropertyName("preemptionCapability"u8);
                writer.WriteStringValue(PreemptionCapability.Value.ToString());
            }
            if (Core.Optional.IsDefined(PreemptionVulnerability))
            {
                writer.WritePropertyName("preemptionVulnerability"u8);
                writer.WriteStringValue(PreemptionVulnerability.Value.ToString());
            }
            if (Core.Optional.IsDefined(DefaultSessionType))
            {
                writer.WritePropertyName("defaultSessionType"u8);
                writer.WriteStringValue(DefaultSessionType.Value.ToString());
            }
            if (Core.Optional.IsCollectionDefined(AdditionalAllowedSessionTypes))
            {
                writer.WritePropertyName("additionalAllowedSessionTypes"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalAllowedSessionTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("allowedServices"u8);
            writer.WriteStartArray();
            foreach (var item in AllowedServices)
            {
                JsonSerializer.Serialize(writer, item);
            }
            writer.WriteEndArray();
            if (Core.Optional.IsDefined(MaximumNumberOfBufferedPackets))
            {
                writer.WritePropertyName("maximumNumberOfBufferedPackets"u8);
                writer.WriteNumberValue(MaximumNumberOfBufferedPackets.Value);
            }
            writer.WriteEndObject();
        }

        internal static DataNetworkConfiguration DeserializeDataNetworkConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            WritableSubResource dataNetwork = default;
            Ambr sessionAmbr = default;
            Core.Optional<int> _5qi = default;
            Core.Optional<int> allocationAndRetentionPriorityLevel = default;
            Core.Optional<MobileNetworkPreemptionCapability> preemptionCapability = default;
            Core.Optional<MobileNetworkPreemptionVulnerability> preemptionVulnerability = default;
            Core.Optional<MobileNetworkPduSessionType> defaultSessionType = default;
            Core.Optional<IList<MobileNetworkPduSessionType>> additionalAllowedSessionTypes = default;
            IList<WritableSubResource> allowedServices = default;
            Core.Optional<int> maximumNumberOfBufferedPackets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataNetwork"u8))
                {
                    dataNetwork = JsonSerializer.Deserialize<WritableSubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("sessionAmbr"u8))
                {
                    sessionAmbr = Ambr.DeserializeAmbr(property.Value);
                    continue;
                }
                if (property.NameEquals("5qi"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    _5qi = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allocationAndRetentionPriorityLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocationAndRetentionPriorityLevel = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("preemptionCapability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preemptionCapability = new MobileNetworkPreemptionCapability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preemptionVulnerability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preemptionVulnerability = new MobileNetworkPreemptionVulnerability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("defaultSessionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultSessionType = new MobileNetworkPduSessionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("additionalAllowedSessionTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MobileNetworkPduSessionType> array = new List<MobileNetworkPduSessionType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new MobileNetworkPduSessionType(item.GetString()));
                    }
                    additionalAllowedSessionTypes = array;
                    continue;
                }
                if (property.NameEquals("allowedServices"u8))
                {
                    List<WritableSubResource> array = new List<WritableSubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JsonSerializer.Deserialize<WritableSubResource>(item.GetRawText()));
                    }
                    allowedServices = array;
                    continue;
                }
                if (property.NameEquals("maximumNumberOfBufferedPackets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumNumberOfBufferedPackets = property.Value.GetInt32();
                    continue;
                }
            }
            return new DataNetworkConfiguration(dataNetwork, sessionAmbr, Core.Optional.ToNullable(_5qi), Core.Optional.ToNullable(allocationAndRetentionPriorityLevel), Core.Optional.ToNullable(preemptionCapability), Core.Optional.ToNullable(preemptionVulnerability), Core.Optional.ToNullable(defaultSessionType), Core.Optional.ToList(additionalAllowedSessionTypes), allowedServices, Core.Optional.ToNullable(maximumNumberOfBufferedPackets));
        }
    }
}
