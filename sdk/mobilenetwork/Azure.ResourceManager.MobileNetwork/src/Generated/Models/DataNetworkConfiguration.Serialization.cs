// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    public partial class DataNetworkConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("dataNetwork");
            JsonSerializer.Serialize(writer, DataNetwork); writer.WritePropertyName("sessionAmbr");
            writer.WriteObjectValue(SessionAmbr);
            if (Optional.IsDefined(FiveQi))
            {
                writer.WritePropertyName("5qi");
                writer.WriteNumberValue(FiveQi.Value);
            }
            if (Optional.IsDefined(AllocationAndRetentionPriorityLevel))
            {
                writer.WritePropertyName("allocationAndRetentionPriorityLevel");
                writer.WriteNumberValue(AllocationAndRetentionPriorityLevel.Value);
            }
            if (Optional.IsDefined(PreemptionCapability))
            {
                writer.WritePropertyName("preemptionCapability");
                writer.WriteStringValue(PreemptionCapability.Value.ToString());
            }
            if (Optional.IsDefined(PreemptionVulnerability))
            {
                writer.WritePropertyName("preemptionVulnerability");
                writer.WriteStringValue(PreemptionVulnerability.Value.ToString());
            }
            if (Optional.IsDefined(DefaultSessionType))
            {
                writer.WritePropertyName("defaultSessionType");
                writer.WriteStringValue(DefaultSessionType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(AdditionalAllowedSessionTypes))
            {
                writer.WritePropertyName("additionalAllowedSessionTypes");
                writer.WriteStartArray();
                foreach (var item in AdditionalAllowedSessionTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("allowedServices");
            writer.WriteStartArray();
            foreach (var item in AllowedServices)
            {
                JsonSerializer.Serialize(writer, item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(MaximumNumberOfBufferedPackets))
            {
                writer.WritePropertyName("maximumNumberOfBufferedPackets");
                writer.WriteNumberValue(MaximumNumberOfBufferedPackets.Value);
            }
            writer.WriteEndObject();
        }

        internal static DataNetworkConfiguration DeserializeDataNetworkConfiguration(JsonElement element)
        {
            WritableSubResource dataNetwork = default;
            Ambr sessionAmbr = default;
            Optional<int> _5qi = default;
            Optional<int> allocationAndRetentionPriorityLevel = default;
            Optional<PreemptionCapability> preemptionCapability = default;
            Optional<PreemptionVulnerability> preemptionVulnerability = default;
            Optional<PduSessionType> defaultSessionType = default;
            Optional<IList<PduSessionType>> additionalAllowedSessionTypes = default;
            IList<WritableSubResource> allowedServices = default;
            Optional<int> maximumNumberOfBufferedPackets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataNetwork"))
                {
                    dataNetwork = JsonSerializer.Deserialize<WritableSubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("sessionAmbr"))
                {
                    sessionAmbr = Ambr.DeserializeAmbr(property.Value);
                    continue;
                }
                if (property.NameEquals("5qi"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    _5qi = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allocationAndRetentionPriorityLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allocationAndRetentionPriorityLevel = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("preemptionCapability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    preemptionCapability = new PreemptionCapability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("preemptionVulnerability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    preemptionVulnerability = new PreemptionVulnerability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("defaultSessionType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultSessionType = new PduSessionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("additionalAllowedSessionTypes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PduSessionType> array = new List<PduSessionType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new PduSessionType(item.GetString()));
                    }
                    additionalAllowedSessionTypes = array;
                    continue;
                }
                if (property.NameEquals("allowedServices"))
                {
                    List<WritableSubResource> array = new List<WritableSubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(JsonSerializer.Deserialize<WritableSubResource>(item.GetRawText()));
                    }
                    allowedServices = array;
                    continue;
                }
                if (property.NameEquals("maximumNumberOfBufferedPackets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maximumNumberOfBufferedPackets = property.Value.GetInt32();
                    continue;
                }
            }
            return new DataNetworkConfiguration(dataNetwork, sessionAmbr, Optional.ToNullable(_5qi), Optional.ToNullable(allocationAndRetentionPriorityLevel), Optional.ToNullable(preemptionCapability), Optional.ToNullable(preemptionVulnerability), Optional.ToNullable(defaultSessionType), Optional.ToList(additionalAllowedSessionTypes), allowedServices, Optional.ToNullable(maximumNumberOfBufferedPackets));
        }
    }
}
