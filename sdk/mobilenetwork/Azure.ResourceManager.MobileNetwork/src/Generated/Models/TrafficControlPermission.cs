// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> Traffic control permission. </summary>
    public readonly partial struct TrafficControlPermission : IEquatable<TrafficControlPermission>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TrafficControlPermission"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrafficControlPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string BlockedValue = "Blocked";

        /// <summary> Traffic matching this rule is allowed to flow. </summary>
        public static TrafficControlPermission Enabled { get; } = new TrafficControlPermission(EnabledValue);
        /// <summary> Traffic matching this rule is not allowed to flow. </summary>
        public static TrafficControlPermission Blocked { get; } = new TrafficControlPermission(BlockedValue);
        /// <summary> Determines if two <see cref="TrafficControlPermission"/> values are the same. </summary>
        public static bool operator ==(TrafficControlPermission left, TrafficControlPermission right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrafficControlPermission"/> values are not the same. </summary>
        public static bool operator !=(TrafficControlPermission left, TrafficControlPermission right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrafficControlPermission"/>. </summary>
        public static implicit operator TrafficControlPermission(string value) => new TrafficControlPermission(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrafficControlPermission other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrafficControlPermission other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
