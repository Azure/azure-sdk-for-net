// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MobileNetwork.Models
{
    /// <summary> The state of the SIM resource. </summary>
    public readonly partial struct SimState : IEquatable<SimState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SimState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SimState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DisabledValue = "Disabled";
        private const string EnabledValue = "Enabled";
        private const string InvalidValue = "Invalid";

        /// <summary> The SIM is disabled because not all configuration required for enabling is present. </summary>
        public static SimState Disabled { get; } = new SimState(DisabledValue);
        /// <summary> The SIM is enabled. </summary>
        public static SimState Enabled { get; } = new SimState(EnabledValue);
        /// <summary> The SIM cannot be enabled because some of the associated configuration is invalid. </summary>
        public static SimState Invalid { get; } = new SimState(InvalidValue);
        /// <summary> Determines if two <see cref="SimState"/> values are the same. </summary>
        public static bool operator ==(SimState left, SimState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SimState"/> values are not the same. </summary>
        public static bool operator !=(SimState left, SimState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SimState"/>. </summary>
        public static implicit operator SimState(string value) => new SimState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SimState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SimState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
