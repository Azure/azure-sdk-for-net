// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.MobileNetwork.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.MobileNetwork
{
    /// <summary>
    /// A class representing the PacketCoreControlPlane data model.
    /// Packet core control plane resource.
    /// </summary>
    public partial class PacketCoreControlPlaneData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of PacketCoreControlPlaneData. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="sites"> Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane. </param>
        /// <param name="platform"> The platform where the packet core is deployed. </param>
        /// <param name="controlPlaneAccessInterface"> The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. </param>
        /// <param name="sku"> The SKU defining the throughput and SIM allowances for this packet core control plane deployment. </param>
        /// <param name="localDiagnosticsAccess"> The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sites"/>, <paramref name="platform"/>, <paramref name="controlPlaneAccessInterface"/> or <paramref name="localDiagnosticsAccess"/> is null. </exception>
        public PacketCoreControlPlaneData(AzureLocation location, IEnumerable<WritableSubResource> sites, PlatformConfiguration platform, InterfaceProperties controlPlaneAccessInterface, BillingSku sku, LocalDiagnosticsAccessConfiguration localDiagnosticsAccess) : base(location)
        {
            Argument.AssertNotNull(sites, nameof(sites));
            Argument.AssertNotNull(platform, nameof(platform));
            Argument.AssertNotNull(controlPlaneAccessInterface, nameof(controlPlaneAccessInterface));
            Argument.AssertNotNull(localDiagnosticsAccess, nameof(localDiagnosticsAccess));

            Sites = sites.ToList();
            Platform = platform;
            ControlPlaneAccessInterface = controlPlaneAccessInterface;
            Sku = sku;
            LocalDiagnosticsAccess = localDiagnosticsAccess;
        }

        /// <summary> Initializes a new instance of PacketCoreControlPlaneData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity used to retrieve the ingress certificate from Azure key vault. </param>
        /// <param name="provisioningState"> The provisioning state of the packet core control plane resource. </param>
        /// <param name="installation"> The installation state of the packet core control plane resource. </param>
        /// <param name="sites"> Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane. </param>
        /// <param name="platform"> The platform where the packet core is deployed. </param>
        /// <param name="coreNetworkTechnology"> The core network technology generation (5G core or EPC / 4G core). </param>
        /// <param name="version"> The version of the packet core software that is deployed. </param>
        /// <param name="rollbackVersion"> The previous version of the packet core software that was deployed. Used when performing the rollback action. </param>
        /// <param name="controlPlaneAccessInterface"> The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. </param>
        /// <param name="sku"> The SKU defining the throughput and SIM allowances for this packet core control plane deployment. </param>
        /// <param name="ueMtu"> The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation. </param>
        /// <param name="localDiagnosticsAccess"> The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. </param>
        /// <param name="interopSettings"> Settings to allow interoperability with third party components e.g. RANs and UEs. </param>
        internal PacketCoreControlPlaneData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, ProvisioningState? provisioningState, Installation installation, IList<WritableSubResource> sites, PlatformConfiguration platform, CoreNetworkType? coreNetworkTechnology, string version, string rollbackVersion, InterfaceProperties controlPlaneAccessInterface, BillingSku sku, int? ueMtu, LocalDiagnosticsAccessConfiguration localDiagnosticsAccess, BinaryData interopSettings) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            Installation = installation;
            Sites = sites;
            Platform = platform;
            CoreNetworkTechnology = coreNetworkTechnology;
            Version = version;
            RollbackVersion = rollbackVersion;
            ControlPlaneAccessInterface = controlPlaneAccessInterface;
            Sku = sku;
            UeMtu = ueMtu;
            LocalDiagnosticsAccess = localDiagnosticsAccess;
            InteropSettings = interopSettings;
        }

        /// <summary> The identity used to retrieve the ingress certificate from Azure key vault. </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> The provisioning state of the packet core control plane resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The installation state of the packet core control plane resource. </summary>
        public Installation Installation { get; }
        /// <summary> Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane. </summary>
        public IList<WritableSubResource> Sites { get; }
        /// <summary> The platform where the packet core is deployed. </summary>
        public PlatformConfiguration Platform { get; set; }
        /// <summary> The core network technology generation (5G core or EPC / 4G core). </summary>
        public CoreNetworkType? CoreNetworkTechnology { get; set; }
        /// <summary> The version of the packet core software that is deployed. </summary>
        public string Version { get; set; }
        /// <summary> The previous version of the packet core software that was deployed. Used when performing the rollback action. </summary>
        public string RollbackVersion { get; }
        /// <summary> The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. </summary>
        public InterfaceProperties ControlPlaneAccessInterface { get; set; }
        /// <summary> The SKU defining the throughput and SIM allowances for this packet core control plane deployment. </summary>
        public BillingSku Sku { get; set; }
        /// <summary> The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation. </summary>
        public int? UeMtu { get; set; }
        /// <summary> The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. </summary>
        public LocalDiagnosticsAccessConfiguration LocalDiagnosticsAccess { get; set; }
        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData InteropSettings { get; set; }
    }
}
