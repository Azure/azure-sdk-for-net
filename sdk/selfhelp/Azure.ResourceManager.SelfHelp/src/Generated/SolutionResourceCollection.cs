// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SelfHelp
{
    /// <summary>
    /// A class representing a collection of <see cref="SolutionResource"/> and their operations.
    /// Each <see cref="SolutionResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get a <see cref="SolutionResourceCollection"/> instance call the GetSolutionResources method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class SolutionResourceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _solutionResourceSolutionClientDiagnostics;
        private readonly SolutionRestOperations _solutionResourceSolutionRestClient;

        /// <summary> Initializes a new instance of the <see cref="SolutionResourceCollection"/> class for mocking. </summary>
        protected SolutionResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SolutionResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SolutionResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _solutionResourceSolutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SelfHelp", SolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SolutionResource.ResourceType, out string solutionResourceSolutionApiVersion);
            _solutionResourceSolutionRestClient = new SolutionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, solutionResourceSolutionApiVersion);
        }

        /// <summary>
        /// Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience. Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials, Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future. Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt;  &lt;br/&gt;1. ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘ additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions response is the same as ‘properties.parameters’ in the request for Troubleshooters
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="data"> The required request body for this solution resource creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<SolutionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string solutionResourceName, SolutionResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _solutionResourceSolutionRestClient.CreateAsync(Id, solutionResourceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new SelfHelpArmOperation<SolutionResource>(new SolutionResourceOperationSource(Client), _solutionResourceSolutionClientDiagnostics, Pipeline, _solutionResourceSolutionRestClient.CreateCreateRequest(Id, solutionResourceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience. Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials, Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future. Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt;  &lt;br/&gt;1. ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘ additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions response is the same as ‘properties.parameters’ in the request for Troubleshooters
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Create</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="data"> The required request body for this solution resource creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<SolutionResource> CreateOrUpdate(WaitUntil waitUntil, string solutionResourceName, SolutionResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _solutionResourceSolutionRestClient.Create(Id, solutionResourceName, data, cancellationToken);
                var operation = new SelfHelpArmOperation<SolutionResource>(new SolutionResourceOperationSource(Client), _solutionResourceSolutionClientDiagnostics, Pipeline, _solutionResourceSolutionRestClient.CreateCreateRequest(Id, solutionResourceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the solution using the applicable solutionResourceName while creating the solution.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual async Task<Response<SolutionResource>> GetAsync(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _solutionResourceSolutionRestClient.GetAsync(Id, solutionResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the solution using the applicable solutionResourceName while creating the solution.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual Response<SolutionResource> Get(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _solutionResourceSolutionRestClient.Get(Id, solutionResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _solutionResourceSolutionRestClient.GetAsync(Id, solutionResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _solutionResourceSolutionRestClient.Get(Id, solutionResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<SolutionResource>> GetIfExistsAsync(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _solutionResourceSolutionRestClient.GetAsync(Id, solutionResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<SolutionResource>(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionResourceName"> Solution resource Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionResourceName"/> is null. </exception>
        public virtual NullableResponse<SolutionResource> GetIfExists(string solutionResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionResourceName, nameof(solutionResourceName));

            using var scope = _solutionResourceSolutionClientDiagnostics.CreateScope("SolutionResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _solutionResourceSolutionRestClient.Get(Id, solutionResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<SolutionResource>(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
