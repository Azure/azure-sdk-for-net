// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SelfHelp;

namespace Azure.ResourceManager.SelfHelp.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmSelfHelpModelFactory
    {
        /// <summary> Initializes a new instance of SelfHelpCheckNameAvailabilityResult. </summary>
        /// <param name="isNameAvailable"> Returns true or false depending on the availability of the name. </param>
        /// <param name="notAvailableReason"> Reason for why value is not available. This field is returned if nameAvailable is false. </param>
        /// <param name="errorMessage"> Gets an error message explaining the &apos;reason&apos; value with more details. This field is returned iif nameAvailable is false. </param>
        /// <returns> A new <see cref="Models.SelfHelpCheckNameAvailabilityResult"/> instance for mocking. </returns>
        public static SelfHelpCheckNameAvailabilityResult SelfHelpCheckNameAvailabilityResult(bool? isNameAvailable = null, string notAvailableReason = null, string errorMessage = null)
        {
            return new SelfHelpCheckNameAvailabilityResult(isNameAvailable, notAvailableReason, errorMessage);
        }

        /// <summary> Initializes a new instance of SelfHelpDiagnosticData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="globalParameters"> Global parameters that can be passed to all solutionIds. </param>
        /// <param name="diagnosticInsights"> SolutionIds that are needed to be invoked. </param>
        /// <param name="acceptedTime"> Diagnostic Request Accepted time. </param>
        /// <param name="provisioningState"> Status of diagnostic provisioning. </param>
        /// <param name="diagnostics"> Array of Diagnostics. </param>
        /// <returns> A new <see cref="SelfHelp.SelfHelpDiagnosticData"/> instance for mocking. </returns>
        public static SelfHelpDiagnosticData SelfHelpDiagnosticData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> globalParameters = null, IEnumerable<SelfHelpDiagnosticInvocation> diagnosticInsights = null, string acceptedTime = null, SelfHelpProvisioningState? provisioningState = null, IEnumerable<SelfHelpDiagnosticInfo> diagnostics = null)
        {
            globalParameters ??= new Dictionary<string, string>();
            diagnosticInsights ??= new List<SelfHelpDiagnosticInvocation>();
            diagnostics ??= new List<SelfHelpDiagnosticInfo>();

            return new SelfHelpDiagnosticData(id, name, resourceType, systemData, globalParameters, diagnosticInsights?.ToList(), acceptedTime, provisioningState, diagnostics?.ToList());
        }

        /// <summary> Initializes a new instance of SelfHelpDiagnosticInfo. </summary>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="diagnosticStatus"> Denotes the status of the diagnostic resource. </param>
        /// <param name="diagnosticInsights"> The problems (if any) detected by this insight. </param>
        /// <param name="errorInfo"> Error definition. </param>
        /// <returns> A new <see cref="Models.SelfHelpDiagnosticInfo"/> instance for mocking. </returns>
        public static SelfHelpDiagnosticInfo SelfHelpDiagnosticInfo(string solutionId = null, SelfHelpDiagnosticStatus? diagnosticStatus = null, IEnumerable<SelfHelpDiagnosticInsight> diagnosticInsights = null, SelfHelpError errorInfo = null)
        {
            diagnosticInsights ??= new List<SelfHelpDiagnosticInsight>();

            return new SelfHelpDiagnosticInfo(solutionId, diagnosticStatus, diagnosticInsights?.ToList(), errorInfo);
        }

        /// <summary> Initializes a new instance of SelfHelpDiagnosticInsight. </summary>
        /// <param name="insightId"> Article id. </param>
        /// <param name="insightTitle"> This insight&apos;s title. </param>
        /// <param name="insightResults"> Detailed result content. </param>
        /// <param name="insightImportanceLevel"> Importance level of the insight. </param>
        /// <returns> A new <see cref="Models.SelfHelpDiagnosticInsight"/> instance for mocking. </returns>
        public static SelfHelpDiagnosticInsight SelfHelpDiagnosticInsight(string insightId = null, string insightTitle = null, string insightResults = null, SelfHelpImportanceLevel? insightImportanceLevel = null)
        {
            return new SelfHelpDiagnosticInsight(insightId, insightTitle, insightResults, insightImportanceLevel);
        }

        /// <summary> Initializes a new instance of SelfHelpError. </summary>
        /// <param name="errorCode"> Service specific error code which serves as the substatus for the HTTP error code. </param>
        /// <param name="errorType"> Service specific error type which serves as additional context for the error herein. </param>
        /// <param name="errorMessage"> Description of the error. </param>
        /// <param name="errorDetails"> An array of additional nested error response info objects, as described by this contract. </param>
        /// <returns> A new <see cref="Models.SelfHelpError"/> instance for mocking. </returns>
        public static SelfHelpError SelfHelpError(string errorCode = null, string errorType = null, string errorMessage = null, IEnumerable<SelfHelpError> errorDetails = null)
        {
            errorDetails ??= new List<SelfHelpError>();

            return new SelfHelpError(errorCode, errorType, errorMessage, errorDetails?.ToList());
        }

        /// <summary> Initializes a new instance of SelfHelpSolutionMetadata. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="solutionId"> Solution Id. </param>
        /// <param name="solutionType"> Solution Type. </param>
        /// <param name="solutionDescription"> A detailed description of solution. </param>
        /// <param name="requiredParameterSets"> Required parameters for invoking this particular solution. </param>
        /// <returns> A new <see cref="Models.SelfHelpSolutionMetadata"/> instance for mocking. </returns>
        public static SelfHelpSolutionMetadata SelfHelpSolutionMetadata(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string solutionId = null, string solutionType = null, string solutionDescription = null, IEnumerable<IList<string>> requiredParameterSets = null)
        {
            requiredParameterSets ??= new List<IList<string>>();

            return new SelfHelpSolutionMetadata(id, name, resourceType, systemData, solutionId, solutionType, solutionDescription, requiredParameterSets?.ToList());
        }
    }
}
