// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SelfHelp;
using Azure.ResourceManager.SelfHelp.Models;

namespace Azure.ResourceManager.SelfHelp.Mock
{
    /// <summary> A class to add extension methods to SelfHelpDiagnosticResource. </summary>
    public partial class SelfHelpDiagnosticResourceExtension : ArmResource
    {
        private ClientDiagnostics _selfHelpDiagnosticResourceDiagnosticsClientDiagnostics;
        private DiagnosticsRestOperations _selfHelpDiagnosticResourceDiagnosticsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SelfHelpDiagnosticResourceExtension"/> class for mocking. </summary>
        protected SelfHelpDiagnosticResourceExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SelfHelpDiagnosticResourceExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SelfHelpDiagnosticResourceExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SelfHelpDiagnosticResourceDiagnosticsClientDiagnostics => _selfHelpDiagnosticResourceDiagnosticsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SelfHelp", SelfHelpDiagnosticResource.ResourceType.Namespace, Diagnostics);
        private DiagnosticsRestOperations SelfHelpDiagnosticResourceDiagnosticsRestClient => _selfHelpDiagnosticResourceDiagnosticsRestClient ??= new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SelfHelpDiagnosticResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// This API is used to check the uniqueness of a resource name used for a diagnostic check.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostics_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The required parameters for availability check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameAvailabilityResponse>> CheckNameAvailabilityDiagnosticAsync(CheckNameAvailabilityContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = SelfHelpDiagnosticResourceDiagnosticsClientDiagnostics.CreateScope("SelfHelpDiagnosticResourceExtension.CheckNameAvailabilityDiagnostic");
            scope.Start();
            try
            {
                var response = await SelfHelpDiagnosticResourceDiagnosticsRestClient.CheckNameAvailabilityAsync(Id, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API is used to check the uniqueness of a resource name used for a diagnostic check.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Help/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostics_CheckNameAvailability</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The required parameters for availability check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameAvailabilityResponse> CheckNameAvailabilityDiagnostic(CheckNameAvailabilityContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = SelfHelpDiagnosticResourceDiagnosticsClientDiagnostics.CreateScope("SelfHelpDiagnosticResourceExtension.CheckNameAvailabilityDiagnostic");
            scope.Start();
            try
            {
                var response = SelfHelpDiagnosticResourceDiagnosticsRestClient.CheckNameAvailability(Id, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
