// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SelfHelp.Models
{
    /// <summary> Text Input. Will be a single line input. </summary>
    public readonly partial struct QuestionType : IEquatable<QuestionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QuestionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QuestionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RadioButtonValue = "RadioButton";
        private const string DropdownValue = "Dropdown";
        private const string TextInputValue = "TextInput";
        private const string MultiLineInfoBoxValue = "MultiLineInfoBox";

        /// <summary> SingleChoice radio button. </summary>
        public static QuestionType RadioButton { get; } = new QuestionType(RadioButtonValue);
        /// <summary> SingleChoice dropdown. </summary>
        public static QuestionType Dropdown { get; } = new QuestionType(DropdownValue);
        /// <summary> Text Input. </summary>
        public static QuestionType TextInput { get; } = new QuestionType(TextInputValue);
        /// <summary> MultiLineInfoBox. </summary>
        public static QuestionType MultiLineInfoBox { get; } = new QuestionType(MultiLineInfoBoxValue);
        /// <summary> Determines if two <see cref="QuestionType"/> values are the same. </summary>
        public static bool operator ==(QuestionType left, QuestionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QuestionType"/> values are not the same. </summary>
        public static bool operator !=(QuestionType left, QuestionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="QuestionType"/>. </summary>
        public static implicit operator QuestionType(string value) => new QuestionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QuestionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QuestionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
