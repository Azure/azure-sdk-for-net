// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.SelfHelp.Models
{
    /// <summary>
    /// Solution replacement maps.
    /// Serialized Name: ReplacementMaps
    /// </summary>
    public partial class ReplacementMaps
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ReplacementMaps"/>. </summary>
        internal ReplacementMaps()
        {
            WebResults = new ChangeTrackingList<WebResult>();
            Diagnostics = new ChangeTrackingList<SolutionsDiagnostic>();
            Troubleshooters = new ChangeTrackingList<SolutionsTroubleshooters>();
            MetricsBasedCharts = new ChangeTrackingList<MetricsBasedChart>();
            Videos = new ChangeTrackingList<SelfHelpVideo>();
            VideoGroups = new ChangeTrackingList<VideoGroup>();
        }

        /// <summary> Initializes a new instance of <see cref="ReplacementMaps"/>. </summary>
        /// <param name="webResults">
        /// Solution AzureKB results
        /// Serialized Name: ReplacementMaps.webResults
        /// </param>
        /// <param name="diagnostics">
        /// Solution diagnostics results.
        /// Serialized Name: ReplacementMaps.diagnostics
        /// </param>
        /// <param name="troubleshooters">
        /// Solutions Troubleshooters
        /// Serialized Name: ReplacementMaps.troubleshooters
        /// </param>
        /// <param name="metricsBasedCharts">
        /// Solution metrics based charts
        /// Serialized Name: ReplacementMaps.metricsBasedCharts
        /// </param>
        /// <param name="videos">
        /// Video solutions, which have the power to engage the customer by stimulating their senses
        /// Serialized Name: ReplacementMaps.videos
        /// </param>
        /// <param name="videoGroups">
        /// Group of Videos
        /// Serialized Name: ReplacementMaps.videoGroups
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ReplacementMaps(IReadOnlyList<WebResult> webResults, IReadOnlyList<SolutionsDiagnostic> diagnostics, IReadOnlyList<SolutionsTroubleshooters> troubleshooters, IReadOnlyList<MetricsBasedChart> metricsBasedCharts, IReadOnlyList<SelfHelpVideo> videos, IReadOnlyList<VideoGroup> videoGroups, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            WebResults = webResults;
            Diagnostics = diagnostics;
            Troubleshooters = troubleshooters;
            MetricsBasedCharts = metricsBasedCharts;
            Videos = videos;
            VideoGroups = videoGroups;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Solution AzureKB results
        /// Serialized Name: ReplacementMaps.webResults
        /// </summary>
        public IReadOnlyList<WebResult> WebResults { get; }
        /// <summary>
        /// Solution diagnostics results.
        /// Serialized Name: ReplacementMaps.diagnostics
        /// </summary>
        public IReadOnlyList<SolutionsDiagnostic> Diagnostics { get; }
        /// <summary>
        /// Solutions Troubleshooters
        /// Serialized Name: ReplacementMaps.troubleshooters
        /// </summary>
        public IReadOnlyList<SolutionsTroubleshooters> Troubleshooters { get; }
        /// <summary>
        /// Solution metrics based charts
        /// Serialized Name: ReplacementMaps.metricsBasedCharts
        /// </summary>
        public IReadOnlyList<MetricsBasedChart> MetricsBasedCharts { get; }
        /// <summary>
        /// Video solutions, which have the power to engage the customer by stimulating their senses
        /// Serialized Name: ReplacementMaps.videos
        /// </summary>
        public IReadOnlyList<SelfHelpVideo> Videos { get; }
        /// <summary>
        /// Group of Videos
        /// Serialized Name: ReplacementMaps.videoGroups
        /// </summary>
        public IReadOnlyList<VideoGroup> VideoGroups { get; }
    }
}
