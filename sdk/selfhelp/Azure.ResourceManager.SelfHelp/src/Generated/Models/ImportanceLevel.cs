// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SelfHelp.Models
{
    /// <summary>
    /// Importance level of the insight.
    /// Serialized Name: ImportanceLevel
    /// </summary>
    public readonly partial struct ImportanceLevel : IEquatable<ImportanceLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImportanceLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImportanceLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CriticalValue = "Critical";
        private const string WarningValue = "Warning";
        private const string InformationValue = "Information";

        /// <summary>
        /// A critical insight has been found after running the diagnostic.
        /// Serialized Name: ImportanceLevel.Critical
        /// </summary>
        public static ImportanceLevel Critical { get; } = new ImportanceLevel(CriticalValue);
        /// <summary>
        /// A warning insight has been found after running the diagnostic.
        /// Serialized Name: ImportanceLevel.Warning
        /// </summary>
        public static ImportanceLevel Warning { get; } = new ImportanceLevel(WarningValue);
        /// <summary>
        /// An information insight has been found after running the diagnostic.
        /// Serialized Name: ImportanceLevel.Information
        /// </summary>
        public static ImportanceLevel Information { get; } = new ImportanceLevel(InformationValue);
        /// <summary> Determines if two <see cref="ImportanceLevel"/> values are the same. </summary>
        public static bool operator ==(ImportanceLevel left, ImportanceLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImportanceLevel"/> values are not the same. </summary>
        public static bool operator !=(ImportanceLevel left, ImportanceLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImportanceLevel"/>. </summary>
        public static implicit operator ImportanceLevel(string value) => new ImportanceLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImportanceLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImportanceLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
