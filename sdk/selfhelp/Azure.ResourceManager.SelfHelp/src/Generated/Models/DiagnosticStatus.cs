// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SelfHelp.Models
{
    /// <summary>
    /// Denotes the status of the diagnostic resource.
    /// Serialized Name: Status
    /// </summary>
    public readonly partial struct DiagnosticStatus : IEquatable<DiagnosticStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiagnosticStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiagnosticStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FailedValue = "Failed";
        private const string MissingInputsValue = "MissingInputs";
        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string TimeoutValue = "Timeout";

        /// <summary>
        /// Diagnostic creation failed.
        /// Serialized Name: Status.Failed
        /// </summary>
        public static DiagnosticStatus Failed { get; } = new DiagnosticStatus(FailedValue);
        /// <summary>
        /// Request is missing required inputs to run.
        /// Serialized Name: Status.MissingInputs
        /// </summary>
        public static DiagnosticStatus MissingInputs { get; } = new DiagnosticStatus(MissingInputsValue);
        /// <summary>
        /// Diagnostic is still running.
        /// Serialized Name: Status.Running
        /// </summary>
        public static DiagnosticStatus Running { get; } = new DiagnosticStatus(RunningValue);
        /// <summary>
        /// Diagnostic creation succeeded.
        /// Serialized Name: Status.Succeeded
        /// </summary>
        public static DiagnosticStatus Succeeded { get; } = new DiagnosticStatus(SucceededValue);
        /// <summary>
        /// Diagnostic was timed out.
        /// Serialized Name: Status.Timeout
        /// </summary>
        public static DiagnosticStatus Timeout { get; } = new DiagnosticStatus(TimeoutValue);
        /// <summary> Determines if two <see cref="DiagnosticStatus"/> values are the same. </summary>
        public static bool operator ==(DiagnosticStatus left, DiagnosticStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiagnosticStatus"/> values are not the same. </summary>
        public static bool operator !=(DiagnosticStatus left, DiagnosticStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiagnosticStatus"/>. </summary>
        public static implicit operator DiagnosticStatus(string value) => new DiagnosticStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiagnosticStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiagnosticStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
