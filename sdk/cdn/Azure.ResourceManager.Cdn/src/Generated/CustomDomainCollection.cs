// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Cdn
{
    /// <summary> A class representing collection of CustomDomain and their operations over its parent. </summary>
    public partial class CustomDomainCollection : ArmCollection, IEnumerable<CustomDomain>, IAsyncEnumerable<CustomDomain>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly CustomDomainsRestOperations _customDomainsRestClient;

        /// <summary> Initializes a new instance of the <see cref="CustomDomainCollection"/> class for mocking. </summary>
        protected CustomDomainCollection()
        {
        }

        /// <summary> Initializes a new instance of CustomDomainCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CustomDomainCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _customDomainsRestClient = new CustomDomainsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Endpoint.ResourceType;

        // Collection level operations.

        /// <summary> Creates a new custom domain within an endpoint. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="customDomainProperties"> Properties required to create a new custom domain. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> or <paramref name="customDomainProperties"/> is null. </exception>
        public virtual CustomDomainCreateOperation CreateOrUpdate(string customDomainName, CustomDomainParameters customDomainProperties, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }
            if (customDomainProperties == null)
            {
                throw new ArgumentNullException(nameof(customDomainProperties));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.Create(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, customDomainProperties, cancellationToken);
                var operation = new CustomDomainCreateOperation(Parent, _clientDiagnostics, Pipeline, _customDomainsRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, customDomainProperties).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new custom domain within an endpoint. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="customDomainProperties"> Properties required to create a new custom domain. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> or <paramref name="customDomainProperties"/> is null. </exception>
        public async virtual Task<CustomDomainCreateOperation> CreateOrUpdateAsync(string customDomainName, CustomDomainParameters customDomainProperties, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }
            if (customDomainProperties == null)
            {
                throw new ArgumentNullException(nameof(customDomainProperties));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.CreateAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, customDomainProperties, cancellationToken).ConfigureAwait(false);
                var operation = new CustomDomainCreateOperation(Parent, _clientDiagnostics, Pipeline, _customDomainsRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, customDomainProperties).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an existing custom domain within an endpoint. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public virtual Response<CustomDomain> Get(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.Get");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.Get(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CustomDomain(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an existing custom domain within an endpoint. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public async virtual Task<Response<CustomDomain>> GetAsync(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.Get");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new CustomDomain(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public virtual Response<CustomDomain> GetIfExists(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.Get(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<CustomDomain>(null, response.GetRawResponse())
                    : Response.FromValue(new CustomDomain(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public async virtual Task<Response<CustomDomain>> GetIfExistsAsync(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, customDomainName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<CustomDomain>(null, response.GetRawResponse())
                    : Response.FromValue(new CustomDomain(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(customDomainName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="customDomainName"> Name of the custom domain within an endpoint. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="customDomainName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string customDomainName, CancellationToken cancellationToken = default)
        {
            if (customDomainName == null)
            {
                throw new ArgumentNullException(nameof(customDomainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(customDomainName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the existing custom domains within an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomDomain> GetAll(CancellationToken cancellationToken = default)
        {
            Page<CustomDomain> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _customDomainsRestClient.ListByEndpoint(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomain(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomDomain> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _customDomainsRestClient.ListByEndpointNextPage(nextLink, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomain(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all of the existing custom domains within an endpoint. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomDomain" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomDomain> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomDomain>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _customDomainsRestClient.ListByEndpointAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomain(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomDomain>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _customDomainsRestClient.ListByEndpointNextPageAsync(nextLink, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomain(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<CustomDomain> IEnumerable<CustomDomain>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CustomDomain> IAsyncEnumerable<CustomDomain>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, CustomDomain, CustomDomainData> Construct() { }
    }
}
