// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Cdn.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Cdn
{
    /// <summary>
    /// A class representing the DeploymentVersion data model.
    /// Deployment version object
    /// Serialized Name: DeploymentVersion
    /// </summary>
    public partial class DeploymentVersionData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DeploymentVersionData"/>. </summary>
        public DeploymentVersionData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DeploymentVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Serialized Name: DeploymentVersion.properties.description. </param>
        /// <param name="provisioningState">
        /// Provisioning status
        /// Serialized Name: DeploymentVersion.properties.provisioningState
        /// </param>
        /// <param name="deploymentStatus"> Serialized Name: DeploymentVersion.properties.deploymentStatus. </param>
        /// <param name="createdOn">
        /// The timestamp of deployment version creation (UTC)
        /// Serialized Name: DeploymentVersion.properties.createdAt
        /// </param>
        /// <param name="approvedOn">
        /// The timestamp of deployment version approval (UTC)
        /// Serialized Name: DeploymentVersion.properties.approvedAt
        /// </param>
        /// <param name="approvalStatus"> Serialized Name: DeploymentVersion.properties.approvalStatus. </param>
        /// <param name="stages">
        /// The preview and production deployment status of the deployment version under the profile
        /// Serialized Name: DeploymentVersion.properties.stages
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeploymentVersionData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string description, FrontDoorProvisioningState? provisioningState, FrontDoorDeploymentStatus? deploymentStatus, DateTimeOffset? createdOn, DateTimeOffset? approvedOn, ApprovalStatus? approvalStatus, DeploymentStages stages, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Description = description;
            ProvisioningState = provisioningState;
            DeploymentStatus = deploymentStatus;
            CreatedOn = createdOn;
            ApprovedOn = approvedOn;
            ApprovalStatus = approvalStatus;
            Stages = stages;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Serialized Name: DeploymentVersion.properties.description. </summary>
        public string Description { get; set; }
        /// <summary>
        /// Provisioning status
        /// Serialized Name: DeploymentVersion.properties.provisioningState
        /// </summary>
        public FrontDoorProvisioningState? ProvisioningState { get; }
        /// <summary> Serialized Name: DeploymentVersion.properties.deploymentStatus. </summary>
        public FrontDoorDeploymentStatus? DeploymentStatus { get; }
        /// <summary>
        /// The timestamp of deployment version creation (UTC)
        /// Serialized Name: DeploymentVersion.properties.createdAt
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// The timestamp of deployment version approval (UTC)
        /// Serialized Name: DeploymentVersion.properties.approvedAt
        /// </summary>
        public DateTimeOffset? ApprovedOn { get; }
        /// <summary> Serialized Name: DeploymentVersion.properties.approvalStatus. </summary>
        public ApprovalStatus? ApprovalStatus { get; }
        /// <summary>
        /// The preview and production deployment status of the deployment version under the profile
        /// Serialized Name: DeploymentVersion.properties.stages
        /// </summary>
        public DeploymentStages Stages { get; }
    }
}
