// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Cdn;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class CdnModelFactory
    {
        /// <summary> Initializes a new instance of EndpointNameAvailabilityResult. </summary>
        /// <param name="nameAvailable"> Indicates whether the name is available. </param>
        /// <param name="availableHostname"> Returns the available hostname generated based on the AutoGeneratedDomainNameLabelScope when the name is available, otherwise it returns empty string. </param>
        /// <param name="reason"> The reason why the name is not available. </param>
        /// <param name="message"> The detailed error message describing why the name is not available. </param>
        /// <returns> A new <see cref="Models.EndpointNameAvailabilityResult"/> instance for mocking. </returns>
        public static EndpointNameAvailabilityResult EndpointNameAvailabilityResult(bool? nameAvailable = null, string availableHostname = null, string reason = null, string message = null)
        {
            return new EndpointNameAvailabilityResult(nameAvailable, availableHostname, reason, message);
        }

        /// <summary> Initializes a new instance of FrontDoorUsage. </summary>
        /// <param name="id"> Resource identifier. </param>
        /// <param name="unit"> An enum describing the unit of measurement. </param>
        /// <param name="currentValue"> The current value of the usage. </param>
        /// <param name="limit"> The limit of usage. </param>
        /// <param name="name"> The name of the type of usage. </param>
        /// <returns> A new <see cref="Models.FrontDoorUsage"/> instance for mocking. </returns>
        public static FrontDoorUsage FrontDoorUsage(ResourceIdentifier id = null, FrontDoorUsageUnit unit = default, long currentValue = default, long limit = default, FrontDoorUsageResourceName name = null)
        {
            return new FrontDoorUsage(id, unit, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of FrontDoorUsageResourceName. </summary>
        /// <param name="value"> A string describing the resource name. </param>
        /// <param name="localizedValue"> A localized string describing the resource name. </param>
        /// <returns> A new <see cref="Models.FrontDoorUsageResourceName"/> instance for mocking. </returns>
        public static FrontDoorUsageResourceName FrontDoorUsageResourceName(string value = null, string localizedValue = null)
        {
            return new FrontDoorUsageResourceName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of CdnNameAvailabilityResult. </summary>
        /// <param name="nameAvailable"> Indicates whether the name is available. </param>
        /// <param name="reason"> The reason why the name is not available. </param>
        /// <param name="message"> The detailed error message describing why the name is not available. </param>
        /// <returns> A new <see cref="Models.CdnNameAvailabilityResult"/> instance for mocking. </returns>
        public static CdnNameAvailabilityResult CdnNameAvailabilityResult(bool? nameAvailable = null, string reason = null, string message = null)
        {
            return new CdnNameAvailabilityResult(nameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of FrontDoorCustomDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="profileName"> The name of the profile which holds the domain. </param>
        /// <param name="tlsSettings"> The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user&apos;s own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default. </param>
        /// <param name="dnsZoneId"> Resource reference to the Azure DNS zone. </param>
        /// <param name="preValidatedCustomDomainResourceId"> Resource reference to the Azure resource where custom domain ownership was prevalidated. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <param name="domainValidationState"> Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. DCV stands for DomainControlValidation. </param>
        /// <param name="hostName"> The host name of the domain. Must be a domain name. </param>
        /// <param name="validationProperties"> Values the customer needs to validate domain ownership. </param>
        /// <returns> A new <see cref="Cdn.FrontDoorCustomDomainData"/> instance for mocking. </returns>
        public static FrontDoorCustomDomainData FrontDoorCustomDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string profileName = null, FrontDoorCustomDomainHttpsContent tlsSettings = null, ResourceIdentifier dnsZoneId = null, ResourceIdentifier preValidatedCustomDomainResourceId = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null, DomainValidationState? domainValidationState = null, string hostName = null, DomainValidationProperties validationProperties = null)
        {
            return new FrontDoorCustomDomainData(id, name, resourceType, systemData, profileName, tlsSettings, dnsZoneId != null ? ResourceManagerModelFactory.WritableSubResource(dnsZoneId) : null, preValidatedCustomDomainResourceId != null ? new FrontDoorCustomDomainUpdatePropertiesParametersPreValidatedCustomDomainResourceId(preValidatedCustomDomainResourceId) : null, provisioningState, deploymentStatus, domainValidationState, hostName, validationProperties);
        }

        /// <summary> Initializes a new instance of DomainValidationProperties. </summary>
        /// <param name="validationToken"> Challenge used for DNS TXT record or file based validation. </param>
        /// <param name="expiresOn"> The date time that the token expires. </param>
        /// <returns> A new <see cref="Models.DomainValidationProperties"/> instance for mocking. </returns>
        public static DomainValidationProperties DomainValidationProperties(string validationToken = null, DateTimeOffset? expiresOn = null)
        {
            return new DomainValidationProperties(validationToken, expiresOn);
        }

        /// <summary> Initializes a new instance of FrontDoorCustomDomainHttpsContent. </summary>
        /// <param name="certificateType"> Defines the source of the SSL certificate. </param>
        /// <param name="minimumTlsVersion"> TLS protocol version that will be used for Https. </param>
        /// <param name="secretId"> Resource reference to the secret. ie. subs/rg/profile/secret. </param>
        /// <returns> A new <see cref="Models.FrontDoorCustomDomainHttpsContent"/> instance for mocking. </returns>
        public static FrontDoorCustomDomainHttpsContent FrontDoorCustomDomainHttpsContent(FrontDoorCertificateType certificateType = default, FrontDoorMinimumTlsVersion? minimumTlsVersion = null, ResourceIdentifier secretId = null)
        {
            return new FrontDoorCustomDomainHttpsContent(certificateType, minimumTlsVersion, secretId != null ? new FrontDoorCustomDomainHttpsContentSecret(secretId) : null);
        }

        /// <summary> Initializes a new instance of FrontDoorEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="profileName"> The name of the profile which holds the endpoint. </param>
        /// <param name="enabledState"> Whether to enable use of this rule. Permitted values are &apos;Enabled&apos; or &apos;Disabled&apos;. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <param name="hostName"> The host name of the endpoint structured as {endpointName}.{DNSZone}, e.g. contoso.azureedge.net. </param>
        /// <param name="autoGeneratedDomainNameLabelScope"> Indicates the endpoint name reuse scope. The default value is TenantReuse. </param>
        /// <returns> A new <see cref="Cdn.FrontDoorEndpointData"/> instance for mocking. </returns>
        public static FrontDoorEndpointData FrontDoorEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string profileName = null, EnabledState? enabledState = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null, string hostName = null, DomainNameLabelScope? autoGeneratedDomainNameLabelScope = null)
        {
            tags ??= new Dictionary<string, string>();

            return new FrontDoorEndpointData(id, name, resourceType, systemData, tags, location, profileName, enabledState, provisioningState, deploymentStatus, hostName, autoGeneratedDomainNameLabelScope);
        }

        /// <summary> Initializes a new instance of ValidateCustomDomainResult. </summary>
        /// <param name="isCustomDomainValid"> Indicates whether the custom domain is valid or not. </param>
        /// <param name="reason"> The reason why the custom domain is not valid. </param>
        /// <param name="message"> Error message describing why the custom domain is not valid. </param>
        /// <returns> A new <see cref="Models.ValidateCustomDomainResult"/> instance for mocking. </returns>
        public static ValidateCustomDomainResult ValidateCustomDomainResult(bool? isCustomDomainValid = null, string reason = null, string message = null)
        {
            return new ValidateCustomDomainResult(isCustomDomainValid, reason, message);
        }

        /// <summary> Initializes a new instance of FrontDoorOriginGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="profileName"> The name of the profile which holds the origin group. </param>
        /// <param name="loadBalancingSettings"> Load balancing settings for a backend pool. </param>
        /// <param name="healthProbeSettings"> Health probe settings to the origin that is used to determine the health of the origin. </param>
        /// <param name="trafficRestorationTimeInMinutes"> Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported. </param>
        /// <param name="sessionAffinityState"> Whether to allow session affinity on this host. Valid options are &apos;Enabled&apos; or &apos;Disabled&apos;. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <returns> A new <see cref="Cdn.FrontDoorOriginGroupData"/> instance for mocking. </returns>
        public static FrontDoorOriginGroupData FrontDoorOriginGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string profileName = null, LoadBalancingSettings loadBalancingSettings = null, HealthProbeSettings healthProbeSettings = null, int? trafficRestorationTimeInMinutes = null, EnabledState? sessionAffinityState = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null)
        {
            return new FrontDoorOriginGroupData(id, name, resourceType, systemData, profileName, loadBalancingSettings, healthProbeSettings, trafficRestorationTimeInMinutes, sessionAffinityState, provisioningState, deploymentStatus);
        }

        /// <summary> Initializes a new instance of LoadBalancingSettings. </summary>
        /// <param name="sampleSize"> The number of samples to consider for load balancing decisions. </param>
        /// <param name="successfulSamplesRequired"> The number of samples within the sample period that must succeed. </param>
        /// <param name="additionalLatencyInMilliseconds"> The additional latency in milliseconds for probes to fall into the lowest latency bucket. </param>
        /// <returns> A new <see cref="Models.LoadBalancingSettings"/> instance for mocking. </returns>
        public static LoadBalancingSettings LoadBalancingSettings(int? sampleSize = null, int? successfulSamplesRequired = null, int? additionalLatencyInMilliseconds = null)
        {
            return new LoadBalancingSettings(sampleSize, successfulSamplesRequired, additionalLatencyInMilliseconds);
        }

        /// <summary> Initializes a new instance of HealthProbeSettings. </summary>
        /// <param name="probePath"> The path relative to the origin that is used to determine the health of the origin. </param>
        /// <param name="probeRequestType"> The type of health probe request that is made. </param>
        /// <param name="probeProtocol"> Protocol to use for health probe. </param>
        /// <param name="probeIntervalInSeconds"> The number of seconds between health probes.Default is 240sec. </param>
        /// <returns> A new <see cref="Models.HealthProbeSettings"/> instance for mocking. </returns>
        public static HealthProbeSettings HealthProbeSettings(string probePath = null, HealthProbeRequestType? probeRequestType = null, HealthProbeProtocol? probeProtocol = null, int? probeIntervalInSeconds = null)
        {
            return new HealthProbeSettings(probePath, probeRequestType, probeProtocol, probeIntervalInSeconds);
        }

        /// <summary> Initializes a new instance of FrontDoorOriginData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="originGroupName"> The name of the origin group which contains this origin. </param>
        /// <param name="originId"> Resource reference to the Azure origin resource. </param>
        /// <param name="hostName"> The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint. </param>
        /// <param name="httpPort"> The value of the HTTP port. Must be between 1 and 65535. </param>
        /// <param name="httpsPort"> The value of the HTTPS port. Must be between 1 and 65535. </param>
        /// <param name="originHostHeader"> The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint. </param>
        /// <param name="priority"> Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5. </param>
        /// <param name="weight"> Weight of the origin in given origin group for load balancing. Must be between 1 and 1000. </param>
        /// <param name="sharedPrivateLinkResource"> The properties of the private link resource for private origin. </param>
        /// <param name="enabledState"> Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool. </param>
        /// <param name="enforceCertificateNameCheck"> Whether to enable certificate name check at origin level. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <returns> A new <see cref="Cdn.FrontDoorOriginData"/> instance for mocking. </returns>
        public static FrontDoorOriginData FrontDoorOriginData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string originGroupName = null, ResourceIdentifier originId = null, string hostName = null, int? httpPort = null, int? httpsPort = null, string originHostHeader = null, int? priority = null, int? weight = null, SharedPrivateLinkResourceProperties sharedPrivateLinkResource = null, EnabledState? enabledState = null, bool? enforceCertificateNameCheck = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null)
        {
            return new FrontDoorOriginData(id, name, resourceType, systemData, originGroupName, originId != null ? ResourceManagerModelFactory.WritableSubResource(originId) : null, hostName, httpPort, httpsPort, originHostHeader, priority, weight, sharedPrivateLinkResource, enabledState, enforceCertificateNameCheck, provisioningState, deploymentStatus);
        }

        /// <summary> Initializes a new instance of SharedPrivateLinkResourceProperties. </summary>
        /// <param name="privateLinkId"> The resource id of the resource the shared private link resource is for. </param>
        /// <param name="privateLinkLocation"> The location of the shared private link resource. </param>
        /// <param name="groupId"> The group id from the provider of resource the shared private link resource is for. </param>
        /// <param name="requestMessage"> The request message for requesting approval of the shared private link resource. </param>
        /// <param name="status"> Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected, or Timeout. </param>
        /// <returns> A new <see cref="Models.SharedPrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static SharedPrivateLinkResourceProperties SharedPrivateLinkResourceProperties(ResourceIdentifier privateLinkId = null, string privateLinkLocation = null, string groupId = null, string requestMessage = null, SharedPrivateLinkResourceStatus? status = null)
        {
            return new SharedPrivateLinkResourceProperties(privateLinkId != null ? ResourceManagerModelFactory.WritableSubResource(privateLinkId) : null, privateLinkLocation, groupId, requestMessage, status);
        }

        /// <summary> Initializes a new instance of FrontDoorRouteData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="endpointName"> The name of the endpoint which holds the route. </param>
        /// <param name="customDomains"> Domains referenced by this endpoint. </param>
        /// <param name="originGroupId"> A reference to the origin group. </param>
        /// <param name="originPath"> A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath. </param>
        /// <param name="ruleSets"> rule sets referenced by this endpoint. </param>
        /// <param name="supportedProtocols"> List of supported protocols for this route. </param>
        /// <param name="patternsToMatch"> The route patterns of the rule. </param>
        /// <param name="cacheConfiguration"> The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object. </param>
        /// <param name="forwardingProtocol"> Protocol this rule will use when forwarding traffic to backends. </param>
        /// <param name="linkToDefaultDomain"> whether this route will be linked to the default endpoint domain. </param>
        /// <param name="httpsRedirect"> Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed. </param>
        /// <param name="enabledState"> Whether to enable use of this rule. Permitted values are &apos;Enabled&apos; or &apos;Disabled&apos;. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <returns> A new <see cref="Cdn.FrontDoorRouteData"/> instance for mocking. </returns>
        public static FrontDoorRouteData FrontDoorRouteData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string endpointName = null, IEnumerable<FrontDoorActivatedResourceInfo> customDomains = null, ResourceIdentifier originGroupId = null, string originPath = null, IEnumerable<WritableSubResource> ruleSets = null, IEnumerable<FrontDoorEndpointProtocol> supportedProtocols = null, IEnumerable<string> patternsToMatch = null, FrontDoorRouteCacheConfiguration cacheConfiguration = null, ForwardingProtocol? forwardingProtocol = null, LinkToDefaultDomain? linkToDefaultDomain = null, HttpsRedirect? httpsRedirect = null, EnabledState? enabledState = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null)
        {
            customDomains ??= new List<FrontDoorActivatedResourceInfo>();
            ruleSets ??= new List<WritableSubResource>();
            supportedProtocols ??= new List<FrontDoorEndpointProtocol>();
            patternsToMatch ??= new List<string>();

            return new FrontDoorRouteData(id, name, resourceType, systemData, endpointName, customDomains?.ToList(), originGroupId != null ? ResourceManagerModelFactory.WritableSubResource(originGroupId) : null, originPath, ruleSets?.ToList(), supportedProtocols?.ToList(), patternsToMatch?.ToList(), cacheConfiguration, forwardingProtocol, linkToDefaultDomain, httpsRedirect, enabledState, provisioningState, deploymentStatus);
        }

        /// <summary> Initializes a new instance of FrontDoorActivatedResourceInfo. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="isActive"> Whether the resource is active or inactive. </param>
        /// <returns> A new <see cref="Models.FrontDoorActivatedResourceInfo"/> instance for mocking. </returns>
        public static FrontDoorActivatedResourceInfo FrontDoorActivatedResourceInfo(ResourceIdentifier id = null, bool? isActive = null)
        {
            return new FrontDoorActivatedResourceInfo(id, isActive);
        }

        /// <summary> Initializes a new instance of FrontDoorRouteCacheConfiguration. </summary>
        /// <param name="queryStringCachingBehavior"> Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings. </param>
        /// <param name="queryParameters"> query parameters to include or exclude (comma separated). </param>
        /// <param name="compressionSettings"> compression settings. </param>
        /// <returns> A new <see cref="Models.FrontDoorRouteCacheConfiguration"/> instance for mocking. </returns>
        public static FrontDoorRouteCacheConfiguration FrontDoorRouteCacheConfiguration(FrontDoorQueryStringCachingBehavior? queryStringCachingBehavior = null, string queryParameters = null, RouteCacheCompressionSettings compressionSettings = null)
        {
            return new FrontDoorRouteCacheConfiguration(queryStringCachingBehavior, queryParameters, compressionSettings);
        }

        /// <summary> Initializes a new instance of RouteCacheCompressionSettings. </summary>
        /// <param name="contentTypesToCompress"> List of content types on which compression applies. The value should be a valid MIME type. </param>
        /// <param name="isCompressionEnabled"> Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&apos;t be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB. </param>
        /// <returns> A new <see cref="Models.RouteCacheCompressionSettings"/> instance for mocking. </returns>
        public static RouteCacheCompressionSettings RouteCacheCompressionSettings(IEnumerable<string> contentTypesToCompress = null, bool? isCompressionEnabled = null)
        {
            contentTypesToCompress ??= new List<string>();

            return new RouteCacheCompressionSettings(contentTypesToCompress?.ToList(), isCompressionEnabled);
        }

        /// <summary> Initializes a new instance of FrontDoorRuleSetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <param name="profileName"> The name of the profile which holds the rule set. </param>
        /// <returns> A new <see cref="Cdn.FrontDoorRuleSetData"/> instance for mocking. </returns>
        public static FrontDoorRuleSetData FrontDoorRuleSetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null, string profileName = null)
        {
            return new FrontDoorRuleSetData(id, name, resourceType, systemData, provisioningState, deploymentStatus, profileName);
        }

        /// <summary> Initializes a new instance of FrontDoorRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ruleSetName"> The name of the rule set containing the rule. </param>
        /// <param name="order"> The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied. </param>
        /// <param name="conditions">
        /// A list of conditions that must be matched for the actions to be executed
        /// Please note <see cref="DeliveryRuleCondition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeliveryRuleClientPortCondition"/>, <see cref="DeliveryRuleCookiesCondition"/>, <see cref="DeliveryRuleHostNameCondition"/>, <see cref="DeliveryRuleHttpVersionCondition"/>, <see cref="DeliveryRuleIsDeviceCondition"/>, <see cref="DeliveryRulePostArgsCondition"/>, <see cref="DeliveryRuleQueryStringCondition"/>, <see cref="DeliveryRuleRemoteAddressCondition"/>, <see cref="DeliveryRuleRequestBodyCondition"/>, <see cref="DeliveryRuleRequestHeaderCondition"/>, <see cref="DeliveryRuleRequestMethodCondition"/>, <see cref="DeliveryRuleRequestSchemeCondition"/>, <see cref="DeliveryRuleRequestUriCondition"/>, <see cref="DeliveryRuleServerPortCondition"/>, <see cref="DeliveryRuleSocketAddressCondition"/>, <see cref="DeliveryRuleSslProtocolCondition"/>, <see cref="DeliveryRuleUriFileExtensionCondition"/>, <see cref="DeliveryRuleUriFileNameCondition"/> and <see cref="DeliveryRuleUriPathCondition"/>.
        /// </param>
        /// <param name="actions">
        /// A list of actions that are executed when all the conditions of a rule are satisfied.
        /// Please note <see cref="DeliveryRuleAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeliveryRuleCacheExpirationAction"/>, <see cref="DeliveryRuleCacheKeyQueryStringAction"/>, <see cref="DeliveryRuleRequestHeaderAction"/>, <see cref="DeliveryRuleResponseHeaderAction"/>, <see cref="OriginGroupOverrideAction"/>, <see cref="DeliveryRuleRouteConfigurationOverrideAction"/>, <see cref="UriRedirectAction"/>, <see cref="UriRewriteAction"/> and <see cref="UriSigningAction"/>.
        /// </param>
        /// <param name="matchProcessingBehavior"> If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <returns> A new <see cref="Cdn.FrontDoorRuleData"/> instance for mocking. </returns>
        public static FrontDoorRuleData FrontDoorRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ruleSetName = null, int? order = null, IEnumerable<DeliveryRuleCondition> conditions = null, IEnumerable<DeliveryRuleAction> actions = null, MatchProcessingBehavior? matchProcessingBehavior = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null)
        {
            conditions ??= new List<DeliveryRuleCondition>();
            actions ??= new List<DeliveryRuleAction>();

            return new FrontDoorRuleData(id, name, resourceType, systemData, ruleSetName, order, conditions?.ToList(), actions?.ToList(), matchProcessingBehavior, provisioningState, deploymentStatus);
        }

        /// <summary> Initializes a new instance of DeliveryRuleCondition. </summary>
        /// <param name="name"> The name of the condition for the delivery rule. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleCondition"/> instance for mocking. </returns>
        public static DeliveryRuleCondition DeliveryRuleCondition(string name = "Unknown")
        {
            return new UnknownDeliveryRuleCondition(name);
        }

        /// <summary> Initializes a new instance of DeliveryRuleAction. </summary>
        /// <param name="name"> The name of the action for the delivery rule. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleAction"/> instance for mocking. </returns>
        public static DeliveryRuleAction DeliveryRuleAction(string name = "Unknown")
        {
            return new UnknownDeliveryRuleAction(name);
        }

        /// <summary> Initializes a new instance of FrontDoorSecurityPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <param name="profileName"> The name of the profile which holds the security policy. </param>
        /// <param name="properties">
        /// object which contains security policy parameters
        /// Please note <see cref="SecurityPolicyProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecurityPolicyWebApplicationFirewall"/>.
        /// </param>
        /// <returns> A new <see cref="Cdn.FrontDoorSecurityPolicyData"/> instance for mocking. </returns>
        public static FrontDoorSecurityPolicyData FrontDoorSecurityPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null, string profileName = null, SecurityPolicyProperties properties = null)
        {
            return new FrontDoorSecurityPolicyData(id, name, resourceType, systemData, provisioningState, deploymentStatus, profileName, properties);
        }

        /// <summary> Initializes a new instance of SecurityPolicyProperties. </summary>
        /// <param name="policyType"> The type of the Security policy to create. </param>
        /// <returns> A new <see cref="Models.SecurityPolicyProperties"/> instance for mocking. </returns>
        public static SecurityPolicyProperties SecurityPolicyProperties(string policyType = "Unknown")
        {
            return new UnknownSecurityPolicyProperties(policyType);
        }

        /// <summary> Initializes a new instance of FrontDoorSecretData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning status. </param>
        /// <param name="deploymentStatus"></param>
        /// <param name="profileName"> The name of the profile which holds the secret. </param>
        /// <param name="properties">
        /// object which contains secret parameters
        /// Please note <see cref="FrontDoorSecretProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFirstPartyManagedCertificateProperties"/>, <see cref="CustomerCertificateProperties"/>, <see cref="ManagedCertificateProperties"/> and <see cref="UriSigningKeyProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Cdn.FrontDoorSecretData"/> instance for mocking. </returns>
        public static FrontDoorSecretData FrontDoorSecretData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, FrontDoorProvisioningState? provisioningState = null, FrontDoorDeploymentStatus? deploymentStatus = null, string profileName = null, FrontDoorSecretProperties properties = null)
        {
            return new FrontDoorSecretData(id, name, resourceType, systemData, provisioningState, deploymentStatus, profileName, properties);
        }

        /// <summary> Initializes a new instance of FrontDoorSecretProperties. </summary>
        /// <param name="secretType"> The type of the secret resource. </param>
        /// <returns> A new <see cref="Models.FrontDoorSecretProperties"/> instance for mocking. </returns>
        public static FrontDoorSecretProperties FrontDoorSecretProperties(string secretType = "Unknown")
        {
            return new UnknownSecretProperties(secretType);
        }

        /// <summary> Initializes a new instance of MetricsResponse. </summary>
        /// <param name="dateTimeBegin"></param>
        /// <param name="dateTimeEnd"></param>
        /// <param name="granularity"></param>
        /// <param name="series"></param>
        /// <returns> A new <see cref="Models.MetricsResponse"/> instance for mocking. </returns>
        public static MetricsResponse MetricsResponse(DateTimeOffset? dateTimeBegin = null, DateTimeOffset? dateTimeEnd = null, MetricsResponseGranularity? granularity = null, IEnumerable<MetricsResponseSeriesItem> series = null)
        {
            series ??= new List<MetricsResponseSeriesItem>();

            return new MetricsResponse(dateTimeBegin, dateTimeEnd, granularity, series?.ToList());
        }

        /// <summary> Initializes a new instance of MetricsResponseSeriesItem. </summary>
        /// <param name="metric"></param>
        /// <param name="unit"></param>
        /// <param name="groups"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.MetricsResponseSeriesItem"/> instance for mocking. </returns>
        public static MetricsResponseSeriesItem MetricsResponseSeriesItem(string metric = null, MetricsResponseSeriesItemUnit? unit = null, IEnumerable<MetricsResponseSeriesPropertiesItemsItem> groups = null, IEnumerable<Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems> data = null)
        {
            groups ??= new List<MetricsResponseSeriesPropertiesItemsItem>();
            data ??= new List<Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems>();

            return new MetricsResponseSeriesItem(metric, unit, groups?.ToList(), data?.ToList());
        }

        /// <summary> Initializes a new instance of MetricsResponseSeriesPropertiesItemsItem. </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.MetricsResponseSeriesPropertiesItemsItem"/> instance for mocking. </returns>
        public static MetricsResponseSeriesPropertiesItemsItem MetricsResponseSeriesPropertiesItemsItem(string name = null, string value = null)
        {
            return new MetricsResponseSeriesPropertiesItemsItem(name, value);
        }

        /// <summary> Initializes a new instance of Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems. </summary>
        /// <param name="dateOn"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems"/> instance for mocking. </returns>
        public static Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems(DateTimeOffset? dateOn = null, float? value = null)
        {
            return new Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems(dateOn, value);
        }

        /// <summary> Initializes a new instance of RankingsResponse. </summary>
        /// <param name="dateTimeBegin"></param>
        /// <param name="dateTimeEnd"></param>
        /// <param name="tables"></param>
        /// <returns> A new <see cref="Models.RankingsResponse"/> instance for mocking. </returns>
        public static RankingsResponse RankingsResponse(DateTimeOffset? dateTimeBegin = null, DateTimeOffset? dateTimeEnd = null, IEnumerable<RankingsResponseTablesItem> tables = null)
        {
            tables ??= new List<RankingsResponseTablesItem>();

            return new RankingsResponse(dateTimeBegin, dateTimeEnd, tables?.ToList());
        }

        /// <summary> Initializes a new instance of RankingsResponseTablesItem. </summary>
        /// <param name="ranking"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.RankingsResponseTablesItem"/> instance for mocking. </returns>
        public static RankingsResponseTablesItem RankingsResponseTablesItem(string ranking = null, IEnumerable<RankingsResponseTablesPropertiesItemsItem> data = null)
        {
            data ??= new List<RankingsResponseTablesPropertiesItemsItem>();

            return new RankingsResponseTablesItem(ranking, data?.ToList());
        }

        /// <summary> Initializes a new instance of RankingsResponseTablesPropertiesItemsItem. </summary>
        /// <param name="name"></param>
        /// <param name="metrics"></param>
        /// <returns> A new <see cref="Models.RankingsResponseTablesPropertiesItemsItem"/> instance for mocking. </returns>
        public static RankingsResponseTablesPropertiesItemsItem RankingsResponseTablesPropertiesItemsItem(string name = null, IEnumerable<RankingsResponseTablesPropertiesItemsMetricsItem> metrics = null)
        {
            metrics ??= new List<RankingsResponseTablesPropertiesItemsMetricsItem>();

            return new RankingsResponseTablesPropertiesItemsItem(name, metrics?.ToList());
        }

        /// <summary> Initializes a new instance of RankingsResponseTablesPropertiesItemsMetricsItem. </summary>
        /// <param name="metric"></param>
        /// <param name="value"></param>
        /// <param name="percentage"></param>
        /// <returns> A new <see cref="Models.RankingsResponseTablesPropertiesItemsMetricsItem"/> instance for mocking. </returns>
        public static RankingsResponseTablesPropertiesItemsMetricsItem RankingsResponseTablesPropertiesItemsMetricsItem(string metric = null, long? value = null, float? percentage = null)
        {
            return new RankingsResponseTablesPropertiesItemsMetricsItem(metric, value, percentage);
        }

        /// <summary> Initializes a new instance of ContinentsResponse. </summary>
        /// <param name="continents"></param>
        /// <param name="countryOrRegions"></param>
        /// <returns> A new <see cref="Models.ContinentsResponse"/> instance for mocking. </returns>
        public static ContinentsResponse ContinentsResponse(IEnumerable<ContinentsResponseContinentsItem> continents = null, IEnumerable<ContinentsResponseCountryOrRegionsItem> countryOrRegions = null)
        {
            continents ??= new List<ContinentsResponseContinentsItem>();
            countryOrRegions ??= new List<ContinentsResponseCountryOrRegionsItem>();

            return new ContinentsResponse(continents?.ToList(), countryOrRegions?.ToList());
        }

        /// <summary> Initializes a new instance of ContinentsResponseContinentsItem. </summary>
        /// <param name="id"></param>
        /// <returns> A new <see cref="Models.ContinentsResponseContinentsItem"/> instance for mocking. </returns>
        public static ContinentsResponseContinentsItem ContinentsResponseContinentsItem(string id = null)
        {
            return new ContinentsResponseContinentsItem(id);
        }

        /// <summary> Initializes a new instance of ContinentsResponseCountryOrRegionsItem. </summary>
        /// <param name="id"></param>
        /// <param name="continentId"></param>
        /// <returns> A new <see cref="Models.ContinentsResponseCountryOrRegionsItem"/> instance for mocking. </returns>
        public static ContinentsResponseCountryOrRegionsItem ContinentsResponseCountryOrRegionsItem(string id = null, string continentId = null)
        {
            return new ContinentsResponseCountryOrRegionsItem(id, continentId);
        }

        /// <summary> Initializes a new instance of ResourcesResponse. </summary>
        /// <param name="endpoints"></param>
        /// <param name="customDomains"></param>
        /// <returns> A new <see cref="Models.ResourcesResponse"/> instance for mocking. </returns>
        public static ResourcesResponse ResourcesResponse(IEnumerable<ResourcesResponseEndpointsItem> endpoints = null, IEnumerable<ResourcesResponseCustomDomainsItem> customDomains = null)
        {
            endpoints ??= new List<ResourcesResponseEndpointsItem>();
            customDomains ??= new List<ResourcesResponseCustomDomainsItem>();

            return new ResourcesResponse(endpoints?.ToList(), customDomains?.ToList());
        }

        /// <summary> Initializes a new instance of ResourcesResponseEndpointsItem. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="history"></param>
        /// <param name="customDomains"></param>
        /// <returns> A new <see cref="Models.ResourcesResponseEndpointsItem"/> instance for mocking. </returns>
        public static ResourcesResponseEndpointsItem ResourcesResponseEndpointsItem(string id = null, string name = null, bool? history = null, IEnumerable<ResourcesResponseEndpointsPropertiesItemsItem> customDomains = null)
        {
            customDomains ??= new List<ResourcesResponseEndpointsPropertiesItemsItem>();

            return new ResourcesResponseEndpointsItem(id, name, history, customDomains?.ToList());
        }

        /// <summary> Initializes a new instance of ResourcesResponseEndpointsPropertiesItemsItem. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="endpointId"></param>
        /// <param name="history"></param>
        /// <returns> A new <see cref="Models.ResourcesResponseEndpointsPropertiesItemsItem"/> instance for mocking. </returns>
        public static ResourcesResponseEndpointsPropertiesItemsItem ResourcesResponseEndpointsPropertiesItemsItem(string id = null, string name = null, string endpointId = null, bool? history = null)
        {
            return new ResourcesResponseEndpointsPropertiesItemsItem(id, name, endpointId, history);
        }

        /// <summary> Initializes a new instance of ResourcesResponseCustomDomainsItem. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="endpointId"></param>
        /// <param name="history"></param>
        /// <returns> A new <see cref="Models.ResourcesResponseCustomDomainsItem"/> instance for mocking. </returns>
        public static ResourcesResponseCustomDomainsItem ResourcesResponseCustomDomainsItem(string id = null, string name = null, string endpointId = null, bool? history = null)
        {
            return new ResourcesResponseCustomDomainsItem(id, name, endpointId, history);
        }

        /// <summary> Initializes a new instance of WafMetricsResponse. </summary>
        /// <param name="dateTimeBegin"></param>
        /// <param name="dateTimeEnd"></param>
        /// <param name="granularity"></param>
        /// <param name="series"></param>
        /// <returns> A new <see cref="Models.WafMetricsResponse"/> instance for mocking. </returns>
        public static WafMetricsResponse WafMetricsResponse(DateTimeOffset? dateTimeBegin = null, DateTimeOffset? dateTimeEnd = null, WafMetricsResponseGranularity? granularity = null, IEnumerable<WafMetricsResponseSeriesItem> series = null)
        {
            series ??= new List<WafMetricsResponseSeriesItem>();

            return new WafMetricsResponse(dateTimeBegin, dateTimeEnd, granularity, series?.ToList());
        }

        /// <summary> Initializes a new instance of WafMetricsResponseSeriesItem. </summary>
        /// <param name="metric"></param>
        /// <param name="unit"></param>
        /// <param name="groups"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.WafMetricsResponseSeriesItem"/> instance for mocking. </returns>
        public static WafMetricsResponseSeriesItem WafMetricsResponseSeriesItem(string metric = null, WafMetricsResponseSeriesItemUnit? unit = null, IEnumerable<WafMetricsResponseSeriesPropertiesItemsItem> groups = null, IEnumerable<Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems> data = null)
        {
            groups ??= new List<WafMetricsResponseSeriesPropertiesItemsItem>();
            data ??= new List<Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems>();

            return new WafMetricsResponseSeriesItem(metric, unit, groups?.ToList(), data?.ToList());
        }

        /// <summary> Initializes a new instance of WafMetricsResponseSeriesPropertiesItemsItem. </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.WafMetricsResponseSeriesPropertiesItemsItem"/> instance for mocking. </returns>
        public static WafMetricsResponseSeriesPropertiesItemsItem WafMetricsResponseSeriesPropertiesItemsItem(string name = null, string value = null)
        {
            return new WafMetricsResponseSeriesPropertiesItemsItem(name, value);
        }

        /// <summary> Initializes a new instance of Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems. </summary>
        /// <param name="dateOn"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems"/> instance for mocking. </returns>
        public static Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems(DateTimeOffset? dateOn = null, float? value = null)
        {
            return new Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems(dateOn, value);
        }

        /// <summary> Initializes a new instance of WafRankingsResponse. </summary>
        /// <param name="dateTimeBegin"></param>
        /// <param name="dateTimeEnd"></param>
        /// <param name="groups"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.WafRankingsResponse"/> instance for mocking. </returns>
        public static WafRankingsResponse WafRankingsResponse(DateTimeOffset? dateTimeBegin = null, DateTimeOffset? dateTimeEnd = null, IEnumerable<string> groups = null, IEnumerable<WafRankingsResponseDataItem> data = null)
        {
            groups ??= new List<string>();
            data ??= new List<WafRankingsResponseDataItem>();

            return new WafRankingsResponse(dateTimeBegin, dateTimeEnd, groups?.ToList(), data?.ToList());
        }

        /// <summary> Initializes a new instance of WafRankingsResponseDataItem. </summary>
        /// <param name="groupValues"></param>
        /// <param name="metrics"></param>
        /// <returns> A new <see cref="Models.WafRankingsResponseDataItem"/> instance for mocking. </returns>
        public static WafRankingsResponseDataItem WafRankingsResponseDataItem(IEnumerable<string> groupValues = null, IEnumerable<ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems> metrics = null)
        {
            groupValues ??= new List<string>();
            metrics ??= new List<ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems>();

            return new WafRankingsResponseDataItem(groupValues?.ToList(), metrics?.ToList());
        }

        /// <summary> Initializes a new instance of ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems. </summary>
        /// <param name="metric"></param>
        /// <param name="value"></param>
        /// <param name="percentage"></param>
        /// <returns> A new <see cref="Models.ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems"/> instance for mocking. </returns>
        public static ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems(string metric = null, long? value = null, double? percentage = null)
        {
            return new ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems(metric, value, percentage);
        }

        /// <summary> Initializes a new instance of ProfileData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="skuName"> The pricing tier (defines Azure Front Door Standard or Premium or a CDN provider, feature list and rate) of the profile. </param>
        /// <param name="kind"> Kind of the profile. Used by portal to differentiate traditional CDN profile and new AFD profile. </param>
        /// <param name="resourceState"> Resource status of the profile. </param>
        /// <param name="provisioningState"> Provisioning status of the profile. </param>
        /// <param name="frontDoorId"> The Id of the frontdoor. </param>
        /// <param name="originResponseTimeoutSeconds"> Send and receive timeout on forwarding request to the origin. When timeout is reached, the request fails and returns. </param>
        /// <returns> A new <see cref="Cdn.ProfileData"/> instance for mocking. </returns>
        public static ProfileData ProfileData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CdnSkuName? skuName = null, string kind = null, ProfileResourceState? resourceState = null, ProfileProvisioningState? provisioningState = null, Guid? frontDoorId = null, int? originResponseTimeoutSeconds = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProfileData(id, name, resourceType, systemData, tags, location, skuName != null ? new CdnSku(skuName) : null, kind, resourceState, provisioningState, frontDoorId, originResponseTimeoutSeconds);
        }

        /// <summary> Initializes a new instance of CdnSku. </summary>
        /// <param name="name"> Name of the pricing tier. </param>
        /// <returns> A new <see cref="Models.CdnSku"/> instance for mocking. </returns>
        public static CdnSku CdnSku(CdnSkuName? name = null)
        {
            return new CdnSku(name);
        }

        /// <summary> Initializes a new instance of SsoUri. </summary>
        /// <param name="availableSsoUri"> The URI used to login to the supplemental portal. </param>
        /// <returns> A new <see cref="Models.SsoUri"/> instance for mocking. </returns>
        public static SsoUri SsoUri(Uri availableSsoUri = null)
        {
            return new SsoUri(availableSsoUri);
        }

        /// <summary> Initializes a new instance of SupportedOptimizationTypesListResult. </summary>
        /// <param name="supportedOptimizationTypes"> Supported optimization types for a profile. </param>
        /// <returns> A new <see cref="Models.SupportedOptimizationTypesListResult"/> instance for mocking. </returns>
        public static SupportedOptimizationTypesListResult SupportedOptimizationTypesListResult(IEnumerable<OptimizationType> supportedOptimizationTypes = null)
        {
            supportedOptimizationTypes ??= new List<OptimizationType>();

            return new SupportedOptimizationTypesListResult(supportedOptimizationTypes?.ToList());
        }

        /// <summary> Initializes a new instance of CdnUsage. </summary>
        /// <param name="resourceType"> Resource type for which the usage is provided. </param>
        /// <param name="unit"> Unit of the usage. e.g. count. </param>
        /// <param name="currentValue"> Actual value of usage on the specified resource type. </param>
        /// <param name="limit"> Quota of the specified resource type. </param>
        /// <returns> A new <see cref="Models.CdnUsage"/> instance for mocking. </returns>
        public static CdnUsage CdnUsage(string resourceType = null, CdnUsageUnit? unit = null, int? currentValue = null, int? limit = null)
        {
            return new CdnUsage(resourceType, unit, currentValue, limit);
        }

        /// <summary> Initializes a new instance of CdnEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="originPath"> A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath. </param>
        /// <param name="contentTypesToCompress"> List of content types on which compression applies. The value should be a valid MIME type. </param>
        /// <param name="originHostHeader"> The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. </param>
        /// <param name="isCompressionEnabled"> Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&apos;t be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB. </param>
        /// <param name="isHttpAllowed"> Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed. </param>
        /// <param name="isHttpsAllowed"> Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed. </param>
        /// <param name="queryStringCachingBehavior"> Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL. </param>
        /// <param name="optimizationType"> Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization. </param>
        /// <param name="probePath"> Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin. </param>
        /// <param name="geoFilters"> List of rules defining the user&apos;s geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/. </param>
        /// <param name="defaultOriginGroupId"> A reference to the origin group. </param>
        /// <param name="uriSigningKeys"> List of keys used to validate the signed URL hashes. </param>
        /// <param name="deliveryPolicy"> A policy that specifies the delivery rules to be used for an endpoint. </param>
        /// <param name="webApplicationFirewallPolicyLinkId"> Defines the Web Application Firewall policy for the endpoint (if applicable). </param>
        /// <param name="hostName"> The host name of the endpoint structured as {endpointName}.{DNSZone}, e.g. contoso.azureedge.net. </param>
        /// <param name="origins"> The source of the content being delivered via CDN. </param>
        /// <param name="originGroups"> The origin groups comprising of origins that are used for load balancing the traffic based on availability. </param>
        /// <param name="customDomains"> The custom domains under the endpoint. </param>
        /// <param name="resourceState"> Resource status of the endpoint. </param>
        /// <param name="provisioningState"> Provisioning status of the endpoint. </param>
        /// <returns> A new <see cref="Cdn.CdnEndpointData"/> instance for mocking. </returns>
        public static CdnEndpointData CdnEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string originPath = null, IEnumerable<string> contentTypesToCompress = null, string originHostHeader = null, bool? isCompressionEnabled = null, bool? isHttpAllowed = null, bool? isHttpsAllowed = null, QueryStringCachingBehavior? queryStringCachingBehavior = null, OptimizationType? optimizationType = null, string probePath = null, IEnumerable<GeoFilter> geoFilters = null, ResourceIdentifier defaultOriginGroupId = null, IEnumerable<UriSigningKey> uriSigningKeys = null, EndpointDeliveryPolicy deliveryPolicy = null, ResourceIdentifier webApplicationFirewallPolicyLinkId = null, string hostName = null, IEnumerable<DeepCreatedOrigin> origins = null, IEnumerable<DeepCreatedOriginGroup> originGroups = null, IEnumerable<CdnCustomDomainData> customDomains = null, EndpointResourceState? resourceState = null, CdnEndpointProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            contentTypesToCompress ??= new List<string>();
            geoFilters ??= new List<GeoFilter>();
            uriSigningKeys ??= new List<UriSigningKey>();
            origins ??= new List<DeepCreatedOrigin>();
            originGroups ??= new List<DeepCreatedOriginGroup>();
            customDomains ??= new List<CdnCustomDomainData>();

            return new CdnEndpointData(id, name, resourceType, systemData, tags, location, originPath, contentTypesToCompress?.ToList(), originHostHeader, isCompressionEnabled, isHttpAllowed, isHttpsAllowed, queryStringCachingBehavior, optimizationType, probePath, geoFilters?.ToList(), defaultOriginGroupId != null ? new EndpointPropertiesUpdateParametersDefaultOriginGroup(defaultOriginGroupId) : null, uriSigningKeys?.ToList(), deliveryPolicy, webApplicationFirewallPolicyLinkId != null ? new EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink(webApplicationFirewallPolicyLinkId) : null, hostName, origins?.ToList(), originGroups?.ToList(), customDomains?.ToList(), resourceState, provisioningState);
        }

        /// <summary> Initializes a new instance of DeepCreatedOrigin. </summary>
        /// <param name="name"> Origin name which must be unique within the endpoint. </param>
        /// <param name="hostName"> The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint. </param>
        /// <param name="httpPort"> The value of the HTTP port. Must be between 1 and 65535. </param>
        /// <param name="httpsPort"> The value of the HTTPS port. Must be between 1 and 65535. </param>
        /// <param name="originHostHeader"> The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. </param>
        /// <param name="priority"> Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5. </param>
        /// <param name="weight"> Weight of the origin in given origin group for load balancing. Must be between 1 and 1000. </param>
        /// <param name="enabled"> Origin is enabled for load balancing or not. By default, origin is always enabled. </param>
        /// <param name="privateLinkAlias"> The Alias of the Private Link resource. Populating this optional field indicates that this origin is &apos;Private&apos;. </param>
        /// <param name="privateLinkResourceId"> The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &apos;Private&apos;. </param>
        /// <param name="privateLinkLocation"> The location of the Private Link resource. Required only if &apos;privateLinkResourceId&apos; is populated. </param>
        /// <param name="privateLinkApprovalMessage"> A custom message to be included in the approval request to connect to the Private Link. </param>
        /// <param name="privateEndpointStatus"> The approval status for the connection to the Private Link. </param>
        /// <returns> A new <see cref="Models.DeepCreatedOrigin"/> instance for mocking. </returns>
        public static DeepCreatedOrigin DeepCreatedOrigin(string name = null, string hostName = null, int? httpPort = null, int? httpsPort = null, string originHostHeader = null, int? priority = null, int? weight = null, bool? enabled = null, string privateLinkAlias = null, ResourceIdentifier privateLinkResourceId = null, string privateLinkLocation = null, string privateLinkApprovalMessage = null, PrivateEndpointStatus? privateEndpointStatus = null)
        {
            return new DeepCreatedOrigin(name, hostName, httpPort, httpsPort, originHostHeader, priority, weight, enabled, privateLinkAlias, privateLinkResourceId, privateLinkLocation, privateLinkApprovalMessage, privateEndpointStatus);
        }

        /// <summary> Initializes a new instance of DeepCreatedOriginGroup. </summary>
        /// <param name="name"> Origin group name which must be unique within the endpoint. </param>
        /// <param name="healthProbeSettings"> Health probe settings to the origin that is used to determine the health of the origin. </param>
        /// <param name="origins"> The source of the content being delivered via CDN within given origin group. </param>
        /// <param name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes"> Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported. </param>
        /// <param name="responseBasedOriginErrorDetectionSettings"> The JSON object that contains the properties to determine origin health using real requests/responses.This property is currently not supported. </param>
        /// <returns> A new <see cref="Models.DeepCreatedOriginGroup"/> instance for mocking. </returns>
        public static DeepCreatedOriginGroup DeepCreatedOriginGroup(string name = null, HealthProbeSettings healthProbeSettings = null, IEnumerable<WritableSubResource> origins = null, int? trafficRestorationTimeToHealedOrNewEndpointsInMinutes = null, ResponseBasedOriginErrorDetectionSettings responseBasedOriginErrorDetectionSettings = null)
        {
            origins ??= new List<WritableSubResource>();

            return new DeepCreatedOriginGroup(name, healthProbeSettings, origins?.ToList(), trafficRestorationTimeToHealedOrNewEndpointsInMinutes, responseBasedOriginErrorDetectionSettings);
        }

        /// <summary> Initializes a new instance of ResponseBasedOriginErrorDetectionSettings. </summary>
        /// <param name="responseBasedDetectedErrorType"> Type of response errors for real user requests for which origin will be deemed unhealthy. </param>
        /// <param name="responseBasedFailoverThresholdPercentage"> The percentage of failed requests in the sample where failover should trigger. </param>
        /// <param name="httpErrorRanges"> The list of Http status code ranges that are considered as server errors for origin and it is marked as unhealthy. </param>
        /// <returns> A new <see cref="Models.ResponseBasedOriginErrorDetectionSettings"/> instance for mocking. </returns>
        public static ResponseBasedOriginErrorDetectionSettings ResponseBasedOriginErrorDetectionSettings(ResponseBasedDetectedErrorType? responseBasedDetectedErrorType = null, int? responseBasedFailoverThresholdPercentage = null, IEnumerable<HttpErrorRange> httpErrorRanges = null)
        {
            httpErrorRanges ??= new List<HttpErrorRange>();

            return new ResponseBasedOriginErrorDetectionSettings(responseBasedDetectedErrorType, responseBasedFailoverThresholdPercentage, httpErrorRanges?.ToList());
        }

        /// <summary> Initializes a new instance of HttpErrorRange. </summary>
        /// <param name="begin"> The inclusive start of the http status code range. </param>
        /// <param name="end"> The inclusive end of the http status code range. </param>
        /// <returns> A new <see cref="Models.HttpErrorRange"/> instance for mocking. </returns>
        public static HttpErrorRange HttpErrorRange(int? begin = null, int? end = null)
        {
            return new HttpErrorRange(begin, end);
        }

        /// <summary> Initializes a new instance of CdnCustomDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="hostName"> The host name of the custom domain. Must be a domain name. </param>
        /// <param name="resourceState"> Resource status of the custom domain. </param>
        /// <param name="customHttpsProvisioningState"> Provisioning status of the custom domain. </param>
        /// <param name="customHttpsAvailabilityState"> Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. </param>
        /// <param name="customDomainHttpsContent">
        /// Certificate parameters for securing custom HTTPS
        /// Please note <see cref="CustomDomainHttpsContent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="UserManagedHttpsContent"/> and <see cref="CdnManagedHttpsContent"/>.
        /// </param>
        /// <param name="validationData"> Special validation or data may be required when delivering CDN to some regions due to local compliance reasons. E.g. ICP license number of a custom domain is required to deliver content in China. </param>
        /// <param name="provisioningState"> Provisioning status of Custom Https of the custom domain. </param>
        /// <returns> A new <see cref="Cdn.CdnCustomDomainData"/> instance for mocking. </returns>
        public static CdnCustomDomainData CdnCustomDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string hostName = null, CustomDomainResourceState? resourceState = null, CustomHttpsProvisioningState? customHttpsProvisioningState = null, CustomHttpsAvailabilityState? customHttpsAvailabilityState = null, CustomDomainHttpsContent customDomainHttpsContent = null, string validationData = null, CustomHttpsProvisioningState? provisioningState = null)
        {
            return new CdnCustomDomainData(id, name, resourceType, systemData, hostName, resourceState, customHttpsProvisioningState, customHttpsAvailabilityState, customDomainHttpsContent, validationData, provisioningState);
        }

        /// <summary> Initializes a new instance of CustomDomainHttpsContent. </summary>
        /// <param name="certificateSource"> Defines the source of the SSL certificate. </param>
        /// <param name="protocolType"> Defines the TLS extension protocol that is used for secure delivery. </param>
        /// <param name="minimumTlsVersion"> TLS protocol version that will be used for Https. </param>
        /// <returns> A new <see cref="Models.CustomDomainHttpsContent"/> instance for mocking. </returns>
        public static CustomDomainHttpsContent CustomDomainHttpsContent(string certificateSource = "Unknown", SecureDeliveryProtocolType protocolType = default, CdnMinimumTlsVersion? minimumTlsVersion = null)
        {
            return new UnknownCustomDomainHttpsParameters(certificateSource, protocolType, minimumTlsVersion);
        }

        /// <summary> Initializes a new instance of EndpointDeliveryPolicy. </summary>
        /// <param name="description"> User-friendly description of the policy. </param>
        /// <param name="rules"> A list of the delivery rules. </param>
        /// <returns> A new <see cref="Models.EndpointDeliveryPolicy"/> instance for mocking. </returns>
        public static EndpointDeliveryPolicy EndpointDeliveryPolicy(string description = null, IEnumerable<DeliveryRule> rules = null)
        {
            rules ??= new List<DeliveryRule>();

            return new EndpointDeliveryPolicy(description, rules?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRule. </summary>
        /// <param name="name"> Name of the rule. </param>
        /// <param name="order"> The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied. </param>
        /// <param name="conditions">
        /// A list of conditions that must be matched for the actions to be executed
        /// Please note <see cref="DeliveryRuleCondition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeliveryRuleClientPortCondition"/>, <see cref="DeliveryRuleCookiesCondition"/>, <see cref="DeliveryRuleHostNameCondition"/>, <see cref="DeliveryRuleHttpVersionCondition"/>, <see cref="DeliveryRuleIsDeviceCondition"/>, <see cref="DeliveryRulePostArgsCondition"/>, <see cref="DeliveryRuleQueryStringCondition"/>, <see cref="DeliveryRuleRemoteAddressCondition"/>, <see cref="DeliveryRuleRequestBodyCondition"/>, <see cref="DeliveryRuleRequestHeaderCondition"/>, <see cref="DeliveryRuleRequestMethodCondition"/>, <see cref="DeliveryRuleRequestSchemeCondition"/>, <see cref="DeliveryRuleRequestUriCondition"/>, <see cref="DeliveryRuleServerPortCondition"/>, <see cref="DeliveryRuleSocketAddressCondition"/>, <see cref="DeliveryRuleSslProtocolCondition"/>, <see cref="DeliveryRuleUriFileExtensionCondition"/>, <see cref="DeliveryRuleUriFileNameCondition"/> and <see cref="DeliveryRuleUriPathCondition"/>.
        /// </param>
        /// <param name="actions">
        /// A list of actions that are executed when all the conditions of a rule are satisfied.
        /// Please note <see cref="DeliveryRuleAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeliveryRuleCacheExpirationAction"/>, <see cref="DeliveryRuleCacheKeyQueryStringAction"/>, <see cref="DeliveryRuleRequestHeaderAction"/>, <see cref="DeliveryRuleResponseHeaderAction"/>, <see cref="OriginGroupOverrideAction"/>, <see cref="DeliveryRuleRouteConfigurationOverrideAction"/>, <see cref="UriRedirectAction"/>, <see cref="UriRewriteAction"/> and <see cref="UriSigningAction"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeliveryRule"/> instance for mocking. </returns>
        public static DeliveryRule DeliveryRule(string name = null, int order = default, IEnumerable<DeliveryRuleCondition> conditions = null, IEnumerable<DeliveryRuleAction> actions = null)
        {
            conditions ??= new List<DeliveryRuleCondition>();
            actions ??= new List<DeliveryRuleAction>();

            return new DeliveryRule(name, order, conditions?.ToList(), actions?.ToList());
        }

        /// <summary> Initializes a new instance of CdnOriginData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="hostName"> The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint. </param>
        /// <param name="httpPort"> The value of the HTTP port. Must be between 1 and 65535. </param>
        /// <param name="httpsPort"> The value of the HTTPS port. Must be between 1 and 65535. </param>
        /// <param name="originHostHeader"> The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint. </param>
        /// <param name="priority"> Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5. </param>
        /// <param name="weight"> Weight of the origin in given origin group for load balancing. Must be between 1 and 1000. </param>
        /// <param name="enabled"> Origin is enabled for load balancing or not. </param>
        /// <param name="privateLinkAlias"> The Alias of the Private Link resource. Populating this optional field indicates that this origin is &apos;Private&apos;. </param>
        /// <param name="privateLinkResourceId"> The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &apos;Private&apos;. </param>
        /// <param name="privateLinkLocation"> The location of the Private Link resource. Required only if &apos;privateLinkResourceId&apos; is populated. </param>
        /// <param name="privateLinkApprovalMessage"> A custom message to be included in the approval request to connect to the Private Link. </param>
        /// <param name="resourceState"> Resource status of the origin. </param>
        /// <param name="provisioningState"> Provisioning status of the origin. </param>
        /// <param name="privateEndpointStatus"> The approval status for the connection to the Private Link. </param>
        /// <returns> A new <see cref="Cdn.CdnOriginData"/> instance for mocking. </returns>
        public static CdnOriginData CdnOriginData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string hostName = null, int? httpPort = null, int? httpsPort = null, string originHostHeader = null, int? priority = null, int? weight = null, bool? enabled = null, string privateLinkAlias = null, ResourceIdentifier privateLinkResourceId = null, string privateLinkLocation = null, string privateLinkApprovalMessage = null, OriginResourceState? resourceState = null, OriginProvisioningState? provisioningState = null, PrivateEndpointStatus? privateEndpointStatus = null)
        {
            return new CdnOriginData(id, name, resourceType, systemData, hostName, httpPort, httpsPort, originHostHeader, priority, weight, enabled, privateLinkAlias, privateLinkResourceId, privateLinkLocation, privateLinkApprovalMessage, resourceState, provisioningState, privateEndpointStatus);
        }

        /// <summary> Initializes a new instance of CdnOriginGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="healthProbeSettings"> Health probe settings to the origin that is used to determine the health of the origin. </param>
        /// <param name="origins"> The source of the content being delivered via CDN within given origin group. </param>
        /// <param name="trafficRestorationTimeToHealedOrNewEndpointsInMinutes"> Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not supported. </param>
        /// <param name="responseBasedOriginErrorDetectionSettings"> The JSON object that contains the properties to determine origin health using real requests/responses. This property is currently not supported. </param>
        /// <param name="resourceState"> Resource status of the origin group. </param>
        /// <param name="provisioningState"> Provisioning status of the origin group. </param>
        /// <returns> A new <see cref="Cdn.CdnOriginGroupData"/> instance for mocking. </returns>
        public static CdnOriginGroupData CdnOriginGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HealthProbeSettings healthProbeSettings = null, IEnumerable<WritableSubResource> origins = null, int? trafficRestorationTimeToHealedOrNewEndpointsInMinutes = null, ResponseBasedOriginErrorDetectionSettings responseBasedOriginErrorDetectionSettings = null, OriginGroupResourceState? resourceState = null, OriginGroupProvisioningState? provisioningState = null)
        {
            origins ??= new List<WritableSubResource>();

            return new CdnOriginGroupData(id, name, resourceType, systemData, healthProbeSettings, origins?.ToList(), trafficRestorationTimeToHealedOrNewEndpointsInMinutes, responseBasedOriginErrorDetectionSettings, resourceState, provisioningState);
        }

        /// <summary> Initializes a new instance of ValidateProbeResult. </summary>
        /// <param name="isValid"> Indicates whether the probe URL is accepted or not. </param>
        /// <param name="errorCode"> Specifies the error code when the probe url is not accepted. </param>
        /// <param name="message"> The detailed error message describing why the probe URL is not accepted. </param>
        /// <returns> A new <see cref="Models.ValidateProbeResult"/> instance for mocking. </returns>
        public static ValidateProbeResult ValidateProbeResult(bool? isValid = null, string errorCode = null, string message = null)
        {
            return new ValidateProbeResult(isValid, errorCode, message);
        }

        /// <summary> Initializes a new instance of EdgeNode. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ipAddressGroups"> List of ip address groups. </param>
        /// <returns> A new <see cref="Models.EdgeNode"/> instance for mocking. </returns>
        public static EdgeNode EdgeNode(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<IPAddressGroup> ipAddressGroups = null)
        {
            ipAddressGroups ??= new List<IPAddressGroup>();

            return new EdgeNode(id, name, resourceType, systemData, ipAddressGroups?.ToList());
        }

        /// <summary> Initializes a new instance of IPAddressGroup. </summary>
        /// <param name="deliveryRegion"> The delivery region of the ip address group. </param>
        /// <param name="ipv4Addresses"> The list of ip v4 addresses. </param>
        /// <param name="ipv6Addresses"> The list of ip v6 addresses. </param>
        /// <returns> A new <see cref="Models.IPAddressGroup"/> instance for mocking. </returns>
        public static IPAddressGroup IPAddressGroup(string deliveryRegion = null, IEnumerable<CidrIPAddress> ipv4Addresses = null, IEnumerable<CidrIPAddress> ipv6Addresses = null)
        {
            ipv4Addresses ??= new List<CidrIPAddress>();
            ipv6Addresses ??= new List<CidrIPAddress>();

            return new IPAddressGroup(deliveryRegion, ipv4Addresses?.ToList(), ipv6Addresses?.ToList());
        }

        /// <summary> Initializes a new instance of CidrIPAddress. </summary>
        /// <param name="baseIPAddress"> Ip address itself. </param>
        /// <param name="prefixLength"> The length of the prefix of the ip address. </param>
        /// <returns> A new <see cref="Models.CidrIPAddress"/> instance for mocking. </returns>
        public static CidrIPAddress CidrIPAddress(string baseIPAddress = null, int? prefixLength = null)
        {
            return new CidrIPAddress(baseIPAddress, prefixLength);
        }

        /// <summary> Initializes a new instance of CdnWebApplicationFirewallPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> Gets a unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="skuName"> The pricing tier (defines a CDN provider, feature list and rate) of the CdnWebApplicationFirewallPolicy. </param>
        /// <param name="policySettings"> Describes  policySettings for policy. </param>
        /// <param name="rateLimitRules"> Describes rate limit rules inside the policy. </param>
        /// <param name="customRules"> Describes custom rules inside the policy. </param>
        /// <param name="managedRuleSets"> Describes managed rules inside the policy. </param>
        /// <param name="endpointLinks"> Describes Azure CDN endpoints associated with this Web Application Firewall policy. </param>
        /// <param name="provisioningState"> Provisioning state of the WebApplicationFirewallPolicy. </param>
        /// <param name="resourceState"> Resource status of the policy. </param>
        /// <returns> A new <see cref="Cdn.CdnWebApplicationFirewallPolicyData"/> instance for mocking. </returns>
        public static CdnWebApplicationFirewallPolicyData CdnWebApplicationFirewallPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, CdnSkuName? skuName = null, WafPolicySettings policySettings = null, IEnumerable<RateLimitRule> rateLimitRules = null, IEnumerable<CustomRule> customRules = null, IEnumerable<WafPolicyManagedRuleSet> managedRuleSets = null, IEnumerable<SubResource> endpointLinks = null, WebApplicationFirewallPolicyProvisioningState? provisioningState = null, PolicyResourceState? resourceState = null)
        {
            tags ??= new Dictionary<string, string>();
            rateLimitRules ??= new List<RateLimitRule>();
            customRules ??= new List<CustomRule>();
            managedRuleSets ??= new List<WafPolicyManagedRuleSet>();
            endpointLinks ??= new List<SubResource>();

            return new CdnWebApplicationFirewallPolicyData(id, name, resourceType, systemData, tags, location, etag, skuName != null ? new CdnSku(skuName) : null, policySettings, rateLimitRules != null ? new RateLimitRuleList(rateLimitRules?.ToList()) : null, customRules != null ? new CustomRuleList(customRules?.ToList()) : null, managedRuleSets != null ? new ManagedRuleSetList(managedRuleSets?.ToList()) : null, endpointLinks?.ToList(), provisioningState, resourceState);
        }

        /// <summary> Initializes a new instance of WafPolicySettings. </summary>
        /// <param name="enabledState"> describes if the policy is in enabled state or disabled state. </param>
        /// <param name="mode"> Describes if it is in detection mode or prevention mode at policy level. </param>
        /// <param name="defaultRedirectUri"> If action type is redirect, this field represents the default redirect URL for the client. </param>
        /// <param name="defaultCustomBlockResponseStatusCode"> If the action type is block, this field defines the default customer overridable http response status code. </param>
        /// <param name="defaultCustomBlockResponseBody"> If the action type is block, customer can override the response body. The body must be specified in base64 encoding. </param>
        /// <returns> A new <see cref="Models.WafPolicySettings"/> instance for mocking. </returns>
        public static WafPolicySettings WafPolicySettings(PolicyEnabledState? enabledState = null, PolicyMode? mode = null, Uri defaultRedirectUri = null, PolicySettingsDefaultCustomBlockResponseStatusCode? defaultCustomBlockResponseStatusCode = null, BinaryData defaultCustomBlockResponseBody = null)
        {
            return new WafPolicySettings(enabledState, mode, defaultRedirectUri, defaultCustomBlockResponseStatusCode, defaultCustomBlockResponseBody);
        }

        /// <summary> Initializes a new instance of RateLimitRule. </summary>
        /// <param name="name"> Defines the name of the custom rule. </param>
        /// <param name="enabledState"> Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified. </param>
        /// <param name="priority"> Defines in what order this rule be evaluated in the overall list of custom rules. </param>
        /// <param name="matchConditions"> List of match conditions. </param>
        /// <param name="action"> Describes what action to be applied when rule matches. </param>
        /// <param name="rateLimitThreshold"> Defines rate limit threshold. </param>
        /// <param name="rateLimitDurationInMinutes"> Defines rate limit duration. Default is 1 minute. </param>
        /// <returns> A new <see cref="Models.RateLimitRule"/> instance for mocking. </returns>
        public static RateLimitRule RateLimitRule(string name = null, CustomRuleEnabledState? enabledState = null, int priority = default, IEnumerable<CustomRuleMatchCondition> matchConditions = null, OverrideActionType action = default, int rateLimitThreshold = default, int rateLimitDurationInMinutes = default)
        {
            matchConditions ??= new List<CustomRuleMatchCondition>();

            return new RateLimitRule(name, enabledState, priority, matchConditions?.ToList(), action, rateLimitThreshold, rateLimitDurationInMinutes);
        }

        /// <summary> Initializes a new instance of CustomRule. </summary>
        /// <param name="name"> Defines the name of the custom rule. </param>
        /// <param name="enabledState"> Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified. </param>
        /// <param name="priority"> Defines in what order this rule be evaluated in the overall list of custom rules. </param>
        /// <param name="matchConditions"> List of match conditions. </param>
        /// <param name="action"> Describes what action to be applied when rule matches. </param>
        /// <returns> A new <see cref="Models.CustomRule"/> instance for mocking. </returns>
        public static CustomRule CustomRule(string name = null, CustomRuleEnabledState? enabledState = null, int priority = default, IEnumerable<CustomRuleMatchCondition> matchConditions = null, OverrideActionType action = default)
        {
            matchConditions ??= new List<CustomRuleMatchCondition>();

            return new CustomRule(name, enabledState, priority, matchConditions?.ToList(), action);
        }

        /// <summary> Initializes a new instance of CustomRuleMatchCondition. </summary>
        /// <param name="matchVariable"> Match variable to compare against. </param>
        /// <param name="selector"> Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs. </param>
        /// <param name="matchOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if the result of this condition should be negated. </param>
        /// <param name="matchValue"> List of possible match values. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.CustomRuleMatchCondition"/> instance for mocking. </returns>
        public static CustomRuleMatchCondition CustomRuleMatchCondition(WafMatchVariable matchVariable = default, string selector = null, MatchOperator matchOperator = default, bool? negateCondition = null, IEnumerable<string> matchValue = null, IEnumerable<TransformType> transforms = null)
        {
            matchValue ??= new List<string>();
            transforms ??= new List<TransformType>();

            return new CustomRuleMatchCondition(matchVariable, selector, matchOperator, negateCondition, matchValue?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of WafPolicyManagedRuleSet. </summary>
        /// <param name="ruleSetType"> Defines the rule set type to use. </param>
        /// <param name="ruleSetVersion"> Defines the version of the rule set to use. </param>
        /// <param name="anomalyScore"> Verizon only : If the rule set supports anomaly detection mode, this describes the threshold for blocking requests. </param>
        /// <param name="ruleGroupOverrides"> Defines the rule overrides to apply to the rule set. </param>
        /// <returns> A new <see cref="Models.WafPolicyManagedRuleSet"/> instance for mocking. </returns>
        public static WafPolicyManagedRuleSet WafPolicyManagedRuleSet(string ruleSetType = null, string ruleSetVersion = null, int? anomalyScore = null, IEnumerable<ManagedRuleGroupOverrideSetting> ruleGroupOverrides = null)
        {
            ruleGroupOverrides ??= new List<ManagedRuleGroupOverrideSetting>();

            return new WafPolicyManagedRuleSet(ruleSetType, ruleSetVersion, anomalyScore, ruleGroupOverrides?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedRuleGroupOverrideSetting. </summary>
        /// <param name="ruleGroupName"> Describes the managed rule group within the rule set to override. </param>
        /// <param name="rules"> List of rules that will be disabled. If none specified, all rules in the group will be disabled. </param>
        /// <returns> A new <see cref="Models.ManagedRuleGroupOverrideSetting"/> instance for mocking. </returns>
        public static ManagedRuleGroupOverrideSetting ManagedRuleGroupOverrideSetting(string ruleGroupName = null, IEnumerable<ManagedRuleOverrideSetting> rules = null)
        {
            rules ??= new List<ManagedRuleOverrideSetting>();

            return new ManagedRuleGroupOverrideSetting(ruleGroupName, rules?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedRuleOverrideSetting. </summary>
        /// <param name="ruleId"> Identifier for the managed rule. </param>
        /// <param name="enabledState"> Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified. </param>
        /// <param name="action"> Describes the override action to be applied when rule matches. </param>
        /// <returns> A new <see cref="Models.ManagedRuleOverrideSetting"/> instance for mocking. </returns>
        public static ManagedRuleOverrideSetting ManagedRuleOverrideSetting(string ruleId = null, ManagedRuleSetupState? enabledState = null, OverrideActionType? action = null)
        {
            return new ManagedRuleOverrideSetting(ruleId, enabledState, action);
        }

        /// <summary> Initializes a new instance of ManagedRuleSetDefinition. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="skuName"> The pricing tier (defines a CDN provider, feature list and rate) of the CdnWebApplicationFirewallPolicy. </param>
        /// <param name="provisioningState"> Provisioning state of the managed rule set. </param>
        /// <param name="ruleSetType"> Type of the managed rule set. </param>
        /// <param name="ruleSetVersion"> Version of the managed rule set type. </param>
        /// <param name="ruleGroups"> Rule groups of the managed rule set. </param>
        /// <returns> A new <see cref="Models.ManagedRuleSetDefinition"/> instance for mocking. </returns>
        public static ManagedRuleSetDefinition ManagedRuleSetDefinition(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CdnSkuName? skuName = null, string provisioningState = null, string ruleSetType = null, string ruleSetVersion = null, IEnumerable<ManagedRuleGroupDefinition> ruleGroups = null)
        {
            ruleGroups ??= new List<ManagedRuleGroupDefinition>();

            return new ManagedRuleSetDefinition(id, name, resourceType, systemData, skuName != null ? new CdnSku(skuName) : null, provisioningState, ruleSetType, ruleSetVersion, ruleGroups?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedRuleGroupDefinition. </summary>
        /// <param name="ruleGroupName"> Name of the managed rule group. </param>
        /// <param name="description"> Description of the managed rule group. </param>
        /// <param name="rules"> List of rules within the managed rule group. </param>
        /// <returns> A new <see cref="Models.ManagedRuleGroupDefinition"/> instance for mocking. </returns>
        public static ManagedRuleGroupDefinition ManagedRuleGroupDefinition(string ruleGroupName = null, string description = null, IEnumerable<ManagedRuleDefinition> rules = null)
        {
            rules ??= new List<ManagedRuleDefinition>();

            return new ManagedRuleGroupDefinition(ruleGroupName, description, rules?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedRuleDefinition. </summary>
        /// <param name="ruleId"> Identifier for the managed rule. </param>
        /// <param name="description"> Describes the functionality of the managed rule. </param>
        /// <returns> A new <see cref="Models.ManagedRuleDefinition"/> instance for mocking. </returns>
        public static ManagedRuleDefinition ManagedRuleDefinition(string ruleId = null, string description = null)
        {
            return new ManagedRuleDefinition(ruleId, description);
        }

        /// <summary> Initializes a new instance of SecurityPolicyWebApplicationFirewall. </summary>
        /// <param name="wafPolicyId"> Resource ID. </param>
        /// <param name="associations"> Waf associations. </param>
        /// <returns> A new <see cref="Models.SecurityPolicyWebApplicationFirewall"/> instance for mocking. </returns>
        public static SecurityPolicyWebApplicationFirewall SecurityPolicyWebApplicationFirewall(ResourceIdentifier wafPolicyId = null, IEnumerable<SecurityPolicyWebApplicationFirewallAssociation> associations = null)
        {
            associations ??= new List<SecurityPolicyWebApplicationFirewallAssociation>();

            return new SecurityPolicyWebApplicationFirewall(SecurityPolicyType.WebApplicationFirewall, wafPolicyId != null ? ResourceManagerModelFactory.WritableSubResource(wafPolicyId) : null, associations?.ToList());
        }

        /// <summary> Initializes a new instance of SecurityPolicyWebApplicationFirewallAssociation. </summary>
        /// <param name="domains"> List of domains. </param>
        /// <param name="patternsToMatch"> List of paths. </param>
        /// <returns> A new <see cref="Models.SecurityPolicyWebApplicationFirewallAssociation"/> instance for mocking. </returns>
        public static SecurityPolicyWebApplicationFirewallAssociation SecurityPolicyWebApplicationFirewallAssociation(IEnumerable<FrontDoorActivatedResourceInfo> domains = null, IEnumerable<string> patternsToMatch = null)
        {
            domains ??= new List<FrontDoorActivatedResourceInfo>();
            patternsToMatch ??= new List<string>();

            return new SecurityPolicyWebApplicationFirewallAssociation(domains?.ToList(), patternsToMatch?.ToList());
        }

        /// <summary> Initializes a new instance of UriSigningKeyProperties. </summary>
        /// <param name="keyId"> Defines the customer defined key Id. This id will exist in the incoming request to indicate the key used to form the hash. </param>
        /// <param name="secretSourceId"> Resource reference to the Azure Key Vault secret. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{secretName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​. </param>
        /// <param name="secretVersion"> Version of the secret to be used. </param>
        /// <returns> A new <see cref="Models.UriSigningKeyProperties"/> instance for mocking. </returns>
        public static UriSigningKeyProperties UriSigningKeyProperties(string keyId = null, ResourceIdentifier secretSourceId = null, string secretVersion = null)
        {
            return new UriSigningKeyProperties(SecretType.UriSigningKey, keyId, secretSourceId != null ? ResourceManagerModelFactory.WritableSubResource(secretSourceId) : null, secretVersion);
        }

        /// <summary> Initializes a new instance of ManagedCertificateProperties. </summary>
        /// <param name="subject"> Subject name in the certificate. </param>
        /// <param name="expiresOn"> Certificate expiration date. </param>
        /// <returns> A new <see cref="Models.ManagedCertificateProperties"/> instance for mocking. </returns>
        public static ManagedCertificateProperties ManagedCertificateProperties(string subject = null, DateTimeOffset? expiresOn = null)
        {
            return new ManagedCertificateProperties(SecretType.ManagedCertificate, subject, expiresOn);
        }

        /// <summary> Initializes a new instance of CustomerCertificateProperties. </summary>
        /// <param name="secretSourceId"> Resource reference to the Azure Key Vault certificate. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​. </param>
        /// <param name="secretVersion"> Version of the secret to be used. </param>
        /// <param name="useLatestVersion"> Whether to use the latest version for the certificate. </param>
        /// <param name="subject"> Subject name in the certificate. </param>
        /// <param name="expiresOn"> Certificate expiration date. </param>
        /// <param name="certificateAuthority"> Certificate issuing authority. </param>
        /// <param name="subjectAlternativeNames"> The list of SANs. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <returns> A new <see cref="Models.CustomerCertificateProperties"/> instance for mocking. </returns>
        public static CustomerCertificateProperties CustomerCertificateProperties(ResourceIdentifier secretSourceId = null, string secretVersion = null, bool? useLatestVersion = null, string subject = null, DateTimeOffset? expiresOn = null, string certificateAuthority = null, IEnumerable<string> subjectAlternativeNames = null, string thumbprint = null)
        {
            subjectAlternativeNames ??= new List<string>();

            return new CustomerCertificateProperties(SecretType.CustomerCertificate, secretSourceId != null ? ResourceManagerModelFactory.WritableSubResource(secretSourceId) : null, secretVersion, useLatestVersion, subject, expiresOn, certificateAuthority, subjectAlternativeNames?.ToList(), thumbprint);
        }

        /// <summary> Initializes a new instance of AzureFirstPartyManagedCertificateProperties. </summary>
        /// <returns> A new <see cref="Models.AzureFirstPartyManagedCertificateProperties"/> instance for mocking. </returns>
        public static AzureFirstPartyManagedCertificateProperties AzureFirstPartyManagedCertificateProperties()
        {
            return new AzureFirstPartyManagedCertificateProperties(SecretType.AzureFirstPartyManagedCertificate);
        }

        /// <summary> Initializes a new instance of DeliveryRuleRemoteAddressCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRemoteAddressCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRemoteAddressCondition DeliveryRuleRemoteAddressCondition(RemoteAddressMatchCondition properties = null)
        {
            return new DeliveryRuleRemoteAddressCondition(MatchVariable.RemoteAddress, properties);
        }

        /// <summary> Initializes a new instance of RemoteAddressMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="remoteAddressOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.RemoteAddressMatchCondition"/> instance for mocking. </returns>
        public static RemoteAddressMatchCondition RemoteAddressMatchCondition(RemoteAddressMatchConditionType conditionType = default, RemoteAddressOperator remoteAddressOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new RemoteAddressMatchCondition(conditionType, remoteAddressOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestMethodCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestMethodCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRequestMethodCondition DeliveryRuleRequestMethodCondition(RequestMethodMatchCondition properties = null)
        {
            return new DeliveryRuleRequestMethodCondition(MatchVariable.RequestMethod, properties);
        }

        /// <summary> Initializes a new instance of RequestMethodMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="requestMethodOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <returns> A new <see cref="Models.RequestMethodMatchCondition"/> instance for mocking. </returns>
        public static RequestMethodMatchCondition RequestMethodMatchCondition(RequestMethodMatchConditionType conditionType = default, RequestMethodOperator requestMethodOperator = default, bool? negateCondition = null, IEnumerable<PreTransformCategory> transforms = null, IEnumerable<RequestMethodMatchConditionMatchValue> matchValues = null)
        {
            transforms ??= new List<PreTransformCategory>();
            matchValues ??= new List<RequestMethodMatchConditionMatchValue>();

            return new RequestMethodMatchCondition(conditionType, requestMethodOperator, negateCondition, transforms?.ToList(), matchValues?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleQueryStringCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleQueryStringCondition"/> instance for mocking. </returns>
        public static DeliveryRuleQueryStringCondition DeliveryRuleQueryStringCondition(QueryStringMatchCondition properties = null)
        {
            return new DeliveryRuleQueryStringCondition(MatchVariable.QueryString, properties);
        }

        /// <summary> Initializes a new instance of QueryStringMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="queryStringOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.QueryStringMatchCondition"/> instance for mocking. </returns>
        public static QueryStringMatchCondition QueryStringMatchCondition(QueryStringMatchConditionType conditionType = default, QueryStringOperator queryStringOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new QueryStringMatchCondition(conditionType, queryStringOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRulePostArgsCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRulePostArgsCondition"/> instance for mocking. </returns>
        public static DeliveryRulePostArgsCondition DeliveryRulePostArgsCondition(PostArgsMatchCondition properties = null)
        {
            return new DeliveryRulePostArgsCondition(MatchVariable.PostArgs, properties);
        }

        /// <summary> Initializes a new instance of PostArgsMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="selector"> Name of PostArg to be matched. </param>
        /// <param name="postArgsOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.PostArgsMatchCondition"/> instance for mocking. </returns>
        public static PostArgsMatchCondition PostArgsMatchCondition(PostArgsMatchConditionType conditionType = default, string selector = null, PostArgsOperator postArgsOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new PostArgsMatchCondition(conditionType, selector, postArgsOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestUriCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestUriCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRequestUriCondition DeliveryRuleRequestUriCondition(RequestUriMatchCondition properties = null)
        {
            return new DeliveryRuleRequestUriCondition(MatchVariable.RequestUri, properties);
        }

        /// <summary> Initializes a new instance of RequestUriMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="requestUriOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.RequestUriMatchCondition"/> instance for mocking. </returns>
        public static RequestUriMatchCondition RequestUriMatchCondition(RequestUriMatchConditionType conditionType = default, RequestUriOperator requestUriOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new RequestUriMatchCondition(conditionType, requestUriOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestHeaderCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestHeaderCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRequestHeaderCondition DeliveryRuleRequestHeaderCondition(RequestHeaderMatchCondition properties = null)
        {
            return new DeliveryRuleRequestHeaderCondition(MatchVariable.RequestHeader, properties);
        }

        /// <summary> Initializes a new instance of RequestHeaderMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="selector"> Name of Header to be matched. </param>
        /// <param name="requestHeaderOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.RequestHeaderMatchCondition"/> instance for mocking. </returns>
        public static RequestHeaderMatchCondition RequestHeaderMatchCondition(RequestHeaderMatchConditionType conditionType = default, string selector = null, RequestHeaderOperator requestHeaderOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new RequestHeaderMatchCondition(conditionType, selector, requestHeaderOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestBodyCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestBodyCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRequestBodyCondition DeliveryRuleRequestBodyCondition(RequestBodyMatchCondition properties = null)
        {
            return new DeliveryRuleRequestBodyCondition(MatchVariable.RequestBody, properties);
        }

        /// <summary> Initializes a new instance of RequestBodyMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="requestBodyOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.RequestBodyMatchCondition"/> instance for mocking. </returns>
        public static RequestBodyMatchCondition RequestBodyMatchCondition(RequestBodyMatchConditionType conditionType = default, RequestBodyOperator requestBodyOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new RequestBodyMatchCondition(conditionType, requestBodyOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestSchemeCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestSchemeCondition"/> instance for mocking. </returns>
        public static DeliveryRuleRequestSchemeCondition DeliveryRuleRequestSchemeCondition(RequestSchemeMatchCondition properties = null)
        {
            return new DeliveryRuleRequestSchemeCondition(MatchVariable.RequestScheme, properties);
        }

        /// <summary> Initializes a new instance of RequestSchemeMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="requestSchemeOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <returns> A new <see cref="Models.RequestSchemeMatchCondition"/> instance for mocking. </returns>
        public static RequestSchemeMatchCondition RequestSchemeMatchCondition(RequestSchemeMatchConditionType conditionType = default, RequestSchemeOperator requestSchemeOperator = default, bool? negateCondition = null, IEnumerable<PreTransformCategory> transforms = null, IEnumerable<RequestSchemeMatchConditionMatchValue> matchValues = null)
        {
            transforms ??= new List<PreTransformCategory>();
            matchValues ??= new List<RequestSchemeMatchConditionMatchValue>();

            return new RequestSchemeMatchCondition(conditionType, requestSchemeOperator, negateCondition, transforms?.ToList(), matchValues?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleUriPathCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleUriPathCondition"/> instance for mocking. </returns>
        public static DeliveryRuleUriPathCondition DeliveryRuleUriPathCondition(UriPathMatchCondition properties = null)
        {
            return new DeliveryRuleUriPathCondition(MatchVariable.UriPath, properties);
        }

        /// <summary> Initializes a new instance of UriPathMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="uriPathOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.UriPathMatchCondition"/> instance for mocking. </returns>
        public static UriPathMatchCondition UriPathMatchCondition(UriPathMatchConditionType conditionType = default, UriPathOperator uriPathOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new UriPathMatchCondition(conditionType, uriPathOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleUriFileExtensionCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleUriFileExtensionCondition"/> instance for mocking. </returns>
        public static DeliveryRuleUriFileExtensionCondition DeliveryRuleUriFileExtensionCondition(UriFileExtensionMatchCondition properties = null)
        {
            return new DeliveryRuleUriFileExtensionCondition(MatchVariable.UriFileExtension, properties);
        }

        /// <summary> Initializes a new instance of UriFileExtensionMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="uriFileExtensionOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.UriFileExtensionMatchCondition"/> instance for mocking. </returns>
        public static UriFileExtensionMatchCondition UriFileExtensionMatchCondition(UriFileExtensionMatchConditionType conditionType = default, UriFileExtensionOperator uriFileExtensionOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new UriFileExtensionMatchCondition(conditionType, uriFileExtensionOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleUriFileNameCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleUriFileNameCondition"/> instance for mocking. </returns>
        public static DeliveryRuleUriFileNameCondition DeliveryRuleUriFileNameCondition(UriFileNameMatchCondition properties = null)
        {
            return new DeliveryRuleUriFileNameCondition(MatchVariable.UriFileName, properties);
        }

        /// <summary> Initializes a new instance of UriFileNameMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="uriFileNameOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.UriFileNameMatchCondition"/> instance for mocking. </returns>
        public static UriFileNameMatchCondition UriFileNameMatchCondition(UriFileNameMatchConditionType conditionType = default, UriFileNameOperator uriFileNameOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new UriFileNameMatchCondition(conditionType, uriFileNameOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleHttpVersionCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleHttpVersionCondition"/> instance for mocking. </returns>
        public static DeliveryRuleHttpVersionCondition DeliveryRuleHttpVersionCondition(HttpVersionMatchCondition properties = null)
        {
            return new DeliveryRuleHttpVersionCondition(MatchVariable.HttpVersion, properties);
        }

        /// <summary> Initializes a new instance of HttpVersionMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="httpVersionOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.HttpVersionMatchCondition"/> instance for mocking. </returns>
        public static HttpVersionMatchCondition HttpVersionMatchCondition(HttpVersionMatchConditionType conditionType = default, HttpVersionOperator httpVersionOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new HttpVersionMatchCondition(conditionType, httpVersionOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleCookiesCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleCookiesCondition"/> instance for mocking. </returns>
        public static DeliveryRuleCookiesCondition DeliveryRuleCookiesCondition(CookiesMatchCondition properties = null)
        {
            return new DeliveryRuleCookiesCondition(MatchVariable.Cookies, properties);
        }

        /// <summary> Initializes a new instance of CookiesMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="selector"> Name of Cookies to be matched. </param>
        /// <param name="cookiesOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.CookiesMatchCondition"/> instance for mocking. </returns>
        public static CookiesMatchCondition CookiesMatchCondition(CookiesMatchConditionType conditionType = default, string selector = null, CookiesOperator cookiesOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new CookiesMatchCondition(conditionType, selector, cookiesOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleIsDeviceCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleIsDeviceCondition"/> instance for mocking. </returns>
        public static DeliveryRuleIsDeviceCondition DeliveryRuleIsDeviceCondition(IsDeviceMatchCondition properties = null)
        {
            return new DeliveryRuleIsDeviceCondition(MatchVariable.IsDevice, properties);
        }

        /// <summary> Initializes a new instance of IsDeviceMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="isDeviceOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.IsDeviceMatchCondition"/> instance for mocking. </returns>
        public static IsDeviceMatchCondition IsDeviceMatchCondition(IsDeviceMatchConditionType conditionType = default, IsDeviceOperator isDeviceOperator = default, bool? negateCondition = null, IEnumerable<IsDeviceMatchConditionMatchValue> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<IsDeviceMatchConditionMatchValue>();
            transforms ??= new List<PreTransformCategory>();

            return new IsDeviceMatchCondition(conditionType, isDeviceOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleSocketAddressCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleSocketAddressCondition"/> instance for mocking. </returns>
        public static DeliveryRuleSocketAddressCondition DeliveryRuleSocketAddressCondition(SocketAddressMatchCondition properties = null)
        {
            return new DeliveryRuleSocketAddressCondition(MatchVariable.SocketAddr, properties);
        }

        /// <summary> Initializes a new instance of SocketAddressMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="socketAddressOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.SocketAddressMatchCondition"/> instance for mocking. </returns>
        public static SocketAddressMatchCondition SocketAddressMatchCondition(SocketAddressMatchConditionType conditionType = default, SocketAddressOperator socketAddressOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new SocketAddressMatchCondition(conditionType, socketAddressOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleClientPortCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleClientPortCondition"/> instance for mocking. </returns>
        public static DeliveryRuleClientPortCondition DeliveryRuleClientPortCondition(ClientPortMatchCondition properties = null)
        {
            return new DeliveryRuleClientPortCondition(MatchVariable.ClientPort, properties);
        }

        /// <summary> Initializes a new instance of ClientPortMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="clientPortOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.ClientPortMatchCondition"/> instance for mocking. </returns>
        public static ClientPortMatchCondition ClientPortMatchCondition(ClientPortMatchConditionType conditionType = default, ClientPortOperator clientPortOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new ClientPortMatchCondition(conditionType, clientPortOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleServerPortCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleServerPortCondition"/> instance for mocking. </returns>
        public static DeliveryRuleServerPortCondition DeliveryRuleServerPortCondition(ServerPortMatchCondition properties = null)
        {
            return new DeliveryRuleServerPortCondition(MatchVariable.ServerPort, properties);
        }

        /// <summary> Initializes a new instance of ServerPortMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="serverPortOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.ServerPortMatchCondition"/> instance for mocking. </returns>
        public static ServerPortMatchCondition ServerPortMatchCondition(ServerPortMatchConditionType conditionType = default, ServerPortOperator serverPortOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new ServerPortMatchCondition(conditionType, serverPortOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleHostNameCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleHostNameCondition"/> instance for mocking. </returns>
        public static DeliveryRuleHostNameCondition DeliveryRuleHostNameCondition(HostNameMatchCondition properties = null)
        {
            return new DeliveryRuleHostNameCondition(MatchVariable.HostName, properties);
        }

        /// <summary> Initializes a new instance of HostNameMatchCondition. </summary>
        /// <param name="conditionType"></param>
        /// <param name="hostNameOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.HostNameMatchCondition"/> instance for mocking. </returns>
        public static HostNameMatchCondition HostNameMatchCondition(HostNameMatchConditionType conditionType = default, HostNameOperator hostNameOperator = default, bool? negateCondition = null, IEnumerable<string> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<string>();
            transforms ??= new List<PreTransformCategory>();

            return new HostNameMatchCondition(conditionType, hostNameOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of DeliveryRuleSslProtocolCondition. </summary>
        /// <param name="properties"> Defines the parameters for the condition. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleSslProtocolCondition"/> instance for mocking. </returns>
        public static DeliveryRuleSslProtocolCondition DeliveryRuleSslProtocolCondition(DeliveryRuleSslProtocolMatchCondition properties = null)
        {
            return new DeliveryRuleSslProtocolCondition(MatchVariable.SslProtocol, properties);
        }

        /// <summary> Initializes a new instance of DeliveryRuleSslProtocolMatchCondition. </summary>
        /// <param name="sslProtocolMatchConditionType"></param>
        /// <param name="sslProtocolOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleSslProtocolMatchCondition"/> instance for mocking. </returns>
        public static DeliveryRuleSslProtocolMatchCondition DeliveryRuleSslProtocolMatchCondition(SslProtocolMatchConditionType sslProtocolMatchConditionType = default, SslProtocolOperator sslProtocolOperator = default, bool? negateCondition = null, IEnumerable<DeliveryRuleSslProtocol> matchValues = null, IEnumerable<PreTransformCategory> transforms = null)
        {
            matchValues ??= new List<DeliveryRuleSslProtocol>();
            transforms ??= new List<PreTransformCategory>();

            return new DeliveryRuleSslProtocolMatchCondition(sslProtocolMatchConditionType, sslProtocolOperator, negateCondition, matchValues?.ToList(), transforms?.ToList());
        }

        /// <summary> Initializes a new instance of UriRedirectAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.UriRedirectAction"/> instance for mocking. </returns>
        public static UriRedirectAction UriRedirectAction(UriRedirectActionProperties properties = null)
        {
            return new UriRedirectAction(DeliveryRuleActionType.UriRedirect, properties);
        }

        /// <summary> Initializes a new instance of UriRedirectActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="redirectType"> The redirect type the rule will use when redirecting traffic. </param>
        /// <param name="destinationProtocol"> Protocol to use for the redirect. The default value is MatchRequest. </param>
        /// <param name="customPath"> The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path. </param>
        /// <param name="customHostname"> Host to redirect. Leave empty to use the incoming host as the destination host. </param>
        /// <param name="customQueryString"> The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ? and &amp; will be added automatically so do not include them. </param>
        /// <param name="customFragment"> Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #. </param>
        /// <returns> A new <see cref="Models.UriRedirectActionProperties"/> instance for mocking. </returns>
        public static UriRedirectActionProperties UriRedirectActionProperties(UriRedirectActionType actionType = default, RedirectType redirectType = default, DestinationProtocol? destinationProtocol = null, string customPath = null, string customHostname = null, string customQueryString = null, string customFragment = null)
        {
            return new UriRedirectActionProperties(actionType, redirectType, destinationProtocol, customPath, customHostname, customQueryString, customFragment);
        }

        /// <summary> Initializes a new instance of UriSigningAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.UriSigningAction"/> instance for mocking. </returns>
        public static UriSigningAction UriSigningAction(UriSigningActionProperties properties = null)
        {
            return new UriSigningAction(DeliveryRuleActionType.UriSigning, properties);
        }

        /// <summary> Initializes a new instance of UriSigningActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="algorithm"> Algorithm to use for URL signing. </param>
        /// <param name="parameterNameOverride"> Defines which query string parameters in the url to be considered for expires, key id etc. </param>
        /// <returns> A new <see cref="Models.UriSigningActionProperties"/> instance for mocking. </returns>
        public static UriSigningActionProperties UriSigningActionProperties(UriSigningActionType actionType = default, UriSigningAlgorithm? algorithm = null, IEnumerable<UriSigningParamIdentifier> parameterNameOverride = null)
        {
            parameterNameOverride ??= new List<UriSigningParamIdentifier>();

            return new UriSigningActionProperties(actionType, algorithm, parameterNameOverride?.ToList());
        }

        /// <summary> Initializes a new instance of OriginGroupOverrideAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.OriginGroupOverrideAction"/> instance for mocking. </returns>
        public static OriginGroupOverrideAction OriginGroupOverrideAction(OriginGroupOverrideActionProperties properties = null)
        {
            return new OriginGroupOverrideAction(DeliveryRuleActionType.OriginGroupOverride, properties);
        }

        /// <summary> Initializes a new instance of UriRewriteAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.UriRewriteAction"/> instance for mocking. </returns>
        public static UriRewriteAction UriRewriteAction(UriRewriteActionProperties properties = null)
        {
            return new UriRewriteAction(DeliveryRuleActionType.UriRewrite, properties);
        }

        /// <summary> Initializes a new instance of UriRewriteActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="sourcePattern"> define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched. </param>
        /// <param name="destination"> Define the relative URL to which the above requests will be rewritten by. </param>
        /// <param name="preserveUnmatchedPath"> Whether to preserve unmatched path. Default value is true. </param>
        /// <returns> A new <see cref="Models.UriRewriteActionProperties"/> instance for mocking. </returns>
        public static UriRewriteActionProperties UriRewriteActionProperties(UriRewriteActionType actionType = default, string sourcePattern = null, string destination = null, bool? preserveUnmatchedPath = null)
        {
            return new UriRewriteActionProperties(actionType, sourcePattern, destination, preserveUnmatchedPath);
        }

        /// <summary> Initializes a new instance of DeliveryRuleRequestHeaderAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRequestHeaderAction"/> instance for mocking. </returns>
        public static DeliveryRuleRequestHeaderAction DeliveryRuleRequestHeaderAction(HeaderActionProperties properties = null)
        {
            return new DeliveryRuleRequestHeaderAction(DeliveryRuleActionType.ModifyRequestHeader, properties);
        }

        /// <summary> Initializes a new instance of HeaderActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="headerAction"> Action to perform. </param>
        /// <param name="headerName"> Name of the header to modify. </param>
        /// <param name="value"> Value for the specified action. </param>
        /// <returns> A new <see cref="Models.HeaderActionProperties"/> instance for mocking. </returns>
        public static HeaderActionProperties HeaderActionProperties(HeaderActionType actionType = default, HeaderAction headerAction = default, string headerName = null, string value = null)
        {
            return new HeaderActionProperties(actionType, headerAction, headerName, value);
        }

        /// <summary> Initializes a new instance of DeliveryRuleResponseHeaderAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleResponseHeaderAction"/> instance for mocking. </returns>
        public static DeliveryRuleResponseHeaderAction DeliveryRuleResponseHeaderAction(HeaderActionProperties properties = null)
        {
            return new DeliveryRuleResponseHeaderAction(DeliveryRuleActionType.ModifyResponseHeader, properties);
        }

        /// <summary> Initializes a new instance of DeliveryRuleCacheExpirationAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleCacheExpirationAction"/> instance for mocking. </returns>
        public static DeliveryRuleCacheExpirationAction DeliveryRuleCacheExpirationAction(CacheExpirationActionProperties properties = null)
        {
            return new DeliveryRuleCacheExpirationAction(DeliveryRuleActionType.CacheExpiration, properties);
        }

        /// <summary> Initializes a new instance of CacheExpirationActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="cacheBehavior"> Caching behavior for the requests. </param>
        /// <param name="cacheType"> The level at which the content needs to be cached. </param>
        /// <param name="cacheDuration"> The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss. </param>
        /// <returns> A new <see cref="Models.CacheExpirationActionProperties"/> instance for mocking. </returns>
        public static CacheExpirationActionProperties CacheExpirationActionProperties(CacheExpirationActionType actionType = default, CacheBehaviorSetting cacheBehavior = default, CdnCacheLevel cacheType = default, TimeSpan? cacheDuration = null)
        {
            return new CacheExpirationActionProperties(actionType, cacheBehavior, cacheType, cacheDuration);
        }

        /// <summary> Initializes a new instance of DeliveryRuleCacheKeyQueryStringAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleCacheKeyQueryStringAction"/> instance for mocking. </returns>
        public static DeliveryRuleCacheKeyQueryStringAction DeliveryRuleCacheKeyQueryStringAction(CacheKeyQueryStringActionProperties properties = null)
        {
            return new DeliveryRuleCacheKeyQueryStringAction(DeliveryRuleActionType.CacheKeyQueryString, properties);
        }

        /// <summary> Initializes a new instance of CacheKeyQueryStringActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="queryStringBehavior"> Caching behavior for the requests. </param>
        /// <param name="queryParameters"> query parameters to include or exclude (comma separated). </param>
        /// <returns> A new <see cref="Models.CacheKeyQueryStringActionProperties"/> instance for mocking. </returns>
        public static CacheKeyQueryStringActionProperties CacheKeyQueryStringActionProperties(CacheKeyQueryStringActionType actionType = default, QueryStringBehavior queryStringBehavior = default, string queryParameters = null)
        {
            return new CacheKeyQueryStringActionProperties(actionType, queryStringBehavior, queryParameters);
        }

        /// <summary> Initializes a new instance of DeliveryRuleRouteConfigurationOverrideAction. </summary>
        /// <param name="properties"> Defines the parameters for the action. </param>
        /// <returns> A new <see cref="Models.DeliveryRuleRouteConfigurationOverrideAction"/> instance for mocking. </returns>
        public static DeliveryRuleRouteConfigurationOverrideAction DeliveryRuleRouteConfigurationOverrideAction(RouteConfigurationOverrideActionProperties properties = null)
        {
            return new DeliveryRuleRouteConfigurationOverrideAction(DeliveryRuleActionType.RouteConfigurationOverride, properties);
        }

        /// <summary> Initializes a new instance of RouteConfigurationOverrideActionProperties. </summary>
        /// <param name="actionType"></param>
        /// <param name="originGroupOverride"> A reference to the origin group override configuration. Leave empty to use the default origin group on route. </param>
        /// <param name="cacheConfiguration"> The caching configuration associated with this rule. To disable caching, do not provide a cacheConfiguration object. </param>
        /// <returns> A new <see cref="Models.RouteConfigurationOverrideActionProperties"/> instance for mocking. </returns>
        public static RouteConfigurationOverrideActionProperties RouteConfigurationOverrideActionProperties(RouteConfigurationOverrideActionType actionType = default, OriginGroupOverride originGroupOverride = null, CacheConfiguration cacheConfiguration = null)
        {
            return new RouteConfigurationOverrideActionProperties(actionType, originGroupOverride, cacheConfiguration);
        }

        /// <summary> Initializes a new instance of OriginGroupOverride. </summary>
        /// <param name="originGroupId"> defines the OriginGroup that would override the DefaultOriginGroup on route. </param>
        /// <param name="forwardingProtocol"> Protocol this rule will use when forwarding traffic to backends. </param>
        /// <returns> A new <see cref="Models.OriginGroupOverride"/> instance for mocking. </returns>
        public static OriginGroupOverride OriginGroupOverride(ResourceIdentifier originGroupId = null, ForwardingProtocol? forwardingProtocol = null)
        {
            return new OriginGroupOverride(originGroupId != null ? ResourceManagerModelFactory.WritableSubResource(originGroupId) : null, forwardingProtocol);
        }

        /// <summary> Initializes a new instance of CacheConfiguration. </summary>
        /// <param name="queryStringCachingBehavior"> Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings. </param>
        /// <param name="queryParameters"> query parameters to include or exclude (comma separated). </param>
        /// <param name="isCompressionEnabled"> Indicates whether content compression is enabled. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&apos;t be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB. </param>
        /// <param name="cacheBehavior"> Caching behavior for the requests. </param>
        /// <param name="cacheDuration"> The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss. </param>
        /// <returns> A new <see cref="Models.CacheConfiguration"/> instance for mocking. </returns>
        public static CacheConfiguration CacheConfiguration(RuleQueryStringCachingBehavior? queryStringCachingBehavior = null, string queryParameters = null, RuleIsCompressionEnabled? isCompressionEnabled = null, RuleCacheBehavior? cacheBehavior = null, TimeSpan? cacheDuration = null)
        {
            return new CacheConfiguration(queryStringCachingBehavior, queryParameters, isCompressionEnabled, cacheBehavior, cacheDuration);
        }

        /// <summary> Initializes a new instance of CdnManagedHttpsContent. </summary>
        /// <param name="protocolType"> Defines the TLS extension protocol that is used for secure delivery. </param>
        /// <param name="minimumTlsVersion"> TLS protocol version that will be used for Https. </param>
        /// <param name="certificateSourceParameters"> Defines the certificate source parameters using CDN managed certificate for enabling SSL. </param>
        /// <returns> A new <see cref="Models.CdnManagedHttpsContent"/> instance for mocking. </returns>
        public static CdnManagedHttpsContent CdnManagedHttpsContent(SecureDeliveryProtocolType protocolType = default, CdnMinimumTlsVersion? minimumTlsVersion = null, CdnCertificateSource certificateSourceParameters = null)
        {
            return new CdnManagedHttpsContent(CertificateSource.Cdn, protocolType, minimumTlsVersion, certificateSourceParameters);
        }

        /// <summary> Initializes a new instance of UserManagedHttpsContent. </summary>
        /// <param name="protocolType"> Defines the TLS extension protocol that is used for secure delivery. </param>
        /// <param name="minimumTlsVersion"> TLS protocol version that will be used for Https. </param>
        /// <param name="certificateSourceParameters"> Defines the certificate source parameters using user&apos;s keyvault certificate for enabling SSL. </param>
        /// <returns> A new <see cref="Models.UserManagedHttpsContent"/> instance for mocking. </returns>
        public static UserManagedHttpsContent UserManagedHttpsContent(SecureDeliveryProtocolType protocolType = default, CdnMinimumTlsVersion? minimumTlsVersion = null, KeyVaultCertificateSource certificateSourceParameters = null)
        {
            return new UserManagedHttpsContent(CertificateSource.AzureKeyVault, protocolType, minimumTlsVersion, certificateSourceParameters);
        }

        /// <summary> Initializes a new instance of KeyVaultCertificateSource. </summary>
        /// <param name="sourceType"></param>
        /// <param name="subscriptionId"> Subscription Id of the user&apos;s Key Vault containing the SSL certificate. </param>
        /// <param name="resourceGroupName"> Resource group of the user&apos;s Key Vault containing the SSL certificate. </param>
        /// <param name="vaultName"> The name of the user&apos;s Key Vault containing the SSL certificate. </param>
        /// <param name="secretName"> The name of Key Vault Secret (representing the full certificate PFX) in Key Vault. </param>
        /// <param name="secretVersion"> The version(GUID) of Key Vault Secret in Key Vault. </param>
        /// <param name="updateRule"> Describes the action that shall be taken when the certificate is updated in Key Vault. </param>
        /// <param name="deleteRule"> Describes the action that shall be taken when the certificate is removed from Key Vault. </param>
        /// <returns> A new <see cref="Models.KeyVaultCertificateSource"/> instance for mocking. </returns>
        public static KeyVaultCertificateSource KeyVaultCertificateSource(KeyVaultCertificateSourceType sourceType = default, string subscriptionId = null, string resourceGroupName = null, string vaultName = null, string secretName = null, string secretVersion = null, CertificateUpdateAction updateRule = default, CertificateDeleteAction deleteRule = default)
        {
            return new KeyVaultCertificateSource(sourceType, subscriptionId, resourceGroupName, vaultName, secretName, secretVersion, updateRule, deleteRule);
        }
    }
}
