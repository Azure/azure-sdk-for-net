// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class IPAddressGroup : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DeliveryRegion))
            {
                writer.WritePropertyName("deliveryRegion"u8);
                writer.WriteStringValue(DeliveryRegion);
            }
            if (Optional.IsCollectionDefined(IPv4Addresses))
            {
                writer.WritePropertyName("ipv4Addresses"u8);
                writer.WriteStartArray();
                foreach (var item in IPv4Addresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IPv6Addresses))
            {
                writer.WritePropertyName("ipv6Addresses"u8);
                writer.WriteStartArray();
                foreach (var item in IPv6Addresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static IPAddressGroup DeserializeIPAddressGroup(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> deliveryRegion = default;
            Optional<IList<CidrIPAddress>> ipv4Addresses = default;
            Optional<IList<CidrIPAddress>> ipv6Addresses = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deliveryRegion"u8))
                {
                    deliveryRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv4Addresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CidrIPAddress> array = new List<CidrIPAddress>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CidrIPAddress.DeserializeCidrIPAddress(item));
                    }
                    ipv4Addresses = array;
                    continue;
                }
                if (property.NameEquals("ipv6Addresses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CidrIPAddress> array = new List<CidrIPAddress>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CidrIPAddress.DeserializeCidrIPAddress(item));
                    }
                    ipv6Addresses = array;
                    continue;
                }
            }
            return new IPAddressGroup(deliveryRegion.Value, Optional.ToList(ipv4Addresses), Optional.ToList(ipv6Addresses));
        }
    }
}
