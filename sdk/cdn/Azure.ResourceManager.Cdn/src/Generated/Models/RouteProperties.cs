// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The JSON object that contains the properties of the Routes to create.
    /// Serialized Name: RouteProperties
    /// </summary>
    public partial class RouteProperties : RouteUpdatePropertiesParameters
    {
        /// <summary> Initializes a new instance of <see cref="RouteProperties"/>. </summary>
        internal RouteProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RouteProperties"/>. </summary>
        /// <param name="endpointName">
        /// The name of the endpoint which holds the route.
        /// Serialized Name: RouteUpdatePropertiesParameters.endpointName
        /// </param>
        /// <param name="customDomains">
        /// Domains referenced by this endpoint.
        /// Serialized Name: RouteUpdatePropertiesParameters.customDomains
        /// </param>
        /// <param name="originGroup">
        /// A reference to the origin group.
        /// Serialized Name: RouteUpdatePropertiesParameters.originGroup
        /// </param>
        /// <param name="originPath">
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// Serialized Name: RouteUpdatePropertiesParameters.originPath
        /// </param>
        /// <param name="ruleSets">
        /// rule sets referenced by this endpoint.
        /// Serialized Name: RouteUpdatePropertiesParameters.ruleSets
        /// </param>
        /// <param name="supportedProtocols">
        /// List of supported protocols for this route.
        /// Serialized Name: RouteUpdatePropertiesParameters.supportedProtocols
        /// </param>
        /// <param name="patternsToMatch">
        /// The route patterns of the rule.
        /// Serialized Name: RouteUpdatePropertiesParameters.patternsToMatch
        /// </param>
        /// <param name="cacheConfiguration">
        /// The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object.
        /// Serialized Name: RouteUpdatePropertiesParameters.cacheConfiguration
        /// </param>
        /// <param name="forwardingProtocol">
        /// Protocol this rule will use when forwarding traffic to backends.
        /// Serialized Name: RouteUpdatePropertiesParameters.forwardingProtocol
        /// </param>
        /// <param name="linkToDefaultDomain">
        /// whether this route will be linked to the default endpoint domain.
        /// Serialized Name: RouteUpdatePropertiesParameters.linkToDefaultDomain
        /// </param>
        /// <param name="httpsRedirect">
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.
        /// Serialized Name: RouteUpdatePropertiesParameters.httpsRedirect
        /// </param>
        /// <param name="enabledState">
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// Serialized Name: RouteUpdatePropertiesParameters.enabledState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="provisioningState">
        /// Provisioning status
        /// Serialized Name: AFDStateProperties.provisioningState
        /// </param>
        /// <param name="deploymentStatus"> Serialized Name: AFDStateProperties.deploymentStatus. </param>
        internal RouteProperties(string endpointName, IReadOnlyList<FrontDoorActivatedResourceInfo> customDomains, WritableSubResource originGroup, string originPath, IReadOnlyList<WritableSubResource> ruleSets, IReadOnlyList<FrontDoorEndpointProtocol> supportedProtocols, IReadOnlyList<string> patternsToMatch, FrontDoorRouteCacheConfiguration cacheConfiguration, ForwardingProtocol? forwardingProtocol, LinkToDefaultDomain? linkToDefaultDomain, HttpsRedirect? httpsRedirect, EnabledState? enabledState, IDictionary<string, BinaryData> serializedAdditionalRawData, FrontDoorProvisioningState? provisioningState, FrontDoorDeploymentStatus? deploymentStatus) : base(endpointName, customDomains, originGroup, originPath, ruleSets, supportedProtocols, patternsToMatch, cacheConfiguration, forwardingProtocol, linkToDefaultDomain, httpsRedirect, enabledState, serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            DeploymentStatus = deploymentStatus;
        }

        /// <summary>
        /// Provisioning status
        /// Serialized Name: AFDStateProperties.provisioningState
        /// </summary>
        public FrontDoorProvisioningState? ProvisioningState { get; }
        /// <summary> Serialized Name: AFDStateProperties.deploymentStatus. </summary>
        public FrontDoorDeploymentStatus? DeploymentStatus { get; }
    }
}
