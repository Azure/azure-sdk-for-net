// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Define match conditions. </summary>
    public partial class CustomRuleMatchCondition
    {
        /// <summary> Initializes a new instance of <see cref="CustomRuleMatchCondition"/>. </summary>
        /// <param name="matchVariable"> Match variable to compare against. </param>
        /// <param name="matchOperator"> Describes operator to be matched. </param>
        /// <param name="matchValue"> List of possible match values. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="matchValue"/> is null. </exception>
        public CustomRuleMatchCondition(WafMatchVariable matchVariable, MatchOperator matchOperator, IEnumerable<string> matchValue)
        {
            Argument.AssertNotNull(matchValue, nameof(matchValue));

            MatchVariable = matchVariable;
            MatchOperator = matchOperator;
            MatchValue = matchValue.ToList();
            Transforms = new ChangeTrackingList<TransformType>();
        }

        /// <summary> Initializes a new instance of <see cref="CustomRuleMatchCondition"/>. </summary>
        /// <param name="matchVariable"> Match variable to compare against. </param>
        /// <param name="selector"> Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs. </param>
        /// <param name="matchOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if the result of this condition should be negated. </param>
        /// <param name="matchValue"> List of possible match values. </param>
        /// <param name="transforms"> List of transforms. </param>
        internal CustomRuleMatchCondition(WafMatchVariable matchVariable, string selector, MatchOperator matchOperator, bool? negateCondition, IList<string> matchValue, IList<TransformType> transforms)
        {
            MatchVariable = matchVariable;
            Selector = selector;
            MatchOperator = matchOperator;
            NegateCondition = negateCondition;
            MatchValue = matchValue;
            Transforms = transforms;
        }

        /// <summary> Match variable to compare against. </summary>
        public WafMatchVariable MatchVariable { get; set; }
        /// <summary> Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs. </summary>
        public string Selector { get; set; }
        /// <summary> Describes operator to be matched. </summary>
        public MatchOperator MatchOperator { get; set; }
        /// <summary> Describes if the result of this condition should be negated. </summary>
        public bool? NegateCondition { get; set; }
        /// <summary> List of possible match values. </summary>
        public IList<string> MatchValue { get; }
        /// <summary> List of transforms. </summary>
        public IList<TransformType> Transforms { get; }
    }
}
