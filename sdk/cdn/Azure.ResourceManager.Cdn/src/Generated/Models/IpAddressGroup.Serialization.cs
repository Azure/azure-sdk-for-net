// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class IpAddressGroup : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DeliveryRegion))
            {
                writer.WritePropertyName("deliveryRegion");
                writer.WriteStringValue(DeliveryRegion);
            }
            if (Optional.IsCollectionDefined(Ipv4Addresses))
            {
                writer.WritePropertyName("ipv4Addresses");
                writer.WriteStartArray();
                foreach (var item in Ipv4Addresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Ipv6Addresses))
            {
                writer.WritePropertyName("ipv6Addresses");
                writer.WriteStartArray();
                foreach (var item in Ipv6Addresses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static IpAddressGroup DeserializeIpAddressGroup(JsonElement element)
        {
            Optional<string> deliveryRegion = default;
            Optional<IList<CidrIpAddress>> ipv4Addresses = default;
            Optional<IList<CidrIpAddress>> ipv6Addresses = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deliveryRegion"))
                {
                    deliveryRegion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv4Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CidrIpAddress> array = new List<CidrIpAddress>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CidrIpAddress.DeserializeCidrIpAddress(item));
                    }
                    ipv4Addresses = array;
                    continue;
                }
                if (property.NameEquals("ipv6Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CidrIpAddress> array = new List<CidrIpAddress>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CidrIpAddress.DeserializeCidrIpAddress(item));
                    }
                    ipv6Addresses = array;
                    continue;
                }
            }
            return new IpAddressGroup(deliveryRegion.Value, Optional.ToList(ipv4Addresses), Optional.ToList(ipv6Addresses));
        }
    }
}
