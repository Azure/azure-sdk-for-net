// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Deployment status of preview stage.
    /// Serialized Name: DeploymentRolloutStatus
    /// </summary>
    public readonly partial struct DeploymentRolloutStatus : IEquatable<DeploymentRolloutStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeploymentRolloutStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeploymentRolloutStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string InProgressValue = "InProgress";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary>
        /// NotStarted
        /// Serialized Name: DeploymentRolloutStatus.NotStarted
        /// </summary>
        public static DeploymentRolloutStatus NotStarted { get; } = new DeploymentRolloutStatus(NotStartedValue);
        /// <summary>
        /// InProgress
        /// Serialized Name: DeploymentRolloutStatus.InProgress
        /// </summary>
        public static DeploymentRolloutStatus InProgress { get; } = new DeploymentRolloutStatus(InProgressValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: DeploymentRolloutStatus.Succeeded
        /// </summary>
        public static DeploymentRolloutStatus Succeeded { get; } = new DeploymentRolloutStatus(SucceededValue);
        /// <summary>
        /// Failed
        /// Serialized Name: DeploymentRolloutStatus.Failed
        /// </summary>
        public static DeploymentRolloutStatus Failed { get; } = new DeploymentRolloutStatus(FailedValue);
        /// <summary> Determines if two <see cref="DeploymentRolloutStatus"/> values are the same. </summary>
        public static bool operator ==(DeploymentRolloutStatus left, DeploymentRolloutStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeploymentRolloutStatus"/> values are not the same. </summary>
        public static bool operator !=(DeploymentRolloutStatus left, DeploymentRolloutStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DeploymentRolloutStatus"/>. </summary>
        public static implicit operator DeploymentRolloutStatus(string value) => new DeploymentRolloutStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeploymentRolloutStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeploymentRolloutStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
