// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The CertificateSourceParametersType.
    /// Serialized Name: CertificateSourceParametersType
    /// </summary>
    internal readonly partial struct CertificateSourceParametersType : IEquatable<CertificateSourceParametersType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CertificateSourceParametersType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CertificateSourceParametersType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CdnCertificateSourceParametersValue = "CdnCertificateSourceParameters";
        private const string KeyVaultCertificateSourceParametersValue = "KeyVaultCertificateSourceParameters";

        /// <summary>
        /// CdnCertificateSourceParameters
        /// Serialized Name: CertificateSourceParametersType.CdnCertificateSourceParameters
        /// </summary>
        public static CertificateSourceParametersType CdnCertificateSourceParameters { get; } = new CertificateSourceParametersType(CdnCertificateSourceParametersValue);
        /// <summary>
        /// KeyVaultCertificateSourceParameters
        /// Serialized Name: CertificateSourceParametersType.KeyVaultCertificateSourceParameters
        /// </summary>
        public static CertificateSourceParametersType KeyVaultCertificateSourceParameters { get; } = new CertificateSourceParametersType(KeyVaultCertificateSourceParametersValue);
        /// <summary> Determines if two <see cref="CertificateSourceParametersType"/> values are the same. </summary>
        public static bool operator ==(CertificateSourceParametersType left, CertificateSourceParametersType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CertificateSourceParametersType"/> values are not the same. </summary>
        public static bool operator !=(CertificateSourceParametersType left, CertificateSourceParametersType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CertificateSourceParametersType"/>. </summary>
        public static implicit operator CertificateSourceParametersType(string value) => new CertificateSourceParametersType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CertificateSourceParametersType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CertificateSourceParametersType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
