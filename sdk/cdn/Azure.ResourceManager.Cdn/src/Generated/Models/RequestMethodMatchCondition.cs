// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Defines the parameters for RequestMethod match conditions
    /// Serialized Name: RequestMethodMatchConditionParameters
    /// </summary>
    public partial class RequestMethodMatchCondition : DeliveryRuleConditionProperties
    {
        /// <summary> Initializes a new instance of <see cref="RequestMethodMatchCondition"/>. </summary>
        /// <param name="requestMethodOperator">
        /// Describes operator to be matched
        /// Serialized Name: RequestMethodMatchConditionParameters.operator
        /// </param>
        public RequestMethodMatchCondition(RequestMethodOperator requestMethodOperator)
        {
            RequestMethodOperator = requestMethodOperator;
            Transforms = new ChangeTrackingList<PreTransformCategory>();
            MatchValues = new ChangeTrackingList<RequestMethodMatchConditionMatchValue>();
            TypeName = DeliveryRuleConditionParametersType.DeliveryRuleRequestMethodConditionParameters;
        }

        /// <summary> Initializes a new instance of <see cref="RequestMethodMatchCondition"/>. </summary>
        /// <param name="typeName"> Serialized Name: DeliveryRuleConditionParameters.typeName. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="requestMethodOperator">
        /// Describes operator to be matched
        /// Serialized Name: RequestMethodMatchConditionParameters.operator
        /// </param>
        /// <param name="negateCondition">
        /// Describes if this is negate condition or not
        /// Serialized Name: RequestMethodMatchConditionParameters.negateCondition
        /// </param>
        /// <param name="transforms">
        /// List of transforms
        /// Serialized Name: RequestMethodMatchConditionParameters.transforms
        /// </param>
        /// <param name="matchValues">
        /// The match value for the condition of the delivery rule
        /// Serialized Name: RequestMethodMatchConditionParameters.matchValues
        /// </param>
        internal RequestMethodMatchCondition(DeliveryRuleConditionParametersType typeName, IDictionary<string, BinaryData> serializedAdditionalRawData, RequestMethodOperator requestMethodOperator, bool? negateCondition, IList<PreTransformCategory> transforms, IList<RequestMethodMatchConditionMatchValue> matchValues) : base(typeName, serializedAdditionalRawData)
        {
            RequestMethodOperator = requestMethodOperator;
            NegateCondition = negateCondition;
            Transforms = transforms;
            MatchValues = matchValues;
            TypeName = typeName;
        }

        /// <summary> Initializes a new instance of <see cref="RequestMethodMatchCondition"/> for deserialization. </summary>
        internal RequestMethodMatchCondition()
        {
        }

        /// <summary>
        /// Describes operator to be matched
        /// Serialized Name: RequestMethodMatchConditionParameters.operator
        /// </summary>
        public RequestMethodOperator RequestMethodOperator { get; set; }
        /// <summary>
        /// Describes if this is negate condition or not
        /// Serialized Name: RequestMethodMatchConditionParameters.negateCondition
        /// </summary>
        public bool? NegateCondition { get; set; }
        /// <summary>
        /// List of transforms
        /// Serialized Name: RequestMethodMatchConditionParameters.transforms
        /// </summary>
        public IList<PreTransformCategory> Transforms { get; }
        /// <summary>
        /// The match value for the condition of the delivery rule
        /// Serialized Name: RequestMethodMatchConditionParameters.matchValues
        /// </summary>
        public IList<RequestMethodMatchConditionMatchValue> MatchValues { get; }
    }
}
