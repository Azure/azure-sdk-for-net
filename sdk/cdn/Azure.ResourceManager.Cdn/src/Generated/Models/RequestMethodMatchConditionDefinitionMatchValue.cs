// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> The RequestMethodMatchConditionDefinitionMatchValue. </summary>
    public readonly partial struct RequestMethodMatchConditionDefinitionMatchValue : IEquatable<RequestMethodMatchConditionDefinitionMatchValue>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RequestMethodMatchConditionDefinitionMatchValue"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RequestMethodMatchConditionDefinitionMatchValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GetValue = "GET";
        private const string HeadValue = "HEAD";
        private const string PostValue = "POST";
        private const string PutValue = "PUT";
        private const string DeleteValue = "DELETE";
        private const string OptionsValue = "OPTIONS";
        private const string TraceValue = "TRACE";

        /// <summary> GET. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Get { get; } = new RequestMethodMatchConditionDefinitionMatchValue(GetValue);
        /// <summary> HEAD. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Head { get; } = new RequestMethodMatchConditionDefinitionMatchValue(HeadValue);
        /// <summary> POST. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Post { get; } = new RequestMethodMatchConditionDefinitionMatchValue(PostValue);
        /// <summary> PUT. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Put { get; } = new RequestMethodMatchConditionDefinitionMatchValue(PutValue);
        /// <summary> DELETE. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Delete { get; } = new RequestMethodMatchConditionDefinitionMatchValue(DeleteValue);
        /// <summary> OPTIONS. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Options { get; } = new RequestMethodMatchConditionDefinitionMatchValue(OptionsValue);
        /// <summary> TRACE. </summary>
        public static RequestMethodMatchConditionDefinitionMatchValue Trace { get; } = new RequestMethodMatchConditionDefinitionMatchValue(TraceValue);
        /// <summary> Determines if two <see cref="RequestMethodMatchConditionDefinitionMatchValue"/> values are the same. </summary>
        public static bool operator ==(RequestMethodMatchConditionDefinitionMatchValue left, RequestMethodMatchConditionDefinitionMatchValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RequestMethodMatchConditionDefinitionMatchValue"/> values are not the same. </summary>
        public static bool operator !=(RequestMethodMatchConditionDefinitionMatchValue left, RequestMethodMatchConditionDefinitionMatchValue right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RequestMethodMatchConditionDefinitionMatchValue"/>. </summary>
        public static implicit operator RequestMethodMatchConditionDefinitionMatchValue(string value) => new RequestMethodMatchConditionDefinitionMatchValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RequestMethodMatchConditionDefinitionMatchValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RequestMethodMatchConditionDefinitionMatchValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
