// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Caching behavior for the requests. </summary>
    public readonly partial struct CacheBehaviorSettings : IEquatable<CacheBehaviorSettings>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CacheBehaviorSettings"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CacheBehaviorSettings(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BypassCacheValue = "BypassCache";
        private const string OverrideValue = "Override";
        private const string SetIfMissingValue = "SetIfMissing";

        /// <summary> BypassCache. </summary>
        public static CacheBehaviorSettings BypassCache { get; } = new CacheBehaviorSettings(BypassCacheValue);
        /// <summary> Override. </summary>
        public static CacheBehaviorSettings Override { get; } = new CacheBehaviorSettings(OverrideValue);
        /// <summary> SetIfMissing. </summary>
        public static CacheBehaviorSettings SetIfMissing { get; } = new CacheBehaviorSettings(SetIfMissingValue);
        /// <summary> Determines if two <see cref="CacheBehaviorSettings"/> values are the same. </summary>
        public static bool operator ==(CacheBehaviorSettings left, CacheBehaviorSettings right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CacheBehaviorSettings"/> values are not the same. </summary>
        public static bool operator !=(CacheBehaviorSettings left, CacheBehaviorSettings right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CacheBehaviorSettings"/>. </summary>
        public static implicit operator CacheBehaviorSettings(string value) => new CacheBehaviorSettings(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CacheBehaviorSettings other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CacheBehaviorSettings other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
