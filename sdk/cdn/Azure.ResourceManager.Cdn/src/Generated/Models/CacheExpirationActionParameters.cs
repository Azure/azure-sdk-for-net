// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Defines the parameters for the cache expiration action. </summary>
    public partial class CacheExpirationActionParameters : DeliveryRuleActionParameters
    {
        /// <summary> Initializes a new instance of <see cref="CacheExpirationActionParameters"/>. </summary>
        /// <param name="cacheBehavior"> Caching behavior for the requests. </param>
        /// <param name="cacheType"> The level at which the content needs to be cached. </param>
        public CacheExpirationActionParameters(CacheBehaviorSetting cacheBehavior, CdnCacheLevel cacheType)
        {
            CacheBehavior = cacheBehavior;
            CacheType = cacheType;
            TypeName = DeliveryRuleActionParametersType.DeliveryRuleCacheExpirationActionParameters;
        }

        /// <summary> Initializes a new instance of <see cref="CacheExpirationActionParameters"/>. </summary>
        /// <param name="typeName"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="cacheBehavior"> Caching behavior for the requests. </param>
        /// <param name="cacheType"> The level at which the content needs to be cached. </param>
        /// <param name="cacheDurationWorkaround"> The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss. </param>
        internal CacheExpirationActionParameters(DeliveryRuleActionParametersType typeName, IDictionary<string, BinaryData> serializedAdditionalRawData, CacheBehaviorSetting cacheBehavior, CdnCacheLevel cacheType, TimeSpan? cacheDurationWorkaround) : base(typeName, serializedAdditionalRawData)
        {
            CacheBehavior = cacheBehavior;
            CacheType = cacheType;
            CacheDurationWorkaround = cacheDurationWorkaround;
            TypeName = typeName;
        }

        /// <summary> Initializes a new instance of <see cref="CacheExpirationActionParameters"/> for deserialization. </summary>
        internal CacheExpirationActionParameters()
        {
        }

        /// <summary> Caching behavior for the requests. </summary>
        public CacheBehaviorSetting CacheBehavior { get; set; }
        /// <summary> The level at which the content needs to be cached. </summary>
        public CdnCacheLevel CacheType { get; set; }
        /// <summary> The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss. </summary>
        public TimeSpan? CacheDurationWorkaround { get; set; }
    }
}
