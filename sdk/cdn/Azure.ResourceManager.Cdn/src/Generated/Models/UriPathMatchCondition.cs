// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Defines the parameters for UrlPath match conditions
    /// Serialized Name: UrlPathMatchConditionParameters
    /// </summary>
    public partial class UriPathMatchCondition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UriPathMatchCondition"/>. </summary>
        /// <param name="conditionType"> Serialized Name: UrlPathMatchConditionParameters.typeName. </param>
        /// <param name="uriPathOperator">
        /// Describes operator to be matched
        /// Serialized Name: UrlPathMatchConditionParameters.operator
        /// </param>
        public UriPathMatchCondition(UriPathMatchConditionType conditionType, UriPathOperator uriPathOperator)
        {
            ConditionType = conditionType;
            UriPathOperator = uriPathOperator;
            MatchValues = new ChangeTrackingList<string>();
            Transforms = new ChangeTrackingList<PreTransformCategory>();
        }

        /// <summary> Initializes a new instance of <see cref="UriPathMatchCondition"/>. </summary>
        /// <param name="conditionType"> Serialized Name: UrlPathMatchConditionParameters.typeName. </param>
        /// <param name="uriPathOperator">
        /// Describes operator to be matched
        /// Serialized Name: UrlPathMatchConditionParameters.operator
        /// </param>
        /// <param name="negateCondition">
        /// Describes if this is negate condition or not
        /// Serialized Name: UrlPathMatchConditionParameters.negateCondition
        /// </param>
        /// <param name="matchValues">
        /// The match value for the condition of the delivery rule
        /// Serialized Name: UrlPathMatchConditionParameters.matchValues
        /// </param>
        /// <param name="transforms">
        /// List of transforms
        /// Serialized Name: UrlPathMatchConditionParameters.transforms
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UriPathMatchCondition(UriPathMatchConditionType conditionType, UriPathOperator uriPathOperator, bool? negateCondition, IList<string> matchValues, IList<PreTransformCategory> transforms, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConditionType = conditionType;
            UriPathOperator = uriPathOperator;
            NegateCondition = negateCondition;
            MatchValues = matchValues;
            Transforms = transforms;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UriPathMatchCondition"/> for deserialization. </summary>
        internal UriPathMatchCondition()
        {
        }

        /// <summary> Serialized Name: UrlPathMatchConditionParameters.typeName. </summary>
        public UriPathMatchConditionType ConditionType { get; set; }
        /// <summary>
        /// Describes operator to be matched
        /// Serialized Name: UrlPathMatchConditionParameters.operator
        /// </summary>
        public UriPathOperator UriPathOperator { get; set; }
        /// <summary>
        /// Describes if this is negate condition or not
        /// Serialized Name: UrlPathMatchConditionParameters.negateCondition
        /// </summary>
        public bool? NegateCondition { get; set; }
        /// <summary>
        /// The match value for the condition of the delivery rule
        /// Serialized Name: UrlPathMatchConditionParameters.matchValues
        /// </summary>
        public IList<string> MatchValues { get; }
        /// <summary>
        /// List of transforms
        /// Serialized Name: UrlPathMatchConditionParameters.transforms
        /// </summary>
        public IList<PreTransformCategory> Transforms { get; }
    }
}
