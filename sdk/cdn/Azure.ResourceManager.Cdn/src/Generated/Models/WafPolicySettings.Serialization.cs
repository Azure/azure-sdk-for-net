// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class WafPolicySettings : IUtf8JsonSerializable, IModelJsonSerializable<WafPolicySettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<WafPolicySettings>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<WafPolicySettings>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WafPolicySettings>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(EnabledState))
            {
                writer.WritePropertyName("enabledState"u8);
                writer.WriteStringValue(EnabledState.Value.ToString());
            }
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode"u8);
                writer.WriteStringValue(Mode.Value.ToString());
            }
            if (Optional.IsDefined(DefaultRedirectUri))
            {
                writer.WritePropertyName("defaultRedirectUrl"u8);
                writer.WriteStringValue(DefaultRedirectUri.AbsoluteUri);
            }
            if (Optional.IsDefined(DefaultCustomBlockResponseStatusCode))
            {
                if (DefaultCustomBlockResponseStatusCode != null)
                {
                    writer.WritePropertyName("defaultCustomBlockResponseStatusCode"u8);
                    writer.WriteNumberValue(DefaultCustomBlockResponseStatusCode.Value.ToSerialInt32());
                }
                else
                {
                    writer.WriteNull("defaultCustomBlockResponseStatusCode");
                }
            }
            if (Optional.IsDefined(DefaultCustomBlockResponseBody))
            {
                if (DefaultCustomBlockResponseBody != null)
                {
                    writer.WritePropertyName("defaultCustomBlockResponseBody"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(DefaultCustomBlockResponseBody);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(DefaultCustomBlockResponseBody.ToString()).RootElement);
#endif
                }
                else
                {
                    writer.WriteNull("defaultCustomBlockResponseBody");
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static WafPolicySettings DeserializeWafPolicySettings(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<PolicyEnabledState> enabledState = default;
            Optional<PolicyMode> mode = default;
            Optional<Uri> defaultRedirectUri = default;
            Optional<PolicySettingsDefaultCustomBlockResponseStatusCode?> defaultCustomBlockResponseStatusCode = default;
            Optional<BinaryData> defaultCustomBlockResponseBody = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enabledState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledState = new PolicyEnabledState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new PolicyMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("defaultRedirectUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultRedirectUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("defaultCustomBlockResponseStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        defaultCustomBlockResponseStatusCode = null;
                        continue;
                    }
                    defaultCustomBlockResponseStatusCode = new PolicySettingsDefaultCustomBlockResponseStatusCode(property.Value.GetInt32());
                    continue;
                }
                if (property.NameEquals("defaultCustomBlockResponseBody"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        defaultCustomBlockResponseBody = null;
                        continue;
                    }
                    defaultCustomBlockResponseBody = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new WafPolicySettings(Optional.ToNullable(enabledState), Optional.ToNullable(mode), defaultRedirectUri.Value, Optional.ToNullable(defaultCustomBlockResponseStatusCode), defaultCustomBlockResponseBody.Value, serializedAdditionalRawData);
        }

        WafPolicySettings IModelJsonSerializable<WafPolicySettings>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WafPolicySettings>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeWafPolicySettings(doc.RootElement, options);
        }

        BinaryData IModelSerializable<WafPolicySettings>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WafPolicySettings>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        WafPolicySettings IModelSerializable<WafPolicySettings>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<WafPolicySettings>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeWafPolicySettings(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="WafPolicySettings"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="WafPolicySettings"/> to convert. </param>
        public static implicit operator RequestContent(WafPolicySettings model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="WafPolicySettings"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator WafPolicySettings(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeWafPolicySettings(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
