// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Defines the parameters for QueryString match conditions
    /// Serialized Name: QueryStringMatchConditionParameters
    /// </summary>
    public partial class QueryStringMatchCondition
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QueryStringMatchCondition"/>. </summary>
        /// <param name="conditionType"> Serialized Name: QueryStringMatchConditionParameters.typeName. </param>
        /// <param name="queryStringOperator">
        /// Describes operator to be matched
        /// Serialized Name: QueryStringMatchConditionParameters.operator
        /// </param>
        public QueryStringMatchCondition(QueryStringMatchConditionType conditionType, QueryStringOperator queryStringOperator)
        {
            ConditionType = conditionType;
            QueryStringOperator = queryStringOperator;
            MatchValues = new ChangeTrackingList<string>();
            Transforms = new ChangeTrackingList<PreTransformCategory>();
        }

        /// <summary> Initializes a new instance of <see cref="QueryStringMatchCondition"/>. </summary>
        /// <param name="conditionType"> Serialized Name: QueryStringMatchConditionParameters.typeName. </param>
        /// <param name="queryStringOperator">
        /// Describes operator to be matched
        /// Serialized Name: QueryStringMatchConditionParameters.operator
        /// </param>
        /// <param name="negateCondition">
        /// Describes if this is negate condition or not
        /// Serialized Name: QueryStringMatchConditionParameters.negateCondition
        /// </param>
        /// <param name="matchValues">
        /// The match value for the condition of the delivery rule
        /// Serialized Name: QueryStringMatchConditionParameters.matchValues
        /// </param>
        /// <param name="transforms">
        /// List of transforms
        /// Serialized Name: QueryStringMatchConditionParameters.transforms
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QueryStringMatchCondition(QueryStringMatchConditionType conditionType, QueryStringOperator queryStringOperator, bool? negateCondition, IList<string> matchValues, IList<PreTransformCategory> transforms, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ConditionType = conditionType;
            QueryStringOperator = queryStringOperator;
            NegateCondition = negateCondition;
            MatchValues = matchValues;
            Transforms = transforms;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="QueryStringMatchCondition"/> for deserialization. </summary>
        internal QueryStringMatchCondition()
        {
        }

        /// <summary> Serialized Name: QueryStringMatchConditionParameters.typeName. </summary>
        public QueryStringMatchConditionType ConditionType { get; set; }
        /// <summary>
        /// Describes operator to be matched
        /// Serialized Name: QueryStringMatchConditionParameters.operator
        /// </summary>
        public QueryStringOperator QueryStringOperator { get; set; }
        /// <summary>
        /// Describes if this is negate condition or not
        /// Serialized Name: QueryStringMatchConditionParameters.negateCondition
        /// </summary>
        public bool? NegateCondition { get; set; }
        /// <summary>
        /// The match value for the condition of the delivery rule
        /// Serialized Name: QueryStringMatchConditionParameters.matchValues
        /// </summary>
        public IList<string> MatchValues { get; }
        /// <summary>
        /// List of transforms
        /// Serialized Name: QueryStringMatchConditionParameters.transforms
        /// </summary>
        public IList<PreTransformCategory> Transforms { get; }
    }
}
