// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    [PersistableModelProxy(typeof(UnknownDeliveryRuleConditionParameters))]
    public partial class DeliveryRuleConditionParameters : IUtf8JsonSerializable, IJsonModel<DeliveryRuleConditionParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DeliveryRuleConditionParameters>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DeliveryRuleConditionParameters>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeliveryRuleConditionParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeliveryRuleConditionParameters)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("typeName"u8);
            writer.WriteStringValue(TypeName.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DeliveryRuleConditionParameters IJsonModel<DeliveryRuleConditionParameters>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeliveryRuleConditionParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeliveryRuleConditionParameters)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeliveryRuleConditionParameters(document.RootElement, options);
        }

        internal static DeliveryRuleConditionParameters DeserializeDeliveryRuleConditionParameters(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("typeName", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "DeliveryRuleClientPortConditionParameters": return ClientPortMatchConditionParameters.DeserializeClientPortMatchConditionParameters(element, options);
                    case "DeliveryRuleCookiesConditionParameters": return CookiesMatchConditionParameters.DeserializeCookiesMatchConditionParameters(element, options);
                    case "DeliveryRuleHostNameConditionParameters": return HostNameMatchConditionParameters.DeserializeHostNameMatchConditionParameters(element, options);
                    case "DeliveryRuleHttpVersionConditionParameters": return HttpVersionMatchConditionParameters.DeserializeHttpVersionMatchConditionParameters(element, options);
                    case "DeliveryRuleIsDeviceConditionParameters": return IsDeviceMatchConditionParameters.DeserializeIsDeviceMatchConditionParameters(element, options);
                    case "DeliveryRulePostArgsConditionParameters": return PostArgsMatchConditionParameters.DeserializePostArgsMatchConditionParameters(element, options);
                    case "DeliveryRuleQueryStringConditionParameters": return QueryStringMatchConditionParameters.DeserializeQueryStringMatchConditionParameters(element, options);
                    case "DeliveryRuleRemoteAddressConditionParameters": return RemoteAddressMatchConditionParameters.DeserializeRemoteAddressMatchConditionParameters(element, options);
                    case "DeliveryRuleRequestBodyConditionParameters": return RequestBodyMatchConditionParameters.DeserializeRequestBodyMatchConditionParameters(element, options);
                    case "DeliveryRuleRequestHeaderConditionParameters": return RequestHeaderMatchConditionParameters.DeserializeRequestHeaderMatchConditionParameters(element, options);
                    case "DeliveryRuleRequestMethodConditionParameters": return RequestMethodMatchConditionParameters.DeserializeRequestMethodMatchConditionParameters(element, options);
                    case "DeliveryRuleRequestSchemeConditionParameters": return RequestSchemeMatchConditionParameters.DeserializeRequestSchemeMatchConditionParameters(element, options);
                    case "DeliveryRuleRequestUriConditionParameters": return RequestUriMatchConditionParameters.DeserializeRequestUriMatchConditionParameters(element, options);
                    case "DeliveryRuleServerPortConditionParameters": return ServerPortMatchConditionParameters.DeserializeServerPortMatchConditionParameters(element, options);
                    case "DeliveryRuleSocketAddrConditionParameters": return SocketAddrMatchConditionParameters.DeserializeSocketAddrMatchConditionParameters(element, options);
                    case "DeliveryRuleSslProtocolConditionParameters": return SslProtocolMatchConditionParameters.DeserializeSslProtocolMatchConditionParameters(element, options);
                    case "DeliveryRuleUrlFileExtensionMatchConditionParameters": return UriFileExtensionMatchConditionParameters.DeserializeUriFileExtensionMatchConditionParameters(element, options);
                    case "DeliveryRuleUrlFilenameConditionParameters": return UriFileNameMatchConditionParameters.DeserializeUriFileNameMatchConditionParameters(element, options);
                    case "DeliveryRuleUrlPathMatchConditionParameters": return UriPathMatchConditionParameters.DeserializeUriPathMatchConditionParameters(element, options);
                }
            }
            return UnknownDeliveryRuleConditionParameters.DeserializeUnknownDeliveryRuleConditionParameters(element, options);
        }

        BinaryData IPersistableModel<DeliveryRuleConditionParameters>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeliveryRuleConditionParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DeliveryRuleConditionParameters)} does not support writing '{options.Format}' format.");
            }
        }

        DeliveryRuleConditionParameters IPersistableModel<DeliveryRuleConditionParameters>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeliveryRuleConditionParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDeliveryRuleConditionParameters(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeliveryRuleConditionParameters)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DeliveryRuleConditionParameters>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
