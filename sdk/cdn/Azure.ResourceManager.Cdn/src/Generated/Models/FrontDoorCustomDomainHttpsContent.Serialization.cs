// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class FrontDoorCustomDomainHttpsContent : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("certificateType"u8);
            writer.WriteStringValue(CertificateType.ToString());
            if (Optional.IsDefined(MinimumTlsVersion))
            {
                writer.WritePropertyName("minimumTlsVersion"u8);
                writer.WriteStringValue(MinimumTlsVersion.Value.ToSerialString());
            }
            if (Optional.IsDefined(Secret))
            {
                if (Secret != null)
                {
                    writer.WritePropertyName("secret"u8);
                    writer.WriteObjectValue(Secret);
                }
                else
                {
                    writer.WriteNull("secret");
                }
            }
            writer.WriteEndObject();
        }

        internal static FrontDoorCustomDomainHttpsContent DeserializeFrontDoorCustomDomainHttpsContent(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            FrontDoorCertificateType certificateType = default;
            Optional<FrontDoorMinimumTlsVersion> minimumTlsVersion = default;
            Optional<FrontDoorCustomDomainHttpsContentSecret> secret = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("certificateType"u8))
                {
                    certificateType = new FrontDoorCertificateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("minimumTlsVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumTlsVersion = property.Value.GetString().ToFrontDoorMinimumTlsVersion();
                    continue;
                }
                if (property.NameEquals("secret"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secret = null;
                        continue;
                    }
                    secret = FrontDoorCustomDomainHttpsContentSecret.DeserializeFrontDoorCustomDomainHttpsContentSecret(property.Value);
                    continue;
                }
            }
            return new FrontDoorCustomDomainHttpsContent(certificateType, Optional.ToNullable(minimumTlsVersion), secret.Value);
        }
    }
}
