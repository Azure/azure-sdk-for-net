// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class CacheExpirationActionParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(OdataType.ToString());
            writer.WritePropertyName("cacheBehavior");
            writer.WriteStringValue(CacheBehavior.ToString());
            writer.WritePropertyName("cacheType");
            writer.WriteStringValue(CacheType.ToString());
            if (Optional.IsDefined(CacheDuration))
            {
                if (CacheDuration != null)
                {
                    writer.WritePropertyName("cacheDuration");
                    writer.WriteStringValue(CacheDuration);
                }
                else
                {
                    writer.WriteNull("cacheDuration");
                }
            }
            writer.WriteEndObject();
        }

        internal static CacheExpirationActionParameters DeserializeCacheExpirationActionParameters(JsonElement element)
        {
            CacheExpirationActionParametersOdataType odataType = default;
            CacheBehavior cacheBehavior = default;
            CacheType cacheType = default;
            Optional<string> cacheDuration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("@odata.type"))
                {
                    odataType = new CacheExpirationActionParametersOdataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cacheBehavior"))
                {
                    cacheBehavior = new CacheBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cacheType"))
                {
                    cacheType = new CacheType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cacheDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cacheDuration = null;
                        continue;
                    }
                    cacheDuration = property.Value.GetString();
                    continue;
                }
            }
            return new CacheExpirationActionParameters(odataType, cacheBehavior, cacheType, cacheDuration.Value);
        }
    }
}
