// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The type of the authentication for the origin.
    /// Serialized Name: OriginAuthenticationType
    /// </summary>
    public readonly partial struct OriginAuthenticationType : IEquatable<OriginAuthenticationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OriginAuthenticationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OriginAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SystemAssignedIdentityValue = "SystemAssignedIdentity";
        private const string UserAssignedIdentityValue = "UserAssignedIdentity";

        /// <summary>
        /// SystemAssignedIdentity
        /// Serialized Name: OriginAuthenticationType.SystemAssignedIdentity
        /// </summary>
        public static OriginAuthenticationType SystemAssignedIdentity { get; } = new OriginAuthenticationType(SystemAssignedIdentityValue);
        /// <summary>
        /// UserAssignedIdentity
        /// Serialized Name: OriginAuthenticationType.UserAssignedIdentity
        /// </summary>
        public static OriginAuthenticationType UserAssignedIdentity { get; } = new OriginAuthenticationType(UserAssignedIdentityValue);
        /// <summary> Determines if two <see cref="OriginAuthenticationType"/> values are the same. </summary>
        public static bool operator ==(OriginAuthenticationType left, OriginAuthenticationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OriginAuthenticationType"/> values are not the same. </summary>
        public static bool operator !=(OriginAuthenticationType left, OriginAuthenticationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OriginAuthenticationType"/>. </summary>
        public static implicit operator OriginAuthenticationType(string value) => new OriginAuthenticationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OriginAuthenticationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OriginAuthenticationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
