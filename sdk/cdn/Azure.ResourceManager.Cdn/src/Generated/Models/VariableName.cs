// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Describes the supported variable for group by
    /// Serialized Name: VariableName
    /// </summary>
    public readonly partial struct VariableName : IEquatable<VariableName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VariableName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VariableName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SocketAddrValue = "SocketAddr";
        private const string GeoLocationValue = "GeoLocation";
        private const string NoneValue = "None";

        /// <summary>
        /// SocketAddr
        /// Serialized Name: VariableName.SocketAddr
        /// </summary>
        public static VariableName SocketAddr { get; } = new VariableName(SocketAddrValue);
        /// <summary>
        /// GeoLocation
        /// Serialized Name: VariableName.GeoLocation
        /// </summary>
        public static VariableName GeoLocation { get; } = new VariableName(GeoLocationValue);
        /// <summary>
        /// None
        /// Serialized Name: VariableName.None
        /// </summary>
        public static VariableName None { get; } = new VariableName(NoneValue);
        /// <summary> Determines if two <see cref="VariableName"/> values are the same. </summary>
        public static bool operator ==(VariableName left, VariableName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VariableName"/> values are not the same. </summary>
        public static bool operator !=(VariableName left, VariableName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VariableName"/>. </summary>
        public static implicit operator VariableName(string value) => new VariableName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VariableName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VariableName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
