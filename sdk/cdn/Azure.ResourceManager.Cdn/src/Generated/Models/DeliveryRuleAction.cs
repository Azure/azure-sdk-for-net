// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> The name of the action for the delivery rule. </summary>
    public readonly partial struct DeliveryRuleAction : IEquatable<DeliveryRuleAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeliveryRuleAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeliveryRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CacheExpirationValue = "CacheExpiration";
        private const string CacheKeyQueryStringValue = "CacheKeyQueryString";
        private const string ModifyRequestHeaderValue = "ModifyRequestHeader";
        private const string ModifyResponseHeaderValue = "ModifyResponseHeader";
        private const string UrlRedirectValue = "UrlRedirect";
        private const string UrlRewriteValue = "UrlRewrite";
        private const string UrlSigningValue = "UrlSigning";
        private const string OriginGroupOverrideValue = "OriginGroupOverride";

        /// <summary> CacheExpiration. </summary>
        public static DeliveryRuleAction CacheExpiration { get; } = new DeliveryRuleAction(CacheExpirationValue);
        /// <summary> CacheKeyQueryString. </summary>
        public static DeliveryRuleAction CacheKeyQueryString { get; } = new DeliveryRuleAction(CacheKeyQueryStringValue);
        /// <summary> ModifyRequestHeader. </summary>
        public static DeliveryRuleAction ModifyRequestHeader { get; } = new DeliveryRuleAction(ModifyRequestHeaderValue);
        /// <summary> ModifyResponseHeader. </summary>
        public static DeliveryRuleAction ModifyResponseHeader { get; } = new DeliveryRuleAction(ModifyResponseHeaderValue);
        /// <summary> UrlRedirect. </summary>
        public static DeliveryRuleAction UrlRedirect { get; } = new DeliveryRuleAction(UrlRedirectValue);
        /// <summary> UrlRewrite. </summary>
        public static DeliveryRuleAction UrlRewrite { get; } = new DeliveryRuleAction(UrlRewriteValue);
        /// <summary> UrlSigning. </summary>
        public static DeliveryRuleAction UrlSigning { get; } = new DeliveryRuleAction(UrlSigningValue);
        /// <summary> OriginGroupOverride. </summary>
        public static DeliveryRuleAction OriginGroupOverride { get; } = new DeliveryRuleAction(OriginGroupOverrideValue);
        /// <summary> Determines if two <see cref="DeliveryRuleAction"/> values are the same. </summary>
        public static bool operator ==(DeliveryRuleAction left, DeliveryRuleAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeliveryRuleAction"/> values are not the same. </summary>
        public static bool operator !=(DeliveryRuleAction left, DeliveryRuleAction right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeliveryRuleAction"/>. </summary>
        public static implicit operator DeliveryRuleAction(string value) => new DeliveryRuleAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeliveryRuleAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeliveryRuleAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
