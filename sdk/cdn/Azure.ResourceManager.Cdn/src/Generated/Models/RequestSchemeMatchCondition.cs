// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// Defines the parameters for RequestScheme match conditions
    /// Serialized Name: RequestSchemeMatchConditionParameters
    /// </summary>
    public partial class RequestSchemeMatchCondition : DeliveryRuleConditionProperties
    {
        /// <summary> Initializes a new instance of <see cref="RequestSchemeMatchCondition"/>. </summary>
        /// <param name="requestSchemeOperator">
        /// Describes operator to be matched
        /// Serialized Name: RequestSchemeMatchConditionParameters.operator
        /// </param>
        public RequestSchemeMatchCondition(RequestSchemeOperator requestSchemeOperator)
        {
            RequestSchemeOperator = requestSchemeOperator;
            Transforms = new ChangeTrackingList<PreTransformCategory>();
            MatchValues = new ChangeTrackingList<RequestSchemeMatchConditionMatchValue>();
            TypeName = DeliveryRuleConditionParametersType.DeliveryRuleRequestSchemeConditionParameters;
        }

        /// <summary> Initializes a new instance of <see cref="RequestSchemeMatchCondition"/>. </summary>
        /// <param name="typeName"> Serialized Name: DeliveryRuleConditionParameters.typeName. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="requestSchemeOperator">
        /// Describes operator to be matched
        /// Serialized Name: RequestSchemeMatchConditionParameters.operator
        /// </param>
        /// <param name="negateCondition">
        /// Describes if this is negate condition or not
        /// Serialized Name: RequestSchemeMatchConditionParameters.negateCondition
        /// </param>
        /// <param name="transforms">
        /// List of transforms
        /// Serialized Name: RequestSchemeMatchConditionParameters.transforms
        /// </param>
        /// <param name="matchValues">
        /// The match value for the condition of the delivery rule
        /// Serialized Name: RequestSchemeMatchConditionParameters.matchValues
        /// </param>
        internal RequestSchemeMatchCondition(DeliveryRuleConditionParametersType typeName, IDictionary<string, BinaryData> serializedAdditionalRawData, RequestSchemeOperator requestSchemeOperator, bool? negateCondition, IList<PreTransformCategory> transforms, IList<RequestSchemeMatchConditionMatchValue> matchValues) : base(typeName, serializedAdditionalRawData)
        {
            RequestSchemeOperator = requestSchemeOperator;
            NegateCondition = negateCondition;
            Transforms = transforms;
            MatchValues = matchValues;
            TypeName = typeName;
        }

        /// <summary> Initializes a new instance of <see cref="RequestSchemeMatchCondition"/> for deserialization. </summary>
        internal RequestSchemeMatchCondition()
        {
        }

        /// <summary>
        /// Describes operator to be matched
        /// Serialized Name: RequestSchemeMatchConditionParameters.operator
        /// </summary>
        public RequestSchemeOperator RequestSchemeOperator { get; set; }
        /// <summary>
        /// Describes if this is negate condition or not
        /// Serialized Name: RequestSchemeMatchConditionParameters.negateCondition
        /// </summary>
        public bool? NegateCondition { get; set; }
        /// <summary>
        /// List of transforms
        /// Serialized Name: RequestSchemeMatchConditionParameters.transforms
        /// </summary>
        public IList<PreTransformCategory> Transforms { get; }
        /// <summary>
        /// The match value for the condition of the delivery rule
        /// Serialized Name: RequestSchemeMatchConditionParameters.matchValues
        /// </summary>
        public IList<RequestSchemeMatchConditionMatchValue> MatchValues { get; }
    }
}
