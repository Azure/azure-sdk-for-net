// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The name of the action for the delivery rule.
    /// Serialized Name: DeliveryRuleActionName
    /// </summary>
    internal readonly partial struct DeliveryRuleActionName : IEquatable<DeliveryRuleActionName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeliveryRuleActionName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeliveryRuleActionName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CacheExpirationValue = "CacheExpiration";
        private const string CacheKeyQueryStringValue = "CacheKeyQueryString";
        private const string ModifyRequestHeaderValue = "ModifyRequestHeader";
        private const string ModifyResponseHeaderValue = "ModifyResponseHeader";
        private const string UriRedirectValue = "UrlRedirect";
        private const string UriRewriteValue = "UrlRewrite";
        private const string UriSigningValue = "UrlSigning";
        private const string OriginGroupOverrideValue = "OriginGroupOverride";
        private const string RouteConfigurationOverrideValue = "RouteConfigurationOverride";

        /// <summary>
        /// CacheExpiration
        /// Serialized Name: DeliveryRuleActionName.CacheExpiration
        /// </summary>
        public static DeliveryRuleActionName CacheExpiration { get; } = new DeliveryRuleActionName(CacheExpirationValue);
        /// <summary>
        /// CacheKeyQueryString
        /// Serialized Name: DeliveryRuleActionName.CacheKeyQueryString
        /// </summary>
        public static DeliveryRuleActionName CacheKeyQueryString { get; } = new DeliveryRuleActionName(CacheKeyQueryStringValue);
        /// <summary>
        /// ModifyRequestHeader
        /// Serialized Name: DeliveryRuleActionName.ModifyRequestHeader
        /// </summary>
        public static DeliveryRuleActionName ModifyRequestHeader { get; } = new DeliveryRuleActionName(ModifyRequestHeaderValue);
        /// <summary>
        /// ModifyResponseHeader
        /// Serialized Name: DeliveryRuleActionName.ModifyResponseHeader
        /// </summary>
        public static DeliveryRuleActionName ModifyResponseHeader { get; } = new DeliveryRuleActionName(ModifyResponseHeaderValue);
        /// <summary>
        /// UrlRedirect
        /// Serialized Name: DeliveryRuleActionName.UrlRedirect
        /// </summary>
        public static DeliveryRuleActionName UriRedirect { get; } = new DeliveryRuleActionName(UriRedirectValue);
        /// <summary>
        /// UrlRewrite
        /// Serialized Name: DeliveryRuleActionName.UrlRewrite
        /// </summary>
        public static DeliveryRuleActionName UriRewrite { get; } = new DeliveryRuleActionName(UriRewriteValue);
        /// <summary>
        /// UrlSigning
        /// Serialized Name: DeliveryRuleActionName.UrlSigning
        /// </summary>
        public static DeliveryRuleActionName UriSigning { get; } = new DeliveryRuleActionName(UriSigningValue);
        /// <summary>
        /// OriginGroupOverride
        /// Serialized Name: DeliveryRuleActionName.OriginGroupOverride
        /// </summary>
        public static DeliveryRuleActionName OriginGroupOverride { get; } = new DeliveryRuleActionName(OriginGroupOverrideValue);
        /// <summary>
        /// RouteConfigurationOverride
        /// Serialized Name: DeliveryRuleActionName.RouteConfigurationOverride
        /// </summary>
        public static DeliveryRuleActionName RouteConfigurationOverride { get; } = new DeliveryRuleActionName(RouteConfigurationOverrideValue);
        /// <summary> Determines if two <see cref="DeliveryRuleActionName"/> values are the same. </summary>
        public static bool operator ==(DeliveryRuleActionName left, DeliveryRuleActionName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeliveryRuleActionName"/> values are not the same. </summary>
        public static bool operator !=(DeliveryRuleActionName left, DeliveryRuleActionName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DeliveryRuleActionName"/>. </summary>
        public static implicit operator DeliveryRuleActionName(string value) => new DeliveryRuleActionName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeliveryRuleActionName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeliveryRuleActionName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
