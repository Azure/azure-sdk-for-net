// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class HealthProbeSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProbePath))
            {
                writer.WritePropertyName("probePath"u8);
                writer.WriteStringValue(ProbePath);
            }
            if (Optional.IsDefined(ProbeRequestType))
            {
                writer.WritePropertyName("probeRequestType"u8);
                writer.WriteStringValue(ProbeRequestType.Value.ToSerialString());
            }
            if (Optional.IsDefined(ProbeProtocol))
            {
                writer.WritePropertyName("probeProtocol"u8);
                writer.WriteStringValue(ProbeProtocol.Value.ToSerialString());
            }
            if (Optional.IsDefined(ProbeIntervalInSeconds))
            {
                writer.WritePropertyName("probeIntervalInSeconds"u8);
                writer.WriteNumberValue(ProbeIntervalInSeconds.Value);
            }
            writer.WriteEndObject();
        }

        internal static HealthProbeSettings DeserializeHealthProbeSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> probePath = default;
            Optional<HealthProbeRequestType> probeRequestType = default;
            Optional<HealthProbeProtocol> probeProtocol = default;
            Optional<int> probeIntervalInSeconds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("probePath"u8))
                {
                    probePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("probeRequestType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    probeRequestType = property.Value.GetString().ToHealthProbeRequestType();
                    continue;
                }
                if (property.NameEquals("probeProtocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    probeProtocol = property.Value.GetString().ToHealthProbeProtocol();
                    continue;
                }
                if (property.NameEquals("probeIntervalInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    probeIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
            }
            return new HealthProbeSettings(probePath.Value, Optional.ToNullable(probeRequestType), Optional.ToNullable(probeProtocol), Optional.ToNullable(probeIntervalInSeconds));
        }
    }
}
