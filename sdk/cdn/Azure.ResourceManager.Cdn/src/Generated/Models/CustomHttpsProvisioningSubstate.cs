// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. </summary>
    public readonly partial struct CustomHttpsProvisioningSubstate : IEquatable<CustomHttpsProvisioningSubstate>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CustomHttpsProvisioningSubstate"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CustomHttpsProvisioningSubstate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SubmittingDomainControlValidationRequestValue = "SubmittingDomainControlValidationRequest";
        private const string PendingDomainControlValidationREquestApprovalValue = "PendingDomainControlValidationREquestApproval";
        private const string DomainControlValidationRequestApprovedValue = "DomainControlValidationRequestApproved";
        private const string DomainControlValidationRequestRejectedValue = "DomainControlValidationRequestRejected";
        private const string DomainControlValidationRequestTimedOutValue = "DomainControlValidationRequestTimedOut";
        private const string IssuingCertificateValue = "IssuingCertificate";
        private const string DeployingCertificateValue = "DeployingCertificate";
        private const string CertificateDeployedValue = "CertificateDeployed";
        private const string DeletingCertificateValue = "DeletingCertificate";
        private const string CertificateDeletedValue = "CertificateDeleted";

        /// <summary> SubmittingDomainControlValidationRequest. </summary>
        public static CustomHttpsProvisioningSubstate SubmittingDomainControlValidationRequest { get; } = new CustomHttpsProvisioningSubstate(SubmittingDomainControlValidationRequestValue);
        /// <summary> PendingDomainControlValidationREquestApproval. </summary>
        public static CustomHttpsProvisioningSubstate PendingDomainControlValidationREquestApproval { get; } = new CustomHttpsProvisioningSubstate(PendingDomainControlValidationREquestApprovalValue);
        /// <summary> DomainControlValidationRequestApproved. </summary>
        public static CustomHttpsProvisioningSubstate DomainControlValidationRequestApproved { get; } = new CustomHttpsProvisioningSubstate(DomainControlValidationRequestApprovedValue);
        /// <summary> DomainControlValidationRequestRejected. </summary>
        public static CustomHttpsProvisioningSubstate DomainControlValidationRequestRejected { get; } = new CustomHttpsProvisioningSubstate(DomainControlValidationRequestRejectedValue);
        /// <summary> DomainControlValidationRequestTimedOut. </summary>
        public static CustomHttpsProvisioningSubstate DomainControlValidationRequestTimedOut { get; } = new CustomHttpsProvisioningSubstate(DomainControlValidationRequestTimedOutValue);
        /// <summary> IssuingCertificate. </summary>
        public static CustomHttpsProvisioningSubstate IssuingCertificate { get; } = new CustomHttpsProvisioningSubstate(IssuingCertificateValue);
        /// <summary> DeployingCertificate. </summary>
        public static CustomHttpsProvisioningSubstate DeployingCertificate { get; } = new CustomHttpsProvisioningSubstate(DeployingCertificateValue);
        /// <summary> CertificateDeployed. </summary>
        public static CustomHttpsProvisioningSubstate CertificateDeployed { get; } = new CustomHttpsProvisioningSubstate(CertificateDeployedValue);
        /// <summary> DeletingCertificate. </summary>
        public static CustomHttpsProvisioningSubstate DeletingCertificate { get; } = new CustomHttpsProvisioningSubstate(DeletingCertificateValue);
        /// <summary> CertificateDeleted. </summary>
        public static CustomHttpsProvisioningSubstate CertificateDeleted { get; } = new CustomHttpsProvisioningSubstate(CertificateDeletedValue);
        /// <summary> Determines if two <see cref="CustomHttpsProvisioningSubstate"/> values are the same. </summary>
        public static bool operator ==(CustomHttpsProvisioningSubstate left, CustomHttpsProvisioningSubstate right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CustomHttpsProvisioningSubstate"/> values are not the same. </summary>
        public static bool operator !=(CustomHttpsProvisioningSubstate left, CustomHttpsProvisioningSubstate right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CustomHttpsProvisioningSubstate"/>. </summary>
        public static implicit operator CustomHttpsProvisioningSubstate(string value) => new CustomHttpsProvisioningSubstate(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CustomHttpsProvisioningSubstate other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CustomHttpsProvisioningSubstate other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
