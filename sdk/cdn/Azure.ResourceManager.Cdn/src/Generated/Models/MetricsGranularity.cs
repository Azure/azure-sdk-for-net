// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> The MetricsGranularity. </summary>
    public readonly partial struct MetricsGranularity : IEquatable<MetricsGranularity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MetricsGranularity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricsGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PT5MValue = "PT5M";
        private const string PT1HValue = "PT1H";
        private const string P1DValue = "P1D";

        /// <summary> PT5M. </summary>
        public static MetricsGranularity PT5M { get; } = new MetricsGranularity(PT5MValue);
        /// <summary> PT1H. </summary>
        public static MetricsGranularity PT1H { get; } = new MetricsGranularity(PT1HValue);
        /// <summary> P1D. </summary>
        public static MetricsGranularity P1D { get; } = new MetricsGranularity(P1DValue);
        /// <summary> Determines if two <see cref="MetricsGranularity"/> values are the same. </summary>
        public static bool operator ==(MetricsGranularity left, MetricsGranularity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricsGranularity"/> values are not the same. </summary>
        public static bool operator !=(MetricsGranularity left, MetricsGranularity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetricsGranularity"/>. </summary>
        public static implicit operator MetricsGranularity(string value) => new MetricsGranularity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricsGranularity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricsGranularity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
