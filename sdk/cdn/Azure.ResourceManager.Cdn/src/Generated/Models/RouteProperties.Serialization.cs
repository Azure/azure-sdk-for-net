// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Cdn.Models
{
    public partial class RouteProperties : IUtf8JsonSerializable, IJsonModel<RouteProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RouteProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<RouteProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RouteProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RouteProperties)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DeploymentStatus))
            {
                writer.WritePropertyName("deploymentStatus"u8);
                writer.WriteStringValue(DeploymentStatus.Value.ToString());
            }
        }

        RouteProperties IJsonModel<RouteProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RouteProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RouteProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRouteProperties(document.RootElement, options);
        }

        internal static RouteProperties DeserializeRouteProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            FrontDoorProvisioningState? provisioningState = default;
            FrontDoorDeploymentStatus? deploymentStatus = default;
            string endpointName = default;
            IReadOnlyList<FrontDoorActivatedResourceInfo> customDomains = default;
            WritableSubResource originGroup = default;
            string originPath = default;
            IReadOnlyList<WritableSubResource> ruleSets = default;
            IReadOnlyList<FrontDoorEndpointProtocol> supportedProtocols = default;
            IReadOnlyList<string> patternsToMatch = default;
            FrontDoorRouteCacheConfiguration cacheConfiguration = default;
            ForwardingProtocol? forwardingProtocol = default;
            LinkToDefaultDomain? linkToDefaultDomain = default;
            HttpsRedirect? httpsRedirect = default;
            EnabledState? enabledState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new FrontDoorProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deploymentStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deploymentStatus = new FrontDoorDeploymentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpointName"u8))
                {
                    endpointName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customDomains"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FrontDoorActivatedResourceInfo> array = new List<FrontDoorActivatedResourceInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FrontDoorActivatedResourceInfo.DeserializeFrontDoorActivatedResourceInfo(item, options));
                    }
                    customDomains = array;
                    continue;
                }
                if (property.NameEquals("originGroup"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    originGroup = ModelReaderWriter.Read<WritableSubResource>(new BinaryData(Encoding.UTF8.GetBytes(property.Value.GetRawText())), options, AzureResourceManagerCdnContext.Default);
                    continue;
                }
                if (property.NameEquals("originPath"u8))
                {
                    originPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleSets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WritableSubResource> array = new List<WritableSubResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelReaderWriter.Read<WritableSubResource>(new BinaryData(Encoding.UTF8.GetBytes(item.GetRawText())), options, AzureResourceManagerCdnContext.Default));
                    }
                    ruleSets = array;
                    continue;
                }
                if (property.NameEquals("supportedProtocols"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FrontDoorEndpointProtocol> array = new List<FrontDoorEndpointProtocol>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new FrontDoorEndpointProtocol(item.GetString()));
                    }
                    supportedProtocols = array;
                    continue;
                }
                if (property.NameEquals("patternsToMatch"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    patternsToMatch = array;
                    continue;
                }
                if (property.NameEquals("cacheConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cacheConfiguration = null;
                        continue;
                    }
                    cacheConfiguration = FrontDoorRouteCacheConfiguration.DeserializeFrontDoorRouteCacheConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("forwardingProtocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forwardingProtocol = new ForwardingProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("linkToDefaultDomain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linkToDefaultDomain = new LinkToDefaultDomain(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpsRedirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpsRedirect = new HttpsRedirect(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enabledState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledState = new EnabledState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new RouteProperties(
                endpointName,
                customDomains ?? new ChangeTrackingList<FrontDoorActivatedResourceInfo>(),
                originGroup,
                originPath,
                ruleSets ?? new ChangeTrackingList<WritableSubResource>(),
                supportedProtocols ?? new ChangeTrackingList<FrontDoorEndpointProtocol>(),
                patternsToMatch ?? new ChangeTrackingList<string>(),
                cacheConfiguration,
                forwardingProtocol,
                linkToDefaultDomain,
                httpsRedirect,
                enabledState,
                serializedAdditionalRawData,
                provisioningState,
                deploymentStatus);
        }

        BinaryData IPersistableModel<RouteProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RouteProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCdnContext.Default);
                default:
                    throw new FormatException($"The model {nameof(RouteProperties)} does not support writing '{options.Format}' format.");
            }
        }

        RouteProperties IPersistableModel<RouteProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RouteProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeRouteProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RouteProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<RouteProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
