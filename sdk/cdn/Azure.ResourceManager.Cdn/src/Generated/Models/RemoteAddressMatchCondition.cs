// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Defines the parameters for RemoteAddress match conditions. </summary>
    public partial class RemoteAddressMatchCondition : DeliveryRuleConditionParameters
    {
        /// <summary> Initializes a new instance of <see cref="RemoteAddressMatchCondition"/>. </summary>
        /// <param name="remoteAddressOperator"> Describes operator to be matched. </param>
        public RemoteAddressMatchCondition(RemoteAddressOperator remoteAddressOperator)
        {
            RemoteAddressOperator = remoteAddressOperator;
            MatchValues = new ChangeTrackingList<string>();
            Transforms = new ChangeTrackingList<PreTransformCategory>();
            TypeName = DeliveryRuleConditionProperty.DeliveryRuleRemoteAddressConditionParameters;
        }

        /// <summary> Initializes a new instance of <see cref="RemoteAddressMatchCondition"/>. </summary>
        /// <param name="typeName"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="remoteAddressOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </param>
        /// <param name="transforms"> List of transforms. </param>
        internal RemoteAddressMatchCondition(DeliveryRuleConditionProperty typeName, IDictionary<string, BinaryData> serializedAdditionalRawData, RemoteAddressOperator remoteAddressOperator, bool? negateCondition, IList<string> matchValues, IList<PreTransformCategory> transforms) : base(typeName, serializedAdditionalRawData)
        {
            RemoteAddressOperator = remoteAddressOperator;
            NegateCondition = negateCondition;
            MatchValues = matchValues;
            Transforms = transforms;
            TypeName = typeName;
        }

        /// <summary> Initializes a new instance of <see cref="RemoteAddressMatchCondition"/> for deserialization. </summary>
        internal RemoteAddressMatchCondition()
        {
        }

        /// <summary> Describes operator to be matched. </summary>
        public RemoteAddressOperator RemoteAddressOperator { get; set; }
        /// <summary> Describes if this is negate condition or not. </summary>
        public bool? NegateCondition { get; set; }
        /// <summary> Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match. </summary>
        public IList<string> MatchValues { get; }
        /// <summary> List of transforms. </summary>
        public IList<PreTransformCategory> Transforms { get; }
    }
}
