// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> The name of the condition for the delivery rule. </summary>
    public readonly partial struct MatchVariable : IEquatable<MatchVariable>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchVariable"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RemoteAddressValue = "RemoteAddress";
        private const string RequestMethodValue = "RequestMethod";
        private const string QueryStringValue = "QueryString";
        private const string PostArgsValue = "PostArgs";
        private const string RequestUriValue = "RequestUri";
        private const string RequestHeaderValue = "RequestHeader";
        private const string RequestBodyValue = "RequestBody";
        private const string RequestSchemeValue = "RequestScheme";
        private const string UrlPathValue = "UrlPath";
        private const string UrlFileExtensionValue = "UrlFileExtension";
        private const string UrlFileNameValue = "UrlFileName";
        private const string HttpVersionValue = "HttpVersion";
        private const string CookiesValue = "Cookies";
        private const string IsDeviceValue = "IsDevice";
        private const string RemoteAddrValue = "RemoteAddr";
        private const string SocketAddrValue = "SocketAddr";

        /// <summary> RemoteAddress. </summary>
        public static MatchVariable RemoteAddress { get; } = new MatchVariable(RemoteAddressValue);
        /// <summary> RequestMethod. </summary>
        public static MatchVariable RequestMethod { get; } = new MatchVariable(RequestMethodValue);
        /// <summary> QueryString. </summary>
        public static MatchVariable QueryString { get; } = new MatchVariable(QueryStringValue);
        /// <summary> PostArgs. </summary>
        public static MatchVariable PostArgs { get; } = new MatchVariable(PostArgsValue);
        /// <summary> RequestUri. </summary>
        public static MatchVariable RequestUri { get; } = new MatchVariable(RequestUriValue);
        /// <summary> RequestHeader. </summary>
        public static MatchVariable RequestHeader { get; } = new MatchVariable(RequestHeaderValue);
        /// <summary> RequestBody. </summary>
        public static MatchVariable RequestBody { get; } = new MatchVariable(RequestBodyValue);
        /// <summary> RequestScheme. </summary>
        public static MatchVariable RequestScheme { get; } = new MatchVariable(RequestSchemeValue);
        /// <summary> UrlPath. </summary>
        public static MatchVariable UrlPath { get; } = new MatchVariable(UrlPathValue);
        /// <summary> UrlFileExtension. </summary>
        public static MatchVariable UrlFileExtension { get; } = new MatchVariable(UrlFileExtensionValue);
        /// <summary> UrlFileName. </summary>
        public static MatchVariable UrlFileName { get; } = new MatchVariable(UrlFileNameValue);
        /// <summary> HttpVersion. </summary>
        public static MatchVariable HttpVersion { get; } = new MatchVariable(HttpVersionValue);
        /// <summary> Cookies. </summary>
        public static MatchVariable Cookies { get; } = new MatchVariable(CookiesValue);
        /// <summary> IsDevice. </summary>
        public static MatchVariable IsDevice { get; } = new MatchVariable(IsDeviceValue);
        /// <summary> RemoteAddr. </summary>
        public static MatchVariable RemoteAddr { get; } = new MatchVariable(RemoteAddrValue);
        /// <summary> SocketAddr. </summary>
        public static MatchVariable SocketAddr { get; } = new MatchVariable(SocketAddrValue);
        /// <summary> Determines if two <see cref="MatchVariable"/> values are the same. </summary>
        public static bool operator ==(MatchVariable left, MatchVariable right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchVariable"/> values are not the same. </summary>
        public static bool operator !=(MatchVariable left, MatchVariable right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MatchVariable"/>. </summary>
        public static implicit operator MatchVariable(string value) => new MatchVariable(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchVariable other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchVariable other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
