// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The name of the condition for the delivery rule.
    /// Serialized Name: MatchVariable
    /// </summary>
    internal readonly partial struct MatchVariable : IEquatable<MatchVariable>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchVariable"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchVariable(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RemoteAddressValue = "RemoteAddress";
        private const string RequestMethodValue = "RequestMethod";
        private const string QueryStringValue = "QueryString";
        private const string PostArgsValue = "PostArgs";
        private const string RequestUriValue = "RequestUri";
        private const string RequestHeaderValue = "RequestHeader";
        private const string RequestBodyValue = "RequestBody";
        private const string RequestSchemeValue = "RequestScheme";
        private const string UriPathValue = "UrlPath";
        private const string UriFileExtensionValue = "UrlFileExtension";
        private const string UriFileNameValue = "UrlFileName";
        private const string HttpVersionValue = "HttpVersion";
        private const string CookiesValue = "Cookies";
        private const string IsDeviceValue = "IsDevice";
        private const string SocketAddrValue = "SocketAddr";
        private const string ClientPortValue = "ClientPort";
        private const string ServerPortValue = "ServerPort";
        private const string HostNameValue = "HostName";
        private const string SslProtocolValue = "SslProtocol";

        /// <summary>
        /// RemoteAddress
        /// Serialized Name: MatchVariable.RemoteAddress
        /// </summary>
        public static MatchVariable RemoteAddress { get; } = new MatchVariable(RemoteAddressValue);
        /// <summary>
        /// RequestMethod
        /// Serialized Name: MatchVariable.RequestMethod
        /// </summary>
        public static MatchVariable RequestMethod { get; } = new MatchVariable(RequestMethodValue);
        /// <summary>
        /// QueryString
        /// Serialized Name: MatchVariable.QueryString
        /// </summary>
        public static MatchVariable QueryString { get; } = new MatchVariable(QueryStringValue);
        /// <summary>
        /// PostArgs
        /// Serialized Name: MatchVariable.PostArgs
        /// </summary>
        public static MatchVariable PostArgs { get; } = new MatchVariable(PostArgsValue);
        /// <summary>
        /// RequestUri
        /// Serialized Name: MatchVariable.RequestUri
        /// </summary>
        public static MatchVariable RequestUri { get; } = new MatchVariable(RequestUriValue);
        /// <summary>
        /// RequestHeader
        /// Serialized Name: MatchVariable.RequestHeader
        /// </summary>
        public static MatchVariable RequestHeader { get; } = new MatchVariable(RequestHeaderValue);
        /// <summary>
        /// RequestBody
        /// Serialized Name: MatchVariable.RequestBody
        /// </summary>
        public static MatchVariable RequestBody { get; } = new MatchVariable(RequestBodyValue);
        /// <summary>
        /// RequestScheme
        /// Serialized Name: MatchVariable.RequestScheme
        /// </summary>
        public static MatchVariable RequestScheme { get; } = new MatchVariable(RequestSchemeValue);
        /// <summary>
        /// UrlPath
        /// Serialized Name: MatchVariable.UrlPath
        /// </summary>
        public static MatchVariable UriPath { get; } = new MatchVariable(UriPathValue);
        /// <summary>
        /// UrlFileExtension
        /// Serialized Name: MatchVariable.UrlFileExtension
        /// </summary>
        public static MatchVariable UriFileExtension { get; } = new MatchVariable(UriFileExtensionValue);
        /// <summary>
        /// UrlFileName
        /// Serialized Name: MatchVariable.UrlFileName
        /// </summary>
        public static MatchVariable UriFileName { get; } = new MatchVariable(UriFileNameValue);
        /// <summary>
        /// HttpVersion
        /// Serialized Name: MatchVariable.HttpVersion
        /// </summary>
        public static MatchVariable HttpVersion { get; } = new MatchVariable(HttpVersionValue);
        /// <summary>
        /// Cookies
        /// Serialized Name: MatchVariable.Cookies
        /// </summary>
        public static MatchVariable Cookies { get; } = new MatchVariable(CookiesValue);
        /// <summary>
        /// IsDevice
        /// Serialized Name: MatchVariable.IsDevice
        /// </summary>
        public static MatchVariable IsDevice { get; } = new MatchVariable(IsDeviceValue);
        /// <summary>
        /// SocketAddr
        /// Serialized Name: MatchVariable.SocketAddr
        /// </summary>
        public static MatchVariable SocketAddr { get; } = new MatchVariable(SocketAddrValue);
        /// <summary>
        /// ClientPort
        /// Serialized Name: MatchVariable.ClientPort
        /// </summary>
        public static MatchVariable ClientPort { get; } = new MatchVariable(ClientPortValue);
        /// <summary>
        /// ServerPort
        /// Serialized Name: MatchVariable.ServerPort
        /// </summary>
        public static MatchVariable ServerPort { get; } = new MatchVariable(ServerPortValue);
        /// <summary>
        /// HostName
        /// Serialized Name: MatchVariable.HostName
        /// </summary>
        public static MatchVariable HostName { get; } = new MatchVariable(HostNameValue);
        /// <summary>
        /// SslProtocol
        /// Serialized Name: MatchVariable.SslProtocol
        /// </summary>
        public static MatchVariable SslProtocol { get; } = new MatchVariable(SslProtocolValue);
        /// <summary> Determines if two <see cref="MatchVariable"/> values are the same. </summary>
        public static bool operator ==(MatchVariable left, MatchVariable right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchVariable"/> values are not the same. </summary>
        public static bool operator !=(MatchVariable left, MatchVariable right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MatchVariable"/>. </summary>
        public static implicit operator MatchVariable(string value) => new MatchVariable(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchVariable other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchVariable other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
