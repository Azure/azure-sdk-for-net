// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary>
    /// The IsDeviceMatchValue.
    /// Serialized Name: IsDeviceMatchValue
    /// </summary>
    public readonly partial struct IsDeviceMatchValue : IEquatable<IsDeviceMatchValue>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IsDeviceMatchValue"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IsDeviceMatchValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MobileValue = "Mobile";
        private const string DesktopValue = "Desktop";

        /// <summary>
        /// Mobile
        /// Serialized Name: IsDeviceMatchValue.Mobile
        /// </summary>
        public static IsDeviceMatchValue Mobile { get; } = new IsDeviceMatchValue(MobileValue);
        /// <summary>
        /// Desktop
        /// Serialized Name: IsDeviceMatchValue.Desktop
        /// </summary>
        public static IsDeviceMatchValue Desktop { get; } = new IsDeviceMatchValue(DesktopValue);
        /// <summary> Determines if two <see cref="IsDeviceMatchValue"/> values are the same. </summary>
        public static bool operator ==(IsDeviceMatchValue left, IsDeviceMatchValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IsDeviceMatchValue"/> values are not the same. </summary>
        public static bool operator !=(IsDeviceMatchValue left, IsDeviceMatchValue right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IsDeviceMatchValue"/>. </summary>
        public static implicit operator IsDeviceMatchValue(string value) => new IsDeviceMatchValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IsDeviceMatchValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IsDeviceMatchValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
