// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Cdn.Models
{
    /// <summary> Defines the parameters for IsDevice match conditions. </summary>
    public partial class IsDeviceMatchCondition
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="IsDeviceMatchCondition"/>. </summary>
        /// <param name="conditionType"></param>
        /// <param name="isDeviceOperator"> Describes operator to be matched. </param>
        public IsDeviceMatchCondition(IsDeviceMatchConditionType conditionType, IsDeviceOperator isDeviceOperator)
        {
            ConditionType = conditionType;
            IsDeviceOperator = isDeviceOperator;
            MatchValues = new ChangeTrackingList<IsDeviceMatchConditionMatchValue>();
            Transforms = new ChangeTrackingList<PreTransformCategory>();
        }

        /// <summary> Initializes a new instance of <see cref="IsDeviceMatchCondition"/>. </summary>
        /// <param name="conditionType"></param>
        /// <param name="isDeviceOperator"> Describes operator to be matched. </param>
        /// <param name="negateCondition"> Describes if this is negate condition or not. </param>
        /// <param name="matchValues"> The match value for the condition of the delivery rule. </param>
        /// <param name="transforms"> List of transforms. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal IsDeviceMatchCondition(IsDeviceMatchConditionType conditionType, IsDeviceOperator isDeviceOperator, bool? negateCondition, IList<IsDeviceMatchConditionMatchValue> matchValues, IList<PreTransformCategory> transforms, Dictionary<string, BinaryData> rawData)
        {
            ConditionType = conditionType;
            IsDeviceOperator = isDeviceOperator;
            NegateCondition = negateCondition;
            MatchValues = matchValues;
            Transforms = transforms;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="IsDeviceMatchCondition"/> for deserialization. </summary>
        internal IsDeviceMatchCondition()
        {
        }

        /// <summary> Gets or sets the condition type. </summary>
        public IsDeviceMatchConditionType ConditionType { get; set; }
        /// <summary> Describes operator to be matched. </summary>
        public IsDeviceOperator IsDeviceOperator { get; set; }
        /// <summary> Describes if this is negate condition or not. </summary>
        public bool? NegateCondition { get; set; }
        /// <summary> The match value for the condition of the delivery rule. </summary>
        public IList<IsDeviceMatchConditionMatchValue> MatchValues { get; }
        /// <summary> List of transforms. </summary>
        public IList<PreTransformCategory> Transforms { get; }
    }
}
