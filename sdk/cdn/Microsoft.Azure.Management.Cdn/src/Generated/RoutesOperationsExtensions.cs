// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoutesOperations.
    /// </summary>
    public static partial class RoutesOperationsExtensions
    {
            /// <summary>
            /// Lists all of the existing origins within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            public static IPage<Route> ListByEndpoint(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName)
            {
                return operations.ListByEndpointAsync(resourceGroupName, profileName, endpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the existing origins within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Route>> ListByEndpointAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByEndpointWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            public static Route Get(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName)
            {
                return operations.GetAsync(resourceGroupName, profileName, endpointName, routeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Route> GetAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='route'>
            /// Route properties
            /// </param>
            public static Route Create(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, Route route)
            {
                return operations.CreateAsync(resourceGroupName, profileName, endpointName, routeName, route).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='route'>
            /// Route properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Route> CreateAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, Route route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='routeUpdateProperties'>
            /// Route update properties
            /// </param>
            public static Route Update(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, RouteUpdateParameters routeUpdateProperties)
            {
                return operations.UpdateAsync(resourceGroupName, profileName, endpointName, routeName, routeUpdateProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='routeUpdateProperties'>
            /// Route update properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Route> UpdateAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, RouteUpdateParameters routeUpdateProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, routeUpdateProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            public static void Delete(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName)
            {
                operations.DeleteAsync(resourceGroupName, profileName, endpointName, routeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='route'>
            /// Route properties
            /// </param>
            public static Route BeginCreate(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, Route route)
            {
                return operations.BeginCreateAsync(resourceGroupName, profileName, endpointName, routeName, route).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='route'>
            /// Route properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Route> BeginCreateAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, Route route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='routeUpdateProperties'>
            /// Route update properties
            /// </param>
            public static Route BeginUpdate(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, RouteUpdateParameters routeUpdateProperties)
            {
                return operations.BeginUpdateAsync(resourceGroupName, profileName, endpointName, routeName, routeUpdateProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='routeUpdateProperties'>
            /// Route update properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Route> BeginUpdateAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, RouteUpdateParameters routeUpdateProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, routeUpdateProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            public static void BeginDelete(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName)
            {
                operations.BeginDeleteAsync(resourceGroupName, profileName, endpointName, routeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing route with the specified route name under the specified
            /// subscription, resource group, profile, and AzureFrontDoor endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint under the profile which is unique globally.
            /// </param>
            /// <param name='routeName'>
            /// Name of the routing rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IRoutesOperations operations, string resourceGroupName, string profileName, string endpointName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, profileName, endpointName, routeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all of the existing origins within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Route> ListByEndpointNext(this IRoutesOperations operations, string nextPageLink)
            {
                return operations.ListByEndpointNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the existing origins within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Route>> ListByEndpointNextAsync(this IRoutesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByEndpointNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
