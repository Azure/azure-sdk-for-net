// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CdnManagementClient.
    /// </summary>
    public static partial class CdnManagementClientExtensions
    {
            /// <summary>
            /// Check the availability of a resource name. This is needed for resources
            /// where name is globally unique, such as a CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The resource name to validate.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailability(this ICdnManagementClient operations, string name)
            {
                return operations.CheckNameAvailabilityAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name. This is needed for resources
            /// where name is globally unique, such as a CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The resource name to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityAsync(this ICdnManagementClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check the availability of a resource name. This is needed for resources
            /// where name is globally unique, such as a CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The resource name to validate.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailabilityWithSubscription(this ICdnManagementClient operations, string name)
            {
                return operations.CheckNameAvailabilityWithSubscriptionAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name. This is needed for resources
            /// where name is globally unique, such as a CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The resource name to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityWithSubscriptionAsync(this ICdnManagementClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithSubscriptionWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if the probe path is a valid path and the file can be accessed. Probe
            /// path is the path to a file hosted on the origin server to help accelerate
            /// the delivery of dynamic content via the CDN endpoint. This path is relative
            /// to the origin path specified in the endpoint configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='probeURL'>
            /// The probe URL to validate.
            /// </param>
            public static ValidateProbeOutput ValidateProbe(this ICdnManagementClient operations, string probeURL)
            {
                return operations.ValidateProbeAsync(probeURL).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the probe path is a valid path and the file can be accessed. Probe
            /// path is the path to a file hosted on the origin server to help accelerate
            /// the delivery of dynamic content via the CDN endpoint. This path is relative
            /// to the origin path specified in the endpoint configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='probeURL'>
            /// The probe URL to validate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidateProbeOutput> ValidateProbeAsync(this ICdnManagementClient operations, string probeURL, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateProbeWithHttpMessagesAsync(probeURL, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
