// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The JSON object that contains the properties to determine origin health
    /// using real requests/responses.
    /// </summary>
    public partial class ResponseBasedOriginErrorDetectionParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ResponseBasedOriginErrorDetectionParameters class.
        /// </summary>
        public ResponseBasedOriginErrorDetectionParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ResponseBasedOriginErrorDetectionParameters class.
        /// </summary>
        /// <param name="responseBasedDetectedErrorTypes">Type of response
        /// errors for real user requests for which origin will be deemed
        /// unhealthy. Possible values include: 'None', 'TcpErrorsOnly',
        /// 'TcpAndHttpErrors'</param>
        /// <param name="responseBasedFailoverThresholdPercentage">The
        /// percentage of failed requests in the sample where failover should
        /// trigger.</param>
        /// <param name="httpErrorRanges">The list of Http status code ranges
        /// that are considered as server errors for origin and it is marked as
        /// unhealthy.</param>
        public ResponseBasedOriginErrorDetectionParameters(ResponseBasedDetectedErrorTypes? responseBasedDetectedErrorTypes = default(ResponseBasedDetectedErrorTypes?), int? responseBasedFailoverThresholdPercentage = default(int?), IList<HttpErrorRangeParameters> httpErrorRanges = default(IList<HttpErrorRangeParameters>))
        {
            ResponseBasedDetectedErrorTypes = responseBasedDetectedErrorTypes;
            ResponseBasedFailoverThresholdPercentage = responseBasedFailoverThresholdPercentage;
            HttpErrorRanges = httpErrorRanges;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of response errors for real user requests for
        /// which origin will be deemed unhealthy. Possible values include:
        /// 'None', 'TcpErrorsOnly', 'TcpAndHttpErrors'
        /// </summary>
        [JsonProperty(PropertyName = "responseBasedDetectedErrorTypes")]
        public ResponseBasedDetectedErrorTypes? ResponseBasedDetectedErrorTypes { get; set; }

        /// <summary>
        /// Gets or sets the percentage of failed requests in the sample where
        /// failover should trigger.
        /// </summary>
        [JsonProperty(PropertyName = "responseBasedFailoverThresholdPercentage")]
        public int? ResponseBasedFailoverThresholdPercentage { get; set; }

        /// <summary>
        /// Gets or sets the list of Http status code ranges that are
        /// considered as server errors for origin and it is marked as
        /// unhealthy.
        /// </summary>
        [JsonProperty(PropertyName = "httpErrorRanges")]
        public IList<HttpErrorRangeParameters> HttpErrorRanges { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResponseBasedFailoverThresholdPercentage > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ResponseBasedFailoverThresholdPercentage", 100);
            }
            if (ResponseBasedFailoverThresholdPercentage < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ResponseBasedFailoverThresholdPercentage", 0);
            }
            if (HttpErrorRanges != null)
            {
                foreach (var element in HttpErrorRanges)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
