// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ResponseBasedDetectedErrorTypes.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ResponseBasedDetectedErrorTypes
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "TcpErrorsOnly")]
        TcpErrorsOnly,
        [EnumMember(Value = "TcpAndHttpErrors")]
        TcpAndHttpErrors
    }
    internal static class ResponseBasedDetectedErrorTypesEnumExtension
    {
        internal static string ToSerializedValue(this ResponseBasedDetectedErrorTypes? value)
        {
            return value == null ? null : ((ResponseBasedDetectedErrorTypes)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ResponseBasedDetectedErrorTypes value)
        {
            switch( value )
            {
                case ResponseBasedDetectedErrorTypes.None:
                    return "None";
                case ResponseBasedDetectedErrorTypes.TcpErrorsOnly:
                    return "TcpErrorsOnly";
                case ResponseBasedDetectedErrorTypes.TcpAndHttpErrors:
                    return "TcpAndHttpErrors";
            }
            return null;
        }

        internal static ResponseBasedDetectedErrorTypes? ParseResponseBasedDetectedErrorTypes(this string value)
        {
            switch( value )
            {
                case "None":
                    return ResponseBasedDetectedErrorTypes.None;
                case "TcpErrorsOnly":
                    return ResponseBasedDetectedErrorTypes.TcpErrorsOnly;
                case "TcpAndHttpErrors":
                    return ResponseBasedDetectedErrorTypes.TcpAndHttpErrors;
            }
            return null;
        }
    }
}
