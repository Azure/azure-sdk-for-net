// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Friendly domain name mapping to the endpoint hostname that the customer
    /// provides for branding purposes, e.g. www.contoso.com.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AFDDomain : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the AFDDomain class.
        /// </summary>
        public AFDDomain()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AFDDomain class.
        /// </summary>
        /// <param name="hostName">The host name of the domain. Must be a
        /// domain name.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tlsSettings">The configuration specifying how to
        /// enable HTTPS for the domain - using AzureFrontDoor managed
        /// certificate or user's own certificate. If not specified, enabling
        /// ssl uses AzureFrontDoor managed certificate by default.</param>
        /// <param name="azureDnsZone">Resource reference to the Azure DNS
        /// zone</param>
        /// <param name="provisioningState">Provisioning status. Possible
        /// values include: 'Succeeded', 'Failed', 'Updating', 'Deleting',
        /// 'Creating'</param>
        /// <param name="deploymentStatus">Possible values include:
        /// 'NotStarted', 'InProgress', 'Succeeded', 'Failed'</param>
        /// <param name="domainValidationState">Provisioning substate shows the
        /// progress of custom HTTPS enabling/disabling process step by step.
        /// DCV stands for DomainControlValidation. Possible values include:
        /// 'Unknown', 'Submitting', 'Pending', 'TimedOut',
        /// 'PendingRevalidation', 'Approved'</param>
        /// <param name="validationProperties">Values the customer needs to
        /// validate domain ownership</param>
        public AFDDomain(string hostName, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), AFDDomainHttpsParameters tlsSettings = default(AFDDomainHttpsParameters), ResourceReference azureDnsZone = default(ResourceReference), string provisioningState = default(string), string deploymentStatus = default(string), string domainValidationState = default(string), DomainValidationProperties validationProperties = default(DomainValidationProperties))
            : base(id, name, type, systemData)
        {
            TlsSettings = tlsSettings;
            AzureDnsZone = azureDnsZone;
            ProvisioningState = provisioningState;
            DeploymentStatus = deploymentStatus;
            DomainValidationState = domainValidationState;
            HostName = hostName;
            ValidationProperties = validationProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the configuration specifying how to enable HTTPS for
        /// the domain - using AzureFrontDoor managed certificate or user's own
        /// certificate. If not specified, enabling ssl uses AzureFrontDoor
        /// managed certificate by default.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tlsSettings")]
        public AFDDomainHttpsParameters TlsSettings { get; set; }

        /// <summary>
        /// Gets or sets resource reference to the Azure DNS zone
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureDnsZone")]
        public ResourceReference AzureDnsZone { get; set; }

        /// <summary>
        /// Gets provisioning status. Possible values include: 'Succeeded',
        /// 'Failed', 'Updating', 'Deleting', 'Creating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets possible values include: 'NotStarted', 'InProgress',
        /// 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentStatus")]
        public string DeploymentStatus { get; private set; }

        /// <summary>
        /// Gets provisioning substate shows the progress of custom HTTPS
        /// enabling/disabling process step by step. DCV stands for
        /// DomainControlValidation. Possible values include: 'Unknown',
        /// 'Submitting', 'Pending', 'TimedOut', 'PendingRevalidation',
        /// 'Approved'
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainValidationState")]
        public string DomainValidationState { get; private set; }

        /// <summary>
        /// Gets or sets the host name of the domain. Must be a domain name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets values the customer needs to validate domain ownership
        /// </summary>
        [JsonProperty(PropertyName = "properties.validationProperties")]
        public DomainValidationProperties ValidationProperties { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HostName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostName");
            }
            if (TlsSettings != null)
            {
                TlsSettings.Validate();
            }
        }
    }
}
