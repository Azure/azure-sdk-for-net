// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters required for content purge.
    /// </summary>
    public partial class AfdPurgeParameters
    {
        /// <summary>
        /// Initializes a new instance of the AfdPurgeParameters class.
        /// </summary>
        public AfdPurgeParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AfdPurgeParameters class.
        /// </summary>
        /// <param name="contentPaths">The path to the content to be purged.
        /// Can describe a file path or a wild card directory.</param>
        /// <param name="domains">List of domains.</param>
        public AfdPurgeParameters(IList<string> contentPaths, IList<string> domains = default(IList<string>))
        {
            ContentPaths = contentPaths;
            Domains = domains;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the path to the content to be purged. Can describe a
        /// file path or a wild card directory.
        /// </summary>
        [JsonProperty(PropertyName = "contentPaths")]
        public IList<string> ContentPaths { get; set; }

        /// <summary>
        /// Gets or sets list of domains.
        /// </summary>
        [JsonProperty(PropertyName = "domains")]
        public IList<string> Domains { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContentPaths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentPaths");
            }
        }
    }
}
