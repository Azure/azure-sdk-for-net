// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines how to identify a parameter for a specific purpose e.g. expires
    /// </summary>
    public partial class UrlSigningParamIdentifier
    {
        /// <summary>
        /// Initializes a new instance of the UrlSigningParamIdentifier class.
        /// </summary>
        public UrlSigningParamIdentifier()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UrlSigningParamIdentifier class.
        /// </summary>
        /// <param name="paramIndicator">Indicates the purpose of the
        /// parameter. Possible values include: 'Expires', 'KeyId',
        /// 'Signature'</param>
        /// <param name="paramName">Parameter name</param>
        public UrlSigningParamIdentifier(string paramIndicator, string paramName)
        {
            ParamIndicator = paramIndicator;
            ParamName = paramName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates the purpose of the parameter. Possible
        /// values include: 'Expires', 'KeyId', 'Signature'
        /// </summary>
        [JsonProperty(PropertyName = "paramIndicator")]
        public string ParamIndicator { get; set; }

        /// <summary>
        /// Gets or sets parameter name
        /// </summary>
        [JsonProperty(PropertyName = "paramName")]
        public string ParamName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ParamIndicator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParamIndicator");
            }
            if (ParamName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParamName");
            }
        }
    }
}
