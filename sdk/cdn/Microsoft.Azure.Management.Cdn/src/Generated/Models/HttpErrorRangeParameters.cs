// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The JSON object that represents the range for http status codes
    /// </summary>
    public partial class HttpErrorRangeParameters
    {
        /// <summary>
        /// Initializes a new instance of the HttpErrorRangeParameters class.
        /// </summary>
        public HttpErrorRangeParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HttpErrorRangeParameters class.
        /// </summary>
        /// <param name="begin">The inclusive start of the http status code
        /// range.</param>
        /// <param name="end">The inclusive end of the http status code
        /// range.</param>
        public HttpErrorRangeParameters(int? begin = default(int?), int? end = default(int?))
        {
            Begin = begin;
            End = end;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the inclusive start of the http status code range.
        /// </summary>
        [JsonProperty(PropertyName = "begin")]
        public int? Begin { get; set; }

        /// <summary>
        /// Gets or sets the inclusive end of the http status code range.
        /// </summary>
        [JsonProperty(PropertyName = "end")]
        public int? End { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Begin > 999)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Begin", 999);
            }
            if (Begin < 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Begin", 100);
            }
            if (End > 999)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "End", 999);
            }
            if (End < 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "End", 100);
            }
        }
    }
}
