// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the parameters for the url redirect action.
    /// </summary>
    public partial class UrlRedirectActionParameters
    {
        /// <summary>
        /// Initializes a new instance of the UrlRedirectActionParameters
        /// class.
        /// </summary>
        public UrlRedirectActionParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UrlRedirectActionParameters
        /// class.
        /// </summary>
        /// <param name="redirectType">The redirect type the rule will use when
        /// redirecting traffic. Possible values include: 'Moved', 'Found',
        /// 'TemporaryRedirect', 'PermanentRedirect'</param>
        /// <param name="destinationProtocol">Protocol to use for the redirect.
        /// The default value is MatchRequest. Possible values include:
        /// 'MatchRequest', 'Http', 'Https'</param>
        /// <param name="customPath">The full path to redirect. Path cannot be
        /// empty and must start with /. Leave empty to use the incoming path
        /// as destination path.</param>
        /// <param name="customHostname">Host to redirect. Leave empty to use
        /// the incoming host as the destination host.</param>
        /// <param name="customQueryString">The set of query strings to be
        /// placed in the redirect URL. Setting this value would replace any
        /// existing query string; leave empty to preserve the incoming query
        /// string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ?
        /// and &amp; will be added automatically so do not include
        /// them.</param>
        /// <param name="customFragment">Fragment to add to the redirect URL.
        /// Fragment is the part of the URL that comes after #. Do not include
        /// the #.</param>
        public UrlRedirectActionParameters(string redirectType, string destinationProtocol = default(string), string customPath = default(string), string customHostname = default(string), string customQueryString = default(string), string customFragment = default(string))
        {
            RedirectType = redirectType;
            DestinationProtocol = destinationProtocol;
            CustomPath = customPath;
            CustomHostname = customHostname;
            CustomQueryString = customQueryString;
            CustomFragment = customFragment;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for UrlRedirectActionParameters class.
        /// </summary>
        static UrlRedirectActionParameters()
        {
            Odatatype = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the redirect type the rule will use when redirecting
        /// traffic. Possible values include: 'Moved', 'Found',
        /// 'TemporaryRedirect', 'PermanentRedirect'
        /// </summary>
        [JsonProperty(PropertyName = "redirectType")]
        public string RedirectType { get; set; }

        /// <summary>
        /// Gets or sets protocol to use for the redirect. The default value is
        /// MatchRequest. Possible values include: 'MatchRequest', 'Http',
        /// 'Https'
        /// </summary>
        [JsonProperty(PropertyName = "destinationProtocol")]
        public string DestinationProtocol { get; set; }

        /// <summary>
        /// Gets or sets the full path to redirect. Path cannot be empty and
        /// must start with /. Leave empty to use the incoming path as
        /// destination path.
        /// </summary>
        [JsonProperty(PropertyName = "customPath")]
        public string CustomPath { get; set; }

        /// <summary>
        /// Gets or sets host to redirect. Leave empty to use the incoming host
        /// as the destination host.
        /// </summary>
        [JsonProperty(PropertyName = "customHostname")]
        public string CustomHostname { get; set; }

        /// <summary>
        /// Gets or sets the set of query strings to be placed in the redirect
        /// URL. Setting this value would replace any existing query string;
        /// leave empty to preserve the incoming query string. Query string
        /// must be in &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; format. ? and
        /// &amp;amp; will be added automatically so do not include them.
        /// </summary>
        [JsonProperty(PropertyName = "customQueryString")]
        public string CustomQueryString { get; set; }

        /// <summary>
        /// Gets or sets fragment to add to the redirect URL. Fragment is the
        /// part of the URL that comes after #. Do not include the #.
        /// </summary>
        [JsonProperty(PropertyName = "customFragment")]
        public string CustomFragment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "@odata.type")]
        public static string Odatatype { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RedirectType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RedirectType");
            }
        }
    }
}
