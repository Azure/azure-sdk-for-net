// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the parameters for the origin group override configuration.
    /// </summary>
    public partial class OriginGroupOverride
    {
        /// <summary>
        /// Initializes a new instance of the OriginGroupOverride class.
        /// </summary>
        public OriginGroupOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OriginGroupOverride class.
        /// </summary>
        /// <param name="originGroup">defines the OriginGroup that would
        /// override the DefaultOriginGroup on route.</param>
        /// <param name="forwardingProtocol">Protocol this rule will use when
        /// forwarding traffic to backends. Possible values include:
        /// 'HttpOnly', 'HttpsOnly', 'MatchRequest'</param>
        public OriginGroupOverride(ResourceReference originGroup = default(ResourceReference), string forwardingProtocol = default(string))
        {
            OriginGroup = originGroup;
            ForwardingProtocol = forwardingProtocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets defines the OriginGroup that would override the
        /// DefaultOriginGroup on route.
        /// </summary>
        [JsonProperty(PropertyName = "originGroup")]
        public ResourceReference OriginGroup { get; set; }

        /// <summary>
        /// Gets or sets protocol this rule will use when forwarding traffic to
        /// backends. Possible values include: 'HttpOnly', 'HttpsOnly',
        /// 'MatchRequest'
        /// </summary>
        [JsonProperty(PropertyName = "forwardingProtocol")]
        public string ForwardingProtocol { get; set; }

    }
}
