// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a rate limiting rule that can be included in a waf policy
    /// </summary>
    public partial class RateLimitRule : CustomRule
    {
        /// <summary>
        /// Initializes a new instance of the RateLimitRule class.
        /// </summary>
        public RateLimitRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RateLimitRule class.
        /// </summary>
        /// <param name="name">Defines the name of the custom rule</param>
        /// <param name="priority">Defines in what order this rule be evaluated
        /// in the overall list of custom rules</param>
        /// <param name="matchConditions">List of match conditions.</param>
        /// <param name="action">Describes what action to be applied when rule
        /// matches. Possible values include: 'Allow', 'Block', 'Log',
        /// 'Redirect'</param>
        /// <param name="rateLimitThreshold">Defines rate limit
        /// threshold.</param>
        /// <param name="rateLimitDurationInMinutes">Defines rate limit
        /// duration. Default is 1 minute.</param>
        /// <param name="enabledState">Describes if the custom rule is in
        /// enabled or disabled state. Defaults to Enabled if not specified.
        /// Possible values include: 'Disabled', 'Enabled'</param>
        public RateLimitRule(string name, int priority, IList<MatchCondition> matchConditions, string action, int rateLimitThreshold, int rateLimitDurationInMinutes, string enabledState = default(string))
            : base(name, priority, matchConditions, action, enabledState)
        {
            RateLimitThreshold = rateLimitThreshold;
            RateLimitDurationInMinutes = rateLimitDurationInMinutes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets defines rate limit threshold.
        /// </summary>
        [JsonProperty(PropertyName = "rateLimitThreshold")]
        public int RateLimitThreshold { get; set; }

        /// <summary>
        /// Gets or sets defines rate limit duration. Default is 1 minute.
        /// </summary>
        [JsonProperty(PropertyName = "rateLimitDurationInMinutes")]
        public int RateLimitDurationInMinutes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (RateLimitThreshold < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RateLimitThreshold", 0);
            }
            if (RateLimitDurationInMinutes > 60)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RateLimitDurationInMinutes", 60);
            }
            if (RateLimitDurationInMinutes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RateLimitDurationInMinutes", 0);
            }
        }
    }
}
