// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Cdn
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RulesOperations.
    /// </summary>
    public static partial class RulesOperationsExtensions
    {
            /// <summary>
            /// Lists all of the existing delivery rules within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            public static IPage<Rule> ListByRuleSet(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName)
            {
                return operations.ListByRuleSetAsync(resourceGroupName, profileName, ruleSetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the existing delivery rules within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Rule>> ListByRuleSetAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRuleSetWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            public static Rule Get(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName)
            {
                return operations.GetAsync(resourceGroupName, profileName, ruleSetName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rule> GetAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new delivery rule within the specified rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='rule'>
            /// The delivery rule properties.
            /// </param>
            public static Rule Create(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, Rule rule)
            {
                return operations.CreateAsync(resourceGroupName, profileName, ruleSetName, ruleName, rule).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new delivery rule within the specified rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='rule'>
            /// The delivery rule properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rule> CreateAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, Rule rule, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, rule, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='ruleUpdateProperties'>
            /// Delivery rule properties
            /// </param>
            public static Rule Update(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, RuleUpdateParameters ruleUpdateProperties)
            {
                return operations.UpdateAsync(resourceGroupName, profileName, ruleSetName, ruleName, ruleUpdateProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='ruleUpdateProperties'>
            /// Delivery rule properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rule> UpdateAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, RuleUpdateParameters ruleUpdateProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, ruleUpdateProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            public static void Delete(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName)
            {
                operations.DeleteAsync(resourceGroupName, profileName, ruleSetName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new delivery rule within the specified rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='rule'>
            /// The delivery rule properties.
            /// </param>
            public static Rule BeginCreate(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, Rule rule)
            {
                return operations.BeginCreateAsync(resourceGroupName, profileName, ruleSetName, ruleName, rule).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new delivery rule within the specified rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='rule'>
            /// The delivery rule properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rule> BeginCreateAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, Rule rule, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, rule, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='ruleUpdateProperties'>
            /// Delivery rule properties
            /// </param>
            public static Rule BeginUpdate(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, RuleUpdateParameters ruleUpdateProperties)
            {
                return operations.BeginUpdateAsync(resourceGroupName, profileName, ruleSetName, ruleName, ruleUpdateProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='ruleUpdateProperties'>
            /// Delivery rule properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Rule> BeginUpdateAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, RuleUpdateParameters ruleUpdateProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, ruleUpdateProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            public static void BeginDelete(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, profileName, ruleSetName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing delivery rule within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the Resource group within the Azure subscription.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile which is unique within the resource group.
            /// </param>
            /// <param name='ruleSetName'>
            /// Name of the rule set under the profile.
            /// </param>
            /// <param name='ruleName'>
            /// Name of the delivery rule which is unique within the endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IRulesOperations operations, string resourceGroupName, string profileName, string ruleSetName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, profileName, ruleSetName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all of the existing delivery rules within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Rule> ListByRuleSetNext(this IRulesOperations operations, string nextPageLink)
            {
                return operations.ListByRuleSetNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the existing delivery rules within a rule set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Rule>> ListByRuleSetNextAsync(this IRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRuleSetNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
