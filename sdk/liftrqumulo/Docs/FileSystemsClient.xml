<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetFileSystemAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetFileSystemAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

Response response = await client.GetFileSystemAsync("<resourceGroupName>", "<fileSystemName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="GetFileSystem(String,String,RequestContext)">
<example>
This sample shows how to call GetFileSystem with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

Response response = client.GetFileSystem("<resourceGroupName>", "<fileSystemName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="UpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {};

Response response = await client.UpdateAsync("<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    identity = new {
        type = "None",
        userAssignedIdentities = new {
            key = new {},
        },
    },
    tags = new {
        key = "<String>",
    },
    properties = new {
        marketplaceDetails = new {
            marketplaceSubscriptionId = "<marketplaceSubscriptionId>",
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        clusterLoginUrl = "<clusterLoginUrl>",
        privateIPs = new[] {
            "<String>"
        },
    },
};

Response response = await client.UpdateAsync("<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileSystemResourceUpdate</c>:
<code>{
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Optional. Marketplace details
    userDetails: {
      email: string, # Required. User Email
    }, # Optional. User Details
    delegatedSubnetId: string, # Optional. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
  }, # Optional. The updatable properties of the FileSystemResource.
}
</code>

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="Update(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call Update with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {};

Response response = client.Update("<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Update with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    identity = new {
        type = "None",
        userAssignedIdentities = new {
            key = new {},
        },
    },
    tags = new {
        key = "<String>",
    },
    properties = new {
        marketplaceDetails = new {
            marketplaceSubscriptionId = "<marketplaceSubscriptionId>",
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        clusterLoginUrl = "<clusterLoginUrl>",
        privateIPs = new[] {
            "<String>"
        },
    },
};

Response response = client.Update("<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileSystemResourceUpdate</c>:
<code>{
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Optional. Marketplace details
    userDetails: {
      email: string, # Required. User Email
    }, # Optional. User Details
    delegatedSubnetId: string, # Optional. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
  }, # Optional. The updatable properties of the FileSystemResource.
}
</code>

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="GetFileSystemsBySubscriptionAsync(RequestContext)">
<example>
This sample shows how to call GetFileSystemsBySubscriptionAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

await foreach (var data in client.GetFileSystemsBySubscriptionAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>FileSystemResourceListResultValue</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="GetFileSystemsBySubscription(RequestContext)">
<example>
This sample shows how to call GetFileSystemsBySubscription and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

foreach (var data in client.GetFileSystemsBySubscription())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>FileSystemResourceListResultValue</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="GetFileSystemsByResourceGroupAsync(String,RequestContext)">
<example>
This sample shows how to call GetFileSystemsByResourceGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

await foreach (var data in client.GetFileSystemsByResourceGroupAsync("<resourceGroupName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>FileSystemResourceListResultValue</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="GetFileSystemsByResourceGroup(String,RequestContext)">
<example>
This sample shows how to call GetFileSystemsByResourceGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

foreach (var data in client.GetFileSystemsByResourceGroup("<resourceGroupName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
    Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
    Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>FileSystemResourceListResultValue</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(WaitUntil,String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        marketplaceDetails = new {
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        storageSku = "Standard",
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        adminPassword = "<adminPassword>",
        initialCapacity = 1234,
    },
    location = "<location>",
};

var operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        marketplaceDetails = new {
            marketplaceSubscriptionId = "<marketplaceSubscriptionId>",
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        storageSku = "Standard",
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        clusterLoginUrl = "<clusterLoginUrl>",
        privateIPs = new[] {
            "<String>"
        },
        adminPassword = "<adminPassword>",
        initialCapacity = 1234,
        availabilityZone = "<availabilityZone>",
    },
    identity = new {
        type = "None",
        userAssignedIdentities = new {
            key = new {},
        },
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(WaitUntil,String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        marketplaceDetails = new {
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        storageSku = "Standard",
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        adminPassword = "<adminPassword>",
        initialCapacity = 1234,
    },
    location = "<location>",
};

var operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var data = new {
    properties = new {
        marketplaceDetails = new {
            marketplaceSubscriptionId = "<marketplaceSubscriptionId>",
            planId = "<planId>",
            offerId = "<offerId>",
            publisherId = "<publisherId>",
        },
        storageSku = "Standard",
        userDetails = new {
            email = "<email>",
        },
        delegatedSubnetId = "<delegatedSubnetId>",
        clusterLoginUrl = "<clusterLoginUrl>",
        privateIPs = new[] {
            "<String>"
        },
        adminPassword = "<adminPassword>",
        initialCapacity = 1234,
        availabilityZone = "<availabilityZone>",
    },
    identity = new {
        type = "None",
        userAssignedIdentities = new {
            key = new {},
        },
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("planId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("publisherId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("marketplaceDetails").GetProperty("marketplaceSubscriptionStatus").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageSku").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("userDetails").GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("delegatedSubnetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("clusterLoginUrl").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privateIPs")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("adminPassword").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("initialCapacity").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("availabilityZone").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("tenantId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities").GetProperty("<test>").GetProperty("clientId").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("createdAt").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
Console.WriteLine(result.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

Response Body:

Schema for <c>FileSystemResource</c>:
<code>{
  properties: {
    marketplaceDetails: {
      marketplaceSubscriptionId: string, # Optional. Marketplace Subscription Id
      planId: string, # Required. Plan Id
      offerId: string, # Required. Offer Id
      publisherId: string, # Required. Publisher Id
      marketplaceSubscriptionStatus: &quot;PendingFulfillmentStart&quot; | &quot;Subscribed&quot; | &quot;Suspended&quot; | &quot;Unsubscribed&quot;, # Optional. Marketplace subscription status
    }, # Required. Marketplace details
    provisioningState: &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Updating&quot; | &quot;Deleting&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Deleted&quot; | &quot;NotSpecified&quot;, # Optional. Provisioning State of the resource
    storageSku: &quot;Standard&quot; | &quot;Performance&quot;, # Required. Storage Sku
    userDetails: {
      email: string, # Required. User Email
    }, # Required. User Details
    delegatedSubnetId: string, # Required. Delegated subnet id for Vnet injection
    clusterLoginUrl: string, # Optional. File system Id of the resource
    privateIPs: [string], # Optional. Private IPs of the resource
    adminPassword: string, # Required. Initial administrator password of the resource
    initialCapacity: number, # Required. Storage capacity in TB
    availabilityZone: string, # Optional. Availability zone
  }, # Required. The resource-specific properties for this resource.
  identity: {
    principalId: Guid, # Optional. The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    tenantId: Guid, # Optional. The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    type: &quot;None&quot; | &quot;SystemAssigned&quot; | &quot;UserAssigned&quot; | &quot;SystemAssigned, UserAssigned&quot;, # Required. Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    userAssignedIdentities: Dictionary&lt;string, UserAssignedIdentity&gt;, # Optional. The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
  }, # Optional. The managed service identities assigned to this resource.
  tags: Dictionary&lt;string, string&gt;, # Optional. Resource tags.
  location: string, # Required. The geo-location where the resource lives
  id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
  name: string, # Optional. The name of the resource
  type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
  systemData: {
    createdBy: string, # Optional. The identity that created the resource.
    createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
    createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
    lastModifiedBy: string, # Optional. The identity that last modified the resource.
    lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
    lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
  }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="Delete(WaitUntil,String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FileSystemsClient("<subscriptionId>", credential);

var operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<fileSystemName>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
  </members>
</doc>