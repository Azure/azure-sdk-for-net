// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Qumulo.Models
{
    /// <summary> The current status of the Job Run in a non-terminal state, if exists. </summary>
    public readonly partial struct QumuloJobRunStatus : IEquatable<QumuloJobRunStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QumuloJobRunStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QumuloJobRunStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QueuedValue = "Queued";
        private const string StartedValue = "Started";
        private const string RunningValue = "Running";
        private const string CancelRequestedValue = "CancelRequested";
        private const string CancelingValue = "Canceling";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";

        /// <summary> Queued. </summary>
        public static QumuloJobRunStatus Queued { get; } = new QumuloJobRunStatus(QueuedValue);
        /// <summary> Started. </summary>
        public static QumuloJobRunStatus Started { get; } = new QumuloJobRunStatus(StartedValue);
        /// <summary> Running. </summary>
        public static QumuloJobRunStatus Running { get; } = new QumuloJobRunStatus(RunningValue);
        /// <summary> CancelRequested. </summary>
        public static QumuloJobRunStatus CancelRequested { get; } = new QumuloJobRunStatus(CancelRequestedValue);
        /// <summary> Canceling. </summary>
        public static QumuloJobRunStatus Canceling { get; } = new QumuloJobRunStatus(CancelingValue);
        /// <summary> Canceled. </summary>
        public static QumuloJobRunStatus Canceled { get; } = new QumuloJobRunStatus(CanceledValue);
        /// <summary> Failed. </summary>
        public static QumuloJobRunStatus Failed { get; } = new QumuloJobRunStatus(FailedValue);
        /// <summary> Succeeded. </summary>
        public static QumuloJobRunStatus Succeeded { get; } = new QumuloJobRunStatus(SucceededValue);
        /// <summary> Determines if two <see cref="QumuloJobRunStatus"/> values are the same. </summary>
        public static bool operator ==(QumuloJobRunStatus left, QumuloJobRunStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QumuloJobRunStatus"/> values are not the same. </summary>
        public static bool operator !=(QumuloJobRunStatus left, QumuloJobRunStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="QumuloJobRunStatus"/>. </summary>
        public static implicit operator QumuloJobRunStatus(string value) => new QumuloJobRunStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QumuloJobRunStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QumuloJobRunStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
