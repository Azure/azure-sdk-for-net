// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Qumulo.Models
{
    /// <summary> The Agent status. </summary>
    public readonly partial struct QumuloAgentStatus : IEquatable<QumuloAgentStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QumuloAgentStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QumuloAgentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegisteringValue = "Registering";
        private const string OfflineValue = "Offline";
        private const string OnlineValue = "Online";
        private const string ExecutingValue = "Executing";
        private const string RequiresAttentionValue = "RequiresAttention";
        private const string UnregisteringValue = "Unregistering";

        /// <summary> Registering. </summary>
        public static QumuloAgentStatus Registering { get; } = new QumuloAgentStatus(RegisteringValue);
        /// <summary> Offline. </summary>
        public static QumuloAgentStatus Offline { get; } = new QumuloAgentStatus(OfflineValue);
        /// <summary> Online. </summary>
        public static QumuloAgentStatus Online { get; } = new QumuloAgentStatus(OnlineValue);
        /// <summary> Executing. </summary>
        public static QumuloAgentStatus Executing { get; } = new QumuloAgentStatus(ExecutingValue);
        /// <summary> RequiresAttention. </summary>
        public static QumuloAgentStatus RequiresAttention { get; } = new QumuloAgentStatus(RequiresAttentionValue);
        /// <summary> Unregistering. </summary>
        public static QumuloAgentStatus Unregistering { get; } = new QumuloAgentStatus(UnregisteringValue);
        /// <summary> Determines if two <see cref="QumuloAgentStatus"/> values are the same. </summary>
        public static bool operator ==(QumuloAgentStatus left, QumuloAgentStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QumuloAgentStatus"/> values are not the same. </summary>
        public static bool operator !=(QumuloAgentStatus left, QumuloAgentStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="QumuloAgentStatus"/>. </summary>
        public static implicit operator QumuloAgentStatus(string value) => new QumuloAgentStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QumuloAgentStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QumuloAgentStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
