// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RedisEnterprise;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class RedisEnterpriseModelFactory
    {

        /// <summary> Initializes a new instance of RedisEnterpriseOperationStatus. </summary>
        /// <param name="id"> The operation&apos;s unique id. </param>
        /// <param name="name"> The operation&apos;s name. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="status"> The current status of the operation. </param>
        /// <param name="error"> Error response describing why the operation failed. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseOperationStatus"/> instance for mocking. </returns>
        public static RedisEnterpriseOperationStatus RedisEnterpriseOperationStatus(ResourceIdentifier id = null, string name = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string status = null, ResponseError error = null)
        {
            return new RedisEnterpriseOperationStatus(id, name, startOn, endOn, status, error != null ? new ErrorResponse(error) : null);
        }

        /// <summary> Initializes a new instance of RedisEnterpriseClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The SKU to create, which affects price, performance, and features. </param>
        /// <param name="zones"> The Availability Zones where this cluster will be deployed. </param>
        /// <param name="minimumTlsVersion"> The minimum TLS version for the cluster to support, e.g. &apos;1.2&apos;. </param>
        /// <param name="hostName"> DNS name of the cluster endpoint. </param>
        /// <param name="provisioningState"> Current provisioning status of the cluster. </param>
        /// <param name="resourceState"> Current resource status of the cluster. </param>
        /// <param name="redisVersion"> Version of redis the cluster supports, e.g. &apos;6&apos;. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections associated with the specified RedisEnterprise cluster. </param>
        /// <returns> A new <see cref="RedisEnterprise.RedisEnterpriseClusterData"/> instance for mocking. </returns>
        public static RedisEnterpriseClusterData RedisEnterpriseClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RedisEnterpriseSku sku = null, IEnumerable<string> zones = null, RedisEnterpriseTlsVersion? minimumTlsVersion = null, string hostName = null, RedisEnterpriseProvisioningStatus? provisioningState = null, RedisEnterpriseClusterResourceState? resourceState = null, string redisVersion = null, IEnumerable<RedisEnterprisePrivateEndpointConnectionData> privateEndpointConnections = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            privateEndpointConnections ??= new List<RedisEnterprisePrivateEndpointConnectionData>();

            return new RedisEnterpriseClusterData(id, name, resourceType, systemData, tags, location, sku, zones?.ToList(), minimumTlsVersion, hostName, provisioningState, resourceState, redisVersion, privateEndpointConnections?.ToList());
        }

        /// <summary> Initializes a new instance of RedisEnterpriseSku. </summary>
        /// <param name="name"> The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.). </param>
        /// <param name="capacity"> The size of the RedisEnterprise cluster. Defaults to 2 or 3 depending on SKU. Valid values are (2, 4, 6, ...) for Enterprise SKUs and (3, 9, 15, ...) for Flash SKUs. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseSku"/> instance for mocking. </returns>
        public static RedisEnterpriseSku RedisEnterpriseSku(RedisEnterpriseSkuName name = default, int? capacity = null)
        {
            return new RedisEnterpriseSku(name, capacity);
        }

        /// <summary> Initializes a new instance of RedisEnterprisePrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> The resource of private end point. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="RedisEnterprise.RedisEnterprisePrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static RedisEnterprisePrivateEndpointConnectionData RedisEnterprisePrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, RedisEnterprisePrivateLinkServiceConnectionState connectionState = null, RedisEnterprisePrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            return new RedisEnterprisePrivateEndpointConnectionData(id, name, resourceType, systemData, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of RedisEnterprisePrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.RedisEnterprisePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static RedisEnterprisePrivateLinkServiceConnectionState RedisEnterprisePrivateLinkServiceConnectionState(RedisEnterprisePrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new RedisEnterprisePrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of RedisEnterpriseDatabaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="clientProtocol"> Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted. </param>
        /// <param name="port"> TCP port of the database endpoint. Specified at create time. Defaults to an available port. </param>
        /// <param name="provisioningState"> Current provisioning status of the database. </param>
        /// <param name="resourceState"> Current resource status of the database. </param>
        /// <param name="clusteringPolicy"> Clustering policy - default is OSSCluster. Specified at create time. </param>
        /// <param name="evictionPolicy"> Redis eviction policy - default is VolatileLRU. </param>
        /// <param name="persistence"> Persistence settings. </param>
        /// <param name="modules"> Optional set of redis modules to enable in this database - modules can only be added at creation time. </param>
        /// <param name="geoReplication"> Optional set of properties to configure geo replication for this database. </param>
        /// <returns> A new <see cref="RedisEnterprise.RedisEnterpriseDatabaseData"/> instance for mocking. </returns>
        public static RedisEnterpriseDatabaseData RedisEnterpriseDatabaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RedisEnterpriseClientProtocol? clientProtocol = null, int? port = null, RedisEnterpriseProvisioningStatus? provisioningState = null, RedisEnterpriseClusterResourceState? resourceState = null, RedisEnterpriseClusteringPolicy? clusteringPolicy = null, RedisEnterpriseEvictionPolicy? evictionPolicy = null, RedisPersistenceSettings persistence = null, IEnumerable<RedisEnterpriseModule> modules = null, RedisEnterpriseDatabaseGeoReplication geoReplication = null)
        {
            modules ??= new List<RedisEnterpriseModule>();

            return new RedisEnterpriseDatabaseData(id, name, resourceType, systemData, clientProtocol, port, provisioningState, resourceState, clusteringPolicy, evictionPolicy, persistence, modules?.ToList(), geoReplication);
        }

        /// <summary> Initializes a new instance of RedisPersistenceSettings. </summary>
        /// <param name="isAofEnabled"> Sets whether AOF is enabled. </param>
        /// <param name="isRdbEnabled"> Sets whether RDB is enabled. </param>
        /// <param name="aofFrequency"> Sets the frequency at which data is written to disk. </param>
        /// <param name="rdbFrequency"> Sets the frequency at which a snapshot of the database is created. </param>
        /// <returns> A new <see cref="Models.RedisPersistenceSettings"/> instance for mocking. </returns>
        public static RedisPersistenceSettings RedisPersistenceSettings(bool? isAofEnabled = null, bool? isRdbEnabled = null, PersistenceSettingAofFrequency? aofFrequency = null, PersistenceSettingRdbFrequency? rdbFrequency = null)
        {
            return new RedisPersistenceSettings(isAofEnabled, isRdbEnabled, aofFrequency, rdbFrequency);
        }

        /// <summary> Initializes a new instance of RedisEnterpriseModule. </summary>
        /// <param name="name"> The name of the module, e.g. &apos;RedisBloom&apos;, &apos;RediSearch&apos;, &apos;RedisTimeSeries&apos;. </param>
        /// <param name="args"> Configuration options for the module, e.g. &apos;ERROR_RATE 0.01 INITIAL_SIZE 400&apos;. </param>
        /// <param name="version"> The version of the module, e.g. &apos;1.0&apos;. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseModule"/> instance for mocking. </returns>
        public static RedisEnterpriseModule RedisEnterpriseModule(string name = null, string args = null, string version = null)
        {
            return new RedisEnterpriseModule(name, args, version);
        }

        /// <summary> Initializes a new instance of RedisEnterpriseDatabaseGeoReplication. </summary>
        /// <param name="groupNickname"> Name for the group of linked database resources. </param>
        /// <param name="linkedDatabases"> List of database resources to link with this database. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseDatabaseGeoReplication"/> instance for mocking. </returns>
        public static RedisEnterpriseDatabaseGeoReplication RedisEnterpriseDatabaseGeoReplication(string groupNickname = null, IEnumerable<RedisEnterpriseLinkedDatabase> linkedDatabases = null)
        {
            linkedDatabases ??= new List<RedisEnterpriseLinkedDatabase>();

            return new RedisEnterpriseDatabaseGeoReplication(groupNickname, linkedDatabases?.ToList());
        }

        /// <summary> Initializes a new instance of RedisEnterpriseLinkedDatabase. </summary>
        /// <param name="id"> Resource ID of a database resource to link with this database. </param>
        /// <param name="state"> State of the link between the database resources. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseLinkedDatabase"/> instance for mocking. </returns>
        public static RedisEnterpriseLinkedDatabase RedisEnterpriseLinkedDatabase(ResourceIdentifier id = null, RedisEnterpriseDatabaseLinkState? state = null)
        {
            return new RedisEnterpriseLinkedDatabase(id, state);
        }

        /// <summary> Initializes a new instance of RedisEnterpriseDataAccessKeys. </summary>
        /// <param name="primaryKey"> The current primary key that clients can use to authenticate. </param>
        /// <param name="secondaryKey"> The current secondary key that clients can use to authenticate. </param>
        /// <returns> A new <see cref="Models.RedisEnterpriseDataAccessKeys"/> instance for mocking. </returns>
        public static RedisEnterpriseDataAccessKeys RedisEnterpriseDataAccessKeys(string primaryKey = null, string secondaryKey = null)
        {
            return new RedisEnterpriseDataAccessKeys(primaryKey, secondaryKey);
        }

        /// <summary> Initializes a new instance of RedisEnterprisePrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource Private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.RedisEnterprisePrivateLinkResource"/> instance for mocking. </returns>
        public static RedisEnterprisePrivateLinkResource RedisEnterprisePrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new RedisEnterprisePrivateLinkResource(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }
    }
}
