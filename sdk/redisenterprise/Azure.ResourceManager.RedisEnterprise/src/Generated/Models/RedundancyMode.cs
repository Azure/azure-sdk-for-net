// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> Explains the current redundancy strategy of the cluster, which affects the expected SLA. </summary>
    public readonly partial struct RedundancyMode : IEquatable<RedundancyMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RedundancyMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RedundancyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string LRValue = "LR";
        private const string ZRValue = "ZR";

        /// <summary> No redundancy. Availability loss will occur. </summary>
        public static RedundancyMode None { get; } = new RedundancyMode(NoneValue);
        /// <summary> Local redundancy with high availability. </summary>
        public static RedundancyMode LR { get; } = new RedundancyMode(LRValue);
        /// <summary> Zone redundant. Higher availability. </summary>
        public static RedundancyMode ZR { get; } = new RedundancyMode(ZRValue);
        /// <summary> Determines if two <see cref="RedundancyMode"/> values are the same. </summary>
        public static bool operator ==(RedundancyMode left, RedundancyMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RedundancyMode"/> values are not the same. </summary>
        public static bool operator !=(RedundancyMode left, RedundancyMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RedundancyMode"/>. </summary>
        public static implicit operator RedundancyMode(string value) => new RedundancyMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RedundancyMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RedundancyMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
