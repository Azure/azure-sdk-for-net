// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> The type of RedisEnterprise cluster to deploy. Possible values: (Enterprise_E10, EnterpriseFlash_F300 etc.). </summary>
    public readonly partial struct Name : IEquatable<Name>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Name"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Name(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnterpriseE10Value = "Enterprise_E10";
        private const string EnterpriseE20Value = "Enterprise_E20";
        private const string EnterpriseE50Value = "Enterprise_E50";
        private const string EnterpriseE100Value = "Enterprise_E100";
        private const string EnterpriseFlashF300Value = "EnterpriseFlash_F300";
        private const string EnterpriseFlashF700Value = "EnterpriseFlash_F700";
        private const string EnterpriseFlashF1500Value = "EnterpriseFlash_F1500";

        /// <summary> Enterprise_E10. </summary>
        public static Name EnterpriseE10 { get; } = new Name(EnterpriseE10Value);
        /// <summary> Enterprise_E20. </summary>
        public static Name EnterpriseE20 { get; } = new Name(EnterpriseE20Value);
        /// <summary> Enterprise_E50. </summary>
        public static Name EnterpriseE50 { get; } = new Name(EnterpriseE50Value);
        /// <summary> Enterprise_E100. </summary>
        public static Name EnterpriseE100 { get; } = new Name(EnterpriseE100Value);
        /// <summary> EnterpriseFlash_F300. </summary>
        public static Name EnterpriseFlashF300 { get; } = new Name(EnterpriseFlashF300Value);
        /// <summary> EnterpriseFlash_F700. </summary>
        public static Name EnterpriseFlashF700 { get; } = new Name(EnterpriseFlashF700Value);
        /// <summary> EnterpriseFlash_F1500. </summary>
        public static Name EnterpriseFlashF1500 { get; } = new Name(EnterpriseFlashF1500Value);
        /// <summary> Determines if two <see cref="Name"/> values are the same. </summary>
        public static bool operator ==(Name left, Name right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Name"/> values are not the same. </summary>
        public static bool operator !=(Name left, Name right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Name"/>. </summary>
        public static implicit operator Name(string value) => new Name(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Name other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Name other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
