// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RedisEnterprise;

namespace Azure.ResourceManager.RedisEnterprise.Models
{
    /// <summary> A partial update to the RedisEnterprise cluster. </summary>
    public partial class RedisEnterpriseClusterPatch
    {
        /// <summary> Initializes a new instance of <see cref="RedisEnterpriseClusterPatch"/>. </summary>
        public RedisEnterpriseClusterPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
            PrivateEndpointConnections = new ChangeTrackingList<RedisEnterprisePrivateEndpointConnectionData>();
        }

        /// <summary> Initializes a new instance of <see cref="RedisEnterpriseClusterPatch"/>. </summary>
        /// <param name="sku"> The SKU to create, which affects price, performance, and features. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="minimumTlsVersion"> The minimum TLS version for the cluster to support, e.g. '1.2'. </param>
        /// <param name="encryption"> Encryption-at-rest configuration for the cluster. </param>
        /// <param name="hostName"> DNS name of the cluster endpoint. </param>
        /// <param name="provisioningState"> Current provisioning status of the cluster. </param>
        /// <param name="resourceState"> Current resource status of the cluster. </param>
        /// <param name="redisVersion"> Version of redis the cluster supports, e.g. '6'. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections associated with the specified RedisEnterprise cluster. </param>
        internal RedisEnterpriseClusterPatch(RedisEnterpriseSku sku, ManagedServiceIdentity identity, IDictionary<string, string> tags, RedisEnterpriseTlsVersion? minimumTlsVersion, ClusterPropertiesEncryption encryption, string hostName, RedisEnterpriseProvisioningStatus? provisioningState, RedisEnterpriseClusterResourceState? resourceState, string redisVersion, IReadOnlyList<RedisEnterprisePrivateEndpointConnectionData> privateEndpointConnections)
        {
            Sku = sku;
            Identity = identity;
            Tags = tags;
            MinimumTlsVersion = minimumTlsVersion;
            Encryption = encryption;
            HostName = hostName;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            RedisVersion = redisVersion;
            PrivateEndpointConnections = privateEndpointConnections;
        }

        /// <summary> The SKU to create, which affects price, performance, and features. </summary>
        public RedisEnterpriseSku Sku { get; set; }
        /// <summary> The identity of the resource. </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> The minimum TLS version for the cluster to support, e.g. '1.2'. </summary>
        public RedisEnterpriseTlsVersion? MinimumTlsVersion { get; set; }
        /// <summary> Encryption-at-rest configuration for the cluster. </summary>
        internal ClusterPropertiesEncryption Encryption { get; set; }
        /// <summary> All Customer-managed key encryption properties for the resource. Set this to an empty object to use Microsoft-managed key encryption. </summary>
        public RedisEnterpriseCustomerManagedKeyEncryption CustomerManagedKeyEncryption
        {
            get => Encryption is null ? default : Encryption.CustomerManagedKeyEncryption;
            set
            {
                if (Encryption is null)
                    Encryption = new ClusterPropertiesEncryption();
                Encryption.CustomerManagedKeyEncryption = value;
            }
        }

        /// <summary> DNS name of the cluster endpoint. </summary>
        public string HostName { get; }
        /// <summary> Current provisioning status of the cluster. </summary>
        public RedisEnterpriseProvisioningStatus? ProvisioningState { get; }
        /// <summary> Current resource status of the cluster. </summary>
        public RedisEnterpriseClusterResourceState? ResourceState { get; }
        /// <summary> Version of redis the cluster supports, e.g. '6'. </summary>
        public string RedisVersion { get; }
        /// <summary> List of private endpoint connections associated with the specified RedisEnterprise cluster. </summary>
        public IReadOnlyList<RedisEnterprisePrivateEndpointConnectionData> PrivateEndpointConnections { get; }
    }
}
