// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RedisEnterpriseCache.Models
{
    /// <summary> Redis eviction policy - default is VolatileLRU. </summary>
    public readonly partial struct EvictionPolicy : IEquatable<EvictionPolicy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EvictionPolicy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EvictionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllKeysLFUValue = "AllKeysLFU";
        private const string AllKeysLRUValue = "AllKeysLRU";
        private const string AllKeysRandomValue = "AllKeysRandom";
        private const string VolatileLRUValue = "VolatileLRU";
        private const string VolatileLFUValue = "VolatileLFU";
        private const string VolatileTTLValue = "VolatileTTL";
        private const string VolatileRandomValue = "VolatileRandom";
        private const string NoEvictionValue = "NoEviction";

        /// <summary> AllKeysLFU. </summary>
        public static EvictionPolicy AllKeysLFU { get; } = new EvictionPolicy(AllKeysLFUValue);
        /// <summary> AllKeysLRU. </summary>
        public static EvictionPolicy AllKeysLRU { get; } = new EvictionPolicy(AllKeysLRUValue);
        /// <summary> AllKeysRandom. </summary>
        public static EvictionPolicy AllKeysRandom { get; } = new EvictionPolicy(AllKeysRandomValue);
        /// <summary> VolatileLRU. </summary>
        public static EvictionPolicy VolatileLRU { get; } = new EvictionPolicy(VolatileLRUValue);
        /// <summary> VolatileLFU. </summary>
        public static EvictionPolicy VolatileLFU { get; } = new EvictionPolicy(VolatileLFUValue);
        /// <summary> VolatileTTL. </summary>
        public static EvictionPolicy VolatileTTL { get; } = new EvictionPolicy(VolatileTTLValue);
        /// <summary> VolatileRandom. </summary>
        public static EvictionPolicy VolatileRandom { get; } = new EvictionPolicy(VolatileRandomValue);
        /// <summary> NoEviction. </summary>
        public static EvictionPolicy NoEviction { get; } = new EvictionPolicy(NoEvictionValue);
        /// <summary> Determines if two <see cref="EvictionPolicy"/> values are the same. </summary>
        public static bool operator ==(EvictionPolicy left, EvictionPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EvictionPolicy"/> values are not the same. </summary>
        public static bool operator !=(EvictionPolicy left, EvictionPolicy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EvictionPolicy"/>. </summary>
        public static implicit operator EvictionPolicy(string value) => new EvictionPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EvictionPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EvictionPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
