// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RedisEnterpriseCache.Models
{
    /// <summary> Current resource status. </summary>
    public readonly partial struct ResourceState : IEquatable<ResourceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "Running";
        private const string CreatingValue = "Creating";
        private const string CreateFailedValue = "CreateFailed";
        private const string UpdatingValue = "Updating";
        private const string UpdateFailedValue = "UpdateFailed";
        private const string DeletingValue = "Deleting";
        private const string DeleteFailedValue = "DeleteFailed";
        private const string EnablingValue = "Enabling";
        private const string EnableFailedValue = "EnableFailed";
        private const string DisablingValue = "Disabling";
        private const string DisableFailedValue = "DisableFailed";
        private const string DisabledValue = "Disabled";

        /// <summary> Running. </summary>
        public static ResourceState Running { get; } = new ResourceState(RunningValue);
        /// <summary> Creating. </summary>
        public static ResourceState Creating { get; } = new ResourceState(CreatingValue);
        /// <summary> CreateFailed. </summary>
        public static ResourceState CreateFailed { get; } = new ResourceState(CreateFailedValue);
        /// <summary> Updating. </summary>
        public static ResourceState Updating { get; } = new ResourceState(UpdatingValue);
        /// <summary> UpdateFailed. </summary>
        public static ResourceState UpdateFailed { get; } = new ResourceState(UpdateFailedValue);
        /// <summary> Deleting. </summary>
        public static ResourceState Deleting { get; } = new ResourceState(DeletingValue);
        /// <summary> DeleteFailed. </summary>
        public static ResourceState DeleteFailed { get; } = new ResourceState(DeleteFailedValue);
        /// <summary> Enabling. </summary>
        public static ResourceState Enabling { get; } = new ResourceState(EnablingValue);
        /// <summary> EnableFailed. </summary>
        public static ResourceState EnableFailed { get; } = new ResourceState(EnableFailedValue);
        /// <summary> Disabling. </summary>
        public static ResourceState Disabling { get; } = new ResourceState(DisablingValue);
        /// <summary> DisableFailed. </summary>
        public static ResourceState DisableFailed { get; } = new ResourceState(DisableFailedValue);
        /// <summary> Disabled. </summary>
        public static ResourceState Disabled { get; } = new ResourceState(DisabledValue);
        /// <summary> Determines if two <see cref="ResourceState"/> values are the same. </summary>
        public static bool operator ==(ResourceState left, ResourceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceState"/> values are not the same. </summary>
        public static bool operator !=(ResourceState left, ResourceState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceState"/>. </summary>
        public static implicit operator ResourceState(string value) => new ResourceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
