// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RedisEnterpriseCache.Models
{
    /// <summary> Sets the frequency at which data is written to disk. </summary>
    public readonly partial struct AofFrequency : IEquatable<AofFrequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AofFrequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AofFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneSValue = "1s";
        private const string AlwaysValue = "always";

        /// <summary> 1s. </summary>
        public static AofFrequency OneS { get; } = new AofFrequency(OneSValue);
        /// <summary> always. </summary>
        public static AofFrequency Always { get; } = new AofFrequency(AlwaysValue);
        /// <summary> Determines if two <see cref="AofFrequency"/> values are the same. </summary>
        public static bool operator ==(AofFrequency left, AofFrequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AofFrequency"/> values are not the same. </summary>
        public static bool operator !=(AofFrequency left, AofFrequency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AofFrequency"/>. </summary>
        public static implicit operator AofFrequency(string value) => new AofFrequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AofFrequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AofFrequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
