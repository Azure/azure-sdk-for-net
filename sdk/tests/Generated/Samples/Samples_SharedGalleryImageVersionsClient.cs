// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_SharedGalleryImageVersionsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSharedGalleryImageVersion_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            Response response = client.GetSharedGalleryImageVersion("<location>", "<galleryUniqueName>", "<galleryImageName>", "<galleryImageVersionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSharedGalleryImageVersion_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            Response response = await client.GetSharedGalleryImageVersionAsync("<location>", "<galleryUniqueName>", "<galleryImageName>", "<galleryImageVersionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSharedGalleryImageVersion_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            Response response = client.GetSharedGalleryImageVersion("<location>", "<galleryUniqueName>", "<galleryImageName>", "<galleryImageVersionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludeFromLatest").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSharedGalleryImageVersion_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            Response response = await client.GetSharedGalleryImageVersionAsync("<location>", "<galleryUniqueName>", "<galleryImageName>", "<galleryImageVersionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("publishedDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("excludeFromLatest").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSharedGalleryImageVersions_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetSharedGalleryImageVersions("<location>", "<galleryUniqueName>", "<galleryImageName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSharedGalleryImageVersions_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetSharedGalleryImageVersionsAsync("<location>", "<galleryUniqueName>", "<galleryImageName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSharedGalleryImageVersions_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetSharedGalleryImageVersions("<location>", "<galleryUniqueName>", "<galleryImageName>", "tenant", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("excludeFromLatest").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSharedGalleryImageVersions_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SharedGalleryImageVersionsClient client = new SharedGalleryImageVersionsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetSharedGalleryImageVersionsAsync("<location>", "<galleryUniqueName>", "<galleryImageName>", "tenant", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("publishedDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("excludeFromLatest").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }
    }
}
