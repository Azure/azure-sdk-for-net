// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_GalleriesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGallery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Response response = client.GetGallery("<resourceGroupName>", "<galleryName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGallery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryAsync("<resourceGroupName>", "<galleryName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGallery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Response response = client.GetGallery("<resourceGroupName>", "<galleryName>", "Permissions", "SharingProfile/Groups", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGallery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryAsync("<resourceGroupName>", "<galleryName>", "Permissions", "SharingProfile/Groups", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleries_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleries(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleries_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleriesAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleries_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleries(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleries_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleriesAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleriesByResourceGroup_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleriesByResourceGroup("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleriesByResourceGroup_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleriesByResourceGroupAsync("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleriesByResourceGroup_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleriesByResourceGroup("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleriesByResourceGroup_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleriesByResourceGroupAsync("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    identifier = new object(),
                    sharingProfile = new
                    {
                        permissions = "Private",
                        communityGalleryInfo = new
                        {
                            publisherUri = "<publisherUri>",
                            publisherContact = "<publisherContact>",
                            eula = "<eula>",
                            publicNamePrefix = "<publicNamePrefix>",
                        },
                    },
                    softDeletePolicy = new
                    {
                        isSoftDeleteEnabled = true,
                    },
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    identifier = new object(),
                    sharingProfile = new
                    {
                        permissions = "Private",
                        communityGalleryInfo = new
                        {
                            publisherUri = "<publisherUri>",
                            publisherContact = "<publisherContact>",
                            eula = "<eula>",
                            publicNamePrefix = "<publicNamePrefix>",
                        },
                    },
                    softDeletePolicy = new
                    {
                        isSoftDeleteEnabled = true,
                    },
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    identifier = new object(),
                    sharingProfile = new
                    {
                        permissions = "Private",
                        communityGalleryInfo = new
                        {
                            publisherUri = "<publisherUri>",
                            publisherContact = "<publisherContact>",
                            eula = "<eula>",
                            publicNamePrefix = "<publicNamePrefix>",
                        },
                    },
                    softDeletePolicy = new
                    {
                        isSoftDeleteEnabled = true,
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    identifier = new object(),
                    sharingProfile = new
                    {
                        permissions = "Private",
                        communityGalleryInfo = new
                        {
                            publisherUri = "<publisherUri>",
                            publisherContact = "<publisherContact>",
                            eula = "<eula>",
                            publicNamePrefix = "<publicNamePrefix>",
                        },
                    },
                    softDeletePolicy = new
                    {
                        isSoftDeleteEnabled = true,
                    },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
        }
    }
}
