// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.Compute.Samples
{
    public partial class Samples_ResourceSkusClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetResourceSkus_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ResourceSkusClient client = new ResourceSkusClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetResourceSkus(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetResourceSkus_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ResourceSkusClient client = new ResourceSkusClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetResourceSkusAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetResourceSkus_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ResourceSkusClient client = new ResourceSkusClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetResourceSkus("<filter>", "<includeExtendedLocations>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("resourceType").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("family").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("minimum").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("maximum").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("scaleType").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zones")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("name")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("capabilities")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("capabilities")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("extendedLocations")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("apiVersions")[0].ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("meterID").ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("quantity").ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("extendedUnit").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("values")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("restrictionInfo").GetProperty("locations")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("restrictionInfo").GetProperty("zones")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("reasonCode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetResourceSkus_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ResourceSkusClient client = new ResourceSkusClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetResourceSkusAsync("<filter>", "<includeExtendedLocations>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("resourceType").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("tier").ToString());
                Console.WriteLine(result.GetProperty("size").ToString());
                Console.WriteLine(result.GetProperty("family").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("minimum").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("maximum").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("default").ToString());
                Console.WriteLine(result.GetProperty("capacity").GetProperty("scaleType").ToString());
                Console.WriteLine(result.GetProperty("locations")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zones")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("name")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("capabilities")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("zoneDetails")[0].GetProperty("capabilities")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("extendedLocations")[0].ToString());
                Console.WriteLine(result.GetProperty("locationInfo")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("apiVersions")[0].ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("meterID").ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("quantity").ToString());
                Console.WriteLine(result.GetProperty("costs")[0].GetProperty("extendedUnit").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("values")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("restrictionInfo").GetProperty("locations")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("restrictionInfo").GetProperty("zones")[0].ToString());
                Console.WriteLine(result.GetProperty("restrictions")[0].GetProperty("reasonCode").ToString());
            }
        }
    }
}
