// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_CommunityGalleriesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGallery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleriesClient client = new CommunityGalleriesClient("<SubscriptionId>", credential);

            Response response = client.GetCommunityGallery("<location>", "<publicGalleryName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGallery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleriesClient client = new CommunityGalleriesClient("<SubscriptionId>", credential);

            Response response = await client.GetCommunityGalleryAsync("<location>", "<publicGalleryName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGallery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleriesClient client = new CommunityGalleriesClient("<SubscriptionId>", credential);

            Response response = client.GetCommunityGallery("<location>", "<publicGalleryName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGallery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleriesClient client = new CommunityGalleriesClient("<SubscriptionId>", credential);

            Response response = await client.GetCommunityGalleryAsync("<location>", "<publicGalleryName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publisherUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publisherContact").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("publicNames")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("communityMetadata").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
        }
    }
}
