// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_CommunityGalleryImagesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGalleryImage_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            Response response = client.GetCommunityGalleryImage("<location>", "<publicGalleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGalleryImage_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            Response response = await client.GetCommunityGalleryImageAsync("<location>", "<publicGalleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGalleryImage_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            Response response = client.GetCommunityGalleryImage("<location>", "<publicGalleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGalleryImage_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            Response response = await client.GetCommunityGalleryImageAsync("<location>", "<publicGalleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGalleryImages_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetCommunityGalleryImages("<location>", "<publicGalleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGalleryImages_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetCommunityGalleryImagesAsync("<location>", "<publicGalleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCommunityGalleryImages_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetCommunityGalleryImages("<location>", "<publicGalleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCommunityGalleryImages_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            CommunityGalleryImagesClient client = new CommunityGalleryImagesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetCommunityGalleryImagesAsync("<location>", "<publicGalleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disclaimer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("artifactTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identifier").GetProperty("uniqueId").ToString());
            }
        }
    }
}
