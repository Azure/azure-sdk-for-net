// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_GalleryImagesClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryImage_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Response response = client.GetGalleryImage("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryImage_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryImageAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryImage_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Response response = client.GetGalleryImage("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryImage_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryImageAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryImagesByGallery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleryImagesByGallery("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryImagesByGallery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleryImagesByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryImagesByGallery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleryImagesByGallery("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryImagesByGallery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleryImagesByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    osType = "Windows",
                    osState = "Generalized",
                    hyperVGeneration = "V1",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    identifier = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                    },
                    recommended = new
                    {
                        vCPUs = new
                        {
                            min = 1234,
                            max = 1234,
                        },
                    },
                    disallowed = new
                    {
                        diskTypes = new object[]
            {
"<diskTypes>"
            },
                    },
                    purchasePlan = new
                    {
                        name = "<name>",
                        publisher = "<publisher>",
                        product = "<product>",
                    },
                    features = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    architecture = "x64",
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    osType = "Windows",
                    osState = "Generalized",
                    hyperVGeneration = "V1",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    identifier = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                    },
                    recommended = new
                    {
                        vCPUs = new
                        {
                            min = 1234,
                            max = 1234,
                        },
                    },
                    disallowed = new
                    {
                        diskTypes = new object[]
            {
"<diskTypes>"
            },
                    },
                    purchasePlan = new
                    {
                        name = "<name>",
                        publisher = "<publisher>",
                        product = "<product>",
                    },
                    features = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    architecture = "x64",
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    osType = "Windows",
                    osState = "Generalized",
                    hyperVGeneration = "V1",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    identifier = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                    },
                    recommended = new
                    {
                        vCPUs = new
                        {
                            min = 1234,
                            max = 1234,
                        },
                    },
                    disallowed = new
                    {
                        diskTypes = new object[]
            {
"<diskTypes>"
            },
                    },
                    purchasePlan = new
                    {
                        name = "<name>",
                        publisher = "<publisher>",
                        product = "<product>",
                    },
                    features = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    architecture = "x64",
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    osType = "Windows",
                    osState = "Generalized",
                    hyperVGeneration = "V1",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    identifier = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                    },
                    recommended = new
                    {
                        vCPUs = new
                        {
                            min = 1234,
                            max = 1234,
                        },
                    },
                    disallowed = new
                    {
                        diskTypes = new object[]
            {
"<diskTypes>"
            },
                    },
                    purchasePlan = new
                    {
                        name = "<name>",
                        publisher = "<publisher>",
                        product = "<product>",
                    },
                    features = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    architecture = "x64",
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("osState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("hyperVGeneration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("vCPUs").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("min").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("recommended").GetProperty("memory").GetProperty("max").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("disallowed").GetProperty("diskTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("purchasePlan").GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("features")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("architecture").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryImagesClient client = new GalleryImagesClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>");
        }
    }
}
