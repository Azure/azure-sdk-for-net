// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_GallerySharingProfileClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GallerySharingProfileClient client = new GallerySharingProfileClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationType = "Add",
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("operationType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GallerySharingProfileClient client = new GallerySharingProfileClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationType = "Add",
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("operationType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GallerySharingProfileClient client = new GallerySharingProfileClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationType = "Add",
                groups = new object[]
            {
new
{
type = "Subscriptions",
ids = new object[]
{
"<ids>"
},
}
            },
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("operationType").ToString());
            Console.WriteLine(result.GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("groups")[0].GetProperty("ids")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GallerySharingProfileClient client = new GallerySharingProfileClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationType = "Add",
                groups = new object[]
            {
new
{
type = "Subscriptions",
ids = new object[]
{
"<ids>"
},
}
            },
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("operationType").ToString());
            Console.WriteLine(result.GetProperty("groups")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("groups")[0].GetProperty("ids")[0].ToString());
        }
    }
}
