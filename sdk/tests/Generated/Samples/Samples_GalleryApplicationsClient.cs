// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AzureResourceManagerGallery.Samples
{
    public partial class Samples_GalleryApplicationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryApplication_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Response response = client.GetGalleryApplication("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryApplication_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryApplicationAsync("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryApplication_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Response response = client.GetGalleryApplication("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryApplication_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Response response = await client.GetGalleryApplicationAsync("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryApplicationsByGallery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleryApplicationsByGallery("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryApplicationsByGallery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleryApplicationsByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("location").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGalleryApplicationsByGallery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetGalleryApplicationsByGallery("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGalleryApplicationsByGallery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetGalleryApplicationsByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    supportedOSType = "Windows",
                    customActions = new object[]
            {
new
{
name = "<name>",
script = "<script>",
description = "<description>",
parameters = new object[]
{
new
{
name = "<name>",
required = true,
type = "String",
defaultValue = "<defaultValue>",
description = "<description>",
}
},
}
            },
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    supportedOSType = "Windows",
                    customActions = new object[]
            {
new
{
name = "<name>",
script = "<script>",
description = "<description>",
parameters = new object[]
{
new
{
name = "<name>",
required = true,
type = "String",
defaultValue = "<defaultValue>",
description = "<description>",
}
},
}
            },
                },
                location = "<location>",
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    supportedOSType = "Windows",
                    customActions = new object[]
            {
new
{
name = "<name>",
script = "<script>",
description = "<description>",
parameters = new object[]
{
new
{
name = "<name>",
required = true,
type = "String",
defaultValue = "<defaultValue>",
description = "<description>",
}
},
}
            },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    description = "<description>",
                    eula = "<eula>",
                    privacyStatementUri = "<privacyStatementUri>",
                    releaseNoteUri = "<releaseNoteUri>",
                    endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
                    supportedOSType = "Windows",
                    customActions = new object[]
            {
new
{
name = "<name>",
script = "<script>",
description = "<description>",
parameters = new object[]
{
new
{
name = "<name>",
required = true,
type = "String",
defaultValue = "<defaultValue>",
description = "<description>",
}
},
}
            },
                },
                tags = new
                {
                    key = "<tags>",
                },
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
        }
    }
}
