// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_ResourceGroupResourceExtensions
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetScheduledAction_ScheduledActionsGetMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ScheduledAction result = await resourceGroupResource.GetScheduledActionAsync(scheduledActionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdateScheduledAction_ScheduledActionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ScheduledAction resource = new ScheduledAction(new AzureLocation("vmuhgdgipeypkcv"))
            {
                Properties = new ScheduledActionProperties(Models.ResourceType.VirtualMachine, ScheduledActionType.Start, DateTimeOffset.Parse("2025-04-17T00:23:55.281Z"), new ScheduledActionsSchedule(XmlConvert.ToTimeSpan("19:00:00"), "g", new WeekDay[] { WeekDay.Monday }, new Month[] { Month.January }, new int[] { 15 })
                {
                    ExecutionParameters = new ScheduledActionExecutionParameterDetail
                    {
                        OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                        RetryPolicy = new UserRequestRetryPolicy
                        {
                            RetryCount = 17,
                            RetryWindowInMinutes = 29,
                        },
                    },
                    DeadlineType = ScheduledActionDeadlineType.Unknown,
                }, new NotificationProperties[]
            {
new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}
            })
                {
                    EndOn = DateTimeOffset.Parse("2025-04-17T00:23:55.286Z"),
                    Disabled = true,
                },
                Tags =
{
["key2102"] = "obwsqwdydpkscnzceopxgkrhrxtdhv"
},
            };
            ArmOperation<ScheduledAction> lro = await resourceGroupResource.CreateOrUpdateScheduledActionAsync(WaitUntil.Completed, scheduledActionName, resource);
            ScheduledAction result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateScheduledAction_ScheduledActionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ScheduledActionUpdate properties = new ScheduledActionUpdate
            {
                Tags =
{
["key9989"] = "tryjidk"
},
                Properties = new ScheduledActionUpdateProperties
                {
                    ResourceType = Models.ResourceType.VirtualMachine,
                    ActionType = ScheduledActionType.Start,
                    StartOn = DateTimeOffset.Parse("2025-04-17T00:23:58.149Z"),
                    EndOn = DateTimeOffset.Parse("2025-04-17T00:23:58.149Z"),
                    Schedule = new ScheduledActionsSchedule(XmlConvert.ToTimeSpan("19:00:00"), "bni", new WeekDay[] { WeekDay.Monday }, new Month[] { Month.January }, new int[] { 15 })
                    {
                        ExecutionParameters = new ScheduledActionExecutionParameterDetail
                        {
                            OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                            RetryPolicy = new UserRequestRetryPolicy
                            {
                                RetryCount = 17,
                                RetryWindowInMinutes = 29,
                            },
                        },
                        DeadlineType = ScheduledActionDeadlineType.Unknown,
                    },
                    NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
                    Disabled = true,
                },
            };
            ScheduledAction result = await resourceGroupResource.UpdateScheduledActionAsync(scheduledActionName, properties);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DeleteScheduledAction_ScheduledActionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            await resourceGroupResource.DeleteScheduledActionAsync(WaitUntil.Completed, scheduledActionName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetScheduledActionsByResourceGroup_ScheduledActionsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            await foreach (ScheduledAction item in resourceGroupResource.GetScheduledActionsByResourceGroupAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetScheduledActionsByResourceGroup_ScheduledActionsListByResourceGroupMinimumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            await foreach (ScheduledAction item in resourceGroupResource.GetScheduledActionsByResourceGroupAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResourcesScheduledActions_ScheduledActionsListResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActionResource_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            string scheduledActionName = "myScheduledAction";
            await foreach (ScheduledActionResourceModel item in resourceGroupResource.GetResourcesScheduledActionsAsync(scheduledActionName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task AttachResourcesScheduledAction_ScheduledActionsAttachResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_AttachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_AttachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ResourceAttachContent content = new ResourceAttachContent(new ScheduledActionResourceModel[]
            {
new ScheduledActionResourceModel(new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm"))
{
NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            RecurringActionsResourceOperationResult result = await resourceGroupResource.AttachResourcesScheduledActionAsync(scheduledActionName, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachResourcesScheduledAction_ScheduledActionsDetachResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_DetachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_DetachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ResourceDetachContent content = new ResourceDetachContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm") });
            RecurringActionsResourceOperationResult result = await resourceGroupResource.DetachResourcesScheduledActionAsync(scheduledActionName, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PatchResourcesScheduledAction_ScheduledActionsPatchResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_PatchResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_PatchResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ResourcePatchContent content = new ResourcePatchContent(new ScheduledActionResourceModel[]
            {
new ScheduledActionResourceModel(new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm"))
{
NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            RecurringActionsResourceOperationResult result = await resourceGroupResource.PatchResourcesScheduledActionAsync(scheduledActionName, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DisableScheduledAction_ScheduledActionsDisableMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Disable_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_Disable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            await resourceGroupResource.DisableScheduledActionAsync(scheduledActionName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task EnableScheduledAction_ScheduledActionsEnableMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Enable_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_Enable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            await resourceGroupResource.EnableScheduledActionAsync(scheduledActionName);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CancelNextOccurrenceScheduledAction_ScheduledActionsCancelNextOccurrenceMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_CancelNextOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_CancelNextOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm") });
            RecurringActionsResourceOperationResult result = await resourceGroupResource.CancelNextOccurrenceScheduledActionAsync(scheduledActionName, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task TriggerManualOccurrenceScheduledAction_ScheduledActionsTriggerManualOccurrenceMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_TriggerManualOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_TriggerManualOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            OccurrenceResource result = await resourceGroupResource.TriggerManualOccurrenceScheduledActionAsync(scheduledActionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
