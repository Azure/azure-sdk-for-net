// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_ScheduledActionCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ScheduledActionsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ScheduledActionData data = new ScheduledActionData(new AzureLocation("vmuhgdgipeypkcv"))
            {
                Properties = new ScheduledActionProperties(Models.ResourceType.VirtualMachine, ScheduledActionType.Start, DateTimeOffset.Parse("2025-04-17T00:23:55.281Z"), new ScheduledActionsSchedule(XmlConvert.ToTimeSpan("19:00:00"), "g", new WeekDay[] { WeekDay.Monday }, new Month[] { Month.January }, new int[] { 15 })
                {
                    ExecutionParameters = new ScheduledActionExecutionParameterDetail
                    {
                        OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                        RetryPolicy = new UserRequestRetryPolicy
                        {
                            RetryCount = 17,
                            RetryWindowInMinutes = 29,
                        },
                    },
                    DeadlineType = ScheduledActionDeadlineType.Unknown,
                }, new NotificationProperties[]
            {
new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}
            })
                {
                    EndOn = DateTimeOffset.Parse("2025-04-17T00:23:55.286Z"),
                    Disabled = true,
                },
                Tags =
{
["key2102"] = "obwsqwdydpkscnzceopxgkrhrxtdhv"
},
            };
            ArmOperation<ScheduledActionResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, scheduledActionName, data);
            ScheduledActionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduledActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ScheduledActionsGetMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            ScheduledActionResource result = await collection.GetAsync(scheduledActionName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduledActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ScheduledActionsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation and iterate over the result
            await foreach (ScheduledActionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ScheduledActionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ScheduledActionsListByResourceGroupMinimumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation and iterate over the result
            await foreach (ScheduledActionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ScheduledActionData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ScheduledActionsGetMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            bool result = await collection.ExistsAsync(scheduledActionName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ScheduledActionsGetMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ScheduledActionResource
            ScheduledActionCollection collection = resourceGroupResource.GetScheduledActions();

            // invoke the operation
            string scheduledActionName = "myScheduledAction";
            NullableResponse<ScheduledActionResource> response = await collection.GetIfExistsAsync(scheduledActionName);
            ScheduledActionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ScheduledActionData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
