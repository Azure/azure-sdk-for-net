// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeSchedule.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ComputeSchedule.Samples
{
    public partial class Sample_ScheduledActionResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ScheduledActionsGetMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            ScheduledActionResource result = await scheduledAction.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduledActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ScheduledActionsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            await scheduledAction.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ScheduledActionsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledAction_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            ScheduledActionPatch patch = new ScheduledActionPatch
            {
                Tags =
{
["key9989"] = "tryjidk"
},
                Properties = new ScheduledActionUpdateProperties
                {
                    ResourceType = Models.ResourceType.VirtualMachine,
                    ActionType = ScheduledActionType.Start,
                    StartOn = DateTimeOffset.Parse("2025-04-17T00:23:58.149Z"),
                    EndOn = DateTimeOffset.Parse("2025-04-17T00:23:58.149Z"),
                    Schedule = new ScheduledActionsSchedule(XmlConvert.ToTimeSpan("19:00:00"), "bni", new WeekDay[] { WeekDay.Monday }, new Month[] { Month.January }, new int[] { 15 })
                    {
                        ExecutionParameters = new ScheduledActionExecutionParameterDetail
                        {
                            OptimizationPreference = ScheduledActionOptimizationPreference.Cost,
                            RetryPolicy = new UserRequestRetryPolicy
                            {
                                RetryCount = 17,
                                RetryWindowInMinutes = 29,
                            },
                        },
                        DeadlineType = ScheduledActionDeadlineType.Unknown,
                    },
                    NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
                    Disabled = true,
                },
            };
            ScheduledActionResource result = await scheduledAction.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ScheduledActionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetResources_ScheduledActionsListResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_ListResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_ListResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation and iterate over the result
            await foreach (ScheduledActionResourceModel item in scheduledAction.GetResourcesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task AttachResources_ScheduledActionsAttachResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_AttachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_AttachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            ResourceAttachContent content = new ResourceAttachContent(new ScheduledActionResourceModel[]
            {
new ScheduledActionResourceModel(new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm"))
{
NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            RecurringActionsResourceOperationResult result = await scheduledAction.AttachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task DetachResources_ScheduledActionsDetachResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_DetachResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_DetachResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            ResourceDetachContent content = new ResourceDetachContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm") });
            RecurringActionsResourceOperationResult result = await scheduledAction.DetachResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task PatchResources_ScheduledActionsPatchResourcesMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_PatchResources_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_PatchResources" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            ResourcePatchContent content = new ResourcePatchContent(new ScheduledActionResourceModel[]
            {
new ScheduledActionResourceModel(new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm"))
{
NotificationSettings = {new NotificationProperties("wbhryycyolvnypjxzlawwvb", NotificationType.Email, Language.EnUs)
{
Disabled = true,
}},
}
            });
            RecurringActionsResourceOperationResult result = await scheduledAction.PatchResourcesAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Disable_ScheduledActionsDisableMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Disable_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_Disable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            await scheduledAction.DisableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Enable_ScheduledActionsEnableMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_Enable_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_Enable" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            await scheduledAction.EnableAsync();

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CancelNextOccurrence_ScheduledActionsCancelNextOccurrenceMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_CancelNextOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_CancelNextOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            CancelOccurrenceContent content = new CancelOccurrenceContent(new ResourceIdentifier[] { new ResourceIdentifier("/subscriptions/1d04e8f1-ee04-4056-b0b2-718f5bb45b04/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/myVm") });
            RecurringActionsResourceOperationResult result = await scheduledAction.CancelNextOccurrenceAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task TriggerManualOccurrence_ScheduledActionsTriggerManualOccurrenceMaximumSet()
        {
            // Generated from example definition: 2025-04-15-preview/ScheduledActions_TriggerManualOccurrence_MaximumSet_Gen.json
            // this example is just showing the usage of "ScheduledActions_TriggerManualOccurrence" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ScheduledActionResource created on azure
            // for more information of creating ScheduledActionResource, please refer to the document of ScheduledActionResource
            string subscriptionId = "CB26D7CB-3E27-465F-99C8-EAF7A4118245";
            string resourceGroupName = "rgcomputeschedule";
            string scheduledActionName = "myScheduledAction";
            ResourceIdentifier scheduledActionResourceId = ScheduledActionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, scheduledActionName);
            ScheduledActionResource scheduledAction = client.GetScheduledActionResource(scheduledActionResourceId);

            // invoke the operation
            OccurrenceResource result = await scheduledAction.TriggerManualOccurrenceAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OccurrenceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
