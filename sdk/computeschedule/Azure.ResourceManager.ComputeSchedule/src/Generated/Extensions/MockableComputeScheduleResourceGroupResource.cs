// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ComputeSchedule.Models;

namespace Azure.ResourceManager.ComputeSchedule.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableComputeScheduleResourceGroupResource : ArmResource
    {
        private ClientDiagnostics _scheduledActionsClientDiagnostics;
        private ScheduledActionsRestOperations _scheduledActionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableComputeScheduleResourceGroupResource"/> class for mocking. </summary>
        protected MockableComputeScheduleResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableComputeScheduleResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableComputeScheduleResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ScheduledActionsClientDiagnostics => _scheduledActionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ComputeSchedule", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ScheduledActionsRestOperations ScheduledActionsRestClient => _scheduledActionsRestClient ??= new ScheduledActionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(Core.ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of OccurrenceResources in the ResourceGroupResource. </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> An object representing collection of OccurrenceResources and their operations over a OccurrenceResource. </returns>
        public virtual OccurrenceCollection GetOccurrences(string scheduledActionName)
        {
            return new OccurrenceCollection(Client, Id, scheduledActionName);
        }

        /// <summary>
        /// Get a Occurrence
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Occurrence_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OccurrenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="occurrenceId"> The name of the Occurrence. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="occurrenceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> or <paramref name="occurrenceId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OccurrenceResource>> GetOccurrenceAsync(string scheduledActionName, string occurrenceId, CancellationToken cancellationToken = default)
        {
            return await GetOccurrences(scheduledActionName).GetAsync(occurrenceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Occurrence
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Occurrence_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OccurrenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="occurrenceId"> The name of the Occurrence. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="occurrenceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> or <paramref name="occurrenceId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OccurrenceResource> GetOccurrence(string scheduledActionName, string occurrenceId, CancellationToken cancellationToken = default)
        {
            return GetOccurrences(scheduledActionName).Get(occurrenceId, cancellationToken);
        }

        /// <summary>
        /// Get a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual async Task<Response<ScheduledAction>> GetScheduledActionAsync(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.GetScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual Response<ScheduledAction> GetScheduledAction(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.GetScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="resource"/> is null. </exception>
        public virtual async Task<ArmOperation<ScheduledAction>> CreateOrUpdateScheduledActionAsync(WaitUntil waitUntil, string scheduledActionName, ScheduledAction resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(resource, nameof(resource));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.CreateOrUpdateScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, resource, cancellationToken).ConfigureAwait(false);
                var operation = new ComputeScheduleArmOperation<ScheduledAction>(new ScheduledActionOperationSource(), ScheduledActionsClientDiagnostics, Pipeline, ScheduledActionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="resource"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="resource"/> is null. </exception>
        public virtual ArmOperation<ScheduledAction> CreateOrUpdateScheduledAction(WaitUntil waitUntil, string scheduledActionName, ScheduledAction resource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(resource, nameof(resource));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.CreateOrUpdateScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, resource, cancellationToken);
                var operation = new ComputeScheduleArmOperation<ScheduledAction>(new ScheduledActionOperationSource(), ScheduledActionsClientDiagnostics, Pipeline, ScheduledActionsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, resource).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="properties"/> is null. </exception>
        public virtual async Task<Response<ScheduledAction>> UpdateScheduledActionAsync(string scheduledActionName, ScheduledActionUpdate properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(properties, nameof(properties));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.UpdateScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, properties, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="properties"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="properties"/> is null. </exception>
        public virtual Response<ScheduledAction> UpdateScheduledAction(string scheduledActionName, ScheduledActionUpdate properties, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(properties, nameof(properties));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.UpdateScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, properties, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual async Task<ArmOperation> DeleteScheduledActionAsync(WaitUntil waitUntil, string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DeleteScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken).ConfigureAwait(false);
                var operation = new ComputeScheduleArmOperation(ScheduledActionsClientDiagnostics, Pipeline, ScheduledActionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a ScheduledAction
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual ArmOperation DeleteScheduledAction(WaitUntil waitUntil, string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DeleteScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken);
                var operation = new ComputeScheduleArmOperation(ScheduledActionsClientDiagnostics, Pipeline, ScheduledActionsRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List ScheduledAction resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScheduledAction"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScheduledAction> GetScheduledActionsByResourceGroupAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ScheduledActionsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ScheduledActionsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => ScheduledAction.DeserializeScheduledAction(e), ScheduledActionsClientDiagnostics, Pipeline, "MockableComputeScheduleResourceGroupResource.GetScheduledActionsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ScheduledAction resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledAction_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScheduledAction"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScheduledAction> GetScheduledActionsByResourceGroup(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ScheduledActionsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ScheduledActionsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => ScheduledAction.DeserializeScheduledAction(e), ScheduledActionsClientDiagnostics, Pipeline, "MockableComputeScheduleResourceGroupResource.GetScheduledActionsByResourceGroup", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List resources attached to Scheduled Actions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/resources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActionResource_ListResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        /// <returns> An async collection of <see cref="ScheduledActionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScheduledActionResource> GetResourcesScheduledActionsAsync(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => ScheduledActionsRestClient.CreateListResourcesRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ScheduledActionsRestClient.CreateListResourcesNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => ScheduledActionResource.DeserializeScheduledActionResource(e), ScheduledActionsClientDiagnostics, Pipeline, "MockableComputeScheduleResourceGroupResource.GetResourcesScheduledActions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List resources attached to Scheduled Actions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/resources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActionResource_ListResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        /// <returns> A collection of <see cref="ScheduledActionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScheduledActionResource> GetResourcesScheduledActions(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => ScheduledActionsRestClient.CreateListResourcesRequest(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ScheduledActionsRestClient.CreateListResourcesNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => ScheduledActionResource.DeserializeScheduledActionResource(e), ScheduledActionsClientDiagnostics, Pipeline, "MockableComputeScheduleResourceGroupResource.GetResourcesScheduledActions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/attachResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_AttachResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RecurringActionsResourceOperationResult>> AttachResourcesScheduledActionAsync(string scheduledActionName, ResourceAttachContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.AttachResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.AttachResourcesAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/attachResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_AttachResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual Response<RecurringActionsResourceOperationResult> AttachResourcesScheduledAction(string scheduledActionName, ResourceAttachContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.AttachResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.AttachResources(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/detachResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_DetachResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RecurringActionsResourceOperationResult>> DetachResourcesScheduledActionAsync(string scheduledActionName, ResourceDetachContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DetachResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.DetachResourcesAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/detachResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_DetachResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual Response<RecurringActionsResourceOperationResult> DetachResourcesScheduledAction(string scheduledActionName, ResourceDetachContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DetachResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.DetachResources(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/patchResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_PatchResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RecurringActionsResourceOperationResult>> PatchResourcesScheduledActionAsync(string scheduledActionName, ResourcePatchContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.PatchResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.PatchResourcesAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/patchResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_PatchResources</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual Response<RecurringActionsResourceOperationResult> PatchResourcesScheduledAction(string scheduledActionName, ResourcePatchContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.PatchResourcesScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.PatchResources(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/disable</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_Disable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual async Task<Response> DisableScheduledActionAsync(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DisableScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.DisableAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/disable</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_Disable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual Response DisableScheduledAction(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.DisableScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.Disable(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/enable</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_Enable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual async Task<Response> EnableScheduledActionAsync(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.EnableScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.EnableAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/enable</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_Enable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual Response EnableScheduledAction(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.EnableScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.Enable(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/cancelNextOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_CancelNextOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<RecurringActionsResourceOperationResult>> CancelNextOccurrenceScheduledActionAsync(string scheduledActionName, CancelOccurrenceContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.CancelNextOccurrenceScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.CancelNextOccurrenceAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/cancelNextOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_CancelNextOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="content"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> or <paramref name="content"/> is null. </exception>
        public virtual Response<RecurringActionsResourceOperationResult> CancelNextOccurrenceScheduledAction(string scheduledActionName, CancelOccurrenceContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.CancelNextOccurrenceScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.CancelNextOccurrence(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/triggerManualOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_TriggerManualOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual async Task<Response<OccurrenceResource>> TriggerManualOccurrenceScheduledActionAsync(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.TriggerManualOccurrenceScheduledAction");
            scope.Start();
            try
            {
                var response = await ScheduledActionsRestClient.TriggerManualOccurrenceAsync(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new OccurrenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// A synchronous resource action.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/triggerManualOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ScheduledActions_TriggerManualOccurrence</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-04-15-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scheduledActionName"> The name of the ScheduledAction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scheduledActionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scheduledActionName"/> is null. </exception>
        public virtual Response<OccurrenceResource> TriggerManualOccurrenceScheduledAction(string scheduledActionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scheduledActionName, nameof(scheduledActionName));

            using var scope = ScheduledActionsClientDiagnostics.CreateScope("MockableComputeScheduleResourceGroupResource.TriggerManualOccurrenceScheduledAction");
            scope.Start();
            try
            {
                var response = ScheduledActionsRestClient.TriggerManualOccurrence(Id.SubscriptionId, Id.ResourceGroupName, scheduledActionName, cancellationToken);
                return Response.FromValue(new OccurrenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
