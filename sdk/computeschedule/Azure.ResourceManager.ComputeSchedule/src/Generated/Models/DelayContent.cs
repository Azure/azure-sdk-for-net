// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Request to ask for a delay in an occurrence, delay should be set to client local time eg (ACST) 2025-05-30T22:03:00+09:30, (PST) 2025-05-30T06:35:00-07:00. </summary>
    public partial class DelayContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DelayContent"/>. </summary>
        /// <param name="delay"> The exact time to delay the operations to. </param>
        /// <param name="resourceIds"> The resources that should be delayed. If empty, the delay will apply to the all resources in the occurrence. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceIds"/> is null. </exception>
        public DelayContent(DateTimeOffset delay, IEnumerable<ResourceIdentifier> resourceIds)
        {
            Argument.AssertNotNull(resourceIds, nameof(resourceIds));

            Delay = delay;
            ResourceIds = resourceIds.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DelayContent"/>. </summary>
        /// <param name="delay"> The exact time to delay the operations to. </param>
        /// <param name="resourceIds"> The resources that should be delayed. If empty, the delay will apply to the all resources in the occurrence. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DelayContent(DateTimeOffset delay, IList<ResourceIdentifier> resourceIds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Delay = delay;
            ResourceIds = resourceIds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DelayContent"/> for deserialization. </summary>
        internal DelayContent()
        {
        }

        /// <summary> The exact time to delay the operations to. </summary>
        public DateTimeOffset Delay { get; }
        /// <summary> The resources that should be delayed. If empty, the delay will apply to the all resources in the occurrence. </summary>
        public IList<ResourceIdentifier> ResourceIds { get; }
    }
}
