// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Representation of the possible selection of days in a week in a gregorian calendar. </summary>
    public readonly partial struct ScheduledActionsScheduleWeekDay : IEquatable<ScheduledActionsScheduleWeekDay>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsScheduleWeekDay"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScheduledActionsScheduleWeekDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MondayValue = "Monday";
        private const string TuesdayValue = "Tuesday";
        private const string WednesdayValue = "Wednesday";
        private const string ThursdayValue = "Thursday";
        private const string FridayValue = "Friday";
        private const string SaturdayValue = "Saturday";
        private const string SundayValue = "Sunday";
        private const string AllValue = "All";

        /// <summary> Monday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Monday { get; } = new ScheduledActionsScheduleWeekDay(MondayValue);
        /// <summary> Tuesday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Tuesday { get; } = new ScheduledActionsScheduleWeekDay(TuesdayValue);
        /// <summary> Wednesday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Wednesday { get; } = new ScheduledActionsScheduleWeekDay(WednesdayValue);
        /// <summary> Thursday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Thursday { get; } = new ScheduledActionsScheduleWeekDay(ThursdayValue);
        /// <summary> Friday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Friday { get; } = new ScheduledActionsScheduleWeekDay(FridayValue);
        /// <summary> Saturday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Saturday { get; } = new ScheduledActionsScheduleWeekDay(SaturdayValue);
        /// <summary> Sunday weekday. </summary>
        public static ScheduledActionsScheduleWeekDay Sunday { get; } = new ScheduledActionsScheduleWeekDay(SundayValue);
        /// <summary> All week days. </summary>
        public static ScheduledActionsScheduleWeekDay All { get; } = new ScheduledActionsScheduleWeekDay(AllValue);
        /// <summary> Determines if two <see cref="ScheduledActionsScheduleWeekDay"/> values are the same. </summary>
        public static bool operator ==(ScheduledActionsScheduleWeekDay left, ScheduledActionsScheduleWeekDay right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScheduledActionsScheduleWeekDay"/> values are not the same. </summary>
        public static bool operator !=(ScheduledActionsScheduleWeekDay left, ScheduledActionsScheduleWeekDay right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScheduledActionsScheduleWeekDay"/>. </summary>
        public static implicit operator ScheduledActionsScheduleWeekDay(string value) => new ScheduledActionsScheduleWeekDay(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScheduledActionsScheduleWeekDay other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScheduledActionsScheduleWeekDay other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
