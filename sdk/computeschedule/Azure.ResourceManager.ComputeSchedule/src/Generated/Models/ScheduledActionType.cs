// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Specify which action user wants to be performed on the resources. </summary>
    public readonly partial struct ScheduledActionType : IEquatable<ScheduledActionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScheduledActionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScheduledActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "Start";
        private const string DeallocateValue = "Deallocate";
        private const string HibernateValue = "Hibernate";

        /// <summary> Perform a start action on the specified resources. </summary>
        public static ScheduledActionType Start { get; } = new ScheduledActionType(StartValue);
        /// <summary> Perform a deallocate action on the specified resources. </summary>
        public static ScheduledActionType Deallocate { get; } = new ScheduledActionType(DeallocateValue);
        /// <summary> Perform hibernate and deallocate on the specified resources. </summary>
        public static ScheduledActionType Hibernate { get; } = new ScheduledActionType(HibernateValue);
        /// <summary> Determines if two <see cref="ScheduledActionType"/> values are the same. </summary>
        public static bool operator ==(ScheduledActionType left, ScheduledActionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScheduledActionType"/> values are not the same. </summary>
        public static bool operator !=(ScheduledActionType left, ScheduledActionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScheduledActionType"/>. </summary>
        public static implicit operator ScheduledActionType(string value) => new ScheduledActionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScheduledActionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScheduledActionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
