// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Representation of the months available selection in a gregorian calendar. </summary>
    public readonly partial struct Month : IEquatable<Month>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Month"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Month(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JanuaryValue = "January";
        private const string FebruaryValue = "February";
        private const string MarchValue = "March";
        private const string AprilValue = "April";
        private const string MayValue = "May";
        private const string JuneValue = "June";
        private const string JulyValue = "July";
        private const string AugustValue = "August";
        private const string SeptemberValue = "September";
        private const string OctoberValue = "October";
        private const string NovemberValue = "November";
        private const string DecemberValue = "December";
        private const string AllValue = "All";

        /// <summary> The January month. </summary>
        public static Month January { get; } = new Month(JanuaryValue);
        /// <summary> The February month. </summary>
        public static Month February { get; } = new Month(FebruaryValue);
        /// <summary> The March month. </summary>
        public static Month March { get; } = new Month(MarchValue);
        /// <summary> The April month. </summary>
        public static Month April { get; } = new Month(AprilValue);
        /// <summary> The May month. </summary>
        public static Month May { get; } = new Month(MayValue);
        /// <summary> The June month. </summary>
        public static Month June { get; } = new Month(JuneValue);
        /// <summary> The July month. </summary>
        public static Month July { get; } = new Month(JulyValue);
        /// <summary> The August month. </summary>
        public static Month August { get; } = new Month(AugustValue);
        /// <summary> The September month. </summary>
        public static Month September { get; } = new Month(SeptemberValue);
        /// <summary> The October month. </summary>
        public static Month October { get; } = new Month(OctoberValue);
        /// <summary> The November month. </summary>
        public static Month November { get; } = new Month(NovemberValue);
        /// <summary> The December month. </summary>
        public static Month December { get; } = new Month(DecemberValue);
        /// <summary> All months. </summary>
        public static Month All { get; } = new Month(AllValue);
        /// <summary> Determines if two <see cref="Month"/> values are the same. </summary>
        public static bool operator ==(Month left, Month right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Month"/> values are not the same. </summary>
        public static bool operator !=(Month left, Month right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Month"/>. </summary>
        public static implicit operator Month(string value) => new Month(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Month other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Month other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
