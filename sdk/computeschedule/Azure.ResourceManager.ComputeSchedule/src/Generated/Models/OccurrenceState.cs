// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> The state the occurrence is at a given time. </summary>
    public readonly partial struct OccurrenceState : IEquatable<OccurrenceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OccurrenceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OccurrenceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string ReschedulingValue = "Rescheduling";
        private const string ScheduledValue = "Scheduled";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancellingValue = "Cancelling";
        private const string CanceledValue = "Canceled";

        /// <summary> The occurrence was created. </summary>
        public static OccurrenceState Created { get; } = new OccurrenceState(CreatedValue);
        /// <summary> The occurrence is being rescheduled. </summary>
        public static OccurrenceState Rescheduling { get; } = new OccurrenceState(ReschedulingValue);
        /// <summary> The occurrence has been scheduled. </summary>
        public static OccurrenceState Scheduled { get; } = new OccurrenceState(ScheduledValue);
        /// <summary> The occurrence has successfully ran. </summary>
        public static OccurrenceState Succeeded { get; } = new OccurrenceState(SucceededValue);
        /// <summary> The occurrence has failed during its scheduling. </summary>
        public static OccurrenceState Failed { get; } = new OccurrenceState(FailedValue);
        /// <summary> The occurrence is going through cancellation. </summary>
        public static OccurrenceState Cancelling { get; } = new OccurrenceState(CancellingValue);
        /// <summary> The occurrence has been canceled. </summary>
        public static OccurrenceState Canceled { get; } = new OccurrenceState(CanceledValue);
        /// <summary> Determines if two <see cref="OccurrenceState"/> values are the same. </summary>
        public static bool operator ==(OccurrenceState left, OccurrenceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OccurrenceState"/> values are not the same. </summary>
        public static bool operator !=(OccurrenceState left, OccurrenceState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OccurrenceState"/>. </summary>
        public static implicit operator OccurrenceState(string value) => new OccurrenceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OccurrenceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OccurrenceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
