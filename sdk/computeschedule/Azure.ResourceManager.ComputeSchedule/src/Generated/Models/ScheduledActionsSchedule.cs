// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Specify the schedule in which the scheduled action is supposed to follow. </summary>
    public partial class ScheduledActionsSchedule
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsSchedule"/>. </summary>
        /// <param name="scheduledTime"> The time the scheduled action is supposed to run on. </param>
        /// <param name="timeZone"> The timezone the scheduled time is specified on. </param>
        /// <param name="requestedWeekDays"> The week days the scheduled action is supposed to run on. </param>
        /// <param name="requestedMonths"> The months the scheduled action is supposed to run on. </param>
        /// <param name="requestedDaysOfTheMonth"> The days of the month the scheduled action is supposed to run on. If empty, it means it will run on every day of the month. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="timeZone"/>, <paramref name="requestedWeekDays"/>, <paramref name="requestedMonths"/> or <paramref name="requestedDaysOfTheMonth"/> is null. </exception>
        public ScheduledActionsSchedule(TimeSpan scheduledTime, string timeZone, IEnumerable<WeekDay> requestedWeekDays, IEnumerable<Month> requestedMonths, IEnumerable<int> requestedDaysOfTheMonth)
        {
            Argument.AssertNotNull(timeZone, nameof(timeZone));
            Argument.AssertNotNull(requestedWeekDays, nameof(requestedWeekDays));
            Argument.AssertNotNull(requestedMonths, nameof(requestedMonths));
            Argument.AssertNotNull(requestedDaysOfTheMonth, nameof(requestedDaysOfTheMonth));

            ScheduledTime = scheduledTime;
            TimeZone = timeZone;
            RequestedWeekDays = requestedWeekDays.ToList();
            RequestedMonths = requestedMonths.ToList();
            RequestedDaysOfTheMonth = requestedDaysOfTheMonth.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsSchedule"/>. </summary>
        /// <param name="scheduledTime"> The time the scheduled action is supposed to run on. </param>
        /// <param name="timeZone"> The timezone the scheduled time is specified on. </param>
        /// <param name="requestedWeekDays"> The week days the scheduled action is supposed to run on. </param>
        /// <param name="requestedMonths"> The months the scheduled action is supposed to run on. </param>
        /// <param name="requestedDaysOfTheMonth"> The days of the month the scheduled action is supposed to run on. If empty, it means it will run on every day of the month. </param>
        /// <param name="executionParameters"> The execution parameters the scheduled action is supposed to follow. </param>
        /// <param name="deadlineType"> The type of deadline the scheduled action is supposed to follow for the schedule. If no value is passed, it will default to InitiateAt. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ScheduledActionsSchedule(TimeSpan scheduledTime, string timeZone, IList<WeekDay> requestedWeekDays, IList<Month> requestedMonths, IList<int> requestedDaysOfTheMonth, ScheduledActionExecutionParameterDetail executionParameters, ScheduledActionDeadlineType? deadlineType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ScheduledTime = scheduledTime;
            TimeZone = timeZone;
            RequestedWeekDays = requestedWeekDays;
            RequestedMonths = requestedMonths;
            RequestedDaysOfTheMonth = requestedDaysOfTheMonth;
            ExecutionParameters = executionParameters;
            DeadlineType = deadlineType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsSchedule"/> for deserialization. </summary>
        internal ScheduledActionsSchedule()
        {
        }

        /// <summary> The time the scheduled action is supposed to run on. </summary>
        public TimeSpan ScheduledTime { get; set; }
        /// <summary> The timezone the scheduled time is specified on. </summary>
        public string TimeZone { get; set; }
        /// <summary> The week days the scheduled action is supposed to run on. </summary>
        public IList<WeekDay> RequestedWeekDays { get; }
        /// <summary> The months the scheduled action is supposed to run on. </summary>
        public IList<Month> RequestedMonths { get; }
        /// <summary> The days of the month the scheduled action is supposed to run on. If empty, it means it will run on every day of the month. </summary>
        public IList<int> RequestedDaysOfTheMonth { get; }
        /// <summary> The execution parameters the scheduled action is supposed to follow. </summary>
        public ScheduledActionExecutionParameterDetail ExecutionParameters { get; set; }
        /// <summary> The type of deadline the scheduled action is supposed to follow for the schedule. If no value is passed, it will default to InitiateAt. </summary>
        public ScheduledActionDeadlineType? DeadlineType { get; set; }
    }
}
