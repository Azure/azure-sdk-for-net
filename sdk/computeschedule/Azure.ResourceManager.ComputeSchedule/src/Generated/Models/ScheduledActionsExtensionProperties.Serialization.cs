// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    public partial class ScheduledActionsExtensionProperties : IUtf8JsonSerializable, IJsonModel<ScheduledActionsExtensionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ScheduledActionsExtensionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ScheduledActionsExtensionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScheduledActionsExtensionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ScheduledActionsExtensionProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType.ToString());
            writer.WritePropertyName("actionType"u8);
            writer.WriteStringValue(ActionType.ToString());
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartOn, "O");
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            writer.WritePropertyName("schedule"u8);
            writer.WriteObjectValue(Schedule, options);
            writer.WritePropertyName("notificationSettings"u8);
            writer.WriteStartArray();
            foreach (var item in NotificationSettings)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(Disabled))
            {
                writer.WritePropertyName("disabled"u8);
                writer.WriteBooleanValue(Disabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ResourceNotificationSettings))
            {
                writer.WritePropertyName("resourceNotificationSettings"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceNotificationSettings)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ScheduledActionsExtensionProperties IJsonModel<ScheduledActionsExtensionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScheduledActionsExtensionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ScheduledActionsExtensionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeScheduledActionsExtensionProperties(document.RootElement, options);
        }

        internal static ScheduledActionsExtensionProperties DeserializeScheduledActionsExtensionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ScheduledActionResourceType resourceType = default;
            ScheduledActionType actionType = default;
            DateTimeOffset startTime = default;
            DateTimeOffset? endTime = default;
            ScheduledActionsSchedule schedule = default;
            IReadOnlyList<NotificationSettings> notificationSettings = default;
            bool? disabled = default;
            ScheduledActionResourceProvisioningState? provisioningState = default;
            IReadOnlyList<NotificationSettings> resourceNotificationSettings = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = new ScheduledActionResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("actionType"u8))
                {
                    actionType = new ScheduledActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("schedule"u8))
                {
                    schedule = ScheduledActionsSchedule.DeserializeScheduledActionsSchedule(property.Value, options);
                    continue;
                }
                if (property.NameEquals("notificationSettings"u8))
                {
                    List<NotificationSettings> array = new List<NotificationSettings>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.NotificationSettings.DeserializeNotificationSettings(item, options));
                    }
                    notificationSettings = array;
                    continue;
                }
                if (property.NameEquals("disabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ScheduledActionResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceNotificationSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NotificationSettings> array = new List<NotificationSettings>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.NotificationSettings.DeserializeNotificationSettings(item, options));
                    }
                    resourceNotificationSettings = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ScheduledActionsExtensionProperties(
                resourceType,
                actionType,
                startTime,
                endTime,
                schedule,
                notificationSettings,
                disabled,
                provisioningState,
                resourceNotificationSettings ?? new ChangeTrackingList<NotificationSettings>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ScheduledActionsExtensionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScheduledActionsExtensionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerComputeScheduleContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ScheduledActionsExtensionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ScheduledActionsExtensionProperties IPersistableModel<ScheduledActionsExtensionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ScheduledActionsExtensionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeScheduledActionsExtensionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ScheduledActionsExtensionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ScheduledActionsExtensionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
