// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> The information about notifications to be send to about upcoming operations. </summary>
    public partial class NotificationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NotificationProperties"/>. </summary>
        /// <param name="destination"> Where the notification should be sent. For email, it should follow email format. </param>
        /// <param name="type"> Type of notification to be sent. </param>
        /// <param name="language"> The language the notification should be sent on. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="destination"/> is null. </exception>
        public NotificationProperties(string destination, NotificationType type, Language language)
        {
            Argument.AssertNotNull(destination, nameof(destination));

            Destination = destination;
            Type = type;
            Language = language;
        }

        /// <summary> Initializes a new instance of <see cref="NotificationProperties"/>. </summary>
        /// <param name="destination"> Where the notification should be sent. For email, it should follow email format. </param>
        /// <param name="type"> Type of notification to be sent. </param>
        /// <param name="language"> The language the notification should be sent on. </param>
        /// <param name="disabled"> Tells if the notification is enabled or not. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NotificationProperties(string destination, NotificationType type, Language language, bool? disabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Destination = destination;
            Type = type;
            Language = language;
            Disabled = disabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NotificationProperties"/> for deserialization. </summary>
        internal NotificationProperties()
        {
        }

        /// <summary> Where the notification should be sent. For email, it should follow email format. </summary>
        public string Destination { get; set; }
        /// <summary> Type of notification to be sent. </summary>
        public NotificationType Type { get; set; }
        /// <summary> The language the notification should be sent on. </summary>
        public Language Language { get; set; }
        /// <summary> Tells if the notification is enabled or not. </summary>
        public bool? Disabled { get; set; }
    }
}
