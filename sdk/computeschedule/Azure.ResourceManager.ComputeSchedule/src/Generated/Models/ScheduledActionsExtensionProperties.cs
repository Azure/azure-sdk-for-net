// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> Scheduled action extension properties. </summary>
    public partial class ScheduledActionsExtensionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsExtensionProperties"/>. </summary>
        /// <param name="resourceType"> The type of resource the scheduled action is targeting. </param>
        /// <param name="actionType"> The action the scheduled action should perform in the resources. </param>
        /// <param name="startOn"> The time which the scheduled action is supposed to start running. </param>
        /// <param name="schedule"> The schedule the scheduled action is supposed to follow. </param>
        /// <param name="notificationSettings"> The notification settings for the scheduled action. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schedule"/> or <paramref name="notificationSettings"/> is null. </exception>
        internal ScheduledActionsExtensionProperties(ScheduledActionResourceType resourceType, ScheduledActionType actionType, DateTimeOffset startOn, ScheduledActionsSchedule schedule, IEnumerable<NotificationSettings> notificationSettings)
        {
            Argument.AssertNotNull(schedule, nameof(schedule));
            Argument.AssertNotNull(notificationSettings, nameof(notificationSettings));

            ResourceType = resourceType;
            ActionType = actionType;
            StartOn = startOn;
            Schedule = schedule;
            NotificationSettings = notificationSettings.ToList();
            ResourceNotificationSettings = new ChangeTrackingList<NotificationSettings>();
        }

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsExtensionProperties"/>. </summary>
        /// <param name="resourceType"> The type of resource the scheduled action is targeting. </param>
        /// <param name="actionType"> The action the scheduled action should perform in the resources. </param>
        /// <param name="startOn"> The time which the scheduled action is supposed to start running. </param>
        /// <param name="endOn"> The time when the scheduled action is supposed to stop scheduling. </param>
        /// <param name="schedule"> The schedule the scheduled action is supposed to follow. </param>
        /// <param name="notificationSettings"> The notification settings for the scheduled action. </param>
        /// <param name="disabled"> Tell if the scheduled action is disabled or not. </param>
        /// <param name="provisioningState"> The status of the last provisioning operation performed on the resource. </param>
        /// <param name="resourceNotificationSettings"> The notification settings for the scheduled action at a resource level. Resource level notification settings are scope to specific resources only and submitted through attach requests. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ScheduledActionsExtensionProperties(ScheduledActionResourceType resourceType, ScheduledActionType actionType, DateTimeOffset startOn, DateTimeOffset? endOn, ScheduledActionsSchedule schedule, IReadOnlyList<NotificationSettings> notificationSettings, bool? disabled, ScheduledActionResourceProvisioningState? provisioningState, IReadOnlyList<NotificationSettings> resourceNotificationSettings, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ResourceType = resourceType;
            ActionType = actionType;
            StartOn = startOn;
            EndOn = endOn;
            Schedule = schedule;
            NotificationSettings = notificationSettings;
            Disabled = disabled;
            ProvisioningState = provisioningState;
            ResourceNotificationSettings = resourceNotificationSettings;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ScheduledActionsExtensionProperties"/> for deserialization. </summary>
        internal ScheduledActionsExtensionProperties()
        {
        }

        /// <summary> The type of resource the scheduled action is targeting. </summary>
        public ScheduledActionResourceType ResourceType { get; }
        /// <summary> The action the scheduled action should perform in the resources. </summary>
        public ScheduledActionType ActionType { get; }
        /// <summary> The time which the scheduled action is supposed to start running. </summary>
        public DateTimeOffset StartOn { get; }
        /// <summary> The time when the scheduled action is supposed to stop scheduling. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> The schedule the scheduled action is supposed to follow. </summary>
        public ScheduledActionsSchedule Schedule { get; }
        /// <summary> The notification settings for the scheduled action. </summary>
        public IReadOnlyList<NotificationSettings> NotificationSettings { get; }
        /// <summary> Tell if the scheduled action is disabled or not. </summary>
        public bool? Disabled { get; }
        /// <summary> The status of the last provisioning operation performed on the resource. </summary>
        public ScheduledActionResourceProvisioningState? ProvisioningState { get; }
        /// <summary> The notification settings for the scheduled action at a resource level. Resource level notification settings are scope to specific resources only and submitted through attach requests. </summary>
        public IReadOnlyList<NotificationSettings> ResourceNotificationSettings { get; }
    }
}
