// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeSchedule.Models
{
    /// <summary> The state the occurrence is at a given time. </summary>
    public readonly partial struct ScheduledActionOccurrenceState : IEquatable<ScheduledActionOccurrenceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScheduledActionOccurrenceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScheduledActionOccurrenceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string ReschedulingValue = "Rescheduling";
        private const string ScheduledValue = "Scheduled";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancellingValue = "Cancelling";
        private const string CanceledValue = "Canceled";

        /// <summary> The occurrence was created. </summary>
        public static ScheduledActionOccurrenceState Created { get; } = new ScheduledActionOccurrenceState(CreatedValue);
        /// <summary> The occurrence is being rescheduled. </summary>
        public static ScheduledActionOccurrenceState Rescheduling { get; } = new ScheduledActionOccurrenceState(ReschedulingValue);
        /// <summary> The occurrence has been scheduled. </summary>
        public static ScheduledActionOccurrenceState Scheduled { get; } = new ScheduledActionOccurrenceState(ScheduledValue);
        /// <summary> The occurrence has successfully ran. </summary>
        public static ScheduledActionOccurrenceState Succeeded { get; } = new ScheduledActionOccurrenceState(SucceededValue);
        /// <summary> The occurrence has failed during its scheduling. </summary>
        public static ScheduledActionOccurrenceState Failed { get; } = new ScheduledActionOccurrenceState(FailedValue);
        /// <summary> The occurrence is going through cancellation. </summary>
        public static ScheduledActionOccurrenceState Cancelling { get; } = new ScheduledActionOccurrenceState(CancellingValue);
        /// <summary> The occurrence has been canceled. </summary>
        public static ScheduledActionOccurrenceState Canceled { get; } = new ScheduledActionOccurrenceState(CanceledValue);
        /// <summary> Determines if two <see cref="ScheduledActionOccurrenceState"/> values are the same. </summary>
        public static bool operator ==(ScheduledActionOccurrenceState left, ScheduledActionOccurrenceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScheduledActionOccurrenceState"/> values are not the same. </summary>
        public static bool operator !=(ScheduledActionOccurrenceState left, ScheduledActionOccurrenceState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScheduledActionOccurrenceState"/>. </summary>
        public static implicit operator ScheduledActionOccurrenceState(string value) => new ScheduledActionOccurrenceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScheduledActionOccurrenceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScheduledActionOccurrenceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
