// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.DatabaseWatcher.Models
{
    /// <summary> The generic properties of the health validation resource. </summary>
    public partial class DatabaseWatcherHealthValidationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherHealthValidationProperties"/>. </summary>
        /// <param name="startOn"> The start time of health validation, in UTC. </param>
        /// <param name="endOn"> The end time of health validation, in UTC. </param>
        /// <param name="status"> The current health validation status. </param>
        /// <param name="issues"> The list of issues found by health validation. </param>
        internal DatabaseWatcherHealthValidationProperties(DateTimeOffset startOn, DateTimeOffset endOn, DatabaseWatcherHealthValidationStatus status, IEnumerable<DatabaseWatcherHealthValidationIssue> issues)
        {
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            Issues = issues.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherHealthValidationProperties"/>. </summary>
        /// <param name="startOn"> The start time of health validation, in UTC. </param>
        /// <param name="endOn"> The end time of health validation, in UTC. </param>
        /// <param name="status"> The current health validation status. </param>
        /// <param name="issues"> The list of issues found by health validation. </param>
        /// <param name="provisioningState"> The provisioning state of the health validation resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DatabaseWatcherHealthValidationProperties(DateTimeOffset startOn, DateTimeOffset endOn, DatabaseWatcherHealthValidationStatus status, IReadOnlyList<DatabaseWatcherHealthValidationIssue> issues, DatabaseWatcherResourceProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StartOn = startOn;
            EndOn = endOn;
            Status = status;
            Issues = issues;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherHealthValidationProperties"/> for deserialization. </summary>
        internal DatabaseWatcherHealthValidationProperties()
        {
        }

        /// <summary> The start time of health validation, in UTC. </summary>
        public DateTimeOffset StartOn { get; }
        /// <summary> The end time of health validation, in UTC. </summary>
        public DateTimeOffset EndOn { get; }
        /// <summary> The current health validation status. </summary>
        public DatabaseWatcherHealthValidationStatus Status { get; }
        /// <summary> The list of issues found by health validation. </summary>
        public IReadOnlyList<DatabaseWatcherHealthValidationIssue> Issues { get; }
        /// <summary> The provisioning state of the health validation resource. </summary>
        public DatabaseWatcherResourceProvisioningState? ProvisioningState { get; }
    }
}
