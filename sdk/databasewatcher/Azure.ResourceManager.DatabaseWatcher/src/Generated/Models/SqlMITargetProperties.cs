// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseWatcher.Models
{
    /// <summary> The properties specific to Azure SQL Managed Instance targets. </summary>
    public partial class SqlMITargetProperties : DatabaseWatcherTargetProperties
    {
        /// <summary> Initializes a new instance of <see cref="SqlMITargetProperties"/>. </summary>
        /// <param name="targetAuthenticationType"> The type of authentication to use when connecting to a target. </param>
        /// <param name="connectionServerName"> The FQDN host name of the server to use in the connection string when connecting to a target. For example, for an Azure SQL logical server in the Azure commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an Azure SQL managed instance in the Azure commercial cloud, the value might be 'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be specified separately. </param>
        /// <param name="sqlMiResourceId"> The Azure resource ID of an Azure SQL Managed Instance target. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="connectionServerName"/> or <paramref name="sqlMiResourceId"/> is null. </exception>
        public SqlMITargetProperties(TargetAuthenticationType targetAuthenticationType, string connectionServerName, ResourceIdentifier sqlMiResourceId) : base(targetAuthenticationType, connectionServerName)
        {
            Argument.AssertNotNull(connectionServerName, nameof(connectionServerName));
            Argument.AssertNotNull(sqlMiResourceId, nameof(sqlMiResourceId));

            SqlMiResourceId = sqlMiResourceId;
            TargetType = "SqlMi";
        }

        /// <summary> Initializes a new instance of <see cref="SqlMITargetProperties"/>. </summary>
        /// <param name="targetType"> Discriminator property for DatabaseWatcherTargetProperties. </param>
        /// <param name="targetAuthenticationType"> The type of authentication to use when connecting to a target. </param>
        /// <param name="targetVault"> To use SQL authentication when connecting to targets, specify the vault where the login name and password secrets are stored. </param>
        /// <param name="connectionServerName"> The FQDN host name of the server to use in the connection string when connecting to a target. For example, for an Azure SQL logical server in the Azure commercial cloud, the value might be 'sql-logical-server-22092780.database.windows.net'; for an Azure SQL managed instance in the Azure commercial cloud, the value might be 'sql-mi-39441134.767d5869f605.database.windows.net'. Port number and instance name must be specified separately. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="sqlMiResourceId"> The Azure resource ID of an Azure SQL Managed Instance target. </param>
        /// <param name="connectionTcpPort"> The TCP port number to optionally use in the connection string when connecting to an Azure SQL Managed Instance target. </param>
        /// <param name="readIntent"> Set to true to monitor a high availability replica of specified target, if any. </param>
        internal SqlMITargetProperties(string targetType, TargetAuthenticationType targetAuthenticationType, TargetAuthenticationVaultSecret targetVault, string connectionServerName, DatabaseWatcherResourceProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData, ResourceIdentifier sqlMiResourceId, int? connectionTcpPort, bool? readIntent) : base(targetType, targetAuthenticationType, targetVault, connectionServerName, provisioningState, serializedAdditionalRawData)
        {
            SqlMiResourceId = sqlMiResourceId;
            ConnectionTcpPort = connectionTcpPort;
            ReadIntent = readIntent;
            TargetType = targetType ?? "SqlMi";
        }

        /// <summary> Initializes a new instance of <see cref="SqlMITargetProperties"/> for deserialization. </summary>
        internal SqlMITargetProperties()
        {
        }

        /// <summary> The Azure resource ID of an Azure SQL Managed Instance target. </summary>
        public ResourceIdentifier SqlMiResourceId { get; set; }
        /// <summary> The TCP port number to optionally use in the connection string when connecting to an Azure SQL Managed Instance target. </summary>
        public int? ConnectionTcpPort { get; set; }
        /// <summary> Set to true to monitor a high availability replica of specified target, if any. </summary>
        public bool? ReadIntent { get; set; }
    }
}
