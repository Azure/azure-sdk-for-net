// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DatabaseWatcher.Models
{
    /// <summary> Status of the shared private link resource. Can be Pending, Approved, Rejected or Disconnected. </summary>
    public readonly partial struct DatabaseWatcherSharedPrivateLinkResourceStatus : IEquatable<DatabaseWatcherSharedPrivateLinkResourceStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherSharedPrivateLinkResourceStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DatabaseWatcherSharedPrivateLinkResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string ApprovedValue = "Approved";
        private const string RejectedValue = "Rejected";
        private const string DisconnectedValue = "Disconnected";

        /// <summary> The shared private link connection request was not yet authorized by the resource owner. </summary>
        public static DatabaseWatcherSharedPrivateLinkResourceStatus Pending { get; } = new DatabaseWatcherSharedPrivateLinkResourceStatus(PendingValue);
        /// <summary> The shared private link connection request was approved by the resource owner. </summary>
        public static DatabaseWatcherSharedPrivateLinkResourceStatus Approved { get; } = new DatabaseWatcherSharedPrivateLinkResourceStatus(ApprovedValue);
        /// <summary> The shared private link connection request was rejected by the resource owner. </summary>
        public static DatabaseWatcherSharedPrivateLinkResourceStatus Rejected { get; } = new DatabaseWatcherSharedPrivateLinkResourceStatus(RejectedValue);
        /// <summary> The shared private link connection request was disconnected by the resource owner. </summary>
        public static DatabaseWatcherSharedPrivateLinkResourceStatus Disconnected { get; } = new DatabaseWatcherSharedPrivateLinkResourceStatus(DisconnectedValue);
        /// <summary> Determines if two <see cref="DatabaseWatcherSharedPrivateLinkResourceStatus"/> values are the same. </summary>
        public static bool operator ==(DatabaseWatcherSharedPrivateLinkResourceStatus left, DatabaseWatcherSharedPrivateLinkResourceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DatabaseWatcherSharedPrivateLinkResourceStatus"/> values are not the same. </summary>
        public static bool operator !=(DatabaseWatcherSharedPrivateLinkResourceStatus left, DatabaseWatcherSharedPrivateLinkResourceStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DatabaseWatcherSharedPrivateLinkResourceStatus"/>. </summary>
        public static implicit operator DatabaseWatcherSharedPrivateLinkResourceStatus(string value) => new DatabaseWatcherSharedPrivateLinkResourceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DatabaseWatcherSharedPrivateLinkResourceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DatabaseWatcherSharedPrivateLinkResourceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
