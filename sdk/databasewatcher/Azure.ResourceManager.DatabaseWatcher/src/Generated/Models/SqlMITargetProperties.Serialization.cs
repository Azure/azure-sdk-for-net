// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DatabaseWatcher.Models
{
    public partial class SqlMITargetProperties : IUtf8JsonSerializable, IJsonModel<SqlMITargetProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SqlMITargetProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SqlMITargetProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlMITargetProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlMITargetProperties)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("sqlMiResourceId"u8);
            writer.WriteStringValue(SqlMiResourceId);
            if (Optional.IsDefined(ConnectionTcpPort))
            {
                writer.WritePropertyName("connectionTcpPort"u8);
                writer.WriteNumberValue(ConnectionTcpPort.Value);
            }
            if (Optional.IsDefined(ReadIntent))
            {
                writer.WritePropertyName("readIntent"u8);
                writer.WriteBooleanValue(ReadIntent.Value);
            }
        }

        SqlMITargetProperties IJsonModel<SqlMITargetProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlMITargetProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlMITargetProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlMITargetProperties(document.RootElement, options);
        }

        internal static SqlMITargetProperties DeserializeSqlMITargetProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier sqlMiResourceId = default;
            int? connectionTcpPort = default;
            bool? readIntent = default;
            string targetType = default;
            TargetAuthenticationType targetAuthenticationType = default;
            TargetAuthenticationVaultSecret targetVault = default;
            string connectionServerName = default;
            DatabaseWatcherResourceProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sqlMiResourceId"u8))
                {
                    sqlMiResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("connectionTcpPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionTcpPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("readIntent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    readIntent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetType"u8))
                {
                    targetType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetAuthenticationType"u8))
                {
                    targetAuthenticationType = new TargetAuthenticationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVault"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetVault = TargetAuthenticationVaultSecret.DeserializeTargetAuthenticationVaultSecret(property.Value, options);
                    continue;
                }
                if (property.NameEquals("connectionServerName"u8))
                {
                    connectionServerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new DatabaseWatcherResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SqlMITargetProperties(
                targetType,
                targetAuthenticationType,
                targetVault,
                connectionServerName,
                provisioningState,
                serializedAdditionalRawData,
                sqlMiResourceId,
                connectionTcpPort,
                readIntent);
        }

        BinaryData IPersistableModel<SqlMITargetProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlMITargetProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDatabaseWatcherContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SqlMITargetProperties)} does not support writing '{options.Format}' format.");
            }
        }

        SqlMITargetProperties IPersistableModel<SqlMITargetProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlMITargetProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSqlMITargetProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SqlMITargetProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SqlMITargetProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
