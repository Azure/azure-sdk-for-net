// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DatabaseWatcher.Models
{
    /// <summary> Health validation status. </summary>
    public readonly partial struct ValidationStatus : IEquatable<ValidationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ValidationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ValidationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string TimedOutValue = "TimedOut";

        /// <summary> Health validation has not started. </summary>
        public static ValidationStatus NotStarted { get; } = new ValidationStatus(NotStartedValue);
        /// <summary> Health validation is running. </summary>
        public static ValidationStatus Running { get; } = new ValidationStatus(RunningValue);
        /// <summary> Health validation completed successfully. </summary>
        public static ValidationStatus Succeeded { get; } = new ValidationStatus(SucceededValue);
        /// <summary> Health validation failed. </summary>
        public static ValidationStatus Failed { get; } = new ValidationStatus(FailedValue);
        /// <summary> Health validation was canceled. </summary>
        public static ValidationStatus Canceled { get; } = new ValidationStatus(CanceledValue);
        /// <summary> Health validation timed out. </summary>
        public static ValidationStatus TimedOut { get; } = new ValidationStatus(TimedOutValue);
        /// <summary> Determines if two <see cref="ValidationStatus"/> values are the same. </summary>
        public static bool operator ==(ValidationStatus left, ValidationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ValidationStatus"/> values are not the same. </summary>
        public static bool operator !=(ValidationStatus left, ValidationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ValidationStatus"/>. </summary>
        public static implicit operator ValidationStatus(string value) => new ValidationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ValidationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ValidationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
