// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.DatabaseWatcher.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DatabaseWatcher
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DatabaseWatcher. </summary>
    public static partial class DatabaseWatcherExtensions
    {
        private static MockableDatabaseWatcherArmClient GetMockableDatabaseWatcherArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableDatabaseWatcherArmClient(client0));
        }

        private static MockableDatabaseWatcherResourceGroupResource GetMockableDatabaseWatcherResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDatabaseWatcherResourceGroupResource(client, resource.Id));
        }

        private static MockableDatabaseWatcherSubscriptionResource GetMockableDatabaseWatcherSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableDatabaseWatcherSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="DatabaseWatcherResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseWatcherResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseWatcherResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherArmClient.GetDatabaseWatcherResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DatabaseWatcherResource"/> object. </returns>
        public static DatabaseWatcherResource GetDatabaseWatcherResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDatabaseWatcherArmClient(client).GetDatabaseWatcherResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DatabaseWatcherAlertRuleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseWatcherAlertRuleResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseWatcherAlertRuleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherArmClient.GetDatabaseWatcherAlertRuleResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DatabaseWatcherAlertRuleResource"/> object. </returns>
        public static DatabaseWatcherAlertRuleResource GetDatabaseWatcherAlertRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDatabaseWatcherArmClient(client).GetDatabaseWatcherAlertRuleResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DatabaseWatcherHealthValidationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseWatcherHealthValidationResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseWatcherHealthValidationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherArmClient.GetDatabaseWatcherHealthValidationResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DatabaseWatcherHealthValidationResource"/> object. </returns>
        public static DatabaseWatcherHealthValidationResource GetDatabaseWatcherHealthValidationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDatabaseWatcherArmClient(client).GetDatabaseWatcherHealthValidationResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DatabaseWatcherTargetResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseWatcherTargetResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseWatcherTargetResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherArmClient.GetDatabaseWatcherTargetResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DatabaseWatcherTargetResource"/> object. </returns>
        public static DatabaseWatcherTargetResource GetDatabaseWatcherTargetResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDatabaseWatcherArmClient(client).GetDatabaseWatcherTargetResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DatabaseWatcherSharedPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseWatcherSharedPrivateLinkResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseWatcherSharedPrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherArmClient.GetDatabaseWatcherSharedPrivateLinkResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DatabaseWatcherSharedPrivateLinkResource"/> object. </returns>
        public static DatabaseWatcherSharedPrivateLinkResource GetDatabaseWatcherSharedPrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableDatabaseWatcherArmClient(client).GetDatabaseWatcherSharedPrivateLinkResource(id);
        }

        /// <summary>
        /// Gets a collection of DatabaseWatcherResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherResourceGroupResource.GetDatabaseWatchers()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of DatabaseWatcherResources and their operations over a DatabaseWatcherResource. </returns>
        public static DatabaseWatcherCollection GetDatabaseWatchers(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDatabaseWatcherResourceGroupResource(resourceGroupResource).GetDatabaseWatchers();
        }

        /// <summary>
        /// Get a Watcher
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watcher_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-02</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DatabaseWatcherResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherResourceGroupResource.GetDatabaseWatcherAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="watcherName"> The database watcher name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="watcherName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="watcherName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DatabaseWatcherResource>> GetDatabaseWatcherAsync(this ResourceGroupResource resourceGroupResource, string watcherName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableDatabaseWatcherResourceGroupResource(resourceGroupResource).GetDatabaseWatcherAsync(watcherName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Watcher
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watcher_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-02</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DatabaseWatcherResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherResourceGroupResource.GetDatabaseWatcher(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="watcherName"> The database watcher name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="watcherName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="watcherName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DatabaseWatcherResource> GetDatabaseWatcher(this ResourceGroupResource resourceGroupResource, string watcherName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableDatabaseWatcherResourceGroupResource(resourceGroupResource).GetDatabaseWatcher(watcherName, cancellationToken);
        }

        /// <summary>
        /// List Watcher resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DatabaseWatcher/watchers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watcher_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-02</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DatabaseWatcherResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherSubscriptionResource.GetDatabaseWatchers(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="DatabaseWatcherResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DatabaseWatcherResource> GetDatabaseWatchersAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDatabaseWatcherSubscriptionResource(subscriptionResource).GetDatabaseWatchersAsync(cancellationToken);
        }

        /// <summary>
        /// List Watcher resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.DatabaseWatcher/watchers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Watcher_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-01-02</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DatabaseWatcherResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableDatabaseWatcherSubscriptionResource.GetDatabaseWatchers(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="DatabaseWatcherResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DatabaseWatcherResource> GetDatabaseWatchers(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableDatabaseWatcherSubscriptionResource(subscriptionResource).GetDatabaseWatchers(cancellationToken);
        }
    }
}
