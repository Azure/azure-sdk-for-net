// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeHardwareProfile.cs

namespace Azure.ResourceManager.HybridCompute.Models
{
    /// <summary> Describes the hardware of the machine. </summary>
    public partial class HybridComputeHardwareProfile
========
using Azure.Core;
using Azure.ResourceManager.DatabaseWatcher.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DatabaseWatcher
{
    /// <summary>
    /// A class representing the DatabaseWatcherHealthValidation data model.
    /// Concrete proxy resource types can be created by aliasing this type using a specific property type.
    /// </summary>
    public partial class DatabaseWatcherHealthValidationData : ResourceData
>>>>>>>> main:sdk/databasewatcher/Azure.ResourceManager.DatabaseWatcher/src/Generated/DatabaseWatcherHealthValidationData.cs
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeHardwareProfile.cs
        /// <summary> Initializes a new instance of <see cref="HybridComputeHardwareProfile"/>. </summary>
        internal HybridComputeHardwareProfile()
========
        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherHealthValidationData"/>. </summary>
        internal DatabaseWatcherHealthValidationData()
>>>>>>>> main:sdk/databasewatcher/Azure.ResourceManager.DatabaseWatcher/src/Generated/DatabaseWatcherHealthValidationData.cs
        {
            Processors = new ChangeTrackingList<HybridComputeProcessor>();
        }

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeHardwareProfile.cs
        /// <summary> Initializes a new instance of <see cref="HybridComputeHardwareProfile"/>. </summary>
        /// <param name="totalPhysicalMemoryInBytes"> The total physical memory on the machine. </param>
        /// <param name="numberOfCpuSockets"> The total number of CPU sockets available on the machine. </param>
        /// <param name="processors"> The physical processors of the machine. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HybridComputeHardwareProfile(long? totalPhysicalMemoryInBytes, int? numberOfCpuSockets, IReadOnlyList<HybridComputeProcessor> processors, IDictionary<string, BinaryData> serializedAdditionalRawData)
========
        /// <summary> Initializes a new instance of <see cref="DatabaseWatcherHealthValidationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DatabaseWatcherHealthValidationData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DatabaseWatcherHealthValidationProperties properties, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
>>>>>>>> main:sdk/databasewatcher/Azure.ResourceManager.DatabaseWatcher/src/Generated/DatabaseWatcherHealthValidationData.cs
        {
            TotalPhysicalMemoryInBytes = totalPhysicalMemoryInBytes;
            NumberOfCpuSockets = numberOfCpuSockets;
            Processors = processors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeHardwareProfile.cs
        /// <summary> The total physical memory on the machine. </summary>
        [WirePath("totalPhysicalMemoryInBytes")]
        public long? TotalPhysicalMemoryInBytes { get; }
        /// <summary> The total number of CPU sockets available on the machine. </summary>
        [WirePath("numberOfCpuSockets")]
        public int? NumberOfCpuSockets { get; }
        /// <summary> The physical processors of the machine. </summary>
        [WirePath("processors")]
        public IReadOnlyList<HybridComputeProcessor> Processors { get; }
========
        /// <summary> The resource-specific properties for this resource. </summary>
        public DatabaseWatcherHealthValidationProperties Properties { get; }
>>>>>>>> main:sdk/databasewatcher/Azure.ResourceManager.DatabaseWatcher/src/Generated/DatabaseWatcherHealthValidationData.cs
    }
}
