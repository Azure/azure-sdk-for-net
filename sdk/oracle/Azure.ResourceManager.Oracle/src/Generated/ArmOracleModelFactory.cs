// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Oracle;

namespace Azure.ResourceManager.Oracle.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmOracleModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Oracle.CloudExadataInfrastructureData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> CloudExadataInfrastructure zones. </param>
        /// <param name="ocid"> Exadata infra ocid. </param>
        /// <param name="computeCount"> The number of compute servers for the cloud Exadata infrastructure. </param>
        /// <param name="storageCount"> The number of storage servers for the cloud Exadata infrastructure. </param>
        /// <param name="totalStorageSizeInGbs"> The total storage allocated to the cloud Exadata infrastructure resource, in gigabytes (GB). </param>
        /// <param name="availableStorageSizeInGbs"> The available storage can be allocated to the cloud Exadata infrastructure resource, in gigabytes (GB). </param>
        /// <param name="timeCreated"> The date and time the cloud Exadata infrastructure resource was created. </param>
        /// <param name="lifecycleDetails"> Additional information about the current lifecycle state. </param>
        /// <param name="maintenanceWindow"> maintenanceWindow property. </param>
        /// <param name="estimatedPatchingTime"> The estimated total time required in minutes for all patching operations (database server, storage server, and network switch patching). </param>
        /// <param name="customerContacts"> The list of customer email addresses that receive information from Oracle about the specified OCI Database service resource. Oracle uses these email addresses to send notifications about planned and unplanned software maintenance updates, information about system hardware, and other information needed by administrators. Up to 10 email addresses can be added to the customer contacts for a cloud Exadata infrastructure instance. </param>
        /// <param name="provisioningState"> CloudExadataInfrastructure provisioning state. </param>
        /// <param name="shape"> The model name of the cloud Exadata infrastructure resource. </param>
        /// <param name="ociUri"> HTTPS link to OCI resources exposed to Azure Customer via Azure Interface. </param>
        /// <param name="cpuCount"> The total number of CPU cores allocated. </param>
        /// <param name="maxCpuCount"> The total number of CPU cores available. </param>
        /// <param name="memorySizeInGbs"> The memory allocated in GBs. </param>
        /// <param name="maxMemoryInGbs"> The total memory available in GBs. </param>
        /// <param name="dbNodeStorageSizeInGbs"> The local node storage to be allocated in GBs. </param>
        /// <param name="maxDbNodeStorageSizeInGbs"> The total local node storage available in GBs. </param>
        /// <param name="dataStorageSizeInTbs"> The quantity of data in the database, in terabytes. </param>
        /// <param name="maxDataStorageInTbs"> The total available DATA disk group size. </param>
        /// <param name="dbServerVersion"> The software version of the database servers (dom0) in the Exadata infrastructure. </param>
        /// <param name="storageServerVersion"> The software version of the storage servers (cells) in the Exadata infrastructure. </param>
        /// <param name="activatedStorageCount"> The requested number of additional storage servers activated for the Exadata infrastructure. </param>
        /// <param name="additionalStorageCount"> The requested number of additional storage servers for the Exadata infrastructure. </param>
        /// <param name="displayName"> The name for the Exadata infrastructure. </param>
        /// <param name="lastMaintenanceRunId"> The OCID of the last maintenance run. </param>
        /// <param name="nextMaintenanceRunId"> The OCID of the next maintenance run. </param>
        /// <param name="monthlyDbServerVersion"> Monthly Db Server version. </param>
        /// <param name="monthlyStorageServerVersion"> Monthly Storage Server version. </param>
        /// <returns> A new <see cref="Oracle.CloudExadataInfrastructureData"/> instance for mocking. </returns>
        public static CloudExadataInfrastructureData CloudExadataInfrastructureData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null, string ocid = null, int? computeCount = null, int? storageCount = null, int? totalStorageSizeInGbs = null, int? availableStorageSizeInGbs = null, string timeCreated = null, string lifecycleDetails = null, MaintenanceWindow maintenanceWindow = null, EstimatedPatchingTime estimatedPatchingTime = null, IEnumerable<CustomerContact> customerContacts = null, CloudExadataInfrastructureProvisioningState? provisioningState = null, string shape = null, Uri ociUri = null, int? cpuCount = null, int? maxCpuCount = null, int? memorySizeInGbs = null, int? maxMemoryInGbs = null, int? dbNodeStorageSizeInGbs = null, int? maxDbNodeStorageSizeInGbs = null, int? dataStorageSizeInTbs = null, double? maxDataStorageInTbs = null, string dbServerVersion = null, string storageServerVersion = null, int? activatedStorageCount = null, int? additionalStorageCount = null, string displayName = null, string lastMaintenanceRunId = null, string nextMaintenanceRunId = null, string monthlyDbServerVersion = null, string monthlyStorageServerVersion = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            customerContacts ??= new List<CustomerContact>();

            return new CloudExadataInfrastructureData(id, name, resourceType, systemData, tags, location, zones?.ToList(), ocid, computeCount, storageCount, totalStorageSizeInGbs, availableStorageSizeInGbs, timeCreated, lifecycleDetails, maintenanceWindow, estimatedPatchingTime, customerContacts?.ToList(), provisioningState, shape, ociUri, cpuCount, maxCpuCount, memorySizeInGbs, maxMemoryInGbs, dbNodeStorageSizeInGbs, maxDbNodeStorageSizeInGbs, dataStorageSizeInTbs, maxDataStorageInTbs, dbServerVersion, storageServerVersion, activatedStorageCount, additionalStorageCount, displayName, lastMaintenanceRunId, nextMaintenanceRunId, monthlyDbServerVersion, monthlyStorageServerVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EstimatedPatchingTime"/>. </summary>
        /// <param name="estimatedDbServerPatchingTime"> The estimated time required in minutes for database server patching. </param>
        /// <param name="estimatedNetworkSwitchesPatchingTime"> The estimated time required in minutes for network switch patching. </param>
        /// <param name="estimatedStorageServerPatchingTime"> The estimated time required in minutes for storage server patching. </param>
        /// <param name="totalEstimatedPatchingTime"> The estimated total time required in minutes for all patching operations. </param>
        /// <returns> A new <see cref="Models.EstimatedPatchingTime"/> instance for mocking. </returns>
        public static EstimatedPatchingTime EstimatedPatchingTime(int? estimatedDbServerPatchingTime = null, int? estimatedNetworkSwitchesPatchingTime = null, int? estimatedStorageServerPatchingTime = null, int? totalEstimatedPatchingTime = null)
        {
            return new EstimatedPatchingTime(estimatedDbServerPatchingTime, estimatedNetworkSwitchesPatchingTime, estimatedStorageServerPatchingTime, totalEstimatedPatchingTime, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.CloudVmClusterData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="ocid"> Cloud VM Cluster ocid. </param>
        /// <param name="listenerPort"> The port number configured for the listener on the cloud VM cluster. </param>
        /// <param name="nodeCount"> The number of nodes in the cloud VM cluster. </param>
        /// <param name="storageSizeInGbs"> The data disk group size to be allocated in GBs per VM. </param>
        /// <param name="dataStorageSizeInTbs"> The data disk group size to be allocated in TBs. </param>
        /// <param name="dbNodeStorageSizeInGbs"> The local node storage to be allocated in GBs. </param>
        /// <param name="memorySizeInGbs"> The memory to be allocated in GBs. </param>
        /// <param name="timeCreated"> The date and time that the cloud VM cluster was created. </param>
        /// <param name="lifecycleDetails"> Additional information about the current lifecycle state. </param>
        /// <param name="timeZone"> The time zone of the cloud VM cluster. For details, see [Exadata Infrastructure Time Zones](/Content/Database/References/timezones.htm). </param>
        /// <param name="zoneId"> The OCID of the zone the cloud VM cluster is associated with. </param>
        /// <param name="hostname"> The hostname for the cloud VM cluster. </param>
        /// <param name="domain"> The domain name for the cloud VM cluster. </param>
        /// <param name="cpuCoreCount"> The number of CPU cores enabled on the cloud VM cluster. </param>
        /// <param name="ocpuCount"> The number of OCPU cores to enable on the cloud VM cluster. Only 1 decimal place is allowed for the fractional part. </param>
        /// <param name="clusterName"> The cluster name for cloud VM cluster. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive. </param>
        /// <param name="dataStoragePercentage"> The percentage assigned to DATA storage (user data and database files). The remaining percentage is assigned to RECO storage (database redo logs, archive logs, and recovery manager backups). Accepted values are 35, 40, 60 and 80. The default is 80 percent assigned to DATA storage. See [Storage Configuration](/Content/Database/Concepts/exaoverview.htm#Exadata) in the Exadata documentation for details on the impact of the configuration settings on storage. </param>
        /// <param name="isLocalBackupEnabled"> If true, database backup on local Exadata storage is configured for the cloud VM cluster. If false, database backup on local Exadata storage is not available in the cloud VM cluster. </param>
        /// <param name="cloudExadataInfrastructureId"> Cloud Exadata Infrastructure ID. </param>
        /// <param name="isSparseDiskgroupEnabled"> If true, sparse disk group is configured for the cloud VM cluster. If false, sparse disk group is not created. </param>
        /// <param name="systemVersion"> Operating system version of the image. </param>
        /// <param name="sshPublicKeys"> The public key portion of one or more key pairs used for SSH access to the cloud VM cluster. </param>
        /// <param name="licenseModel"> The Oracle license model that applies to the cloud VM cluster. The default is LICENSE_INCLUDED. </param>
        /// <param name="diskRedundancy"> The type of redundancy configured for the cloud Vm cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy. </param>
        /// <param name="scanIPIds"> The Single Client Access Name (SCAN) IP addresses associated with the cloud VM cluster. SCAN IP addresses are typically used for load balancing and are not assigned to any interface. Oracle Clusterware directs the requests to the appropriate nodes in the cluster.  **Note:** For a single-node DB system, this list is empty. </param>
        /// <param name="vipIds"> The virtual IP (VIP) addresses associated with the cloud VM cluster. The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.  **Note:** For a single-node DB system, this list is empty. </param>
        /// <param name="scanDnsName"> The FQDN of the DNS record for the SCAN IP addresses that are associated with the cloud VM cluster. </param>
        /// <param name="scanListenerPortTcp"> The TCP Single Client Access Name (SCAN) port. The default port is 1521. </param>
        /// <param name="scanListenerPortTcpSsl"> The TCPS Single Client Access Name (SCAN) port. The default port is 2484. </param>
        /// <param name="scanDnsRecordId"> The OCID of the DNS record for the SCAN IP addresses that are associated with the cloud VM cluster. </param>
        /// <param name="shape"> The model name of the Exadata hardware running the cloud VM cluster. </param>
        /// <param name="provisioningState"> CloudVmCluster provisioning state. </param>
        /// <param name="vnetId"> VNET for network connectivity. </param>
        /// <param name="giVersion"> Oracle Grid Infrastructure (GI) software version. </param>
        /// <param name="ociUri"> HTTPS link to OCI resources exposed to Azure Customer via Azure Interface. </param>
        /// <param name="subnetId"> Client subnet. </param>
        /// <param name="backupSubnetCidr"> Client OCI backup subnet CIDR, default is 192.168.252.0/22. </param>
        /// <param name="dataCollectionOptions"> Indicates user preferences for the various diagnostic collection options for the VM cluster/Cloud VM cluster/VMBM DBCS. </param>
        /// <param name="displayName"> Display Name. </param>
        /// <param name="computeNodes"> The list of compute servers to be added to the cloud VM cluster. </param>
        /// <param name="iormConfigCache"> iormConfigCache details for cloud VM cluster. </param>
        /// <param name="lastUpdateHistoryEntryId"> The OCID of the last maintenance update history entry. </param>
        /// <param name="dbServers"> The list of DB servers. </param>
        /// <param name="compartmentId"> Cluster compartmentId. </param>
        /// <param name="subnetOcid"> Cluster subnet ocid. </param>
        /// <returns> A new <see cref="Oracle.CloudVmClusterData"/> instance for mocking. </returns>
        public static CloudVmClusterData CloudVmClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string ocid = null, long? listenerPort = null, int? nodeCount = null, int? storageSizeInGbs = null, double? dataStorageSizeInTbs = null, int? dbNodeStorageSizeInGbs = null, int? memorySizeInGbs = null, DateTimeOffset? timeCreated = null, string lifecycleDetails = null, string timeZone = null, string zoneId = null, string hostname = null, string domain = null, int? cpuCoreCount = null, float? ocpuCount = null, string clusterName = null, int? dataStoragePercentage = null, bool? isLocalBackupEnabled = null, ResourceIdentifier cloudExadataInfrastructureId = null, bool? isSparseDiskgroupEnabled = null, string systemVersion = null, IEnumerable<string> sshPublicKeys = null, LicenseModel? licenseModel = null, DiskRedundancy? diskRedundancy = null, IEnumerable<string> scanIPIds = null, IEnumerable<string> vipIds = null, string scanDnsName = null, int? scanListenerPortTcp = null, int? scanListenerPortTcpSsl = null, string scanDnsRecordId = null, string shape = null, CloudVmClusterProvisioningState? provisioningState = null, ResourceIdentifier vnetId = null, string giVersion = null, Uri ociUri = null, ResourceIdentifier subnetId = null, string backupSubnetCidr = null, DataCollectionConfig dataCollectionOptions = null, string displayName = null, IEnumerable<string> computeNodes = null, ExadataIormConfig iormConfigCache = null, string lastUpdateHistoryEntryId = null, IEnumerable<string> dbServers = null, string compartmentId = null, string subnetOcid = null)
        {
            tags ??= new Dictionary<string, string>();
            sshPublicKeys ??= new List<string>();
            scanIPIds ??= new List<string>();
            vipIds ??= new List<string>();
            computeNodes ??= new List<string>();
            dbServers ??= new List<string>();

            return new CloudVmClusterData(id, name, resourceType, systemData, tags, location, ocid, listenerPort, nodeCount, storageSizeInGbs, dataStorageSizeInTbs, dbNodeStorageSizeInGbs, memorySizeInGbs, timeCreated, lifecycleDetails, timeZone, zoneId, hostname, domain, cpuCoreCount, ocpuCount, clusterName, dataStoragePercentage, isLocalBackupEnabled, cloudExadataInfrastructureId, isSparseDiskgroupEnabled, systemVersion, sshPublicKeys?.ToList(), licenseModel, diskRedundancy, scanIPIds?.ToList(), vipIds?.ToList(), scanDnsName, scanListenerPortTcp, scanListenerPortTcpSsl, scanDnsRecordId, shape, provisioningState, vnetId, giVersion, ociUri, subnetId, backupSubnetCidr, dataCollectionOptions, displayName, computeNodes?.ToList(), iormConfigCache, lastUpdateHistoryEntryId, dbServers?.ToList(), compartmentId, subnetOcid, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExadataIormConfig"/>. </summary>
        /// <param name="dbPlans"> An array of IORM settings for all the database in the Exadata DB system. </param>
        /// <param name="lifecycleDetails"> Additional information about the current lifecycleState. </param>
        /// <param name="provisioningState"> The current state of IORM configuration for the Exadata DB system. </param>
        /// <param name="objective"> The current value for the IORM objective. The default is AUTO. </param>
        /// <returns> A new <see cref="Models.ExadataIormConfig"/> instance for mocking. </returns>
        public static ExadataIormConfig ExadataIormConfig(IEnumerable<DbIormConfig> dbPlans = null, string lifecycleDetails = null, IormLifecycleState? provisioningState = null, Objective? objective = null)
        {
            dbPlans ??= new List<DbIormConfig>();

            return new ExadataIormConfig(dbPlans?.ToList(), lifecycleDetails, provisioningState, objective, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DbIormConfig"/>. </summary>
        /// <param name="dbName"> The database name. For the default DbPlan, the dbName is default. </param>
        /// <param name="flashCacheLimit"> The flash cache limit for this database. This value is internally configured based on the share value assigned to the database. </param>
        /// <param name="share"> The relative priority of this database. </param>
        /// <returns> A new <see cref="Models.DbIormConfig"/> instance for mocking. </returns>
        public static DbIormConfig DbIormConfig(string dbName = null, string flashCacheLimit = null, int? share = null)
        {
            return new DbIormConfig(dbName, flashCacheLimit, share, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.DbSystemShapeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="shapeFamily"> The family of the shape used for the DB system. </param>
        /// <param name="availableCoreCount"> The maximum number of CPU cores that can be enabled on the DB system for this shape. </param>
        /// <param name="minimumCoreCount"> The minimum number of CPU cores that can be enabled on the DB system for this shape. </param>
        /// <param name="runtimeMinimumCoreCount"> The runtime minimum number of CPU cores that can be enabled on the DB system for this shape. </param>
        /// <param name="coreCountIncrement"> The discrete number by which the CPU core count for this shape can be increased or decreased. </param>
        /// <param name="minStorageCount"> The minimum number of Exadata storage servers available for the Exadata infrastructure. </param>
        /// <param name="maxStorageCount"> The maximum number of Exadata storage servers available for the Exadata infrastructure. </param>
        /// <param name="availableDataStoragePerServerInTbs"> The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes. </param>
        /// <param name="availableMemoryPerNodeInGbs"> The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes. </param>
        /// <param name="availableDbNodePerNodeInGbs"> The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes. </param>
        /// <param name="minCoreCountPerNode"> The minimum number of CPU cores that can be enabled per node for this shape. </param>
        /// <param name="availableMemoryInGbs"> The maximum memory that can be enabled for this shape. </param>
        /// <param name="minMemoryPerNodeInGbs"> The minimum memory that need be allocated per node for this shape. </param>
        /// <param name="availableDbNodeStorageInGbs"> The maximum Db Node storage that can be enabled for this shape. </param>
        /// <param name="minDbNodeStoragePerNodeInGbs"> The minimum Db Node storage that need be allocated per node for this shape. </param>
        /// <param name="availableDataStorageInTbs"> The maximum DATA storage that can be enabled for this shape. </param>
        /// <param name="minDataStorageInTbs"> The minimum data storage that need be allocated for this shape. </param>
        /// <param name="minimumNodeCount"> The minimum number of database nodes available for this shape. </param>
        /// <param name="maximumNodeCount"> The maximum number of database nodes available for this shape. </param>
        /// <param name="availableCoreCountPerNode"> The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes. </param>
        /// <returns> A new <see cref="Oracle.DbSystemShapeData"/> instance for mocking. </returns>
        public static DbSystemShapeData DbSystemShapeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string shapeFamily = null, int? availableCoreCount = null, int? minimumCoreCount = null, int? runtimeMinimumCoreCount = null, int? coreCountIncrement = null, int? minStorageCount = null, int? maxStorageCount = null, double? availableDataStoragePerServerInTbs = null, int? availableMemoryPerNodeInGbs = null, int? availableDbNodePerNodeInGbs = null, int? minCoreCountPerNode = null, int? availableMemoryInGbs = null, int? minMemoryPerNodeInGbs = null, int? availableDbNodeStorageInGbs = null, int? minDbNodeStoragePerNodeInGbs = null, int? availableDataStorageInTbs = null, int? minDataStorageInTbs = null, int? minimumNodeCount = null, int? maximumNodeCount = null, int? availableCoreCountPerNode = null)
        {
            return new DbSystemShapeData(id, name, resourceType, systemData, shapeFamily, availableCoreCount, minimumCoreCount, runtimeMinimumCoreCount, coreCountIncrement, minStorageCount, maxStorageCount, availableDataStoragePerServerInTbs, availableMemoryPerNodeInGbs, availableDbNodePerNodeInGbs, minCoreCountPerNode, availableMemoryInGbs, minMemoryPerNodeInGbs, availableDbNodeStorageInGbs, minDbNodeStoragePerNodeInGbs, availableDataStorageInTbs, minDataStorageInTbs, minimumNodeCount, maximumNodeCount, availableCoreCountPerNode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.DnsPrivateViewData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ocid"> The OCID of the view. </param>
        /// <param name="displayName"> The display name of the view resource. </param>
        /// <param name="isProtected"> A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed. </param>
        /// <param name="provisioningState"> Views lifecycleState. </param>
        /// <param name="self"> The canonical absolute URL of the resource. </param>
        /// <param name="timeCreated"> views timeCreated. </param>
        /// <param name="timeUpdated"> views timeCreated. </param>
        /// <returns> A new <see cref="Oracle.DnsPrivateViewData"/> instance for mocking. </returns>
        public static DnsPrivateViewData DnsPrivateViewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ocid = null, string displayName = null, bool? isProtected = null, DnsPrivateViewsProvisioningState? provisioningState = null, string self = null, DateTimeOffset? timeCreated = null, DateTimeOffset? timeUpdated = null)
        {
            return new DnsPrivateViewData(id, name, resourceType, systemData, ocid, displayName, isProtected, provisioningState, self, timeCreated, timeUpdated, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.DnsPrivateZoneData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ocid"> The OCID of the Zone. </param>
        /// <param name="isProtected"> A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed. </param>
        /// <param name="provisioningState"> Zones lifecycleState. </param>
        /// <param name="self"> The canonical absolute URL of the resource. </param>
        /// <param name="serial"> The current serial of the zone. As seen in the zone's SOA record. </param>
        /// <param name="version"> Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived. </param>
        /// <param name="viewId"> The OCID of the private view containing the zone. This value will be null for zones in the global DNS, which are publicly resolvable and not part of a private view. </param>
        /// <param name="zoneType"> The type of the zone. Must be either PRIMARY or SECONDARY. SECONDARY is only supported for GLOBAL zones. </param>
        /// <param name="timeCreated"> Zones timeCreated. </param>
        /// <returns> A new <see cref="Oracle.DnsPrivateZoneData"/> instance for mocking. </returns>
        public static DnsPrivateZoneData DnsPrivateZoneData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ocid = null, bool? isProtected = null, DnsPrivateZonesProvisioningState? provisioningState = null, string self = null, int? serial = null, string version = null, string viewId = null, ZoneType? zoneType = null, DateTimeOffset? timeCreated = null)
        {
            return new DnsPrivateZoneData(id, name, resourceType, systemData, ocid, isProtected, provisioningState, self, serial, version, viewId, zoneType, timeCreated, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.GiVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="version"> A valid Oracle Grid Infrastructure (GI) software version. </param>
        /// <returns> A new <see cref="Oracle.GiVersionData"/> instance for mocking. </returns>
        public static GiVersionData GiVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string version = null)
        {
            return new GiVersionData(id, name, resourceType, systemData, version, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.OracleSubscriptionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="plan"> Details of the resource plan. </param>
        /// <param name="provisioningState"> OracleSubscriptionProvisioningState provisioning state. </param>
        /// <param name="saasSubscriptionId"> SAAS subscription ID generated by Marketplace. </param>
        /// <param name="cloudAccountId"> Cloud Account Id. </param>
        /// <param name="cloudAccountState"> Cloud Account provisioning state. </param>
        /// <param name="termUnit"> Term Unit. P1Y, P3Y, etc, see Durations https://en.wikipedia.org/wiki/ISO_8601. </param>
        /// <returns> A new <see cref="Oracle.OracleSubscriptionData"/> instance for mocking. </returns>
        public static OracleSubscriptionData OracleSubscriptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ArmPlan plan = null, OracleSubscriptionProvisioningState? provisioningState = null, string saasSubscriptionId = null, string cloudAccountId = null, CloudAccountProvisioningState? cloudAccountState = null, string termUnit = null)
        {
            return new OracleSubscriptionData(id, name, resourceType, systemData, plan, provisioningState, saasSubscriptionId, cloudAccountId, cloudAccountState, termUnit, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CloudAccountDetails"/>. </summary>
        /// <param name="cloudAccountName"> Cloud Account name. </param>
        /// <param name="cloudAccountHomeRegion"> Cloud Account Home region. </param>
        /// <returns> A new <see cref="Models.CloudAccountDetails"/> instance for mocking. </returns>
        public static CloudAccountDetails CloudAccountDetails(string cloudAccountName = null, string cloudAccountHomeRegion = null)
        {
            return new CloudAccountDetails(cloudAccountName, cloudAccountHomeRegion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SaasSubscriptionDetails"/>. </summary>
        /// <param name="id"> Purchased SaaS subscription ID. </param>
        /// <param name="subscriptionName"> SaaS subscription name. </param>
        /// <param name="timeCreated"> Creation Date and Time. </param>
        /// <param name="offerId"> Purchased offer ID. </param>
        /// <param name="planId"> Purchased offer's plan ID. </param>
        /// <param name="saasSubscriptionStatus"> Indicates the status of the Subscription. </param>
        /// <param name="publisherId"> Publisher ID. </param>
        /// <param name="purchaserEmailId"> Purchaser Email ID. </param>
        /// <param name="purchaserTenantId"> Purchaser Tenant ID. </param>
        /// <param name="termUnit"> Purchase Term Unit. </param>
        /// <param name="isAutoRenew"> AutoRenew flag. </param>
        /// <param name="isFreeTrial"> FreeTrial flag. </param>
        /// <returns> A new <see cref="Models.SaasSubscriptionDetails"/> instance for mocking. </returns>
        public static SaasSubscriptionDetails SaasSubscriptionDetails(string id = null, string subscriptionName = null, DateTimeOffset? timeCreated = null, string offerId = null, string planId = null, string saasSubscriptionStatus = null, string publisherId = null, string purchaserEmailId = null, string purchaserTenantId = null, string termUnit = null, bool? isAutoRenew = null, bool? isFreeTrial = null)
        {
            return new SaasSubscriptionDetails(id, subscriptionName, timeCreated, offerId, planId, saasSubscriptionStatus, publisherId, purchaserEmailId, purchaserTenantId, termUnit, isAutoRenew, isFreeTrial, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.DbServerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ocid"> Db server name. </param>
        /// <param name="displayName"> The name for the Db Server. </param>
        /// <param name="compartmentId"> The OCID of the compartment. </param>
        /// <param name="exadataInfrastructureId"> The OCID of the Exadata infrastructure. </param>
        /// <param name="lifecycleDetails"> Lifecycle details of dbServer. </param>
        /// <param name="cpuCoreCount"> The number of CPU cores enabled on the Db server. </param>
        /// <param name="dbServerPatchingDetails"> dbServerPatching details of the Db server. </param>
        /// <param name="maxMemoryInGbs"> The total memory available in GBs. </param>
        /// <param name="dbNodeStorageSizeInGbs"> The allocated local node storage in GBs on the Db server. </param>
        /// <param name="vmClusterIds"> The OCID of the VM Clusters associated with the Db server. </param>
        /// <param name="dbNodeIds"> The OCID of the Db nodes associated with the Db server. </param>
        /// <param name="provisioningState"> DbServer provisioning state. </param>
        /// <param name="maxCpuCount"> The total number of CPU cores available. </param>
        /// <param name="autonomousVmClusterIds"> The list of OCIDs of the Autonomous VM Clusters associated with the Db server. </param>
        /// <param name="autonomousVirtualMachineIds"> The list of OCIDs of the Autonomous Virtual Machines associated with the Db server. </param>
        /// <param name="maxDbNodeStorageInGbs"> The total max dbNode storage in GBs. </param>
        /// <param name="memorySizeInGbs"> The total memory size in GBs. </param>
        /// <param name="shape"> The shape of the Db server. The shape determines the amount of CPU, storage, and memory resources available. </param>
        /// <param name="timeCreated"> The date and time that the Db Server was created. </param>
        /// <returns> A new <see cref="Oracle.DbServerData"/> instance for mocking. </returns>
        public static DbServerData DbServerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ocid = null, string displayName = null, string compartmentId = null, string exadataInfrastructureId = null, string lifecycleDetails = null, int? cpuCoreCount = null, DbServerPatchingDetails dbServerPatchingDetails = null, int? maxMemoryInGbs = null, int? dbNodeStorageSizeInGbs = null, IEnumerable<string> vmClusterIds = null, IEnumerable<string> dbNodeIds = null, DbServerProvisioningState? provisioningState = null, int? maxCpuCount = null, IEnumerable<string> autonomousVmClusterIds = null, IEnumerable<string> autonomousVirtualMachineIds = null, int? maxDbNodeStorageInGbs = null, int? memorySizeInGbs = null, string shape = null, DateTimeOffset? timeCreated = null)
        {
            vmClusterIds ??= new List<string>();
            dbNodeIds ??= new List<string>();
            autonomousVmClusterIds ??= new List<string>();
            autonomousVirtualMachineIds ??= new List<string>();

            return new DbServerData(id, name, resourceType, systemData, ocid, displayName, compartmentId, exadataInfrastructureId, lifecycleDetails, cpuCoreCount, dbServerPatchingDetails, maxMemoryInGbs, dbNodeStorageSizeInGbs, vmClusterIds?.ToList(), dbNodeIds?.ToList(), provisioningState, maxCpuCount, autonomousVmClusterIds?.ToList(), autonomousVirtualMachineIds?.ToList(), maxDbNodeStorageInGbs, memorySizeInGbs, shape, timeCreated, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DbServerPatchingDetails"/>. </summary>
        /// <param name="estimatedPatchDuration"> Estimated Patch Duration. </param>
        /// <param name="patchingStatus"> Patching Status. </param>
        /// <param name="timePatchingEnded"> Time Patching Ended. </param>
        /// <param name="timePatchingStarted"> Time Patching Started. </param>
        /// <returns> A new <see cref="Models.DbServerPatchingDetails"/> instance for mocking. </returns>
        public static DbServerPatchingDetails DbServerPatchingDetails(int? estimatedPatchDuration = null, DbServerPatchingStatus? patchingStatus = null, DateTimeOffset? timePatchingEnded = null, DateTimeOffset? timePatchingStarted = null)
        {
            return new DbServerPatchingDetails(estimatedPatchDuration, patchingStatus, timePatchingEnded, timePatchingStarted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.DbNodeData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ocid"> DbNode OCID. </param>
        /// <param name="additionalDetails"> Additional information about the planned maintenance. </param>
        /// <param name="backupIPId"> The OCID of the backup IP address associated with the database node. </param>
        /// <param name="backupVnic2Id"> The OCID of the second backup VNIC. </param>
        /// <param name="backupVnicId"> The OCID of the backup VNIC. </param>
        /// <param name="cpuCoreCount"> The number of CPU cores enabled on the Db node. </param>
        /// <param name="dbNodeStorageSizeInGbs"> The allocated local node storage in GBs on the Db node. </param>
        /// <param name="dbServerId"> The OCID of the Exacc Db server associated with the database node. </param>
        /// <param name="dbSystemId"> The OCID of the DB system. </param>
        /// <param name="faultDomain"> The name of the Fault Domain the instance is contained in. </param>
        /// <param name="hostIPId"> The OCID of the host IP address associated with the database node. </param>
        /// <param name="hostname"> The host name for the database node. </param>
        /// <param name="provisioningState"> The current state of the database node. </param>
        /// <param name="lifecycleDetails"> Lifecycle details of Db Node. </param>
        /// <param name="maintenanceType"> The type of database node maintenance. </param>
        /// <param name="memorySizeInGbs"> The allocated memory in GBs on the Db node. </param>
        /// <param name="softwareStorageSizeInGb"> The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for virtual machine DB systems. </param>
        /// <param name="timeCreated"> The date and time that the database node was created. </param>
        /// <param name="timeMaintenanceWindowEnd"> End date and time of maintenance window. </param>
        /// <param name="timeMaintenanceWindowStart"> Start date and time of maintenance window. </param>
        /// <param name="vnic2Id"> The OCID of the second VNIC. </param>
        /// <param name="vnicId"> The OCID of the VNIC. </param>
        /// <returns> A new <see cref="Oracle.DbNodeData"/> instance for mocking. </returns>
        public static DbNodeData DbNodeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ocid = null, string additionalDetails = null, string backupIPId = null, string backupVnic2Id = null, string backupVnicId = null, int? cpuCoreCount = null, int? dbNodeStorageSizeInGbs = null, string dbServerId = null, string dbSystemId = null, string faultDomain = null, string hostIPId = null, string hostname = null, DbNodeProvisioningState? provisioningState = null, string lifecycleDetails = null, DbNodeMaintenanceType? maintenanceType = null, int? memorySizeInGbs = null, int? softwareStorageSizeInGb = null, DateTimeOffset? timeCreated = null, DateTimeOffset? timeMaintenanceWindowEnd = null, DateTimeOffset? timeMaintenanceWindowStart = null, string vnic2Id = null, string vnicId = null)
        {
            return new DbNodeData(id, name, resourceType, systemData, ocid, additionalDetails, backupIPId, backupVnic2Id, backupVnicId, cpuCoreCount, dbNodeStorageSizeInGbs, dbServerId, dbSystemId, faultDomain, hostIPId, hostname, provisioningState, lifecycleDetails, maintenanceType, memorySizeInGbs, softwareStorageSizeInGb, timeCreated, timeMaintenanceWindowEnd, timeMaintenanceWindowStart, vnic2Id, vnicId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PrivateIPAddressProperties"/>. </summary>
        /// <param name="displayName"> PrivateIpAddresses displayName. </param>
        /// <param name="hostnameLabel"> PrivateIpAddresses hostnameLabel. </param>
        /// <param name="ocid"> PrivateIpAddresses Id. </param>
        /// <param name="ipAddress"> PrivateIpAddresses ipAddress. </param>
        /// <param name="subnetId"> PrivateIpAddresses subnetId. </param>
        /// <returns> A new <see cref="Models.PrivateIPAddressProperties"/> instance for mocking. </returns>
        public static PrivateIPAddressProperties PrivateIPAddressProperties(string displayName = null, string hostnameLabel = null, string ocid = null, string ipAddress = null, string subnetId = null)
        {
            return new PrivateIPAddressProperties(displayName, hostnameLabel, ocid, ipAddress, subnetId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Oracle.VirtualNetworkAddressData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="ipAddress"> Virtual network Address address. </param>
        /// <param name="vmOcid"> Virtual Machine OCID. </param>
        /// <param name="ocid"> Application VIP OCID. </param>
        /// <param name="domain"> Virtual network address fully qualified domain name. </param>
        /// <param name="lifecycleDetails"> Additional information about the current lifecycle state of the application virtual IP (VIP) address. </param>
        /// <param name="provisioningState"> virtual network address provisioning state. </param>
        /// <param name="timeAssigned"> The date and time when the create operation for the application virtual IP (VIP) address completed. </param>
        /// <returns> A new <see cref="Oracle.VirtualNetworkAddressData"/> instance for mocking. </returns>
        public static VirtualNetworkAddressData VirtualNetworkAddressData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string ipAddress = null, string vmOcid = null, string ocid = null, string domain = null, string lifecycleDetails = null, VirtualNetworkAddressProvisioningState? provisioningState = null, DateTimeOffset? timeAssigned = null)
        {
            return new VirtualNetworkAddressData(id, name, resourceType, systemData, ipAddress, vmOcid, ocid, domain, lifecycleDetails, provisioningState, timeAssigned, serializedAdditionalRawData: null);
        }
    }
}
