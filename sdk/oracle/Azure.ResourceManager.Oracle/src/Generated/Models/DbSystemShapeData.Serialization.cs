// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Oracle
{
    public partial class DbSystemShapeData : IUtf8JsonSerializable, IJsonModel<DbSystemShapeData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DbSystemShapeData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DbSystemShapeData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemShapeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemShapeData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ShapeFamily))
            {
                writer.WritePropertyName("shapeFamily"u8);
                writer.WriteStringValue(ShapeFamily);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableCoreCount))
            {
                writer.WritePropertyName("availableCoreCount"u8);
                writer.WriteNumberValue(AvailableCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinimumCoreCount))
            {
                writer.WritePropertyName("minimumCoreCount"u8);
                writer.WriteNumberValue(MinimumCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RuntimeMinimumCoreCount))
            {
                writer.WritePropertyName("runtimeMinimumCoreCount"u8);
                writer.WriteNumberValue(RuntimeMinimumCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CoreCountIncrement))
            {
                writer.WritePropertyName("coreCountIncrement"u8);
                writer.WriteNumberValue(CoreCountIncrement.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinStorageCount))
            {
                writer.WritePropertyName("minStorageCount"u8);
                writer.WriteNumberValue(MinStorageCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxStorageCount))
            {
                writer.WritePropertyName("maxStorageCount"u8);
                writer.WriteNumberValue(MaxStorageCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableDataStoragePerServerInTbs))
            {
                writer.WritePropertyName("availableDataStoragePerServerInTbs"u8);
                writer.WriteNumberValue(AvailableDataStoragePerServerInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableMemoryPerNodeInGbs))
            {
                writer.WritePropertyName("availableMemoryPerNodeInGbs"u8);
                writer.WriteNumberValue(AvailableMemoryPerNodeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableDbNodePerNodeInGbs))
            {
                writer.WritePropertyName("availableDbNodePerNodeInGbs"u8);
                writer.WriteNumberValue(AvailableDbNodePerNodeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinCoreCountPerNode))
            {
                writer.WritePropertyName("minCoreCountPerNode"u8);
                writer.WriteNumberValue(MinCoreCountPerNode.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableMemoryInGbs))
            {
                writer.WritePropertyName("availableMemoryInGbs"u8);
                writer.WriteNumberValue(AvailableMemoryInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinMemoryPerNodeInGbs))
            {
                writer.WritePropertyName("minMemoryPerNodeInGbs"u8);
                writer.WriteNumberValue(MinMemoryPerNodeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableDbNodeStorageInGbs))
            {
                writer.WritePropertyName("availableDbNodeStorageInGbs"u8);
                writer.WriteNumberValue(AvailableDbNodeStorageInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinDbNodeStoragePerNodeInGbs))
            {
                writer.WritePropertyName("minDbNodeStoragePerNodeInGbs"u8);
                writer.WriteNumberValue(MinDbNodeStoragePerNodeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableDataStorageInTbs))
            {
                writer.WritePropertyName("availableDataStorageInTbs"u8);
                writer.WriteNumberValue(AvailableDataStorageInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinDataStorageInTbs))
            {
                writer.WritePropertyName("minDataStorageInTbs"u8);
                writer.WriteNumberValue(MinDataStorageInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MinimumNodeCount))
            {
                writer.WritePropertyName("minimumNodeCount"u8);
                writer.WriteNumberValue(MinimumNodeCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaximumNodeCount))
            {
                writer.WritePropertyName("maximumNodeCount"u8);
                writer.WriteNumberValue(MaximumNodeCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableCoreCountPerNode))
            {
                writer.WritePropertyName("availableCoreCountPerNode"u8);
                writer.WriteNumberValue(AvailableCoreCountPerNode.Value);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DbSystemShapeData IJsonModel<DbSystemShapeData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemShapeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemShapeData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDbSystemShapeData(document.RootElement, options);
        }

        internal static DbSystemShapeData DeserializeDbSystemShapeData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> shapeFamily = default;
            Optional<int> availableCoreCount = default;
            Optional<int> minimumCoreCount = default;
            Optional<int> runtimeMinimumCoreCount = default;
            Optional<int> coreCountIncrement = default;
            Optional<int> minStorageCount = default;
            Optional<int> maxStorageCount = default;
            Optional<double> availableDataStoragePerServerInTbs = default;
            Optional<int> availableMemoryPerNodeInGbs = default;
            Optional<int> availableDbNodePerNodeInGbs = default;
            Optional<int> minCoreCountPerNode = default;
            Optional<int> availableMemoryInGbs = default;
            Optional<int> minMemoryPerNodeInGbs = default;
            Optional<int> availableDbNodeStorageInGbs = default;
            Optional<int> minDbNodeStoragePerNodeInGbs = default;
            Optional<int> availableDataStorageInTbs = default;
            Optional<int> minDataStorageInTbs = default;
            Optional<int> minimumNodeCount = default;
            Optional<int> maximumNodeCount = default;
            Optional<int> availableCoreCountPerNode = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("shapeFamily"u8))
                        {
                            shapeFamily = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("availableCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minimumCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minimumCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("runtimeMinimumCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            runtimeMinimumCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("coreCountIncrement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            coreCountIncrement = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minStorageCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minStorageCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("maxStorageCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxStorageCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableDataStoragePerServerInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableDataStoragePerServerInTbs = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("availableMemoryPerNodeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableMemoryPerNodeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableDbNodePerNodeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableDbNodePerNodeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minCoreCountPerNode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minCoreCountPerNode = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableMemoryInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableMemoryInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minMemoryPerNodeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minMemoryPerNodeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableDbNodeStorageInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableDbNodeStorageInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minDbNodeStoragePerNodeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minDbNodeStoragePerNodeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableDataStorageInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableDataStorageInTbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minDataStorageInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minDataStorageInTbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minimumNodeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minimumNodeCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("maximumNodeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maximumNodeCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("availableCoreCountPerNode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availableCoreCountPerNode = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DbSystemShapeData(id, name, type, systemData.Value, shapeFamily.Value, Optional.ToNullable(availableCoreCount), Optional.ToNullable(minimumCoreCount), Optional.ToNullable(runtimeMinimumCoreCount), Optional.ToNullable(coreCountIncrement), Optional.ToNullable(minStorageCount), Optional.ToNullable(maxStorageCount), Optional.ToNullable(availableDataStoragePerServerInTbs), Optional.ToNullable(availableMemoryPerNodeInGbs), Optional.ToNullable(availableDbNodePerNodeInGbs), Optional.ToNullable(minCoreCountPerNode), Optional.ToNullable(availableMemoryInGbs), Optional.ToNullable(minMemoryPerNodeInGbs), Optional.ToNullable(availableDbNodeStorageInGbs), Optional.ToNullable(minDbNodeStoragePerNodeInGbs), Optional.ToNullable(availableDataStorageInTbs), Optional.ToNullable(minDataStorageInTbs), Optional.ToNullable(minimumNodeCount), Optional.ToNullable(maximumNodeCount), Optional.ToNullable(availableCoreCountPerNode), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DbSystemShapeData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemShapeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DbSystemShapeData)} does not support '{options.Format}' format.");
            }
        }

        DbSystemShapeData IPersistableModel<DbSystemShapeData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemShapeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDbSystemShapeData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DbSystemShapeData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DbSystemShapeData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
