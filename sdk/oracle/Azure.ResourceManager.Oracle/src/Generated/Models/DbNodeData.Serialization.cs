// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Oracle.Models;

namespace Azure.ResourceManager.Oracle
{
    public partial class DbNodeData : IUtf8JsonSerializable, IJsonModel<DbNodeData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DbNodeData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DbNodeData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbNodeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbNodeData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (options.Format != "W" && Optional.IsDefined(AdditionalDetails))
            {
                writer.WritePropertyName("additionalDetails"u8);
                writer.WriteStringValue(AdditionalDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(BackupIPId))
            {
                writer.WritePropertyName("backupIpId"u8);
                writer.WriteStringValue(BackupIPId);
            }
            if (options.Format != "W" && Optional.IsDefined(BackupVnic2Id))
            {
                writer.WritePropertyName("backupVnic2Id"u8);
                writer.WriteStringValue(BackupVnic2Id);
            }
            if (options.Format != "W" && Optional.IsDefined(BackupVnicId))
            {
                writer.WritePropertyName("backupVnicId"u8);
                writer.WriteStringValue(BackupVnicId);
            }
            if (options.Format != "W" && Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DbNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("dbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(DbNodeStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DbServerId))
            {
                writer.WritePropertyName("dbServerId"u8);
                writer.WriteStringValue(DbServerId);
            }
            if (options.Format != "W" && Optional.IsDefined(DbSystemId))
            {
                writer.WritePropertyName("dbSystemId"u8);
                writer.WriteStringValue(DbSystemId);
            }
            if (options.Format != "W" && Optional.IsDefined(FaultDomain))
            {
                writer.WritePropertyName("faultDomain"u8);
                writer.WriteStringValue(FaultDomain);
            }
            if (options.Format != "W" && Optional.IsDefined(HostIPId))
            {
                writer.WritePropertyName("hostIpId"u8);
                writer.WriteStringValue(HostIPId);
            }
            if (options.Format != "W" && Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname"u8);
                writer.WriteStringValue(Hostname);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(MaintenanceType))
            {
                writer.WritePropertyName("maintenanceType"u8);
                writer.WriteStringValue(MaintenanceType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SoftwareStorageSizeInGb))
            {
                writer.WritePropertyName("softwareStorageSizeInGb"u8);
                writer.WriteNumberValue(SoftwareStorageSizeInGb.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeCreated))
            {
                writer.WritePropertyName("timeCreated"u8);
                writer.WriteStringValue(TimeCreated.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TimeMaintenanceWindowEnd))
            {
                writer.WritePropertyName("timeMaintenanceWindowEnd"u8);
                writer.WriteStringValue(TimeMaintenanceWindowEnd.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TimeMaintenanceWindowStart))
            {
                writer.WritePropertyName("timeMaintenanceWindowStart"u8);
                writer.WriteStringValue(TimeMaintenanceWindowStart.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Vnic2Id))
            {
                writer.WritePropertyName("vnic2Id"u8);
                writer.WriteStringValue(Vnic2Id);
            }
            if (options.Format != "W" && Optional.IsDefined(VnicId))
            {
                writer.WritePropertyName("vnicId"u8);
                writer.WriteStringValue(VnicId);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DbNodeData IJsonModel<DbNodeData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbNodeData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbNodeData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDbNodeData(document.RootElement, options);
        }

        internal static DbNodeData DeserializeDbNodeData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> ocid = default;
            Optional<string> additionalDetails = default;
            Optional<string> backupIPId = default;
            Optional<string> backupVnic2Id = default;
            Optional<string> backupVnicId = default;
            Optional<int> cpuCoreCount = default;
            Optional<int> dbNodeStorageSizeInGbs = default;
            Optional<string> dbServerId = default;
            Optional<string> dbSystemId = default;
            Optional<string> faultDomain = default;
            Optional<string> hostIPId = default;
            Optional<string> hostname = default;
            Optional<DbNodeProvisioningState> provisioningState = default;
            Optional<string> lifecycleDetails = default;
            Optional<DbNodeMaintenanceType> maintenanceType = default;
            Optional<int> memorySizeInGbs = default;
            Optional<int> softwareStorageSizeInGb = default;
            Optional<DateTimeOffset> timeCreated = default;
            Optional<DateTimeOffset> timeMaintenanceWindowEnd = default;
            Optional<DateTimeOffset> timeMaintenanceWindowStart = default;
            Optional<string> vnic2Id = default;
            Optional<string> vnicId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ocid"u8))
                        {
                            ocid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalDetails"u8))
                        {
                            additionalDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("backupIpId"u8))
                        {
                            backupIPId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("backupVnic2Id"u8))
                        {
                            backupVnic2Id = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("backupVnicId"u8))
                        {
                            backupVnicId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("cpuCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cpuCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dbNodeStorageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dbNodeStorageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dbServerId"u8))
                        {
                            dbServerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dbSystemId"u8))
                        {
                            dbSystemId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("faultDomain"u8))
                        {
                            faultDomain = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hostIpId"u8))
                        {
                            hostIPId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hostname"u8))
                        {
                            hostname = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new DbNodeProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lifecycleDetails"u8))
                        {
                            lifecycleDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("maintenanceType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maintenanceType = new DbNodeMaintenanceType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("memorySizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            memorySizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("softwareStorageSizeInGb"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            softwareStorageSizeInGb = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("timeCreated"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeCreated = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("timeMaintenanceWindowEnd"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeMaintenanceWindowEnd = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("timeMaintenanceWindowStart"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeMaintenanceWindowStart = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("vnic2Id"u8))
                        {
                            vnic2Id = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("vnicId"u8))
                        {
                            vnicId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DbNodeData(id, name, type, systemData.Value, ocid.Value, additionalDetails.Value, backupIPId.Value, backupVnic2Id.Value, backupVnicId.Value, Optional.ToNullable(cpuCoreCount), Optional.ToNullable(dbNodeStorageSizeInGbs), dbServerId.Value, dbSystemId.Value, faultDomain.Value, hostIPId.Value, hostname.Value, Optional.ToNullable(provisioningState), lifecycleDetails.Value, Optional.ToNullable(maintenanceType), Optional.ToNullable(memorySizeInGbs), Optional.ToNullable(softwareStorageSizeInGb), Optional.ToNullable(timeCreated), Optional.ToNullable(timeMaintenanceWindowEnd), Optional.ToNullable(timeMaintenanceWindowStart), vnic2Id.Value, vnicId.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DbNodeData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbNodeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DbNodeData)} does not support '{options.Format}' format.");
            }
        }

        DbNodeData IPersistableModel<DbNodeData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbNodeData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDbNodeData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DbNodeData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DbNodeData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
