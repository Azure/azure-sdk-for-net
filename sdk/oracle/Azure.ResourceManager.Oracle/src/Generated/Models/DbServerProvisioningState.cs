// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Oracle.Models
{
    /// <summary> DbServerProvisioningState enum. </summary>
    public readonly partial struct DbServerProvisioningState : IEquatable<DbServerProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DbServerProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbServerProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string ProvisioningValue = "Provisioning";
        private const string AvailableValue = "Available";
        private const string UpdatingValue = "Updating";
        private const string TerminatingValue = "Terminating";
        private const string TerminatedValue = "Terminated";
        private const string MaintenanceInProgressValue = "MaintenanceInProgress";

        /// <summary> Resource has been created. </summary>
        public static DbServerProvisioningState Succeeded { get; } = new DbServerProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static DbServerProvisioningState Failed { get; } = new DbServerProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static DbServerProvisioningState Canceled { get; } = new DbServerProvisioningState(CanceledValue);
        /// <summary> Provisioning value. </summary>
        public static DbServerProvisioningState Provisioning { get; } = new DbServerProvisioningState(ProvisioningValue);
        /// <summary> Available value. </summary>
        public static DbServerProvisioningState Available { get; } = new DbServerProvisioningState(AvailableValue);
        /// <summary> Updating value. </summary>
        public static DbServerProvisioningState Updating { get; } = new DbServerProvisioningState(UpdatingValue);
        /// <summary> Terminating value. </summary>
        public static DbServerProvisioningState Terminating { get; } = new DbServerProvisioningState(TerminatingValue);
        /// <summary> Terminated value. </summary>
        public static DbServerProvisioningState Terminated { get; } = new DbServerProvisioningState(TerminatedValue);
        /// <summary> MaintenanceInProgress value. </summary>
        public static DbServerProvisioningState MaintenanceInProgress { get; } = new DbServerProvisioningState(MaintenanceInProgressValue);
        /// <summary> Determines if two <see cref="DbServerProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DbServerProvisioningState left, DbServerProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DbServerProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DbServerProvisioningState left, DbServerProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DbServerProvisioningState"/>. </summary>
        public static implicit operator DbServerProvisioningState(string value) => new DbServerProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbServerProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DbServerProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
