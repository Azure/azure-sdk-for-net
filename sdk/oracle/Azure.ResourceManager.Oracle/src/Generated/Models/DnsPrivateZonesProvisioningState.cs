// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Oracle.Models
{
    /// <summary> DnsPrivateZones provisioning state enum. </summary>
    public readonly partial struct DnsPrivateZonesProvisioningState : IEquatable<DnsPrivateZonesProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DnsPrivateZonesProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DnsPrivateZonesProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string ActiveValue = "Active";
        private const string CreatingValue = "Creating";
        private const string DeletedValue = "Deleted";
        private const string DeletingValue = "Deleting";
        private const string UpdatingValue = "Updating";

        /// <summary> Resource has been created. </summary>
        public static DnsPrivateZonesProvisioningState Succeeded { get; } = new DnsPrivateZonesProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static DnsPrivateZonesProvisioningState Failed { get; } = new DnsPrivateZonesProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static DnsPrivateZonesProvisioningState Canceled { get; } = new DnsPrivateZonesProvisioningState(CanceledValue);
        /// <summary> Active value. </summary>
        public static DnsPrivateZonesProvisioningState Active { get; } = new DnsPrivateZonesProvisioningState(ActiveValue);
        /// <summary> Creating value. </summary>
        public static DnsPrivateZonesProvisioningState Creating { get; } = new DnsPrivateZonesProvisioningState(CreatingValue);
        /// <summary> Deleted value. </summary>
        public static DnsPrivateZonesProvisioningState Deleted { get; } = new DnsPrivateZonesProvisioningState(DeletedValue);
        /// <summary> Deleting value. </summary>
        public static DnsPrivateZonesProvisioningState Deleting { get; } = new DnsPrivateZonesProvisioningState(DeletingValue);
        /// <summary> Updating value. </summary>
        public static DnsPrivateZonesProvisioningState Updating { get; } = new DnsPrivateZonesProvisioningState(UpdatingValue);
        /// <summary> Determines if two <see cref="DnsPrivateZonesProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DnsPrivateZonesProvisioningState left, DnsPrivateZonesProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DnsPrivateZonesProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DnsPrivateZonesProvisioningState left, DnsPrivateZonesProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DnsPrivateZonesProvisioningState"/>. </summary>
        public static implicit operator DnsPrivateZonesProvisioningState(string value) => new DnsPrivateZonesProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DnsPrivateZonesProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DnsPrivateZonesProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
