// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.OracleDatabase.Samples
{
    public partial class Sample_AutonomousDatabaseCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateAutonomousDatabaseGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            AutonomousDatabaseData data = new AutonomousDatabaseData(new AzureLocation("eastus"))
            {
                Properties = new AutonomousDatabaseProperties
                {
                    AdminPassword = "********",
                    AutonomousMaintenanceScheduleType = AutonomousMaintenanceScheduleType.Regular,
                    CharacterSet = "AL32UTF8",
                    ComputeCount = 2F,
                    DatabaseComputeModel = OracleDatabaseComputeModel.Ecpu,
                    CpuCoreCount = 1,
                    CustomerContacts = { new OracleCustomerContact("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq") },
                    DataStorageSizeInTbs = 1,
                    DataStorageSizeInGbs = 1024,
                    DBVersion = "18.4.0.0",
                    DBWorkload = AutonomousDatabaseWorkloadType.Oltp,
                    DisplayName = "example_autonomous_databasedb1",
                    IsAutoScalingEnabled = true,
                    IsAutoScalingForStorageEnabled = true,
                    PeerDBId = "jghxnzevghltfytskymsxgyrugfedzchifwoezwbcwzzvpikoqqjcdiesbidbeqkmncodchlmktetjlgjgbaofwpwmpvckmusaunrzdrctypasgcabyjwxwzkodwugdpeprikvxygxyb",
                    IsLocalDataGuardEnabled = true,
                    IsMtlsConnectionRequired = true,
                    IsPreviewVersionWithServiceTermsAccepted = true,
                    LicenseModel = OracleLicenseModel.BringYourOwnLicense,
                    NcharacterSet = "AL16UTF16",
                    ScheduledOperationsList = {new ScheduledOperationsType(new OracleDatabaseDayOfWeek(OracleDatabaseDayOfWeekName.Monday))
{
AutoStartOn = DateTimeOffset.Parse("lwwvkazgmfremfwhckfb"),
AutoStopOn = DateTimeOffset.Parse("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
}},
                    PrivateEndpointIP = "rdlbhw",
                    PrivateEndpointLabel = "worwqllbglhyakksevparfuaivc",
                    SubnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                    VnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                    DatabaseEdition = OracleDatabaseEditionType.EnterpriseEdition,
                    AutonomousDatabaseId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
                    LongTermBackupSchedule = new LongTermBackUpScheduleDetails
                    {
                        RepeatCadence = RepeatCadenceType.OneTime,
                        BackupOn = DateTimeOffset.Parse("2025-08-01T04:32:58.715Z"),
                        RetentionPeriodInDays = 188,
                        IsDisabled = true,
                    },
                    LocalAdgAutoFailoverMaxDataLossLimit = 1759,
                    OpenMode = AutonomousDatabaseModeType.ReadOnly,
                    PermissionLevel = AutonomousDatabasePermissionLevelType.Restricted,
                    Role = DataGuardRoleType.Primary,
                    BackupRetentionPeriodInDays = 1,
                    WhitelistedIPs = { "1.1.1.1", "1.1.1.0/24", "1.1.2.25" },
                },
                Tags = { },
            };
            ArmOperation<AutonomousDatabaseResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, autonomousdatabasename, data);
            AutonomousDatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutonomousDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AutonomousDatabasesCreateOrUpdateClone()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabaseClone_create.json
            // this example is just showing the usage of "AutonomousDatabase_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            AutonomousDatabaseData data = new AutonomousDatabaseData(new AzureLocation("eastus"))
            {
                Properties = new AutonomousDatabaseCloneProperties(new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"), AutonomousDatabaseCloneType.Full)
                {
                    AdminPassword = "********",
                    CharacterSet = "AL32UTF8",
                    ComputeCount = 2F,
                    DatabaseComputeModel = OracleDatabaseComputeModel.Ecpu,
                    DataStorageSizeInTbs = 1,
                    DisplayName = "example_autonomous_databasedb1_clone",
                    NcharacterSet = "AL16UTF16",
                    SubnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                    VnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                },
                Tags =
{
["tagK1"] = "tagV1"
},
            };
            ArmOperation<AutonomousDatabaseResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, autonomousdatabasename, data);
            AutonomousDatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutonomousDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AutonomousDatabasesCreateOrUpdate()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabase_create.json
            // this example is just showing the usage of "AutonomousDatabase_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            AutonomousDatabaseData data = new AutonomousDatabaseData(new AzureLocation("eastus"))
            {
                Properties = new AutonomousDatabaseProperties
                {
                    AdminPassword = "********",
                    CharacterSet = "AL32UTF8",
                    ComputeCount = 2F,
                    DatabaseComputeModel = OracleDatabaseComputeModel.Ecpu,
                    DataStorageSizeInTbs = 1,
                    DBVersion = "18.4.0.0",
                    DisplayName = "example_autonomous_databasedb1",
                    NcharacterSet = "AL16UTF16",
                    SubnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                    VnetId = new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                },
                Tags =
{
["tagK1"] = "tagV1"
},
            };
            ArmOperation<AutonomousDatabaseResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, autonomousdatabasename, data);
            AutonomousDatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutonomousDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAutonomousDatabaseGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "database1";
            AutonomousDatabaseResource result = await collection.GetAsync(autonomousdatabasename);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutonomousDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AutonomousDatabasesGet()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabase_get.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            AutonomousDatabaseResource result = await collection.GetAsync(autonomousdatabasename);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AutonomousDatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListAutonomousDatabaseByResourceGroupGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation and iterate over the result
            await foreach (AutonomousDatabaseResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutonomousDatabaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListAutonomousDatabaseByResourceGroupGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation and iterate over the result
            await foreach (AutonomousDatabaseResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutonomousDatabaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AutonomousDatabasesListByResourceGroup()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabase_listByResourceGroup.json
            // this example is just showing the usage of "AutonomousDatabase_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation and iterate over the result
            await foreach (AutonomousDatabaseResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutonomousDatabaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetAutonomousDatabaseGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "database1";
            bool result = await collection.ExistsAsync(autonomousdatabasename);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AutonomousDatabasesGet()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabase_get.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            bool result = await collection.ExistsAsync(autonomousdatabasename);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetAutonomousDatabaseGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/AutonomousDatabases_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "database1";
            NullableResponse<AutonomousDatabaseResource> response = await collection.GetIfExistsAsync(autonomousdatabasename);
            AutonomousDatabaseResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutonomousDatabaseData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AutonomousDatabasesGet()
        {
            // Generated from example definition: 2025-09-01/autonomousDatabase_get.json
            // this example is just showing the usage of "AutonomousDatabase_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this AutonomousDatabaseResource
            AutonomousDatabaseCollection collection = resourceGroupResource.GetAutonomousDatabases();

            // invoke the operation
            string autonomousdatabasename = "databasedb1";
            NullableResponse<AutonomousDatabaseResource> response = await collection.GetIfExistsAsync(autonomousdatabasename);
            AutonomousDatabaseResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AutonomousDatabaseData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
