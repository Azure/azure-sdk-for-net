// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.OracleDatabase.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.OracleDatabase.Samples
{
    public partial class Sample_OracleResourceAnchorResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ResourceAnchorsGetMaximumSet()
        {
            // Generated from example definition: 2025-09-01/ResourceAnchors_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ResourceAnchor_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OracleResourceAnchorResource created on azure
            // for more information of creating OracleResourceAnchorResource, please refer to the document of OracleResourceAnchorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            string resourceAnchorName = "resourceanchor1";
            ResourceIdentifier oracleResourceAnchorResourceId = OracleResourceAnchorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceAnchorName);
            OracleResourceAnchorResource oracleResourceAnchor = client.GetOracleResourceAnchorResource(oracleResourceAnchorResourceId);

            // invoke the operation
            OracleResourceAnchorResource result = await oracleResourceAnchor.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OracleResourceAnchorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ResourceAnchorsDeleteMaximumSet()
        {
            // Generated from example definition: 2025-09-01/ResourceAnchors_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "ResourceAnchor_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OracleResourceAnchorResource created on azure
            // for more information of creating OracleResourceAnchorResource, please refer to the document of OracleResourceAnchorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            string resourceAnchorName = "resourceanchor1";
            ResourceIdentifier oracleResourceAnchorResourceId = OracleResourceAnchorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceAnchorName);
            OracleResourceAnchorResource oracleResourceAnchor = client.GetOracleResourceAnchorResource(oracleResourceAnchorResourceId);

            // invoke the operation
            await oracleResourceAnchor.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ResourceAnchorsUpdateMaximumSet()
        {
            // Generated from example definition: 2025-09-01/ResourceAnchors_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "ResourceAnchor_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this OracleResourceAnchorResource created on azure
            // for more information of creating OracleResourceAnchorResource, please refer to the document of OracleResourceAnchorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            string resourceAnchorName = "resourceanchor1";
            ResourceIdentifier oracleResourceAnchorResourceId = OracleResourceAnchorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, resourceAnchorName);
            OracleResourceAnchorResource oracleResourceAnchor = client.GetOracleResourceAnchorResource(oracleResourceAnchorResourceId);

            // invoke the operation
            OracleResourceAnchorPatch patch = new OracleResourceAnchorPatch
            {
                Tags =
{
["key3998"] = "beigadznkpzbohlefgofq"
},
            };
            ArmOperation<OracleResourceAnchorResource> lro = await oracleResourceAnchor.UpdateAsync(WaitUntil.Completed, patch);
            OracleResourceAnchorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OracleResourceAnchorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
