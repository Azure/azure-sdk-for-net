// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.OracleDatabase.Samples
{
    public partial class Sample_CloudVmClusterCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateVMClusterGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            CloudVmClusterData data = new CloudVmClusterData(new AzureLocation("eastus"))
            {
                Properties = new CloudVmClusterProperties(
                "hostname1",
                2,
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/cloudExadataInfrastructures/infra1"),
                new string[] { "ssh-key 1" },
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                "19.0.0.0",
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                "cluster 1")
                {
                    StorageSizeInGbs = 1000,
                    FileSystemConfigurationDetails = {new FileSystemConfigurationDetails
{
MountPoint = "gukfhjlmkqfqdgb",
FileSystemSizeGb = 20,
}},
                    DataStorageSizeInTbs = 1000,
                    DBNodeStorageSizeInGbs = 1000,
                    MemorySizeInGbs = 1000,
                    TimeZone = "UTC",
                    ZoneOcid = "ocid1..aaaa",
                    Domain = "domain1",
                    OcpuCount = 3F,
                    ClusterName = "cluster1",
                    DataStoragePercentage = 100,
                    IsLocalBackupEnabled = true,
                    IsSparseDiskgroupEnabled = true,
                    SystemVersion = "v1",
                    LicenseModel = OracleLicenseModel.LicenseIncluded,
                    ScanListenerPortTcp = 1050,
                    ScanListenerPortTcpSsl = 1025,
                    BackupSubnetCidr = "172.17.5.0/24",
                    NsgCidrs = {new CloudVmClusterNsgCidr("10.0.0.0/16")
{
DestinationPortRange = new CloudVmClusterPortRange(1520, 1522),
}, new CloudVmClusterNsgCidr("10.10.0.0/24")
{
DestinationPortRange = new CloudVmClusterPortRange(9434, 11996),
}},
                    DataCollectionOptions = new DiagnosticCollectionConfig
                    {
                        IsDiagnosticsEventsEnabled = true,
                        IsHealthMonitoringEnabled = true,
                        IsIncidentLogsEnabled = true,
                    },
                    ComputeNodeOcids = { "ggficcnjgibtuqgdbbrzyckmtlhddecfcvjurboqfufqchgpvwmlcdcyyxnjivpkvsvr" },
                    DBServerOcids = { "ocid1..aaaa" },
                },
                Tags = { },
            };
            ArmOperation<CloudVmClusterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, cloudvmclustername, data);
            CloudVmClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateVMClusterGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_CreateOrUpdate_MinimumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            CloudVmClusterData data = new CloudVmClusterData(new AzureLocation("eastus"));
            ArmOperation<CloudVmClusterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, cloudvmclustername, data);
            CloudVmClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CloudVmClustersCreateOrUpdate()
        {
            // Generated from example definition: 2025-09-01/vmClusters_create.json
            // this example is just showing the usage of "CloudVmCluster_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cluster1";
            CloudVmClusterData data = new CloudVmClusterData(new AzureLocation("eastus"))
            {
                Properties = new CloudVmClusterProperties(
                "hostname1",
                2,
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/cloudExadataInfrastructures/infra1"),
                new string[] { "ssh-key 1" },
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                "19.0.0.0",
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                "cluster 1")
                {
                    DataStorageSizeInTbs = 1000,
                    DBNodeStorageSizeInGbs = 1000,
                    MemorySizeInGbs = 1000,
                    TimeZone = "UTC",
                    Domain = "domain1",
                    OcpuCount = 3F,
                    ClusterName = "cluster1",
                    DataStoragePercentage = 100,
                    IsLocalBackupEnabled = false,
                    IsSparseDiskgroupEnabled = false,
                    LicenseModel = OracleLicenseModel.LicenseIncluded,
                    ScanListenerPortTcp = 1050,
                    ScanListenerPortTcpSsl = 1025,
                    BackupSubnetCidr = "172.17.5.0/24",
                    NsgCidrs = {new CloudVmClusterNsgCidr("10.0.0.0/16")
{
DestinationPortRange = new CloudVmClusterPortRange(1520, 1522),
}, new CloudVmClusterNsgCidr("10.10.0.0/24")},
                    DataCollectionOptions = new DiagnosticCollectionConfig
                    {
                        IsDiagnosticsEventsEnabled = false,
                        IsHealthMonitoringEnabled = false,
                        IsIncidentLogsEnabled = false,
                    },
                    DBServerOcids = { "ocid1..aaaa" },
                },
                Tags =
{
["tagK1"] = "tagV1"
},
            };
            ArmOperation<CloudVmClusterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, cloudvmclustername, data);
            CloudVmClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetVMClusterGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            CloudVmClusterResource result = await collection.GetAsync(cloudvmclustername);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetVMClusterGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            CloudVmClusterResource result = await collection.GetAsync(cloudvmclustername);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_CloudVmClustersGet()
        {
            // Generated from example definition: 2025-09-01/vmClusters_get.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cluster1";
            CloudVmClusterResource result = await collection.GetAsync(cloudvmclustername);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CloudVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListVMClustersByResourceGroupGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation and iterate over the result
            await foreach (CloudVmClusterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ListVMClustersByResourceGroupGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation and iterate over the result
            await foreach (CloudVmClusterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_CloudVmClustersListByResourceGroup()
        {
            // Generated from example definition: 2025-09-01/vmClusters_listByResourceGroup.json
            // this example is just showing the usage of "CloudVmCluster_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation and iterate over the result
            await foreach (CloudVmClusterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetVMClusterGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            bool result = await collection.ExistsAsync(cloudvmclustername);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetVMClusterGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            bool result = await collection.ExistsAsync(cloudvmclustername);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_CloudVmClustersGet()
        {
            // Generated from example definition: 2025-09-01/vmClusters_get.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cluster1";
            bool result = await collection.ExistsAsync(cloudvmclustername);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetVMClusterGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            NullableResponse<CloudVmClusterResource> response = await collection.GetIfExistsAsync(cloudvmclustername);
            CloudVmClusterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetVMClusterGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/CloudVmClusters_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cloudvmcluster1";
            NullableResponse<CloudVmClusterResource> response = await collection.GetIfExistsAsync(cloudvmclustername);
            CloudVmClusterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_CloudVmClustersGet()
        {
            // Generated from example definition: 2025-09-01/vmClusters_get.json
            // this example is just showing the usage of "CloudVmCluster_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rg000";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this CloudVmClusterResource
            CloudVmClusterCollection collection = resourceGroupResource.GetCloudVmClusters();

            // invoke the operation
            string cloudvmclustername = "cluster1";
            NullableResponse<CloudVmClusterResource> response = await collection.GetIfExistsAsync(cloudvmclustername);
            CloudVmClusterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                CloudVmClusterData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
