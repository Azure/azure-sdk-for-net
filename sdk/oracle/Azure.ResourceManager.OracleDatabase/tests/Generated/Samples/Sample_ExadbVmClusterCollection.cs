// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.OracleDatabase.Samples
{
    public partial class Sample_ExadbVmClusterCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_ExadbVmClustersCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: specification/oracle/resource-manager/Oracle.Database/stable/2025-03-01/examples/ExadbVmClusters_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "ExadbVmClusters_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ExadbVmClusterResource
            ExadbVmClusterCollection collection = resourceGroupResource.GetExadbVmClusters();

            // invoke the operation
            string exadbVmClusterName = "clusterName";
            ExadbVmClusterData data = new ExadbVmClusterData(new AzureLocation("xojp"))
            {
                Properties = new ExadbVmClusterProperties(
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
                "dyhkncxzzgcwlfkfygvqlvqbxekvkbhjprmuxtaukewjnfrrnfqgrqsjfgsayrezkspqplrduuomuvtpkqurcoqjdnadlvedgfngglcgafbxtcewxlgckvehhqgfwkokbjoqftunjsgfjwbdaftxoytsphydwogtlnfxxuzzjvqcrin",
                0,
                new ResourceIdentifier("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Oracle.Database/exascaleDbStorageVaults/storageVaultName"),
                "tdn",
                8,
                "evenjblxxfsztdxlcr",
                new string[] { "wiseakllkohemfmnoyteg" },
                56,
                new ExadbVmClusterStorageDetails(10))
                {
                    ClusterName = "hssswln",
                    BackupSubnetCidr = "fr",
                    DataCollectionOptions = new DiagnosticCollectionConfig
                    {
                        IsDiagnosticsEventsEnabled = true,
                        IsHealthMonitoringEnabled = true,
                        IsIncidentLogsEnabled = true,
                    },
                    Domain = "vzfak",
                    GridImageOcid = new ResourceIdentifier("ocid1.dbpatch.oc1..aaaaa3klq"),
                    LicenseModel = OracleLicenseModel.LicenseIncluded,
                    NsgCidrs = {new CloudVmClusterNsgCidr("10.0.0.0/16")
{
DestinationPortRange = new CloudVmClusterPortRange(1520, 1522),
}},
                    PrivateZoneOcid = new ResourceIdentifier("ocid1.autonomousdatabase.oc1..aaaaa3klq"),
                    ScanListenerPortTcp = 9,
                    ScanListenerPortTcpSsl = 18,
                    SystemVersion = "udwsykstqawwjrvzebfyyccnjzhxtijvywlgnrkqxnboibyppistnbvqqsnsxmjnzeumgnatmarzfnjhglmtrknszthrxtwewwqjbkwytbhtjbgondtktkpvjmxdcuyjupr",
                    TimeZone = "ayuqnpfkasdzmxlfnkjzrenyogbvcysdbkstjhyjdgxygitlykihtwdiktilukyplgxovaonrqcqaviyaqgyrqfrklqvqyobnxgmzpqbgjhdtjdquhyqnvhavnqpfupaqhdedgdvfomeueeuwjjfiqiyxspybpyj",
                },
                Zones = { "iupjvcfsbvfhrebwf" },
                Tags =
{
["key9683"] = "umnfswbmhxzsomcluslxhnxxika"
},
            };
            ArmOperation<ExadbVmClusterResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, exadbVmClusterName, data);
            ExadbVmClusterResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExadbVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ExadbVmClustersGetMaximumSet()
        {
            // Generated from example definition: specification/oracle/resource-manager/Oracle.Database/stable/2025-03-01/examples/ExadbVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ExadbVmClusters_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ExadbVmClusterResource
            ExadbVmClusterCollection collection = resourceGroupResource.GetExadbVmClusters();

            // invoke the operation
            string exadbVmClusterName = "vmClusterName";
            ExadbVmClusterResource result = await collection.GetAsync(exadbVmClusterName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExadbVmClusterData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_ExadbVmClustersListByResourceGroupMaximumSet()
        {
            // Generated from example definition: specification/oracle/resource-manager/Oracle.Database/stable/2025-03-01/examples/ExadbVmClusters_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "ExadbVmClusters_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ExadbVmClusterResource
            ExadbVmClusterCollection collection = resourceGroupResource.GetExadbVmClusters();

            // invoke the operation and iterate over the result
            await foreach (ExadbVmClusterResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ExadbVmClusterData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_ExadbVmClustersGetMaximumSet()
        {
            // Generated from example definition: specification/oracle/resource-manager/Oracle.Database/stable/2025-03-01/examples/ExadbVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ExadbVmClusters_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ExadbVmClusterResource
            ExadbVmClusterCollection collection = resourceGroupResource.GetExadbVmClusters();

            // invoke the operation
            string exadbVmClusterName = "vmClusterName";
            bool result = await collection.ExistsAsync(exadbVmClusterName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_ExadbVmClustersGetMaximumSet()
        {
            // Generated from example definition: specification/oracle/resource-manager/Oracle.Database/stable/2025-03-01/examples/ExadbVmClusters_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "ExadbVmClusters_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this ExadbVmClusterResource
            ExadbVmClusterCollection collection = resourceGroupResource.GetExadbVmClusters();

            // invoke the operation
            string exadbVmClusterName = "vmClusterName";
            NullableResponse<ExadbVmClusterResource> response = await collection.GetIfExistsAsync(exadbVmClusterName);
            ExadbVmClusterResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                ExadbVmClusterData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
