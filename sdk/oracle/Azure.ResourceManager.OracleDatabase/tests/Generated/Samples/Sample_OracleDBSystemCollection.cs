// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.OracleDatabase.Samples
{
    public partial class Sample_OracleDBSystemCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DbSystemsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2025-09-01/DbSystems_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "DbSystem_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation
            string dbSystemName = "dbsystem1";
            OracleDBSystemData data = new OracleDBSystemData(new AzureLocation("uuh"))
            {
                Properties = new OracleDBSystemProperties(
                new ResourceIdentifier("/subscriptions/00000000-0000-4025-0000-000000000000/resourceGroups/rg001/providers/Oracle.Database/resourceAnchors/resourceanchor1"),
                new ResourceIdentifier("/subscriptions/00000000-0000-4025-0000-000000000000/resourceGroups/rg001/providers/Oracle.Database/networkAnchors/networkanchor1"),
                "krixp",
                "kcknzpixkpolhxpcvpzwhjjvyafciktxguoljnixmztvkfryxaqogtrefbjbibzlbojjnuhrrxninevocnigpzenshgqozclxyhzwkavncfvekfpmbxhinwqvupoacgascnmqvplqckjrqbxsejzprsvgvmvkbuvncffjv",
                new string[] { "qtozhgwrjzkmwvdsggbivnbcwgykjnuvugqwmzompvbyfi" },
                DBSystemDatabaseEditionType.StandardEdition,
                "nuzcyzulicdscaxxleansibdtqxhf")
                {
                    AdminPassword = "********",
                    ClusterName = "icshqxm",
                    DisplayName = "cpvibowyttzngughrisxfglqnffhtbjacuskwmixpczatxyrmrrgjsokonbolesdufrvuganmokwjkziisezqbvhmxtftldjulyixvmrcpmtlhynhbdlufcjdmmlbvcjdwbumjzdgwrxthntbbzscyrgmcfmkkowpujydlofklcrhdhoefeyl",
                    InitialDataStorageSizeInGb = 19,
                    DbSystemOptionsStorageManagement = StorageManagementType.Lvm,
                    DiskRedundancy = DBSystemDiskRedundancyType.High,
                    NodeCount = 24,
                    StorageVolumePerformanceMode = StorageVolumePerformanceMode.Balanced,
                    TimeZone = "gyrlmvdtseawpykcpwlgexrcffciyavsshsekacwcfkubcqdbrliy",
                    ComputeModel = OracleDatabaseComputeModel.Ecpu,
                    ComputeCount = 28,
                },
                Zones = { "pstozrrpkhlaffxt" },
                Tags =
{
["key2549"] = "orxnddawgxmye"
},
            };
            ArmOperation<OracleDBSystemResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, dbSystemName, data);
            OracleDBSystemResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OracleDBSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DbSystemsGetMaximumSet()
        {
            // Generated from example definition: 2025-09-01/DbSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DbSystem_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation
            string dbSystemName = "dbsystem1";
            OracleDBSystemResource result = await collection.GetAsync(dbSystemName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            OracleDBSystemData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DbSystemsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2025-09-01/DbSystems_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "DbSystem_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation and iterate over the result
            await foreach (OracleDBSystemResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OracleDBSystemData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DbSystemsListByResourceGroupMaximumSetGenGeneratedByMinimumSetRule()
        {
            // Generated from example definition: 2025-09-01/DbSystems_ListByResourceGroup_MinimumSet_Gen.json
            // this example is just showing the usage of "DbSystem_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation and iterate over the result
            await foreach (OracleDBSystemResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OracleDBSystemData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DbSystemsGetMaximumSet()
        {
            // Generated from example definition: 2025-09-01/DbSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DbSystem_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation
            string dbSystemName = "dbsystem1";
            bool result = await collection.ExistsAsync(dbSystemName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DbSystemsGetMaximumSet()
        {
            // Generated from example definition: 2025-09-01/DbSystems_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DbSystem_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this OracleDBSystemResource
            OracleDBSystemCollection collection = resourceGroupResource.GetOracleDBSystems();

            // invoke the operation
            string dbSystemName = "dbsystem1";
            NullableResponse<OracleDBSystemResource> response = await collection.GetIfExistsAsync(dbSystemName);
            OracleDBSystemResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                OracleDBSystemData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
