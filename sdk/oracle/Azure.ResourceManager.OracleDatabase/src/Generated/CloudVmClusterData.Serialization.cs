// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.OracleDatabase.Models;

namespace Azure.ResourceManager.OracleDatabase
{
    public partial class CloudVmClusterData : IUtf8JsonSerializable, IJsonModel<CloudVmClusterData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CloudVmClusterData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CloudVmClusterData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (options.Format != "W" && Optional.IsDefined(ListenerPort))
            {
                writer.WritePropertyName("listenerPort"u8);
                writer.WriteNumberValue(ListenerPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NodeCount))
            {
                writer.WritePropertyName("nodeCount"u8);
                writer.WriteNumberValue(NodeCount.Value);
            }
            if (Optional.IsDefined(StorageSizeInGbs))
            {
                writer.WritePropertyName("storageSizeInGbs"u8);
                writer.WriteNumberValue(StorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (Optional.IsDefined(DbNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("dbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(DbNodeStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeCreated))
            {
                writer.WritePropertyName("timeCreated"u8);
                writer.WriteStringValue(TimeCreated.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            if (Optional.IsDefined(ZoneId))
            {
                writer.WritePropertyName("zoneId"u8);
                writer.WriteStringValue(ZoneId);
            }
            if (Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname"u8);
                writer.WriteStringValue(Hostname);
            }
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            if (Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (Optional.IsDefined(OcpuCount))
            {
                writer.WritePropertyName("ocpuCount"u8);
                writer.WriteNumberValue(OcpuCount.Value);
            }
            if (Optional.IsDefined(ClusterName))
            {
                writer.WritePropertyName("clusterName"u8);
                writer.WriteStringValue(ClusterName);
            }
            if (Optional.IsDefined(DataStoragePercentage))
            {
                writer.WritePropertyName("dataStoragePercentage"u8);
                writer.WriteNumberValue(DataStoragePercentage.Value);
            }
            if (Optional.IsDefined(IsLocalBackupEnabled))
            {
                writer.WritePropertyName("isLocalBackupEnabled"u8);
                writer.WriteBooleanValue(IsLocalBackupEnabled.Value);
            }
            if (Optional.IsDefined(CloudExadataInfrastructureId))
            {
                writer.WritePropertyName("cloudExadataInfrastructureId"u8);
                writer.WriteStringValue(CloudExadataInfrastructureId);
            }
            if (Optional.IsDefined(IsSparseDiskgroupEnabled))
            {
                writer.WritePropertyName("isSparseDiskgroupEnabled"u8);
                writer.WriteBooleanValue(IsSparseDiskgroupEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemVersion))
            {
                writer.WritePropertyName("systemVersion"u8);
                writer.WriteStringValue(SystemVersion);
            }
            if (Optional.IsCollectionDefined(SshPublicKeys))
            {
                writer.WritePropertyName("sshPublicKeys"u8);
                writer.WriteStartArray();
                foreach (var item in SshPublicKeys)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DiskRedundancy))
            {
                writer.WritePropertyName("diskRedundancy"u8);
                writer.WriteStringValue(DiskRedundancy.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ScanIPIds))
            {
                writer.WritePropertyName("scanIpIds"u8);
                writer.WriteStartArray();
                foreach (var item in ScanIPIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VipIds))
            {
                writer.WritePropertyName("vipIds"u8);
                writer.WriteStartArray();
                foreach (var item in VipIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsName))
            {
                writer.WritePropertyName("scanDnsName"u8);
                writer.WriteStringValue(ScanDnsName);
            }
            if (Optional.IsDefined(ScanListenerPortTcp))
            {
                writer.WritePropertyName("scanListenerPortTcp"u8);
                writer.WriteNumberValue(ScanListenerPortTcp.Value);
            }
            if (Optional.IsDefined(ScanListenerPortTcpSsl))
            {
                writer.WritePropertyName("scanListenerPortTcpSsl"u8);
                writer.WriteNumberValue(ScanListenerPortTcpSsl.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsRecordId))
            {
                writer.WritePropertyName("scanDnsRecordId"u8);
                writer.WriteStringValue(ScanDnsRecordId);
            }
            if (options.Format != "W" && Optional.IsDefined(Shape))
            {
                writer.WritePropertyName("shape"u8);
                writer.WriteStringValue(Shape);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            if (Optional.IsDefined(VnetId))
            {
                writer.WritePropertyName("vnetId"u8);
                writer.WriteStringValue(VnetId);
            }
            if (Optional.IsDefined(GiVersion))
            {
                writer.WritePropertyName("giVersion"u8);
                writer.WriteStringValue(GiVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(NsgUri))
            {
                writer.WritePropertyName("nsgUrl"u8);
                writer.WriteStringValue(NsgUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(BackupSubnetCidr))
            {
                writer.WritePropertyName("backupSubnetCidr"u8);
                writer.WriteStringValue(BackupSubnetCidr);
            }
            if (Optional.IsCollectionDefined(NsgCidrs))
            {
                writer.WritePropertyName("nsgCidrs"u8);
                writer.WriteStartArray();
                foreach (var item in NsgCidrs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataCollectionOptions))
            {
                writer.WritePropertyName("dataCollectionOptions"u8);
                writer.WriteObjectValue(DataCollectionOptions, options);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsCollectionDefined(ComputeNodes))
            {
                writer.WritePropertyName("computeNodes"u8);
                writer.WriteStartArray();
                foreach (var item in ComputeNodes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(IormConfigCache))
            {
                writer.WritePropertyName("iormConfigCache"u8);
                writer.WriteObjectValue(IormConfigCache, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdateHistoryEntryId))
            {
                writer.WritePropertyName("lastUpdateHistoryEntryId"u8);
                writer.WriteStringValue(LastUpdateHistoryEntryId);
            }
            if (Optional.IsCollectionDefined(DbServers))
            {
                writer.WritePropertyName("dbServers"u8);
                writer.WriteStartArray();
                foreach (var item in DbServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(CompartmentId))
            {
                writer.WritePropertyName("compartmentId"u8);
                writer.WriteStringValue(CompartmentId);
            }
            if (options.Format != "W" && Optional.IsDefined(SubnetOcid))
            {
                writer.WritePropertyName("subnetOcid"u8);
                writer.WriteStringValue(SubnetOcid);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CloudVmClusterData IJsonModel<CloudVmClusterData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCloudVmClusterData(document.RootElement, options);
        }

        internal static CloudVmClusterData DeserializeCloudVmClusterData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            string ocid = default;
            long? listenerPort = default;
            int? nodeCount = default;
            int? storageSizeInGbs = default;
            double? dataStorageSizeInTbs = default;
            int? dbNodeStorageSizeInGbs = default;
            int? memorySizeInGbs = default;
            DateTimeOffset? timeCreated = default;
            string lifecycleDetails = default;
            string timeZone = default;
            string zoneId = default;
            string hostname = default;
            string domain = default;
            int? cpuCoreCount = default;
            float? ocpuCount = default;
            string clusterName = default;
            int? dataStoragePercentage = default;
            bool? isLocalBackupEnabled = default;
            ResourceIdentifier cloudExadataInfrastructureId = default;
            bool? isSparseDiskgroupEnabled = default;
            string systemVersion = default;
            IList<string> sshPublicKeys = default;
            LicenseModel? licenseModel = default;
            DiskRedundancy? diskRedundancy = default;
            IReadOnlyList<string> scanIPIds = default;
            IReadOnlyList<string> vipIds = default;
            string scanDnsName = default;
            int? scanListenerPortTcp = default;
            int? scanListenerPortTcpSsl = default;
            string scanDnsRecordId = default;
            string shape = default;
            AzureResourceProvisioningState? provisioningState = default;
            CloudVmClusterLifecycleState? lifecycleState = default;
            ResourceIdentifier vnetId = default;
            string giVersion = default;
            Uri ociUrl = default;
            Uri nsgUrl = default;
            ResourceIdentifier subnetId = default;
            string backupSubnetCidr = default;
            IList<NSGCidr> nsgCidrs = default;
            DataCollectionOptions dataCollectionOptions = default;
            string displayName = default;
            IList<string> computeNodes = default;
            ExadataIormConfig iormConfigCache = default;
            string lastUpdateHistoryEntryId = default;
            IList<string> dbServers = default;
            string compartmentId = default;
            string subnetOcid = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ocid"u8))
                        {
                            ocid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("listenerPort"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            listenerPort = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("nodeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nodeCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("storageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            storageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStorageSizeInTbs = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("dbNodeStorageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dbNodeStorageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("memorySizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            memorySizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("timeCreated"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeCreated = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lifecycleDetails"u8))
                        {
                            lifecycleDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeZone"u8))
                        {
                            timeZone = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("zoneId"u8))
                        {
                            zoneId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hostname"u8))
                        {
                            hostname = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("domain"u8))
                        {
                            domain = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("cpuCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cpuCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("ocpuCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ocpuCount = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("clusterName"u8))
                        {
                            clusterName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataStoragePercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStoragePercentage = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("isLocalBackupEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isLocalBackupEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("cloudExadataInfrastructureId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cloudExadataInfrastructureId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isSparseDiskgroupEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isSparseDiskgroupEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("systemVersion"u8))
                        {
                            systemVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sshPublicKeys"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            sshPublicKeys = array;
                            continue;
                        }
                        if (property0.NameEquals("licenseModel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            licenseModel = new LicenseModel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("diskRedundancy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            diskRedundancy = new DiskRedundancy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scanIpIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            scanIPIds = array;
                            continue;
                        }
                        if (property0.NameEquals("vipIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            vipIds = array;
                            continue;
                        }
                        if (property0.NameEquals("scanDnsName"u8))
                        {
                            scanDnsName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scanListenerPortTcp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scanListenerPortTcp = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("scanListenerPortTcpSsl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scanListenerPortTcpSsl = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("scanDnsRecordId"u8))
                        {
                            scanDnsRecordId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("shape"u8))
                        {
                            shape = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new AzureResourceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lifecycleState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lifecycleState = new CloudVmClusterLifecycleState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vnetId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vnetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("giVersion"u8))
                        {
                            giVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ociUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ociUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("nsgUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nsgUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("subnetId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            subnetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("backupSubnetCidr"u8))
                        {
                            backupSubnetCidr = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("nsgCidrs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NSGCidr> array = new List<NSGCidr>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NSGCidr.DeserializeNSGCidr(item, options));
                            }
                            nsgCidrs = array;
                            continue;
                        }
                        if (property0.NameEquals("dataCollectionOptions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataCollectionOptions = DataCollectionOptions.DeserializeDataCollectionOptions(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("computeNodes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            computeNodes = array;
                            continue;
                        }
                        if (property0.NameEquals("iormConfigCache"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            iormConfigCache = ExadataIormConfig.DeserializeExadataIormConfig(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("lastUpdateHistoryEntryId"u8))
                        {
                            lastUpdateHistoryEntryId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dbServers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            dbServers = array;
                            continue;
                        }
                        if (property0.NameEquals("compartmentId"u8))
                        {
                            compartmentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subnetOcid"u8))
                        {
                            subnetOcid = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CloudVmClusterData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                ocid,
                listenerPort,
                nodeCount,
                storageSizeInGbs,
                dataStorageSizeInTbs,
                dbNodeStorageSizeInGbs,
                memorySizeInGbs,
                timeCreated,
                lifecycleDetails,
                timeZone,
                zoneId,
                hostname,
                domain,
                cpuCoreCount,
                ocpuCount,
                clusterName,
                dataStoragePercentage,
                isLocalBackupEnabled,
                cloudExadataInfrastructureId,
                isSparseDiskgroupEnabled,
                systemVersion,
                sshPublicKeys ?? new ChangeTrackingList<string>(),
                licenseModel,
                diskRedundancy,
                scanIPIds ?? new ChangeTrackingList<string>(),
                vipIds ?? new ChangeTrackingList<string>(),
                scanDnsName,
                scanListenerPortTcp,
                scanListenerPortTcpSsl,
                scanDnsRecordId,
                shape,
                provisioningState,
                lifecycleState,
                vnetId,
                giVersion,
                ociUrl,
                nsgUrl,
                subnetId,
                backupSubnetCidr,
                nsgCidrs ?? new ChangeTrackingList<NSGCidr>(),
                dataCollectionOptions,
                displayName,
                computeNodes ?? new ChangeTrackingList<string>(),
                iormConfigCache,
                lastUpdateHistoryEntryId,
                dbServers ?? new ChangeTrackingList<string>(),
                compartmentId,
                subnetOcid,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CloudVmClusterData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterData)} does not support writing '{options.Format}' format.");
            }
        }

        CloudVmClusterData IPersistableModel<CloudVmClusterData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCloudVmClusterData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CloudVmClusterData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
