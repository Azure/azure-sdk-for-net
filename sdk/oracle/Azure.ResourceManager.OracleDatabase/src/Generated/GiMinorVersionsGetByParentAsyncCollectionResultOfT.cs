// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.OracleDatabase.Models;

namespace Azure.ResourceManager.OracleDatabase
{
    internal partial class GiMinorVersionsGetByParentAsyncCollectionResultOfT : AsyncPageable<OracleGIMinorVersionData>
    {
        private readonly GiMinorVersions _client;
        private readonly Guid _subscriptionId;
        private readonly AzureLocation _location;
        private readonly string _giversionname;
        private readonly string _shapeFamily;
        private readonly string _zone;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of GiMinorVersionsGetByParentAsyncCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The GiMinorVersions client used to send requests. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="giversionname"> GiVersion name. </param>
        /// <param name="shapeFamily"> If provided, filters the results to the set of database versions which are supported for the given shape family. </param>
        /// <param name="zone"> Filters the result for the given Azure Availability Zone. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="giversionname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="giversionname"/> is an empty string, and was expected to be non-empty. </exception>
        public GiMinorVersionsGetByParentAsyncCollectionResultOfT(GiMinorVersions client, Guid subscriptionId, AzureLocation location, string giversionname, string shapeFamily, string zone, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            Argument.AssertNotNullOrEmpty(giversionname, nameof(giversionname));

            _client = client;
            _subscriptionId = subscriptionId;
            _location = location;
            _giversionname = giversionname;
            _shapeFamily = shapeFamily;
            _zone = zone;
            _context = context;
        }

        /// <summary> Gets the pages of GiMinorVersionsGetByParentAsyncCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of GiMinorVersionsGetByParentAsyncCollectionResultOfT as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<OracleGIMinorVersionData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = await GetNextResponseAsync(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                GiMinorVersionListResult result = GiMinorVersionListResult.FromResponse(response);
                yield return Page<OracleGIMinorVersionData>.FromValues((IReadOnlyList<OracleGIMinorVersionData>)result.Value, nextPage?.AbsoluteUri, response);
                nextPage = result.NextLink;
                if (nextPage == null)
                {
                    yield break;
                }
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponseAsync(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetByParentRequest(nextLink, _subscriptionId, _location, _giversionname, _shapeFamily, _zone, _context) : _client.CreateGetByParentRequest(_subscriptionId, _location, _giversionname, _shapeFamily, _zone, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("OracleGIMinorVersionCollection.GetAll");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
