// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="FlexComponentResource"/> and their operations.
    /// Each <see cref="FlexComponentResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="FlexComponentCollection"/> instance call the GetFlexComponents method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class FlexComponentCollection : ArmCollection, IEnumerable<FlexComponentResource>, IAsyncEnumerable<FlexComponentResource>
    {
        private readonly ClientDiagnostics _flexComponentClientDiagnostics;
        private readonly FlexComponentsRestOperations _flexComponentRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="FlexComponentCollection"/> class for mocking. </summary>
        protected FlexComponentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="FlexComponentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal FlexComponentCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _flexComponentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", FlexComponentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(FlexComponentResource.ResourceType, out string flexComponentApiVersion);
            _flexComponentRestClient = new FlexComponentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, flexComponentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a FlexComponent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual async Task<Response<FlexComponentResource>> GetAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.Get");
            scope.Start();
            try
            {
                var response = await _flexComponentRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a FlexComponent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual Response<FlexComponentResource> Get(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.Get");
            scope.Start();
            try
            {
                var response = _flexComponentRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List FlexComponent resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="shape"> If provided, filters the results for the given shape. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FlexComponentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FlexComponentResource> GetAllAsync(SystemShape? shape = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _flexComponentRestClient.CreateListByParentRequest(Id.SubscriptionId, new AzureLocation(_location), shape);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _flexComponentRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), shape);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new FlexComponentResource(Client, FlexComponentData.DeserializeFlexComponentData(e)), _flexComponentClientDiagnostics, Pipeline, "FlexComponentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List FlexComponent resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="shape"> If provided, filters the results for the given shape. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FlexComponentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FlexComponentResource> GetAll(SystemShape? shape = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _flexComponentRestClient.CreateListByParentRequest(Id.SubscriptionId, new AzureLocation(_location), shape);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _flexComponentRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), shape);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new FlexComponentResource(Client, FlexComponentData.DeserializeFlexComponentData(e)), _flexComponentClientDiagnostics, Pipeline, "FlexComponentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.Exists");
            scope.Start();
            try
            {
                var response = await _flexComponentRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual Response<bool> Exists(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.Exists");
            scope.Start();
            try
            {
                var response = _flexComponentRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual async Task<NullableResponse<FlexComponentResource>> GetIfExistsAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _flexComponentRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<FlexComponentResource>(response.GetRawResponse());
                return Response.FromValue(new FlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/flexComponents/{flexComponentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>FlexComponent_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="FlexComponentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        public virtual NullableResponse<FlexComponentResource> GetIfExists(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using var scope = _flexComponentClientDiagnostics.CreateScope("FlexComponentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _flexComponentRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), flexComponentName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<FlexComponentResource>(response.GetRawResponse());
                return Response.FromValue(new FlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<FlexComponentResource> IEnumerable<FlexComponentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<FlexComponentResource> IAsyncEnumerable<FlexComponentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
