// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.OracleDatabase.Models;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="GiMinorVersionResource"/> and their operations.
    /// Each <see cref="GiMinorVersionResource"/> in the collection will belong to the same instance of <see cref="OracleGIVersionResource"/>.
    /// To get a <see cref="GiMinorVersionCollection"/> instance call the GetGiMinorVersions method from an instance of <see cref="OracleGIVersionResource"/>.
    /// </summary>
    public partial class GiMinorVersionCollection : ArmCollection, IEnumerable<GiMinorVersionResource>, IAsyncEnumerable<GiMinorVersionResource>
    {
        private readonly ClientDiagnostics _giMinorVersionClientDiagnostics;
        private readonly GiMinorVersionsRestOperations _giMinorVersionRestClient;

        /// <summary> Initializes a new instance of the <see cref="GiMinorVersionCollection"/> class for mocking. </summary>
        protected GiMinorVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GiMinorVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal GiMinorVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _giMinorVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", GiMinorVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(GiMinorVersionResource.ResourceType, out string giMinorVersionApiVersion);
            _giMinorVersionRestClient = new GiMinorVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, giMinorVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != OracleGIVersionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, OracleGIVersionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a GiMinorVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual async Task<Response<GiMinorVersionResource>> GetAsync(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _giMinorVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GiMinorVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a GiMinorVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual Response<GiMinorVersionResource> Get(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _giMinorVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GiMinorVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List GiMinorVersion resources by GiVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="shapeFamily"> If provided, filters the results to the set of database versions which are supported for the given shape family. </param>
        /// <param name="zone"> Filters the result for the given Azure Availability Zone. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GiMinorVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GiMinorVersionResource> GetAllAsync(ShapeFamily? shapeFamily = null, string zone = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _giMinorVersionRestClient.CreateListByParentRequest(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, shapeFamily, zone);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _giMinorVersionRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, shapeFamily, zone);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new GiMinorVersionResource(Client, GiMinorVersionData.DeserializeGiMinorVersionData(e)), _giMinorVersionClientDiagnostics, Pipeline, "GiMinorVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List GiMinorVersion resources by GiVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_ListByParent</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="shapeFamily"> If provided, filters the results to the set of database versions which are supported for the given shape family. </param>
        /// <param name="zone"> Filters the result for the given Azure Availability Zone. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GiMinorVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GiMinorVersionResource> GetAll(ShapeFamily? shapeFamily = null, string zone = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _giMinorVersionRestClient.CreateListByParentRequest(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, shapeFamily, zone);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _giMinorVersionRestClient.CreateListByParentNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, shapeFamily, zone);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new GiMinorVersionResource(Client, GiMinorVersionData.DeserializeGiMinorVersionData(e)), _giMinorVersionClientDiagnostics, Pipeline, "GiMinorVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _giMinorVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual Response<bool> Exists(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _giMinorVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual async Task<NullableResponse<GiMinorVersionResource>> GetIfExistsAsync(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _giMinorVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<GiMinorVersionResource>(response.GetRawResponse());
                return Response.FromValue(new GiMinorVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/giVersions/{giversionname}/giMinorVersions/{giMinorVersionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GiMinorVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GiMinorVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="giMinorVersionName"> The name of the GiMinorVersion. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="giMinorVersionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="giMinorVersionName"/> is null. </exception>
        public virtual NullableResponse<GiMinorVersionResource> GetIfExists(string giMinorVersionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giMinorVersionName, nameof(giMinorVersionName));

            using var scope = _giMinorVersionClientDiagnostics.CreateScope("GiMinorVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _giMinorVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), Id.Name, giMinorVersionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<GiMinorVersionResource>(response.GetRawResponse());
                return Response.FromValue(new GiMinorVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<GiMinorVersionResource> IEnumerable<GiMinorVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<GiMinorVersionResource> IAsyncEnumerable<GiMinorVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
