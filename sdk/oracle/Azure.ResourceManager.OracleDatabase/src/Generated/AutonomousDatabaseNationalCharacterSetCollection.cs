// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="AutonomousDatabaseNationalCharacterSetResource"/> and their operations.
    /// Each <see cref="AutonomousDatabaseNationalCharacterSetResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="AutonomousDatabaseNationalCharacterSetCollection"/> instance call the GetAutonomousDatabaseNationalCharacterSets method from an instance of the parent resource.
    /// </summary>
    public partial class AutonomousDatabaseNationalCharacterSetCollection : ArmCollection, IEnumerable<AutonomousDatabaseNationalCharacterSetResource>, IAsyncEnumerable<AutonomousDatabaseNationalCharacterSetResource>
    {
        private readonly ClientDiagnostics _autonomousDatabaseNationalCharacterSetsClientDiagnostics;
        private readonly AutonomousDatabaseNationalCharacterSets _autonomousDatabaseNationalCharacterSetsRestClient;
        /// <summary> The location. </summary>
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of AutonomousDatabaseNationalCharacterSetCollection for mocking. </summary>
        protected AutonomousDatabaseNationalCharacterSetCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseNationalCharacterSetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        /// <param name="location"> The location for the resource. </param>
        internal AutonomousDatabaseNationalCharacterSetCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            TryGetApiVersion(AutonomousDatabaseNationalCharacterSetResource.ResourceType, out string autonomousDatabaseNationalCharacterSetApiVersion);
            _location = location;
            _autonomousDatabaseNationalCharacterSetsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", AutonomousDatabaseNationalCharacterSetResource.ResourceType.Namespace, Diagnostics);
            _autonomousDatabaseNationalCharacterSetsRestClient = new AutonomousDatabaseNationalCharacterSets(_autonomousDatabaseNationalCharacterSetsClientDiagnostics, Pipeline, Endpoint, autonomousDatabaseNationalCharacterSetApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), id);
            }
        }

        /// <summary> Get a AutonomousDatabaseNationalCharacterSet. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<AutonomousDatabaseNationalCharacterSetResource>> GetAsync(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseNationalCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a AutonomousDatabaseNationalCharacterSet. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<AutonomousDatabaseNationalCharacterSetResource> Get(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseNationalCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List AutonomousDatabaseNationalCharacterSet resources by SubscriptionLocationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseNationalCharacterSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutonomousDatabaseNationalCharacterSetResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<AutonomousDatabaseNationalCharacterSetData, AutonomousDatabaseNationalCharacterSetResource>(new AutonomousDatabaseNationalCharacterSetsGetByLocationAsyncCollectionResultOfT(_autonomousDatabaseNationalCharacterSetsRestClient, Guid.Parse(Id.SubscriptionId), _location, context), data => new AutonomousDatabaseNationalCharacterSetResource(Client, data));
        }

        /// <summary> List AutonomousDatabaseNationalCharacterSet resources by SubscriptionLocationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseNationalCharacterSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutonomousDatabaseNationalCharacterSetResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<AutonomousDatabaseNationalCharacterSetData, AutonomousDatabaseNationalCharacterSetResource>(new AutonomousDatabaseNationalCharacterSetsGetByLocationCollectionResultOfT(_autonomousDatabaseNationalCharacterSetsRestClient, Guid.Parse(Id.SubscriptionId), _location, context), data => new AutonomousDatabaseNationalCharacterSetResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<AutonomousDatabaseNationalCharacterSetResource>> GetIfExistsAsync(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<AutonomousDatabaseNationalCharacterSetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseNationalCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<AutonomousDatabaseNationalCharacterSetResource> GetIfExists(string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            using DiagnosticScope scope = _autonomousDatabaseNationalCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseNationalCharacterSetCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseNationalCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbsncharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseNationalCharacterSetData> response = Response.FromValue(AutonomousDatabaseNationalCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<AutonomousDatabaseNationalCharacterSetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseNationalCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AutonomousDatabaseNationalCharacterSetResource> IEnumerable<AutonomousDatabaseNationalCharacterSetResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<AutonomousDatabaseNationalCharacterSetResource> IAsyncEnumerable<AutonomousDatabaseNationalCharacterSetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
