// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="OracleDBVersionResource"/> and their operations.
    /// Each <see cref="OracleDBVersionResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get an <see cref="OracleDBVersionCollection"/> instance call the GetOracleDBVersions method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class OracleDBVersionCollection : ArmCollection, IEnumerable<OracleDBVersionResource>, IAsyncEnumerable<OracleDBVersionResource>
    {
        private readonly ClientDiagnostics _oracleDBVersionDbVersionsClientDiagnostics;
        private readonly DbVersionsRestOperations _oracleDBVersionDbVersionsRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="OracleDBVersionCollection"/> class for mocking. </summary>
        protected OracleDBVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OracleDBVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal OracleDBVersionCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _oracleDBVersionDbVersionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", OracleDBVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OracleDBVersionResource.ResourceType, out string oracleDBVersionDbVersionsApiVersion);
            _oracleDBVersionDbVersionsRestClient = new DbVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, oracleDBVersionDbVersionsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a DbVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<Response<OracleDBVersionResource>> GetAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _oracleDBVersionDbVersionsRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OracleDBVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a DbVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual Response<OracleDBVersionResource> Get(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _oracleDBVersionDbVersionsRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OracleDBVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List DbVersion resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OracleDBVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OracleDBVersionResource> GetAllAsync(ListDBVersionBySubscriptionLocationContent options, CancellationToken cancellationToken = default)
        {
            options ??= new ListDBVersionBySubscriptionLocationContent();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _oracleDBVersionDbVersionsRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _oracleDBVersionDbVersionsRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OracleDBVersionResource(Client, OracleDBVersionData.DeserializeOracleDBVersionData(e)), _oracleDBVersionDbVersionsClientDiagnostics, Pipeline, "OracleDBVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List DbVersion resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleDBVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OracleDBVersionResource> GetAll(ListDBVersionBySubscriptionLocationContent options, CancellationToken cancellationToken = default)
        {
            options ??= new ListDBVersionBySubscriptionLocationContent();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _oracleDBVersionDbVersionsRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _oracleDBVersionDbVersionsRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OracleDBVersionResource(Client, OracleDBVersionData.DeserializeOracleDBVersionData(e)), _oracleDBVersionDbVersionsClientDiagnostics, Pipeline, "OracleDBVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _oracleDBVersionDbVersionsRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual Response<bool> Exists(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _oracleDBVersionDbVersionsRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<NullableResponse<OracleDBVersionResource>> GetIfExistsAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _oracleDBVersionDbVersionsRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<OracleDBVersionResource>(response.GetRawResponse());
                return Response.FromValue(new OracleDBVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleDBVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual NullableResponse<OracleDBVersionResource> GetIfExists(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _oracleDBVersionDbVersionsClientDiagnostics.CreateScope("OracleDBVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _oracleDBVersionDbVersionsRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<OracleDBVersionResource>(response.GetRawResponse());
                return Response.FromValue(new OracleDBVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OracleDBVersionResource> IEnumerable<OracleDBVersionResource>.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IAsyncEnumerator<OracleDBVersionResource> IAsyncEnumerable<OracleDBVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(options: null, cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
