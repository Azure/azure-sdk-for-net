// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="SystemVersionResource"/> and their operations.
    /// Each <see cref="SystemVersionResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="SystemVersionCollection"/> instance call the GetSystemVersions method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class SystemVersionCollection : ArmCollection, IEnumerable<SystemVersionResource>, IAsyncEnumerable<SystemVersionResource>
    {
        private readonly ClientDiagnostics _systemVersionClientDiagnostics;
        private readonly SystemVersionsRestOperations _systemVersionRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="SystemVersionCollection"/> class for mocking. </summary>
        protected SystemVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SystemVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal SystemVersionCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _systemVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", SystemVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SystemVersionResource.ResourceType, out string systemVersionApiVersion);
            _systemVersionRestClient = new SystemVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, systemVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a SystemVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual async Task<Response<SystemVersionResource>> GetAsync(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _systemVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SystemVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SystemVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual Response<SystemVersionResource> Get(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _systemVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SystemVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List SystemVersion resources by Location
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SystemVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SystemVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _systemVersionRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _systemVersionRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SystemVersionResource(Client, SystemVersionData.DeserializeSystemVersionData(e)), _systemVersionClientDiagnostics, Pipeline, "SystemVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List SystemVersion resources by Location
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SystemVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SystemVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _systemVersionRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _systemVersionRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SystemVersionResource(Client, SystemVersionData.DeserializeSystemVersionData(e)), _systemVersionClientDiagnostics, Pipeline, "SystemVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _systemVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual Response<bool> Exists(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _systemVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual async Task<NullableResponse<SystemVersionResource>> GetIfExistsAsync(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _systemVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<SystemVersionResource>(response.GetRawResponse());
                return Response.FromValue(new SystemVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/systemVersions/{systemversionname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SystemVersions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SystemVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        public virtual NullableResponse<SystemVersionResource> GetIfExists(string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            using var scope = _systemVersionClientDiagnostics.CreateScope("SystemVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _systemVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), systemversionname, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<SystemVersionResource>(response.GetRawResponse());
                return Response.FromValue(new SystemVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SystemVersionResource> IEnumerable<SystemVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SystemVersionResource> IAsyncEnumerable<SystemVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
