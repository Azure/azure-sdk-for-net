// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.OracleDatabase.Models;

namespace Azure.ResourceManager.OracleDatabase
{
    public partial class AutonomousDatabaseData : IUtf8JsonSerializable, IJsonModel<AutonomousDatabaseData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AutonomousDatabaseData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AutonomousDatabaseData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword"u8);
                writer.WriteStringValue(AdminPassword);
            }
            if (Optional.IsDefined(DataBaseType))
            {
                writer.WritePropertyName("dataBaseType"u8);
                writer.WriteStringValue(DataBaseType.Value.ToString());
            }
            if (Optional.IsDefined(AutonomousMaintenanceScheduleType))
            {
                writer.WritePropertyName("autonomousMaintenanceScheduleType"u8);
                writer.WriteStringValue(AutonomousMaintenanceScheduleType.Value.ToString());
            }
            if (Optional.IsDefined(CharacterSet))
            {
                writer.WritePropertyName("characterSet"u8);
                writer.WriteStringValue(CharacterSet);
            }
            if (Optional.IsDefined(ComputeCount))
            {
                writer.WritePropertyName("computeCount"u8);
                writer.WriteNumberValue(ComputeCount.Value);
            }
            if (Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel.Value.ToString());
            }
            if (Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (Optional.IsCollectionDefined(CustomerContacts))
            {
                writer.WritePropertyName("customerContacts"u8);
                writer.WriteStartArray();
                foreach (var item in CustomerContacts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (Optional.IsDefined(DataStorageSizeInGbs))
            {
                writer.WritePropertyName("dataStorageSizeInGbs"u8);
                writer.WriteNumberValue(DataStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DbVersion))
            {
                writer.WritePropertyName("dbVersion"u8);
                writer.WriteStringValue(DbVersion);
            }
            if (Optional.IsDefined(DbWorkload))
            {
                writer.WritePropertyName("dbWorkload"u8);
                writer.WriteStringValue(DbWorkload.Value.ToString());
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(IsAutoScalingEnabled))
            {
                writer.WritePropertyName("isAutoScalingEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingEnabled.Value);
            }
            if (Optional.IsDefined(IsAutoScalingForStorageEnabled))
            {
                writer.WritePropertyName("isAutoScalingForStorageEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingForStorageEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(PeerDbIds))
            {
                writer.WritePropertyName("peerDbIds"u8);
                writer.WriteStartArray();
                foreach (var item in PeerDbIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PeerDbId))
            {
                writer.WritePropertyName("peerDbId"u8);
                writer.WriteStringValue(PeerDbId);
            }
            if (Optional.IsDefined(IsLocalDataGuardEnabled))
            {
                writer.WritePropertyName("isLocalDataGuardEnabled"u8);
                writer.WriteBooleanValue(IsLocalDataGuardEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsRemoteDataGuardEnabled))
            {
                writer.WritePropertyName("isRemoteDataGuardEnabled"u8);
                writer.WriteBooleanValue(IsRemoteDataGuardEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LocalDisasterRecoveryType))
            {
                writer.WritePropertyName("localDisasterRecoveryType"u8);
                writer.WriteStringValue(LocalDisasterRecoveryType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LocalStandbyDb))
            {
                writer.WritePropertyName("localStandbyDb"u8);
                writer.WriteObjectValue(LocalStandbyDb, options);
            }
            if (options.Format != "W" && Optional.IsDefined(FailedDataRecoveryInSeconds))
            {
                writer.WritePropertyName("failedDataRecoveryInSeconds"u8);
                writer.WriteNumberValue(FailedDataRecoveryInSeconds.Value);
            }
            if (Optional.IsDefined(IsMtlsConnectionRequired))
            {
                writer.WritePropertyName("isMtlsConnectionRequired"u8);
                writer.WriteBooleanValue(IsMtlsConnectionRequired.Value);
            }
            if (Optional.IsDefined(IsPreviewVersionWithServiceTermsAccepted))
            {
                writer.WritePropertyName("isPreviewVersionWithServiceTermsAccepted"u8);
                writer.WriteBooleanValue(IsPreviewVersionWithServiceTermsAccepted.Value);
            }
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (Optional.IsDefined(NcharacterSet))
            {
                writer.WritePropertyName("ncharacterSet"u8);
                writer.WriteStringValue(NcharacterSet);
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            if (Optional.IsDefined(ScheduledOperations))
            {
                writer.WritePropertyName("scheduledOperations"u8);
                writer.WriteObjectValue(ScheduledOperations, options);
            }
            if (Optional.IsDefined(PrivateEndpointIP))
            {
                writer.WritePropertyName("privateEndpointIp"u8);
                writer.WriteStringValue(PrivateEndpointIP);
            }
            if (Optional.IsDefined(PrivateEndpointLabel))
            {
                writer.WritePropertyName("privateEndpointLabel"u8);
                writer.WriteStringValue(PrivateEndpointLabel);
            }
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(VnetId))
            {
                writer.WritePropertyName("vnetId"u8);
                writer.WriteStringValue(VnetId);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeCreated))
            {
                writer.WritePropertyName("timeCreated"u8);
                writer.WriteStringValue(TimeCreated.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TimeMaintenanceBegin))
            {
                writer.WritePropertyName("timeMaintenanceBegin"u8);
                writer.WriteStringValue(TimeMaintenanceBegin.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TimeMaintenanceEnd))
            {
                writer.WritePropertyName("timeMaintenanceEnd"u8);
                writer.WriteStringValue(TimeMaintenanceEnd.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ActualUsedDataStorageSizeInTbs))
            {
                writer.WritePropertyName("actualUsedDataStorageSizeInTbs"u8);
                writer.WriteNumberValue(ActualUsedDataStorageSizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AllocatedStorageSizeInTbs))
            {
                writer.WritePropertyName("allocatedStorageSizeInTbs"u8);
                writer.WriteNumberValue(AllocatedStorageSizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ApexDetails))
            {
                writer.WritePropertyName("apexDetails"u8);
                writer.WriteObjectValue(ApexDetails, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AvailableUpgradeVersions))
            {
                writer.WritePropertyName("availableUpgradeVersions"u8);
                writer.WriteStartArray();
                foreach (var item in AvailableUpgradeVersions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ConnectionStrings))
            {
                writer.WritePropertyName("connectionStrings"u8);
                writer.WriteObjectValue(ConnectionStrings, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ConnectionUrls))
            {
                writer.WritePropertyName("connectionUrls"u8);
                writer.WriteObjectValue(ConnectionUrls, options);
            }
            if (options.Format != "W" && Optional.IsDefined(DataSafeStatus))
            {
                writer.WritePropertyName("dataSafeStatus"u8);
                writer.WriteStringValue(DataSafeStatus.Value.ToString());
            }
            if (Optional.IsDefined(DatabaseEdition))
            {
                writer.WritePropertyName("databaseEdition"u8);
                writer.WriteStringValue(DatabaseEdition.Value.ToString());
            }
            if (Optional.IsDefined(AutonomousDatabaseId))
            {
                writer.WritePropertyName("autonomousDatabaseId"u8);
                writer.WriteStringValue(AutonomousDatabaseId);
            }
            if (options.Format != "W" && Optional.IsDefined(InMemoryAreaInGbs))
            {
                writer.WritePropertyName("inMemoryAreaInGbs"u8);
                writer.WriteNumberValue(InMemoryAreaInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsPreview))
            {
                writer.WritePropertyName("isPreview"u8);
                writer.WriteBooleanValue(IsPreview.Value);
            }
            if (Optional.IsDefined(LocalAdgAutoFailoverMaxDataLossLimit))
            {
                writer.WritePropertyName("localAdgAutoFailoverMaxDataLossLimit"u8);
                writer.WriteNumberValue(LocalAdgAutoFailoverMaxDataLossLimit.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MemoryPerOracleComputeUnitInGbs))
            {
                writer.WritePropertyName("memoryPerOracleComputeUnitInGbs"u8);
                writer.WriteNumberValue(MemoryPerOracleComputeUnitInGbs.Value);
            }
            if (Optional.IsDefined(OpenMode))
            {
                writer.WritePropertyName("openMode"u8);
                writer.WriteStringValue(OpenMode.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(OperationsInsightsStatus))
            {
                writer.WritePropertyName("operationsInsightsStatus"u8);
                writer.WriteStringValue(OperationsInsightsStatus.Value.ToString());
            }
            if (Optional.IsDefined(PermissionLevel))
            {
                writer.WritePropertyName("permissionLevel"u8);
                writer.WriteStringValue(PermissionLevel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(PrivateEndpoint))
            {
                writer.WritePropertyName("privateEndpoint"u8);
                writer.WriteStringValue(PrivateEndpoint);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ProvisionableCpus))
            {
                writer.WritePropertyName("provisionableCpus"u8);
                writer.WriteStartArray();
                foreach (var item in ProvisionableCpus)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role"u8);
                writer.WriteStringValue(Role.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceConsoleUri))
            {
                writer.WritePropertyName("serviceConsoleUrl"u8);
                writer.WriteStringValue(ServiceConsoleUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(SqlWebDeveloperUri))
            {
                writer.WritePropertyName("sqlWebDeveloperUrl"u8);
                writer.WriteStringValue(SqlWebDeveloperUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SupportedRegionsToCloneTo))
            {
                writer.WritePropertyName("supportedRegionsToCloneTo"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedRegionsToCloneTo)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(TimeDataGuardRoleChanged))
            {
                writer.WritePropertyName("timeDataGuardRoleChanged"u8);
                writer.WriteStringValue(TimeDataGuardRoleChanged);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeDeletionOfFreeAutonomousDatabase))
            {
                writer.WritePropertyName("timeDeletionOfFreeAutonomousDatabase"u8);
                writer.WriteStringValue(TimeDeletionOfFreeAutonomousDatabase);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeLocalDataGuardEnabled))
            {
                writer.WritePropertyName("timeLocalDataGuardEnabled"u8);
                writer.WriteStringValue(TimeLocalDataGuardEnabled);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeOfLastFailover))
            {
                writer.WritePropertyName("timeOfLastFailover"u8);
                writer.WriteStringValue(TimeOfLastFailover);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeOfLastRefresh))
            {
                writer.WritePropertyName("timeOfLastRefresh"u8);
                writer.WriteStringValue(TimeOfLastRefresh);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeOfLastRefreshPoint))
            {
                writer.WritePropertyName("timeOfLastRefreshPoint"u8);
                writer.WriteStringValue(TimeOfLastRefreshPoint);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeOfLastSwitchover))
            {
                writer.WritePropertyName("timeOfLastSwitchover"u8);
                writer.WriteStringValue(TimeOfLastSwitchover);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeReclamationOfFreeAutonomousDatabase))
            {
                writer.WritePropertyName("timeReclamationOfFreeAutonomousDatabase"u8);
                writer.WriteStringValue(TimeReclamationOfFreeAutonomousDatabase);
            }
            if (options.Format != "W" && Optional.IsDefined(UsedDataStorageSizeInGbs))
            {
                writer.WritePropertyName("usedDataStorageSizeInGbs"u8);
                writer.WriteNumberValue(UsedDataStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(UsedDataStorageSizeInTbs))
            {
                writer.WritePropertyName("usedDataStorageSizeInTbs"u8);
                writer.WriteNumberValue(UsedDataStorageSizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (Optional.IsDefined(BackupRetentionPeriodInDays))
            {
                writer.WritePropertyName("backupRetentionPeriodInDays"u8);
                writer.WriteNumberValue(BackupRetentionPeriodInDays.Value);
            }
            if (Optional.IsCollectionDefined(WhitelistedIPs))
            {
                writer.WritePropertyName("whitelistedIps"u8);
                writer.WriteStartArray();
                foreach (var item in WhitelistedIPs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AutonomousDatabaseData IJsonModel<AutonomousDatabaseData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabaseData(document.RootElement, options);
        }

        internal static AutonomousDatabaseData DeserializeAutonomousDatabaseData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            string adminPassword = default;
            DataBaseType? dataBaseType = default;
            AutonomousMaintenanceScheduleType? autonomousMaintenanceScheduleType = default;
            string characterSet = default;
            float? computeCount = default;
            ComputeModel? computeModel = default;
            int? cpuCoreCount = default;
            IList<CustomerContact> customerContacts = default;
            int? dataStorageSizeInTbs = default;
            int? dataStorageSizeInGbs = default;
            string dbVersion = default;
            WorkloadType? dbWorkload = default;
            string displayName = default;
            bool? isAutoScalingEnabled = default;
            bool? isAutoScalingForStorageEnabled = default;
            IReadOnlyList<string> peerDbIds = default;
            string peerDbId = default;
            bool? isLocalDataGuardEnabled = default;
            bool? isRemoteDataGuardEnabled = default;
            DisasterRecoveryType? localDisasterRecoveryType = default;
            AutonomousDatabaseStandbySummary localStandbyDb = default;
            int? failedDataRecoveryInSeconds = default;
            bool? isMtlsConnectionRequired = default;
            bool? isPreviewVersionWithServiceTermsAccepted = default;
            LicenseModel? licenseModel = default;
            string ncharacterSet = default;
            string lifecycleDetails = default;
            AzureResourceProvisioningState? provisioningState = default;
            AutonomousDatabaseLifecycleState? lifecycleState = default;
            ScheduledOperationsType scheduledOperations = default;
            string privateEndpointIP = default;
            string privateEndpointLabel = default;
            Uri ociUrl = default;
            ResourceIdentifier subnetId = default;
            ResourceIdentifier vnetId = default;
            DateTimeOffset? timeCreated = default;
            DateTimeOffset? timeMaintenanceBegin = default;
            DateTimeOffset? timeMaintenanceEnd = default;
            double? actualUsedDataStorageSizeInTbs = default;
            double? allocatedStorageSizeInTbs = default;
            ApexDetailsType apexDetails = default;
            IReadOnlyList<string> availableUpgradeVersions = default;
            ConnectionStringType connectionStrings = default;
            ConnectionUrlType connectionUrls = default;
            DataSafeStatusType? dataSafeStatus = default;
            DatabaseEditionType? databaseEdition = default;
            ResourceIdentifier autonomousDatabaseId = default;
            int? inMemoryAreaInGbs = default;
            bool? isPreview = default;
            int? localAdgAutoFailoverMaxDataLossLimit = default;
            int? memoryPerOracleComputeUnitInGbs = default;
            OpenModeType? openMode = default;
            OperationsInsightsStatusType? operationsInsightsStatus = default;
            PermissionLevelType? permissionLevel = default;
            string privateEndpoint = default;
            IReadOnlyList<int> provisionableCpus = default;
            RoleType? role = default;
            Uri serviceConsoleUrl = default;
            Uri sqlWebDeveloperUrl = default;
            IReadOnlyList<string> supportedRegionsToCloneTo = default;
            string timeDataGuardRoleChanged = default;
            string timeDeletionOfFreeAutonomousDatabase = default;
            string timeLocalDataGuardEnabled = default;
            string timeOfLastFailover = default;
            string timeOfLastRefresh = default;
            string timeOfLastRefreshPoint = default;
            string timeOfLastSwitchover = default;
            string timeReclamationOfFreeAutonomousDatabase = default;
            int? usedDataStorageSizeInGbs = default;
            int? usedDataStorageSizeInTbs = default;
            string ocid = default;
            int? backupRetentionPeriodInDays = default;
            IList<string> whitelistedIPs = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("adminPassword"u8))
                        {
                            adminPassword = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataBaseType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataBaseType = new DataBaseType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autonomousMaintenanceScheduleType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autonomousMaintenanceScheduleType = new AutonomousMaintenanceScheduleType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("characterSet"u8))
                        {
                            characterSet = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("computeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            computeCount = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("computeModel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            computeModel = new ComputeModel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("cpuCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cpuCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("customerContacts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CustomerContact> array = new List<CustomerContact>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CustomerContact.DeserializeCustomerContact(item, options));
                            }
                            customerContacts = array;
                            continue;
                        }
                        if (property0.NameEquals("dataStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStorageSizeInTbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataStorageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStorageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dbVersion"u8))
                        {
                            dbVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dbWorkload"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dbWorkload = new WorkloadType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isAutoScalingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isAutoScalingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isAutoScalingForStorageEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isAutoScalingForStorageEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("peerDbIds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            peerDbIds = array;
                            continue;
                        }
                        if (property0.NameEquals("peerDbId"u8))
                        {
                            peerDbId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isLocalDataGuardEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isLocalDataGuardEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isRemoteDataGuardEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isRemoteDataGuardEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("localDisasterRecoveryType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localDisasterRecoveryType = new DisasterRecoveryType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("localStandbyDb"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localStandbyDb = AutonomousDatabaseStandbySummary.DeserializeAutonomousDatabaseStandbySummary(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("failedDataRecoveryInSeconds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            failedDataRecoveryInSeconds = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("isMtlsConnectionRequired"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isMtlsConnectionRequired = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isPreviewVersionWithServiceTermsAccepted"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isPreviewVersionWithServiceTermsAccepted = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("licenseModel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            licenseModel = new LicenseModel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ncharacterSet"u8))
                        {
                            ncharacterSet = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lifecycleDetails"u8))
                        {
                            lifecycleDetails = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new AzureResourceProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lifecycleState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lifecycleState = new AutonomousDatabaseLifecycleState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scheduledOperations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scheduledOperations = ScheduledOperationsType.DeserializeScheduledOperationsType(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("privateEndpointIp"u8))
                        {
                            privateEndpointIP = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("privateEndpointLabel"u8))
                        {
                            privateEndpointLabel = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ociUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ociUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("subnetId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            subnetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vnetId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vnetId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeCreated"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeCreated = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("timeMaintenanceBegin"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeMaintenanceBegin = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("timeMaintenanceEnd"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeMaintenanceEnd = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("actualUsedDataStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            actualUsedDataStorageSizeInTbs = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("allocatedStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            allocatedStorageSizeInTbs = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("apexDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            apexDetails = ApexDetailsType.DeserializeApexDetailsType(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("availableUpgradeVersions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            availableUpgradeVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("connectionStrings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            connectionStrings = ConnectionStringType.DeserializeConnectionStringType(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("connectionUrls"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            connectionUrls = ConnectionUrlType.DeserializeConnectionUrlType(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("dataSafeStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataSafeStatus = new DataSafeStatusType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("databaseEdition"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            databaseEdition = new DatabaseEditionType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("autonomousDatabaseId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autonomousDatabaseId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("inMemoryAreaInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            inMemoryAreaInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("isPreview"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isPreview = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("localAdgAutoFailoverMaxDataLossLimit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localAdgAutoFailoverMaxDataLossLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("memoryPerOracleComputeUnitInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            memoryPerOracleComputeUnitInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("openMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            openMode = new OpenModeType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operationsInsightsStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            operationsInsightsStatus = new OperationsInsightsStatusType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("permissionLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            permissionLevel = new PermissionLevelType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("privateEndpoint"u8))
                        {
                            privateEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisionableCpus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<int> array = new List<int>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetInt32());
                            }
                            provisionableCpus = array;
                            continue;
                        }
                        if (property0.NameEquals("role"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            role = new RoleType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("serviceConsoleUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            serviceConsoleUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlWebDeveloperUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlWebDeveloperUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("supportedRegionsToCloneTo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            supportedRegionsToCloneTo = array;
                            continue;
                        }
                        if (property0.NameEquals("timeDataGuardRoleChanged"u8))
                        {
                            timeDataGuardRoleChanged = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeDeletionOfFreeAutonomousDatabase"u8))
                        {
                            timeDeletionOfFreeAutonomousDatabase = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeLocalDataGuardEnabled"u8))
                        {
                            timeLocalDataGuardEnabled = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeOfLastFailover"u8))
                        {
                            timeOfLastFailover = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeOfLastRefresh"u8))
                        {
                            timeOfLastRefresh = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeOfLastRefreshPoint"u8))
                        {
                            timeOfLastRefreshPoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeOfLastSwitchover"u8))
                        {
                            timeOfLastSwitchover = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeReclamationOfFreeAutonomousDatabase"u8))
                        {
                            timeReclamationOfFreeAutonomousDatabase = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("usedDataStorageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            usedDataStorageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("usedDataStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            usedDataStorageSizeInTbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("ocid"u8))
                        {
                            ocid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("backupRetentionPeriodInDays"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            backupRetentionPeriodInDays = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("whitelistedIps"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            whitelistedIPs = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AutonomousDatabaseData(
                id,
                name,
                type,
                systemData,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                location,
                adminPassword,
                dataBaseType,
                autonomousMaintenanceScheduleType,
                characterSet,
                computeCount,
                computeModel,
                cpuCoreCount,
                customerContacts ?? new ChangeTrackingList<CustomerContact>(),
                dataStorageSizeInTbs,
                dataStorageSizeInGbs,
                dbVersion,
                dbWorkload,
                displayName,
                isAutoScalingEnabled,
                isAutoScalingForStorageEnabled,
                peerDbIds ?? new ChangeTrackingList<string>(),
                peerDbId,
                isLocalDataGuardEnabled,
                isRemoteDataGuardEnabled,
                localDisasterRecoveryType,
                localStandbyDb,
                failedDataRecoveryInSeconds,
                isMtlsConnectionRequired,
                isPreviewVersionWithServiceTermsAccepted,
                licenseModel,
                ncharacterSet,
                lifecycleDetails,
                provisioningState,
                lifecycleState,
                scheduledOperations,
                privateEndpointIP,
                privateEndpointLabel,
                ociUrl,
                subnetId,
                vnetId,
                timeCreated,
                timeMaintenanceBegin,
                timeMaintenanceEnd,
                actualUsedDataStorageSizeInTbs,
                allocatedStorageSizeInTbs,
                apexDetails,
                availableUpgradeVersions ?? new ChangeTrackingList<string>(),
                connectionStrings,
                connectionUrls,
                dataSafeStatus,
                databaseEdition,
                autonomousDatabaseId,
                inMemoryAreaInGbs,
                isPreview,
                localAdgAutoFailoverMaxDataLossLimit,
                memoryPerOracleComputeUnitInGbs,
                openMode,
                operationsInsightsStatus,
                permissionLevel,
                privateEndpoint,
                provisionableCpus ?? new ChangeTrackingList<int>(),
                role,
                serviceConsoleUrl,
                sqlWebDeveloperUrl,
                supportedRegionsToCloneTo ?? new ChangeTrackingList<string>(),
                timeDataGuardRoleChanged,
                timeDeletionOfFreeAutonomousDatabase,
                timeLocalDataGuardEnabled,
                timeOfLastFailover,
                timeOfLastRefresh,
                timeOfLastRefreshPoint,
                timeOfLastSwitchover,
                timeReclamationOfFreeAutonomousDatabase,
                usedDataStorageSizeInGbs,
                usedDataStorageSizeInTbs,
                ocid,
                backupRetentionPeriodInDays,
                whitelistedIPs ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AutonomousDatabaseData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseData)} does not support writing '{options.Format}' format.");
            }
        }

        AutonomousDatabaseData IPersistableModel<AutonomousDatabaseData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAutonomousDatabaseData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AutonomousDatabaseData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
