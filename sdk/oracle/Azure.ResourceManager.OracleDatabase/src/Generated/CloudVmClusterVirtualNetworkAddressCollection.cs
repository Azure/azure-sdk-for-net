// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="CloudVmClusterVirtualNetworkAddressResource"/> and their operations.
    /// Each <see cref="CloudVmClusterVirtualNetworkAddressResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="CloudVmClusterVirtualNetworkAddressCollection"/> instance call the GetCloudVmClusterVirtualNetworkAddresses method from an instance of the parent resource.
    /// </summary>
    public partial class CloudVmClusterVirtualNetworkAddressCollection : ArmCollection, IEnumerable<CloudVmClusterVirtualNetworkAddressResource>, IAsyncEnumerable<CloudVmClusterVirtualNetworkAddressResource>
    {
        private readonly ClientDiagnostics _virtualNetworkAddressesClientDiagnostics;
        private readonly VirtualNetworkAddresses _virtualNetworkAddressesRestClient;

        /// <summary> Initializes a new instance of CloudVmClusterVirtualNetworkAddressCollection for mocking. </summary>
        protected CloudVmClusterVirtualNetworkAddressCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="CloudVmClusterVirtualNetworkAddressCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal CloudVmClusterVirtualNetworkAddressCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(CloudVmClusterVirtualNetworkAddressResource.ResourceType, out string cloudVmClusterVirtualNetworkAddressApiVersion);
            _virtualNetworkAddressesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", CloudVmClusterVirtualNetworkAddressResource.ResourceType.Namespace, Diagnostics);
            _virtualNetworkAddressesRestClient = new VirtualNetworkAddresses(_virtualNetworkAddressesClientDiagnostics, Pipeline, Endpoint, cloudVmClusterVirtualNetworkAddressApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Create a VirtualNetworkAddress. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<CloudVmClusterVirtualNetworkAddressResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string virtualnetworkaddressname, CloudVmClusterVirtualNetworkAddressData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, CloudVmClusterVirtualNetworkAddressData.ToRequestContent(data), context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                OracleDatabaseArmOperation<CloudVmClusterVirtualNetworkAddressResource> operation = new OracleDatabaseArmOperation<CloudVmClusterVirtualNetworkAddressResource>(
                    new CloudVmClusterVirtualNetworkAddressOperationSource(Client),
                    _virtualNetworkAddressesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a VirtualNetworkAddress. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<CloudVmClusterVirtualNetworkAddressResource> CreateOrUpdate(WaitUntil waitUntil, string virtualnetworkaddressname, CloudVmClusterVirtualNetworkAddressData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateCreateOrUpdateRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, CloudVmClusterVirtualNetworkAddressData.ToRequestContent(data), context);
                Response response = Pipeline.ProcessMessage(message, context);
                OracleDatabaseArmOperation<CloudVmClusterVirtualNetworkAddressResource> operation = new OracleDatabaseArmOperation<CloudVmClusterVirtualNetworkAddressResource>(
                    new CloudVmClusterVirtualNetworkAddressOperationSource(Client),
                    _virtualNetworkAddressesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a VirtualNetworkAddress. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<CloudVmClusterVirtualNetworkAddressResource>> GetAsync(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new CloudVmClusterVirtualNetworkAddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a VirtualNetworkAddress. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<CloudVmClusterVirtualNetworkAddressResource> Get(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new CloudVmClusterVirtualNetworkAddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List VirtualNetworkAddress resources by CloudVmCluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudVmClusterVirtualNetworkAddressResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudVmClusterVirtualNetworkAddressResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<CloudVmClusterVirtualNetworkAddressData, CloudVmClusterVirtualNetworkAddressResource>(new VirtualNetworkAddressesGetByParentAsyncCollectionResultOfT(_virtualNetworkAddressesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new CloudVmClusterVirtualNetworkAddressResource(Client, data));
        }

        /// <summary> List VirtualNetworkAddress resources by CloudVmCluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudVmClusterVirtualNetworkAddressResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudVmClusterVirtualNetworkAddressResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<CloudVmClusterVirtualNetworkAddressData, CloudVmClusterVirtualNetworkAddressResource>(new VirtualNetworkAddressesGetByParentCollectionResultOfT(_virtualNetworkAddressesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new CloudVmClusterVirtualNetworkAddressResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<CloudVmClusterVirtualNetworkAddressResource>> GetIfExistsAsync(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<CloudVmClusterVirtualNetworkAddressResource>(response.GetRawResponse());
                }
                return Response.FromValue(new CloudVmClusterVirtualNetworkAddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="virtualnetworkaddressname"> Virtual IP address hostname. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualnetworkaddressname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualnetworkaddressname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<CloudVmClusterVirtualNetworkAddressResource> GetIfExists(string virtualnetworkaddressname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualnetworkaddressname, nameof(virtualnetworkaddressname));

            using DiagnosticScope scope = _virtualNetworkAddressesClientDiagnostics.CreateScope("CloudVmClusterVirtualNetworkAddressCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _virtualNetworkAddressesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, virtualnetworkaddressname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<CloudVmClusterVirtualNetworkAddressData> response = Response.FromValue(CloudVmClusterVirtualNetworkAddressData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<CloudVmClusterVirtualNetworkAddressResource>(response.GetRawResponse());
                }
                return Response.FromValue(new CloudVmClusterVirtualNetworkAddressResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<CloudVmClusterVirtualNetworkAddressResource> IEnumerable<CloudVmClusterVirtualNetworkAddressResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<CloudVmClusterVirtualNetworkAddressResource> IAsyncEnumerable<CloudVmClusterVirtualNetworkAddressResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
