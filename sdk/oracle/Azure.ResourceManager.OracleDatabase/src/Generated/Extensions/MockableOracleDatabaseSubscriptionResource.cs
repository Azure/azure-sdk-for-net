// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.OracleDatabase;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableOracleDatabaseSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _cloudExadataInfrastructuresClientDiagnostics;
        private CloudExadataInfrastructures _cloudExadataInfrastructuresRestClient;
        private ClientDiagnostics _cloudVmClustersClientDiagnostics;
        private CloudVmClusters _cloudVmClustersRestClient;
        private ClientDiagnostics _autonomousDatabasesClientDiagnostics;
        private AutonomousDatabases _autonomousDatabasesRestClient;
        private ClientDiagnostics _exadbVmClustersClientDiagnostics;
        private ExadbVmClusters _exadbVmClustersRestClient;
        private ClientDiagnostics _exascaleDbStorageVaultsClientDiagnostics;
        private ExascaleDbStorageVaults _exascaleDbStorageVaultsRestClient;
        private ClientDiagnostics _networkAnchorsClientDiagnostics;
        private NetworkAnchors _networkAnchorsRestClient;
        private ClientDiagnostics _resourceAnchorsClientDiagnostics;
        private ResourceAnchors _resourceAnchorsRestClient;
        private ClientDiagnostics _dbSystemsClientDiagnostics;
        private DbSystems _dbSystemsRestClient;

        /// <summary> Initializes a new instance of MockableOracleDatabaseSubscriptionResource for mocking. </summary>
        protected MockableOracleDatabaseSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableOracleDatabaseSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableOracleDatabaseSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CloudExadataInfrastructuresClientDiagnostics => _cloudExadataInfrastructuresClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private CloudExadataInfrastructures CloudExadataInfrastructuresRestClient => _cloudExadataInfrastructuresRestClient ??= new CloudExadataInfrastructures(CloudExadataInfrastructuresClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics CloudVmClustersClientDiagnostics => _cloudVmClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private CloudVmClusters CloudVmClustersRestClient => _cloudVmClustersRestClient ??= new CloudVmClusters(CloudVmClustersClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics AutonomousDatabasesClientDiagnostics => _autonomousDatabasesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private AutonomousDatabases AutonomousDatabasesRestClient => _autonomousDatabasesRestClient ??= new AutonomousDatabases(AutonomousDatabasesClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics ExadbVmClustersClientDiagnostics => _exadbVmClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private ExadbVmClusters ExadbVmClustersRestClient => _exadbVmClustersRestClient ??= new ExadbVmClusters(ExadbVmClustersClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics ExascaleDbStorageVaultsClientDiagnostics => _exascaleDbStorageVaultsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private ExascaleDbStorageVaults ExascaleDbStorageVaultsRestClient => _exascaleDbStorageVaultsRestClient ??= new ExascaleDbStorageVaults(ExascaleDbStorageVaultsClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics NetworkAnchorsClientDiagnostics => _networkAnchorsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private NetworkAnchors NetworkAnchorsRestClient => _networkAnchorsRestClient ??= new NetworkAnchors(NetworkAnchorsClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics ResourceAnchorsClientDiagnostics => _resourceAnchorsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private ResourceAnchors ResourceAnchorsRestClient => _resourceAnchorsRestClient ??= new ResourceAnchors(ResourceAnchorsClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        private ClientDiagnostics DbSystemsClientDiagnostics => _dbSystemsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OracleDatabase.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private DbSystems DbSystemsRestClient => _dbSystemsRestClient ??= new DbSystems(DbSystemsClientDiagnostics, Pipeline, Endpoint, "2025-09-01");

        /// <summary> Gets a collection of OracleSystemVersions in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleSystemVersions and their operations over a OracleSystemVersionResource. </returns>
        public virtual OracleSystemVersionCollection GetOracleSystemVersions(AzureLocation location)
        {
            return GetCachedClient(client => new OracleSystemVersionCollection(client, Id, location));
        }

        /// <summary> Get a SystemVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleSystemVersionResource>> GetOracleSystemVersionAsync(AzureLocation location, string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            return await GetOracleSystemVersions(location).GetAsync(systemversionname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a SystemVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="systemversionname"> SystemVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="systemversionname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="systemversionname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleSystemVersionResource> GetOracleSystemVersion(AzureLocation location, string systemversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(systemversionname, nameof(systemversionname));

            return GetOracleSystemVersions(location).Get(systemversionname, cancellationToken);
        }

        /// <summary> Gets an object representing a <see cref="OracleSubscriptionResource"/> along with the instance operations that can be performed on it in the <see cref="SubscriptionResource"/>. </summary>
        /// <returns> Returns a <see cref="OracleSubscriptionResource"/> object. </returns>
        public virtual OracleSubscriptionResource GetOracleSubscription()
        {
            return new OracleSubscriptionResource(Client, Id.AppendProviderResource("Oracle.Database", "oracleSubscriptions", "default"));
        }

        /// <summary> Gets a collection of OracleGIVersions in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleGIVersions and their operations over a OracleGIVersionResource. </returns>
        public virtual OracleGIVersionCollection GetOracleGIVersions(AzureLocation location)
        {
            return GetCachedClient(client => new OracleGIVersionCollection(client, Id, location));
        }

        /// <summary> Get a GiVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="giversionname"> GiVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="giversionname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="giversionname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleGIVersionResource>> GetOracleGIVersionAsync(AzureLocation location, string giversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giversionname, nameof(giversionname));

            return await GetOracleGIVersions(location).GetAsync(giversionname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a GiVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="giversionname"> GiVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="giversionname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="giversionname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleGIVersionResource> GetOracleGIVersion(AzureLocation location, string giversionname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(giversionname, nameof(giversionname));

            return GetOracleGIVersions(location).Get(giversionname, cancellationToken);
        }

        /// <summary> Gets a collection of OracleDBSystemShapes in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleDBSystemShapes and their operations over a OracleDBSystemShapeResource. </returns>
        public virtual OracleDBSystemShapeCollection GetOracleDBSystemShapes(AzureLocation location)
        {
            return GetCachedClient(client => new OracleDBSystemShapeCollection(client, Id, location));
        }

        /// <summary> Get a DbSystemShape. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleDBSystemShapeResource>> GetOracleDBSystemShapeAsync(AzureLocation location, string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            return await GetOracleDBSystemShapes(location).GetAsync(dbsystemshapename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a DbSystemShape. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleDBSystemShapeResource> GetOracleDBSystemShape(AzureLocation location, string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            return GetOracleDBSystemShapes(location).Get(dbsystemshapename, cancellationToken);
        }

        /// <summary> Gets a collection of OracleDnsPrivateViews in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleDnsPrivateViews and their operations over a OracleDnsPrivateViewResource. </returns>
        public virtual OracleDnsPrivateViewCollection GetOracleDnsPrivateViews(AzureLocation location)
        {
            return GetCachedClient(client => new OracleDnsPrivateViewCollection(client, Id, location));
        }

        /// <summary> Get a DnsPrivateView. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dnsprivateviewocid"> DnsPrivateView OCID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsprivateviewocid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dnsprivateviewocid"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleDnsPrivateViewResource>> GetOracleDnsPrivateViewAsync(AzureLocation location, string dnsprivateviewocid, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsprivateviewocid, nameof(dnsprivateviewocid));

            return await GetOracleDnsPrivateViews(location).GetAsync(dnsprivateviewocid, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a DnsPrivateView. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dnsprivateviewocid"> DnsPrivateView OCID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsprivateviewocid"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dnsprivateviewocid"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleDnsPrivateViewResource> GetOracleDnsPrivateView(AzureLocation location, string dnsprivateviewocid, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsprivateviewocid, nameof(dnsprivateviewocid));

            return GetOracleDnsPrivateViews(location).Get(dnsprivateviewocid, cancellationToken);
        }

        /// <summary> Gets a collection of OracleDnsPrivateZones in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleDnsPrivateZones and their operations over a OracleDnsPrivateZoneResource. </returns>
        public virtual OracleDnsPrivateZoneCollection GetOracleDnsPrivateZones(AzureLocation location)
        {
            return GetCachedClient(client => new OracleDnsPrivateZoneCollection(client, Id, location));
        }

        /// <summary> Get a DnsPrivateZone. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dnsprivatezonename"> DnsPrivateZone name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsprivatezonename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dnsprivatezonename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleDnsPrivateZoneResource>> GetOracleDnsPrivateZoneAsync(AzureLocation location, string dnsprivatezonename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsprivatezonename, nameof(dnsprivatezonename));

            return await GetOracleDnsPrivateZones(location).GetAsync(dnsprivatezonename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a DnsPrivateZone. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dnsprivatezonename"> DnsPrivateZone name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsprivatezonename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dnsprivatezonename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleDnsPrivateZoneResource> GetOracleDnsPrivateZone(AzureLocation location, string dnsprivatezonename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsprivatezonename, nameof(dnsprivatezonename));

            return GetOracleDnsPrivateZones(location).Get(dnsprivatezonename, cancellationToken);
        }

        /// <summary> Gets a collection of OracleFlexComponents in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of OracleFlexComponents and their operations over a OracleFlexComponentResource. </returns>
        public virtual OracleFlexComponentCollection GetOracleFlexComponents(AzureLocation location)
        {
            return GetCachedClient(client => new OracleFlexComponentCollection(client, Id, location));
        }

        /// <summary> Get a FlexComponent. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OracleFlexComponentResource>> GetOracleFlexComponentAsync(AzureLocation location, string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            return await GetOracleFlexComponents(location).GetAsync(flexComponentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a FlexComponent. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<OracleFlexComponentResource> GetOracleFlexComponent(AzureLocation location, string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            return GetOracleFlexComponents(location).Get(flexComponentName, cancellationToken);
        }

        /// <summary> Gets a collection of AutonomousDatabaseCharacterSets in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of AutonomousDatabaseCharacterSets and their operations over a AutonomousDatabaseCharacterSetResource. </returns>
        public virtual AutonomousDatabaseCharacterSetCollection GetAutonomousDatabaseCharacterSets(AzureLocation location)
        {
            return GetCachedClient(client => new AutonomousDatabaseCharacterSetCollection(client, Id, location));
        }

        /// <summary> Get a AutonomousDatabaseCharacterSet. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AutonomousDatabaseCharacterSetResource>> GetAutonomousDatabaseCharacterSetAsync(AzureLocation location, string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            return await GetAutonomousDatabaseCharacterSets(location).GetAsync(adbscharsetname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a AutonomousDatabaseCharacterSet. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AutonomousDatabaseCharacterSetResource> GetAutonomousDatabaseCharacterSet(AzureLocation location, string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            return GetAutonomousDatabaseCharacterSets(location).Get(adbscharsetname, cancellationToken);
        }

        /// <summary> Gets a collection of AutonomousDatabaseNationalCharacterSets in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of AutonomousDatabaseNationalCharacterSets and their operations over a AutonomousDatabaseNationalCharacterSetResource. </returns>
        public virtual AutonomousDatabaseNationalCharacterSetCollection GetAutonomousDatabaseNationalCharacterSets(AzureLocation location)
        {
            return GetCachedClient(client => new AutonomousDatabaseNationalCharacterSetCollection(client, Id, location));
        }

        /// <summary> Get a AutonomousDatabaseNationalCharacterSet. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AutonomousDatabaseNationalCharacterSetResource>> GetAutonomousDatabaseNationalCharacterSetAsync(AzureLocation location, string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            return await GetAutonomousDatabaseNationalCharacterSets(location).GetAsync(adbsncharsetname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a AutonomousDatabaseNationalCharacterSet. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="adbsncharsetname"> AutonomousDatabaseNationalCharacterSets name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbsncharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbsncharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AutonomousDatabaseNationalCharacterSetResource> GetAutonomousDatabaseNationalCharacterSet(AzureLocation location, string adbsncharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbsncharsetname, nameof(adbsncharsetname));

            return GetAutonomousDatabaseNationalCharacterSets(location).Get(adbsncharsetname, cancellationToken);
        }

        /// <summary> Gets a collection of AutonomousDBVersions in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of AutonomousDBVersions and their operations over a AutonomousDBVersionResource. </returns>
        public virtual AutonomousDBVersionCollection GetAutonomousDBVersions(AzureLocation location)
        {
            return GetCachedClient(client => new AutonomousDBVersionCollection(client, Id, location));
        }

        /// <summary> Get a AutonomousDbVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="autonomousdbversionsname"> AutonomousDbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="autonomousdbversionsname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="autonomousdbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AutonomousDBVersionResource>> GetAutonomousDBVersionAsync(AzureLocation location, string autonomousdbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autonomousdbversionsname, nameof(autonomousdbversionsname));

            return await GetAutonomousDBVersions(location).GetAsync(autonomousdbversionsname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a AutonomousDbVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="autonomousdbversionsname"> AutonomousDbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="autonomousdbversionsname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="autonomousdbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AutonomousDBVersionResource> GetAutonomousDBVersion(AzureLocation location, string autonomousdbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autonomousdbversionsname, nameof(autonomousdbversionsname));

            return GetAutonomousDBVersions(location).Get(autonomousdbversionsname, cancellationToken);
        }

        /// <summary> Gets a collection of DbVersions in the <see cref="SubscriptionResource"/>. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <returns> An object representing collection of DbVersions and their operations over a DbVersionResource. </returns>
        public virtual DbVersionCollection GetDbVersions(AzureLocation location)
        {
            return GetCachedClient(client => new DbVersionCollection(client, Id, location));
        }

        /// <summary> Get a DbVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DbVersionResource>> GetDbVersionAsync(AzureLocation location, string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            return await GetDbVersions(location).GetAsync(dbversionsname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a DbVersion. </summary>
        /// <param name="location"> The location for the resource. </param>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DbVersionResource> GetDbVersion(AzureLocation location, string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            return GetDbVersions(location).Get(dbversionsname, cancellationToken);
        }

        /// <summary> List CloudExadataInfrastructure resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudExadataInfrastructureResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudExadataInfrastructureResource> GetCloudExadataInfrastructuresAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<CloudExadataInfrastructureData, CloudExadataInfrastructureResource>(new CloudExadataInfrastructuresGetBySubscriptionAsyncCollectionResultOfT(CloudExadataInfrastructuresRestClient, Guid.Parse(Id.SubscriptionId), context), data => new CloudExadataInfrastructureResource(Client, data));
        }

        /// <summary> List CloudExadataInfrastructure resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudExadataInfrastructureResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudExadataInfrastructureResource> GetCloudExadataInfrastructures(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<CloudExadataInfrastructureData, CloudExadataInfrastructureResource>(new CloudExadataInfrastructuresGetBySubscriptionCollectionResultOfT(CloudExadataInfrastructuresRestClient, Guid.Parse(Id.SubscriptionId), context), data => new CloudExadataInfrastructureResource(Client, data));
        }

        /// <summary> List CloudVmCluster resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudVmClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CloudVmClusterResource> GetCloudVmClustersAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<CloudVmClusterData, CloudVmClusterResource>(new CloudVmClustersGetBySubscriptionAsyncCollectionResultOfT(CloudVmClustersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new CloudVmClusterResource(Client, data));
        }

        /// <summary> List CloudVmCluster resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudVmClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CloudVmClusterResource> GetCloudVmClusters(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<CloudVmClusterData, CloudVmClusterResource>(new CloudVmClustersGetBySubscriptionCollectionResultOfT(CloudVmClustersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new CloudVmClusterResource(Client, data));
        }

        /// <summary> List AutonomousDatabase resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutonomousDatabaseResource> GetAutonomousDatabasesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<AutonomousDatabaseData, AutonomousDatabaseResource>(new AutonomousDatabasesGetBySubscriptionAsyncCollectionResultOfT(AutonomousDatabasesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new AutonomousDatabaseResource(Client, data));
        }

        /// <summary> List AutonomousDatabase resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutonomousDatabaseResource> GetAutonomousDatabases(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<AutonomousDatabaseData, AutonomousDatabaseResource>(new AutonomousDatabasesGetBySubscriptionCollectionResultOfT(AutonomousDatabasesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new AutonomousDatabaseResource(Client, data));
        }

        /// <summary> List ExadbVmCluster resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExadbVmClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExadbVmClusterResource> GetExadbVmClustersAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ExadbVmClusterData, ExadbVmClusterResource>(new ExadbVmClustersGetBySubscriptionAsyncCollectionResultOfT(ExadbVmClustersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ExadbVmClusterResource(Client, data));
        }

        /// <summary> List ExadbVmCluster resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExadbVmClusterResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExadbVmClusterResource> GetExadbVmClusters(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ExadbVmClusterData, ExadbVmClusterResource>(new ExadbVmClustersGetBySubscriptionCollectionResultOfT(ExadbVmClustersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ExadbVmClusterResource(Client, data));
        }

        /// <summary> List ExascaleDbStorageVault resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExascaleDBStorageVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExascaleDBStorageVaultResource> GetExascaleDBStorageVaultsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ExascaleDBStorageVaultData, ExascaleDBStorageVaultResource>(new ExascaleDbStorageVaultsGetBySubscriptionAsyncCollectionResultOfT(ExascaleDbStorageVaultsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ExascaleDBStorageVaultResource(Client, data));
        }

        /// <summary> List ExascaleDbStorageVault resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExascaleDBStorageVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExascaleDBStorageVaultResource> GetExascaleDBStorageVaults(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ExascaleDBStorageVaultData, ExascaleDBStorageVaultResource>(new ExascaleDbStorageVaultsGetBySubscriptionCollectionResultOfT(ExascaleDbStorageVaultsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ExascaleDBStorageVaultResource(Client, data));
        }

        /// <summary> List NetworkAnchor resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkAnchorResource> GetNetworkAnchorsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<NetworkAnchorData, NetworkAnchorResource>(new NetworkAnchorsGetBySubscriptionAsyncCollectionResultOfT(NetworkAnchorsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new NetworkAnchorResource(Client, data));
        }

        /// <summary> List NetworkAnchor resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NetworkAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkAnchorResource> GetNetworkAnchors(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<NetworkAnchorData, NetworkAnchorResource>(new NetworkAnchorsGetBySubscriptionCollectionResultOfT(NetworkAnchorsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new NetworkAnchorResource(Client, data));
        }

        /// <summary> List ResourceAnchor resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResourceAnchorResource> GetResourceAnchorsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ResourceAnchorData, ResourceAnchorResource>(new ResourceAnchorsGetBySubscriptionAsyncCollectionResultOfT(ResourceAnchorsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ResourceAnchorResource(Client, data));
        }

        /// <summary> List ResourceAnchor resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResourceAnchorResource> GetResourceAnchors(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ResourceAnchorData, ResourceAnchorResource>(new ResourceAnchorsGetBySubscriptionCollectionResultOfT(ResourceAnchorsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new ResourceAnchorResource(Client, data));
        }

        /// <summary> List DbSystem resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DbSystemResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DbSystemResource> GetDbSystemsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<DbSystemData, DbSystemResource>(new DbSystemsGetBySubscriptionAsyncCollectionResultOfT(DbSystemsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DbSystemResource(Client, data));
        }

        /// <summary> List DbSystem resources by subscription ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DbSystemResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DbSystemResource> GetDbSystems(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<DbSystemData, DbSystemResource>(new DbSystemsGetBySubscriptionCollectionResultOfT(DbSystemsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new DbSystemResource(Client, data));
        }
    }
}
