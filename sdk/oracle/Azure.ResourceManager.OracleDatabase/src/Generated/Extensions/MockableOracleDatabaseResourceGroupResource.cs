// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.OracleDatabase;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableOracleDatabaseResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableOracleDatabaseResourceGroupResource for mocking. </summary>
        protected MockableOracleDatabaseResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableOracleDatabaseResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableOracleDatabaseResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of CloudExadataInfrastructures in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of CloudExadataInfrastructures and their operations over a CloudExadataInfrastructureResource. </returns>
        public virtual CloudExadataInfrastructureCollection GetCloudExadataInfrastructures()
        {
            return GetCachedClient(client => new CloudExadataInfrastructureCollection(client, Id));
        }

        /// <summary> Get a CloudExadataInfrastructure. </summary>
        /// <param name="cloudexadatainfrastructurename"> CloudExadataInfrastructure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudexadatainfrastructurename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cloudexadatainfrastructurename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CloudExadataInfrastructureResource>> GetCloudExadataInfrastructureAsync(string cloudexadatainfrastructurename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cloudexadatainfrastructurename, nameof(cloudexadatainfrastructurename));

            return await GetCloudExadataInfrastructures().GetAsync(cloudexadatainfrastructurename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a CloudExadataInfrastructure. </summary>
        /// <param name="cloudexadatainfrastructurename"> CloudExadataInfrastructure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudexadatainfrastructurename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cloudexadatainfrastructurename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<CloudExadataInfrastructureResource> GetCloudExadataInfrastructure(string cloudexadatainfrastructurename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cloudexadatainfrastructurename, nameof(cloudexadatainfrastructurename));

            return GetCloudExadataInfrastructures().Get(cloudexadatainfrastructurename, cancellationToken);
        }

        /// <summary> Gets a collection of CloudVmClusters in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of CloudVmClusters and their operations over a CloudVmClusterResource. </returns>
        public virtual CloudVmClusterCollection GetCloudVmClusters()
        {
            return GetCachedClient(client => new CloudVmClusterCollection(client, Id));
        }

        /// <summary> Get a CloudVmCluster. </summary>
        /// <param name="cloudvmclustername"> CloudVmCluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudvmclustername"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cloudvmclustername"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CloudVmClusterResource>> GetCloudVmClusterAsync(string cloudvmclustername, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cloudvmclustername, nameof(cloudvmclustername));

            return await GetCloudVmClusters().GetAsync(cloudvmclustername, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a CloudVmCluster. </summary>
        /// <param name="cloudvmclustername"> CloudVmCluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudvmclustername"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="cloudvmclustername"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<CloudVmClusterResource> GetCloudVmCluster(string cloudvmclustername, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(cloudvmclustername, nameof(cloudvmclustername));

            return GetCloudVmClusters().Get(cloudvmclustername, cancellationToken);
        }

        /// <summary> Gets a collection of AutonomousDatabases in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of AutonomousDatabases and their operations over a AutonomousDatabaseResource. </returns>
        public virtual AutonomousDatabaseCollection GetAutonomousDatabases()
        {
            return GetCachedClient(client => new AutonomousDatabaseCollection(client, Id));
        }

        /// <summary> Get a AutonomousDatabase. </summary>
        /// <param name="autonomousdatabasename"> The database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="autonomousdatabasename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="autonomousdatabasename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AutonomousDatabaseResource>> GetAutonomousDatabaseAsync(string autonomousdatabasename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autonomousdatabasename, nameof(autonomousdatabasename));

            return await GetAutonomousDatabases().GetAsync(autonomousdatabasename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a AutonomousDatabase. </summary>
        /// <param name="autonomousdatabasename"> The database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="autonomousdatabasename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="autonomousdatabasename"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AutonomousDatabaseResource> GetAutonomousDatabase(string autonomousdatabasename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(autonomousdatabasename, nameof(autonomousdatabasename));

            return GetAutonomousDatabases().Get(autonomousdatabasename, cancellationToken);
        }

        /// <summary> Gets a collection of ExadbVmClusters in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of ExadbVmClusters and their operations over a ExadbVmClusterResource. </returns>
        public virtual ExadbVmClusterCollection GetExadbVmClusters()
        {
            return GetCachedClient(client => new ExadbVmClusterCollection(client, Id));
        }

        /// <summary> Get a ExadbVmCluster. </summary>
        /// <param name="exadbVmClusterName"> The name of the ExadbVmCluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exadbVmClusterName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exadbVmClusterName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ExadbVmClusterResource>> GetExadbVmClusterAsync(string exadbVmClusterName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exadbVmClusterName, nameof(exadbVmClusterName));

            return await GetExadbVmClusters().GetAsync(exadbVmClusterName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a ExadbVmCluster. </summary>
        /// <param name="exadbVmClusterName"> The name of the ExadbVmCluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exadbVmClusterName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exadbVmClusterName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ExadbVmClusterResource> GetExadbVmCluster(string exadbVmClusterName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exadbVmClusterName, nameof(exadbVmClusterName));

            return GetExadbVmClusters().Get(exadbVmClusterName, cancellationToken);
        }

        /// <summary> Gets a collection of ExascaleDBStorageVaults in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of ExascaleDBStorageVaults and their operations over a ExascaleDBStorageVaultResource. </returns>
        public virtual ExascaleDBStorageVaultCollection GetExascaleDBStorageVaults()
        {
            return GetCachedClient(client => new ExascaleDBStorageVaultCollection(client, Id));
        }

        /// <summary> Get a ExascaleDbStorageVault. </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ExascaleDBStorageVaultResource>> GetExascaleDBStorageVaultAsync(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            return await GetExascaleDBStorageVaults().GetAsync(exascaleDbStorageVaultName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a ExascaleDbStorageVault. </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ExascaleDBStorageVaultResource> GetExascaleDBStorageVault(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            return GetExascaleDBStorageVaults().Get(exascaleDbStorageVaultName, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkAnchors in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of NetworkAnchors and their operations over a NetworkAnchorResource. </returns>
        public virtual NetworkAnchorCollection GetNetworkAnchors()
        {
            return GetCachedClient(client => new NetworkAnchorCollection(client, Id));
        }

        /// <summary> Get a NetworkAnchor. </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<NetworkAnchorResource>> GetNetworkAnchorAsync(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            return await GetNetworkAnchors().GetAsync(networkAnchorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a NetworkAnchor. </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<NetworkAnchorResource> GetNetworkAnchor(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            return GetNetworkAnchors().Get(networkAnchorName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceAnchors in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of ResourceAnchors and their operations over a ResourceAnchorResource. </returns>
        public virtual ResourceAnchorCollection GetResourceAnchors()
        {
            return GetCachedClient(client => new ResourceAnchorCollection(client, Id));
        }

        /// <summary> Get a ResourceAnchor. </summary>
        /// <param name="resourceAnchorName"> The name of the ResourceAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceAnchorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ResourceAnchorResource>> GetResourceAnchorAsync(string resourceAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceAnchorName, nameof(resourceAnchorName));

            return await GetResourceAnchors().GetAsync(resourceAnchorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a ResourceAnchor. </summary>
        /// <param name="resourceAnchorName"> The name of the ResourceAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceAnchorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ResourceAnchorResource> GetResourceAnchor(string resourceAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceAnchorName, nameof(resourceAnchorName));

            return GetResourceAnchors().Get(resourceAnchorName, cancellationToken);
        }

        /// <summary> Gets a collection of DbSystems in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DbSystems and their operations over a DbSystemResource. </returns>
        public virtual DbSystemCollection GetDbSystems()
        {
            return GetCachedClient(client => new DbSystemCollection(client, Id));
        }

        /// <summary> Get a DbSystem. </summary>
        /// <param name="dbSystemName"> The name of the DbSystem. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbSystemName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DbSystemResource>> GetDbSystemAsync(string dbSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbSystemName, nameof(dbSystemName));

            return await GetDbSystems().GetAsync(dbSystemName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a DbSystem. </summary>
        /// <param name="dbSystemName"> The name of the DbSystem. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbSystemName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbSystemName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DbSystemResource> GetDbSystem(string dbSystemName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbSystemName, nameof(dbSystemName));

            return GetDbSystems().Get(dbSystemName, cancellationToken);
        }
    }
}
