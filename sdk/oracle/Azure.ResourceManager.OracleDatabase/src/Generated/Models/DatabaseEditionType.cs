// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Database edition type enum.
    /// Serialized Name: DatabaseEditionType
    /// </summary>
    public readonly partial struct DatabaseEditionType : IEquatable<DatabaseEditionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DatabaseEditionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DatabaseEditionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardEditionValue = "StandardEdition";
        private const string EnterpriseEditionValue = "EnterpriseEdition";

        /// <summary>
        /// Standard edition
        /// Serialized Name: DatabaseEditionType.StandardEdition
        /// </summary>
        public static DatabaseEditionType StandardEdition { get; } = new DatabaseEditionType(StandardEditionValue);
        /// <summary>
        /// Enterprise edition
        /// Serialized Name: DatabaseEditionType.EnterpriseEdition
        /// </summary>
        public static DatabaseEditionType EnterpriseEdition { get; } = new DatabaseEditionType(EnterpriseEditionValue);
        /// <summary> Determines if two <see cref="DatabaseEditionType"/> values are the same. </summary>
        public static bool operator ==(DatabaseEditionType left, DatabaseEditionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DatabaseEditionType"/> values are not the same. </summary>
        public static bool operator !=(DatabaseEditionType left, DatabaseEditionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DatabaseEditionType"/>. </summary>
        public static implicit operator DatabaseEditionType(string value) => new DatabaseEditionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DatabaseEditionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DatabaseEditionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
