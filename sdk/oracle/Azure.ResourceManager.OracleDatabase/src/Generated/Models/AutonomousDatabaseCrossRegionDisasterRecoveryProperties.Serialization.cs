// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Autonomous Database Cross Region Disaster Recovery resource model. </summary>
    public partial class AutonomousDatabaseCrossRegionDisasterRecoveryProperties : IJsonModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>
    {
        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseCrossRegionDisasterRecoveryProperties"/> for deserialization. </summary>
        internal AutonomousDatabaseCrossRegionDisasterRecoveryProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseCrossRegionDisasterRecoveryProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("source"u8);
            writer.WriteStringValue(Source.ToString());
            writer.WritePropertyName("sourceId"u8);
            writer.WriteStringValue(SourceId);
            if (Optional.IsDefined(SourceLocation))
            {
                writer.WritePropertyName("sourceLocation"u8);
                writer.WriteStringValue(SourceLocation);
            }
            if (Optional.IsDefined(SourceOcid))
            {
                writer.WritePropertyName("sourceOcid"u8);
                writer.WriteStringValue(SourceOcid);
            }
            writer.WritePropertyName("remoteDisasterRecoveryType"u8);
            writer.WriteStringValue(RemoteDisasterRecoveryType.ToString());
            if (Optional.IsDefined(IsReplicateAutomaticBackups))
            {
                writer.WritePropertyName("isReplicateAutomaticBackups"u8);
                writer.WriteBooleanValue(IsReplicateAutomaticBackups.Value);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseCrossRegionDisasterRecoveryProperties IJsonModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AutonomousDatabaseCrossRegionDisasterRecoveryProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AutonomousDatabaseBaseProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseCrossRegionDisasterRecoveryProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabaseCrossRegionDisasterRecoveryProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AutonomousDatabaseCrossRegionDisasterRecoveryProperties DeserializeAutonomousDatabaseCrossRegionDisasterRecoveryProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string adminPassword = default;
            OracleDataBaseType dataBaseType = default;
            AutonomousMaintenanceScheduleType? autonomousMaintenanceScheduleType = default;
            string characterSet = default;
            float? computeCount = default;
            OracleDatabaseComputeModel? databaseComputeModel = default;
            int? cpuCoreCount = default;
            IList<OracleCustomerContact> customerContacts = default;
            int? dataStorageSizeInTbs = default;
            int? dataStorageSizeInGbs = default;
            string dbVersion = default;
            AutonomousDatabaseWorkloadType? dbWorkload = default;
            string displayName = default;
            bool? isAutoScalingEnabled = default;
            bool? isAutoScalingForStorageEnabled = default;
            IReadOnlyList<string> peerDBIds = default;
            string peerDBId = default;
            bool? isLocalDataGuardEnabled = default;
            bool? isRemoteDataGuardEnabled = default;
            DisasterRecoveryType? localDisasterRecoveryType = default;
            DateTimeOffset? disasterRecoveryRoleChangedOn = default;
            DisasterRecoveryConfigurationDetails remoteDisasterRecoveryConfiguration = default;
            AutonomousDatabaseStandbySummary localStandbyDB = default;
            int? failedDataRecoveryInSeconds = default;
            bool? isMtlsConnectionRequired = default;
            bool? isPreviewVersionWithServiceTermsAccepted = default;
            OracleLicenseModel? licenseModel = default;
            string ncharacterSet = default;
            string lifecycleDetails = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            AutonomousDatabaseLifecycleState? lifecycleState = default;
            IList<ScheduledOperationsType> scheduledOperationsList = default;
            string privateEndpointIp = default;
            string privateEndpointLabel = default;
            Uri ociUri = default;
            ResourceIdentifier subnetId = default;
            ResourceIdentifier vnetId = default;
            DateTimeOffset? createdOn = default;
            DateTimeOffset? maintenanceBeginOn = default;
            DateTimeOffset? maintenanceEndOn = default;
            double? actualUsedDataStorageSizeInTbs = default;
            double? allocatedStorageSizeInTbs = default;
            OracleApexDetailsType apexDetails = default;
            IReadOnlyList<string> availableUpgradeVersions = default;
            AutonomousDatabaseConnectionStrings connectionStrings = default;
            AutonomousDatabaseConnectionUrls connectionUrls = default;
            DataSafeStatusType? dataSafeStatus = default;
            OracleDatabaseEditionType? databaseEdition = default;
            ResourceIdentifier autonomousDatabaseId = default;
            int? inMemoryAreaInGbs = default;
            DateTimeOffset? nextLongTermBackupCreatedOn = default;
            LongTermBackUpScheduleDetails longTermBackupSchedule = default;
            bool? isPreview = default;
            int? localAdgAutoFailoverMaxDataLossLimit = default;
            int? memoryPerOracleComputeUnitInGbs = default;
            AutonomousDatabaseModeType? openMode = default;
            OperationsInsightsStatusType? operationsInsightsStatus = default;
            AutonomousDatabasePermissionLevelType? permissionLevel = default;
            string privateEndpoint = default;
            IReadOnlyList<int> provisionableCpus = default;
            DataGuardRoleType? role = default;
            Uri serviceConsoleUri = default;
            Uri sqlWebDeveloperUri = default;
            IReadOnlyList<string> supportedRegionsToCloneTo = default;
            DateTimeOffset? dataGuardRoleChangedOn = default;
            DateTimeOffset? freeAutonomousDatabaseDeletedOn = default;
            string timeLocalDataGuardEnabled = default;
            DateTimeOffset? lastFailoverHappenedOn = default;
            DateTimeOffset? lastRefreshHappenedOn = default;
            DateTimeOffset? lastRefreshPointTimestamp = default;
            DateTimeOffset? lastSwitchoverHappenedOn = default;
            DateTimeOffset? freeAutonomousDatabaseStoppedOn = default;
            int? usedDataStorageSizeInGbs = default;
            int? usedDataStorageSizeInTbs = default;
            string databaseOcid = default;
            int? backupRetentionPeriodInDays = default;
            IList<string> whitelistedIps = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            AutonomousDatabaseSourceType source = default;
            ResourceIdentifier sourceId = default;
            string sourceLocation = default;
            string sourceOcid = default;
            DisasterRecoveryType remoteDisasterRecoveryType = default;
            bool? isReplicateAutomaticBackups = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("adminPassword"u8))
                {
                    adminPassword = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dataBaseType"u8))
                {
                    dataBaseType = new OracleDataBaseType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("autonomousMaintenanceScheduleType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autonomousMaintenanceScheduleType = new AutonomousMaintenanceScheduleType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("characterSet"u8))
                {
                    characterSet = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeCount = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseComputeModel = new OracleDatabaseComputeModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("cpuCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("customerContacts"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OracleCustomerContact> array = new List<OracleCustomerContact>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(OracleCustomerContact.DeserializeOracleCustomerContact(item, options));
                    }
                    customerContacts = array;
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInTbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dbVersion"u8))
                {
                    dbVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dbWorkload"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbWorkload = new AutonomousDatabaseWorkloadType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isAutoScalingEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAutoScalingEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isAutoScalingForStorageEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAutoScalingForStorageEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("peerDbIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    peerDBIds = array;
                    continue;
                }
                if (prop.NameEquals("peerDbId"u8))
                {
                    peerDBId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isLocalDataGuardEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLocalDataGuardEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isRemoteDataGuardEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRemoteDataGuardEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("localDisasterRecoveryType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localDisasterRecoveryType = new DisasterRecoveryType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("timeDisasterRecoveryRoleChanged"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disasterRecoveryRoleChangedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("remoteDisasterRecoveryConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    remoteDisasterRecoveryConfiguration = DisasterRecoveryConfigurationDetails.DeserializeDisasterRecoveryConfigurationDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("localStandbyDb"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localStandbyDB = AutonomousDatabaseStandbySummary.DeserializeAutonomousDatabaseStandbySummary(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("failedDataRecoveryInSeconds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failedDataRecoveryInSeconds = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("isMtlsConnectionRequired"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMtlsConnectionRequired = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isPreviewVersionWithServiceTermsAccepted"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPreviewVersionWithServiceTermsAccepted = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("licenseModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModel = new OracleLicenseModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("ncharacterSet"u8))
                {
                    ncharacterSet = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new AutonomousDatabaseLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("scheduledOperationsList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ScheduledOperationsType> array = new List<ScheduledOperationsType>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ScheduledOperationsType.DeserializeScheduledOperationsType(item, options));
                    }
                    scheduledOperationsList = array;
                    continue;
                }
                if (prop.NameEquals("privateEndpointIp"u8))
                {
                    privateEndpointIp = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("privateEndpointLabel"u8))
                {
                    privateEndpointLabel = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("subnetId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vnetId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("timeCreated"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeMaintenanceBegin"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceBeginOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeMaintenanceEnd"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceEndOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("actualUsedDataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    actualUsedDataStorageSizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("allocatedStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allocatedStorageSizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("apexDetails"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    apexDetails = OracleApexDetailsType.DeserializeOracleApexDetailsType(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("availableUpgradeVersions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    availableUpgradeVersions = array;
                    continue;
                }
                if (prop.NameEquals("connectionStrings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionStrings = AutonomousDatabaseConnectionStrings.DeserializeAutonomousDatabaseConnectionStrings(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("connectionUrls"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionUrls = AutonomousDatabaseConnectionUrls.DeserializeAutonomousDatabaseConnectionUrls(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("dataSafeStatus"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataSafeStatus = new DataSafeStatusType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("databaseEdition"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseEdition = new OracleDatabaseEditionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("autonomousDatabaseId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autonomousDatabaseId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("inMemoryAreaInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inMemoryAreaInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("nextLongTermBackupTimeStamp"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextLongTermBackupCreatedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("longTermBackupSchedule"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    longTermBackupSchedule = LongTermBackUpScheduleDetails.DeserializeLongTermBackUpScheduleDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("isPreview"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPreview = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("localAdgAutoFailoverMaxDataLossLimit"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localAdgAutoFailoverMaxDataLossLimit = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("memoryPerOracleComputeUnitInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryPerOracleComputeUnitInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("openMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    openMode = new AutonomousDatabaseModeType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("operationsInsightsStatus"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    operationsInsightsStatus = new OperationsInsightsStatusType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("permissionLevel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    permissionLevel = new AutonomousDatabasePermissionLevelType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("privateEndpoint"u8))
                {
                    privateEndpoint = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisionableCpus"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    provisionableCpus = array;
                    continue;
                }
                if (prop.NameEquals("role"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    role = new DataGuardRoleType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("serviceConsoleUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serviceConsoleUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sqlWebDeveloperUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sqlWebDeveloperUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("supportedRegionsToCloneTo"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    supportedRegionsToCloneTo = array;
                    continue;
                }
                if (prop.NameEquals("timeDataGuardRoleChanged"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataGuardRoleChangedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeDeletionOfFreeAutonomousDatabase"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeAutonomousDatabaseDeletedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeLocalDataGuardEnabled"u8))
                {
                    timeLocalDataGuardEnabled = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("timeOfLastFailover"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastFailoverHappenedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeOfLastRefresh"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRefreshHappenedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeOfLastRefreshPoint"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRefreshPointTimestamp = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeOfLastSwitchover"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSwitchoverHappenedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeReclamationOfFreeAutonomousDatabase"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    freeAutonomousDatabaseStoppedOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("usedDataStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    usedDataStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("usedDataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    usedDataStorageSizeInTbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("ocid"u8))
                {
                    databaseOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupRetentionPeriodInDays"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupRetentionPeriodInDays = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("whitelistedIps"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    whitelistedIps = array;
                    continue;
                }
                if (prop.NameEquals("source"u8))
                {
                    source = new AutonomousDatabaseSourceType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sourceId"u8))
                {
                    sourceId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sourceLocation"u8))
                {
                    sourceLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sourceOcid"u8))
                {
                    sourceOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("remoteDisasterRecoveryType"u8))
                {
                    remoteDisasterRecoveryType = new DisasterRecoveryType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("isReplicateAutomaticBackups"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isReplicateAutomaticBackups = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AutonomousDatabaseCrossRegionDisasterRecoveryProperties(
                adminPassword,
                dataBaseType,
                autonomousMaintenanceScheduleType,
                characterSet,
                computeCount,
                databaseComputeModel,
                cpuCoreCount,
                customerContacts ?? new ChangeTrackingList<OracleCustomerContact>(),
                dataStorageSizeInTbs,
                dataStorageSizeInGbs,
                dbVersion,
                dbWorkload,
                displayName,
                isAutoScalingEnabled,
                isAutoScalingForStorageEnabled,
                peerDBIds ?? new ChangeTrackingList<string>(),
                peerDBId,
                isLocalDataGuardEnabled,
                isRemoteDataGuardEnabled,
                localDisasterRecoveryType,
                disasterRecoveryRoleChangedOn,
                remoteDisasterRecoveryConfiguration,
                localStandbyDB,
                failedDataRecoveryInSeconds,
                isMtlsConnectionRequired,
                isPreviewVersionWithServiceTermsAccepted,
                licenseModel,
                ncharacterSet,
                lifecycleDetails,
                provisioningState,
                lifecycleState,
                scheduledOperationsList ?? new ChangeTrackingList<ScheduledOperationsType>(),
                privateEndpointIp,
                privateEndpointLabel,
                ociUri,
                subnetId,
                vnetId,
                createdOn,
                maintenanceBeginOn,
                maintenanceEndOn,
                actualUsedDataStorageSizeInTbs,
                allocatedStorageSizeInTbs,
                apexDetails,
                availableUpgradeVersions ?? new ChangeTrackingList<string>(),
                connectionStrings,
                connectionUrls,
                dataSafeStatus,
                databaseEdition,
                autonomousDatabaseId,
                inMemoryAreaInGbs,
                nextLongTermBackupCreatedOn,
                longTermBackupSchedule,
                isPreview,
                localAdgAutoFailoverMaxDataLossLimit,
                memoryPerOracleComputeUnitInGbs,
                openMode,
                operationsInsightsStatus,
                permissionLevel,
                privateEndpoint,
                provisionableCpus ?? new ChangeTrackingList<int>(),
                role,
                serviceConsoleUri,
                sqlWebDeveloperUri,
                supportedRegionsToCloneTo ?? new ChangeTrackingList<string>(),
                dataGuardRoleChangedOn,
                freeAutonomousDatabaseDeletedOn,
                timeLocalDataGuardEnabled,
                lastFailoverHappenedOn,
                lastRefreshHappenedOn,
                lastRefreshPointTimestamp,
                lastSwitchoverHappenedOn,
                freeAutonomousDatabaseStoppedOn,
                usedDataStorageSizeInGbs,
                usedDataStorageSizeInTbs,
                databaseOcid,
                backupRetentionPeriodInDays,
                whitelistedIps ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties,
                source,
                sourceId,
                sourceLocation,
                sourceOcid,
                remoteDisasterRecoveryType,
                isReplicateAutomaticBackups);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseCrossRegionDisasterRecoveryProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseCrossRegionDisasterRecoveryProperties IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (AutonomousDatabaseCrossRegionDisasterRecoveryProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AutonomousDatabaseBaseProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAutonomousDatabaseCrossRegionDisasterRecoveryProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseCrossRegionDisasterRecoveryProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AutonomousDatabaseCrossRegionDisasterRecoveryProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
