// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// The type of database node maintenance.
    /// Serialized Name: DbNodeMaintenanceType
    /// </summary>
    public readonly partial struct DbNodeMaintenanceType : IEquatable<DbNodeMaintenanceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DbNodeMaintenanceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbNodeMaintenanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VmdbRebootMigrationValue = "VmdbRebootMigration";

        /// <summary>
        /// VMDB reboot migration maintenance type
        /// Serialized Name: DbNodeMaintenanceType.VmdbRebootMigration
        /// </summary>
        public static DbNodeMaintenanceType VmdbRebootMigration { get; } = new DbNodeMaintenanceType(VmdbRebootMigrationValue);
        /// <summary> Determines if two <see cref="DbNodeMaintenanceType"/> values are the same. </summary>
        public static bool operator ==(DbNodeMaintenanceType left, DbNodeMaintenanceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DbNodeMaintenanceType"/> values are not the same. </summary>
        public static bool operator !=(DbNodeMaintenanceType left, DbNodeMaintenanceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DbNodeMaintenanceType"/>. </summary>
        public static implicit operator DbNodeMaintenanceType(string value) => new DbNodeMaintenanceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbNodeMaintenanceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DbNodeMaintenanceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
