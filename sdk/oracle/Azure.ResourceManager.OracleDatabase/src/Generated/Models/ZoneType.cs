// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Zone type enum
    /// Serialized Name: ZoneType
    /// </summary>
    public readonly partial struct ZoneType : IEquatable<ZoneType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ZoneType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ZoneType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimaryValue = "Primary";
        private const string SecondaryValue = "Secondary";

        /// <summary>
        /// Primary zone
        /// Serialized Name: ZoneType.Primary
        /// </summary>
        public static ZoneType Primary { get; } = new ZoneType(PrimaryValue);
        /// <summary>
        /// Secondary zone
        /// Serialized Name: ZoneType.Secondary
        /// </summary>
        public static ZoneType Secondary { get; } = new ZoneType(SecondaryValue);
        /// <summary> Determines if two <see cref="ZoneType"/> values are the same. </summary>
        public static bool operator ==(ZoneType left, ZoneType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ZoneType"/> values are not the same. </summary>
        public static bool operator !=(ZoneType left, ZoneType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ZoneType"/>. </summary>
        public static implicit operator ZoneType(string value) => new ZoneType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ZoneType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ZoneType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
