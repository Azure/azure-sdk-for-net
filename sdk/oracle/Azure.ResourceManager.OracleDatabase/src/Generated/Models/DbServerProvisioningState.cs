// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DbServerProvisioningState enum
    /// Serialized Name: DbServerProvisioningState
    /// </summary>
    public readonly partial struct DbServerProvisioningState : IEquatable<DbServerProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DbServerProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbServerProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatingValue = "Creating";
        private const string AvailableValue = "Available";
        private const string UnavailableValue = "Unavailable";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string MaintenanceInProgressValue = "MaintenanceInProgress";

        /// <summary>
        /// Indicates that resource in Creating state
        /// Serialized Name: DbServerProvisioningState.Creating
        /// </summary>
        public static DbServerProvisioningState Creating { get; } = new DbServerProvisioningState(CreatingValue);
        /// <summary>
        /// Indicates that resource in Available state
        /// Serialized Name: DbServerProvisioningState.Available
        /// </summary>
        public static DbServerProvisioningState Available { get; } = new DbServerProvisioningState(AvailableValue);
        /// <summary>
        /// Indicates that resource in Unavailable state
        /// Serialized Name: DbServerProvisioningState.Unavailable
        /// </summary>
        public static DbServerProvisioningState Unavailable { get; } = new DbServerProvisioningState(UnavailableValue);
        /// <summary>
        /// Indicates that resource in Deleting state
        /// Serialized Name: DbServerProvisioningState.Deleting
        /// </summary>
        public static DbServerProvisioningState Deleting { get; } = new DbServerProvisioningState(DeletingValue);
        /// <summary>
        /// Indicates that resource in Deleted state
        /// Serialized Name: DbServerProvisioningState.Deleted
        /// </summary>
        public static DbServerProvisioningState Deleted { get; } = new DbServerProvisioningState(DeletedValue);
        /// <summary>
        /// Indicates that resource maintenance in progress state
        /// Serialized Name: DbServerProvisioningState.MaintenanceInProgress
        /// </summary>
        public static DbServerProvisioningState MaintenanceInProgress { get; } = new DbServerProvisioningState(MaintenanceInProgressValue);
        /// <summary> Determines if two <see cref="DbServerProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DbServerProvisioningState left, DbServerProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DbServerProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DbServerProvisioningState left, DbServerProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DbServerProvisioningState"/>. </summary>
        public static implicit operator DbServerProvisioningState(string value) => new DbServerProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbServerProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DbServerProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
