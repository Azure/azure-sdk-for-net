// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Compute model enum
    /// Serialized Name: ComputeModel
    /// </summary>
    public readonly partial struct ComputeModel : IEquatable<ComputeModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputeModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EcpuValue = "ECPU";
        private const string OcpuValue = "OCPU";

        /// <summary>
        /// ECPU model type
        /// Serialized Name: ComputeModel.ECPU
        /// </summary>
        public static ComputeModel Ecpu { get; } = new ComputeModel(EcpuValue);
        /// <summary>
        /// OCPU model type
        /// Serialized Name: ComputeModel.OCPU
        /// </summary>
        public static ComputeModel Ocpu { get; } = new ComputeModel(OcpuValue);
        /// <summary> Determines if two <see cref="ComputeModel"/> values are the same. </summary>
        public static bool operator ==(ComputeModel left, ComputeModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeModel"/> values are not the same. </summary>
        public static bool operator !=(ComputeModel left, ComputeModel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeModel"/>. </summary>
        public static implicit operator ComputeModel(string value) => new ComputeModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
