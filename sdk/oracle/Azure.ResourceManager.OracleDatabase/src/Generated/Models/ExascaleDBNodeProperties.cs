// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> The properties of DbNodeResource. </summary>
    public partial class ExascaleDBNodeProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExascaleDBNodeProperties"/>. </summary>
        /// <param name="ocid"> DbNode OCID. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ocid"/> is null. </exception>
        public ExascaleDBNodeProperties(ResourceIdentifier ocid)
        {
            Argument.AssertNotNull(ocid, nameof(ocid));

            Ocid = ocid;
        }

        /// <summary> Initializes a new instance of <see cref="ExascaleDBNodeProperties"/>. </summary>
        /// <param name="ocid"> DbNode OCID. </param>
        /// <param name="additionalDetails"> Additional information about the planned maintenance. </param>
        /// <param name="cpuCoreCount"> The number of CPU cores enabled on the Db node. </param>
        /// <param name="dbNodeStorageSizeInGbs"> The allocated local node storage in GBs on the Db node. </param>
        /// <param name="faultDomain"> The name of the Fault Domain the instance is contained in. </param>
        /// <param name="hostname"> The host name for the database node. </param>
        /// <param name="lifecycleState"> The current state of the database node. </param>
        /// <param name="maintenanceType"> The type of database node maintenance. </param>
        /// <param name="memorySizeInGbs"> The allocated memory in GBs on the Db node. </param>
        /// <param name="softwareStorageSizeInGb"> The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for virtual machine DB systems. </param>
        /// <param name="timeMaintenanceWindowEnd"> End date and time of maintenance window. </param>
        /// <param name="timeMaintenanceWindowStart"> Start date and time of maintenance window. </param>
        /// <param name="totalCpuCoreCount"> The total number of CPU cores reserved on the Db node. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExascaleDBNodeProperties(ResourceIdentifier ocid, string additionalDetails, int? cpuCoreCount, int? dbNodeStorageSizeInGbs, string faultDomain, string hostname, DBNodeProvisioningState? lifecycleState, string maintenanceType, int? memorySizeInGbs, int? softwareStorageSizeInGb, DateTimeOffset? timeMaintenanceWindowEnd, DateTimeOffset? timeMaintenanceWindowStart, int? totalCpuCoreCount, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Ocid = ocid;
            AdditionalDetails = additionalDetails;
            CpuCoreCount = cpuCoreCount;
            DBNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            FaultDomain = faultDomain;
            Hostname = hostname;
            LifecycleState = lifecycleState;
            MaintenanceType = maintenanceType;
            MemorySizeInGbs = memorySizeInGbs;
            SoftwareStorageSizeInGb = softwareStorageSizeInGb;
            TimeMaintenanceWindowEnd = timeMaintenanceWindowEnd;
            TimeMaintenanceWindowStart = timeMaintenanceWindowStart;
            TotalCpuCoreCount = totalCpuCoreCount;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ExascaleDBNodeProperties"/> for deserialization. </summary>
        internal ExascaleDBNodeProperties()
        {
        }

        /// <summary> DbNode OCID. </summary>
        public ResourceIdentifier Ocid { get; set; }
        /// <summary> Additional information about the planned maintenance. </summary>
        public string AdditionalDetails { get; set; }
        /// <summary> The number of CPU cores enabled on the Db node. </summary>
        public int? CpuCoreCount { get; set; }
        /// <summary> The allocated local node storage in GBs on the Db node. </summary>
        public int? DBNodeStorageSizeInGbs { get; set; }
        /// <summary> The name of the Fault Domain the instance is contained in. </summary>
        public string FaultDomain { get; set; }
        /// <summary> The host name for the database node. </summary>
        public string Hostname { get; set; }
        /// <summary> The current state of the database node. </summary>
        public DBNodeProvisioningState? LifecycleState { get; set; }
        /// <summary> The type of database node maintenance. </summary>
        public string MaintenanceType { get; set; }
        /// <summary> The allocated memory in GBs on the Db node. </summary>
        public int? MemorySizeInGbs { get; set; }
        /// <summary> The size (in GB) of the block storage volume allocation for the DB system. This attribute applies only for virtual machine DB systems. </summary>
        public int? SoftwareStorageSizeInGb { get; set; }
        /// <summary> End date and time of maintenance window. </summary>
        public DateTimeOffset? TimeMaintenanceWindowEnd { get; set; }
        /// <summary> Start date and time of maintenance window. </summary>
        public DateTimeOffset? TimeMaintenanceWindowStart { get; set; }
        /// <summary> The total number of CPU cores reserved on the Db node. </summary>
        public int? TotalCpuCoreCount { get; set; }
    }
}
