// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> AutonomousDatabaseBackup resource model. </summary>
    public partial class AutonomousDatabaseBackupProperties : IJsonModel<AutonomousDatabaseBackupProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AutonomousDatabaseBackupProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseBackupProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseBackupProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseOcid))
            {
                writer.WritePropertyName("autonomousDatabaseOcid"u8);
                writer.WriteStringValue(DatabaseOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseSizeInTbs))
            {
                writer.WritePropertyName("databaseSizeInTbs"u8);
                writer.WriteNumberValue(DatabaseSizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DBVersion))
            {
                writer.WritePropertyName("dbVersion"u8);
                writer.WriteStringValue(DBVersion);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(DatabaseBackupOcid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(DatabaseBackupOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(IsAutomatic))
            {
                writer.WritePropertyName("isAutomatic"u8);
                writer.WriteBooleanValue(IsAutomatic.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsRestorable))
            {
                writer.WritePropertyName("isRestorable"u8);
                writer.WriteBooleanValue(IsRestorable.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            if (Optional.IsDefined(RetentionPeriodInDays))
            {
                writer.WritePropertyName("retentionPeriodInDays"u8);
                writer.WriteNumberValue(RetentionPeriodInDays.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SizeInTbs))
            {
                writer.WritePropertyName("sizeInTbs"u8);
                writer.WriteNumberValue(SizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeAvailableTil))
            {
                writer.WritePropertyName("timeAvailableTil"u8);
                writer.WriteStringValue(TimeAvailableTil.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(TimeStarted))
            {
                writer.WritePropertyName("timeStarted"u8);
                writer.WriteStringValue(TimeStarted);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeEnded))
            {
                writer.WritePropertyName("timeEnded"u8);
                writer.WriteStringValue(TimeEnded);
            }
            if (options.Format != "W" && Optional.IsDefined(BackupType))
            {
                writer.WritePropertyName("backupType"u8);
                writer.WriteStringValue(BackupType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseBackupProperties IJsonModel<AutonomousDatabaseBackupProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseBackupProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseBackupProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseBackupProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabaseBackupProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AutonomousDatabaseBackupProperties DeserializeAutonomousDatabaseBackupProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string databaseOcid = default;
            double? databaseSizeInTbs = default;
            string dbVersion = default;
            string displayName = default;
            string databaseBackupOcid = default;
            bool? isAutomatic = default;
            bool? isRestorable = default;
            string lifecycleDetails = default;
            AutonomousDatabaseBackupLifecycleState? lifecycleState = default;
            int? retentionPeriodInDays = default;
            double? sizeInTbs = default;
            DateTimeOffset? timeAvailableTil = default;
            string timeStarted = default;
            string timeEnded = default;
            AutonomousDatabaseBackupType? backupType = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("autonomousDatabaseOcid"u8))
                {
                    databaseOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("databaseSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseSizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("dbVersion"u8))
                {
                    dbVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ocid"u8))
                {
                    databaseBackupOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isAutomatic"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAutomatic = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isRestorable"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRestorable = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new AutonomousDatabaseBackupLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("retentionPeriodInDays"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retentionPeriodInDays = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("sizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("timeAvailableTil"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeAvailableTil = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeStarted"u8))
                {
                    timeStarted = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("timeEnded"u8))
                {
                    timeEnded = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupType = new AutonomousDatabaseBackupType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AutonomousDatabaseBackupProperties(
                databaseOcid,
                databaseSizeInTbs,
                dbVersion,
                displayName,
                databaseBackupOcid,
                isAutomatic,
                isRestorable,
                lifecycleDetails,
                lifecycleState,
                retentionPeriodInDays,
                sizeInTbs,
                timeAvailableTil,
                timeStarted,
                timeEnded,
                backupType,
                provisioningState,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AutonomousDatabaseBackupProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseBackupProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseBackupProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseBackupProperties IPersistableModel<AutonomousDatabaseBackupProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseBackupProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseBackupProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAutonomousDatabaseBackupProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseBackupProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AutonomousDatabaseBackupProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
