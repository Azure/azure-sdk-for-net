// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Exadata VM cluster on Exascale Infrastructure lifecycle state enum. </summary>
    public readonly partial struct ExadbVmClusterLifecycleState : IEquatable<ExadbVmClusterLifecycleState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExadbVmClusterLifecycleState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExadbVmClusterLifecycleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProvisioningValue = "Provisioning";
        private const string AvailableValue = "Available";
        private const string UpdatingValue = "Updating";
        private const string TerminatingValue = "Terminating";
        private const string TerminatedValue = "Terminated";
        private const string MaintenanceInProgressValue = "MaintenanceInProgress";
        private const string FailedValue = "Failed";

        /// <summary> Indicates that resource in Provisioning state. </summary>
        public static ExadbVmClusterLifecycleState Provisioning { get; } = new ExadbVmClusterLifecycleState(ProvisioningValue);
        /// <summary> Indicates that resource in Available state. </summary>
        public static ExadbVmClusterLifecycleState Available { get; } = new ExadbVmClusterLifecycleState(AvailableValue);
        /// <summary> Indicates that resource in Updating state. </summary>
        public static ExadbVmClusterLifecycleState Updating { get; } = new ExadbVmClusterLifecycleState(UpdatingValue);
        /// <summary> Indicates that resource in Terminating state. </summary>
        public static ExadbVmClusterLifecycleState Terminating { get; } = new ExadbVmClusterLifecycleState(TerminatingValue);
        /// <summary> Indicates that resource in Terminated state. </summary>
        public static ExadbVmClusterLifecycleState Terminated { get; } = new ExadbVmClusterLifecycleState(TerminatedValue);
        /// <summary> Indicates that resource Maintenance in progress state. </summary>
        public static ExadbVmClusterLifecycleState MaintenanceInProgress { get; } = new ExadbVmClusterLifecycleState(MaintenanceInProgressValue);
        /// <summary> Indicates that resource in Failed state. </summary>
        public static ExadbVmClusterLifecycleState Failed { get; } = new ExadbVmClusterLifecycleState(FailedValue);
        /// <summary> Determines if two <see cref="ExadbVmClusterLifecycleState"/> values are the same. </summary>
        public static bool operator ==(ExadbVmClusterLifecycleState left, ExadbVmClusterLifecycleState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExadbVmClusterLifecycleState"/> values are not the same. </summary>
        public static bool operator !=(ExadbVmClusterLifecycleState left, ExadbVmClusterLifecycleState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExadbVmClusterLifecycleState"/>. </summary>
        public static implicit operator ExadbVmClusterLifecycleState(string value) => new ExadbVmClusterLifecycleState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExadbVmClusterLifecycleState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExadbVmClusterLifecycleState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
