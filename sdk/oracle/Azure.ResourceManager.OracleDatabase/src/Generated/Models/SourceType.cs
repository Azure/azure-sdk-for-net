// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Source type enum. </summary>
    public readonly partial struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string DatabaseValue = "Database";
        private const string BackupFromIdValue = "BackupFromId";
        private const string BackupFromTimestampValue = "BackupFromTimestamp";
        private const string CloneToRefreshableValue = "CloneToRefreshable";
        private const string CrossRegionDataguardValue = "CrossRegionDataguard";
        private const string CrossRegionDisasterRecoveryValue = "CrossRegionDisasterRecovery";

        /// <summary> None source. </summary>
        public static SourceType None { get; } = new SourceType(NoneValue);
        /// <summary> Database source. </summary>
        public static SourceType Database { get; } = new SourceType(DatabaseValue);
        /// <summary> Backup from ID source. </summary>
        public static SourceType BackupFromId { get; } = new SourceType(BackupFromIdValue);
        /// <summary> Backup from timestamp source. </summary>
        public static SourceType BackupFromTimestamp { get; } = new SourceType(BackupFromTimestampValue);
        /// <summary> Clone to refreshable source. </summary>
        public static SourceType CloneToRefreshable { get; } = new SourceType(CloneToRefreshableValue);
        /// <summary> Cross region dataguard source. </summary>
        public static SourceType CrossRegionDataguard { get; } = new SourceType(CrossRegionDataguardValue);
        /// <summary> cross region disaster recovery source. </summary>
        public static SourceType CrossRegionDisasterRecovery { get; } = new SourceType(CrossRegionDisasterRecoveryValue);
        /// <summary> Determines if two <see cref="SourceType"/> values are the same. </summary>
        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SourceType"/> values are not the same. </summary>
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SourceType"/>. </summary>
        public static implicit operator SourceType(string value) => new SourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
