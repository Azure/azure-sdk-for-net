// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Source type enum.
    /// Serialized Name: SourceType
    /// </summary>
    public readonly partial struct SourceType : IEquatable<SourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string DatabaseValue = "Database";
        private const string BackupFromIdValue = "BackupFromId";
        private const string BackupFromTimestampValue = "BackupFromTimestamp";
        private const string CloneToRefreshableValue = "CloneToRefreshable";
        private const string CrossRegionDataguardValue = "CrossRegionDataguard";
        private const string CrossRegionDisasterRecoveryValue = "CrossRegionDisasterRecovery";

        /// <summary>
        /// None source
        /// Serialized Name: SourceType.None
        /// </summary>
        public static SourceType None { get; } = new SourceType(NoneValue);
        /// <summary>
        /// Database source
        /// Serialized Name: SourceType.Database
        /// </summary>
        public static SourceType Database { get; } = new SourceType(DatabaseValue);
        /// <summary>
        /// Backup from ID source
        /// Serialized Name: SourceType.BackupFromId
        /// </summary>
        public static SourceType BackupFromId { get; } = new SourceType(BackupFromIdValue);
        /// <summary>
        /// Backup from timestamp source
        /// Serialized Name: SourceType.BackupFromTimestamp
        /// </summary>
        public static SourceType BackupFromTimestamp { get; } = new SourceType(BackupFromTimestampValue);
        /// <summary>
        /// Clone to refreshable source
        /// Serialized Name: SourceType.CloneToRefreshable
        /// </summary>
        public static SourceType CloneToRefreshable { get; } = new SourceType(CloneToRefreshableValue);
        /// <summary>
        /// Cross region dataguard source
        /// Serialized Name: SourceType.CrossRegionDataguard
        /// </summary>
        public static SourceType CrossRegionDataguard { get; } = new SourceType(CrossRegionDataguardValue);
        /// <summary>
        /// cross region disaster recovery source
        /// Serialized Name: SourceType.CrossRegionDisasterRecovery
        /// </summary>
        public static SourceType CrossRegionDisasterRecovery { get; } = new SourceType(CrossRegionDisasterRecoveryValue);
        /// <summary> Determines if two <see cref="SourceType"/> values are the same. </summary>
        public static bool operator ==(SourceType left, SourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SourceType"/> values are not the same. </summary>
        public static bool operator !=(SourceType left, SourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SourceType"/>. </summary>
        public static implicit operator SourceType(string value) => new SourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
