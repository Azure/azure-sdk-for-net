// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> MaintenanceWindow resource properties. </summary>
    public partial class OracleDatabaseMaintenanceWindow : IJsonModel<OracleDatabaseMaintenanceWindow>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<OracleDatabaseMaintenanceWindow>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDatabaseMaintenanceWindow>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleDatabaseMaintenanceWindow)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Preference))
            {
                writer.WritePropertyName("preference"u8);
                writer.WriteStringValue(Preference.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Months))
            {
                writer.WritePropertyName("months"u8);
                writer.WriteStartArray();
                foreach (MaintenanceMonth item in Months)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WeeksOfMonth))
            {
                writer.WritePropertyName("weeksOfMonth"u8);
                writer.WriteStartArray();
                foreach (int item in WeeksOfMonth)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DaysOfWeek))
            {
                writer.WritePropertyName("daysOfWeek"u8);
                writer.WriteStartArray();
                foreach (OracleDatabaseDayOfWeek item in DaysOfWeek)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HoursOfDay))
            {
                writer.WritePropertyName("hoursOfDay"u8);
                writer.WriteStartArray();
                foreach (int item in HoursOfDay)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LeadTimeInWeeks))
            {
                writer.WritePropertyName("leadTimeInWeeks"u8);
                writer.WriteNumberValue(LeadTimeInWeeks.Value);
            }
            if (Optional.IsDefined(PatchingMode))
            {
                writer.WritePropertyName("patchingMode"u8);
                writer.WriteStringValue(PatchingMode.Value.ToString());
            }
            if (Optional.IsDefined(CustomActionTimeoutInMins))
            {
                writer.WritePropertyName("customActionTimeoutInMins"u8);
                writer.WriteNumberValue(CustomActionTimeoutInMins.Value);
            }
            if (Optional.IsDefined(IsCustomActionTimeoutEnabled))
            {
                writer.WritePropertyName("isCustomActionTimeoutEnabled"u8);
                writer.WriteBooleanValue(IsCustomActionTimeoutEnabled.Value);
            }
            if (Optional.IsDefined(IsMonthlyPatchingEnabled))
            {
                writer.WritePropertyName("isMonthlyPatchingEnabled"u8);
                writer.WriteBooleanValue(IsMonthlyPatchingEnabled.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleDatabaseMaintenanceWindow IJsonModel<OracleDatabaseMaintenanceWindow>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleDatabaseMaintenanceWindow JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDatabaseMaintenanceWindow>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleDatabaseMaintenanceWindow)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeOracleDatabaseMaintenanceWindow(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static OracleDatabaseMaintenanceWindow DeserializeOracleDatabaseMaintenanceWindow(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MaintenancePreference? preference = default;
            IList<MaintenanceMonth> months = default;
            IList<int> weeksOfMonth = default;
            IList<OracleDatabaseDayOfWeek> daysOfWeek = default;
            IList<int> hoursOfDay = default;
            int? leadTimeInWeeks = default;
            MaintenancePatchingMode? patchingMode = default;
            int? customActionTimeoutInMins = default;
            bool? isCustomActionTimeoutEnabled = default;
            bool? isMonthlyPatchingEnabled = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("preference"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    preference = new MaintenancePreference(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("months"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MaintenanceMonth> array = new List<MaintenanceMonth>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(MaintenanceMonth.DeserializeMaintenanceMonth(item, options));
                    }
                    months = array;
                    continue;
                }
                if (prop.NameEquals("weeksOfMonth"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    weeksOfMonth = array;
                    continue;
                }
                if (prop.NameEquals("daysOfWeek"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OracleDatabaseDayOfWeek> array = new List<OracleDatabaseDayOfWeek>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(OracleDatabaseDayOfWeek.DeserializeOracleDatabaseDayOfWeek(item, options));
                    }
                    daysOfWeek = array;
                    continue;
                }
                if (prop.NameEquals("hoursOfDay"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    hoursOfDay = array;
                    continue;
                }
                if (prop.NameEquals("leadTimeInWeeks"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    leadTimeInWeeks = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("patchingMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    patchingMode = new MaintenancePatchingMode(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("customActionTimeoutInMins"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customActionTimeoutInMins = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("isCustomActionTimeoutEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCustomActionTimeoutEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isMonthlyPatchingEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMonthlyPatchingEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new OracleDatabaseMaintenanceWindow(
                preference,
                months ?? new ChangeTrackingList<MaintenanceMonth>(),
                weeksOfMonth ?? new ChangeTrackingList<int>(),
                daysOfWeek ?? new ChangeTrackingList<OracleDatabaseDayOfWeek>(),
                hoursOfDay ?? new ChangeTrackingList<int>(),
                leadTimeInWeeks,
                patchingMode,
                customActionTimeoutInMins,
                isCustomActionTimeoutEnabled,
                isMonthlyPatchingEnabled,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<OracleDatabaseMaintenanceWindow>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDatabaseMaintenanceWindow>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(OracleDatabaseMaintenanceWindow)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleDatabaseMaintenanceWindow IPersistableModel<OracleDatabaseMaintenanceWindow>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleDatabaseMaintenanceWindow PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDatabaseMaintenanceWindow>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeOracleDatabaseMaintenanceWindow(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(OracleDatabaseMaintenanceWindow)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<OracleDatabaseMaintenanceWindow>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
