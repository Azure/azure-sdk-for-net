// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Database edition type enum. </summary>
    public readonly partial struct DbSystemDatabaseEditionType : IEquatable<DbSystemDatabaseEditionType>
    {
        private readonly string _value;
        /// <summary> Standard edition. </summary>
        private const string StandardEditionValue = "StandardEdition";
        /// <summary> Enterprise edition. </summary>
        private const string EnterpriseEditionValue = "EnterpriseEdition";
        /// <summary> Enterprise edition high performance. </summary>
        private const string EnterpriseEditionHighPerformanceValue = "EnterpriseEditionHighPerformance";
        /// <summary> Enterprise edition extreme. </summary>
        private const string EnterpriseEditionExtremeValue = "EnterpriseEditionExtreme";
        /// <summary> Enterprise edition developer. </summary>
        private const string EnterpriseEditionDeveloperValue = "EnterpriseEditionDeveloper";

        /// <summary> Initializes a new instance of <see cref="DbSystemDatabaseEditionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbSystemDatabaseEditionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Standard edition. </summary>
        public static DbSystemDatabaseEditionType StandardEdition { get; } = new DbSystemDatabaseEditionType(StandardEditionValue);

        /// <summary> Enterprise edition. </summary>
        public static DbSystemDatabaseEditionType EnterpriseEdition { get; } = new DbSystemDatabaseEditionType(EnterpriseEditionValue);

        /// <summary> Enterprise edition high performance. </summary>
        public static DbSystemDatabaseEditionType EnterpriseEditionHighPerformance { get; } = new DbSystemDatabaseEditionType(EnterpriseEditionHighPerformanceValue);

        /// <summary> Enterprise edition extreme. </summary>
        public static DbSystemDatabaseEditionType EnterpriseEditionExtreme { get; } = new DbSystemDatabaseEditionType(EnterpriseEditionExtremeValue);

        /// <summary> Enterprise edition developer. </summary>
        public static DbSystemDatabaseEditionType EnterpriseEditionDeveloper { get; } = new DbSystemDatabaseEditionType(EnterpriseEditionDeveloperValue);

        /// <summary> Determines if two <see cref="DbSystemDatabaseEditionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(DbSystemDatabaseEditionType left, DbSystemDatabaseEditionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="DbSystemDatabaseEditionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(DbSystemDatabaseEditionType left, DbSystemDatabaseEditionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="DbSystemDatabaseEditionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DbSystemDatabaseEditionType(string value) => new DbSystemDatabaseEditionType(value);

        /// <summary> Converts a string to a <see cref="DbSystemDatabaseEditionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DbSystemDatabaseEditionType?(string value) => value == null ? null : new DbSystemDatabaseEditionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbSystemDatabaseEditionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(DbSystemDatabaseEditionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
