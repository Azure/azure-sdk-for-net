// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> The exascale config response details for the cloud Exadata infrastructure. </summary>
    public partial class ExascaleConfigDetails
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ExascaleConfigDetails"/>. </summary>
        /// <param name="totalStorageInGbs"> Storage size needed for Exascale in GBs. </param>
        internal ExascaleConfigDetails(int totalStorageInGbs)
        {
            TotalStorageInGbs = totalStorageInGbs;
        }

        /// <summary> Initializes a new instance of <see cref="ExascaleConfigDetails"/>. </summary>
        /// <param name="totalStorageInGbs"> Storage size needed for Exascale in GBs. </param>
        /// <param name="availableStorageInGbs"> Available storage size for Exascale in GBs. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ExascaleConfigDetails(int totalStorageInGbs, int? availableStorageInGbs, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            TotalStorageInGbs = totalStorageInGbs;
            AvailableStorageInGbs = availableStorageInGbs;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Storage size needed for Exascale in GBs. </summary>
        public int TotalStorageInGbs { get; }

        /// <summary> Available storage size for Exascale in GBs. </summary>
        public int? AvailableStorageInGbs { get; }
    }
}
