// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DbSystem resource base model.
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="DbSystemProperties"/>.
    /// </summary>
    [PersistableModelProxy(typeof(UnknownDbSystemBaseProperties))]
    public abstract partial class DbSystemBaseProperties : IJsonModel<DbSystemBaseProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DbSystemBaseProperties"/> for deserialization. </summary>
        internal DbSystemBaseProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DbSystemBaseProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemBaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemBaseProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            writer.WritePropertyName("resourceAnchorId"u8);
            writer.WriteStringValue(ResourceAnchorId);
            writer.WritePropertyName("networkAnchorId"u8);
            writer.WriteStringValue(NetworkAnchorId);
            if (Optional.IsDefined(ClusterName))
            {
                writer.WritePropertyName("clusterName"u8);
                writer.WriteStringValue(ClusterName);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(InitialDataStorageSizeInGb))
            {
                writer.WritePropertyName("initialDataStorageSizeInGb"u8);
                writer.WriteNumberValue(InitialDataStorageSizeInGb.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DataStorageSizeInGbs))
            {
                writer.WritePropertyName("dataStorageSizeInGbs"u8);
                writer.WriteNumberValue(DataStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DbSystemOptions))
            {
                writer.WritePropertyName("dbSystemOptions"u8);
                writer.WriteObjectValue(DbSystemOptions, options);
            }
            if (Optional.IsDefined(DiskRedundancy))
            {
                writer.WritePropertyName("diskRedundancy"u8);
                writer.WriteStringValue(DiskRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(DomainV2))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(DomainV2);
            }
            if (options.Format != "W" && Optional.IsDefined(GridImageOcid))
            {
                writer.WritePropertyName("gridImageOcid"u8);
                writer.WriteStringValue(GridImageOcid);
            }
            writer.WritePropertyName("hostname"u8);
            writer.WriteStringValue(Hostname);
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (Optional.IsDefined(LicenseModelV2))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModelV2.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ListenerPort))
            {
                writer.WritePropertyName("listenerPort"u8);
                writer.WriteNumberValue(ListenerPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (Optional.IsDefined(NodeCount))
            {
                writer.WritePropertyName("nodeCount"u8);
                writer.WriteNumberValue(NodeCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsName))
            {
                writer.WritePropertyName("scanDnsName"u8);
                writer.WriteStringValue(ScanDnsName);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ScanIps))
            {
                writer.WritePropertyName("scanIps"u8);
                writer.WriteStartArray();
                foreach (string item in ScanIps)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("shape"u8);
            writer.WriteStringValue(Shape);
            writer.WritePropertyName("sshPublicKeys"u8);
            writer.WriteStartArray();
            foreach (string item in SshPublicKeys)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(StorageVolumePerformanceMode))
            {
                writer.WritePropertyName("storageVolumePerformanceMode"u8);
                writer.WriteStringValue(StorageVolumePerformanceMode.Value.ToString());
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            if (options.Format != "W" && Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel.Value.ToString());
            }
            if (Optional.IsDefined(ComputeCount))
            {
                writer.WritePropertyName("computeCount"u8);
                writer.WriteNumberValue(ComputeCount.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DbSystemBaseProperties IJsonModel<DbSystemBaseProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DbSystemBaseProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemBaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemBaseProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDbSystemBaseProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DbSystemBaseProperties DeserializeDbSystemBaseProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("source"u8, out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "None":
                        return DbSystemProperties.DeserializeDbSystemProperties(element, options);
                }
            }
            return UnknownDbSystemBaseProperties.DeserializeUnknownDbSystemBaseProperties(element, options);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DbSystemBaseProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemBaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DbSystemBaseProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DbSystemBaseProperties IPersistableModel<DbSystemBaseProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DbSystemBaseProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemBaseProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDbSystemBaseProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DbSystemBaseProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DbSystemBaseProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
