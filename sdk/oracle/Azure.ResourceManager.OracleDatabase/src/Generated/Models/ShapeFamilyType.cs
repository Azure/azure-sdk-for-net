// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Allowed values for shape family. </summary>
    public readonly partial struct ShapeFamilyType : IEquatable<ShapeFamilyType>
    {
        private readonly string _value;
        /// <summary> Family value for Exadata Shape. </summary>
        private const string ExadataValue = "EXADATA";
        /// <summary> Family value for Exadb XS Shape. </summary>
        private const string ExadbXsValue = "EXADB_XS";
        /// <summary> Family value for Single Node Shape. </summary>
        private const string SingleNodeValue = "SINGLENODE";
        /// <summary> Family value for Virtual Machine Shape. </summary>
        private const string VirtualMachineValue = "VIRTUALMACHINE";

        /// <summary> Initializes a new instance of <see cref="ShapeFamilyType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ShapeFamilyType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Family value for Exadata Shape. </summary>
        public static ShapeFamilyType Exadata { get; } = new ShapeFamilyType(ExadataValue);

        /// <summary> Family value for Exadb XS Shape. </summary>
        public static ShapeFamilyType ExadbXs { get; } = new ShapeFamilyType(ExadbXsValue);

        /// <summary> Family value for Single Node Shape. </summary>
        public static ShapeFamilyType SingleNode { get; } = new ShapeFamilyType(SingleNodeValue);

        /// <summary> Family value for Virtual Machine Shape. </summary>
        public static ShapeFamilyType VirtualMachine { get; } = new ShapeFamilyType(VirtualMachineValue);

        /// <summary> Determines if two <see cref="ShapeFamilyType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ShapeFamilyType left, ShapeFamilyType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ShapeFamilyType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ShapeFamilyType left, ShapeFamilyType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ShapeFamilyType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ShapeFamilyType(string value) => new ShapeFamilyType(value);

        /// <summary> Converts a string to a <see cref="ShapeFamilyType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ShapeFamilyType?(string value) => value == null ? null : new ShapeFamilyType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ShapeFamilyType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ShapeFamilyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
