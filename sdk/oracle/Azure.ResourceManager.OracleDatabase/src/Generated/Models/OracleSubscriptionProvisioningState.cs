// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> OracleSubscriptionProvisioningState enum. </summary>
    public readonly partial struct OracleSubscriptionProvisioningState : IEquatable<OracleSubscriptionProvisioningState>
    {
        private readonly string _value;
        /// <summary> Resource has been created. </summary>
        private const string SucceededValue = "Succeeded";
        /// <summary> Resource creation failed. </summary>
        private const string FailedValue = "Failed";
        /// <summary> Resource creation was canceled. </summary>
        private const string CanceledValue = "Canceled";

        /// <summary> Initializes a new instance of <see cref="OracleSubscriptionProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OracleSubscriptionProvisioningState(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Resource has been created. </summary>
        public static OracleSubscriptionProvisioningState Succeeded { get; } = new OracleSubscriptionProvisioningState(SucceededValue);

        /// <summary> Resource creation failed. </summary>
        public static OracleSubscriptionProvisioningState Failed { get; } = new OracleSubscriptionProvisioningState(FailedValue);

        /// <summary> Resource creation was canceled. </summary>
        public static OracleSubscriptionProvisioningState Canceled { get; } = new OracleSubscriptionProvisioningState(CanceledValue);

        /// <summary> Determines if two <see cref="OracleSubscriptionProvisioningState"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(OracleSubscriptionProvisioningState left, OracleSubscriptionProvisioningState right) => left.Equals(right);

        /// <summary> Determines if two <see cref="OracleSubscriptionProvisioningState"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(OracleSubscriptionProvisioningState left, OracleSubscriptionProvisioningState right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="OracleSubscriptionProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OracleSubscriptionProvisioningState(string value) => new OracleSubscriptionProvisioningState(value);

        /// <summary> Converts a string to a <see cref="OracleSubscriptionProvisioningState"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator OracleSubscriptionProvisioningState?(string value) => value == null ? null : new OracleSubscriptionProvisioningState(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OracleSubscriptionProvisioningState other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(OracleSubscriptionProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
