// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Role type enum. </summary>
    public readonly partial struct RoleType : IEquatable<RoleType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoleType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PrimaryValue = "Primary";
        private const string StandbyValue = "Standby";
        private const string DisabledStandbyValue = "DisabledStandby";
        private const string BackupCopyValue = "BackupCopy";
        private const string SnapshotStandbyValue = "SnapshotStandby";

        /// <summary> Primary role. </summary>
        public static RoleType Primary { get; } = new RoleType(PrimaryValue);
        /// <summary> Standby role. </summary>
        public static RoleType Standby { get; } = new RoleType(StandbyValue);
        /// <summary> DisabledStandby role. </summary>
        public static RoleType DisabledStandby { get; } = new RoleType(DisabledStandbyValue);
        /// <summary> BackupCopy role. </summary>
        public static RoleType BackupCopy { get; } = new RoleType(BackupCopyValue);
        /// <summary> SnapshotStandby role. </summary>
        public static RoleType SnapshotStandby { get; } = new RoleType(SnapshotStandbyValue);
        /// <summary> Determines if two <see cref="RoleType"/> values are the same. </summary>
        public static bool operator ==(RoleType left, RoleType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoleType"/> values are not the same. </summary>
        public static bool operator !=(RoleType left, RoleType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="RoleType"/>. </summary>
        public static implicit operator RoleType(string value) => new RoleType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoleType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoleType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
