// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Network Anchor properties. </summary>
    public partial class NetworkAnchorProperties : IJsonModel<NetworkAnchorProperties>
    {
        /// <summary> Initializes a new instance of <see cref="NetworkAnchorProperties"/> for deserialization. </summary>
        internal NetworkAnchorProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<NetworkAnchorProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NetworkAnchorProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkAnchorProperties)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("resourceAnchorId"u8);
            writer.WriteStringValue(ResourceAnchorId);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(VnetId))
            {
                writer.WritePropertyName("vnetId"u8);
                writer.WriteStringValue(VnetId);
            }
            writer.WritePropertyName("subnetId"u8);
            writer.WriteStringValue(SubnetId);
            if (options.Format != "W" && Optional.IsDefined(CidrBlock))
            {
                writer.WritePropertyName("cidrBlock"u8);
                writer.WriteStringValue(CidrBlock);
            }
            if (options.Format != "W" && Optional.IsDefined(OciVcnId))
            {
                writer.WritePropertyName("ociVcnId"u8);
                writer.WriteStringValue(OciVcnId);
            }
            if (Optional.IsDefined(OciVcnDnsLabel))
            {
                writer.WritePropertyName("ociVcnDnsLabel"u8);
                writer.WriteStringValue(OciVcnDnsLabel);
            }
            if (options.Format != "W" && Optional.IsDefined(OciSubnetId))
            {
                writer.WritePropertyName("ociSubnetId"u8);
                writer.WriteStringValue(OciSubnetId);
            }
            if (Optional.IsDefined(OciBackupCidrBlock))
            {
                writer.WritePropertyName("ociBackupCidrBlock"u8);
                writer.WriteStringValue(OciBackupCidrBlock);
            }
            if (Optional.IsDefined(IsOracleToAzureDnsZoneSyncEnabled))
            {
                writer.WritePropertyName("isOracleToAzureDnsZoneSyncEnabled"u8);
                writer.WriteBooleanValue(IsOracleToAzureDnsZoneSyncEnabled.Value);
            }
            if (Optional.IsDefined(IsOracleDnsListeningEndpointEnabled))
            {
                writer.WritePropertyName("isOracleDnsListeningEndpointEnabled"u8);
                writer.WriteBooleanValue(IsOracleDnsListeningEndpointEnabled.Value);
            }
            if (Optional.IsDefined(IsOracleDnsForwardingEndpointEnabled))
            {
                writer.WritePropertyName("isOracleDnsForwardingEndpointEnabled"u8);
                writer.WriteBooleanValue(IsOracleDnsForwardingEndpointEnabled.Value);
            }
            if (Optional.IsCollectionDefined(DnsForwardingRules))
            {
                writer.WritePropertyName("dnsForwardingRules"u8);
                writer.WriteStartArray();
                foreach (DnsForwardingRule item in DnsForwardingRules)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DnsListeningEndpointAllowedCidrs))
            {
                writer.WritePropertyName("dnsListeningEndpointAllowedCidrs"u8);
                writer.WriteStringValue(DnsListeningEndpointAllowedCidrs);
            }
            if (options.Format != "W" && Optional.IsDefined(DnsListeningEndpointIpAddress))
            {
                writer.WritePropertyName("dnsListeningEndpointIpAddress"u8);
                writer.WriteStringValue(DnsListeningEndpointIpAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(DnsForwardingEndpointIpAddress))
            {
                writer.WritePropertyName("dnsForwardingEndpointIpAddress"u8);
                writer.WriteStringValue(DnsForwardingEndpointIpAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(DnsForwardingRulesUri))
            {
                writer.WritePropertyName("dnsForwardingRulesUrl"u8);
                writer.WriteStringValue(DnsForwardingRulesUri);
            }
            if (options.Format != "W" && Optional.IsDefined(DnsListeningEndpointNsgRulesUri))
            {
                writer.WritePropertyName("dnsListeningEndpointNsgRulesUrl"u8);
                writer.WriteStringValue(DnsListeningEndpointNsgRulesUri);
            }
            if (options.Format != "W" && Optional.IsDefined(DnsForwardingEndpointNsgRulesUri))
            {
                writer.WritePropertyName("dnsForwardingEndpointNsgRulesUrl"u8);
                writer.WriteStringValue(DnsForwardingEndpointNsgRulesUri);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        NetworkAnchorProperties IJsonModel<NetworkAnchorProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual NetworkAnchorProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NetworkAnchorProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkAnchorProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNetworkAnchorProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static NetworkAnchorProperties DeserializeNetworkAnchorProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string resourceAnchorId = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            ResourceIdentifier vnetId = default;
            ResourceIdentifier subnetId = default;
            string cidrBlock = default;
            string ociVcnId = default;
            string ociVcnDnsLabel = default;
            string ociSubnetId = default;
            string ociBackupCidrBlock = default;
            bool? isOracleToAzureDnsZoneSyncEnabled = default;
            bool? isOracleDnsListeningEndpointEnabled = default;
            bool? isOracleDnsForwardingEndpointEnabled = default;
            IList<DnsForwardingRule> dnsForwardingRules = default;
            string dnsListeningEndpointAllowedCidrs = default;
            string dnsListeningEndpointIpAddress = default;
            string dnsForwardingEndpointIpAddress = default;
            string dnsForwardingRulesUri = default;
            string dnsListeningEndpointNsgRulesUri = default;
            string dnsForwardingEndpointNsgRulesUri = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("resourceAnchorId"u8))
                {
                    resourceAnchorId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vnetId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("subnetId"u8))
                {
                    subnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("cidrBlock"u8))
                {
                    cidrBlock = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociVcnId"u8))
                {
                    ociVcnId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociVcnDnsLabel"u8))
                {
                    ociVcnDnsLabel = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociSubnetId"u8))
                {
                    ociSubnetId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociBackupCidrBlock"u8))
                {
                    ociBackupCidrBlock = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isOracleToAzureDnsZoneSyncEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOracleToAzureDnsZoneSyncEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isOracleDnsListeningEndpointEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOracleDnsListeningEndpointEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isOracleDnsForwardingEndpointEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOracleDnsForwardingEndpointEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("dnsForwardingRules"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DnsForwardingRule> array = new List<DnsForwardingRule>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(DnsForwardingRule.DeserializeDnsForwardingRule(item, options));
                    }
                    dnsForwardingRules = array;
                    continue;
                }
                if (prop.NameEquals("dnsListeningEndpointAllowedCidrs"u8))
                {
                    dnsListeningEndpointAllowedCidrs = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dnsListeningEndpointIpAddress"u8))
                {
                    dnsListeningEndpointIpAddress = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dnsForwardingEndpointIpAddress"u8))
                {
                    dnsForwardingEndpointIpAddress = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dnsForwardingRulesUrl"u8))
                {
                    dnsForwardingRulesUri = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dnsListeningEndpointNsgRulesUrl"u8))
                {
                    dnsListeningEndpointNsgRulesUri = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dnsForwardingEndpointNsgRulesUrl"u8))
                {
                    dnsForwardingEndpointNsgRulesUri = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new NetworkAnchorProperties(
                resourceAnchorId,
                provisioningState,
                vnetId,
                subnetId,
                cidrBlock,
                ociVcnId,
                ociVcnDnsLabel,
                ociSubnetId,
                ociBackupCidrBlock,
                isOracleToAzureDnsZoneSyncEnabled,
                isOracleDnsListeningEndpointEnabled,
                isOracleDnsForwardingEndpointEnabled,
                dnsForwardingRules ?? new ChangeTrackingList<DnsForwardingRule>(),
                dnsListeningEndpointAllowedCidrs,
                dnsListeningEndpointIpAddress,
                dnsForwardingEndpointIpAddress,
                dnsForwardingRulesUri,
                dnsListeningEndpointNsgRulesUri,
                dnsForwardingEndpointNsgRulesUri,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<NetworkAnchorProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NetworkAnchorProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NetworkAnchorProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        NetworkAnchorProperties IPersistableModel<NetworkAnchorProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual NetworkAnchorProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<NetworkAnchorProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeNetworkAnchorProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NetworkAnchorProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<NetworkAnchorProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
