// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Consumer group enum.
    /// Serialized Name: ConsumerGroup
    /// </summary>
    public readonly partial struct ConsumerGroup : IEquatable<ConsumerGroup>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConsumerGroup"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConsumerGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighValue = "High";
        private const string MediumValue = "Medium";
        private const string LowValue = "Low";
        private const string TpValue = "Tp";
        private const string TpurgentValue = "Tpurgent";

        /// <summary>
        /// High group
        /// Serialized Name: ConsumerGroup.High
        /// </summary>
        public static ConsumerGroup High { get; } = new ConsumerGroup(HighValue);
        /// <summary>
        /// Medium group
        /// Serialized Name: ConsumerGroup.Medium
        /// </summary>
        public static ConsumerGroup Medium { get; } = new ConsumerGroup(MediumValue);
        /// <summary>
        /// Low group
        /// Serialized Name: ConsumerGroup.Low
        /// </summary>
        public static ConsumerGroup Low { get; } = new ConsumerGroup(LowValue);
        /// <summary>
        /// TP group
        /// Serialized Name: ConsumerGroup.Tp
        /// </summary>
        public static ConsumerGroup Tp { get; } = new ConsumerGroup(TpValue);
        /// <summary>
        /// TPurgent group
        /// Serialized Name: ConsumerGroup.Tpurgent
        /// </summary>
        public static ConsumerGroup Tpurgent { get; } = new ConsumerGroup(TpurgentValue);
        /// <summary> Determines if two <see cref="ConsumerGroup"/> values are the same. </summary>
        public static bool operator ==(ConsumerGroup left, ConsumerGroup right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConsumerGroup"/> values are not the same. </summary>
        public static bool operator !=(ConsumerGroup left, ConsumerGroup right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConsumerGroup"/>. </summary>
        public static implicit operator ConsumerGroup(string value) => new ConsumerGroup(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConsumerGroup other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConsumerGroup other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
