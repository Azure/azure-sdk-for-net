// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    public partial class AutonomousDatabasePatch : IUtf8JsonSerializable, IJsonModel<AutonomousDatabasePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AutonomousDatabasePatch>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AutonomousDatabasePatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabasePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabasePatch)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword"u8);
                writer.WriteStringValue(AdminPassword);
            }
            if (Optional.IsDefined(AutonomousMaintenanceScheduleType))
            {
                writer.WritePropertyName("autonomousMaintenanceScheduleType"u8);
                writer.WriteStringValue(AutonomousMaintenanceScheduleType.Value.ToString());
            }
            if (Optional.IsDefined(ComputeCount))
            {
                writer.WritePropertyName("computeCount"u8);
                writer.WriteNumberValue(ComputeCount.Value);
            }
            if (Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (Optional.IsCollectionDefined(CustomerContacts))
            {
                writer.WritePropertyName("customerContacts"u8);
                writer.WriteStartArray();
                foreach (var item in CustomerContacts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (Optional.IsDefined(DataStorageSizeInGbs))
            {
                writer.WritePropertyName("dataStorageSizeInGbs"u8);
                writer.WriteNumberValue(DataStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(IsAutoScalingEnabled))
            {
                writer.WritePropertyName("isAutoScalingEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingEnabled.Value);
            }
            if (Optional.IsDefined(IsAutoScalingForStorageEnabled))
            {
                writer.WritePropertyName("isAutoScalingForStorageEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingForStorageEnabled.Value);
            }
            if (Optional.IsDefined(PeerDbId))
            {
                writer.WritePropertyName("peerDbId"u8);
                writer.WriteStringValue(PeerDbId);
            }
            if (Optional.IsDefined(IsLocalDataGuardEnabled))
            {
                writer.WritePropertyName("isLocalDataGuardEnabled"u8);
                writer.WriteBooleanValue(IsLocalDataGuardEnabled.Value);
            }
            if (Optional.IsDefined(IsMtlsConnectionRequired))
            {
                writer.WritePropertyName("isMtlsConnectionRequired"u8);
                writer.WriteBooleanValue(IsMtlsConnectionRequired.Value);
            }
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (Optional.IsDefined(ScheduledOperations))
            {
                writer.WritePropertyName("scheduledOperations"u8);
                writer.WriteObjectValue(ScheduledOperations, options);
            }
            if (Optional.IsDefined(DatabaseEdition))
            {
                writer.WritePropertyName("databaseEdition"u8);
                writer.WriteStringValue(DatabaseEdition.Value.ToString());
            }
            if (Optional.IsDefined(LocalAdgAutoFailoverMaxDataLossLimit))
            {
                writer.WritePropertyName("localAdgAutoFailoverMaxDataLossLimit"u8);
                writer.WriteNumberValue(LocalAdgAutoFailoverMaxDataLossLimit.Value);
            }
            if (Optional.IsDefined(OpenMode))
            {
                writer.WritePropertyName("openMode"u8);
                writer.WriteStringValue(OpenMode.Value.ToString());
            }
            if (Optional.IsDefined(PermissionLevel))
            {
                writer.WritePropertyName("permissionLevel"u8);
                writer.WriteStringValue(PermissionLevel.Value.ToString());
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role"u8);
                writer.WriteStringValue(Role.Value.ToString());
            }
            if (Optional.IsDefined(BackupRetentionPeriodInDays))
            {
                writer.WritePropertyName("backupRetentionPeriodInDays"u8);
                writer.WriteNumberValue(BackupRetentionPeriodInDays.Value);
            }
            if (Optional.IsCollectionDefined(WhitelistedIPs))
            {
                writer.WritePropertyName("whitelistedIps"u8);
                writer.WriteStartArray();
                foreach (var item in WhitelistedIPs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AutonomousDatabasePatch IJsonModel<AutonomousDatabasePatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabasePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabasePatch)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabasePatch(document.RootElement, options);
        }

        internal static AutonomousDatabasePatch DeserializeAutonomousDatabasePatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, string> tags = default;
            string adminPassword = default;
            AutonomousMaintenanceScheduleType? autonomousMaintenanceScheduleType = default;
            float? computeCount = default;
            int? cpuCoreCount = default;
            IList<CustomerContact> customerContacts = default;
            int? dataStorageSizeInTbs = default;
            int? dataStorageSizeInGbs = default;
            string displayName = default;
            bool? isAutoScalingEnabled = default;
            bool? isAutoScalingForStorageEnabled = default;
            string peerDbId = default;
            bool? isLocalDataGuardEnabled = default;
            bool? isMtlsConnectionRequired = default;
            LicenseModel? licenseModel = default;
            ScheduledOperationsTypeUpdate scheduledOperations = default;
            DatabaseEditionType? databaseEdition = default;
            int? localAdgAutoFailoverMaxDataLossLimit = default;
            OpenModeType? openMode = default;
            PermissionLevelType? permissionLevel = default;
            RoleType? role = default;
            int? backupRetentionPeriodInDays = default;
            IList<string> whitelistedIPs = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("adminPassword"u8))
                        {
                            adminPassword = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("autonomousMaintenanceScheduleType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            autonomousMaintenanceScheduleType = new AutonomousMaintenanceScheduleType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("computeCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            computeCount = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("cpuCoreCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cpuCoreCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("customerContacts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CustomerContact> array = new List<CustomerContact>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CustomerContact.DeserializeCustomerContact(item, options));
                            }
                            customerContacts = array;
                            continue;
                        }
                        if (property0.NameEquals("dataStorageSizeInTbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStorageSizeInTbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataStorageSizeInGbs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataStorageSizeInGbs = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isAutoScalingEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isAutoScalingEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isAutoScalingForStorageEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isAutoScalingForStorageEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("peerDbId"u8))
                        {
                            peerDbId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isLocalDataGuardEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isLocalDataGuardEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isMtlsConnectionRequired"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isMtlsConnectionRequired = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("licenseModel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            licenseModel = new LicenseModel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scheduledOperations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scheduledOperations = ScheduledOperationsTypeUpdate.DeserializeScheduledOperationsTypeUpdate(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("databaseEdition"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            databaseEdition = new DatabaseEditionType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("localAdgAutoFailoverMaxDataLossLimit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localAdgAutoFailoverMaxDataLossLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("openMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            openMode = new OpenModeType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("permissionLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            permissionLevel = new PermissionLevelType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("role"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            role = new RoleType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("backupRetentionPeriodInDays"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            backupRetentionPeriodInDays = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("whitelistedIps"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            whitelistedIPs = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AutonomousDatabasePatch(
                tags ?? new ChangeTrackingDictionary<string, string>(),
                adminPassword,
                autonomousMaintenanceScheduleType,
                computeCount,
                cpuCoreCount,
                customerContacts ?? new ChangeTrackingList<CustomerContact>(),
                dataStorageSizeInTbs,
                dataStorageSizeInGbs,
                displayName,
                isAutoScalingEnabled,
                isAutoScalingForStorageEnabled,
                peerDbId,
                isLocalDataGuardEnabled,
                isMtlsConnectionRequired,
                licenseModel,
                scheduledOperations,
                databaseEdition,
                localAdgAutoFailoverMaxDataLossLimit,
                openMode,
                permissionLevel,
                role,
                backupRetentionPeriodInDays,
                whitelistedIPs ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AutonomousDatabasePatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabasePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabasePatch)} does not support writing '{options.Format}' format.");
            }
        }

        AutonomousDatabasePatch IPersistableModel<AutonomousDatabasePatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabasePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAutonomousDatabasePatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabasePatch)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AutonomousDatabasePatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
