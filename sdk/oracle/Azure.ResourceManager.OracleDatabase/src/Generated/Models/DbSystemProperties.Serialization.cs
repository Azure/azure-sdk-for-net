// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> DbSystem resource model. </summary>
    public partial class DbSystemProperties : IJsonModel<DbSystemProperties>
    {
        /// <summary> Initializes a new instance of <see cref="DbSystemProperties"/> for deserialization. </summary>
        internal DbSystemProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DbSystemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemProperties)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("databaseEdition"u8);
            writer.WriteStringValue(DatabaseEdition.ToString());
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword"u8);
                writer.WriteStringValue(AdminPassword);
            }
            writer.WritePropertyName("dbVersion"u8);
            writer.WriteStringValue(DbVersion);
            if (Optional.IsDefined(PdbName))
            {
                writer.WritePropertyName("pdbName"u8);
                writer.WriteStringValue(PdbName);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DbSystemProperties IJsonModel<DbSystemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (DbSystemProperties)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DbSystemBaseProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDbSystemProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DbSystemProperties DeserializeDbSystemProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DbSystemSourceType? source = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            Uri ociUri = default;
            ResourceIdentifier resourceAnchorId = default;
            ResourceIdentifier networkAnchorId = default;
            string clusterName = default;
            string displayName = default;
            int? initialDataStorageSizeInGb = default;
            int? dataStorageSizeInGbs = default;
            DbSystemOptions dbSystemOptions = default;
            DiskRedundancyType? diskRedundancy = default;
            string domainV2 = default;
            string gridImageOcid = default;
            string hostname = default;
            string ocid = default;
            OracleLicenseModel? licenseModelV2 = default;
            string lifecycleDetails = default;
            DbSystemLifecycleState? lifecycleState = default;
            int? listenerPort = default;
            int? memorySizeInGbs = default;
            int? nodeCount = default;
            string scanDnsName = default;
            IReadOnlyList<string> scanIps = default;
            string shape = default;
            IList<string> sshPublicKeys = default;
            StorageVolumePerformanceMode? storageVolumePerformanceMode = default;
            string timeZone = default;
            string version = default;
            OracleDatabaseComputeModel? computeModel = default;
            int? computeCount = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            DbSystemDatabaseEditionType databaseEdition = default;
            string adminPassword = default;
            string dbVersion = default;
            string pdbName = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("source"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    source = new DbSystemSourceType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("ociUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("resourceAnchorId"u8))
                {
                    resourceAnchorId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("networkAnchorId"u8))
                {
                    networkAnchorId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("clusterName"u8))
                {
                    clusterName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("initialDataStorageSizeInGb"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialDataStorageSizeInGb = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dbSystemOptions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbSystemOptions = DbSystemOptions.DeserializeDbSystemOptions(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("diskRedundancy"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskRedundancy = new DiskRedundancyType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("domain"u8))
                {
                    domainV2 = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("gridImageOcid"u8))
                {
                    gridImageOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostname"u8))
                {
                    hostname = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ocid"u8))
                {
                    ocid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("licenseModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModelV2 = new OracleLicenseModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new DbSystemLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("listenerPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    listenerPort = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("memorySizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("nodeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("scanDnsName"u8))
                {
                    scanDnsName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scanIps"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    scanIps = array;
                    continue;
                }
                if (prop.NameEquals("shape"u8))
                {
                    shape = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sshPublicKeys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    sshPublicKeys = array;
                    continue;
                }
                if (prop.NameEquals("storageVolumePerformanceMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageVolumePerformanceMode = new StorageVolumePerformanceMode(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("timeZone"u8))
                {
                    timeZone = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    version = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeModel = new OracleDatabaseComputeModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("computeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("databaseEdition"u8))
                {
                    databaseEdition = new DbSystemDatabaseEditionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("adminPassword"u8))
                {
                    adminPassword = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dbVersion"u8))
                {
                    dbVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("pdbName"u8))
                {
                    pdbName = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DbSystemProperties(
                source,
                provisioningState,
                ociUri,
                resourceAnchorId,
                networkAnchorId,
                clusterName,
                displayName,
                initialDataStorageSizeInGb,
                dataStorageSizeInGbs,
                dbSystemOptions,
                diskRedundancy,
                domainV2,
                gridImageOcid,
                hostname,
                ocid,
                licenseModelV2,
                lifecycleDetails,
                lifecycleState,
                listenerPort,
                memorySizeInGbs,
                nodeCount,
                scanDnsName,
                scanIps ?? new ChangeTrackingList<string>(),
                shape,
                sshPublicKeys,
                storageVolumePerformanceMode,
                timeZone,
                version,
                computeModel,
                computeCount,
                additionalBinaryDataProperties,
                databaseEdition,
                adminPassword,
                dbVersion,
                pdbName);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DbSystemProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DbSystemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DbSystemProperties IPersistableModel<DbSystemProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => (DbSystemProperties)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override DbSystemBaseProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDbSystemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DbSystemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DbSystemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
