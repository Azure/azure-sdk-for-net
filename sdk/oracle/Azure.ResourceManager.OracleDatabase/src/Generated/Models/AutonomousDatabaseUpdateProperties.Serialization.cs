// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> The updatable properties of the AutonomousDatabase. </summary>
    public partial class AutonomousDatabaseUpdateProperties : IJsonModel<AutonomousDatabaseUpdateProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AutonomousDatabaseUpdateProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseUpdateProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword"u8);
                writer.WriteStringValue(AdminPassword);
            }
            if (Optional.IsDefined(AutonomousMaintenanceScheduleType))
            {
                writer.WritePropertyName("autonomousMaintenanceScheduleType"u8);
                writer.WriteStringValue(AutonomousMaintenanceScheduleType.Value.ToString());
            }
            if (Optional.IsDefined(ComputeCount))
            {
                writer.WritePropertyName("computeCount"u8);
                writer.WriteNumberValue(ComputeCount.Value);
            }
            if (Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (Optional.IsCollectionDefined(CustomerContacts))
            {
                writer.WritePropertyName("customerContacts"u8);
                writer.WriteStartArray();
                foreach (OracleCustomerContact item in CustomerContacts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (Optional.IsDefined(DataStorageSizeInGbs))
            {
                writer.WritePropertyName("dataStorageSizeInGbs"u8);
                writer.WriteNumberValue(DataStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(IsAutoScalingEnabled))
            {
                writer.WritePropertyName("isAutoScalingEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingEnabled.Value);
            }
            if (Optional.IsDefined(IsAutoScalingForStorageEnabled))
            {
                writer.WritePropertyName("isAutoScalingForStorageEnabled"u8);
                writer.WriteBooleanValue(IsAutoScalingForStorageEnabled.Value);
            }
            if (Optional.IsDefined(PeerDBId))
            {
                writer.WritePropertyName("peerDbId"u8);
                writer.WriteStringValue(PeerDBId);
            }
            if (Optional.IsDefined(IsLocalDataGuardEnabled))
            {
                writer.WritePropertyName("isLocalDataGuardEnabled"u8);
                writer.WriteBooleanValue(IsLocalDataGuardEnabled.Value);
            }
            if (Optional.IsDefined(IsMtlsConnectionRequired))
            {
                writer.WritePropertyName("isMtlsConnectionRequired"u8);
                writer.WriteBooleanValue(IsMtlsConnectionRequired.Value);
            }
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (Optional.IsCollectionDefined(ScheduledOperationsList))
            {
                writer.WritePropertyName("scheduledOperationsList"u8);
                writer.WriteStartArray();
                foreach (ScheduledOperationsTypeUpdate item in ScheduledOperationsList)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DatabaseEdition))
            {
                writer.WritePropertyName("databaseEdition"u8);
                writer.WriteStringValue(DatabaseEdition.Value.ToString());
            }
            if (Optional.IsDefined(LongTermBackupSchedule))
            {
                writer.WritePropertyName("longTermBackupSchedule"u8);
                writer.WriteObjectValue(LongTermBackupSchedule, options);
            }
            if (Optional.IsDefined(LocalAdgAutoFailoverMaxDataLossLimit))
            {
                writer.WritePropertyName("localAdgAutoFailoverMaxDataLossLimit"u8);
                writer.WriteNumberValue(LocalAdgAutoFailoverMaxDataLossLimit.Value);
            }
            if (Optional.IsDefined(OpenMode))
            {
                writer.WritePropertyName("openMode"u8);
                writer.WriteStringValue(OpenMode.Value.ToString());
            }
            if (Optional.IsDefined(PermissionLevel))
            {
                writer.WritePropertyName("permissionLevel"u8);
                writer.WriteStringValue(PermissionLevel.Value.ToString());
            }
            if (Optional.IsDefined(Role))
            {
                writer.WritePropertyName("role"u8);
                writer.WriteStringValue(Role.Value.ToString());
            }
            if (Optional.IsDefined(BackupRetentionPeriodInDays))
            {
                writer.WritePropertyName("backupRetentionPeriodInDays"u8);
                writer.WriteNumberValue(BackupRetentionPeriodInDays.Value);
            }
            if (Optional.IsCollectionDefined(WhitelistedIps))
            {
                writer.WritePropertyName("whitelistedIps"u8);
                writer.WriteStartArray();
                foreach (string item in WhitelistedIps)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseUpdateProperties IJsonModel<AutonomousDatabaseUpdateProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseUpdateProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseUpdateProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabaseUpdateProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AutonomousDatabaseUpdateProperties DeserializeAutonomousDatabaseUpdateProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string adminPassword = default;
            AutonomousMaintenanceScheduleType? autonomousMaintenanceScheduleType = default;
            float? computeCount = default;
            int? cpuCoreCount = default;
            IList<OracleCustomerContact> customerContacts = default;
            int? dataStorageSizeInTbs = default;
            int? dataStorageSizeInGbs = default;
            string displayName = default;
            bool? isAutoScalingEnabled = default;
            bool? isAutoScalingForStorageEnabled = default;
            string peerDBId = default;
            bool? isLocalDataGuardEnabled = default;
            bool? isMtlsConnectionRequired = default;
            OracleLicenseModel? licenseModel = default;
            IList<ScheduledOperationsTypeUpdate> scheduledOperationsList = default;
            OracleDatabaseEditionType? databaseEdition = default;
            LongTermBackUpScheduleDetails longTermBackupSchedule = default;
            int? localAdgAutoFailoverMaxDataLossLimit = default;
            AutonomousDatabaseModeType? openMode = default;
            AutonomousDatabasePermissionLevelType? permissionLevel = default;
            DataGuardRoleType? role = default;
            int? backupRetentionPeriodInDays = default;
            IList<string> whitelistedIps = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("adminPassword"u8))
                {
                    adminPassword = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("autonomousMaintenanceScheduleType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autonomousMaintenanceScheduleType = new AutonomousMaintenanceScheduleType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("computeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeCount = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("cpuCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("customerContacts"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OracleCustomerContact> array = new List<OracleCustomerContact>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(OracleCustomerContact.DeserializeOracleCustomerContact(item, options));
                    }
                    customerContacts = array;
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInTbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isAutoScalingEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAutoScalingEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isAutoScalingForStorageEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isAutoScalingForStorageEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("peerDbId"u8))
                {
                    peerDBId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isLocalDataGuardEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLocalDataGuardEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("isMtlsConnectionRequired"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMtlsConnectionRequired = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("licenseModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModel = new OracleLicenseModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("scheduledOperationsList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ScheduledOperationsTypeUpdate> array = new List<ScheduledOperationsTypeUpdate>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ScheduledOperationsTypeUpdate.DeserializeScheduledOperationsTypeUpdate(item, options));
                    }
                    scheduledOperationsList = array;
                    continue;
                }
                if (prop.NameEquals("databaseEdition"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseEdition = new OracleDatabaseEditionType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("longTermBackupSchedule"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    longTermBackupSchedule = LongTermBackUpScheduleDetails.DeserializeLongTermBackUpScheduleDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("localAdgAutoFailoverMaxDataLossLimit"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localAdgAutoFailoverMaxDataLossLimit = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("openMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    openMode = new AutonomousDatabaseModeType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("permissionLevel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    permissionLevel = new AutonomousDatabasePermissionLevelType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("role"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    role = new DataGuardRoleType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("backupRetentionPeriodInDays"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupRetentionPeriodInDays = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("whitelistedIps"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    whitelistedIps = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AutonomousDatabaseUpdateProperties(
                adminPassword,
                autonomousMaintenanceScheduleType,
                computeCount,
                cpuCoreCount,
                customerContacts ?? new ChangeTrackingList<OracleCustomerContact>(),
                dataStorageSizeInTbs,
                dataStorageSizeInGbs,
                displayName,
                isAutoScalingEnabled,
                isAutoScalingForStorageEnabled,
                peerDBId,
                isLocalDataGuardEnabled,
                isMtlsConnectionRequired,
                licenseModel,
                scheduledOperationsList ?? new ChangeTrackingList<ScheduledOperationsTypeUpdate>(),
                databaseEdition,
                longTermBackupSchedule,
                localAdgAutoFailoverMaxDataLossLimit,
                openMode,
                permissionLevel,
                role,
                backupRetentionPeriodInDays,
                whitelistedIps ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AutonomousDatabaseUpdateProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseUpdateProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseUpdateProperties IPersistableModel<AutonomousDatabaseUpdateProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseUpdateProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseUpdateProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAutonomousDatabaseUpdateProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseUpdateProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AutonomousDatabaseUpdateProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
