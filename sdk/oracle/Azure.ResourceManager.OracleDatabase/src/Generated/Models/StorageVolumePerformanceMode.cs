// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Storage volume performance mode. </summary>
    public readonly partial struct StorageVolumePerformanceMode : IEquatable<StorageVolumePerformanceMode>
    {
        private readonly string _value;
        /// <summary> With this option, you are purchasing 10 VPUs per GB/month. For more information, including specific throughput and IOPS performance numbers for various volume sizes. </summary>
        private const string BalancedValue = "Balanced";
        /// <summary> With this option, you are purchasing 20 VPUs per GB/month. For more information, including specific throughput and IOPS performance numbers for various volume sizes. </summary>
        private const string HighPerformanceValue = "HighPerformance";

        /// <summary> Initializes a new instance of <see cref="StorageVolumePerformanceMode"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageVolumePerformanceMode(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> With this option, you are purchasing 10 VPUs per GB/month. For more information, including specific throughput and IOPS performance numbers for various volume sizes. </summary>
        public static StorageVolumePerformanceMode Balanced { get; } = new StorageVolumePerformanceMode(BalancedValue);

        /// <summary> With this option, you are purchasing 20 VPUs per GB/month. For more information, including specific throughput and IOPS performance numbers for various volume sizes. </summary>
        public static StorageVolumePerformanceMode HighPerformance { get; } = new StorageVolumePerformanceMode(HighPerformanceValue);

        /// <summary> Determines if two <see cref="StorageVolumePerformanceMode"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(StorageVolumePerformanceMode left, StorageVolumePerformanceMode right) => left.Equals(right);

        /// <summary> Determines if two <see cref="StorageVolumePerformanceMode"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(StorageVolumePerformanceMode left, StorageVolumePerformanceMode right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="StorageVolumePerformanceMode"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator StorageVolumePerformanceMode(string value) => new StorageVolumePerformanceMode(value);

        /// <summary> Converts a string to a <see cref="StorageVolumePerformanceMode"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator StorageVolumePerformanceMode?(string value) => value == null ? null : new StorageVolumePerformanceMode(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageVolumePerformanceMode other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(StorageVolumePerformanceMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
