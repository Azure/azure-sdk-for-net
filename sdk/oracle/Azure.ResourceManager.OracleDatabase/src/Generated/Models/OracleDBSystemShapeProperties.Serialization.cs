// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> DbSystemShape resource model. </summary>
    public partial class OracleDBSystemShapeProperties : IJsonModel<OracleDBSystemShapeProperties>
    {
        /// <summary> Initializes a new instance of <see cref="OracleDBSystemShapeProperties"/> for deserialization. </summary>
        internal OracleDBSystemShapeProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<OracleDBSystemShapeProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDBSystemShapeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleDBSystemShapeProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(ShapeFamily))
            {
                writer.WritePropertyName("shapeFamily"u8);
                writer.WriteStringValue(ShapeFamily);
            }
            writer.WritePropertyName("shapeName"u8);
            writer.WriteStringValue(ShapeName);
            writer.WritePropertyName("availableCoreCount"u8);
            writer.WriteNumberValue(AvailableCoreCount);
            if (Optional.IsDefined(MinimumCoreCount))
            {
                writer.WritePropertyName("minimumCoreCount"u8);
                writer.WriteNumberValue(MinimumCoreCount.Value);
            }
            if (Optional.IsDefined(RuntimeMinimumCoreCount))
            {
                writer.WritePropertyName("runtimeMinimumCoreCount"u8);
                writer.WriteNumberValue(RuntimeMinimumCoreCount.Value);
            }
            if (Optional.IsDefined(CoreCountIncrement))
            {
                writer.WritePropertyName("coreCountIncrement"u8);
                writer.WriteNumberValue(CoreCountIncrement.Value);
            }
            if (Optional.IsDefined(MinStorageCount))
            {
                writer.WritePropertyName("minStorageCount"u8);
                writer.WriteNumberValue(MinStorageCount.Value);
            }
            if (Optional.IsDefined(MaxStorageCount))
            {
                writer.WritePropertyName("maxStorageCount"u8);
                writer.WriteNumberValue(MaxStorageCount.Value);
            }
            if (Optional.IsDefined(AvailableDataStoragePerServerInTbs))
            {
                writer.WritePropertyName("availableDataStoragePerServerInTbs"u8);
                writer.WriteNumberValue(AvailableDataStoragePerServerInTbs.Value);
            }
            if (Optional.IsDefined(AvailableMemoryPerNodeInGbs))
            {
                writer.WritePropertyName("availableMemoryPerNodeInGbs"u8);
                writer.WriteNumberValue(AvailableMemoryPerNodeInGbs.Value);
            }
            if (Optional.IsDefined(AvailableDBNodePerNodeInGbs))
            {
                writer.WritePropertyName("availableDbNodePerNodeInGbs"u8);
                writer.WriteNumberValue(AvailableDBNodePerNodeInGbs.Value);
            }
            if (Optional.IsDefined(MinCoreCountPerNode))
            {
                writer.WritePropertyName("minCoreCountPerNode"u8);
                writer.WriteNumberValue(MinCoreCountPerNode.Value);
            }
            if (Optional.IsDefined(AvailableMemoryInGbs))
            {
                writer.WritePropertyName("availableMemoryInGbs"u8);
                writer.WriteNumberValue(AvailableMemoryInGbs.Value);
            }
            if (Optional.IsDefined(MinMemoryPerNodeInGbs))
            {
                writer.WritePropertyName("minMemoryPerNodeInGbs"u8);
                writer.WriteNumberValue(MinMemoryPerNodeInGbs.Value);
            }
            if (Optional.IsDefined(AvailableDBNodeStorageInGbs))
            {
                writer.WritePropertyName("availableDbNodeStorageInGbs"u8);
                writer.WriteNumberValue(AvailableDBNodeStorageInGbs.Value);
            }
            if (Optional.IsDefined(MinDBNodeStoragePerNodeInGbs))
            {
                writer.WritePropertyName("minDbNodeStoragePerNodeInGbs"u8);
                writer.WriteNumberValue(MinDBNodeStoragePerNodeInGbs.Value);
            }
            if (Optional.IsDefined(AvailableDataStorageInTbs))
            {
                writer.WritePropertyName("availableDataStorageInTbs"u8);
                writer.WriteNumberValue(AvailableDataStorageInTbs.Value);
            }
            if (Optional.IsDefined(MinDataStorageInTbs))
            {
                writer.WritePropertyName("minDataStorageInTbs"u8);
                writer.WriteNumberValue(MinDataStorageInTbs.Value);
            }
            if (Optional.IsDefined(MinimumNodeCount))
            {
                writer.WritePropertyName("minimumNodeCount"u8);
                writer.WriteNumberValue(MinimumNodeCount.Value);
            }
            if (Optional.IsDefined(MaximumNodeCount))
            {
                writer.WritePropertyName("maximumNodeCount"u8);
                writer.WriteNumberValue(MaximumNodeCount.Value);
            }
            if (Optional.IsDefined(AvailableCoreCountPerNode))
            {
                writer.WritePropertyName("availableCoreCountPerNode"u8);
                writer.WriteNumberValue(AvailableCoreCountPerNode.Value);
            }
            if (Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel.Value.ToString());
            }
            if (Optional.IsDefined(AreServerTypesSupported))
            {
                writer.WritePropertyName("areServerTypesSupported"u8);
                writer.WriteBooleanValue(AreServerTypesSupported.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsCollectionDefined(ShapeAttributes))
            {
                writer.WritePropertyName("shapeAttributes"u8);
                writer.WriteStartArray();
                foreach (string item in ShapeAttributes)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleDBSystemShapeProperties IJsonModel<OracleDBSystemShapeProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleDBSystemShapeProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDBSystemShapeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleDBSystemShapeProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeOracleDBSystemShapeProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static OracleDBSystemShapeProperties DeserializeOracleDBSystemShapeProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string shapeFamily = default;
            string shapeName = default;
            int availableCoreCount = default;
            int? minimumCoreCount = default;
            int? runtimeMinimumCoreCount = default;
            int? coreCountIncrement = default;
            int? minStorageCount = default;
            int? maxStorageCount = default;
            double? availableDataStoragePerServerInTbs = default;
            int? availableMemoryPerNodeInGbs = default;
            int? availableDBNodePerNodeInGbs = default;
            int? minCoreCountPerNode = default;
            int? availableMemoryInGbs = default;
            int? minMemoryPerNodeInGbs = default;
            int? availableDBNodeStorageInGbs = default;
            int? minDBNodeStoragePerNodeInGbs = default;
            int? availableDataStorageInTbs = default;
            int? minDataStorageInTbs = default;
            int? minimumNodeCount = default;
            int? maximumNodeCount = default;
            int? availableCoreCountPerNode = default;
            OracleDatabaseComputeModel? computeModel = default;
            bool? areServerTypesSupported = default;
            string displayName = default;
            IList<string> shapeAttributes = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("shapeFamily"u8))
                {
                    shapeFamily = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("shapeName"u8))
                {
                    shapeName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("availableCoreCount"u8))
                {
                    availableCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minimumCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("runtimeMinimumCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runtimeMinimumCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("coreCountIncrement"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    coreCountIncrement = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minStorageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minStorageCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maxStorageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxStorageCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableDataStoragePerServerInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableDataStoragePerServerInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("availableMemoryPerNodeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryPerNodeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableDbNodePerNodeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableDBNodePerNodeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minCoreCountPerNode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minCoreCountPerNode = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableMemoryInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minMemoryPerNodeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minMemoryPerNodeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableDbNodeStorageInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableDBNodeStorageInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minDbNodeStoragePerNodeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minDBNodeStoragePerNodeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableDataStorageInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableDataStorageInTbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minDataStorageInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minDataStorageInTbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("minimumNodeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumNodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maximumNodeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumNodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableCoreCountPerNode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableCoreCountPerNode = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeModel = new OracleDatabaseComputeModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("areServerTypesSupported"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    areServerTypesSupported = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("shapeAttributes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    shapeAttributes = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new OracleDBSystemShapeProperties(
                shapeFamily,
                shapeName,
                availableCoreCount,
                minimumCoreCount,
                runtimeMinimumCoreCount,
                coreCountIncrement,
                minStorageCount,
                maxStorageCount,
                availableDataStoragePerServerInTbs,
                availableMemoryPerNodeInGbs,
                availableDBNodePerNodeInGbs,
                minCoreCountPerNode,
                availableMemoryInGbs,
                minMemoryPerNodeInGbs,
                availableDBNodeStorageInGbs,
                minDBNodeStoragePerNodeInGbs,
                availableDataStorageInTbs,
                minDataStorageInTbs,
                minimumNodeCount,
                maximumNodeCount,
                availableCoreCountPerNode,
                computeModel,
                areServerTypesSupported,
                displayName,
                shapeAttributes ?? new ChangeTrackingList<string>(),
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<OracleDBSystemShapeProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDBSystemShapeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(OracleDBSystemShapeProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleDBSystemShapeProperties IPersistableModel<OracleDBSystemShapeProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleDBSystemShapeProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleDBSystemShapeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeOracleDBSystemShapeProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(OracleDBSystemShapeProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<OracleDBSystemShapeProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
