// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Open mode type enum.
    /// Serialized Name: OpenModeType
    /// </summary>
    public readonly partial struct OpenModeType : IEquatable<OpenModeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OpenModeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OpenModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadOnlyValue = "ReadOnly";
        private const string ReadWriteValue = "ReadWrite";

        /// <summary>
        /// ReadOnly mode
        /// Serialized Name: OpenModeType.ReadOnly
        /// </summary>
        public static OpenModeType ReadOnly { get; } = new OpenModeType(ReadOnlyValue);
        /// <summary>
        /// ReadWrite mode
        /// Serialized Name: OpenModeType.ReadWrite
        /// </summary>
        public static OpenModeType ReadWrite { get; } = new OpenModeType(ReadWriteValue);
        /// <summary> Determines if two <see cref="OpenModeType"/> values are the same. </summary>
        public static bool operator ==(OpenModeType left, OpenModeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OpenModeType"/> values are not the same. </summary>
        public static bool operator !=(OpenModeType left, OpenModeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OpenModeType"/>. </summary>
        public static implicit operator OpenModeType(string value) => new OpenModeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OpenModeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OpenModeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
