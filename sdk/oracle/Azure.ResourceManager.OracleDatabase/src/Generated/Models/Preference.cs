// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Preference enum
    /// Serialized Name: Preference
    /// </summary>
    public readonly partial struct Preference : IEquatable<Preference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Preference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Preference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoPreferenceValue = "NoPreference";
        private const string CustomPreferenceValue = "CustomPreference";

        /// <summary>
        /// No preference
        /// Serialized Name: Preference.NoPreference
        /// </summary>
        public static Preference NoPreference { get; } = new Preference(NoPreferenceValue);
        /// <summary>
        /// Custom preference
        /// Serialized Name: Preference.CustomPreference
        /// </summary>
        public static Preference CustomPreference { get; } = new Preference(CustomPreferenceValue);
        /// <summary> Determines if two <see cref="Preference"/> values are the same. </summary>
        public static bool operator ==(Preference left, Preference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Preference"/> values are not the same. </summary>
        public static bool operator !=(Preference left, Preference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Preference"/>. </summary>
        public static implicit operator Preference(string value) => new Preference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Preference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Preference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
