// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Consumer group enum. </summary>
    public readonly partial struct ConnectionConsumerGroup : IEquatable<ConnectionConsumerGroup>
    {
        private readonly string _value;
        /// <summary> High group. </summary>
        private const string HighValue = "High";
        /// <summary> Medium group. </summary>
        private const string MediumValue = "Medium";
        /// <summary> Low group. </summary>
        private const string LowValue = "Low";
        /// <summary> TP group. </summary>
        private const string TpValue = "Tp";
        /// <summary> TPurgent group. </summary>
        private const string TpurgentValue = "Tpurgent";

        /// <summary> Initializes a new instance of <see cref="ConnectionConsumerGroup"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectionConsumerGroup(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> High group. </summary>
        public static ConnectionConsumerGroup High { get; } = new ConnectionConsumerGroup(HighValue);

        /// <summary> Medium group. </summary>
        public static ConnectionConsumerGroup Medium { get; } = new ConnectionConsumerGroup(MediumValue);

        /// <summary> Low group. </summary>
        public static ConnectionConsumerGroup Low { get; } = new ConnectionConsumerGroup(LowValue);

        /// <summary> TP group. </summary>
        public static ConnectionConsumerGroup Tp { get; } = new ConnectionConsumerGroup(TpValue);

        /// <summary> TPurgent group. </summary>
        public static ConnectionConsumerGroup Tpurgent { get; } = new ConnectionConsumerGroup(TpurgentValue);

        /// <summary> Determines if two <see cref="ConnectionConsumerGroup"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ConnectionConsumerGroup left, ConnectionConsumerGroup right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ConnectionConsumerGroup"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ConnectionConsumerGroup left, ConnectionConsumerGroup right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ConnectionConsumerGroup"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectionConsumerGroup(string value) => new ConnectionConsumerGroup(value);

        /// <summary> Converts a string to a <see cref="ConnectionConsumerGroup"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ConnectionConsumerGroup?(string value) => value == null ? null : new ConnectionConsumerGroup(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectionConsumerGroup other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ConnectionConsumerGroup other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
