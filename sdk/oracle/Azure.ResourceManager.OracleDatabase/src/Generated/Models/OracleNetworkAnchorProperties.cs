// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Network Anchor properties. </summary>
    public partial class OracleNetworkAnchorProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OracleNetworkAnchorProperties"/>. </summary>
        /// <param name="resourceAnchorId"> Corresponding resource anchor Azure ID. </param>
        /// <param name="subnetId"> Client subnet. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceAnchorId"/> or <paramref name="subnetId"/> is null. </exception>
        public OracleNetworkAnchorProperties(string resourceAnchorId, ResourceIdentifier subnetId)
        {
            Argument.AssertNotNull(resourceAnchorId, nameof(resourceAnchorId));
            Argument.AssertNotNull(subnetId, nameof(subnetId));

            ResourceAnchorId = resourceAnchorId;
            SubnetId = subnetId;
            DnsForwardingRules = new ChangeTrackingList<NetworkAnchorDnsForwardingRule>();
        }

        /// <summary> Initializes a new instance of <see cref="OracleNetworkAnchorProperties"/>. </summary>
        /// <param name="resourceAnchorId"> Corresponding resource anchor Azure ID. </param>
        /// <param name="provisioningState"> NetworkAnchor provisioning state. </param>
        /// <param name="vnetId"> VNET for network connectivity. </param>
        /// <param name="subnetId"> Client subnet. </param>
        /// <param name="cidrBlock"> Delegated Azure subnet cidr block. </param>
        /// <param name="ociVcnId"> Oracle Cloud Infrastructure VCN OCID. </param>
        /// <param name="ociVcnDnsLabel"> OCI DNS label. This is optional if DNS config is provided. </param>
        /// <param name="ociSubnetId"> Oracle Cloud Infrastructure subnet OCID. </param>
        /// <param name="ociBackupCidrBlock"> OCI backup subnet cidr block. </param>
        /// <param name="isOracleToAzureDnsZoneSyncEnabled"> Indicates whether DNS zone sync from OCI to Azure is enabled. </param>
        /// <param name="isOracleDnsListeningEndpointEnabled"> Indicates whether the Oracle DNS listening endpoint is enabled. </param>
        /// <param name="isOracleDnsForwardingEndpointEnabled"> Indicates whether the Oracle DNS forwarding endpoint is enabled. </param>
        /// <param name="dnsForwardingRules"> DNS forwarding rules. </param>
        /// <param name="dnsListeningEndpointAllowedCidrs"> Comma-separated list of CIDRs that are allowed to send requests to the DNS listening endpoint. </param>
        /// <param name="dnsListeningEndpointIPAddress"> DNS listening endpoint IP address. </param>
        /// <param name="dnsForwardingEndpointIPAddress"> DNS forwarding endpoint IP address. </param>
        /// <param name="dnsForwardingRulesUri"> Deep link to OCI console DNS Forwarding rules page. </param>
        /// <param name="dnsListeningEndpointNsgRulesUri"> Deep link to OCI console DNS Listening endpoint NSG rules. </param>
        /// <param name="dnsForwardingEndpointNsgRulesUri"> Deep link to OCI console DNS Forwarding endpoint NSG rules. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OracleNetworkAnchorProperties(string resourceAnchorId, OracleDatabaseProvisioningState? provisioningState, ResourceIdentifier vnetId, ResourceIdentifier subnetId, string cidrBlock, string ociVcnId, string ociVcnDnsLabel, string ociSubnetId, string ociBackupCidrBlock, bool? isOracleToAzureDnsZoneSyncEnabled, bool? isOracleDnsListeningEndpointEnabled, bool? isOracleDnsForwardingEndpointEnabled, IList<NetworkAnchorDnsForwardingRule> dnsForwardingRules, string dnsListeningEndpointAllowedCidrs, string dnsListeningEndpointIPAddress, string dnsForwardingEndpointIPAddress, Uri dnsForwardingRulesUri, Uri dnsListeningEndpointNsgRulesUri, Uri dnsForwardingEndpointNsgRulesUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ResourceAnchorId = resourceAnchorId;
            ProvisioningState = provisioningState;
            VnetId = vnetId;
            SubnetId = subnetId;
            CidrBlock = cidrBlock;
            OciVcnId = ociVcnId;
            OciVcnDnsLabel = ociVcnDnsLabel;
            OciSubnetId = ociSubnetId;
            OciBackupCidrBlock = ociBackupCidrBlock;
            IsOracleToAzureDnsZoneSyncEnabled = isOracleToAzureDnsZoneSyncEnabled;
            IsOracleDnsListeningEndpointEnabled = isOracleDnsListeningEndpointEnabled;
            IsOracleDnsForwardingEndpointEnabled = isOracleDnsForwardingEndpointEnabled;
            DnsForwardingRules = dnsForwardingRules;
            DnsListeningEndpointAllowedCidrs = dnsListeningEndpointAllowedCidrs;
            DnsListeningEndpointIPAddress = dnsListeningEndpointIPAddress;
            DnsForwardingEndpointIPAddress = dnsForwardingEndpointIPAddress;
            DnsForwardingRulesUri = dnsForwardingRulesUri;
            DnsListeningEndpointNsgRulesUri = dnsListeningEndpointNsgRulesUri;
            DnsForwardingEndpointNsgRulesUri = dnsForwardingEndpointNsgRulesUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OracleNetworkAnchorProperties"/> for deserialization. </summary>
        internal OracleNetworkAnchorProperties()
        {
        }

        /// <summary> Corresponding resource anchor Azure ID. </summary>
        public string ResourceAnchorId { get; set; }
        /// <summary> NetworkAnchor provisioning state. </summary>
        public OracleDatabaseProvisioningState? ProvisioningState { get; }
        /// <summary> VNET for network connectivity. </summary>
        public ResourceIdentifier VnetId { get; }
        /// <summary> Client subnet. </summary>
        public ResourceIdentifier SubnetId { get; set; }
        /// <summary> Delegated Azure subnet cidr block. </summary>
        public string CidrBlock { get; }
        /// <summary> Oracle Cloud Infrastructure VCN OCID. </summary>
        public string OciVcnId { get; }
        /// <summary> OCI DNS label. This is optional if DNS config is provided. </summary>
        public string OciVcnDnsLabel { get; set; }
        /// <summary> Oracle Cloud Infrastructure subnet OCID. </summary>
        public string OciSubnetId { get; }
        /// <summary> OCI backup subnet cidr block. </summary>
        public string OciBackupCidrBlock { get; set; }
        /// <summary> Indicates whether DNS zone sync from OCI to Azure is enabled. </summary>
        public bool? IsOracleToAzureDnsZoneSyncEnabled { get; set; }
        /// <summary> Indicates whether the Oracle DNS listening endpoint is enabled. </summary>
        public bool? IsOracleDnsListeningEndpointEnabled { get; set; }
        /// <summary> Indicates whether the Oracle DNS forwarding endpoint is enabled. </summary>
        public bool? IsOracleDnsForwardingEndpointEnabled { get; set; }
        /// <summary> DNS forwarding rules. </summary>
        public IList<NetworkAnchorDnsForwardingRule> DnsForwardingRules { get; }
        /// <summary> Comma-separated list of CIDRs that are allowed to send requests to the DNS listening endpoint. </summary>
        public string DnsListeningEndpointAllowedCidrs { get; set; }
        /// <summary> DNS listening endpoint IP address. </summary>
        public string DnsListeningEndpointIPAddress { get; }
        /// <summary> DNS forwarding endpoint IP address. </summary>
        public string DnsForwardingEndpointIPAddress { get; }
        /// <summary> Deep link to OCI console DNS Forwarding rules page. </summary>
        public Uri DnsForwardingRulesUri { get; }
        /// <summary> Deep link to OCI console DNS Listening endpoint NSG rules. </summary>
        public Uri DnsListeningEndpointNsgRulesUri { get; }
        /// <summary> Deep link to OCI console DNS Forwarding endpoint NSG rules. </summary>
        public Uri DnsForwardingEndpointNsgRulesUri { get; }
    }
}
