// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> AutonomousDatabaseLifecycleState enum. </summary>
    public readonly partial struct AutonomousDatabaseLifecycleState : IEquatable<AutonomousDatabaseLifecycleState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseLifecycleState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AutonomousDatabaseLifecycleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProvisioningValue = "Provisioning";
        private const string AvailableValue = "Available";
        private const string StoppingValue = "Stopping";
        private const string StoppedValue = "Stopped";
        private const string StartingValue = "Starting";
        private const string TerminatingValue = "Terminating";
        private const string TerminatedValue = "Terminated";
        private const string UnavailableValue = "Unavailable";
        private const string RestoreInProgressValue = "RestoreInProgress";
        private const string RestoreFailedValue = "RestoreFailed";
        private const string BackupInProgressValue = "BackupInProgress";
        private const string ScaleInProgressValue = "ScaleInProgress";
        private const string AvailableNeedsAttentionValue = "AvailableNeedsAttention";
        private const string UpdatingValue = "Updating";
        private const string MaintenanceInProgressValue = "MaintenanceInProgress";
        private const string RestartingValue = "Restarting";
        private const string RecreatingValue = "Recreating";
        private const string RoleChangeInProgressValue = "RoleChangeInProgress";
        private const string UpgradingValue = "Upgrading";
        private const string InaccessibleValue = "Inaccessible";
        private const string StandbyValue = "Standby";

        /// <summary> PROVISIONING value. </summary>
        public static AutonomousDatabaseLifecycleState Provisioning { get; } = new AutonomousDatabaseLifecycleState(ProvisioningValue);
        /// <summary> AVAILABLE value. </summary>
        public static AutonomousDatabaseLifecycleState Available { get; } = new AutonomousDatabaseLifecycleState(AvailableValue);
        /// <summary> STOPPING value. </summary>
        public static AutonomousDatabaseLifecycleState Stopping { get; } = new AutonomousDatabaseLifecycleState(StoppingValue);
        /// <summary> STOPPED value. </summary>
        public static AutonomousDatabaseLifecycleState Stopped { get; } = new AutonomousDatabaseLifecycleState(StoppedValue);
        /// <summary> STARTING value. </summary>
        public static AutonomousDatabaseLifecycleState Starting { get; } = new AutonomousDatabaseLifecycleState(StartingValue);
        /// <summary> TERMINATING value. </summary>
        public static AutonomousDatabaseLifecycleState Terminating { get; } = new AutonomousDatabaseLifecycleState(TerminatingValue);
        /// <summary> TERMINATED value. </summary>
        public static AutonomousDatabaseLifecycleState Terminated { get; } = new AutonomousDatabaseLifecycleState(TerminatedValue);
        /// <summary> UNAVAILABLE value. </summary>
        public static AutonomousDatabaseLifecycleState Unavailable { get; } = new AutonomousDatabaseLifecycleState(UnavailableValue);
        /// <summary> RESTORE_IN_PROGRESS value. </summary>
        public static AutonomousDatabaseLifecycleState RestoreInProgress { get; } = new AutonomousDatabaseLifecycleState(RestoreInProgressValue);
        /// <summary> RESTORE_FAILED value. </summary>
        public static AutonomousDatabaseLifecycleState RestoreFailed { get; } = new AutonomousDatabaseLifecycleState(RestoreFailedValue);
        /// <summary> BACKUP_IN_PROGRESS value. </summary>
        public static AutonomousDatabaseLifecycleState BackupInProgress { get; } = new AutonomousDatabaseLifecycleState(BackupInProgressValue);
        /// <summary> SCALE_IN_PROGRESS value. </summary>
        public static AutonomousDatabaseLifecycleState ScaleInProgress { get; } = new AutonomousDatabaseLifecycleState(ScaleInProgressValue);
        /// <summary> AVAILABLE_NEEDS_ATTENTION value. </summary>
        public static AutonomousDatabaseLifecycleState AvailableNeedsAttention { get; } = new AutonomousDatabaseLifecycleState(AvailableNeedsAttentionValue);
        /// <summary> UPDATING value. </summary>
        public static AutonomousDatabaseLifecycleState Updating { get; } = new AutonomousDatabaseLifecycleState(UpdatingValue);
        /// <summary> MAINTENANCE_IN_PROGRESS value. </summary>
        public static AutonomousDatabaseLifecycleState MaintenanceInProgress { get; } = new AutonomousDatabaseLifecycleState(MaintenanceInProgressValue);
        /// <summary> RESTARTING value. </summary>
        public static AutonomousDatabaseLifecycleState Restarting { get; } = new AutonomousDatabaseLifecycleState(RestartingValue);
        /// <summary> RECREATING value. </summary>
        public static AutonomousDatabaseLifecycleState Recreating { get; } = new AutonomousDatabaseLifecycleState(RecreatingValue);
        /// <summary> ROLE_CHANGE_IN_PROGRESS value. </summary>
        public static AutonomousDatabaseLifecycleState RoleChangeInProgress { get; } = new AutonomousDatabaseLifecycleState(RoleChangeInProgressValue);
        /// <summary> UPGRADING value. </summary>
        public static AutonomousDatabaseLifecycleState Upgrading { get; } = new AutonomousDatabaseLifecycleState(UpgradingValue);
        /// <summary> INACCESSIBLE value. </summary>
        public static AutonomousDatabaseLifecycleState Inaccessible { get; } = new AutonomousDatabaseLifecycleState(InaccessibleValue);
        /// <summary> STANDBY value. </summary>
        public static AutonomousDatabaseLifecycleState Standby { get; } = new AutonomousDatabaseLifecycleState(StandbyValue);
        /// <summary> Determines if two <see cref="AutonomousDatabaseLifecycleState"/> values are the same. </summary>
        public static bool operator ==(AutonomousDatabaseLifecycleState left, AutonomousDatabaseLifecycleState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AutonomousDatabaseLifecycleState"/> values are not the same. </summary>
        public static bool operator !=(AutonomousDatabaseLifecycleState left, AutonomousDatabaseLifecycleState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AutonomousDatabaseLifecycleState"/>. </summary>
        public static implicit operator AutonomousDatabaseLifecycleState(string value) => new AutonomousDatabaseLifecycleState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AutonomousDatabaseLifecycleState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AutonomousDatabaseLifecycleState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
