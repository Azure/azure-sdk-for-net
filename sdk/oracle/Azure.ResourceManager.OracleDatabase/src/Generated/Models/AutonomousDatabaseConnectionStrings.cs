// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Connection strings to connect to an Oracle Autonomous Database. </summary>
    public partial class AutonomousDatabaseConnectionStrings
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseConnectionStrings"/>. </summary>
        internal AutonomousDatabaseConnectionStrings()
        {
            Profiles = new ChangeTrackingList<AutonomousDatabaseConnectionStringProfile>();
        }

        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseConnectionStrings"/>. </summary>
        /// <param name="allConnectionStrings"> Returns all connection strings that can be used to connect to the Autonomous Database. </param>
        /// <param name="dedicated"> The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements. </param>
        /// <param name="high"> The High database service provides the highest level of resources to each SQL statement resulting in the highest performance, but supports the fewest number of concurrent SQL statements. </param>
        /// <param name="low"> The Low database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements. </param>
        /// <param name="medium"> The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level of performance, but supports more concurrent SQL statements. </param>
        /// <param name="profiles"> A list of connection string profiles to allow clients to group, filter and select connection string values based on structured metadata. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal AutonomousDatabaseConnectionStrings(AutonomousDatabaseConnectionStringType allConnectionStrings, string dedicated, string high, string low, string medium, IList<AutonomousDatabaseConnectionStringProfile> profiles, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AllConnectionStrings = allConnectionStrings;
            Dedicated = dedicated;
            High = high;
            Low = low;
            Medium = medium;
            Profiles = profiles;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Returns all connection strings that can be used to connect to the Autonomous Database. </summary>
        public AutonomousDatabaseConnectionStringType AllConnectionStrings { get; }

        /// <summary> The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements. </summary>
        public string Dedicated { get; }

        /// <summary> The High database service provides the highest level of resources to each SQL statement resulting in the highest performance, but supports the fewest number of concurrent SQL statements. </summary>
        public string High { get; }

        /// <summary> The Low database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements. </summary>
        public string Low { get; }

        /// <summary> The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level of performance, but supports more concurrent SQL statements. </summary>
        public string Medium { get; }

        /// <summary> A list of connection string profiles to allow clients to group, filter and select connection string values based on structured metadata. </summary>
        public IList<AutonomousDatabaseConnectionStringProfile> Profiles { get; }
    }
}
