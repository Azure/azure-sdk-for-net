// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DayOfWeekName enum
    /// Serialized Name: DayOfWeekName
    /// </summary>
    public readonly partial struct DayOfWeekName : IEquatable<DayOfWeekName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DayOfWeekName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DayOfWeekName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MondayValue = "Monday";
        private const string TuesdayValue = "Tuesday";
        private const string WednesdayValue = "Wednesday";
        private const string ThursdayValue = "Thursday";
        private const string FridayValue = "Friday";
        private const string SaturdayValue = "Saturday";
        private const string SundayValue = "Sunday";

        /// <summary>
        /// Monday value
        /// Serialized Name: DayOfWeekName.Monday
        /// </summary>
        public static DayOfWeekName Monday { get; } = new DayOfWeekName(MondayValue);
        /// <summary>
        /// Tuesday value
        /// Serialized Name: DayOfWeekName.Tuesday
        /// </summary>
        public static DayOfWeekName Tuesday { get; } = new DayOfWeekName(TuesdayValue);
        /// <summary>
        /// Wednesday value
        /// Serialized Name: DayOfWeekName.Wednesday
        /// </summary>
        public static DayOfWeekName Wednesday { get; } = new DayOfWeekName(WednesdayValue);
        /// <summary>
        /// Thursday value
        /// Serialized Name: DayOfWeekName.Thursday
        /// </summary>
        public static DayOfWeekName Thursday { get; } = new DayOfWeekName(ThursdayValue);
        /// <summary>
        /// Friday value
        /// Serialized Name: DayOfWeekName.Friday
        /// </summary>
        public static DayOfWeekName Friday { get; } = new DayOfWeekName(FridayValue);
        /// <summary>
        /// Saturday value
        /// Serialized Name: DayOfWeekName.Saturday
        /// </summary>
        public static DayOfWeekName Saturday { get; } = new DayOfWeekName(SaturdayValue);
        /// <summary>
        /// Sunday value
        /// Serialized Name: DayOfWeekName.Sunday
        /// </summary>
        public static DayOfWeekName Sunday { get; } = new DayOfWeekName(SundayValue);
        /// <summary> Determines if two <see cref="DayOfWeekName"/> values are the same. </summary>
        public static bool operator ==(DayOfWeekName left, DayOfWeekName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DayOfWeekName"/> values are not the same. </summary>
        public static bool operator !=(DayOfWeekName left, DayOfWeekName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DayOfWeekName"/>. </summary>
        public static implicit operator DayOfWeekName(string value) => new DayOfWeekName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DayOfWeekName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DayOfWeekName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
