// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DbNode action enum
    /// Serialized Name: DbNodeActionEnum
    /// </summary>
    public readonly partial struct DBNodeActionEnum : IEquatable<DBNodeActionEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DBNodeActionEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DBNodeActionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "Start";
        private const string StopValue = "Stop";
        private const string SoftResetValue = "SoftReset";
        private const string ResetValue = "Reset";

        /// <summary>
        /// Start DbNode
        /// Serialized Name: DbNodeActionEnum.Start
        /// </summary>
        public static DBNodeActionEnum Start { get; } = new DBNodeActionEnum(StartValue);
        /// <summary>
        /// Stop DbNode
        /// Serialized Name: DbNodeActionEnum.Stop
        /// </summary>
        public static DBNodeActionEnum Stop { get; } = new DBNodeActionEnum(StopValue);
        /// <summary>
        /// Soft reset DbNode
        /// Serialized Name: DbNodeActionEnum.SoftReset
        /// </summary>
        public static DBNodeActionEnum SoftReset { get; } = new DBNodeActionEnum(SoftResetValue);
        /// <summary>
        /// Reset DbNode
        /// Serialized Name: DbNodeActionEnum.Reset
        /// </summary>
        public static DBNodeActionEnum Reset { get; } = new DBNodeActionEnum(ResetValue);
        /// <summary> Determines if two <see cref="DBNodeActionEnum"/> values are the same. </summary>
        public static bool operator ==(DBNodeActionEnum left, DBNodeActionEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DBNodeActionEnum"/> values are not the same. </summary>
        public static bool operator !=(DBNodeActionEnum left, DBNodeActionEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DBNodeActionEnum"/>. </summary>
        public static implicit operator DBNodeActionEnum(string value) => new DBNodeActionEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DBNodeActionEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DBNodeActionEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
