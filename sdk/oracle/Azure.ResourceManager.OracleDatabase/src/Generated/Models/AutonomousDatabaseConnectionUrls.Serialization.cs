// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> The URLs for accessing Oracle Application Express (APEX) and SQL Developer Web with a browser from a Compute instance within your VCN or that has a direct connection to your VCN. </summary>
    public partial class AutonomousDatabaseConnectionUrls : IJsonModel<AutonomousDatabaseConnectionUrls>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AutonomousDatabaseConnectionUrls>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseConnectionUrls>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseConnectionUrls)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(ApexUri))
            {
                writer.WritePropertyName("apexUrl"u8);
                writer.WriteStringValue(ApexUri.AbsoluteUri);
            }
            if (Optional.IsDefined(DatabaseTransformsUri))
            {
                writer.WritePropertyName("databaseTransformsUrl"u8);
                writer.WriteStringValue(DatabaseTransformsUri.AbsoluteUri);
            }
            if (Optional.IsDefined(GraphStudioUri))
            {
                writer.WritePropertyName("graphStudioUrl"u8);
                writer.WriteStringValue(GraphStudioUri.AbsoluteUri);
            }
            if (Optional.IsDefined(MachineLearningNotebookUri))
            {
                writer.WritePropertyName("machineLearningNotebookUrl"u8);
                writer.WriteStringValue(MachineLearningNotebookUri.AbsoluteUri);
            }
            if (Optional.IsDefined(MongoDBUri))
            {
                writer.WritePropertyName("mongoDbUrl"u8);
                writer.WriteStringValue(MongoDBUri.AbsoluteUri);
            }
            if (Optional.IsDefined(OrdsUri))
            {
                writer.WritePropertyName("ordsUrl"u8);
                writer.WriteStringValue(OrdsUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SqlDevWebUri))
            {
                writer.WritePropertyName("sqlDevWebUrl"u8);
                writer.WriteStringValue(SqlDevWebUri.AbsoluteUri);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseConnectionUrls IJsonModel<AutonomousDatabaseConnectionUrls>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseConnectionUrls JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseConnectionUrls>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AutonomousDatabaseConnectionUrls)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAutonomousDatabaseConnectionUrls(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AutonomousDatabaseConnectionUrls DeserializeAutonomousDatabaseConnectionUrls(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri apexUri = default;
            Uri databaseTransformsUri = default;
            Uri graphStudioUri = default;
            Uri machineLearningNotebookUri = default;
            Uri mongoDBUri = default;
            Uri ordsUri = default;
            Uri sqlDevWebUri = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("apexUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    apexUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("databaseTransformsUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseTransformsUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("graphStudioUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    graphStudioUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("machineLearningNotebookUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    machineLearningNotebookUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("mongoDbUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mongoDBUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("ordsUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ordsUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sqlDevWebUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sqlDevWebUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AutonomousDatabaseConnectionUrls(
                apexUri,
                databaseTransformsUri,
                graphStudioUri,
                machineLearningNotebookUri,
                mongoDBUri,
                ordsUri,
                sqlDevWebUri,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AutonomousDatabaseConnectionUrls>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseConnectionUrls>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseConnectionUrls)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AutonomousDatabaseConnectionUrls IPersistableModel<AutonomousDatabaseConnectionUrls>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AutonomousDatabaseConnectionUrls PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AutonomousDatabaseConnectionUrls>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAutonomousDatabaseConnectionUrls(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AutonomousDatabaseConnectionUrls)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AutonomousDatabaseConnectionUrls>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
