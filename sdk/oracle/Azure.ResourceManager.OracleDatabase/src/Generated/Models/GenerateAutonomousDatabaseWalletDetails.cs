// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Autonomous Database Generate Wallet resource model. </summary>
    public partial class GenerateAutonomousDatabaseWalletDetails
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="GenerateAutonomousDatabaseWalletDetails"/>. </summary>
        /// <param name="password"> The password to encrypt the keys inside the wallet. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="password"/> is null. </exception>
        public GenerateAutonomousDatabaseWalletDetails(string password)
        {
            Argument.AssertNotNull(password, nameof(password));

            Password = password;
        }

        /// <summary> Initializes a new instance of <see cref="GenerateAutonomousDatabaseWalletDetails"/>. </summary>
        /// <param name="generateType"> The type of wallet to generate. </param>
        /// <param name="isRegional"> True when requesting regional connection strings in PDB connect info, applicable to cross-region DG only. </param>
        /// <param name="password"> The password to encrypt the keys inside the wallet. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal GenerateAutonomousDatabaseWalletDetails(WalletGenerateType? generateType, bool? isRegional, string password, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            GenerateType = generateType;
            IsRegional = isRegional;
            Password = password;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The type of wallet to generate. </summary>
        public WalletGenerateType? GenerateType { get; set; }

        /// <summary> True when requesting regional connection strings in PDB connect info, applicable to cross-region DG only. </summary>
        public bool? IsRegional { get; set; }

        /// <summary> The password to encrypt the keys inside the wallet. </summary>
        public string Password { get; }
    }
}
