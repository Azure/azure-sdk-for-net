// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DbNode action enum
    /// Serialized Name: DbNodeActionEnum
    /// </summary>
    public readonly partial struct DbNodeActionEnum : IEquatable<DbNodeActionEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DbNodeActionEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbNodeActionEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "Start";
        private const string StopValue = "Stop";
        private const string SoftResetValue = "SoftReset";
        private const string ResetValue = "Reset";

        /// <summary>
        /// Start DbNode
        /// Serialized Name: DbNodeActionEnum.Start
        /// </summary>
        public static DbNodeActionEnum Start { get; } = new DbNodeActionEnum(StartValue);
        /// <summary>
        /// Stop DbNode
        /// Serialized Name: DbNodeActionEnum.Stop
        /// </summary>
        public static DbNodeActionEnum Stop { get; } = new DbNodeActionEnum(StopValue);
        /// <summary>
        /// Soft reset DbNode
        /// Serialized Name: DbNodeActionEnum.SoftReset
        /// </summary>
        public static DbNodeActionEnum SoftReset { get; } = new DbNodeActionEnum(SoftResetValue);
        /// <summary>
        /// Reset DbNode
        /// Serialized Name: DbNodeActionEnum.Reset
        /// </summary>
        public static DbNodeActionEnum Reset { get; } = new DbNodeActionEnum(ResetValue);
        /// <summary> Determines if two <see cref="DbNodeActionEnum"/> values are the same. </summary>
        public static bool operator ==(DbNodeActionEnum left, DbNodeActionEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DbNodeActionEnum"/> values are not the same. </summary>
        public static bool operator !=(DbNodeActionEnum left, DbNodeActionEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DbNodeActionEnum"/>. </summary>
        public static implicit operator DbNodeActionEnum(string value) => new DbNodeActionEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbNodeActionEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DbNodeActionEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
