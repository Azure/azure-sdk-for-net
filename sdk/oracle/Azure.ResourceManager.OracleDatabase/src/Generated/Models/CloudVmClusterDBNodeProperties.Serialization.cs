// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> The properties of DbNodeResource. </summary>
    public partial class CloudVmClusterDBNodeProperties : IJsonModel<CloudVmClusterDBNodeProperties>
    {
        /// <summary> Initializes a new instance of <see cref="CloudVmClusterDBNodeProperties"/> for deserialization. </summary>
        internal CloudVmClusterDBNodeProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<CloudVmClusterDBNodeProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterDBNodeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterDBNodeProperties)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("ocid"u8);
            writer.WriteStringValue(DBNodeOcid);
            if (Optional.IsDefined(AdditionalDetails))
            {
                writer.WritePropertyName("additionalDetails"u8);
                writer.WriteStringValue(AdditionalDetails);
            }
            if (Optional.IsDefined(BackupIPOcid))
            {
                writer.WritePropertyName("backupIpId"u8);
                writer.WriteStringValue(BackupIPOcid);
            }
            if (Optional.IsDefined(BackupVnic2Ocid))
            {
                writer.WritePropertyName("backupVnic2Id"u8);
                writer.WriteStringValue(BackupVnic2Ocid);
            }
            if (Optional.IsDefined(BackupVnicOcid))
            {
                writer.WritePropertyName("backupVnicId"u8);
                writer.WriteStringValue(BackupVnicOcid);
            }
            if (Optional.IsDefined(CpuCoreCount))
            {
                writer.WritePropertyName("cpuCoreCount"u8);
                writer.WriteNumberValue(CpuCoreCount.Value);
            }
            if (Optional.IsDefined(DBNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("dbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(DBNodeStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(DBServerOcid))
            {
                writer.WritePropertyName("dbServerId"u8);
                writer.WriteStringValue(DBServerOcid);
            }
            writer.WritePropertyName("dbSystemId"u8);
            writer.WriteStringValue(DBSystemOcid);
            if (Optional.IsDefined(FaultDomain))
            {
                writer.WritePropertyName("faultDomain"u8);
                writer.WriteStringValue(FaultDomain);
            }
            if (Optional.IsDefined(HostIPOcid))
            {
                writer.WritePropertyName("hostIpId"u8);
                writer.WriteStringValue(HostIPOcid);
            }
            if (Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname"u8);
                writer.WriteStringValue(Hostname);
            }
            writer.WritePropertyName("lifecycleState"u8);
            writer.WriteStringValue(DBNodeLifecycleState.ToString());
            if (Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (Optional.IsDefined(MaintenanceType))
            {
                writer.WritePropertyName("maintenanceType"u8);
                writer.WriteStringValue(MaintenanceType.Value.ToString());
            }
            if (Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (Optional.IsDefined(SoftwareStorageSizeInGb))
            {
                writer.WritePropertyName("softwareStorageSizeInGb"u8);
                writer.WriteNumberValue(SoftwareStorageSizeInGb.Value);
            }
            writer.WritePropertyName("timeCreated"u8);
            writer.WriteStringValue(CreatedOn, "O");
            if (Optional.IsDefined(TimeMaintenanceWindowEnd))
            {
                writer.WritePropertyName("timeMaintenanceWindowEnd"u8);
                writer.WriteStringValue(TimeMaintenanceWindowEnd.Value, "O");
            }
            if (Optional.IsDefined(TimeMaintenanceWindowStart))
            {
                writer.WritePropertyName("timeMaintenanceWindowStart"u8);
                writer.WriteStringValue(TimeMaintenanceWindowStart.Value, "O");
            }
            if (Optional.IsDefined(Vnic2Ocid))
            {
                writer.WritePropertyName("vnic2Id"u8);
                writer.WriteStringValue(Vnic2Ocid);
            }
            writer.WritePropertyName("vnicId"u8);
            writer.WriteStringValue(VnicOcid);
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudVmClusterDBNodeProperties IJsonModel<CloudVmClusterDBNodeProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudVmClusterDBNodeProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterDBNodeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterDBNodeProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCloudVmClusterDBNodeProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static CloudVmClusterDBNodeProperties DeserializeCloudVmClusterDBNodeProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string dbNodeOcid = default;
            string additionalDetails = default;
            string backupIPOcid = default;
            string backupVnic2Ocid = default;
            string backupVnicOcid = default;
            int? cpuCoreCount = default;
            int? dbNodeStorageSizeInGbs = default;
            string dbServerOcid = default;
            string dbSystemOcid = default;
            string faultDomain = default;
            string hostIPOcid = default;
            string hostname = default;
            DBNodeProvisioningState dbNodeLifecycleState = default;
            string lifecycleDetails = default;
            DBNodeMaintenanceType? maintenanceType = default;
            int? memorySizeInGbs = default;
            int? softwareStorageSizeInGb = default;
            DateTimeOffset createdOn = default;
            DateTimeOffset? timeMaintenanceWindowEnd = default;
            DateTimeOffset? timeMaintenanceWindowStart = default;
            string vnic2Ocid = default;
            string vnicOcid = default;
            OracleDatabaseResourceProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("ocid"u8))
                {
                    dbNodeOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("additionalDetails"u8))
                {
                    additionalDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupIpId"u8))
                {
                    backupIPOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupVnic2Id"u8))
                {
                    backupVnic2Ocid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupVnicId"u8))
                {
                    backupVnicOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cpuCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dbNodeStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbNodeStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dbServerId"u8))
                {
                    dbServerOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dbSystemId"u8))
                {
                    dbSystemOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("faultDomain"u8))
                {
                    faultDomain = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostIpId"u8))
                {
                    hostIPOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostname"u8))
                {
                    hostname = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    dbNodeLifecycleState = new DBNodeProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("maintenanceType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceType = new DBNodeMaintenanceType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("memorySizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("softwareStorageSizeInGb"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    softwareStorageSizeInGb = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("timeCreated"u8))
                {
                    createdOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeMaintenanceWindowEnd"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeMaintenanceWindowEnd = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("timeMaintenanceWindowStart"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeMaintenanceWindowStart = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("vnic2Id"u8))
                {
                    vnic2Ocid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("vnicId"u8))
                {
                    vnicOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseResourceProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new CloudVmClusterDBNodeProperties(
                dbNodeOcid,
                additionalDetails,
                backupIPOcid,
                backupVnic2Ocid,
                backupVnicOcid,
                cpuCoreCount,
                dbNodeStorageSizeInGbs,
                dbServerOcid,
                dbSystemOcid,
                faultDomain,
                hostIPOcid,
                hostname,
                dbNodeLifecycleState,
                lifecycleDetails,
                maintenanceType,
                memorySizeInGbs,
                softwareStorageSizeInGb,
                createdOn,
                timeMaintenanceWindowEnd,
                timeMaintenanceWindowStart,
                vnic2Ocid,
                vnicOcid,
                provisioningState,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<CloudVmClusterDBNodeProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterDBNodeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterDBNodeProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudVmClusterDBNodeProperties IPersistableModel<CloudVmClusterDBNodeProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudVmClusterDBNodeProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterDBNodeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeCloudVmClusterDBNodeProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterDBNodeProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<CloudVmClusterDBNodeProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
