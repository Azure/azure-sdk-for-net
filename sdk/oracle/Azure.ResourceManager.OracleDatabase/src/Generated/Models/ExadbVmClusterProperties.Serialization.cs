// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> ExadbVmCluster resource model. </summary>
    public partial class ExadbVmClusterProperties : IJsonModel<ExadbVmClusterProperties>
    {
        /// <summary> Initializes a new instance of <see cref="ExadbVmClusterProperties"/> for deserialization. </summary>
        internal ExadbVmClusterProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ExadbVmClusterProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ExadbVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExadbVmClusterProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (Optional.IsDefined(ClusterName))
            {
                writer.WritePropertyName("clusterName"u8);
                writer.WriteStringValue(ClusterName);
            }
            if (Optional.IsDefined(BackupSubnetCidr))
            {
                writer.WritePropertyName("backupSubnetCidr"u8);
                writer.WriteStringValue(BackupSubnetCidr);
            }
            if (options.Format != "W" && Optional.IsDefined(NsgUri))
            {
                writer.WritePropertyName("nsgUrl"u8);
                writer.WriteStringValue(NsgUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            writer.WritePropertyName("vnetId"u8);
            writer.WriteStringValue(VnetId);
            writer.WritePropertyName("subnetId"u8);
            writer.WriteStringValue(SubnetId);
            if (Optional.IsDefined(DataCollectionOptions))
            {
                writer.WritePropertyName("dataCollectionOptions"u8);
                writer.WriteObjectValue(DataCollectionOptions, options);
            }
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            writer.WritePropertyName("enabledEcpuCount"u8);
            writer.WriteNumberValue(EnabledEcpuCount);
            writer.WritePropertyName("exascaleDbStorageVaultId"u8);
            writer.WriteStringValue(ExascaleDBStorageVaultId);
            if (Optional.IsDefined(GridImageOcid))
            {
                writer.WritePropertyName("gridImageOcid"u8);
                writer.WriteStringValue(GridImageOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(GridImageType))
            {
                writer.WritePropertyName("gridImageType"u8);
                writer.WriteStringValue(GridImageType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(GiVersion))
            {
                writer.WritePropertyName("giVersion"u8);
                writer.WriteStringValue(GiVersion);
            }
            writer.WritePropertyName("hostname"u8);
            writer.WriteStringValue(Hostname);
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            writer.WritePropertyName("nodeCount"u8);
            writer.WriteNumberValue(NodeCount);
            if (Optional.IsCollectionDefined(NsgCidrs))
            {
                writer.WritePropertyName("nsgCidrs"u8);
                writer.WriteStartArray();
                foreach (CloudVmClusterNsgCidr item in NsgCidrs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ZoneOcid))
            {
                writer.WritePropertyName("zoneOcid"u8);
                writer.WriteStringValue(ZoneOcid);
            }
            if (Optional.IsDefined(PrivateZoneOcid))
            {
                writer.WritePropertyName("privateZoneOcid"u8);
                writer.WriteStringValue(PrivateZoneOcid);
            }
            if (Optional.IsDefined(ScanListenerPortTcp))
            {
                writer.WritePropertyName("scanListenerPortTcp"u8);
                writer.WriteNumberValue(ScanListenerPortTcp.Value);
            }
            if (Optional.IsDefined(ScanListenerPortTcpSsl))
            {
                writer.WritePropertyName("scanListenerPortTcpSsl"u8);
                writer.WriteNumberValue(ScanListenerPortTcpSsl.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ListenerPort))
            {
                writer.WritePropertyName("listenerPort"u8);
                writer.WriteNumberValue(ListenerPort.Value);
            }
            writer.WritePropertyName("shape"u8);
            writer.WriteStringValue(Shape);
            writer.WritePropertyName("sshPublicKeys"u8);
            writer.WriteStartArray();
            foreach (string item in SshPublicKeys)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(SystemVersion))
            {
                writer.WritePropertyName("systemVersion"u8);
                writer.WriteStringValue(SystemVersion);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            writer.WritePropertyName("totalEcpuCount"u8);
            writer.WriteNumberValue(TotalEcpuCount);
            writer.WritePropertyName("vmFileSystemStorage"u8);
            writer.WriteObjectValue(VmFileSystemStorage, options);
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsName))
            {
                writer.WritePropertyName("scanDnsName"u8);
                writer.WriteStringValue(ScanDnsName);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ScanIpIds))
            {
                writer.WritePropertyName("scanIpIds"u8);
                writer.WriteStartArray();
                foreach (string item in ScanIpIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsRecordId))
            {
                writer.WritePropertyName("scanDnsRecordId"u8);
                writer.WriteStringValue(ScanDnsRecordId);
            }
            if (options.Format != "W" && Optional.IsDefined(SnapshotFileSystemStorage))
            {
                writer.WritePropertyName("snapshotFileSystemStorage"u8);
                writer.WriteObjectValue(SnapshotFileSystemStorage, options);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalFileSystemStorage))
            {
                writer.WritePropertyName("totalFileSystemStorage"u8);
                writer.WriteObjectValue(TotalFileSystemStorage, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VipIds))
            {
                writer.WritePropertyName("vipIds"u8);
                writer.WriteStartArray();
                foreach (string item in VipIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(IormConfigCache))
            {
                writer.WritePropertyName("iormConfigCache"u8);
                writer.WriteObjectValue(IormConfigCache, options);
            }
            if (options.Format != "W" && Optional.IsDefined(BackupSubnetOcid))
            {
                writer.WritePropertyName("backupSubnetOcid"u8);
                writer.WriteStringValue(BackupSubnetOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(SubnetOcid))
            {
                writer.WritePropertyName("subnetOcid"u8);
                writer.WriteStringValue(SubnetOcid);
            }
            if (Optional.IsDefined(ShapeAttribute))
            {
                writer.WritePropertyName("shapeAttribute"u8);
                writer.WriteStringValue(ShapeAttribute.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ExadbVmClusterProperties IJsonModel<ExadbVmClusterProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ExadbVmClusterProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ExadbVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExadbVmClusterProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExadbVmClusterProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ExadbVmClusterProperties DeserializeExadbVmClusterProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string ocid = default;
            string clusterName = default;
            string backupSubnetCidr = default;
            Uri nsgUri = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            ExadbVmClusterLifecycleState? lifecycleState = default;
            ResourceIdentifier vnetId = default;
            ResourceIdentifier subnetId = default;
            DiagnosticCollectionConfig dataCollectionOptions = default;
            string displayName = default;
            string domain = default;
            int enabledEcpuCount = default;
            ResourceIdentifier exascaleDBStorageVaultId = default;
            string gridImageOcid = default;
            GridImageType? gridImageType = default;
            string giVersion = default;
            string hostname = default;
            OracleLicenseModel? licenseModel = default;
            int? memorySizeInGbs = default;
            int nodeCount = default;
            IList<CloudVmClusterNsgCidr> nsgCidrs = default;
            string zoneOcid = default;
            string privateZoneOcid = default;
            int? scanListenerPortTcp = default;
            int? scanListenerPortTcpSsl = default;
            int? listenerPort = default;
            string shape = default;
            IList<string> sshPublicKeys = default;
            string systemVersion = default;
            string timeZone = default;
            int totalEcpuCount = default;
            ExadbVmClusterStorageDetails vmFileSystemStorage = default;
            string lifecycleDetails = default;
            string scanDnsName = default;
            IReadOnlyList<string> scanIpIds = default;
            string scanDnsRecordId = default;
            ExadbVmClusterStorageDetails snapshotFileSystemStorage = default;
            ExadbVmClusterStorageDetails totalFileSystemStorage = default;
            IReadOnlyList<string> vipIds = default;
            Uri ociUri = default;
            ExadataIormConfig iormConfigCache = default;
            string backupSubnetOcid = default;
            string subnetOcid = default;
            ShapeAttribute? shapeAttribute = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("ocid"u8))
                {
                    ocid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("clusterName"u8))
                {
                    clusterName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("backupSubnetCidr"u8))
                {
                    backupSubnetCidr = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("nsgUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nsgUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new ExadbVmClusterLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vnetId"u8))
                {
                    vnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("subnetId"u8))
                {
                    subnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("dataCollectionOptions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataCollectionOptions = DiagnosticCollectionConfig.DeserializeDiagnosticCollectionConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("domain"u8))
                {
                    domain = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("enabledEcpuCount"u8))
                {
                    enabledEcpuCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("exascaleDbStorageVaultId"u8))
                {
                    exascaleDBStorageVaultId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("gridImageOcid"u8))
                {
                    gridImageOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("gridImageType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gridImageType = new GridImageType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("giVersion"u8))
                {
                    giVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostname"u8))
                {
                    hostname = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("licenseModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModel = new OracleLicenseModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("memorySizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("nodeCount"u8))
                {
                    nodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("nsgCidrs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CloudVmClusterNsgCidr> array = new List<CloudVmClusterNsgCidr>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(CloudVmClusterNsgCidr.DeserializeCloudVmClusterNsgCidr(item, options));
                    }
                    nsgCidrs = array;
                    continue;
                }
                if (prop.NameEquals("zoneOcid"u8))
                {
                    zoneOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("privateZoneOcid"u8))
                {
                    privateZoneOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scanListenerPortTcp"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scanListenerPortTcp = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("scanListenerPortTcpSsl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scanListenerPortTcpSsl = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("listenerPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    listenerPort = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("shape"u8))
                {
                    shape = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sshPublicKeys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    sshPublicKeys = array;
                    continue;
                }
                if (prop.NameEquals("systemVersion"u8))
                {
                    systemVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("timeZone"u8))
                {
                    timeZone = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("totalEcpuCount"u8))
                {
                    totalEcpuCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("vmFileSystemStorage"u8))
                {
                    vmFileSystemStorage = ExadbVmClusterStorageDetails.DeserializeExadbVmClusterStorageDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scanDnsName"u8))
                {
                    scanDnsName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scanIpIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    scanIpIds = array;
                    continue;
                }
                if (prop.NameEquals("scanDnsRecordId"u8))
                {
                    scanDnsRecordId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("snapshotFileSystemStorage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    snapshotFileSystemStorage = ExadbVmClusterStorageDetails.DeserializeExadbVmClusterStorageDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("totalFileSystemStorage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalFileSystemStorage = ExadbVmClusterStorageDetails.DeserializeExadbVmClusterStorageDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("vipIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    vipIds = array;
                    continue;
                }
                if (prop.NameEquals("ociUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("iormConfigCache"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    iormConfigCache = ExadataIormConfig.DeserializeExadataIormConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("backupSubnetOcid"u8))
                {
                    backupSubnetOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("subnetOcid"u8))
                {
                    subnetOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("shapeAttribute"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shapeAttribute = new ShapeAttribute(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ExadbVmClusterProperties(
                ocid,
                clusterName,
                backupSubnetCidr,
                nsgUri,
                provisioningState,
                lifecycleState,
                vnetId,
                subnetId,
                dataCollectionOptions,
                displayName,
                domain,
                enabledEcpuCount,
                exascaleDBStorageVaultId,
                gridImageOcid,
                gridImageType,
                giVersion,
                hostname,
                licenseModel,
                memorySizeInGbs,
                nodeCount,
                nsgCidrs ?? new ChangeTrackingList<CloudVmClusterNsgCidr>(),
                zoneOcid,
                privateZoneOcid,
                scanListenerPortTcp,
                scanListenerPortTcpSsl,
                listenerPort,
                shape,
                sshPublicKeys,
                systemVersion,
                timeZone,
                totalEcpuCount,
                vmFileSystemStorage,
                lifecycleDetails,
                scanDnsName,
                scanIpIds ?? new ChangeTrackingList<string>(),
                scanDnsRecordId,
                snapshotFileSystemStorage,
                totalFileSystemStorage,
                vipIds ?? new ChangeTrackingList<string>(),
                ociUri,
                iormConfigCache,
                backupSubnetOcid,
                subnetOcid,
                shapeAttribute,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ExadbVmClusterProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ExadbVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ExadbVmClusterProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ExadbVmClusterProperties IPersistableModel<ExadbVmClusterProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual ExadbVmClusterProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ExadbVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeExadbVmClusterProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExadbVmClusterProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ExadbVmClusterProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
