// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    public partial class ExascaleDBStorageVaultProperties : IUtf8JsonSerializable, IJsonModel<ExascaleDBStorageVaultProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExascaleDBStorageVaultProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExascaleDBStorageVaultProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExascaleDBStorageVaultProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExascaleDBStorageVaultProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(AdditionalFlashCacheInPercent))
            {
                writer.WritePropertyName("additionalFlashCacheInPercent"u8);
                writer.WriteNumberValue(AdditionalFlashCacheInPercent.Value);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            writer.WritePropertyName("highCapacityDatabaseStorageInput"u8);
            writer.WriteObjectValue(HighCapacityDatabaseStorageInput, options);
            if (options.Format != "W" && Optional.IsDefined(HighCapacityDatabaseStorage))
            {
                writer.WritePropertyName("highCapacityDatabaseStorage"u8);
                writer.WriteObjectValue(HighCapacityDatabaseStorage, options);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(VmClusterCount))
            {
                writer.WritePropertyName("vmClusterCount"u8);
                writer.WriteNumberValue(VmClusterCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Ocid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(Ocid);
            }
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ExascaleDBStorageVaultProperties IJsonModel<ExascaleDBStorageVaultProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExascaleDBStorageVaultProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExascaleDBStorageVaultProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExascaleDBStorageVaultProperties(document.RootElement, options);
        }

        internal static ExascaleDBStorageVaultProperties DeserializeExascaleDBStorageVaultProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? additionalFlashCacheInPercent = default;
            string description = default;
            string displayName = default;
            ExascaleDBStorageInputDetails highCapacityDatabaseStorageInput = default;
            ExascaleDBStorageDetails highCapacityDatabaseStorage = default;
            string timeZone = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            ExascaleDBStorageVaultLifecycleState? lifecycleState = default;
            string lifecycleDetails = default;
            int? vmClusterCount = default;
            string ocid = default;
            Uri ociUrl = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("additionalFlashCacheInPercent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalFlashCacheInPercent = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highCapacityDatabaseStorageInput"u8))
                {
                    highCapacityDatabaseStorageInput = ExascaleDBStorageInputDetails.DeserializeExascaleDBStorageInputDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("highCapacityDatabaseStorage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    highCapacityDatabaseStorage = ExascaleDBStorageDetails.DeserializeExascaleDBStorageDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("timeZone"u8))
                {
                    timeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lifecycleState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new ExascaleDBStorageVaultLifecycleState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vmClusterCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmClusterCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ocid"u8))
                {
                    ocid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ociUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ExascaleDBStorageVaultProperties(
                additionalFlashCacheInPercent,
                description,
                displayName,
                highCapacityDatabaseStorageInput,
                highCapacityDatabaseStorage,
                timeZone,
                provisioningState,
                lifecycleState,
                lifecycleDetails,
                vmClusterCount,
                ocid,
                ociUrl,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ExascaleDBStorageVaultProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExascaleDBStorageVaultProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ExascaleDBStorageVaultProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ExascaleDBStorageVaultProperties IPersistableModel<ExascaleDBStorageVaultProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExascaleDBStorageVaultProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeExascaleDBStorageVaultProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExascaleDBStorageVaultProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExascaleDBStorageVaultProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
