// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// DB Server patching status enum
    /// Serialized Name: DbServerPatchingStatus
    /// </summary>
    public readonly partial struct DbServerPatchingStatus : IEquatable<DbServerPatchingStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DbServerPatchingStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DbServerPatchingStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ScheduledValue = "Scheduled";
        private const string MaintenanceInProgressValue = "MaintenanceInProgress";
        private const string FailedValue = "Failed";
        private const string CompleteValue = "Complete";

        /// <summary>
        /// Patching scheduled
        /// Serialized Name: DbServerPatchingStatus.Scheduled
        /// </summary>
        public static DbServerPatchingStatus Scheduled { get; } = new DbServerPatchingStatus(ScheduledValue);
        /// <summary>
        /// Patching in progress
        /// Serialized Name: DbServerPatchingStatus.MaintenanceInProgress
        /// </summary>
        public static DbServerPatchingStatus MaintenanceInProgress { get; } = new DbServerPatchingStatus(MaintenanceInProgressValue);
        /// <summary>
        /// Patching failed
        /// Serialized Name: DbServerPatchingStatus.Failed
        /// </summary>
        public static DbServerPatchingStatus Failed { get; } = new DbServerPatchingStatus(FailedValue);
        /// <summary>
        /// Patching completed
        /// Serialized Name: DbServerPatchingStatus.Complete
        /// </summary>
        public static DbServerPatchingStatus Complete { get; } = new DbServerPatchingStatus(CompleteValue);
        /// <summary> Determines if two <see cref="DbServerPatchingStatus"/> values are the same. </summary>
        public static bool operator ==(DbServerPatchingStatus left, DbServerPatchingStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DbServerPatchingStatus"/> values are not the same. </summary>
        public static bool operator !=(DbServerPatchingStatus left, DbServerPatchingStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DbServerPatchingStatus"/>. </summary>
        public static implicit operator DbServerPatchingStatus(string value) => new DbServerPatchingStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DbServerPatchingStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DbServerPatchingStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
