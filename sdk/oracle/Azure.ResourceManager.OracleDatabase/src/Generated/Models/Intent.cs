// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// Intent enum
    /// Serialized Name: Intent
    /// </summary>
    public readonly partial struct Intent : IEquatable<Intent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Intent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Intent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RetainValue = "Retain";
        private const string ResetValue = "Reset";

        /// <summary>
        /// Retain intent
        /// Serialized Name: Intent.Retain
        /// </summary>
        public static Intent Retain { get; } = new Intent(RetainValue);
        /// <summary>
        /// Reset intent
        /// Serialized Name: Intent.Reset
        /// </summary>
        public static Intent Reset { get; } = new Intent(ResetValue);
        /// <summary> Determines if two <see cref="Intent"/> values are the same. </summary>
        public static bool operator ==(Intent left, Intent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Intent"/> values are not the same. </summary>
        public static bool operator !=(Intent left, Intent right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Intent"/>. </summary>
        public static implicit operator Intent(string value) => new Intent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Intent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Intent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
