// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Oracle Subscription resource model. </summary>
    public partial class OracleSubscriptionProperties : IJsonModel<OracleSubscriptionProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<OracleSubscriptionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleSubscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleSubscriptionProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SaasSubscriptionId))
            {
                writer.WritePropertyName("saasSubscriptionId"u8);
                writer.WriteStringValue(SaasSubscriptionId);
            }
            if (options.Format != "W" && Optional.IsDefined(CloudAccountOcid))
            {
                writer.WritePropertyName("cloudAccountId"u8);
                writer.WriteStringValue(CloudAccountOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(CloudAccountState))
            {
                writer.WritePropertyName("cloudAccountState"u8);
                writer.WriteStringValue(CloudAccountState.Value.ToString());
            }
            if (Optional.IsDefined(TermUnit))
            {
                writer.WritePropertyName("termUnit"u8);
                writer.WriteStringValue(TermUnit);
            }
            if (Optional.IsDefined(ProductCode))
            {
                writer.WritePropertyName("productCode"u8);
                writer.WriteStringValue(ProductCode);
            }
            if (Optional.IsDefined(Intent))
            {
                writer.WritePropertyName("intent"u8);
                writer.WriteStringValue(Intent.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(AzureSubscriptionIds))
            {
                writer.WritePropertyName("azureSubscriptionIds"u8);
                writer.WriteStartArray();
                foreach (string item in AzureSubscriptionIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(AddSubscriptionOperationState))
            {
                writer.WritePropertyName("addSubscriptionOperationState"u8);
                writer.WriteStringValue(AddSubscriptionOperationState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LastOperationStatusDetail))
            {
                writer.WritePropertyName("lastOperationStatusDetail"u8);
                writer.WriteStringValue(LastOperationStatusDetail);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleSubscriptionProperties IJsonModel<OracleSubscriptionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleSubscriptionProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleSubscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleSubscriptionProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeOracleSubscriptionProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static OracleSubscriptionProperties DeserializeOracleSubscriptionProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            OracleSubscriptionProvisioningState? provisioningState = default;
            string saasSubscriptionId = default;
            string cloudAccountOcid = default;
            CloudAccountProvisioningState? cloudAccountState = default;
            string termUnit = default;
            string productCode = default;
            OracleSubscriptionUpdateIntent? intent = default;
            IReadOnlyList<string> azureSubscriptionIds = default;
            AddSubscriptionOperationState? addSubscriptionOperationState = default;
            string lastOperationStatusDetail = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleSubscriptionProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("saasSubscriptionId"u8))
                {
                    saasSubscriptionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cloudAccountId"u8))
                {
                    cloudAccountOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cloudAccountState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudAccountState = new CloudAccountProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("termUnit"u8))
                {
                    termUnit = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("productCode"u8))
                {
                    productCode = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("intent"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intent = new OracleSubscriptionUpdateIntent(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("azureSubscriptionIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    azureSubscriptionIds = array;
                    continue;
                }
                if (prop.NameEquals("addSubscriptionOperationState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    addSubscriptionOperationState = new AddSubscriptionOperationState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lastOperationStatusDetail"u8))
                {
                    lastOperationStatusDetail = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new OracleSubscriptionProperties(
                provisioningState,
                saasSubscriptionId,
                cloudAccountOcid,
                cloudAccountState,
                termUnit,
                productCode,
                intent,
                azureSubscriptionIds ?? new ChangeTrackingList<string>(),
                addSubscriptionOperationState,
                lastOperationStatusDetail,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<OracleSubscriptionProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleSubscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(OracleSubscriptionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleSubscriptionProperties IPersistableModel<OracleSubscriptionProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleSubscriptionProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleSubscriptionProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeOracleSubscriptionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(OracleSubscriptionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<OracleSubscriptionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
