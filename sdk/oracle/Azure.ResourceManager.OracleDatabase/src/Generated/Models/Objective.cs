// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Objective enum. </summary>
    public readonly partial struct Objective : IEquatable<Objective>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Objective"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Objective(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LowLatencyValue = "LowLatency";
        private const string HighThroughputValue = "HighThroughput";
        private const string BalancedValue = "Balanced";
        private const string AutoValue = "Auto";
        private const string BasicValue = "Basic";

        /// <summary> Low latency objective. </summary>
        public static Objective LowLatency { get; } = new Objective(LowLatencyValue);
        /// <summary> High throughput objective. </summary>
        public static Objective HighThroughput { get; } = new Objective(HighThroughputValue);
        /// <summary> Balanced objective. </summary>
        public static Objective Balanced { get; } = new Objective(BalancedValue);
        /// <summary> Auto objective. </summary>
        public static Objective Auto { get; } = new Objective(AutoValue);
        /// <summary> Basic objective. </summary>
        public static Objective Basic { get; } = new Objective(BasicValue);
        /// <summary> Determines if two <see cref="Objective"/> values are the same. </summary>
        public static bool operator ==(Objective left, Objective right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Objective"/> values are not the same. </summary>
        public static bool operator !=(Objective left, Objective right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Objective"/>. </summary>
        public static implicit operator Objective(string value) => new Objective(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Objective other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Objective other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
