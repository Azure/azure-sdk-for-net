// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// TLS authentication type enum.
    /// Serialized Name: TlsAuthenticationType
    /// </summary>
    public readonly partial struct TlsAuthenticationType : IEquatable<TlsAuthenticationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TlsAuthenticationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TlsAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ServerValue = "Server";
        private const string MutualValue = "Mutual";

        /// <summary>
        /// Server authentication
        /// Serialized Name: TlsAuthenticationType.Server
        /// </summary>
        public static TlsAuthenticationType Server { get; } = new TlsAuthenticationType(ServerValue);
        /// <summary>
        /// Mutual TLS
        /// Serialized Name: TlsAuthenticationType.Mutual
        /// </summary>
        public static TlsAuthenticationType Mutual { get; } = new TlsAuthenticationType(MutualValue);
        /// <summary> Determines if two <see cref="TlsAuthenticationType"/> values are the same. </summary>
        public static bool operator ==(TlsAuthenticationType left, TlsAuthenticationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TlsAuthenticationType"/> values are not the same. </summary>
        public static bool operator !=(TlsAuthenticationType left, TlsAuthenticationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TlsAuthenticationType"/>. </summary>
        public static implicit operator TlsAuthenticationType(string value) => new TlsAuthenticationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TlsAuthenticationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TlsAuthenticationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
