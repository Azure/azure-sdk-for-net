// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> WorkloadType enum. </summary>
    public readonly partial struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkloadType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OLTPValue = "OLTP";
        private const string DWValue = "DW";
        private const string AJDValue = "AJD";
        private const string APEXValue = "APEX";

        /// <summary> OLTP - indicates an Autonomous Transaction Processing database. </summary>
        public static WorkloadType OLTP { get; } = new WorkloadType(OLTPValue);
        /// <summary> DW - indicates an Autonomous Data Warehouse database. </summary>
        public static WorkloadType DW { get; } = new WorkloadType(DWValue);
        /// <summary> AJD - indicates an Autonomous JSON Database. </summary>
        public static WorkloadType AJD { get; } = new WorkloadType(AJDValue);
        /// <summary> APEX - indicates an Autonomous Database with the Oracle APEX Application Development workload type. </summary>
        public static WorkloadType APEX { get; } = new WorkloadType(APEXValue);
        /// <summary> Determines if two <see cref="WorkloadType"/> values are the same. </summary>
        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkloadType"/> values are not the same. </summary>
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="WorkloadType"/>. </summary>
        public static implicit operator WorkloadType(string value) => new WorkloadType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkloadType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
