// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary>
    /// AutonomousDbVersion resource model
    /// Serialized Name: AutonomousDbVersionProperties
    /// </summary>
    public partial class AutonomousDbVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AutonomousDbVersionProperties"/>. </summary>
        /// <param name="version">
        /// Supported Autonomous Db versions.
        /// Serialized Name: AutonomousDbVersionProperties.version
        /// </param>
        public AutonomousDbVersionProperties(string version)
        {
            Version = version;
        }

        /// <summary> Initializes a new instance of <see cref="AutonomousDbVersionProperties"/>. </summary>
        /// <param name="version">
        /// Supported Autonomous Db versions.
        /// Serialized Name: AutonomousDbVersionProperties.version
        /// </param>
        /// <param name="dbWorkload">
        /// The Autonomous Database workload type
        /// Serialized Name: AutonomousDbVersionProperties.dbWorkload
        /// </param>
        /// <param name="isDefaultForFree">
        /// True if this version of the Oracle Database software's default is free.
        /// Serialized Name: AutonomousDbVersionProperties.isDefaultForFree
        /// </param>
        /// <param name="isDefaultForPaid">
        /// True if this version of the Oracle Database software's default is paid.
        /// Serialized Name: AutonomousDbVersionProperties.isDefaultForPaid
        /// </param>
        /// <param name="isFreeTierEnabled">
        /// True if this version of the Oracle Database software can be used for Always-Free Autonomous Databases.
        /// Serialized Name: AutonomousDbVersionProperties.isFreeTierEnabled
        /// </param>
        /// <param name="isPaidEnabled">
        /// True if this version of the Oracle Database software has payments enabled.
        /// Serialized Name: AutonomousDbVersionProperties.isPaidEnabled
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AutonomousDbVersionProperties(string version, WorkloadType? dbWorkload, bool? isDefaultForFree, bool? isDefaultForPaid, bool? isFreeTierEnabled, bool? isPaidEnabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Version = version;
            DbWorkload = dbWorkload;
            IsDefaultForFree = isDefaultForFree;
            IsDefaultForPaid = isDefaultForPaid;
            IsFreeTierEnabled = isFreeTierEnabled;
            IsPaidEnabled = isPaidEnabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AutonomousDbVersionProperties"/> for deserialization. </summary>
        internal AutonomousDbVersionProperties()
        {
        }

        /// <summary>
        /// Supported Autonomous Db versions.
        /// Serialized Name: AutonomousDbVersionProperties.version
        /// </summary>
        public string Version { get; }
        /// <summary>
        /// The Autonomous Database workload type
        /// Serialized Name: AutonomousDbVersionProperties.dbWorkload
        /// </summary>
        public WorkloadType? DbWorkload { get; }
        /// <summary>
        /// True if this version of the Oracle Database software's default is free.
        /// Serialized Name: AutonomousDbVersionProperties.isDefaultForFree
        /// </summary>
        public bool? IsDefaultForFree { get; }
        /// <summary>
        /// True if this version of the Oracle Database software's default is paid.
        /// Serialized Name: AutonomousDbVersionProperties.isDefaultForPaid
        /// </summary>
        public bool? IsDefaultForPaid { get; }
        /// <summary>
        /// True if this version of the Oracle Database software can be used for Always-Free Autonomous Databases.
        /// Serialized Name: AutonomousDbVersionProperties.isFreeTierEnabled
        /// </summary>
        public bool? IsFreeTierEnabled { get; }
        /// <summary>
        /// True if this version of the Oracle Database software has payments enabled.
        /// Serialized Name: AutonomousDbVersionProperties.isPaidEnabled
        /// </summary>
        public bool? IsPaidEnabled { get; }
    }
}
