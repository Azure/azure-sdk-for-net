// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> CloudVmCluster resource model. </summary>
    public partial class CloudVmClusterProperties : IJsonModel<CloudVmClusterProperties>
    {
        /// <summary> Initializes a new instance of <see cref="CloudVmClusterProperties"/> for deserialization. </summary>
        internal CloudVmClusterProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<CloudVmClusterProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(CloudVmClusterOcid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(CloudVmClusterOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(ListenerPort))
            {
                writer.WritePropertyName("listenerPort"u8);
                writer.WriteNumberValue(ListenerPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NodeCount))
            {
                writer.WritePropertyName("nodeCount"u8);
                writer.WriteNumberValue(NodeCount.Value);
            }
            if (Optional.IsDefined(StorageSizeInGbs))
            {
                writer.WritePropertyName("storageSizeInGbs"u8);
                writer.WriteNumberValue(StorageSizeInGbs.Value);
            }
            if (Optional.IsCollectionDefined(FileSystemConfigurationDetails))
            {
                writer.WritePropertyName("fileSystemConfigurationDetails"u8);
                writer.WriteStartArray();
                foreach (FileSystemConfigurationDetails item in FileSystemConfigurationDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (Optional.IsDefined(DBNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("dbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(DBNodeStorageSizeInGbs.Value);
            }
            if (Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("timeCreated"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            if (Optional.IsDefined(ZoneOcid))
            {
                writer.WritePropertyName("zoneId"u8);
                writer.WriteStringValue(ZoneOcid);
            }
            writer.WritePropertyName("hostname"u8);
            writer.WriteStringValue(Hostname);
            if (Optional.IsDefined(Domain))
            {
                writer.WritePropertyName("domain"u8);
                writer.WriteStringValue(Domain);
            }
            writer.WritePropertyName("cpuCoreCount"u8);
            writer.WriteNumberValue(CpuCoreCount);
            if (Optional.IsDefined(OcpuCount))
            {
                writer.WritePropertyName("ocpuCount"u8);
                writer.WriteNumberValue(OcpuCount.Value);
            }
            if (Optional.IsDefined(ClusterName))
            {
                writer.WritePropertyName("clusterName"u8);
                writer.WriteStringValue(ClusterName);
            }
            if (Optional.IsDefined(DataStoragePercentage))
            {
                writer.WritePropertyName("dataStoragePercentage"u8);
                writer.WriteNumberValue(DataStoragePercentage.Value);
            }
            if (Optional.IsDefined(IsLocalBackupEnabled))
            {
                writer.WritePropertyName("isLocalBackupEnabled"u8);
                writer.WriteBooleanValue(IsLocalBackupEnabled.Value);
            }
            writer.WritePropertyName("cloudExadataInfrastructureId"u8);
            writer.WriteStringValue(CloudExadataInfrastructureId);
            if (Optional.IsDefined(IsSparseDiskgroupEnabled))
            {
                writer.WritePropertyName("isSparseDiskgroupEnabled"u8);
                writer.WriteBooleanValue(IsSparseDiskgroupEnabled.Value);
            }
            if (Optional.IsDefined(SystemVersion))
            {
                writer.WritePropertyName("systemVersion"u8);
                writer.WriteStringValue(SystemVersion);
            }
            writer.WritePropertyName("sshPublicKeys"u8);
            writer.WriteStartArray();
            foreach (string item in SshPublicKeys)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(LicenseModel))
            {
                writer.WritePropertyName("licenseModel"u8);
                writer.WriteStringValue(LicenseModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DiskRedundancy))
            {
                writer.WritePropertyName("diskRedundancy"u8);
                writer.WriteStringValue(DiskRedundancy.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ScanIpIds))
            {
                writer.WritePropertyName("scanIpIds"u8);
                writer.WriteStartArray();
                foreach (string item in ScanIpIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VipIds))
            {
                writer.WritePropertyName("vipIds"u8);
                writer.WriteStartArray();
                foreach (string item in VipIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsName))
            {
                writer.WritePropertyName("scanDnsName"u8);
                writer.WriteStringValue(ScanDnsName);
            }
            if (Optional.IsDefined(ScanListenerPortTcp))
            {
                writer.WritePropertyName("scanListenerPortTcp"u8);
                writer.WriteNumberValue(ScanListenerPortTcp.Value);
            }
            if (Optional.IsDefined(ScanListenerPortTcpSsl))
            {
                writer.WritePropertyName("scanListenerPortTcpSsl"u8);
                writer.WriteNumberValue(ScanListenerPortTcpSsl.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ScanDnsRecordOcid))
            {
                writer.WritePropertyName("scanDnsRecordId"u8);
                writer.WriteStringValue(ScanDnsRecordOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(Shape))
            {
                writer.WritePropertyName("shape"u8);
                writer.WriteStringValue(Shape);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            writer.WritePropertyName("vnetId"u8);
            writer.WriteStringValue(VnetId);
            writer.WritePropertyName("giVersion"u8);
            writer.WriteStringValue(GiVersion);
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(NsgUri))
            {
                writer.WritePropertyName("nsgUrl"u8);
                writer.WriteStringValue(NsgUri.AbsoluteUri);
            }
            writer.WritePropertyName("subnetId"u8);
            writer.WriteStringValue(SubnetId);
            if (Optional.IsDefined(BackupSubnetCidr))
            {
                writer.WritePropertyName("backupSubnetCidr"u8);
                writer.WriteStringValue(BackupSubnetCidr);
            }
            if (Optional.IsCollectionDefined(NsgCidrs))
            {
                writer.WritePropertyName("nsgCidrs"u8);
                writer.WriteStartArray();
                foreach (CloudVmClusterNsgCidr item in NsgCidrs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(DataCollectionOptions))
            {
                writer.WritePropertyName("dataCollectionOptions"u8);
                writer.WriteObjectValue(DataCollectionOptions, options);
            }
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            if (Optional.IsCollectionDefined(ComputeNodeOcids))
            {
                writer.WritePropertyName("computeNodes"u8);
                writer.WriteStartArray();
                foreach (string item in ComputeNodeOcids)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(IormConfigCache))
            {
                writer.WritePropertyName("iormConfigCache"u8);
                writer.WriteObjectValue(IormConfigCache, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdateHistoryEntryOcid))
            {
                writer.WritePropertyName("lastUpdateHistoryEntryId"u8);
                writer.WriteStringValue(LastUpdateHistoryEntryOcid);
            }
            if (Optional.IsCollectionDefined(DBServerOcids))
            {
                writer.WritePropertyName("dbServers"u8);
                writer.WriteStartArray();
                foreach (string item in DBServerOcids)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(CompartmentOcid))
            {
                writer.WritePropertyName("compartmentId"u8);
                writer.WriteStringValue(CompartmentOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(ClusterSubnetOcid))
            {
                writer.WritePropertyName("subnetOcid"u8);
                writer.WriteStringValue(ClusterSubnetOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel.Value.ToString());
            }
            if (Optional.IsDefined(ExascaleDbStorageVaultId))
            {
                writer.WritePropertyName("exascaleDbStorageVaultId"u8);
                writer.WriteStringValue(ExascaleDbStorageVaultId);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageManagementType))
            {
                writer.WritePropertyName("storageManagementType"u8);
                writer.WriteStringValue(StorageManagementType.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudVmClusterProperties IJsonModel<CloudVmClusterProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudVmClusterProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudVmClusterProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCloudVmClusterProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static CloudVmClusterProperties DeserializeCloudVmClusterProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string cloudVmClusterOcid = default;
            long? listenerPort = default;
            int? nodeCount = default;
            int? storageSizeInGbs = default;
            IList<FileSystemConfigurationDetails> fileSystemConfigurationDetails = default;
            double? dataStorageSizeInTbs = default;
            int? dbNodeStorageSizeInGbs = default;
            int? memorySizeInGbs = default;
            DateTimeOffset? createdOn = default;
            string lifecycleDetails = default;
            string timeZone = default;
            string zoneOcid = default;
            string hostname = default;
            string domain = default;
            int cpuCoreCount = default;
            float? ocpuCount = default;
            string clusterName = default;
            int? dataStoragePercentage = default;
            bool? isLocalBackupEnabled = default;
            ResourceIdentifier cloudExadataInfrastructureId = default;
            bool? isSparseDiskgroupEnabled = default;
            string systemVersion = default;
            IList<string> sshPublicKeys = default;
            OracleLicenseModel? licenseModel = default;
            CloudVmClusterDiskRedundancy? diskRedundancy = default;
            IReadOnlyList<string> scanIpIds = default;
            IReadOnlyList<string> vipIds = default;
            string scanDnsName = default;
            int? scanListenerPortTcp = default;
            int? scanListenerPortTcpSsl = default;
            string scanDnsRecordOcid = default;
            string shape = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            CloudVmClusterLifecycleState? lifecycleState = default;
            ResourceIdentifier vnetId = default;
            string giVersion = default;
            Uri ociUri = default;
            Uri nsgUri = default;
            ResourceIdentifier subnetId = default;
            string backupSubnetCidr = default;
            IList<CloudVmClusterNsgCidr> nsgCidrs = default;
            DiagnosticCollectionConfig dataCollectionOptions = default;
            string displayName = default;
            IList<string> computeNodeOcids = default;
            ExadataIormConfig iormConfigCache = default;
            string lastUpdateHistoryEntryOcid = default;
            IList<string> dbServerOcids = default;
            string compartmentOcid = default;
            string clusterSubnetOcid = default;
            OracleDatabaseComputeModel? computeModel = default;
            ResourceIdentifier exascaleDbStorageVaultId = default;
            ExadataVmClusterStorageManagementType? storageManagementType = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("ocid"u8))
                {
                    cloudVmClusterOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("listenerPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    listenerPort = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("nodeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("storageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("fileSystemConfigurationDetails"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FileSystemConfigurationDetails> array = new List<FileSystemConfigurationDetails>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Models.FileSystemConfigurationDetails.DeserializeFileSystemConfigurationDetails(item, options));
                    }
                    fileSystemConfigurationDetails = array;
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("dbNodeStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbNodeStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("memorySizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("timeCreated"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("timeZone"u8))
                {
                    timeZone = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("zoneId"u8))
                {
                    zoneOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostname"u8))
                {
                    hostname = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("domain"u8))
                {
                    domain = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cpuCoreCount"u8))
                {
                    cpuCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("ocpuCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ocpuCount = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("clusterName"u8))
                {
                    clusterName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dataStoragePercentage"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStoragePercentage = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("isLocalBackupEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLocalBackupEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("cloudExadataInfrastructureId"u8))
                {
                    cloudExadataInfrastructureId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("isSparseDiskgroupEnabled"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSparseDiskgroupEnabled = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("systemVersion"u8))
                {
                    systemVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("sshPublicKeys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    sshPublicKeys = array;
                    continue;
                }
                if (prop.NameEquals("licenseModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModel = new OracleLicenseModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("diskRedundancy"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskRedundancy = new CloudVmClusterDiskRedundancy(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("scanIpIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    scanIpIds = array;
                    continue;
                }
                if (prop.NameEquals("vipIds"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    vipIds = array;
                    continue;
                }
                if (prop.NameEquals("scanDnsName"u8))
                {
                    scanDnsName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("scanListenerPortTcp"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scanListenerPortTcp = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("scanListenerPortTcpSsl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scanListenerPortTcpSsl = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("scanDnsRecordId"u8))
                {
                    scanDnsRecordOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("shape"u8))
                {
                    shape = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new CloudVmClusterLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("vnetId"u8))
                {
                    vnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("giVersion"u8))
                {
                    giVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("nsgUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nsgUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("subnetId"u8))
                {
                    subnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("backupSubnetCidr"u8))
                {
                    backupSubnetCidr = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("nsgCidrs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CloudVmClusterNsgCidr> array = new List<CloudVmClusterNsgCidr>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(CloudVmClusterNsgCidr.DeserializeCloudVmClusterNsgCidr(item, options));
                    }
                    nsgCidrs = array;
                    continue;
                }
                if (prop.NameEquals("dataCollectionOptions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataCollectionOptions = DiagnosticCollectionConfig.DeserializeDiagnosticCollectionConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeNodes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    computeNodeOcids = array;
                    continue;
                }
                if (prop.NameEquals("iormConfigCache"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    iormConfigCache = ExadataIormConfig.DeserializeExadataIormConfig(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("lastUpdateHistoryEntryId"u8))
                {
                    lastUpdateHistoryEntryOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("dbServers"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    dbServerOcids = array;
                    continue;
                }
                if (prop.NameEquals("compartmentId"u8))
                {
                    compartmentOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("subnetOcid"u8))
                {
                    clusterSubnetOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeModel = new OracleDatabaseComputeModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("exascaleDbStorageVaultId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exascaleDbStorageVaultId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("storageManagementType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageManagementType = new ExadataVmClusterStorageManagementType(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new CloudVmClusterProperties(
                cloudVmClusterOcid,
                listenerPort,
                nodeCount,
                storageSizeInGbs,
                fileSystemConfigurationDetails ?? new ChangeTrackingList<FileSystemConfigurationDetails>(),
                dataStorageSizeInTbs,
                dbNodeStorageSizeInGbs,
                memorySizeInGbs,
                createdOn,
                lifecycleDetails,
                timeZone,
                zoneOcid,
                hostname,
                domain,
                cpuCoreCount,
                ocpuCount,
                clusterName,
                dataStoragePercentage,
                isLocalBackupEnabled,
                cloudExadataInfrastructureId,
                isSparseDiskgroupEnabled,
                systemVersion,
                sshPublicKeys,
                licenseModel,
                diskRedundancy,
                scanIpIds ?? new ChangeTrackingList<string>(),
                vipIds ?? new ChangeTrackingList<string>(),
                scanDnsName,
                scanListenerPortTcp,
                scanListenerPortTcpSsl,
                scanDnsRecordOcid,
                shape,
                provisioningState,
                lifecycleState,
                vnetId,
                giVersion,
                ociUri,
                nsgUri,
                subnetId,
                backupSubnetCidr,
                nsgCidrs ?? new ChangeTrackingList<CloudVmClusterNsgCidr>(),
                dataCollectionOptions,
                displayName,
                computeNodeOcids ?? new ChangeTrackingList<string>(),
                iormConfigCache,
                lastUpdateHistoryEntryOcid,
                dbServerOcids ?? new ChangeTrackingList<string>(),
                compartmentOcid,
                clusterSubnetOcid,
                computeModel,
                exascaleDbStorageVaultId,
                storageManagementType,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<CloudVmClusterProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudVmClusterProperties IPersistableModel<CloudVmClusterProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudVmClusterProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudVmClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeCloudVmClusterProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CloudVmClusterProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<CloudVmClusterProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
