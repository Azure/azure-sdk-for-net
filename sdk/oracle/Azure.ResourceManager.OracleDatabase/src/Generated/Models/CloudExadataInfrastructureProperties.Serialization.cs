// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> CloudExadataInfrastructure resource model. </summary>
    public partial class CloudExadataInfrastructureProperties : IJsonModel<CloudExadataInfrastructureProperties>
    {
        /// <summary> Initializes a new instance of <see cref="CloudExadataInfrastructureProperties"/> for deserialization. </summary>
        internal CloudExadataInfrastructureProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<CloudExadataInfrastructureProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudExadataInfrastructureProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudExadataInfrastructureProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DefinedFileSystemConfiguration))
            {
                writer.WritePropertyName("definedFileSystemConfiguration"u8);
                writer.WriteStartArray();
                foreach (DefinedFileSystemConfiguration item in DefinedFileSystemConfiguration)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ExadataInfraOcid))
            {
                writer.WritePropertyName("ocid"u8);
                writer.WriteStringValue(ExadataInfraOcid);
            }
            if (Optional.IsDefined(ComputeCount))
            {
                writer.WritePropertyName("computeCount"u8);
                writer.WriteNumberValue(ComputeCount.Value);
            }
            if (Optional.IsDefined(StorageCount))
            {
                writer.WritePropertyName("storageCount"u8);
                writer.WriteNumberValue(StorageCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TotalStorageSizeInGbs))
            {
                writer.WritePropertyName("totalStorageSizeInGbs"u8);
                writer.WriteNumberValue(TotalStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableStorageSizeInGbs))
            {
                writer.WritePropertyName("availableStorageSizeInGbs"u8);
                writer.WriteNumberValue(AvailableStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("timeCreated"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleDetails))
            {
                writer.WritePropertyName("lifecycleDetails"u8);
                writer.WriteStringValue(LifecycleDetails);
            }
            if (Optional.IsDefined(MaintenanceWindow))
            {
                writer.WritePropertyName("maintenanceWindow"u8);
                writer.WriteObjectValue(MaintenanceWindow, options);
            }
            if (options.Format != "W" && Optional.IsDefined(EstimatedPatchingTime))
            {
                writer.WritePropertyName("estimatedPatchingTime"u8);
                writer.WriteObjectValue(EstimatedPatchingTime, options);
            }
            if (Optional.IsCollectionDefined(CustomerContacts))
            {
                writer.WritePropertyName("customerContacts"u8);
                writer.WriteStartArray();
                foreach (OracleCustomerContact item in CustomerContacts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LifecycleState))
            {
                writer.WritePropertyName("lifecycleState"u8);
                writer.WriteStringValue(LifecycleState.Value.ToString());
            }
            writer.WritePropertyName("shape"u8);
            writer.WriteStringValue(Shape);
            if (options.Format != "W" && Optional.IsDefined(OciUri))
            {
                writer.WritePropertyName("ociUrl"u8);
                writer.WriteStringValue(OciUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(CpuCount))
            {
                writer.WritePropertyName("cpuCount"u8);
                writer.WriteNumberValue(CpuCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxCpuCount))
            {
                writer.WritePropertyName("maxCpuCount"u8);
                writer.WriteNumberValue(MaxCpuCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MemorySizeInGbs))
            {
                writer.WritePropertyName("memorySizeInGbs"u8);
                writer.WriteNumberValue(MemorySizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxMemoryInGbs))
            {
                writer.WritePropertyName("maxMemoryInGbs"u8);
                writer.WriteNumberValue(MaxMemoryInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DBNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("dbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(DBNodeStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxDBNodeStorageSizeInGbs))
            {
                writer.WritePropertyName("maxDbNodeStorageSizeInGbs"u8);
                writer.WriteNumberValue(MaxDBNodeStorageSizeInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DataStorageSizeInTbs))
            {
                writer.WritePropertyName("dataStorageSizeInTbs"u8);
                writer.WriteNumberValue(DataStorageSizeInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxDataStorageInTbs))
            {
                writer.WritePropertyName("maxDataStorageInTbs"u8);
                writer.WriteNumberValue(MaxDataStorageInTbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DBServerVersion))
            {
                writer.WritePropertyName("dbServerVersion"u8);
                writer.WriteStringValue(DBServerVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageServerVersion))
            {
                writer.WritePropertyName("storageServerVersion"u8);
                writer.WriteStringValue(StorageServerVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(ActivatedStorageCount))
            {
                writer.WritePropertyName("activatedStorageCount"u8);
                writer.WriteNumberValue(ActivatedStorageCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AdditionalStorageCount))
            {
                writer.WritePropertyName("additionalStorageCount"u8);
                writer.WriteNumberValue(AdditionalStorageCount.Value);
            }
            writer.WritePropertyName("displayName"u8);
            writer.WriteStringValue(DisplayName);
            if (options.Format != "W" && Optional.IsDefined(LastMaintenanceRunOcid))
            {
                writer.WritePropertyName("lastMaintenanceRunId"u8);
                writer.WriteStringValue(LastMaintenanceRunOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(NextMaintenanceRunOcid))
            {
                writer.WritePropertyName("nextMaintenanceRunId"u8);
                writer.WriteStringValue(NextMaintenanceRunOcid);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyDBServerVersion))
            {
                writer.WritePropertyName("monthlyDbServerVersion"u8);
                writer.WriteStringValue(MonthlyDBServerVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyStorageServerVersion))
            {
                writer.WritePropertyName("monthlyStorageServerVersion"u8);
                writer.WriteStringValue(MonthlyStorageServerVersion);
            }
            if (Optional.IsDefined(DatabaseServerType))
            {
                writer.WritePropertyName("databaseServerType"u8);
                writer.WriteStringValue(DatabaseServerType);
            }
            if (Optional.IsDefined(StorageServerType))
            {
                writer.WritePropertyName("storageServerType"u8);
                writer.WriteStringValue(StorageServerType);
            }
            if (options.Format != "W" && Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ExascaleConfig))
            {
                writer.WritePropertyName("exascaleConfig"u8);
                writer.WriteObjectValue(ExascaleConfig, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudExadataInfrastructureProperties IJsonModel<CloudExadataInfrastructureProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudExadataInfrastructureProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudExadataInfrastructureProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CloudExadataInfrastructureProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCloudExadataInfrastructureProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static CloudExadataInfrastructureProperties DeserializeCloudExadataInfrastructureProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<DefinedFileSystemConfiguration> definedFileSystemConfiguration = default;
            string exadataInfraOcid = default;
            int? computeCount = default;
            int? storageCount = default;
            int? totalStorageSizeInGbs = default;
            int? availableStorageSizeInGbs = default;
            DateTimeOffset? createdOn = default;
            string lifecycleDetails = default;
            OracleDatabaseMaintenanceWindow maintenanceWindow = default;
            EstimatedPatchingTime estimatedPatchingTime = default;
            IList<OracleCustomerContact> customerContacts = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            CloudExadataInfrastructureLifecycleState? lifecycleState = default;
            string shape = default;
            Uri ociUri = default;
            int? cpuCount = default;
            int? maxCpuCount = default;
            int? memorySizeInGbs = default;
            int? maxMemoryInGbs = default;
            int? dbNodeStorageSizeInGbs = default;
            int? maxDBNodeStorageSizeInGbs = default;
            double? dataStorageSizeInTbs = default;
            double? maxDataStorageInTbs = default;
            string dbServerVersion = default;
            string storageServerVersion = default;
            int? activatedStorageCount = default;
            int? additionalStorageCount = default;
            string displayName = default;
            string lastMaintenanceRunOcid = default;
            string nextMaintenanceRunOcid = default;
            string monthlyDBServerVersion = default;
            string monthlyStorageServerVersion = default;
            string databaseServerType = default;
            string storageServerType = default;
            OracleDatabaseComputeModel? computeModel = default;
            ExascaleConfigDetails exascaleConfig = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("definedFileSystemConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DefinedFileSystemConfiguration> array = new List<DefinedFileSystemConfiguration>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Models.DefinedFileSystemConfiguration.DeserializeDefinedFileSystemConfiguration(item, options));
                    }
                    definedFileSystemConfiguration = array;
                    continue;
                }
                if (prop.NameEquals("ocid"u8))
                {
                    exadataInfraOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("storageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("totalStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("timeCreated"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("maintenanceWindow"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maintenanceWindow = OracleDatabaseMaintenanceWindow.DeserializeOracleDatabaseMaintenanceWindow(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("estimatedPatchingTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimatedPatchingTime = EstimatedPatchingTime.DeserializeEstimatedPatchingTime(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("customerContacts"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OracleCustomerContact> array = new List<OracleCustomerContact>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(OracleCustomerContact.DeserializeOracleCustomerContact(item, options));
                    }
                    customerContacts = array;
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("lifecycleState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new CloudExadataInfrastructureLifecycleState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("shape"u8))
                {
                    shape = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ociUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("cpuCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maxCpuCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxCpuCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("memorySizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maxMemoryInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxMemoryInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dbNodeStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbNodeStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("maxDbNodeStorageSizeInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxDBNodeStorageSizeInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("dataStorageSizeInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("maxDataStorageInTbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxDataStorageInTbs = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("dbServerVersion"u8))
                {
                    dbServerVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("storageServerVersion"u8))
                {
                    storageServerVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("activatedStorageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    activatedStorageCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("additionalStorageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    additionalStorageCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastMaintenanceRunId"u8))
                {
                    lastMaintenanceRunOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("nextMaintenanceRunId"u8))
                {
                    nextMaintenanceRunOcid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("monthlyDbServerVersion"u8))
                {
                    monthlyDBServerVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("monthlyStorageServerVersion"u8))
                {
                    monthlyStorageServerVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("databaseServerType"u8))
                {
                    databaseServerType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("storageServerType"u8))
                {
                    storageServerType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeModel = new OracleDatabaseComputeModel(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("exascaleConfig"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exascaleConfig = ExascaleConfigDetails.DeserializeExascaleConfigDetails(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new CloudExadataInfrastructureProperties(
                definedFileSystemConfiguration ?? new ChangeTrackingList<DefinedFileSystemConfiguration>(),
                exadataInfraOcid,
                computeCount,
                storageCount,
                totalStorageSizeInGbs,
                availableStorageSizeInGbs,
                createdOn,
                lifecycleDetails,
                maintenanceWindow,
                estimatedPatchingTime,
                customerContacts ?? new ChangeTrackingList<OracleCustomerContact>(),
                provisioningState,
                lifecycleState,
                shape,
                ociUri,
                cpuCount,
                maxCpuCount,
                memorySizeInGbs,
                maxMemoryInGbs,
                dbNodeStorageSizeInGbs,
                maxDBNodeStorageSizeInGbs,
                dataStorageSizeInTbs,
                maxDataStorageInTbs,
                dbServerVersion,
                storageServerVersion,
                activatedStorageCount,
                additionalStorageCount,
                displayName,
                lastMaintenanceRunOcid,
                nextMaintenanceRunOcid,
                monthlyDBServerVersion,
                monthlyStorageServerVersion,
                databaseServerType,
                storageServerType,
                computeModel,
                exascaleConfig,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<CloudExadataInfrastructureProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudExadataInfrastructureProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(CloudExadataInfrastructureProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        CloudExadataInfrastructureProperties IPersistableModel<CloudExadataInfrastructureProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual CloudExadataInfrastructureProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<CloudExadataInfrastructureProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeCloudExadataInfrastructureProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CloudExadataInfrastructureProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<CloudExadataInfrastructureProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
