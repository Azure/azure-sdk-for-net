// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.OracleDatabase;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> FlexComponent resource model. </summary>
    public partial class OracleFlexComponentProperties : IJsonModel<OracleFlexComponentProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<OracleFlexComponentProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleFlexComponentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleFlexComponentProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(MinimumCoreCount))
            {
                writer.WritePropertyName("minimumCoreCount"u8);
                writer.WriteNumberValue(MinimumCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableCoreCount))
            {
                writer.WritePropertyName("availableCoreCount"u8);
                writer.WriteNumberValue(AvailableCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableDBStorageInGbs))
            {
                writer.WritePropertyName("availableDbStorageInGbs"u8);
                writer.WriteNumberValue(AvailableDBStorageInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RuntimeMinimumCoreCount))
            {
                writer.WritePropertyName("runtimeMinimumCoreCount"u8);
                writer.WriteNumberValue(RuntimeMinimumCoreCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Shape))
            {
                writer.WritePropertyName("shape"u8);
                writer.WriteStringValue(Shape);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableMemoryInGbs))
            {
                writer.WritePropertyName("availableMemoryInGbs"u8);
                writer.WriteNumberValue(AvailableMemoryInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AvailableLocalStorageInGbs))
            {
                writer.WritePropertyName("availableLocalStorageInGbs"u8);
                writer.WriteNumberValue(AvailableLocalStorageInGbs.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ComputeModel))
            {
                writer.WritePropertyName("computeModel"u8);
                writer.WriteStringValue(ComputeModel);
            }
            if (options.Format != "W" && Optional.IsDefined(HardwareType))
            {
                writer.WritePropertyName("hardwareType"u8);
                writer.WriteStringValue(HardwareType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DescriptionSummary))
            {
                writer.WritePropertyName("descriptionSummary"u8);
                writer.WriteStringValue(DescriptionSummary);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleFlexComponentProperties IJsonModel<OracleFlexComponentProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleFlexComponentProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleFlexComponentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(OracleFlexComponentProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeOracleFlexComponentProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static OracleFlexComponentProperties DeserializeOracleFlexComponentProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? minimumCoreCount = default;
            int? availableCoreCount = default;
            int? availableDBStorageInGbs = default;
            int? runtimeMinimumCoreCount = default;
            string shape = default;
            int? availableMemoryInGbs = default;
            int? availableLocalStorageInGbs = default;
            string computeModel = default;
            FlexComponentHardwareType? hardwareType = default;
            string descriptionSummary = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("minimumCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableDbStorageInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableDBStorageInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("runtimeMinimumCoreCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    runtimeMinimumCoreCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("shape"u8))
                {
                    shape = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("availableMemoryInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("availableLocalStorageInGbs"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableLocalStorageInGbs = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("computeModel"u8))
                {
                    computeModel = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hardwareType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hardwareType = new FlexComponentHardwareType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("descriptionSummary"u8))
                {
                    descriptionSummary = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new OracleFlexComponentProperties(
                minimumCoreCount,
                availableCoreCount,
                availableDBStorageInGbs,
                runtimeMinimumCoreCount,
                shape,
                availableMemoryInGbs,
                availableLocalStorageInGbs,
                computeModel,
                hardwareType,
                descriptionSummary,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<OracleFlexComponentProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleFlexComponentProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(OracleFlexComponentProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        OracleFlexComponentProperties IPersistableModel<OracleFlexComponentProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual OracleFlexComponentProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<OracleFlexComponentProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeOracleFlexComponentProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(OracleFlexComponentProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<OracleFlexComponentProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
