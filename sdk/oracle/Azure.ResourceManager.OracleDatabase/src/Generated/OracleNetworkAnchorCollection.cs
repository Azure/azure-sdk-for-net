// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="OracleNetworkAnchorResource"/> and their operations.
    /// Each <see cref="OracleNetworkAnchorResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="OracleNetworkAnchorCollection"/> instance call the GetOracleNetworkAnchors method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class OracleNetworkAnchorCollection : ArmCollection, IEnumerable<OracleNetworkAnchorResource>, IAsyncEnumerable<OracleNetworkAnchorResource>
    {
        private readonly ClientDiagnostics _oracleNetworkAnchorNetworkAnchorsClientDiagnostics;
        private readonly NetworkAnchorsRestOperations _oracleNetworkAnchorNetworkAnchorsRestClient;

        /// <summary> Initializes a new instance of the <see cref="OracleNetworkAnchorCollection"/> class for mocking. </summary>
        protected OracleNetworkAnchorCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OracleNetworkAnchorCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OracleNetworkAnchorCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _oracleNetworkAnchorNetworkAnchorsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", OracleNetworkAnchorResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OracleNetworkAnchorResource.ResourceType, out string oracleNetworkAnchorNetworkAnchorsApiVersion);
            _oracleNetworkAnchorNetworkAnchorsRestClient = new NetworkAnchorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, oracleNetworkAnchorNetworkAnchorsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a NetworkAnchor
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<OracleNetworkAnchorResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string networkAnchorName, OracleNetworkAnchorData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _oracleNetworkAnchorNetworkAnchorsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, data, cancellationToken).ConfigureAwait(false);
                var operation = new OracleDatabaseArmOperation<OracleNetworkAnchorResource>(new OracleNetworkAnchorOperationSource(Client), _oracleNetworkAnchorNetworkAnchorsClientDiagnostics, Pipeline, _oracleNetworkAnchorNetworkAnchorsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a NetworkAnchor
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<OracleNetworkAnchorResource> CreateOrUpdate(WaitUntil waitUntil, string networkAnchorName, OracleNetworkAnchorData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _oracleNetworkAnchorNetworkAnchorsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, data, cancellationToken);
                var operation = new OracleDatabaseArmOperation<OracleNetworkAnchorResource>(new OracleNetworkAnchorOperationSource(Client), _oracleNetworkAnchorNetworkAnchorsClientDiagnostics, Pipeline, _oracleNetworkAnchorNetworkAnchorsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a NetworkAnchor
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual async Task<Response<OracleNetworkAnchorResource>> GetAsync(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.Get");
            scope.Start();
            try
            {
                var response = await _oracleNetworkAnchorNetworkAnchorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OracleNetworkAnchorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a NetworkAnchor
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual Response<OracleNetworkAnchorResource> Get(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.Get");
            scope.Start();
            try
            {
                var response = _oracleNetworkAnchorNetworkAnchorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OracleNetworkAnchorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List NetworkAnchor resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OracleNetworkAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OracleNetworkAnchorResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _oracleNetworkAnchorNetworkAnchorsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _oracleNetworkAnchorNetworkAnchorsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OracleNetworkAnchorResource(Client, OracleNetworkAnchorData.DeserializeOracleNetworkAnchorData(e)), _oracleNetworkAnchorNetworkAnchorsClientDiagnostics, Pipeline, "OracleNetworkAnchorCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List NetworkAnchor resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleNetworkAnchorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OracleNetworkAnchorResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _oracleNetworkAnchorNetworkAnchorsRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _oracleNetworkAnchorNetworkAnchorsRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OracleNetworkAnchorResource(Client, OracleNetworkAnchorData.DeserializeOracleNetworkAnchorData(e)), _oracleNetworkAnchorNetworkAnchorsClientDiagnostics, Pipeline, "OracleNetworkAnchorCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.Exists");
            scope.Start();
            try
            {
                var response = await _oracleNetworkAnchorNetworkAnchorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual Response<bool> Exists(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.Exists");
            scope.Start();
            try
            {
                var response = _oracleNetworkAnchorNetworkAnchorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual async Task<NullableResponse<OracleNetworkAnchorResource>> GetIfExistsAsync(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _oracleNetworkAnchorNetworkAnchorsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<OracleNetworkAnchorResource>(response.GetRawResponse());
                return Response.FromValue(new OracleNetworkAnchorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/networkAnchors/{networkAnchorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>NetworkAnchor_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OracleNetworkAnchorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkAnchorName"> The name of the NetworkAnchor. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkAnchorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkAnchorName"/> is null. </exception>
        public virtual NullableResponse<OracleNetworkAnchorResource> GetIfExists(string networkAnchorName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkAnchorName, nameof(networkAnchorName));

            using var scope = _oracleNetworkAnchorNetworkAnchorsClientDiagnostics.CreateScope("OracleNetworkAnchorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _oracleNetworkAnchorNetworkAnchorsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, networkAnchorName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<OracleNetworkAnchorResource>(response.GetRawResponse());
                return Response.FromValue(new OracleNetworkAnchorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OracleNetworkAnchorResource> IEnumerable<OracleNetworkAnchorResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OracleNetworkAnchorResource> IAsyncEnumerable<OracleNetworkAnchorResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
