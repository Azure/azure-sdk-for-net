// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="OracleFlexComponentResource"/> and their operations.
    /// Each <see cref="OracleFlexComponentResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="OracleFlexComponentCollection"/> instance call the GetOracleFlexComponents method from an instance of the parent resource.
    /// </summary>
    public partial class OracleFlexComponentCollection : ArmCollection, IEnumerable<OracleFlexComponentResource>, IAsyncEnumerable<OracleFlexComponentResource>
    {
        private readonly ClientDiagnostics _flexComponentsClientDiagnostics;
        private readonly FlexComponents _flexComponentsRestClient;
        /// <summary> The location. </summary>
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of OracleFlexComponentCollection for mocking. </summary>
        protected OracleFlexComponentCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="OracleFlexComponentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        /// <param name="location"> The location for the resource. </param>
        internal OracleFlexComponentCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            TryGetApiVersion(OracleFlexComponentResource.ResourceType, out string oracleFlexComponentApiVersion);
            _location = location;
            _flexComponentsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", OracleFlexComponentResource.ResourceType.Namespace, Diagnostics);
            _flexComponentsRestClient = new FlexComponents(_flexComponentsClientDiagnostics, Pipeline, Endpoint, oracleFlexComponentApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), id);
            }
        }

        /// <summary> Get a FlexComponent. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<OracleFlexComponentResource>> GetAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleFlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a FlexComponent. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<OracleFlexComponentResource> Get(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleFlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List FlexComponent resources by SubscriptionLocationResource. </summary>
        /// <param name="shape"> If provided, filters the results for the given shape. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleFlexComponentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OracleFlexComponentResource> GetAllAsync(OracleDatabaseSystemShape? shape = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<OracleFlexComponentData, OracleFlexComponentResource>(new FlexComponentsGetByParentAsyncCollectionResultOfT(_flexComponentsRestClient, Guid.Parse(Id.SubscriptionId), _location, shape.ToString(), context), data => new OracleFlexComponentResource(Client, data));
        }

        /// <summary> List FlexComponent resources by SubscriptionLocationResource. </summary>
        /// <param name="shape"> If provided, filters the results for the given shape. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleFlexComponentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OracleFlexComponentResource> GetAll(OracleDatabaseSystemShape? shape = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<OracleFlexComponentData, OracleFlexComponentResource>(new FlexComponentsGetByParentCollectionResultOfT(_flexComponentsRestClient, Guid.Parse(Id.SubscriptionId), _location, shape.ToString(), context), data => new OracleFlexComponentResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<OracleFlexComponentResource>> GetIfExistsAsync(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<OracleFlexComponentResource>(response.GetRawResponse());
                }
                return Response.FromValue(new OracleFlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="flexComponentName"> The name of the FlexComponent. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="flexComponentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="flexComponentName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<OracleFlexComponentResource> GetIfExists(string flexComponentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(flexComponentName, nameof(flexComponentName));

            using DiagnosticScope scope = _flexComponentsClientDiagnostics.CreateScope("OracleFlexComponentCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _flexComponentsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, flexComponentName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleFlexComponentData> response = Response.FromValue(OracleFlexComponentData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<OracleFlexComponentResource>(response.GetRawResponse());
                }
                return Response.FromValue(new OracleFlexComponentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OracleFlexComponentResource> IEnumerable<OracleFlexComponentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<OracleFlexComponentResource> IAsyncEnumerable<OracleFlexComponentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
