// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="ExascaleDBNodeResource"/> and their operations.
    /// Each <see cref="ExascaleDBNodeResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="ExascaleDBNodeCollection"/> instance call the GetExascaleDBNodes method from an instance of the parent resource.
    /// </summary>
    public partial class ExascaleDBNodeCollection : ArmCollection, IEnumerable<ExascaleDBNodeResource>, IAsyncEnumerable<ExascaleDBNodeResource>
    {
        private readonly ClientDiagnostics _exascaleDbNodesClientDiagnostics;
        private readonly ExascaleDbNodes _exascaleDbNodesRestClient;

        /// <summary> Initializes a new instance of ExascaleDBNodeCollection for mocking. </summary>
        protected ExascaleDBNodeCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ExascaleDBNodeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ExascaleDBNodeCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ExascaleDBNodeResource.ResourceType, out string exascaleDBNodeApiVersion);
            _exascaleDbNodesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", ExascaleDBNodeResource.ResourceType.Namespace, Diagnostics);
            _exascaleDbNodesRestClient = new ExascaleDbNodes(_exascaleDbNodesClientDiagnostics, Pipeline, Endpoint, exascaleDBNodeApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Get a ExascaleDbNode. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ExascaleDBNodeResource>> GetAsync(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ExascaleDBNodeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a ExascaleDbNode. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ExascaleDBNodeResource> Get(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new ExascaleDBNodeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List ExascaleDbNode resources by ExadbVmCluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExascaleDBNodeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExascaleDBNodeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<ExascaleDBNodeData, ExascaleDBNodeResource>(new ExascaleDbNodesGetByParentAsyncCollectionResultOfT(_exascaleDbNodesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new ExascaleDBNodeResource(Client, data));
        }

        /// <summary> List ExascaleDbNode resources by ExadbVmCluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExascaleDBNodeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExascaleDBNodeResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<ExascaleDBNodeData, ExascaleDBNodeResource>(new ExascaleDbNodesGetByParentCollectionResultOfT(_exascaleDbNodesRestClient, Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, context), data => new ExascaleDBNodeResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<ExascaleDBNodeResource>> GetIfExistsAsync(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ExascaleDBNodeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ExascaleDBNodeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="exascaleDbNodeName"> The name of the ExascaleDbNode. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbNodeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbNodeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<ExascaleDBNodeResource> GetIfExists(string exascaleDbNodeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbNodeName, nameof(exascaleDbNodeName));

            using DiagnosticScope scope = _exascaleDbNodesClientDiagnostics.CreateScope("ExascaleDBNodeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _exascaleDbNodesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, Id.Name, exascaleDbNodeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<ExascaleDBNodeData> response = Response.FromValue(ExascaleDBNodeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<ExascaleDBNodeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new ExascaleDBNodeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ExascaleDBNodeResource> IEnumerable<ExascaleDBNodeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<ExascaleDBNodeResource> IAsyncEnumerable<ExascaleDBNodeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
