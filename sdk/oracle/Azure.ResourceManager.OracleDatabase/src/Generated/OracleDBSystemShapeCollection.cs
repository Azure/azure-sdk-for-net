// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="OracleDBSystemShapeResource"/> and their operations.
    /// Each <see cref="OracleDBSystemShapeResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="OracleDBSystemShapeCollection"/> instance call the GetOracleDBSystemShapes method from an instance of the parent resource.
    /// </summary>
    public partial class OracleDBSystemShapeCollection : ArmCollection, IEnumerable<OracleDBSystemShapeResource>, IAsyncEnumerable<OracleDBSystemShapeResource>
    {
        private readonly ClientDiagnostics _dbSystemShapesClientDiagnostics;
        private readonly DbSystemShapes _dbSystemShapesRestClient;
        /// <summary> The location. </summary>
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of OracleDBSystemShapeCollection for mocking. </summary>
        protected OracleDBSystemShapeCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="OracleDBSystemShapeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        /// <param name="location"> The location for the resource. </param>
        internal OracleDBSystemShapeCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            TryGetApiVersion(OracleDBSystemShapeResource.ResourceType, out string oracleDBSystemShapeApiVersion);
            _location = location;
            _dbSystemShapesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", OracleDBSystemShapeResource.ResourceType.Namespace, Diagnostics);
            _dbSystemShapesRestClient = new DbSystemShapes(_dbSystemShapesClientDiagnostics, Pipeline, Endpoint, oracleDBSystemShapeApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), id);
            }
        }

        /// <summary> Get a DbSystemShape. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<OracleDBSystemShapeResource>> GetAsync(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDBSystemShapeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DbSystemShape. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<OracleDBSystemShapeResource> Get(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDBSystemShapeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List DbSystemShape resources by SubscriptionLocationResource. </summary>
        /// <param name="zone"> Filters the result for the given Azure Availability Zone. </param>
        /// <param name="shapeAttribute"> Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleDBSystemShapeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OracleDBSystemShapeResource> GetAllAsync(string zone = default, string shapeAttribute = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<OracleDBSystemShapeData, OracleDBSystemShapeResource>(new DbSystemShapesGetByLocationAsyncCollectionResultOfT(
                _dbSystemShapesRestClient,
                Guid.Parse(Id.SubscriptionId),
                _location,
                zone,
                shapeAttribute,
                context), data => new OracleDBSystemShapeResource(Client, data));
        }

        /// <summary> List DbSystemShape resources by SubscriptionLocationResource. </summary>
        /// <param name="zone"> Filters the result for the given Azure Availability Zone. </param>
        /// <param name="shapeAttribute"> Filters the result for the given Shape Attribute, such as BLOCK_STORAGE or SMART_STORAGE. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OracleDBSystemShapeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OracleDBSystemShapeResource> GetAll(string zone = default, string shapeAttribute = default, CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<OracleDBSystemShapeData, OracleDBSystemShapeResource>(new DbSystemShapesGetByLocationCollectionResultOfT(
                _dbSystemShapesRestClient,
                Guid.Parse(Id.SubscriptionId),
                _location,
                zone,
                shapeAttribute,
                context), data => new OracleDBSystemShapeResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<OracleDBSystemShapeResource>> GetIfExistsAsync(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<OracleDBSystemShapeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDBSystemShapeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dbsystemshapename"> DbSystemShape name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dbsystemshapename"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dbsystemshapename"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<OracleDBSystemShapeResource> GetIfExists(string dbsystemshapename, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbsystemshapename, nameof(dbsystemshapename));

            using DiagnosticScope scope = _dbSystemShapesClientDiagnostics.CreateScope("OracleDBSystemShapeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dbSystemShapesRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, dbsystemshapename, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleDBSystemShapeData> response = Response.FromValue(OracleDBSystemShapeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<OracleDBSystemShapeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDBSystemShapeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OracleDBSystemShapeResource> IEnumerable<OracleDBSystemShapeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<OracleDBSystemShapeResource> IAsyncEnumerable<OracleDBSystemShapeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
