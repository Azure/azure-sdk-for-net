// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="AutonomousDatabaseCharacterSetResource"/> and their operations.
    /// Each <see cref="AutonomousDatabaseCharacterSetResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="AutonomousDatabaseCharacterSetCollection"/> instance call the GetAutonomousDatabaseCharacterSets method from an instance of the parent resource.
    /// </summary>
    public partial class AutonomousDatabaseCharacterSetCollection : ArmCollection, IEnumerable<AutonomousDatabaseCharacterSetResource>, IAsyncEnumerable<AutonomousDatabaseCharacterSetResource>
    {
        private readonly ClientDiagnostics _autonomousDatabaseCharacterSetsClientDiagnostics;
        private readonly AutonomousDatabaseCharacterSets _autonomousDatabaseCharacterSetsRestClient;
        /// <summary> The location. </summary>
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of AutonomousDatabaseCharacterSetCollection for mocking. </summary>
        protected AutonomousDatabaseCharacterSetCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AutonomousDatabaseCharacterSetCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        /// <param name="location"> The location for the resource. </param>
        internal AutonomousDatabaseCharacterSetCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            TryGetApiVersion(AutonomousDatabaseCharacterSetResource.ResourceType, out string autonomousDatabaseCharacterSetApiVersion);
            _location = location;
            _autonomousDatabaseCharacterSetsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", AutonomousDatabaseCharacterSetResource.ResourceType.Namespace, Diagnostics);
            _autonomousDatabaseCharacterSetsRestClient = new AutonomousDatabaseCharacterSets(_autonomousDatabaseCharacterSetsClientDiagnostics, Pipeline, Endpoint, autonomousDatabaseCharacterSetApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), id);
            }
        }

        /// <summary> Get a AutonomousDatabaseCharacterSet. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<AutonomousDatabaseCharacterSetResource>> GetAsync(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a AutonomousDatabaseCharacterSet. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<AutonomousDatabaseCharacterSetResource> Get(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List AutonomousDatabaseCharacterSet resources by SubscriptionLocationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseCharacterSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutonomousDatabaseCharacterSetResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<AutonomousDatabaseCharacterSetData, AutonomousDatabaseCharacterSetResource>(new AutonomousDatabaseCharacterSetsGetByLocationAsyncCollectionResultOfT(_autonomousDatabaseCharacterSetsRestClient, Guid.Parse(Id.SubscriptionId), _location, context), data => new AutonomousDatabaseCharacterSetResource(Client, data));
        }

        /// <summary> List AutonomousDatabaseCharacterSet resources by SubscriptionLocationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutonomousDatabaseCharacterSetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutonomousDatabaseCharacterSetResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<AutonomousDatabaseCharacterSetData, AutonomousDatabaseCharacterSetResource>(new AutonomousDatabaseCharacterSetsGetByLocationCollectionResultOfT(_autonomousDatabaseCharacterSetsRestClient, Guid.Parse(Id.SubscriptionId), _location, context), data => new AutonomousDatabaseCharacterSetResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<AutonomousDatabaseCharacterSetResource>> GetIfExistsAsync(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<AutonomousDatabaseCharacterSetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="adbscharsetname"> AutonomousDatabaseCharacterSet name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adbscharsetname"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="adbscharsetname"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<AutonomousDatabaseCharacterSetResource> GetIfExists(string adbscharsetname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adbscharsetname, nameof(adbscharsetname));

            using DiagnosticScope scope = _autonomousDatabaseCharacterSetsClientDiagnostics.CreateScope("AutonomousDatabaseCharacterSetCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _autonomousDatabaseCharacterSetsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), _location, adbscharsetname, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<AutonomousDatabaseCharacterSetData> response = Response.FromValue(AutonomousDatabaseCharacterSetData.FromResponse(result), result);
                if (response.Value == null)
                {
                    return new NoValueResponse<AutonomousDatabaseCharacterSetResource>(response.GetRawResponse());
                }
                return Response.FromValue(new AutonomousDatabaseCharacterSetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AutonomousDatabaseCharacterSetResource> IEnumerable<AutonomousDatabaseCharacterSetResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<AutonomousDatabaseCharacterSetResource> IAsyncEnumerable<AutonomousDatabaseCharacterSetResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
