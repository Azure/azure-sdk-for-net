// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="ExascaleDbStorageVaultResource"/> and their operations.
    /// Each <see cref="ExascaleDbStorageVaultResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="ExascaleDbStorageVaultCollection"/> instance call the GetExascaleDbStorageVaults method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class ExascaleDbStorageVaultCollection : ArmCollection, IEnumerable<ExascaleDbStorageVaultResource>, IAsyncEnumerable<ExascaleDbStorageVaultResource>
    {
        private readonly ClientDiagnostics _exascaleDbStorageVaultClientDiagnostics;
        private readonly ExascaleDbStorageVaultsRestOperations _exascaleDbStorageVaultRestClient;

        /// <summary> Initializes a new instance of the <see cref="ExascaleDbStorageVaultCollection"/> class for mocking. </summary>
        protected ExascaleDbStorageVaultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ExascaleDbStorageVaultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ExascaleDbStorageVaultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _exascaleDbStorageVaultClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", ExascaleDbStorageVaultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ExascaleDbStorageVaultResource.ResourceType, out string exascaleDbStorageVaultApiVersion);
            _exascaleDbStorageVaultRestClient = new ExascaleDbStorageVaultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, exascaleDbStorageVaultApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a ExascaleDbStorageVault
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ExascaleDbStorageVaultResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string exascaleDbStorageVaultName, ExascaleDbStorageVaultData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _exascaleDbStorageVaultRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, data, cancellationToken).ConfigureAwait(false);
                var operation = new OracleDatabaseArmOperation<ExascaleDbStorageVaultResource>(new ExascaleDbStorageVaultOperationSource(Client), _exascaleDbStorageVaultClientDiagnostics, Pipeline, _exascaleDbStorageVaultRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ExascaleDbStorageVault
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ExascaleDbStorageVaultResource> CreateOrUpdate(WaitUntil waitUntil, string exascaleDbStorageVaultName, ExascaleDbStorageVaultData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _exascaleDbStorageVaultRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, data, cancellationToken);
                var operation = new OracleDatabaseArmOperation<ExascaleDbStorageVaultResource>(new ExascaleDbStorageVaultOperationSource(Client), _exascaleDbStorageVaultClientDiagnostics, Pipeline, _exascaleDbStorageVaultRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ExascaleDbStorageVault
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual async Task<Response<ExascaleDbStorageVaultResource>> GetAsync(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.Get");
            scope.Start();
            try
            {
                var response = await _exascaleDbStorageVaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ExascaleDbStorageVaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ExascaleDbStorageVault
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual Response<ExascaleDbStorageVaultResource> Get(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.Get");
            scope.Start();
            try
            {
                var response = _exascaleDbStorageVaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ExascaleDbStorageVaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List ExascaleDbStorageVault resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExascaleDbStorageVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExascaleDbStorageVaultResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _exascaleDbStorageVaultRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _exascaleDbStorageVaultRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ExascaleDbStorageVaultResource(Client, ExascaleDbStorageVaultData.DeserializeExascaleDbStorageVaultData(e)), _exascaleDbStorageVaultClientDiagnostics, Pipeline, "ExascaleDbStorageVaultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ExascaleDbStorageVault resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExascaleDbStorageVaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExascaleDbStorageVaultResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _exascaleDbStorageVaultRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _exascaleDbStorageVaultRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ExascaleDbStorageVaultResource(Client, ExascaleDbStorageVaultData.DeserializeExascaleDbStorageVaultData(e)), _exascaleDbStorageVaultClientDiagnostics, Pipeline, "ExascaleDbStorageVaultCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _exascaleDbStorageVaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual Response<bool> Exists(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.Exists");
            scope.Start();
            try
            {
                var response = _exascaleDbStorageVaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual async Task<NullableResponse<ExascaleDbStorageVaultResource>> GetIfExistsAsync(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _exascaleDbStorageVaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ExascaleDbStorageVaultResource>(response.GetRawResponse());
                return Response.FromValue(new ExascaleDbStorageVaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/exascaleDbStorageVaults/{exascaleDbStorageVaultName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExascaleDbStorageVault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExascaleDbStorageVaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="exascaleDbStorageVaultName"> The name of the ExascaleDbStorageVault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="exascaleDbStorageVaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="exascaleDbStorageVaultName"/> is null. </exception>
        public virtual NullableResponse<ExascaleDbStorageVaultResource> GetIfExists(string exascaleDbStorageVaultName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(exascaleDbStorageVaultName, nameof(exascaleDbStorageVaultName));

            using var scope = _exascaleDbStorageVaultClientDiagnostics.CreateScope("ExascaleDbStorageVaultCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _exascaleDbStorageVaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, exascaleDbStorageVaultName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ExascaleDbStorageVaultResource>(response.GetRawResponse());
                return Response.FromValue(new ExascaleDbStorageVaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ExascaleDbStorageVaultResource> IEnumerable<ExascaleDbStorageVaultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ExascaleDbStorageVaultResource> IAsyncEnumerable<ExascaleDbStorageVaultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
