// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a OracleDnsPrivateView along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="OracleDnsPrivateViewResource"/> from an instance of <see cref="ArmClient"/> using the GetResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource"/> using the GetOracleDnsPrivateViews method.
    /// </summary>
    public partial class OracleDnsPrivateViewResource : ArmResource
    {
        private readonly ClientDiagnostics _dnsPrivateViewsClientDiagnostics;
        private readonly DnsPrivateViews _dnsPrivateViewsRestClient;
        private readonly OracleDnsPrivateViewData _data;
        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Oracle.Database/locations/dnsPrivateViews";

        /// <summary> Initializes a new instance of OracleDnsPrivateViewResource for mocking. </summary>
        protected OracleDnsPrivateViewResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="OracleDnsPrivateViewResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal OracleDnsPrivateViewResource(ArmClient client, OracleDnsPrivateViewData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of <see cref="OracleDnsPrivateViewResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal OracleDnsPrivateViewResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(ResourceType, out string oracleDnsPrivateViewApiVersion);
            _dnsPrivateViewsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", ResourceType.Namespace, Diagnostics);
            _dnsPrivateViewsRestClient = new DnsPrivateViews(_dnsPrivateViewsClientDiagnostics, Pipeline, Endpoint, oracleDnsPrivateViewApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        public virtual OracleDnsPrivateViewData Data
        {
            get
            {
                if (!HasData)
                {
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                }
                return _data;
            }
        }

        /// <summary> Generate the resource identifier for this resource. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="location"> The location. </param>
        /// <param name="dnsprivateviewocid"> The dnsprivateviewocid. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, AzureLocation location, string dnsprivateviewocid)
        {
            string resourceId = $"/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dnsPrivateViews/{dnsprivateviewocid}";
            return new ResourceIdentifier(resourceId);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), id);
            }
        }

        /// <summary> Get a DnsPrivateView. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OracleDnsPrivateViewResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _dnsPrivateViewsClientDiagnostics.CreateScope("OracleDnsPrivateViewResource.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dnsPrivateViewsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<OracleDnsPrivateViewData> response = Response.FromValue(OracleDnsPrivateViewData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDnsPrivateViewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a DnsPrivateView. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OracleDnsPrivateViewResource> Get(CancellationToken cancellationToken = default)
        {
            using DiagnosticScope scope = _dnsPrivateViewsClientDiagnostics.CreateScope("OracleDnsPrivateViewResource.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _dnsPrivateViewsRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.Parent.Name, Id.Name, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<OracleDnsPrivateViewData> response = Response.FromValue(OracleDnsPrivateViewData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new OracleDnsPrivateViewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
