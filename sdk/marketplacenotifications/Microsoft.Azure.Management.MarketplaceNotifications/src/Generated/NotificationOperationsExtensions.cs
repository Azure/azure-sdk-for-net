// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MarketplaceNotifications
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NotificationOperations.
    /// </summary>
    public static partial class NotificationOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscription'>
            /// user's subscription id
            /// </param>
            /// <param name='notification'>
            /// the notification id
            /// </param>
            /// <param name='principalId'>
            /// user's principal id
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the request.
            /// </param>
            public static Notification GetWithAuthorization(this INotificationOperations operations, string subscription, string notification, string principalId, string apiVersion)
            {
                return operations.GetWithAuthorizationAsync(subscription, notification, principalId, apiVersion).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscription'>
            /// user's subscription id
            /// </param>
            /// <param name='notification'>
            /// the notification id
            /// </param>
            /// <param name='principalId'>
            /// user's principal id
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Notification> GetWithAuthorizationAsync(this INotificationOperations operations, string subscription, string notification, string principalId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithAuthorizationWithHttpMessagesAsync(subscription, notification, principalId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the request.
            /// </param>
            public static IPage<OperationDetail> GetOperations(this INotificationOperations operations, string apiVersion)
            {
                return operations.GetOperationsAsync(apiVersion).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationDetail>> GetOperationsAsync(this INotificationOperations operations, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationsWithHttpMessagesAsync(apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OperationDetail> GetOperationsNext(this INotificationOperations operations, string nextPageLink)
            {
                return operations.GetOperationsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationDetail>> GetOperationsNextAsync(this INotificationOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
