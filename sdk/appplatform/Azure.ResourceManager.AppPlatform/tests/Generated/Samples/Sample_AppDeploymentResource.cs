// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    public partial class Sample_AppDeploymentResource
    {
        // Deployments_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DeploymentsGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Get.json
            // this example is just showing the usage of "Deployments_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            AppDeploymentResource result = await appDeploymentResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppDeploymentResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deployments_Get_CustomContainer
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DeploymentsGetCustomContainer()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Get_CustomContainer.json
            // this example is just showing the usage of "Deployments_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            AppDeploymentResource result = await appDeploymentResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppDeploymentResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deployments_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeploymentsDelete()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Delete.json
            // this example is just showing the usage of "Deployments_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            await appDeploymentResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DeploymentsUpdate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Update.json
            // this example is just showing the usage of "Deployments_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            AppDeploymentResourceData data = new AppDeploymentResourceData()
            {
                Properties = new DeploymentResourceProperties()
                {
                    Source = new UserSourceInfo()
                    {
                        UserSourceInfoType = "Source",
                        Version = "1.0",
                    },
                },
            };
            ArmOperation<AppDeploymentResource> lro = await appDeploymentResource.UpdateAsync(WaitUntil.Completed, data);
            AppDeploymentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppDeploymentResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deployments_Update_CustomContainer
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DeploymentsUpdateCustomContainer()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Update_CustomContainer.json
            // this example is just showing the usage of "Deployments_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            AppDeploymentResourceData data = new AppDeploymentResourceData()
            {
                Properties = new DeploymentResourceProperties()
                {
                    Source = new UserSourceInfo()
                    {
                        UserSourceInfoType = "Container",
                    },
                },
            };
            ArmOperation<AppDeploymentResource> lro = await appDeploymentResource.UpdateAsync(WaitUntil.Completed, data);
            AppDeploymentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppDeploymentResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deployments_Start
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_DeploymentsStart()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Start.json
            // this example is just showing the usage of "Deployments_Start" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            await appDeploymentResource.StartAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_Stop
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_DeploymentsStop()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Stop.json
            // this example is just showing the usage of "Deployments_Stop" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            await appDeploymentResource.StopAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_Restart
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Restart_DeploymentsRestart()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_Restart.json
            // this example is just showing the usage of "Deployments_Restart" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            await appDeploymentResource.RestartAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_GetLogFileUrl
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetLogFileUri_DeploymentsGetLogFileUrl()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_GetLogFileUrl.json
            // this example is just showing the usage of "Deployments_GetLogFileUrl" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            LogFileUriResult result = await appDeploymentResource.GetLogFileUriAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Deployments_GenerateHeapDump
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateHeapDump_DeploymentsGenerateHeapDump()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_GenerateHeapDump.json
            // this example is just showing the usage of "Deployments_GenerateHeapDump" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            DiagnosticContent content = new DiagnosticContent()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
            };
            await appDeploymentResource.GenerateHeapDumpAsync(WaitUntil.Completed, content);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_GenerateHeapDump
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateThreadDump_DeploymentsGenerateHeapDump()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_GenerateThreadDump.json
            // this example is just showing the usage of "Deployments_GenerateThreadDump" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            DiagnosticContent content = new DiagnosticContent()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
            };
            await appDeploymentResource.GenerateThreadDumpAsync(WaitUntil.Completed, content);

            Console.WriteLine($"Succeeded");
        }

        // Deployments_StartJFR
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task StartJfr_DeploymentsStartJFR()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Deployments_StartJFR.json
            // this example is just showing the usage of "Deployments_StartJFR" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this AppDeploymentResource created on azure
            // for more information of creating AppDeploymentResource, please refer to the document of AppDeploymentResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string appName = "myapp";
            string deploymentName = "mydeployment";
            ResourceIdentifier appDeploymentResourceId = AppDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, appName, deploymentName);
            AppDeploymentResource appDeploymentResource = client.GetAppDeploymentResource(appDeploymentResourceId);

            // invoke the operation
            DiagnosticContent content = new DiagnosticContent()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
                DurationValue = "60s",
            };
            await appDeploymentResource.StartJfrAsync(WaitUntil.Completed, content);

            Console.WriteLine($"Succeeded");
        }
    }
}
