// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    public partial class Sample_MonitoringSettingResource
    {
        // MonitoringSettings_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_MonitoringSettingsGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/MonitoringSettings_Get.json
            // this example is just showing the usage of "MonitoringSettings_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this MonitoringSettingResource created on azure
            // for more information of creating MonitoringSettingResource, please refer to the document of MonitoringSettingResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier monitoringSettingResourceId = MonitoringSettingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            MonitoringSettingResource monitoringSettingResource = client.GetMonitoringSettingResource(monitoringSettingResourceId);

            // invoke the operation
            MonitoringSettingResource result = await monitoringSettingResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MonitoringSettingResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // MonitoringSettings_UpdatePut
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_MonitoringSettingsUpdatePut()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/MonitoringSettings_UpdatePut.json
            // this example is just showing the usage of "MonitoringSettings_UpdatePut" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this MonitoringSettingResource created on azure
            // for more information of creating MonitoringSettingResource, please refer to the document of MonitoringSettingResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier monitoringSettingResourceId = MonitoringSettingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            MonitoringSettingResource monitoringSettingResource = client.GetMonitoringSettingResource(monitoringSettingResourceId);

            // invoke the operation
            MonitoringSettingResourceData data = new MonitoringSettingResourceData()
            {
                Properties = new MonitoringSettingProperties()
                {
                    TraceEnabled = true,
                    AppInsightsInstrumentationKey = "00000000-0000-0000-0000-000000000000",
                    AppInsightsSamplingRate = 10,
                },
            };
            ArmOperation<MonitoringSettingResource> lro = await monitoringSettingResource.CreateOrUpdateAsync(WaitUntil.Completed, data);
            MonitoringSettingResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MonitoringSettingResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // MonitoringSettings_UpdatePatch
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_MonitoringSettingsUpdatePatch()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/MonitoringSettings_UpdatePatch.json
            // this example is just showing the usage of "MonitoringSettings_UpdatePatch" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this MonitoringSettingResource created on azure
            // for more information of creating MonitoringSettingResource, please refer to the document of MonitoringSettingResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier monitoringSettingResourceId = MonitoringSettingResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            MonitoringSettingResource monitoringSettingResource = client.GetMonitoringSettingResource(monitoringSettingResourceId);

            // invoke the operation
            MonitoringSettingResourceData data = new MonitoringSettingResourceData()
            {
                Properties = new MonitoringSettingProperties()
                {
                    TraceEnabled = true,
                    AppInsightsInstrumentationKey = "00000000-0000-0000-0000-000000000000",
                    AppInsightsSamplingRate = 10,
                },
            };
            ArmOperation<MonitoringSettingResource> lro = await monitoringSettingResource.UpdateAsync(WaitUntil.Completed, data);
            MonitoringSettingResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MonitoringSettingResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
