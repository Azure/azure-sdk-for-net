// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    public partial class Sample_ConfigServerResource
    {
        // ConfigServers_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ConfigServersGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ConfigServers_Get.json
            // this example is just showing the usage of "ConfigServers_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConfigServerResource created on azure
            // for more information of creating ConfigServerResource, please refer to the document of ConfigServerResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier configServerResourceId = ConfigServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            ConfigServerResource configServerResource = client.GetConfigServerResource(configServerResourceId);

            // invoke the operation
            ConfigServerResource result = await configServerResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConfigServerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfigServers_UpdatePut
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_ConfigServersUpdatePut()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ConfigServers_UpdatePut.json
            // this example is just showing the usage of "ConfigServers_UpdatePut" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConfigServerResource created on azure
            // for more information of creating ConfigServerResource, please refer to the document of ConfigServerResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier configServerResourceId = ConfigServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            ConfigServerResource configServerResource = client.GetConfigServerResource(configServerResourceId);

            // invoke the operation
            ConfigServerResourceData data = new ConfigServerResourceData()
            {
                Properties = new ConfigServerProperties()
                {
                    ConfigServerGitProperty = new ConfigServerGitProperty(new Uri("https://github.com/fake-user/fake-repository.git"))
                    {
                        Label = "master",
                        SearchPaths =
{
"/"
},
                    },
                },
            };
            ArmOperation<ConfigServerResource> lro = await configServerResource.CreateOrUpdateAsync(WaitUntil.Completed, data);
            ConfigServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConfigServerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ConfigServers_UpdatePatch
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ConfigServersUpdatePatch()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ConfigServers_UpdatePatch.json
            // this example is just showing the usage of "ConfigServers_UpdatePatch" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ConfigServerResource created on azure
            // for more information of creating ConfigServerResource, please refer to the document of ConfigServerResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            ResourceIdentifier configServerResourceId = ConfigServerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName);
            ConfigServerResource configServerResource = client.GetConfigServerResource(configServerResourceId);

            // invoke the operation
            ConfigServerResourceData data = new ConfigServerResourceData()
            {
                Properties = new ConfigServerProperties()
                {
                    ConfigServerGitProperty = new ConfigServerGitProperty(new Uri("https://github.com/fake-user/fake-repository.git"))
                    {
                        Label = "master",
                        SearchPaths =
{
"/"
},
                    },
                },
            };
            ArmOperation<ConfigServerResource> lro = await configServerResource.UpdateAsync(WaitUntil.Completed, data);
            ConfigServerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ConfigServerResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
