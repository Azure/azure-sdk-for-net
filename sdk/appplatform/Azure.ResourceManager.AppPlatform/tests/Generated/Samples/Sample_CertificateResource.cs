// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    public partial class Sample_CertificateResource
    {
        // Certificates_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_CertificatesGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Certificates_Get.json
            // this example is just showing the usage of "Certificates_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CertificateResource created on azure
            // for more information of creating CertificateResource, please refer to the document of CertificateResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string certificateName = "mycertificate";
            ResourceIdentifier certificateResourceId = CertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, certificateName);
            CertificateResource certificateResource = client.GetCertificateResource(certificateResourceId);

            // invoke the operation
            CertificateResource result = await certificateResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Certificates_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CertificatesCreateOrUpdate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Certificates_CreateOrUpdate.json
            // this example is just showing the usage of "Certificates_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CertificateResource created on azure
            // for more information of creating CertificateResource, please refer to the document of CertificateResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string certificateName = "mycertificate";
            ResourceIdentifier certificateResourceId = CertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, certificateName);
            CertificateResource certificateResource = client.GetCertificateResource(certificateResourceId);

            // invoke the operation
            CertificateResourceData data = new CertificateResourceData()
            {
                Properties = new CertificateProperties()
                {
                    CertificatePropertiesType = "KeyVaultCertificate",
                },
            };
            ArmOperation<CertificateResource> lro = await certificateResource.UpdateAsync(WaitUntil.Completed, data);
            CertificateResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            CertificateResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Certificates_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_CertificatesDelete()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/Certificates_Delete.json
            // this example is just showing the usage of "Certificates_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this CertificateResource created on azure
            // for more information of creating CertificateResource, please refer to the document of CertificateResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string certificateName = "mycertificate";
            ResourceIdentifier certificateResourceId = CertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, certificateName);
            CertificateResource certificateResource = client.GetCertificateResource(certificateResourceId);

            // invoke the operation
            await certificateResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
