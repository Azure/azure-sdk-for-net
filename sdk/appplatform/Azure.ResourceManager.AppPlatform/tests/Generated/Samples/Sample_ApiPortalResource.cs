// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    public partial class Sample_ApiPortalResource
    {
        // ApiPortals_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ApiPortalsGet()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ApiPortals_Get.json
            // this example is just showing the usage of "ApiPortals_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ApiPortalResource created on azure
            // for more information of creating ApiPortalResource, please refer to the document of ApiPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string apiPortalName = "default";
            ResourceIdentifier apiPortalResourceId = ApiPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, apiPortalName);
            ApiPortalResource apiPortalResource = client.GetApiPortalResource(apiPortalResourceId);

            // invoke the operation
            ApiPortalResource result = await apiPortalResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiPortalResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ApiPortals_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ApiPortalsCreateOrUpdate()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ApiPortals_CreateOrUpdate.json
            // this example is just showing the usage of "ApiPortals_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ApiPortalResource created on azure
            // for more information of creating ApiPortalResource, please refer to the document of ApiPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string apiPortalName = "default";
            ResourceIdentifier apiPortalResourceId = ApiPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, apiPortalName);
            ApiPortalResource apiPortalResource = client.GetApiPortalResource(apiPortalResourceId);

            // invoke the operation
            ApiPortalResourceData data = new ApiPortalResourceData()
            {
                Properties = new ApiPortalProperties()
                {
                    Public = true,
                    GatewayIds =
{
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/gateways/default"
},
                },
                Sku = new AppPlatformSku()
                {
                    Name = "E0",
                    Tier = "Enterprise",
                    Capacity = 2,
                },
            };
            ArmOperation<ApiPortalResource> lro = await apiPortalResource.UpdateAsync(WaitUntil.Completed, data);
            ApiPortalResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ApiPortalResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ApiPortals_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ApiPortalsDelete()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ApiPortals_Delete.json
            // this example is just showing the usage of "ApiPortals_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ApiPortalResource created on azure
            // for more information of creating ApiPortalResource, please refer to the document of ApiPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string apiPortalName = "default";
            ResourceIdentifier apiPortalResourceId = ApiPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, apiPortalName);
            ApiPortalResource apiPortalResource = client.GetApiPortalResource(apiPortalResourceId);

            // invoke the operation
            await apiPortalResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // ApiPortals_ValidateDomain
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ValidateDomain_ApiPortalsValidateDomain()
        {
            // Generated from example definition: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-03-01-preview/examples/ApiPortals_ValidateDomain.json
            // this example is just showing the usage of "ApiPortals_ValidateDomain" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ApiPortalResource created on azure
            // for more information of creating ApiPortalResource, please refer to the document of ApiPortalResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string serviceName = "myservice";
            string apiPortalName = "default";
            ResourceIdentifier apiPortalResourceId = ApiPortalResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serviceName, apiPortalName);
            ApiPortalResource apiPortalResource = client.GetApiPortalResource(apiPortalResourceId);

            // invoke the operation
            CustomDomainValidatePayload validatePayload = new CustomDomainValidatePayload("mydomain.io");
            CustomDomainValidateResult result = await apiPortalResource.ValidateDomainAsync(validatePayload);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
