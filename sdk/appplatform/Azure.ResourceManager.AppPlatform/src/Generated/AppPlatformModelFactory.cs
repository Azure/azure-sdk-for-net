// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.AppPlatform;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class AppPlatformModelFactory
    {
        /// <summary> Initializes a new instance of AppPlatformServiceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Properties of the Service resource. </param>
        /// <param name="sku"> Sku of the Service resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppPlatformServiceResourceData"/> instance for mocking. </returns>
        public static AppPlatformServiceResourceData AppPlatformServiceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ClusterResourceProperties properties = null, AppPlatformSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AppPlatformServiceResourceData(id, name, resourceType, systemData, tags, location, properties, sku);
        }

        /// <summary> Initializes a new instance of ClusterResourceProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the Service. </param>
        /// <param name="networkProfile"> Network profile of the Service. </param>
        /// <param name="version"> Version of the Service. </param>
        /// <param name="serviceId"> ServiceInstanceEntity GUID which uniquely identifies a created resource. </param>
        /// <param name="powerState"> Power state of the Service. </param>
        /// <param name="zoneRedundant"></param>
        /// <param name="fqdn"> Fully qualified dns name of the service instance. </param>
        /// <returns> A new <see cref="Models.ClusterResourceProperties"/> instance for mocking. </returns>
        public static ClusterResourceProperties ClusterResourceProperties(ProvisioningState? provisioningState = null, NetworkProfile networkProfile = null, int? version = null, string serviceId = null, PowerState? powerState = null, bool? zoneRedundant = null, string fqdn = null)
        {
            return new ClusterResourceProperties(provisioningState, networkProfile, version, serviceId, powerState, zoneRedundant, fqdn);
        }

        /// <summary> Initializes a new instance of NetworkProfile. </summary>
        /// <param name="serviceRuntimeSubnetId"> Fully qualified resource Id of the subnet to host Azure Spring Cloud Service Runtime. </param>
        /// <param name="appSubnetId"> Fully qualified resource Id of the subnet to host Azure Spring Cloud Apps. </param>
        /// <param name="serviceCidr"> Azure Spring Cloud service reserved CIDR. </param>
        /// <param name="serviceRuntimeNetworkResourceGroup"> Name of the resource group containing network resources of Azure Spring Cloud Service Runtime. </param>
        /// <param name="appNetworkResourceGroup"> Name of the resource group containing network resources of Azure Spring Cloud Apps. </param>
        /// <param name="outboundPublicIPs"> Desired outbound IP resources for Azure Spring Cloud instance. </param>
        /// <param name="requiredTraffics"> Required inbound or outbound traffics for Azure Spring Cloud instance. </param>
        /// <returns> A new <see cref="Models.NetworkProfile"/> instance for mocking. </returns>
        public static NetworkProfile NetworkProfile(ResourceIdentifier serviceRuntimeSubnetId = null, ResourceIdentifier appSubnetId = null, string serviceCidr = null, string serviceRuntimeNetworkResourceGroup = null, string appNetworkResourceGroup = null, IEnumerable<string> outboundPublicIPs = null, IEnumerable<RequiredTraffic> requiredTraffics = null)
        {
            outboundPublicIPs ??= new List<string>();
            requiredTraffics ??= new List<RequiredTraffic>();

            return new NetworkProfile(serviceRuntimeSubnetId, appSubnetId, serviceCidr, serviceRuntimeNetworkResourceGroup, appNetworkResourceGroup, new NetworkProfileOutboundIPs(outboundPublicIPs?.ToList()), requiredTraffics?.ToList());
        }

        /// <summary> Initializes a new instance of RequiredTraffic. </summary>
        /// <param name="protocol"> The protocol of required traffic. </param>
        /// <param name="port"> The port of required traffic. </param>
        /// <param name="ips"> The ip list of required traffic. </param>
        /// <param name="fqdns"> The FQDN list of required traffic. </param>
        /// <param name="direction"> The direction of required traffic. </param>
        /// <returns> A new <see cref="Models.RequiredTraffic"/> instance for mocking. </returns>
        public static RequiredTraffic RequiredTraffic(string protocol = null, int? port = null, IEnumerable<string> ips = null, IEnumerable<string> fqdns = null, TrafficDirection? direction = null)
        {
            ips ??= new List<string>();
            fqdns ??= new List<string>();

            return new RequiredTraffic(protocol, port, ips?.ToList(), fqdns?.ToList(), direction);
        }

        /// <summary> Initializes a new instance of AppPlatformSku. </summary>
        /// <param name="name"> Name of the Sku. </param>
        /// <param name="tier"> Tier of the Sku. </param>
        /// <param name="capacity"> Current capacity of the target resource. </param>
        /// <returns> A new <see cref="Models.AppPlatformSku"/> instance for mocking. </returns>
        public static AppPlatformSku AppPlatformSku(string name = null, string tier = null, int? capacity = null)
        {
            return new AppPlatformSku(name, tier, capacity);
        }

        /// <summary> Initializes a new instance of TestKeys. </summary>
        /// <param name="primaryKey"> Primary key. </param>
        /// <param name="secondaryKey"> Secondary key. </param>
        /// <param name="primaryTestEndpoint"> Primary test endpoint. </param>
        /// <param name="secondaryTestEndpoint"> Secondary test endpoint. </param>
        /// <param name="enabled"> Indicates whether the test endpoint feature enabled or not. </param>
        /// <returns> A new <see cref="Models.TestKeys"/> instance for mocking. </returns>
        public static TestKeys TestKeys(string primaryKey = null, string secondaryKey = null, string primaryTestEndpoint = null, string secondaryTestEndpoint = null, bool? enabled = null)
        {
            return new TestKeys(primaryKey, secondaryKey, primaryTestEndpoint, secondaryTestEndpoint, enabled);
        }

        /// <summary> Initializes a new instance of ConfigServerResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the Config Server resource. </param>
        /// <returns> A new <see cref="AppPlatform.ConfigServerResourceData"/> instance for mocking. </returns>
        public static ConfigServerResourceData ConfigServerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ConfigServerProperties properties = null)
        {
            return new ConfigServerResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ConfigServerProperties. </summary>
        /// <param name="provisioningState"> State of the config server. </param>
        /// <param name="error"> Error when apply config server settings. </param>
        /// <param name="configServerGitProperty"> Settings of config server. </param>
        /// <returns> A new <see cref="Models.ConfigServerProperties"/> instance for mocking. </returns>
        public static ConfigServerProperties ConfigServerProperties(ConfigServerState? provisioningState = null, AppPlatformErrorInfo error = null, ConfigServerGitProperty configServerGitProperty = null)
        {
            return new ConfigServerProperties(provisioningState, error, new ConfigServerSettings(configServerGitProperty));
        }

        /// <summary> Initializes a new instance of AppPlatformErrorInfo. </summary>
        /// <param name="code"> The code of error. </param>
        /// <param name="message"> The message of error. </param>
        /// <returns> A new <see cref="Models.AppPlatformErrorInfo"/> instance for mocking. </returns>
        public static AppPlatformErrorInfo AppPlatformErrorInfo(string code = null, string message = null)
        {
            return new AppPlatformErrorInfo(code, message);
        }

        /// <summary> Initializes a new instance of ConfigServerSettings. </summary>
        /// <param name="gitProperty"> Property of git environment. </param>
        /// <returns> A new <see cref="Models.ConfigServerSettings"/> instance for mocking. </returns>
        public static ConfigServerSettings ConfigServerSettings(ConfigServerGitProperty gitProperty = null)
        {
            return new ConfigServerSettings(gitProperty);
        }

        /// <summary> Initializes a new instance of ConfigServerGitProperty. </summary>
        /// <param name="repositories"> Repositories of git. </param>
        /// <param name="uri"> URI of the repository. </param>
        /// <param name="label"> Label of the repository. </param>
        /// <param name="searchPaths"> Searching path of the repository. </param>
        /// <param name="username"> Username of git repository basic auth. </param>
        /// <param name="password"> Password of git repository basic auth. </param>
        /// <param name="hostKey"> Public sshKey of git repository. </param>
        /// <param name="hostKeyAlgorithm"> SshKey algorithm of git repository. </param>
        /// <param name="privateKey"> Private sshKey algorithm of git repository. </param>
        /// <param name="strictHostKeyChecking"> Strict host key checking or not. </param>
        /// <returns> A new <see cref="Models.ConfigServerGitProperty"/> instance for mocking. </returns>
        public static ConfigServerGitProperty ConfigServerGitProperty(IEnumerable<GitPatternRepository> repositories = null, Uri uri = null, string label = null, IEnumerable<string> searchPaths = null, string username = null, string password = null, string hostKey = null, string hostKeyAlgorithm = null, string privateKey = null, bool? strictHostKeyChecking = null)
        {
            repositories ??= new List<GitPatternRepository>();
            searchPaths ??= new List<string>();

            return new ConfigServerGitProperty(repositories?.ToList(), uri, label, searchPaths?.ToList(), username, password, hostKey, hostKeyAlgorithm, privateKey, strictHostKeyChecking);
        }

        /// <summary> Initializes a new instance of GitPatternRepository. </summary>
        /// <param name="name"> Name of the repository. </param>
        /// <param name="pattern"> Collection of pattern of the repository. </param>
        /// <param name="uri"> URI of the repository. </param>
        /// <param name="label"> Label of the repository. </param>
        /// <param name="searchPaths"> Searching path of the repository. </param>
        /// <param name="username"> Username of git repository basic auth. </param>
        /// <param name="password"> Password of git repository basic auth. </param>
        /// <param name="hostKey"> Public sshKey of git repository. </param>
        /// <param name="hostKeyAlgorithm"> SshKey algorithm of git repository. </param>
        /// <param name="privateKey"> Private sshKey algorithm of git repository. </param>
        /// <param name="strictHostKeyChecking"> Strict host key checking or not. </param>
        /// <returns> A new <see cref="Models.GitPatternRepository"/> instance for mocking. </returns>
        public static GitPatternRepository GitPatternRepository(string name = null, IEnumerable<string> pattern = null, Uri uri = null, string label = null, IEnumerable<string> searchPaths = null, string username = null, string password = null, string hostKey = null, string hostKeyAlgorithm = null, string privateKey = null, bool? strictHostKeyChecking = null)
        {
            pattern ??= new List<string>();
            searchPaths ??= new List<string>();

            return new GitPatternRepository(name, pattern?.ToList(), uri, label, searchPaths?.ToList(), username, password, hostKey, hostKeyAlgorithm, privateKey, strictHostKeyChecking);
        }

        /// <summary> Initializes a new instance of ConfigServerSettingsValidateResult. </summary>
        /// <param name="isValid"> Indicate if the config server settings are valid. </param>
        /// <param name="details"> The detail validation results. </param>
        /// <returns> A new <see cref="Models.ConfigServerSettingsValidateResult"/> instance for mocking. </returns>
        public static ConfigServerSettingsValidateResult ConfigServerSettingsValidateResult(bool? isValid = null, IEnumerable<ConfigServerSettingsErrorRecord> details = null)
        {
            details ??= new List<ConfigServerSettingsErrorRecord>();

            return new ConfigServerSettingsValidateResult(isValid, details?.ToList());
        }

        /// <summary> Initializes a new instance of ConfigServerSettingsErrorRecord. </summary>
        /// <param name="name"> The name of the config server settings error record. </param>
        /// <param name="uri"> The uri of the config server settings error record. </param>
        /// <param name="messages"> The detail error messages of the record. </param>
        /// <returns> A new <see cref="Models.ConfigServerSettingsErrorRecord"/> instance for mocking. </returns>
        public static ConfigServerSettingsErrorRecord ConfigServerSettingsErrorRecord(string name = null, Uri uri = null, IEnumerable<string> messages = null)
        {
            messages ??= new List<string>();

            return new ConfigServerSettingsErrorRecord(name, uri, messages?.ToList());
        }

        /// <summary> Initializes a new instance of ConfigurationServiceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Application Configuration Service properties payload. </param>
        /// <returns> A new <see cref="AppPlatform.ConfigurationServiceResourceData"/> instance for mocking. </returns>
        public static ConfigurationServiceResourceData ConfigurationServiceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ConfigurationServiceProperties properties = null)
        {
            return new ConfigurationServiceResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ConfigurationServiceProperties. </summary>
        /// <param name="provisioningState"> State of the Application Configuration Service. </param>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. </param>
        /// <param name="instances"> Collection of instances belong to Application Configuration Service. </param>
        /// <param name="gitPropertyRepositories"> The settings of Application Configuration Service. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceProperties"/> instance for mocking. </returns>
        public static ConfigurationServiceProperties ConfigurationServiceProperties(ConfigurationServiceProvisioningState? provisioningState = null, ConfigurationServiceResourceRequests resourceRequests = null, IEnumerable<ConfigurationServiceInstance> instances = null, IEnumerable<ConfigurationServiceGitRepository> gitPropertyRepositories = null)
        {
            instances ??= new List<ConfigurationServiceInstance>();
            gitPropertyRepositories ??= new List<ConfigurationServiceGitRepository>();

            return new ConfigurationServiceProperties(provisioningState, resourceRequests, instances?.ToList(), new ConfigurationServiceSettings(new ConfigurationServiceGitProperty(gitPropertyRepositories?.ToList())));
        }

        /// <summary> Initializes a new instance of ConfigurationServiceResourceRequests. </summary>
        /// <param name="cpu"> Cpu allocated to each Application Configuration Service instance. </param>
        /// <param name="memory"> Memory allocated to each Application Configuration Service instance. </param>
        /// <param name="instanceCount"> Instance count of the Application Configuration Service. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceResourceRequests"/> instance for mocking. </returns>
        public static ConfigurationServiceResourceRequests ConfigurationServiceResourceRequests(string cpu = null, string memory = null, int? instanceCount = null)
        {
            return new ConfigurationServiceResourceRequests(cpu, memory, instanceCount);
        }

        /// <summary> Initializes a new instance of ConfigurationServiceInstance. </summary>
        /// <param name="name"> Name of the Application Configuration Service instance. </param>
        /// <param name="status"> Status of the Application Configuration Service instance. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceInstance"/> instance for mocking. </returns>
        public static ConfigurationServiceInstance ConfigurationServiceInstance(string name = null, string status = null)
        {
            return new ConfigurationServiceInstance(name, status);
        }

        /// <summary> Initializes a new instance of ConfigurationServiceSettings. </summary>
        /// <param name="gitPropertyRepositories"> Property of git environment. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceSettings"/> instance for mocking. </returns>
        public static ConfigurationServiceSettings ConfigurationServiceSettings(IEnumerable<ConfigurationServiceGitRepository> gitPropertyRepositories = null)
        {
            gitPropertyRepositories ??= new List<ConfigurationServiceGitRepository>();

            return new ConfigurationServiceSettings(new ConfigurationServiceGitProperty(gitPropertyRepositories?.ToList()));
        }

        /// <summary> Initializes a new instance of ConfigurationServiceGitRepository. </summary>
        /// <param name="name"> Name of the repository. </param>
        /// <param name="patterns"> Collection of patterns of the repository. </param>
        /// <param name="uri"> URI of the repository. </param>
        /// <param name="label"> Label of the repository. </param>
        /// <param name="searchPaths"> Searching path of the repository. </param>
        /// <param name="username"> Username of git repository basic auth. </param>
        /// <param name="password"> Password of git repository basic auth. </param>
        /// <param name="hostKey"> Public sshKey of git repository. </param>
        /// <param name="hostKeyAlgorithm"> SshKey algorithm of git repository. </param>
        /// <param name="privateKey"> Private sshKey algorithm of git repository. </param>
        /// <param name="strictHostKeyChecking"> Strict host key checking or not. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceGitRepository"/> instance for mocking. </returns>
        public static ConfigurationServiceGitRepository ConfigurationServiceGitRepository(string name = null, IEnumerable<string> patterns = null, Uri uri = null, string label = null, IEnumerable<string> searchPaths = null, string username = null, string password = null, string hostKey = null, string hostKeyAlgorithm = null, string privateKey = null, bool? strictHostKeyChecking = null)
        {
            patterns ??= new List<string>();
            searchPaths ??= new List<string>();

            return new ConfigurationServiceGitRepository(name, patterns?.ToList(), uri, label, searchPaths?.ToList(), username, password, hostKey, hostKeyAlgorithm, privateKey, strictHostKeyChecking);
        }

        /// <summary> Initializes a new instance of ConfigurationServiceSettingsValidateResult. </summary>
        /// <param name="gitPropertyValidationResult"> Validation result for configuration service settings. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceSettingsValidateResult"/> instance for mocking. </returns>
        public static ConfigurationServiceSettingsValidateResult ConfigurationServiceSettingsValidateResult(ConfigurationServiceGitPropertyValidateResult gitPropertyValidationResult = null)
        {
            return new ConfigurationServiceSettingsValidateResult(gitPropertyValidationResult);
        }

        /// <summary> Initializes a new instance of ConfigurationServiceGitPropertyValidateResult. </summary>
        /// <param name="isValid"> Indicate if the configuration service settings are valid. </param>
        /// <param name="gitReposValidationResult"> The detail validation results. </param>
        /// <returns> A new <see cref="Models.ConfigurationServiceGitPropertyValidateResult"/> instance for mocking. </returns>
        public static ConfigurationServiceGitPropertyValidateResult ConfigurationServiceGitPropertyValidateResult(bool? isValid = null, IEnumerable<ValidationMessages> gitReposValidationResult = null)
        {
            gitReposValidationResult ??= new List<ValidationMessages>();

            return new ConfigurationServiceGitPropertyValidateResult(isValid, gitReposValidationResult?.ToList());
        }

        /// <summary> Initializes a new instance of ValidationMessages. </summary>
        /// <param name="name"> The name of the configuration service git repository. </param>
        /// <param name="messages"> Detailed validation messages. </param>
        /// <returns> A new <see cref="Models.ValidationMessages"/> instance for mocking. </returns>
        public static ValidationMessages ValidationMessages(string name = null, IEnumerable<string> messages = null)
        {
            messages ??= new List<string>();

            return new ValidationMessages(name, messages?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceRegistryResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Service Registry properties payload. </param>
        /// <returns> A new <see cref="AppPlatform.ServiceRegistryResourceData"/> instance for mocking. </returns>
        public static ServiceRegistryResourceData ServiceRegistryResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ServiceRegistryProperties properties = null)
        {
            return new ServiceRegistryResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ServiceRegistryProperties. </summary>
        /// <param name="provisioningState"> State of the Service Registry. </param>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. </param>
        /// <param name="instances"> Collection of instances belong to Service Registry. </param>
        /// <returns> A new <see cref="Models.ServiceRegistryProperties"/> instance for mocking. </returns>
        public static ServiceRegistryProperties ServiceRegistryProperties(ServiceRegistryProvisioningState? provisioningState = null, ServiceRegistryResourceRequests resourceRequests = null, IEnumerable<ServiceRegistryInstance> instances = null)
        {
            instances ??= new List<ServiceRegistryInstance>();

            return new ServiceRegistryProperties(provisioningState, resourceRequests, instances?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceRegistryResourceRequests. </summary>
        /// <param name="cpu"> Cpu allocated to each Service Registry instance. </param>
        /// <param name="memory"> Memory allocated to each Service Registry instance. </param>
        /// <param name="instanceCount"> Instance count of the Service Registry. </param>
        /// <returns> A new <see cref="Models.ServiceRegistryResourceRequests"/> instance for mocking. </returns>
        public static ServiceRegistryResourceRequests ServiceRegistryResourceRequests(string cpu = null, string memory = null, int? instanceCount = null)
        {
            return new ServiceRegistryResourceRequests(cpu, memory, instanceCount);
        }

        /// <summary> Initializes a new instance of ServiceRegistryInstance. </summary>
        /// <param name="name"> Name of the Service Registry instance. </param>
        /// <param name="status"> Status of the Service Registry instance. </param>
        /// <returns> A new <see cref="Models.ServiceRegistryInstance"/> instance for mocking. </returns>
        public static ServiceRegistryInstance ServiceRegistryInstance(string name = null, string status = null)
        {
            return new ServiceRegistryInstance(name, status);
        }

        /// <summary> Initializes a new instance of AppBuildServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the build resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppBuildServiceData"/> instance for mocking. </returns>
        public static AppBuildServiceData AppBuildServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildServiceProperties properties = null)
        {
            return new AppBuildServiceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BuildServiceProperties. </summary>
        /// <param name="kPackVersion"> The installed KPack version in this build service. </param>
        /// <param name="provisioningState"> Provisioning state of the KPack build result. </param>
        /// <param name="resourceRequests"> The runtime resource configuration of this build service. </param>
        /// <returns> A new <see cref="Models.BuildServiceProperties"/> instance for mocking. </returns>
        public static BuildServiceProperties BuildServiceProperties(string kPackVersion = null, BuildServiceProvisioningState? provisioningState = null, BuildServicePropertiesResourceRequests resourceRequests = null)
        {
            return new BuildServiceProperties(kPackVersion, provisioningState, resourceRequests);
        }

        /// <summary> Initializes a new instance of BuildServicePropertiesResourceRequests. </summary>
        /// <param name="cpu"> vCPU allocated to the entire build service node pool. </param>
        /// <param name="memory"> Memory allocated to the entire build service node pool. </param>
        /// <returns> A new <see cref="Models.BuildServicePropertiesResourceRequests"/> instance for mocking. </returns>
        public static BuildServicePropertiesResourceRequests BuildServicePropertiesResourceRequests(string cpu = null, string memory = null)
        {
            return new BuildServicePropertiesResourceRequests(cpu, memory);
        }

        /// <summary> Initializes a new instance of AppBuildData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the build resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppBuildData"/> instance for mocking. </returns>
        public static AppBuildData AppBuildData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppBuildProperties properties = null)
        {
            return new AppBuildData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of AppBuildProperties. </summary>
        /// <param name="relativePath"> The relative path of source code. </param>
        /// <param name="builder"> The resource id of builder to build the source code. </param>
        /// <param name="agentPool"> The resource id of agent pool. </param>
        /// <param name="provisioningState"> Provisioning state of the KPack build result. </param>
        /// <param name="env"> The environment variables for this build. </param>
        /// <param name="triggeredBuildResultId"> The build result triggered by this build. </param>
        /// <returns> A new <see cref="Models.AppBuildProperties"/> instance for mocking. </returns>
        public static AppBuildProperties AppBuildProperties(string relativePath = null, string builder = null, string agentPool = null, AppBuildProvisioningState? provisioningState = null, IDictionary<string, string> env = null, ResourceIdentifier triggeredBuildResultId = null)
        {
            env ??= new Dictionary<string, string>();

            return new AppBuildProperties(relativePath, builder, agentPool, provisioningState, env, ResourceManagerModelFactory.SubResource(triggeredBuildResultId));
        }

        /// <summary> Initializes a new instance of BuildpackBindingResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of a buildpack binding. </param>
        /// <returns> A new <see cref="AppPlatform.BuildpackBindingResourceData"/> instance for mocking. </returns>
        public static BuildpackBindingResourceData BuildpackBindingResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildpackBindingProperties properties = null)
        {
            return new BuildpackBindingResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BuildpackBindingProperties. </summary>
        /// <param name="bindingType"> Buildpack Binding Type. </param>
        /// <param name="provisioningState"> State of the Buildpack Binding. </param>
        /// <param name="launchProperties"> The object describes the buildpack binding launch properties. </param>
        /// <returns> A new <see cref="Models.BuildpackBindingProperties"/> instance for mocking. </returns>
        public static BuildpackBindingProperties BuildpackBindingProperties(BindingType? bindingType = null, BuildpackBindingProvisioningState? provisioningState = null, BuildpackBindingLaunchProperties launchProperties = null)
        {
            return new BuildpackBindingProperties(bindingType, provisioningState, launchProperties);
        }

        /// <summary> Initializes a new instance of BuildpackBindingLaunchProperties. </summary>
        /// <param name="properties"> Non-sensitive properties for launchProperties. </param>
        /// <param name="secrets"> Sensitive properties for launchProperties. </param>
        /// <returns> A new <see cref="Models.BuildpackBindingLaunchProperties"/> instance for mocking. </returns>
        public static BuildpackBindingLaunchProperties BuildpackBindingLaunchProperties(IDictionary<string, string> properties = null, IDictionary<string, string> secrets = null)
        {
            properties ??= new Dictionary<string, string>();
            secrets ??= new Dictionary<string, string>();

            return new BuildpackBindingLaunchProperties(properties, secrets);
        }

        /// <summary> Initializes a new instance of AppBuildResultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the build result resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppBuildResultData"/> instance for mocking. </returns>
        public static AppBuildResultData AppBuildResultData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildResultProperties properties = null)
        {
            return new AppBuildResultData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BuildResultProperties. </summary>
        /// <param name="name"> The name of this build result. </param>
        /// <param name="provisioningState"> Provisioning state of the KPack build result. </param>
        /// <param name="buildPodName"> The build pod name which can be used to get the build log streaming. </param>
        /// <param name="buildStages"> All of the build stage (init-container and container) resources in build pod. </param>
        /// <returns> A new <see cref="Models.BuildResultProperties"/> instance for mocking. </returns>
        public static BuildResultProperties BuildResultProperties(string name = null, BuildResultProvisioningState? provisioningState = null, string buildPodName = null, IEnumerable<BuildStageProperties> buildStages = null)
        {
            buildStages ??= new List<BuildStageProperties>();

            return new BuildResultProperties(name, provisioningState, buildPodName, buildStages?.ToList());
        }

        /// <summary> Initializes a new instance of BuildStageProperties. </summary>
        /// <param name="name"> The name of this build stage resource. </param>
        /// <param name="status"> The provisioning state of this build stage resource. </param>
        /// <returns> A new <see cref="Models.BuildStageProperties"/> instance for mocking. </returns>
        public static BuildStageProperties BuildStageProperties(string name = null, KPackBuildStageProvisioningState? status = null)
        {
            return new BuildStageProperties(name, status);
        }

        /// <summary> Initializes a new instance of BuildResultLog. </summary>
        /// <param name="blobUri"> The public download URL of this build result log. </param>
        /// <returns> A new <see cref="Models.BuildResultLog"/> instance for mocking. </returns>
        public static BuildResultLog BuildResultLog(Uri blobUri = null)
        {
            return new BuildResultLog(blobUri);
        }

        /// <summary> Initializes a new instance of AppBuilderResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Property of the Builder resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppBuilderResourceData"/> instance for mocking. </returns>
        public static AppBuilderResourceData AppBuilderResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppBuilderProperties properties = null)
        {
            return new AppBuilderResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of AppBuilderProperties. </summary>
        /// <param name="provisioningState"> Builder provision status. </param>
        /// <param name="stack"> Builder cluster stack property. </param>
        /// <param name="buildpackGroups"> Builder buildpack groups. </param>
        /// <returns> A new <see cref="Models.AppBuilderProperties"/> instance for mocking. </returns>
        public static AppBuilderProperties AppBuilderProperties(AppBuilderProvisioningState? provisioningState = null, StackProperties stack = null, IEnumerable<BuildpacksGroupProperties> buildpackGroups = null)
        {
            buildpackGroups ??= new List<BuildpacksGroupProperties>();

            return new AppBuilderProperties(provisioningState, stack, buildpackGroups?.ToList());
        }

        /// <summary> Initializes a new instance of StackProperties. </summary>
        /// <param name="id"> Id of the ClusterStack. </param>
        /// <param name="version"> Version of the ClusterStack. </param>
        /// <returns> A new <see cref="Models.StackProperties"/> instance for mocking. </returns>
        public static StackProperties StackProperties(string id = null, string version = null)
        {
            return new StackProperties(id, version);
        }

        /// <summary> Initializes a new instance of BuildpacksGroupProperties. </summary>
        /// <param name="name"> Buildpack group name. </param>
        /// <param name="buildpacks"> Buildpacks in the buildpack group. </param>
        /// <returns> A new <see cref="Models.BuildpacksGroupProperties"/> instance for mocking. </returns>
        public static BuildpacksGroupProperties BuildpacksGroupProperties(string name = null, IEnumerable<WritableSubResource> buildpacks = null)
        {
            buildpacks ??= new List<WritableSubResource>();

            return new BuildpacksGroupProperties(name, buildpacks?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceUploadResult. </summary>
        /// <param name="relativePath"> Source relative path. </param>
        /// <param name="uploadUri"> Upload URL. </param>
        /// <returns> A new <see cref="Models.ResourceUploadResult"/> instance for mocking. </returns>
        public static ResourceUploadResult ResourceUploadResult(string relativePath = null, Uri uploadUri = null)
        {
            return new ResourceUploadResult(relativePath, uploadUri);
        }

        /// <summary> Initializes a new instance of SupportedBuildpackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="supportedBuildpackId"> Supported buildpack resource properties. </param>
        /// <returns> A new <see cref="AppPlatform.SupportedBuildpackResourceData"/> instance for mocking. </returns>
        public static SupportedBuildpackResourceData SupportedBuildpackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string supportedBuildpackId = null)
        {
            return new SupportedBuildpackResourceData(id, name, resourceType, systemData, new SupportedBuildpackResourceProperties(supportedBuildpackId));
        }

        /// <summary> Initializes a new instance of SupportedStackResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Supported stack resource properties. </param>
        /// <returns> A new <see cref="AppPlatform.SupportedStackResourceData"/> instance for mocking. </returns>
        public static SupportedStackResourceData SupportedStackResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SupportedStackResourceProperties properties = null)
        {
            return new SupportedStackResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of SupportedStackResourceProperties. </summary>
        /// <param name="stackId"> The id of supported stack. </param>
        /// <param name="version"> The version of supported stack. </param>
        /// <returns> A new <see cref="Models.SupportedStackResourceProperties"/> instance for mocking. </returns>
        public static SupportedStackResourceProperties SupportedStackResourceProperties(string stackId = null, string version = null)
        {
            return new SupportedStackResourceProperties(stackId, version);
        }

        /// <summary> Initializes a new instance of AppBuildServiceAgentPoolResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> build service agent pool properties. </param>
        /// <returns> A new <see cref="AppPlatform.AppBuildServiceAgentPoolResourceData"/> instance for mocking. </returns>
        public static AppBuildServiceAgentPoolResourceData AppBuildServiceAgentPoolResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BuildServiceAgentPoolProperties properties = null)
        {
            return new AppBuildServiceAgentPoolResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BuildServiceAgentPoolProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the build service agent pool. </param>
        /// <param name="poolSize"> build service agent pool size properties. </param>
        /// <returns> A new <see cref="Models.BuildServiceAgentPoolProperties"/> instance for mocking. </returns>
        public static BuildServiceAgentPoolProperties BuildServiceAgentPoolProperties(string provisioningState = null, BuildServiceAgentPoolSizeProperties poolSize = null)
        {
            return new BuildServiceAgentPoolProperties(provisioningState, poolSize);
        }

        /// <summary> Initializes a new instance of BuildServiceAgentPoolSizeProperties. </summary>
        /// <param name="name"> The name of build service agent pool size. </param>
        /// <param name="cpu"> The cpu property of build service agent pool size. </param>
        /// <param name="memory"> The memory property of build service agent pool size. </param>
        /// <returns> A new <see cref="Models.BuildServiceAgentPoolSizeProperties"/> instance for mocking. </returns>
        public static BuildServiceAgentPoolSizeProperties BuildServiceAgentPoolSizeProperties(string name = null, string cpu = null, string memory = null)
        {
            return new BuildServiceAgentPoolSizeProperties(name, cpu, memory);
        }

        /// <summary> Initializes a new instance of MonitoringSettingResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the Monitoring Setting resource. </param>
        /// <returns> A new <see cref="AppPlatform.MonitoringSettingResourceData"/> instance for mocking. </returns>
        public static MonitoringSettingResourceData MonitoringSettingResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MonitoringSettingProperties properties = null)
        {
            return new MonitoringSettingResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MonitoringSettingProperties. </summary>
        /// <param name="provisioningState"> State of the Monitoring Setting. </param>
        /// <param name="error"> Error when apply Monitoring Setting changes. </param>
        /// <param name="traceEnabled"> Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not. </param>
        /// <param name="appInsightsInstrumentationKey"> Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings. </param>
        /// <param name="appInsightsSamplingRate"> Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]. </param>
        /// <param name="appInsightsAgentVersionsJava"> Indicates the versions of application insight agent. </param>
        /// <returns> A new <see cref="Models.MonitoringSettingProperties"/> instance for mocking. </returns>
        public static MonitoringSettingProperties MonitoringSettingProperties(MonitoringSettingState? provisioningState = null, AppPlatformErrorInfo error = null, bool? traceEnabled = null, string appInsightsInstrumentationKey = null, double? appInsightsSamplingRate = null, string appInsightsAgentVersionsJava = null)
        {
            return new MonitoringSettingProperties(provisioningState, error, traceEnabled, appInsightsInstrumentationKey, appInsightsSamplingRate, new ApplicationInsightsAgentVersions(appInsightsAgentVersionsJava));
        }

        /// <summary> Initializes a new instance of AppPlatformAppResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the App resource. </param>
        /// <param name="identity"> The Managed Identity type of the app resource. </param>
        /// <param name="location"> The GEO location of the application, always the same with its parent resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppPlatformAppResourceData"/> instance for mocking. </returns>
        public static AppPlatformAppResourceData AppPlatformAppResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AppResourceProperties properties = null, ManagedServiceIdentity identity = null, AzureLocation? location = null)
        {
            return new AppPlatformAppResourceData(id, name, resourceType, systemData, properties, identity, location);
        }

        /// <summary> Initializes a new instance of AppResourceProperties. </summary>
        /// <param name="public"> Indicates whether the App exposes public endpoint. </param>
        /// <param name="uri"> URL of the App. </param>
        /// <param name="addonConfigs"> Collection of addons. </param>
        /// <param name="provisioningState"> Provisioning state of the App. </param>
        /// <param name="fqdn"> Fully qualified dns Name. </param>
        /// <param name="httpsOnly"> Indicate if only https is allowed. </param>
        /// <param name="temporaryDisk"> Temporary disk settings. </param>
        /// <param name="persistentDisk"> Persistent disk settings. </param>
        /// <param name="customPersistentDisks"> List of custom persistent disks. </param>
        /// <param name="enableEndToEndTls"> Indicate if end to end TLS is enabled. </param>
        /// <param name="loadedCertificates"> Collection of loaded certificates. </param>
        /// <returns> A new <see cref="Models.AppResourceProperties"/> instance for mocking. </returns>
        public static AppResourceProperties AppResourceProperties(bool? @public = null, Uri uri = null, IDictionary<string, IDictionary<string, BinaryData>> addonConfigs = null, AppResourceProvisioningState? provisioningState = null, string fqdn = null, bool? httpsOnly = null, TemporaryDisk temporaryDisk = null, PersistentDisk persistentDisk = null, IEnumerable<CustomPersistentDiskData> customPersistentDisks = null, bool? enableEndToEndTls = null, IEnumerable<LoadedCertificate> loadedCertificates = null)
        {
            addonConfigs ??= new Dictionary<string, IDictionary<string, BinaryData>>();
            customPersistentDisks ??= new List<CustomPersistentDiskData>();
            loadedCertificates ??= new List<LoadedCertificate>();

            return new AppResourceProperties(@public, uri, addonConfigs, provisioningState, fqdn, httpsOnly, temporaryDisk, persistentDisk, customPersistentDisks?.ToList(), enableEndToEndTls, loadedCertificates?.ToList());
        }

        /// <summary> Initializes a new instance of TemporaryDisk. </summary>
        /// <param name="sizeInGB"> Size of the temporary disk in GB. </param>
        /// <param name="mountPath"> Mount path of the temporary disk. </param>
        /// <returns> A new <see cref="Models.TemporaryDisk"/> instance for mocking. </returns>
        public static TemporaryDisk TemporaryDisk(int? sizeInGB = null, string mountPath = null)
        {
            return new TemporaryDisk(sizeInGB, mountPath);
        }

        /// <summary> Initializes a new instance of PersistentDisk. </summary>
        /// <param name="sizeInGB"> Size of the persistent disk in GB. </param>
        /// <param name="usedInGB"> Size of the used persistent disk in GB. </param>
        /// <param name="mountPath"> Mount path of the persistent disk. </param>
        /// <returns> A new <see cref="Models.PersistentDisk"/> instance for mocking. </returns>
        public static PersistentDisk PersistentDisk(int? sizeInGB = null, int? usedInGB = null, string mountPath = null)
        {
            return new PersistentDisk(sizeInGB, usedInGB, mountPath);
        }

        /// <summary> Initializes a new instance of CustomPersistentDiskData. </summary>
        /// <param name="customPersistentDiskProperties">
        /// Properties of the custom persistent disk resource payload.
        /// Please note <see cref="CustomPersistentDiskProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileVolume"/>.
        /// </param>
        /// <param name="storageId"> The resource id of Azure Spring Cloud Storage resource. </param>
        /// <returns> A new <see cref="Models.CustomPersistentDiskData"/> instance for mocking. </returns>
        public static CustomPersistentDiskData CustomPersistentDiskData(CustomPersistentDiskProperties customPersistentDiskProperties = null, string storageId = null)
        {
            return new CustomPersistentDiskData(customPersistentDiskProperties, storageId);
        }

        /// <summary> Initializes a new instance of CustomPersistentDiskProperties. </summary>
        /// <param name="underlyingResourceType"> The type of the underlying resource to mount as a persistent disk. </param>
        /// <param name="mountPath"> The mount path of the persistent disk. </param>
        /// <param name="readOnly"> Indicates whether the persistent disk is a readOnly one. </param>
        /// <param name="mountOptions"> These are the mount options for a persistent disk. </param>
        /// <returns> A new <see cref="Models.CustomPersistentDiskProperties"/> instance for mocking. </returns>
        public static CustomPersistentDiskProperties CustomPersistentDiskProperties(string underlyingResourceType = null, string mountPath = null, bool? readOnly = null, IEnumerable<string> mountOptions = null)
        {
            mountOptions ??= new List<string>();

            return new UnknownCustomPersistentDiskProperties(underlyingResourceType, mountPath, readOnly, mountOptions?.ToList());
        }

        /// <summary> Initializes a new instance of LoadedCertificate. </summary>
        /// <param name="resourceId"> Resource Id of loaded certificate. </param>
        /// <param name="loadTrustStore"> Indicate whether the certificate will be loaded into default trust store, only work for Java runtime. </param>
        /// <returns> A new <see cref="Models.LoadedCertificate"/> instance for mocking. </returns>
        public static LoadedCertificate LoadedCertificate(ResourceIdentifier resourceId = null, bool? loadTrustStore = null)
        {
            return new LoadedCertificate(resourceId, loadTrustStore);
        }

        /// <summary> Initializes a new instance of BindingResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the Binding resource. </param>
        /// <returns> A new <see cref="AppPlatform.BindingResourceData"/> instance for mocking. </returns>
        public static BindingResourceData BindingResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BindingResourceProperties properties = null)
        {
            return new BindingResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BindingResourceProperties. </summary>
        /// <param name="resourceName"> The name of the bound resource. </param>
        /// <param name="resourceType"> The standard Azure resource type of the bound resource. </param>
        /// <param name="resourceId"> The Azure resource id of the bound resource. </param>
        /// <param name="key"> The key of the bound resource. </param>
        /// <param name="bindingParameters"> Binding parameters of the Binding resource. </param>
        /// <param name="generatedProperties"> The generated Spring Boot property file for this binding. The secret will be deducted. </param>
        /// <param name="createdAt"> Creation time of the Binding resource. </param>
        /// <param name="updatedAt"> Update time of the Binding resource. </param>
        /// <returns> A new <see cref="Models.BindingResourceProperties"/> instance for mocking. </returns>
        public static BindingResourceProperties BindingResourceProperties(string resourceName = null, ResourceType? resourceType = null, ResourceIdentifier resourceId = null, string key = null, IDictionary<string, BinaryData> bindingParameters = null, string generatedProperties = null, string createdAt = null, string updatedAt = null)
        {
            bindingParameters ??= new Dictionary<string, BinaryData>();

            return new BindingResourceProperties(resourceName, resourceType, resourceId, key, bindingParameters, generatedProperties, createdAt, updatedAt);
        }

        /// <summary> Initializes a new instance of StorageResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of the storage resource payload.
        /// Please note <see cref="StorageProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StorageAccount"/>.
        /// </param>
        /// <returns> A new <see cref="AppPlatform.StorageResourceData"/> instance for mocking. </returns>
        public static StorageResourceData StorageResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, StorageProperties properties = null)
        {
            return new StorageResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of StorageProperties. </summary>
        /// <param name="storageType"> The type of the storage. </param>
        /// <returns> A new <see cref="Models.StorageProperties"/> instance for mocking. </returns>
        public static StorageProperties StorageProperties(string storageType = null)
        {
            return new UnknownStorageProperties(storageType);
        }

        /// <summary> Initializes a new instance of CertificateResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Properties of the certificate resource payload.
        /// Please note <see cref="CertificateProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ContentCertificateProperties"/> and <see cref="KeyVaultCertificateProperties"/>.
        /// </param>
        /// <returns> A new <see cref="AppPlatform.CertificateResourceData"/> instance for mocking. </returns>
        public static CertificateResourceData CertificateResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CertificateProperties properties = null)
        {
            return new CertificateResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CertificateProperties. </summary>
        /// <param name="certificatePropertiesType"> The type of the certificate source. </param>
        /// <param name="thumbprint"> The thumbprint of certificate. </param>
        /// <param name="issuer"> The issuer of certificate. </param>
        /// <param name="issuedDate"> The issue date of certificate. </param>
        /// <param name="expirationDate"> The expiration date of certificate. </param>
        /// <param name="activateDate"> The activate date of certificate. </param>
        /// <param name="subjectName"> The subject name of certificate. </param>
        /// <param name="dnsNames"> The domain list of certificate. </param>
        /// <returns> A new <see cref="Models.CertificateProperties"/> instance for mocking. </returns>
        public static CertificateProperties CertificateProperties(string certificatePropertiesType = null, string thumbprint = null, string issuer = null, string issuedDate = null, string expirationDate = null, string activateDate = null, string subjectName = null, IEnumerable<string> dnsNames = null)
        {
            dnsNames ??= new List<string>();

            return new UnknownCertificateProperties(certificatePropertiesType, thumbprint, issuer, issuedDate, expirationDate, activateDate, subjectName, dnsNames?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceNameAvailabilityResult. </summary>
        /// <param name="nameAvailable"> Indicates whether the name is available. </param>
        /// <param name="reason"> Reason why the name is not available. </param>
        /// <param name="message"> Message why the name is not available. </param>
        /// <returns> A new <see cref="Models.ServiceNameAvailabilityResult"/> instance for mocking. </returns>
        public static ServiceNameAvailabilityResult ServiceNameAvailabilityResult(bool? nameAvailable = null, string reason = null, string message = null)
        {
            return new ServiceNameAvailabilityResult(nameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of AppPlatformCustomDomainResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the custom domain resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppPlatformCustomDomainResourceData"/> instance for mocking. </returns>
        public static AppPlatformCustomDomainResourceData AppPlatformCustomDomainResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CustomDomainProperties properties = null)
        {
            return new AppPlatformCustomDomainResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CustomDomainProperties. </summary>
        /// <param name="thumbprint"> The thumbprint of bound certificate. </param>
        /// <param name="appName"> The app name of domain. </param>
        /// <param name="certName"> The bound certificate name of domain. </param>
        /// <returns> A new <see cref="Models.CustomDomainProperties"/> instance for mocking. </returns>
        public static CustomDomainProperties CustomDomainProperties(string thumbprint = null, string appName = null, string certName = null)
        {
            return new CustomDomainProperties(thumbprint, appName, certName);
        }

        /// <summary> Initializes a new instance of CustomDomainValidateResult. </summary>
        /// <param name="isValid"> Indicates if domain name is valid. </param>
        /// <param name="message"> Message of why domain name is invalid. </param>
        /// <returns> A new <see cref="Models.CustomDomainValidateResult"/> instance for mocking. </returns>
        public static CustomDomainValidateResult CustomDomainValidateResult(bool? isValid = null, string message = null)
        {
            return new CustomDomainValidateResult(isValid, message);
        }

        /// <summary> Initializes a new instance of AppDeploymentResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the Deployment resource. </param>
        /// <param name="sku"> Sku of the Deployment resource. </param>
        /// <returns> A new <see cref="AppPlatform.AppDeploymentResourceData"/> instance for mocking. </returns>
        public static AppDeploymentResourceData AppDeploymentResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DeploymentResourceProperties properties = null, AppPlatformSku sku = null)
        {
            return new AppDeploymentResourceData(id, name, resourceType, systemData, properties, sku);
        }

        /// <summary> Initializes a new instance of DeploymentResourceProperties. </summary>
        /// <param name="source">
        /// Uploaded source information of the deployment.
        /// Please note <see cref="UserSourceInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BuildResultUserSourceInfo"/>, <see cref="CustomContainerUserSourceInfo"/>, <see cref="JarUploadedUserSourceInfo"/>, <see cref="NetCoreZipUploadedUserSourceInfo"/>, <see cref="SourceUploadedUserSourceInfo"/> and <see cref="UploadedUserSourceInfo"/>.
        /// </param>
        /// <param name="deploymentSettings"> Deployment settings of the Deployment. </param>
        /// <param name="provisioningState"> Provisioning state of the Deployment. </param>
        /// <param name="status"> Status of the Deployment. </param>
        /// <param name="active"> Indicates whether the Deployment is active. </param>
        /// <param name="instances"> Collection of instances belong to the Deployment. </param>
        /// <returns> A new <see cref="Models.DeploymentResourceProperties"/> instance for mocking. </returns>
        public static DeploymentResourceProperties DeploymentResourceProperties(UserSourceInfo source = null, DeploymentSettings deploymentSettings = null, DeploymentResourceProvisioningState? provisioningState = null, DeploymentResourceStatus? status = null, bool? active = null, IEnumerable<DeploymentInstance> instances = null)
        {
            instances ??= new List<DeploymentInstance>();

            return new DeploymentResourceProperties(source, deploymentSettings, provisioningState, status, active, instances?.ToList());
        }

        /// <summary> Initializes a new instance of UserSourceInfo. </summary>
        /// <param name="userSourceInfoType"> Type of the source uploaded. </param>
        /// <param name="version"> Version of the source. </param>
        /// <returns> A new <see cref="Models.UserSourceInfo"/> instance for mocking. </returns>
        public static UserSourceInfo UserSourceInfo(string userSourceInfoType = null, string version = null)
        {
            return new UnknownUserSourceInfo(userSourceInfoType, version);
        }

        /// <summary> Initializes a new instance of DeploymentSettings. </summary>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later. </param>
        /// <param name="environmentVariables"> Collection of environment variables. </param>
        /// <param name="addonConfigs"> Collection of addons. </param>
        /// <param name="disableProbe"> Container liveness and readiness probe settings. </param>
        /// <returns> A new <see cref="Models.DeploymentSettings"/> instance for mocking. </returns>
        public static DeploymentSettings DeploymentSettings(ResourceRequests resourceRequests = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, IDictionary<string, BinaryData>> addonConfigs = null, bool? disableProbe = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            addonConfigs ??= new Dictionary<string, IDictionary<string, BinaryData>>();

            return new DeploymentSettings(resourceRequests, environmentVariables, addonConfigs, new ContainerProbeSettings(disableProbe));
        }

        /// <summary> Initializes a new instance of ResourceRequests. </summary>
        /// <param name="cpu"> Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier. </param>
        /// <param name="memory"> Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier. </param>
        /// <returns> A new <see cref="Models.ResourceRequests"/> instance for mocking. </returns>
        public static ResourceRequests ResourceRequests(string cpu = null, string memory = null)
        {
            return new ResourceRequests(cpu, memory);
        }

        /// <summary> Initializes a new instance of DeploymentInstance. </summary>
        /// <param name="name"> Name of the deployment instance. </param>
        /// <param name="status"> Status of the deployment instance. </param>
        /// <param name="reason"> Failed reason of the deployment instance. </param>
        /// <param name="discoveryStatus"> Discovery status of the deployment instance. </param>
        /// <param name="startTime"> Start time of the deployment instance. </param>
        /// <param name="zone"> Availability zone information of the deployment instance. </param>
        /// <returns> A new <see cref="Models.DeploymentInstance"/> instance for mocking. </returns>
        public static DeploymentInstance DeploymentInstance(string name = null, string status = null, string reason = null, string discoveryStatus = null, string startTime = null, string zone = null)
        {
            return new DeploymentInstance(name, status, reason, discoveryStatus, startTime, zone);
        }

        /// <summary> Initializes a new instance of LogFileUriResult. </summary>
        /// <param name="uri"> URL of the log file. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        /// <returns> A new <see cref="Models.LogFileUriResult"/> instance for mocking. </returns>
        public static LogFileUriResult LogFileUriResult(Uri uri = null)
        {
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }

            return new LogFileUriResult(uri);
        }

        /// <summary> Initializes a new instance of SupportedRuntimeVersion. </summary>
        /// <param name="value"> The raw value which could be passed to deployment CRUD operations. </param>
        /// <param name="platform"> The platform of this runtime version (possible values: &quot;Java&quot; or &quot;.NET&quot;). </param>
        /// <param name="version"> The detailed version (major.minor) of the platform. </param>
        /// <returns> A new <see cref="Models.SupportedRuntimeVersion"/> instance for mocking. </returns>
        public static SupportedRuntimeVersion SupportedRuntimeVersion(SupportedRuntimeValue? value = null, SupportedRuntimePlatform? platform = null, string version = null)
        {
            return new SupportedRuntimeVersion(value, platform, version);
        }

        /// <summary> Initializes a new instance of AvailableAppPlatformSku. </summary>
        /// <param name="resourceType"> Gets the type of resource the SKU applies to. </param>
        /// <param name="name"> Gets the name of SKU. </param>
        /// <param name="tier"> Gets the tier of SKU. </param>
        /// <param name="capacity"> Gets the capacity of SKU. </param>
        /// <param name="locations"> Gets the set of locations that the SKU is available. </param>
        /// <param name="locationInfo"> Gets a list of locations and availability zones in those locations where the SKU is available. </param>
        /// <param name="restrictions">
        /// Gets the restrictions because of which SKU cannot be used. This is
        /// empty if there are no restrictions.
        /// </param>
        /// <returns> A new <see cref="Models.AvailableAppPlatformSku"/> instance for mocking. </returns>
        public static AvailableAppPlatformSku AvailableAppPlatformSku(ResourceType? resourceType = null, string name = null, string tier = null, SkuCapacity capacity = null, IEnumerable<AzureLocation> locations = null, IEnumerable<ResourceSkuLocationInfo> locationInfo = null, IEnumerable<ResourceSkuRestrictions> restrictions = null)
        {
            locations ??= new List<AzureLocation>();
            locationInfo ??= new List<ResourceSkuLocationInfo>();
            restrictions ??= new List<ResourceSkuRestrictions>();

            return new AvailableAppPlatformSku(resourceType, name, tier, capacity, locations?.ToList(), locationInfo?.ToList(), restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of SkuCapacity. </summary>
        /// <param name="minimum"> Gets or sets the minimum. </param>
        /// <param name="maximum"> Gets or sets the maximum. </param>
        /// <param name="default"> Gets or sets the default. </param>
        /// <param name="scaleType"> Gets or sets the type of the scale. </param>
        /// <returns> A new <see cref="Models.SkuCapacity"/> instance for mocking. </returns>
        public static SkuCapacity SkuCapacity(int minimum = default, int? maximum = null, int? @default = null, SkuScaleType? scaleType = null)
        {
            return new SkuCapacity(minimum, maximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of ResourceSkuLocationInfo. </summary>
        /// <param name="location"> Gets location of the SKU. </param>
        /// <param name="zones"> Gets list of availability zones where the SKU is supported. </param>
        /// <param name="zoneDetails"> Gets details of capabilities available to a SKU in specific zones. </param>
        /// <returns> A new <see cref="Models.ResourceSkuLocationInfo"/> instance for mocking. </returns>
        public static ResourceSkuLocationInfo ResourceSkuLocationInfo(AzureLocation? location = null, IEnumerable<string> zones = null, IEnumerable<AppPlatformResourceSkuZoneDetails> zoneDetails = null)
        {
            zones ??= new List<string>();
            zoneDetails ??= new List<AppPlatformResourceSkuZoneDetails>();

            return new ResourceSkuLocationInfo(location, zones?.ToList(), zoneDetails?.ToList());
        }

        /// <summary> Initializes a new instance of AppPlatformResourceSkuZoneDetails. </summary>
        /// <param name="name">
        /// Gets the set of zones that the SKU is available in with the
        /// specified capabilities.
        /// </param>
        /// <param name="capabilities">
        /// Gets a list of capabilities that are available for the SKU in the
        /// specified list of zones.
        /// </param>
        /// <returns> A new <see cref="Models.AppPlatformResourceSkuZoneDetails"/> instance for mocking. </returns>
        public static AppPlatformResourceSkuZoneDetails AppPlatformResourceSkuZoneDetails(IEnumerable<string> name = null, IEnumerable<AppPlatformResourceSkuCapabilities> capabilities = null)
        {
            name ??= new List<string>();
            capabilities ??= new List<AppPlatformResourceSkuCapabilities>();

            return new AppPlatformResourceSkuZoneDetails(name?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of AppPlatformResourceSkuCapabilities. </summary>
        /// <param name="name"> Gets an invariant to describe the feature. </param>
        /// <param name="value"> Gets an invariant if the feature is measured by quantity. </param>
        /// <returns> A new <see cref="Models.AppPlatformResourceSkuCapabilities"/> instance for mocking. </returns>
        public static AppPlatformResourceSkuCapabilities AppPlatformResourceSkuCapabilities(string name = null, string value = null)
        {
            return new AppPlatformResourceSkuCapabilities(name, value);
        }

        /// <summary> Initializes a new instance of ResourceSkuRestrictions. </summary>
        /// <param name="restrictionsType"> Gets the type of restrictions. Possible values include: &apos;Location&apos;, &apos;Zone&apos;. </param>
        /// <param name="values">
        /// Gets the value of restrictions. If the restriction type is set to
        /// location. This would be different locations where the SKU is restricted.
        /// </param>
        /// <param name="restrictionInfo"> Gets the information about the restriction where the SKU cannot be used. </param>
        /// <param name="reasonCode"> Gets the reason for restriction. Possible values include: &apos;QuotaId&apos;, &apos;NotAvailableForSubscription&apos;. </param>
        /// <returns> A new <see cref="Models.ResourceSkuRestrictions"/> instance for mocking. </returns>
        public static ResourceSkuRestrictions ResourceSkuRestrictions(AppPlatformResourceSkuRestrictionsType? restrictionsType = null, IEnumerable<string> values = null, ResourceSkuRestrictionInfo restrictionInfo = null, AppPlatformResourceSkuRestrictionsReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new ResourceSkuRestrictions(restrictionsType, values?.ToList(), restrictionInfo, reasonCode);
        }

        /// <summary> Initializes a new instance of ResourceSkuRestrictionInfo. </summary>
        /// <param name="locations"> Gets locations where the SKU is restricted. </param>
        /// <param name="zones"> Gets list of availability zones where the SKU is restricted. </param>
        /// <returns> A new <see cref="Models.ResourceSkuRestrictionInfo"/> instance for mocking. </returns>
        public static ResourceSkuRestrictionInfo ResourceSkuRestrictionInfo(IEnumerable<AzureLocation> locations = null, IEnumerable<string> zones = null)
        {
            locations ??= new List<AzureLocation>();
            zones ??= new List<string>();

            return new ResourceSkuRestrictionInfo(locations?.ToList(), zones?.ToList());
        }

        /// <summary> Initializes a new instance of GatewayResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Spring Cloud Gateway properties payload. </param>
        /// <param name="sku"> Sku of the Spring Cloud Gateway resource. </param>
        /// <returns> A new <see cref="AppPlatform.GatewayResourceData"/> instance for mocking. </returns>
        public static GatewayResourceData GatewayResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GatewayProperties properties = null, AppPlatformSku sku = null)
        {
            return new GatewayResourceData(id, name, resourceType, systemData, properties, sku);
        }

        /// <summary> Initializes a new instance of GatewayProperties. </summary>
        /// <param name="provisioningState"> State of the Spring Cloud Gateway. </param>
        /// <param name="public"> Indicates whether the Spring Cloud Gateway exposes endpoint. </param>
        /// <param name="uri"> URL of the Spring Cloud Gateway, exposed when &apos;public&apos; is true. </param>
        /// <param name="httpsOnly"> Indicate if only https is allowed. </param>
        /// <param name="ssoProperties"> Single sign-on related configuration. </param>
        /// <param name="apiMetadataProperties"> API metadata property for Spring Cloud Gateway. </param>
        /// <param name="corsProperties"> Cross-Origin Resource Sharing property. </param>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. </param>
        /// <param name="instances"> Collection of instances belong to Spring Cloud Gateway. </param>
        /// <param name="operatorProperties"> Properties of the Spring Cloud Gateway Operator. </param>
        /// <returns> A new <see cref="Models.GatewayProperties"/> instance for mocking. </returns>
        public static GatewayProperties GatewayProperties(GatewayProvisioningState? provisioningState = null, bool? @public = null, Uri uri = null, bool? httpsOnly = null, SsoProperties ssoProperties = null, GatewayApiMetadataProperties apiMetadataProperties = null, GatewayCorsProperties corsProperties = null, GatewayResourceRequests resourceRequests = null, IEnumerable<GatewayInstance> instances = null, GatewayOperatorProperties operatorProperties = null)
        {
            instances ??= new List<GatewayInstance>();

            return new GatewayProperties(provisioningState, @public, uri, httpsOnly, ssoProperties, apiMetadataProperties, corsProperties, resourceRequests, instances?.ToList(), operatorProperties);
        }

        /// <summary> Initializes a new instance of SsoProperties. </summary>
        /// <param name="scope"> It defines the specific actions applications can be allowed to do on a user&apos;s behalf. </param>
        /// <param name="clientId"> The public identifier for the application. </param>
        /// <param name="clientSecret"> The secret known only to the application and the authorization server. </param>
        /// <param name="issuerUri"> The URI of Issuer Identifier. </param>
        /// <returns> A new <see cref="Models.SsoProperties"/> instance for mocking. </returns>
        public static SsoProperties SsoProperties(IEnumerable<string> scope = null, string clientId = null, string clientSecret = null, Uri issuerUri = null)
        {
            scope ??= new List<string>();

            return new SsoProperties(scope?.ToList(), clientId, clientSecret, issuerUri);
        }

        /// <summary> Initializes a new instance of GatewayApiMetadataProperties. </summary>
        /// <param name="title"> Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`). </param>
        /// <param name="description"> Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`). </param>
        /// <param name="documentation"> Location of additional documentation for the APIs available on the Gateway instance. </param>
        /// <param name="version"> Version of APIs available on this Gateway instance (default: `unspecified`). </param>
        /// <param name="serverUri"> Base URL that API consumers will use to access APIs on the Gateway instance. </param>
        /// <returns> A new <see cref="Models.GatewayApiMetadataProperties"/> instance for mocking. </returns>
        public static GatewayApiMetadataProperties GatewayApiMetadataProperties(string title = null, string description = null, string documentation = null, string version = null, Uri serverUri = null)
        {
            return new GatewayApiMetadataProperties(title, description, documentation, version, serverUri);
        }

        /// <summary> Initializes a new instance of GatewayCorsProperties. </summary>
        /// <param name="allowedOrigins"> Allowed origins to make cross-site requests. The special value `*` allows all domains. </param>
        /// <param name="allowedMethods"> Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. </param>
        /// <param name="allowedHeaders"> Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header. </param>
        /// <param name="maxAge"> How long, in seconds, the response from a pre-flight request can be cached by clients. </param>
        /// <param name="allowCredentials"> Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`. </param>
        /// <param name="exposedHeaders"> HTTP response headers to expose for cross-site requests. </param>
        /// <returns> A new <see cref="Models.GatewayCorsProperties"/> instance for mocking. </returns>
        public static GatewayCorsProperties GatewayCorsProperties(IEnumerable<string> allowedOrigins = null, IEnumerable<string> allowedMethods = null, IEnumerable<string> allowedHeaders = null, int? maxAge = null, bool? allowCredentials = null, IEnumerable<string> exposedHeaders = null)
        {
            allowedOrigins ??= new List<string>();
            allowedMethods ??= new List<string>();
            allowedHeaders ??= new List<string>();
            exposedHeaders ??= new List<string>();

            return new GatewayCorsProperties(allowedOrigins?.ToList(), allowedMethods?.ToList(), allowedHeaders?.ToList(), maxAge, allowCredentials, exposedHeaders?.ToList());
        }

        /// <summary> Initializes a new instance of GatewayResourceRequests. </summary>
        /// <param name="cpu"> Cpu allocated to each Spring Cloud Gateway instance. </param>
        /// <param name="memory"> Memory allocated to each Spring Cloud Gateway instance. </param>
        /// <returns> A new <see cref="Models.GatewayResourceRequests"/> instance for mocking. </returns>
        public static GatewayResourceRequests GatewayResourceRequests(string cpu = null, string memory = null)
        {
            return new GatewayResourceRequests(cpu, memory);
        }

        /// <summary> Initializes a new instance of GatewayInstance. </summary>
        /// <param name="name"> Name of the Spring Cloud Gateway instance. </param>
        /// <param name="status"> Status of the Spring Cloud Gateway instance. </param>
        /// <returns> A new <see cref="Models.GatewayInstance"/> instance for mocking. </returns>
        public static GatewayInstance GatewayInstance(string name = null, string status = null)
        {
            return new GatewayInstance(name, status);
        }

        /// <summary> Initializes a new instance of GatewayOperatorProperties. </summary>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. </param>
        /// <param name="instances"> Collection of instances belong to Spring Cloud Gateway operator. </param>
        /// <returns> A new <see cref="Models.GatewayOperatorProperties"/> instance for mocking. </returns>
        public static GatewayOperatorProperties GatewayOperatorProperties(GatewayOperatorResourceRequests resourceRequests = null, IEnumerable<GatewayInstance> instances = null)
        {
            instances ??= new List<GatewayInstance>();

            return new GatewayOperatorProperties(resourceRequests, instances?.ToList());
        }

        /// <summary> Initializes a new instance of GatewayOperatorResourceRequests. </summary>
        /// <param name="cpu"> Cpu allocated to each Spring Cloud Gateway Operator instance. </param>
        /// <param name="memory"> Memory allocated to each Spring Cloud Gateway Operator instance. </param>
        /// <param name="instanceCount"> Instance count of the Spring Cloud Gateway Operator. </param>
        /// <returns> A new <see cref="Models.GatewayOperatorResourceRequests"/> instance for mocking. </returns>
        public static GatewayOperatorResourceRequests GatewayOperatorResourceRequests(string cpu = null, string memory = null, int? instanceCount = null)
        {
            return new GatewayOperatorResourceRequests(cpu, memory, instanceCount);
        }

        /// <summary> Initializes a new instance of GatewayRouteConfigResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> API route config of the Spring Cloud Gateway. </param>
        /// <returns> A new <see cref="AppPlatform.GatewayRouteConfigResourceData"/> instance for mocking. </returns>
        public static GatewayRouteConfigResourceData GatewayRouteConfigResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GatewayRouteConfigProperties properties = null)
        {
            return new GatewayRouteConfigResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of GatewayRouteConfigProperties. </summary>
        /// <param name="provisioningState"> State of the Spring Cloud Gateway route config. </param>
        /// <param name="appResourceId"> The resource Id of the Azure Spring Cloud app, required unless route defines `uri`. </param>
        /// <param name="routes"> Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`. </param>
        /// <returns> A new <see cref="Models.GatewayRouteConfigProperties"/> instance for mocking. </returns>
        public static GatewayRouteConfigProperties GatewayRouteConfigProperties(GatewayProvisioningState? provisioningState = null, string appResourceId = null, IEnumerable<GatewayApiRoute> routes = null)
        {
            routes ??= new List<GatewayApiRoute>();

            return new GatewayRouteConfigProperties(provisioningState, appResourceId, routes?.ToList());
        }

        /// <summary> Initializes a new instance of GatewayApiRoute. </summary>
        /// <param name="title"> A title, will be applied to methods in the generated OpenAPI documentation. </param>
        /// <param name="description"> A description, will be applied to methods in the generated OpenAPI documentation. </param>
        /// <param name="uri"> Full uri, will override `appName`. </param>
        /// <param name="ssoEnabled"> Enable sso validation. </param>
        /// <param name="tokenRelay"> Pass currently-authenticated user&apos;s identity token to application service, default is &apos;false&apos;. </param>
        /// <param name="predicates"> A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request. </param>
        /// <param name="filters"> To modify the request before sending it to the target endpoint, or the received response. </param>
        /// <param name="order"> Route processing order. </param>
        /// <param name="tags"> Classification tags, will be applied to methods in the generated OpenAPI documentation. </param>
        /// <returns> A new <see cref="Models.GatewayApiRoute"/> instance for mocking. </returns>
        public static GatewayApiRoute GatewayApiRoute(string title = null, string description = null, Uri uri = null, bool? ssoEnabled = null, bool? tokenRelay = null, IEnumerable<string> predicates = null, IEnumerable<string> filters = null, int? order = null, IEnumerable<string> tags = null)
        {
            predicates ??= new List<string>();
            filters ??= new List<string>();
            tags ??= new List<string>();

            return new GatewayApiRoute(title, description, uri, ssoEnabled, tokenRelay, predicates?.ToList(), filters?.ToList(), order, tags?.ToList());
        }

        /// <summary> Initializes a new instance of GatewayCustomDomainResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="gatewayCustomDomainThumbprint"> The properties of custom domain for Spring Cloud Gateway. </param>
        /// <returns> A new <see cref="AppPlatform.GatewayCustomDomainResourceData"/> instance for mocking. </returns>
        public static GatewayCustomDomainResourceData GatewayCustomDomainResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string gatewayCustomDomainThumbprint = null)
        {
            return new GatewayCustomDomainResourceData(id, name, resourceType, systemData, new GatewayCustomDomainProperties(gatewayCustomDomainThumbprint));
        }

        /// <summary> Initializes a new instance of ApiPortalResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> API portal properties payload. </param>
        /// <param name="sku"> Sku of the API portal resource. </param>
        /// <returns> A new <see cref="AppPlatform.ApiPortalResourceData"/> instance for mocking. </returns>
        public static ApiPortalResourceData ApiPortalResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ApiPortalProperties properties = null, AppPlatformSku sku = null)
        {
            return new ApiPortalResourceData(id, name, resourceType, systemData, properties, sku);
        }

        /// <summary> Initializes a new instance of ApiPortalProperties. </summary>
        /// <param name="provisioningState"> State of the API portal. </param>
        /// <param name="public"> Indicates whether the API portal exposes endpoint. </param>
        /// <param name="uri"> URL of the API portal, exposed when &apos;public&apos; is true. </param>
        /// <param name="httpsOnly"> Indicate if only https is allowed. </param>
        /// <param name="gatewayIds"> The array of resource Ids of gateway to integrate with API portal. </param>
        /// <param name="sourceUris"> Collection of OpenAPI source URL locations. </param>
        /// <param name="ssoProperties"> Single sign-on related configuration. </param>
        /// <param name="resourceRequests"> The requested resource quantity for required CPU and Memory. </param>
        /// <param name="instances"> Collection of instances belong to API portal. </param>
        /// <returns> A new <see cref="Models.ApiPortalProperties"/> instance for mocking. </returns>
        public static ApiPortalProperties ApiPortalProperties(ApiPortalProvisioningState? provisioningState = null, bool? @public = null, Uri uri = null, bool? httpsOnly = null, IEnumerable<string> gatewayIds = null, IEnumerable<Uri> sourceUris = null, SsoProperties ssoProperties = null, ApiPortalResourceRequests resourceRequests = null, IEnumerable<ApiPortalInstance> instances = null)
        {
            gatewayIds ??= new List<string>();
            sourceUris ??= new List<Uri>();
            instances ??= new List<ApiPortalInstance>();

            return new ApiPortalProperties(provisioningState, @public, uri, httpsOnly, gatewayIds?.ToList(), sourceUris?.ToList(), ssoProperties, resourceRequests, instances?.ToList());
        }

        /// <summary> Initializes a new instance of ApiPortalResourceRequests. </summary>
        /// <param name="cpu"> Cpu allocated to each API portal instance. </param>
        /// <param name="memory"> Memory allocated to each API portal instance. </param>
        /// <returns> A new <see cref="Models.ApiPortalResourceRequests"/> instance for mocking. </returns>
        public static ApiPortalResourceRequests ApiPortalResourceRequests(string cpu = null, string memory = null)
        {
            return new ApiPortalResourceRequests(cpu, memory);
        }

        /// <summary> Initializes a new instance of ApiPortalInstance. </summary>
        /// <param name="name"> Name of the API portal instance. </param>
        /// <param name="status"> Status of the API portal instance. </param>
        /// <returns> A new <see cref="Models.ApiPortalInstance"/> instance for mocking. </returns>
        public static ApiPortalInstance ApiPortalInstance(string name = null, string status = null)
        {
            return new ApiPortalInstance(name, status);
        }

        /// <summary> Initializes a new instance of ApiPortalCustomDomainResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="apiPortalCustomDomainThumbprint"> The properties of custom domain for API portal. </param>
        /// <returns> A new <see cref="AppPlatform.ApiPortalCustomDomainResourceData"/> instance for mocking. </returns>
        public static ApiPortalCustomDomainResourceData ApiPortalCustomDomainResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string apiPortalCustomDomainThumbprint = null)
        {
            return new ApiPortalCustomDomainResourceData(id, name, resourceType, systemData, new ApiPortalCustomDomainProperties(apiPortalCustomDomainThumbprint));
        }

        /// <summary> Initializes a new instance of KeyVaultCertificateProperties. </summary>
        /// <param name="thumbprint"> The thumbprint of certificate. </param>
        /// <param name="issuer"> The issuer of certificate. </param>
        /// <param name="issuedDate"> The issue date of certificate. </param>
        /// <param name="expirationDate"> The expiration date of certificate. </param>
        /// <param name="activateDate"> The activate date of certificate. </param>
        /// <param name="subjectName"> The subject name of certificate. </param>
        /// <param name="dnsNames"> The domain list of certificate. </param>
        /// <param name="vaultUri"> The vault uri of user key vault. </param>
        /// <param name="keyVaultCertName"> The certificate name of key vault. </param>
        /// <param name="certVersion"> The certificate version of key vault. </param>
        /// <param name="excludePrivateKey"> Optional. If set to true, it will not import private key from key vault. </param>
        /// <returns> A new <see cref="Models.KeyVaultCertificateProperties"/> instance for mocking. </returns>
        public static KeyVaultCertificateProperties KeyVaultCertificateProperties(string thumbprint = null, string issuer = null, string issuedDate = null, string expirationDate = null, string activateDate = null, string subjectName = null, IEnumerable<string> dnsNames = null, Uri vaultUri = null, string keyVaultCertName = null, string certVersion = null, bool? excludePrivateKey = null)
        {
            dnsNames ??= new List<string>();

            return new KeyVaultCertificateProperties("KeyVaultCertificate", thumbprint, issuer, issuedDate, expirationDate, activateDate, subjectName, dnsNames?.ToList(), vaultUri, keyVaultCertName, certVersion, excludePrivateKey);
        }

        /// <summary> Initializes a new instance of ContentCertificateProperties. </summary>
        /// <param name="thumbprint"> The thumbprint of certificate. </param>
        /// <param name="issuer"> The issuer of certificate. </param>
        /// <param name="issuedDate"> The issue date of certificate. </param>
        /// <param name="expirationDate"> The expiration date of certificate. </param>
        /// <param name="activateDate"> The activate date of certificate. </param>
        /// <param name="subjectName"> The subject name of certificate. </param>
        /// <param name="dnsNames"> The domain list of certificate. </param>
        /// <param name="content"> The content of uploaded certificate. </param>
        /// <returns> A new <see cref="Models.ContentCertificateProperties"/> instance for mocking. </returns>
        public static ContentCertificateProperties ContentCertificateProperties(string thumbprint = null, string issuer = null, string issuedDate = null, string expirationDate = null, string activateDate = null, string subjectName = null, IEnumerable<string> dnsNames = null, string content = null)
        {
            dnsNames ??= new List<string>();

            return new ContentCertificateProperties("ContentCertificate", thumbprint, issuer, issuedDate, expirationDate, activateDate, subjectName, dnsNames?.ToList(), content);
        }

        /// <summary> Initializes a new instance of StorageAccount. </summary>
        /// <param name="accountName"> The account name of the Azure Storage Account. </param>
        /// <param name="accountKey"> The account key of the Azure Storage Account. </param>
        /// <returns> A new <see cref="Models.StorageAccount"/> instance for mocking. </returns>
        public static StorageAccount StorageAccount(string accountName = null, string accountKey = null)
        {
            return new StorageAccount("StorageAccount", accountName, accountKey);
        }

        /// <summary> Initializes a new instance of AzureFileVolume. </summary>
        /// <param name="mountPath"> The mount path of the persistent disk. </param>
        /// <param name="readOnly"> Indicates whether the persistent disk is a readOnly one. </param>
        /// <param name="mountOptions"> These are the mount options for a persistent disk. </param>
        /// <param name="shareName"> The share name of the Azure File share. </param>
        /// <returns> A new <see cref="Models.AzureFileVolume"/> instance for mocking. </returns>
        public static AzureFileVolume AzureFileVolume(string mountPath = null, bool? readOnly = null, IEnumerable<string> mountOptions = null, string shareName = null)
        {
            mountOptions ??= new List<string>();

            return new AzureFileVolume("AzureFileVolume", mountPath, readOnly, mountOptions?.ToList(), shareName);
        }

        /// <summary> Initializes a new instance of UploadedUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="relativePath"> Relative path of the storage which stores the source. </param>
        /// <returns> A new <see cref="Models.UploadedUserSourceInfo"/> instance for mocking. </returns>
        public static UploadedUserSourceInfo UploadedUserSourceInfo(string version = null, string relativePath = null)
        {
            return new UploadedUserSourceInfo("UploadedUserSourceInfo", version, relativePath);
        }

        /// <summary> Initializes a new instance of JarUploadedUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="relativePath"> Relative path of the storage which stores the source. </param>
        /// <param name="runtimeVersion"> Runtime version of the Jar file. </param>
        /// <param name="jvmOptions"> JVM parameter. </param>
        /// <returns> A new <see cref="Models.JarUploadedUserSourceInfo"/> instance for mocking. </returns>
        public static JarUploadedUserSourceInfo JarUploadedUserSourceInfo(string version = null, string relativePath = null, string runtimeVersion = null, string jvmOptions = null)
        {
            return new JarUploadedUserSourceInfo("Jar", version, relativePath, runtimeVersion, jvmOptions);
        }

        /// <summary> Initializes a new instance of SourceUploadedUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="relativePath"> Relative path of the storage which stores the source. </param>
        /// <param name="artifactSelector">
        /// Selector for the artifact to be used for the deployment for multi-module projects. This should be
        /// the relative path to the target module/project.
        /// </param>
        /// <param name="runtimeVersion"> Runtime version of the source file. </param>
        /// <returns> A new <see cref="Models.SourceUploadedUserSourceInfo"/> instance for mocking. </returns>
        public static SourceUploadedUserSourceInfo SourceUploadedUserSourceInfo(string version = null, string relativePath = null, string artifactSelector = null, string runtimeVersion = null)
        {
            return new SourceUploadedUserSourceInfo("Source", version, relativePath, artifactSelector, runtimeVersion);
        }

        /// <summary> Initializes a new instance of NetCoreZipUploadedUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="relativePath"> Relative path of the storage which stores the source. </param>
        /// <param name="netCoreMainEntryPath"> The path to the .NET executable relative to zip root. </param>
        /// <param name="runtimeVersion"> Runtime version of the .Net file. </param>
        /// <returns> A new <see cref="Models.NetCoreZipUploadedUserSourceInfo"/> instance for mocking. </returns>
        public static NetCoreZipUploadedUserSourceInfo NetCoreZipUploadedUserSourceInfo(string version = null, string relativePath = null, string netCoreMainEntryPath = null, string runtimeVersion = null)
        {
            return new NetCoreZipUploadedUserSourceInfo("NetCoreZip", version, relativePath, netCoreMainEntryPath, runtimeVersion);
        }

        /// <summary> Initializes a new instance of BuildResultUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="buildResultId"> Resource id of an existing succeeded build result under the same Spring instance. </param>
        /// <returns> A new <see cref="Models.BuildResultUserSourceInfo"/> instance for mocking. </returns>
        public static BuildResultUserSourceInfo BuildResultUserSourceInfo(string version = null, string buildResultId = null)
        {
            return new BuildResultUserSourceInfo("BuildResult", version, buildResultId);
        }

        /// <summary> Initializes a new instance of CustomContainerUserSourceInfo. </summary>
        /// <param name="version"> Version of the source. </param>
        /// <param name="customContainer"> Custom container payload. </param>
        /// <returns> A new <see cref="Models.CustomContainerUserSourceInfo"/> instance for mocking. </returns>
        public static CustomContainerUserSourceInfo CustomContainerUserSourceInfo(string version = null, CustomContainer customContainer = null)
        {
            return new CustomContainerUserSourceInfo("Container", version, customContainer);
        }

        /// <summary> Initializes a new instance of CustomContainer. </summary>
        /// <param name="server"> The name of the registry that contains the container image. </param>
        /// <param name="containerImage"> Container image of the custom container. This should be in the form of &lt;repository&gt;:&lt;tag&gt; without the server name of the registry. </param>
        /// <param name="command"> Entrypoint array. Not executed within a shell. The docker image&apos;s ENTRYPOINT is used if this is not provided. </param>
        /// <param name="args"> Arguments to the entrypoint. The docker image&apos;s CMD is used if this is not provided. </param>
        /// <param name="imageRegistryCredential"> Credential of the image registry. </param>
        /// <param name="languageFramework"> Language framework of the container image uploaded. </param>
        /// <returns> A new <see cref="Models.CustomContainer"/> instance for mocking. </returns>
        public static CustomContainer CustomContainer(string server = null, string containerImage = null, IEnumerable<string> command = null, IEnumerable<string> args = null, ImageRegistryCredential imageRegistryCredential = null, string languageFramework = null)
        {
            command ??= new List<string>();
            args ??= new List<string>();

            return new CustomContainer(server, containerImage, command?.ToList(), args?.ToList(), imageRegistryCredential, languageFramework);
        }

        /// <summary> Initializes a new instance of ImageRegistryCredential. </summary>
        /// <param name="username"> The username of the image registry credential. </param>
        /// <param name="password"> The password of the image registry credential. </param>
        /// <returns> A new <see cref="Models.ImageRegistryCredential"/> instance for mocking. </returns>
        public static ImageRegistryCredential ImageRegistryCredential(string username = null, string password = null)
        {
            return new ImageRegistryCredential(username, password);
        }
    }
}
