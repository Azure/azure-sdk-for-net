// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppPlatform.Models
{
    public partial class AppPlatformAppProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsPublic))
            {
                writer.WritePropertyName("public"u8);
                writer.WriteBooleanValue(IsPublic.Value);
            }
            if (Optional.IsCollectionDefined(AddonConfigs))
            {
                writer.WritePropertyName("addonConfigs"u8);
                writer.WriteStartObject();
                foreach (var item in AddonConfigs)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStartObject();
                    foreach (var item0 in item.Value)
                    {
                        writer.WritePropertyName(item0.Key);
                        if (item0.Value == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item0.Value);
#else
                        using (JsonDocument document = JsonDocument.Parse(item0.Value))
                        {
                            JsonSerializer.Serialize(writer, document.RootElement);
                        }
#endif
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsHttpsOnly))
            {
                writer.WritePropertyName("httpsOnly"u8);
                writer.WriteBooleanValue(IsHttpsOnly.Value);
            }
            if (Optional.IsDefined(TemporaryDisk))
            {
                writer.WritePropertyName("temporaryDisk"u8);
                writer.WriteObjectValue(TemporaryDisk);
            }
            if (Optional.IsDefined(PersistentDisk))
            {
                writer.WritePropertyName("persistentDisk"u8);
                writer.WriteObjectValue(PersistentDisk);
            }
            if (Optional.IsCollectionDefined(CustomPersistentDisks))
            {
                writer.WritePropertyName("customPersistentDisks"u8);
                writer.WriteStartArray();
                foreach (var item in CustomPersistentDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsEndToEndTlsEnabled))
            {
                writer.WritePropertyName("enableEndToEndTLS"u8);
                writer.WriteBooleanValue(IsEndToEndTlsEnabled.Value);
            }
            if (Optional.IsCollectionDefined(LoadedCertificates))
            {
                writer.WritePropertyName("loadedCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in LoadedCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(VnetAddons))
            {
                writer.WritePropertyName("vnetAddons"u8);
                writer.WriteObjectValue(VnetAddons);
            }
            if (Optional.IsDefined(IngressSettings))
            {
                writer.WritePropertyName("ingressSettings"u8);
                writer.WriteObjectValue(IngressSettings);
            }
            writer.WriteEndObject();
        }

        internal static AppPlatformAppProperties DeserializeAppPlatformAppProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> @public = default;
            Optional<string> uri = default;
            Optional<IDictionary<string, IDictionary<string, BinaryData>>> addonConfigs = default;
            Optional<AppPlatformAppProvisioningState> provisioningState = default;
            Optional<string> fqdn = default;
            Optional<bool> httpsOnly = default;
            Optional<AppTemporaryDisk> temporaryDisk = default;
            Optional<AppPersistentDisk> persistentDisk = default;
            Optional<IList<AppCustomPersistentDisk>> customPersistentDisks = default;
            Optional<bool> enableEndToEndTls = default;
            Optional<IList<AppLoadedCertificate>> loadedCertificates = default;
            Optional<AppVnetAddons> vnetAddons = default;
            Optional<AppIngressSettings> ingressSettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("public"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    @public = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    uri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("addonConfigs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, IDictionary<string, BinaryData>> dictionary = new Dictionary<string, IDictionary<string, BinaryData>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            Dictionary<string, BinaryData> dictionary0 = new Dictionary<string, BinaryData>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.Value.ValueKind == JsonValueKind.Null)
                                {
                                    dictionary0.Add(property1.Name, null);
                                }
                                else
                                {
                                    dictionary0.Add(property1.Name, BinaryData.FromString(property1.Value.GetRawText()));
                                }
                            }
                            dictionary.Add(property0.Name, dictionary0);
                        }
                    }
                    addonConfigs = dictionary;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new AppPlatformAppProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fqdn"u8))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpsOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpsOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("temporaryDisk"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temporaryDisk = AppTemporaryDisk.DeserializeAppTemporaryDisk(property.Value);
                    continue;
                }
                if (property.NameEquals("persistentDisk"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    persistentDisk = AppPersistentDisk.DeserializeAppPersistentDisk(property.Value);
                    continue;
                }
                if (property.NameEquals("customPersistentDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AppCustomPersistentDisk> array = new List<AppCustomPersistentDisk>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppCustomPersistentDisk.DeserializeAppCustomPersistentDisk(item));
                    }
                    customPersistentDisks = array;
                    continue;
                }
                if (property.NameEquals("enableEndToEndTLS"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableEndToEndTls = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("loadedCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AppLoadedCertificate> array = new List<AppLoadedCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AppLoadedCertificate.DeserializeAppLoadedCertificate(item));
                    }
                    loadedCertificates = array;
                    continue;
                }
                if (property.NameEquals("vnetAddons"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vnetAddons = AppVnetAddons.DeserializeAppVnetAddons(property.Value);
                    continue;
                }
                if (property.NameEquals("ingressSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressSettings = AppIngressSettings.DeserializeAppIngressSettings(property.Value);
                    continue;
                }
            }
            return new AppPlatformAppProperties(Optional.ToNullable(@public), uri.Value, Optional.ToDictionary(addonConfigs), Optional.ToNullable(provisioningState), fqdn.Value, Optional.ToNullable(httpsOnly), temporaryDisk.Value, persistentDisk.Value, Optional.ToList(customPersistentDisks), Optional.ToNullable(enableEndToEndTls), Optional.ToList(loadedCertificates), vnetAddons.Value, ingressSettings.Value);
        }
    }
}
