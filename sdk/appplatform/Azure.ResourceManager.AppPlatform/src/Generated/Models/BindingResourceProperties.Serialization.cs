// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppPlatform.Models
{
    public partial class BindingResourceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId");
                writer.WriteStringValue(ResourceId);
            }
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("key");
                writer.WriteStringValue(Key);
            }
            if (Optional.IsCollectionDefined(BindingParameters))
            {
                writer.WritePropertyName("bindingParameters");
                writer.WriteStartObject();
                foreach (var item in BindingParameters)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static BindingResourceProperties DeserializeBindingResourceProperties(JsonElement element)
        {
            Optional<string> resourceName = default;
            Optional<ResourceType> resourceType = default;
            Optional<ResourceIdentifier> resourceId = default;
            Optional<string> key = default;
            Optional<IDictionary<string, BinaryData>> bindingParameters = default;
            Optional<string> generatedProperties = default;
            Optional<string> createdAt = default;
            Optional<string> updatedAt = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceName"))
                {
                    resourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceType = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key"))
                {
                    key = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bindingParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                    }
                    bindingParameters = dictionary;
                    continue;
                }
                if (property.NameEquals("generatedProperties"))
                {
                    generatedProperties = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdAt"))
                {
                    createdAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updatedAt"))
                {
                    updatedAt = property.Value.GetString();
                    continue;
                }
            }
            return new BindingResourceProperties(resourceName.Value, Optional.ToNullable(resourceType), resourceId.Value, key.Value, Optional.ToDictionary(bindingParameters), generatedProperties.Value, createdAt.Value, updatedAt.Value);
        }
    }
}
