// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppPlatform.Models
{
    public partial class AppIngressSettings : IUtf8JsonSerializable, IJsonModel<AppIngressSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AppIngressSettings>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<AppIngressSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ReadTimeoutInSeconds))
            {
                writer.WritePropertyName("readTimeoutInSeconds"u8);
                writer.WriteNumberValue(ReadTimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(SendTimeoutInSeconds))
            {
                writer.WritePropertyName("sendTimeoutInSeconds"u8);
                writer.WriteNumberValue(SendTimeoutInSeconds.Value);
            }
            if (Optional.IsDefined(SessionAffinity))
            {
                writer.WritePropertyName("sessionAffinity"u8);
                writer.WriteStringValue(SessionAffinity.Value.ToString());
            }
            if (Optional.IsDefined(SessionCookieMaxAge))
            {
                writer.WritePropertyName("sessionCookieMaxAge"u8);
                writer.WriteNumberValue(SessionCookieMaxAge.Value);
            }
            if (Optional.IsDefined(BackendProtocol))
            {
                writer.WritePropertyName("backendProtocol"u8);
                writer.WriteStringValue(BackendProtocol.Value.ToString());
            }
            if (Optional.IsDefined(ClientAuth))
            {
                writer.WritePropertyName("clientAuth"u8);
                writer.WriteObjectValue(ClientAuth);
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AppIngressSettings IJsonModel<AppIngressSettings>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AppIngressSettings)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAppIngressSettings(document.RootElement, options);
        }

        internal static AppIngressSettings DeserializeAppIngressSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> readTimeoutInSeconds = default;
            Optional<int> sendTimeoutInSeconds = default;
            Optional<AppSessionAffinity> sessionAffinity = default;
            Optional<int> sessionCookieMaxAge = default;
            Optional<AppBackendProtocol> backendProtocol = default;
            Optional<IngressSettingsClientAuth> clientAuth = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("readTimeoutInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    readTimeoutInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sendTimeoutInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sendTimeoutInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sessionAffinity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionAffinity = new AppSessionAffinity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sessionCookieMaxAge"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionCookieMaxAge = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("backendProtocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backendProtocol = new AppBackendProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clientAuth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientAuth = IngressSettingsClientAuth.DeserializeIngressSettingsClientAuth(property.Value);
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AppIngressSettings(Optional.ToNullable(readTimeoutInSeconds), Optional.ToNullable(sendTimeoutInSeconds), Optional.ToNullable(sessionAffinity), Optional.ToNullable(sessionCookieMaxAge), Optional.ToNullable(backendProtocol), clientAuth.Value, serializedAdditionalRawData);
        }

        BinaryData IModel<AppIngressSettings>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AppIngressSettings)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        AppIngressSettings IModel<AppIngressSettings>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AppIngressSettings)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeAppIngressSettings(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<AppIngressSettings>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
