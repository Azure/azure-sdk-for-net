// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> Properties of certificate imported from key vault. </summary>
    public partial class KeyVaultCertificateProperties : CertificateProperties
    {
        /// <summary> Initializes a new instance of KeyVaultCertificateProperties. </summary>
        /// <param name="vaultUri"> The vault uri of user key vault. </param>
        /// <param name="keyVaultCertName"> The certificate name of key vault. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vaultUri"/> or <paramref name="keyVaultCertName"/> is null. </exception>
        public KeyVaultCertificateProperties(Uri vaultUri, string keyVaultCertName)
        {
            if (vaultUri == null)
            {
                throw new ArgumentNullException(nameof(vaultUri));
            }
            if (keyVaultCertName == null)
            {
                throw new ArgumentNullException(nameof(keyVaultCertName));
            }

            VaultUri = vaultUri;
            KeyVaultCertName = keyVaultCertName;
            CertificatePropertiesType = "KeyVaultCertificate";
        }

        /// <summary> Initializes a new instance of KeyVaultCertificateProperties. </summary>
        /// <param name="certificatePropertiesType"> The type of the certificate source. </param>
        /// <param name="thumbprint"> The thumbprint of certificate. </param>
        /// <param name="issuer"> The issuer of certificate. </param>
        /// <param name="issuedDate"> The issue date of certificate. </param>
        /// <param name="expirationDate"> The expiration date of certificate. </param>
        /// <param name="activateDate"> The activate date of certificate. </param>
        /// <param name="subjectName"> The subject name of certificate. </param>
        /// <param name="dnsNames"> The domain list of certificate. </param>
        /// <param name="vaultUri"> The vault uri of user key vault. </param>
        /// <param name="keyVaultCertName"> The certificate name of key vault. </param>
        /// <param name="certVersion"> The certificate version of key vault. </param>
        /// <param name="excludePrivateKey"> Optional. If set to true, it will not import private key from key vault. </param>
        internal KeyVaultCertificateProperties(string certificatePropertiesType, string thumbprint, string issuer, string issuedDate, string expirationDate, string activateDate, string subjectName, IReadOnlyList<string> dnsNames, Uri vaultUri, string keyVaultCertName, string certVersion, bool? excludePrivateKey) : base(certificatePropertiesType, thumbprint, issuer, issuedDate, expirationDate, activateDate, subjectName, dnsNames)
        {
            VaultUri = vaultUri;
            KeyVaultCertName = keyVaultCertName;
            CertVersion = certVersion;
            ExcludePrivateKey = excludePrivateKey;
            CertificatePropertiesType = certificatePropertiesType ?? "KeyVaultCertificate";
        }

        /// <summary> The vault uri of user key vault. </summary>
        public Uri VaultUri { get; set; }
        /// <summary> The certificate name of key vault. </summary>
        public string KeyVaultCertName { get; set; }
        /// <summary> The certificate version of key vault. </summary>
        public string CertVersion { get; set; }
        /// <summary> Optional. If set to true, it will not import private key from key vault. </summary>
        public bool? ExcludePrivateKey { get; set; }
    }
}
