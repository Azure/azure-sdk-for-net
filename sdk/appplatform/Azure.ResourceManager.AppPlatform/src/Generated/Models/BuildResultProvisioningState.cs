// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> Provisioning state of the KPack build result. </summary>
    public readonly partial struct BuildResultProvisioningState : IEquatable<BuildResultProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BuildResultProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BuildResultProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string QueuingValue = "Queuing";
        private const string BuildingValue = "Building";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string DeletingValue = "Deleting";

        /// <summary> Queuing. </summary>
        public static BuildResultProvisioningState Queuing { get; } = new BuildResultProvisioningState(QueuingValue);
        /// <summary> Building. </summary>
        public static BuildResultProvisioningState Building { get; } = new BuildResultProvisioningState(BuildingValue);
        /// <summary> Succeeded. </summary>
        public static BuildResultProvisioningState Succeeded { get; } = new BuildResultProvisioningState(SucceededValue);
        /// <summary> Failed. </summary>
        public static BuildResultProvisioningState Failed { get; } = new BuildResultProvisioningState(FailedValue);
        /// <summary> Deleting. </summary>
        public static BuildResultProvisioningState Deleting { get; } = new BuildResultProvisioningState(DeletingValue);
        /// <summary> Determines if two <see cref="BuildResultProvisioningState"/> values are the same. </summary>
        public static bool operator ==(BuildResultProvisioningState left, BuildResultProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BuildResultProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(BuildResultProvisioningState left, BuildResultProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BuildResultProvisioningState"/>. </summary>
        public static implicit operator BuildResultProvisioningState(string value) => new BuildResultProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BuildResultProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BuildResultProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
