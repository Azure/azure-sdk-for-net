// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> App resource properties payload. </summary>
    public partial class AppResourceProperties
    {
        /// <summary> Initializes a new instance of AppResourceProperties. </summary>
        public AppResourceProperties()
        {
            AddonConfigs = new ChangeTrackingDictionary<string, IDictionary<string, BinaryData>>();
            CustomPersistentDisks = new ChangeTrackingList<CustomPersistentDiskData>();
            LoadedCertificates = new ChangeTrackingList<LoadedCertificate>();
        }

        /// <summary> Initializes a new instance of AppResourceProperties. </summary>
        /// <param name="public"> Indicates whether the App exposes public endpoint. </param>
        /// <param name="uri"> URL of the App. </param>
        /// <param name="addonConfigs"> Collection of addons. </param>
        /// <param name="provisioningState"> Provisioning state of the App. </param>
        /// <param name="fqdn"> Fully qualified dns Name. </param>
        /// <param name="httpsOnly"> Indicate if only https is allowed. </param>
        /// <param name="temporaryDisk"> Temporary disk settings. </param>
        /// <param name="persistentDisk"> Persistent disk settings. </param>
        /// <param name="customPersistentDisks"> List of custom persistent disks. </param>
        /// <param name="enableEndToEndTls"> Indicate if end to end TLS is enabled. </param>
        /// <param name="loadedCertificates"> Collection of loaded certificates. </param>
        internal AppResourceProperties(bool? @public, Uri uri, IDictionary<string, IDictionary<string, BinaryData>> addonConfigs, AppResourceProvisioningState? provisioningState, string fqdn, bool? httpsOnly, TemporaryDisk temporaryDisk, PersistentDisk persistentDisk, IList<CustomPersistentDiskData> customPersistentDisks, bool? enableEndToEndTls, IList<LoadedCertificate> loadedCertificates)
        {
            Public = @public;
            Uri = uri;
            AddonConfigs = addonConfigs;
            ProvisioningState = provisioningState;
            Fqdn = fqdn;
            HttpsOnly = httpsOnly;
            TemporaryDisk = temporaryDisk;
            PersistentDisk = persistentDisk;
            CustomPersistentDisks = customPersistentDisks;
            EnableEndToEndTls = enableEndToEndTls;
            LoadedCertificates = loadedCertificates;
        }

        /// <summary> Indicates whether the App exposes public endpoint. </summary>
        public bool? Public { get; set; }
        /// <summary> URL of the App. </summary>
        public Uri Uri { get; }
        /// <summary> Collection of addons. </summary>
        public IDictionary<string, IDictionary<string, BinaryData>> AddonConfigs { get; }
        /// <summary> Provisioning state of the App. </summary>
        public AppResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Fully qualified dns Name. </summary>
        public string Fqdn { get; set; }
        /// <summary> Indicate if only https is allowed. </summary>
        public bool? HttpsOnly { get; set; }
        /// <summary> Temporary disk settings. </summary>
        public TemporaryDisk TemporaryDisk { get; set; }
        /// <summary> Persistent disk settings. </summary>
        public PersistentDisk PersistentDisk { get; set; }
        /// <summary> List of custom persistent disks. </summary>
        public IList<CustomPersistentDiskData> CustomPersistentDisks { get; }
        /// <summary> Indicate if end to end TLS is enabled. </summary>
        public bool? EnableEndToEndTls { get; set; }
        /// <summary> Collection of loaded certificates. </summary>
        public IList<LoadedCertificate> LoadedCertificates { get; }
    }
}
