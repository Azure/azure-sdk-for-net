// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppPlatform.Models
{
    /// <summary> The platform of this runtime version (possible values: &quot;Java&quot; or &quot;.NET&quot;). </summary>
    public readonly partial struct SupportedRuntimePlatform : IEquatable<SupportedRuntimePlatform>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SupportedRuntimePlatform"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SupportedRuntimePlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JavaValue = "Java";
        private const string NetCoreValue = ".NET Core";

        /// <summary> Java. </summary>
        public static SupportedRuntimePlatform Java { get; } = new SupportedRuntimePlatform(JavaValue);
        /// <summary> .NET Core. </summary>
        public static SupportedRuntimePlatform NetCore { get; } = new SupportedRuntimePlatform(NetCoreValue);
        /// <summary> Determines if two <see cref="SupportedRuntimePlatform"/> values are the same. </summary>
        public static bool operator ==(SupportedRuntimePlatform left, SupportedRuntimePlatform right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SupportedRuntimePlatform"/> values are not the same. </summary>
        public static bool operator !=(SupportedRuntimePlatform left, SupportedRuntimePlatform right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SupportedRuntimePlatform"/>. </summary>
        public static implicit operator SupportedRuntimePlatform(string value) => new SupportedRuntimePlatform(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SupportedRuntimePlatform other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SupportedRuntimePlatform other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
