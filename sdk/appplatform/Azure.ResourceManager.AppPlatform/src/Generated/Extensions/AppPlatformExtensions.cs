// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AppPlatform
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.AppPlatform. </summary>
    public static partial class AppPlatformExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary>
        /// Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
        /// Request Path: /providers/Microsoft.AppPlatform/runtimeVersions
        /// Operation Id: RuntimeVersions_ListRuntimeVersions
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SupportedRuntimeVersion" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SupportedRuntimeVersion> GetRuntimeVersionsRuntimeVersionsAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetRuntimeVersionsRuntimeVersionsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
        /// Request Path: /providers/Microsoft.AppPlatform/runtimeVersions
        /// Operation Id: RuntimeVersions_ListRuntimeVersions
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SupportedRuntimeVersion" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SupportedRuntimeVersion> GetRuntimeVersionsRuntimeVersions(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetRuntimeVersionsRuntimeVersions(cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Checks that the resource name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability
        /// Operation Id: Services_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> the region. </param>
        /// <param name="content"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<ServiceNameAvailabilityResult>> CheckServiceNameAvailabilityAsync(this SubscriptionResource subscriptionResource, AzureLocation location, ServiceNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(subscriptionResource).CheckServiceNameAvailabilityAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks that the resource name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability
        /// Operation Id: Services_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> the region. </param>
        /// <param name="content"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<ServiceNameAvailabilityResult> CheckServiceNameAvailability(this SubscriptionResource subscriptionResource, AzureLocation location, ServiceNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(subscriptionResource).CheckServiceNameAvailability(location, content, cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring
        /// Operation Id: Services_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AppPlatformServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AppPlatformServiceResource> GetAppPlatformServiceResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAppPlatformServiceResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Handles requests to list all resources in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring
        /// Operation Id: Services_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AppPlatformServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AppPlatformServiceResource> GetAppPlatformServiceResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAppPlatformServiceResources(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available skus of the Microsoft.AppPlatform provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableAppPlatformSku" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AvailableAppPlatformSku> GetSkusAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSkusAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available skus of the Microsoft.AppPlatform provider.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableAppPlatformSku" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AvailableAppPlatformSku> GetSkus(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSkus(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of AppPlatformServiceResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AppPlatformServiceResources and their operations over a AppPlatformServiceResource. </returns>
        public static AppPlatformServiceResourceCollection GetAppPlatformServiceResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetAppPlatformServiceResources();
        }

        /// <summary>
        /// Get a Service and its properties.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}
        /// Operation Id: Services_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="serviceName"> The name of the Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AppPlatformServiceResource>> GetAppPlatformServiceResourceAsync(this ResourceGroupResource resourceGroupResource, string serviceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAppPlatformServiceResources().GetAsync(serviceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Service and its properties.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}
        /// Operation Id: Services_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="serviceName"> The name of the Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AppPlatformServiceResource> GetAppPlatformServiceResource(this ResourceGroupResource resourceGroupResource, string serviceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAppPlatformServiceResources().Get(serviceName, cancellationToken);
        }

        #region AppPlatformServiceResource
        /// <summary>
        /// Gets an object representing an <see cref="AppPlatformServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppPlatformServiceResource.CreateResourceIdentifier" /> to create an <see cref="AppPlatformServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppPlatformServiceResource" /> object. </returns>
        public static AppPlatformServiceResource GetAppPlatformServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppPlatformServiceResource.ValidateResourceId(id);
                return new AppPlatformServiceResource(client, id);
            }
            );
        }
        #endregion

        #region ConfigServerResource
        /// <summary>
        /// Gets an object representing a <see cref="ConfigServerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigServerResource.CreateResourceIdentifier" /> to create a <see cref="ConfigServerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigServerResource" /> object. </returns>
        public static ConfigServerResource GetConfigServerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConfigServerResource.ValidateResourceId(id);
                return new ConfigServerResource(client, id);
            }
            );
        }
        #endregion

        #region ConfigurationServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="ConfigurationServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigurationServiceResource.CreateResourceIdentifier" /> to create a <see cref="ConfigurationServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigurationServiceResource" /> object. </returns>
        public static ConfigurationServiceResource GetConfigurationServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConfigurationServiceResource.ValidateResourceId(id);
                return new ConfigurationServiceResource(client, id);
            }
            );
        }
        #endregion

        #region ServiceRegistryResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceRegistryResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceRegistryResource.CreateResourceIdentifier" /> to create a <see cref="ServiceRegistryResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceRegistryResource" /> object. </returns>
        public static ServiceRegistryResource GetServiceRegistryResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceRegistryResource.ValidateResourceId(id);
                return new ServiceRegistryResource(client, id);
            }
            );
        }
        #endregion

        #region AppBuildServiceResource
        /// <summary>
        /// Gets an object representing an <see cref="AppBuildServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppBuildServiceResource.CreateResourceIdentifier" /> to create an <see cref="AppBuildServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppBuildServiceResource" /> object. </returns>
        public static AppBuildServiceResource GetAppBuildServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppBuildServiceResource.ValidateResourceId(id);
                return new AppBuildServiceResource(client, id);
            }
            );
        }
        #endregion

        #region AppBuildResource
        /// <summary>
        /// Gets an object representing an <see cref="AppBuildResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppBuildResource.CreateResourceIdentifier" /> to create an <see cref="AppBuildResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppBuildResource" /> object. </returns>
        public static AppBuildResource GetAppBuildResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppBuildResource.ValidateResourceId(id);
                return new AppBuildResource(client, id);
            }
            );
        }
        #endregion

        #region AppBuildResultResource
        /// <summary>
        /// Gets an object representing an <see cref="AppBuildResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppBuildResultResource.CreateResourceIdentifier" /> to create an <see cref="AppBuildResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppBuildResultResource" /> object. </returns>
        public static AppBuildResultResource GetAppBuildResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppBuildResultResource.ValidateResourceId(id);
                return new AppBuildResultResource(client, id);
            }
            );
        }
        #endregion

        #region SupportedBuildpackResource
        /// <summary>
        /// Gets an object representing a <see cref="SupportedBuildpackResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SupportedBuildpackResource.CreateResourceIdentifier" /> to create a <see cref="SupportedBuildpackResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SupportedBuildpackResource" /> object. </returns>
        public static SupportedBuildpackResource GetSupportedBuildpackResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SupportedBuildpackResource.ValidateResourceId(id);
                return new SupportedBuildpackResource(client, id);
            }
            );
        }
        #endregion

        #region SupportedStackResource
        /// <summary>
        /// Gets an object representing a <see cref="SupportedStackResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SupportedStackResource.CreateResourceIdentifier" /> to create a <see cref="SupportedStackResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SupportedStackResource" /> object. </returns>
        public static SupportedStackResource GetSupportedStackResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SupportedStackResource.ValidateResourceId(id);
                return new SupportedStackResource(client, id);
            }
            );
        }
        #endregion

        #region BuildpackBindingResource
        /// <summary>
        /// Gets an object representing a <see cref="BuildpackBindingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BuildpackBindingResource.CreateResourceIdentifier" /> to create a <see cref="BuildpackBindingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BuildpackBindingResource" /> object. </returns>
        public static BuildpackBindingResource GetBuildpackBindingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BuildpackBindingResource.ValidateResourceId(id);
                return new BuildpackBindingResource(client, id);
            }
            );
        }
        #endregion

        #region AppBuilderResource
        /// <summary>
        /// Gets an object representing an <see cref="AppBuilderResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppBuilderResource.CreateResourceIdentifier" /> to create an <see cref="AppBuilderResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppBuilderResource" /> object. </returns>
        public static AppBuilderResource GetAppBuilderResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppBuilderResource.ValidateResourceId(id);
                return new AppBuilderResource(client, id);
            }
            );
        }
        #endregion

        #region AppBuildServiceAgentPoolResource
        /// <summary>
        /// Gets an object representing an <see cref="AppBuildServiceAgentPoolResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppBuildServiceAgentPoolResource.CreateResourceIdentifier" /> to create an <see cref="AppBuildServiceAgentPoolResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppBuildServiceAgentPoolResource" /> object. </returns>
        public static AppBuildServiceAgentPoolResource GetAppBuildServiceAgentPoolResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppBuildServiceAgentPoolResource.ValidateResourceId(id);
                return new AppBuildServiceAgentPoolResource(client, id);
            }
            );
        }
        #endregion

        #region MonitoringSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="MonitoringSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MonitoringSettingResource.CreateResourceIdentifier" /> to create a <see cref="MonitoringSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MonitoringSettingResource" /> object. </returns>
        public static MonitoringSettingResource GetMonitoringSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MonitoringSettingResource.ValidateResourceId(id);
                return new MonitoringSettingResource(client, id);
            }
            );
        }
        #endregion

        #region AppPlatformAppResource
        /// <summary>
        /// Gets an object representing an <see cref="AppPlatformAppResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppPlatformAppResource.CreateResourceIdentifier" /> to create an <see cref="AppPlatformAppResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppPlatformAppResource" /> object. </returns>
        public static AppPlatformAppResource GetAppPlatformAppResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppPlatformAppResource.ValidateResourceId(id);
                return new AppPlatformAppResource(client, id);
            }
            );
        }
        #endregion

        #region BindingResource
        /// <summary>
        /// Gets an object representing a <see cref="BindingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BindingResource.CreateResourceIdentifier" /> to create a <see cref="BindingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BindingResource" /> object. </returns>
        public static BindingResource GetBindingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BindingResource.ValidateResourceId(id);
                return new BindingResource(client, id);
            }
            );
        }
        #endregion

        #region StorageResource
        /// <summary>
        /// Gets an object representing a <see cref="StorageResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="StorageResource.CreateResourceIdentifier" /> to create a <see cref="StorageResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="StorageResource" /> object. </returns>
        public static StorageResource GetStorageResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                StorageResource.ValidateResourceId(id);
                return new StorageResource(client, id);
            }
            );
        }
        #endregion

        #region CertificateResource
        /// <summary>
        /// Gets an object representing a <see cref="CertificateResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CertificateResource.CreateResourceIdentifier" /> to create a <see cref="CertificateResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CertificateResource" /> object. </returns>
        public static CertificateResource GetCertificateResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CertificateResource.ValidateResourceId(id);
                return new CertificateResource(client, id);
            }
            );
        }
        #endregion

        #region AppPlatformCustomDomainResource
        /// <summary>
        /// Gets an object representing an <see cref="AppPlatformCustomDomainResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppPlatformCustomDomainResource.CreateResourceIdentifier" /> to create an <see cref="AppPlatformCustomDomainResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppPlatformCustomDomainResource" /> object. </returns>
        public static AppPlatformCustomDomainResource GetAppPlatformCustomDomainResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppPlatformCustomDomainResource.ValidateResourceId(id);
                return new AppPlatformCustomDomainResource(client, id);
            }
            );
        }
        #endregion

        #region AppDeploymentResource
        /// <summary>
        /// Gets an object representing an <see cref="AppDeploymentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AppDeploymentResource.CreateResourceIdentifier" /> to create an <see cref="AppDeploymentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AppDeploymentResource" /> object. </returns>
        public static AppDeploymentResource GetAppDeploymentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AppDeploymentResource.ValidateResourceId(id);
                return new AppDeploymentResource(client, id);
            }
            );
        }
        #endregion

        #region GatewayResource
        /// <summary>
        /// Gets an object representing a <see cref="GatewayResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GatewayResource.CreateResourceIdentifier" /> to create a <see cref="GatewayResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GatewayResource" /> object. </returns>
        public static GatewayResource GetGatewayResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GatewayResource.ValidateResourceId(id);
                return new GatewayResource(client, id);
            }
            );
        }
        #endregion

        #region GatewayRouteConfigResource
        /// <summary>
        /// Gets an object representing a <see cref="GatewayRouteConfigResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GatewayRouteConfigResource.CreateResourceIdentifier" /> to create a <see cref="GatewayRouteConfigResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GatewayRouteConfigResource" /> object. </returns>
        public static GatewayRouteConfigResource GetGatewayRouteConfigResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GatewayRouteConfigResource.ValidateResourceId(id);
                return new GatewayRouteConfigResource(client, id);
            }
            );
        }
        #endregion

        #region GatewayCustomDomainResource
        /// <summary>
        /// Gets an object representing a <see cref="GatewayCustomDomainResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GatewayCustomDomainResource.CreateResourceIdentifier" /> to create a <see cref="GatewayCustomDomainResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GatewayCustomDomainResource" /> object. </returns>
        public static GatewayCustomDomainResource GetGatewayCustomDomainResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GatewayCustomDomainResource.ValidateResourceId(id);
                return new GatewayCustomDomainResource(client, id);
            }
            );
        }
        #endregion

        #region ApiPortalResource
        /// <summary>
        /// Gets an object representing an <see cref="ApiPortalResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApiPortalResource.CreateResourceIdentifier" /> to create an <see cref="ApiPortalResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApiPortalResource" /> object. </returns>
        public static ApiPortalResource GetApiPortalResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApiPortalResource.ValidateResourceId(id);
                return new ApiPortalResource(client, id);
            }
            );
        }
        #endregion

        #region ApiPortalCustomDomainResource
        /// <summary>
        /// Gets an object representing an <see cref="ApiPortalCustomDomainResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ApiPortalCustomDomainResource.CreateResourceIdentifier" /> to create an <see cref="ApiPortalCustomDomainResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ApiPortalCustomDomainResource" /> object. </returns>
        public static ApiPortalCustomDomainResource GetApiPortalCustomDomainResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ApiPortalCustomDomainResource.ValidateResourceId(id);
                return new ApiPortalCustomDomainResource(client, id);
            }
            );
        }
        #endregion
    }
}
