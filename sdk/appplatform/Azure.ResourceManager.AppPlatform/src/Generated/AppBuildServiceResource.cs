// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.AppPlatform.Models;

namespace Azure.ResourceManager.AppPlatform
{
    /// <summary>
    /// A Class representing an AppBuildService along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="AppBuildServiceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetAppBuildServiceResource method.
    /// Otherwise you can get one from its parent resource <see cref="AppPlatformServiceResource" /> using the GetAppBuildService method.
    /// </summary>
    public partial class AppBuildServiceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="AppBuildServiceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string serviceName, string buildServiceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _appBuildServiceBuildServiceClientDiagnostics;
        private readonly BuildServiceRestOperations _appBuildServiceBuildServiceRestClient;
        private readonly AppBuildServiceData _data;

        /// <summary> Initializes a new instance of the <see cref="AppBuildServiceResource"/> class for mocking. </summary>
        protected AppBuildServiceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AppBuildServiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal AppBuildServiceResource(ArmClient client, AppBuildServiceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="AppBuildServiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AppBuildServiceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _appBuildServiceBuildServiceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AppPlatform", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string appBuildServiceBuildServiceApiVersion);
            _appBuildServiceBuildServiceRestClient = new BuildServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, appBuildServiceBuildServiceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.AppPlatform/Spring/buildServices";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AppBuildServiceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AppBuildResources in the AppBuildService. </summary>
        /// <returns> An object representing collection of AppBuildResources and their operations over a AppBuildResource. </returns>
        public virtual AppBuildCollection GetAppBuilds()
        {
            return GetCachedClient(Client => new AppBuildCollection(Client, Id));
        }

        /// <summary>
        /// Get a KPack build.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}
        /// Operation Id: BuildService_GetBuild
        /// </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AppBuildResource>> GetAppBuildAsync(string buildName, CancellationToken cancellationToken = default)
        {
            return await GetAppBuilds().GetAsync(buildName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a KPack build.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}
        /// Operation Id: BuildService_GetBuild
        /// </summary>
        /// <param name="buildName"> The name of the build resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="buildName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="buildName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AppBuildResource> GetAppBuild(string buildName, CancellationToken cancellationToken = default)
        {
            return GetAppBuilds().Get(buildName, cancellationToken);
        }

        /// <summary> Gets a collection of SupportedBuildpackResources in the AppBuildService. </summary>
        /// <returns> An object representing collection of SupportedBuildpackResources and their operations over a SupportedBuildpackResource. </returns>
        public virtual SupportedBuildpackResourceCollection GetSupportedBuildpackResources()
        {
            return GetCachedClient(Client => new SupportedBuildpackResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get the supported buildpack resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}
        /// Operation Id: BuildService_GetSupportedBuildpack
        /// </summary>
        /// <param name="buildpackName"> The name of the buildpack resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="buildpackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="buildpackName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SupportedBuildpackResource>> GetSupportedBuildpackResourceAsync(string buildpackName, CancellationToken cancellationToken = default)
        {
            return await GetSupportedBuildpackResources().GetAsync(buildpackName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the supported buildpack resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}
        /// Operation Id: BuildService_GetSupportedBuildpack
        /// </summary>
        /// <param name="buildpackName"> The name of the buildpack resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="buildpackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="buildpackName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SupportedBuildpackResource> GetSupportedBuildpackResource(string buildpackName, CancellationToken cancellationToken = default)
        {
            return GetSupportedBuildpackResources().Get(buildpackName, cancellationToken);
        }

        /// <summary> Gets a collection of SupportedStackResources in the AppBuildService. </summary>
        /// <returns> An object representing collection of SupportedStackResources and their operations over a SupportedStackResource. </returns>
        public virtual SupportedStackResourceCollection GetSupportedStackResources()
        {
            return GetCachedClient(Client => new SupportedStackResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get the supported stack resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}
        /// Operation Id: BuildService_GetSupportedStack
        /// </summary>
        /// <param name="stackName"> The name of the stack resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="stackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="stackName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SupportedStackResource>> GetSupportedStackResourceAsync(string stackName, CancellationToken cancellationToken = default)
        {
            return await GetSupportedStackResources().GetAsync(stackName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the supported stack resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}
        /// Operation Id: BuildService_GetSupportedStack
        /// </summary>
        /// <param name="stackName"> The name of the stack resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="stackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="stackName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SupportedStackResource> GetSupportedStackResource(string stackName, CancellationToken cancellationToken = default)
        {
            return GetSupportedStackResources().Get(stackName, cancellationToken);
        }

        /// <summary> Gets a collection of AppBuilderResources in the AppBuildService. </summary>
        /// <returns> An object representing collection of AppBuilderResources and their operations over a AppBuilderResource. </returns>
        public virtual AppBuilderResourceCollection GetAppBuilderResources()
        {
            return GetCachedClient(Client => new AppBuilderResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get a KPack builder.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}
        /// Operation Id: BuildServiceBuilder_Get
        /// </summary>
        /// <param name="builderName"> The name of the builder resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="builderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="builderName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AppBuilderResource>> GetAppBuilderResourceAsync(string builderName, CancellationToken cancellationToken = default)
        {
            return await GetAppBuilderResources().GetAsync(builderName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a KPack builder.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}
        /// Operation Id: BuildServiceBuilder_Get
        /// </summary>
        /// <param name="builderName"> The name of the builder resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="builderName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="builderName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AppBuilderResource> GetAppBuilderResource(string builderName, CancellationToken cancellationToken = default)
        {
            return GetAppBuilderResources().Get(builderName, cancellationToken);
        }

        /// <summary> Gets a collection of AppBuildServiceAgentPoolResources in the AppBuildService. </summary>
        /// <returns> An object representing collection of AppBuildServiceAgentPoolResources and their operations over a AppBuildServiceAgentPoolResource. </returns>
        public virtual AppBuildServiceAgentPoolResourceCollection GetAppBuildServiceAgentPoolResources()
        {
            return GetCachedClient(Client => new AppBuildServiceAgentPoolResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get build service agent pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}
        /// Operation Id: BuildServiceAgentPool_Get
        /// </summary>
        /// <param name="agentPoolName"> The name of the build service agent pool resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="agentPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AppBuildServiceAgentPoolResource>> GetAppBuildServiceAgentPoolResourceAsync(string agentPoolName, CancellationToken cancellationToken = default)
        {
            return await GetAppBuildServiceAgentPoolResources().GetAsync(agentPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get build service agent pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}
        /// Operation Id: BuildServiceAgentPool_Get
        /// </summary>
        /// <param name="agentPoolName"> The name of the build service agent pool resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="agentPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="agentPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AppBuildServiceAgentPoolResource> GetAppBuildServiceAgentPoolResource(string agentPoolName, CancellationToken cancellationToken = default)
        {
            return GetAppBuildServiceAgentPoolResources().Get(agentPoolName, cancellationToken);
        }

        /// <summary>
        /// Get a build service resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}
        /// Operation Id: BuildService_GetBuildService
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AppBuildServiceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _appBuildServiceBuildServiceClientDiagnostics.CreateScope("AppBuildServiceResource.Get");
            scope.Start();
            try
            {
                var response = await _appBuildServiceBuildServiceRestClient.GetBuildServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AppBuildServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a build service resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}
        /// Operation Id: BuildService_GetBuildService
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AppBuildServiceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _appBuildServiceBuildServiceClientDiagnostics.CreateScope("AppBuildServiceResource.Get");
            scope.Start();
            try
            {
                var response = _appBuildServiceBuildServiceRestClient.GetBuildService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AppBuildServiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an resource upload URL for build service, which may be artifacts or source archive.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl
        /// Operation Id: BuildService_GetResourceUploadUrl
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ResourceUploadResult>> GetResourceUploadUriAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _appBuildServiceBuildServiceClientDiagnostics.CreateScope("AppBuildServiceResource.GetResourceUploadUri");
            scope.Start();
            try
            {
                var response = await _appBuildServiceBuildServiceRestClient.GetResourceUploadUriAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an resource upload URL for build service, which may be artifacts or source archive.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl
        /// Operation Id: BuildService_GetResourceUploadUrl
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ResourceUploadResult> GetResourceUploadUri(CancellationToken cancellationToken = default)
        {
            using var scope = _appBuildServiceBuildServiceClientDiagnostics.CreateScope("AppBuildServiceResource.GetResourceUploadUri");
            scope.Start();
            try
            {
                var response = _appBuildServiceBuildServiceRestClient.GetResourceUploadUri(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
