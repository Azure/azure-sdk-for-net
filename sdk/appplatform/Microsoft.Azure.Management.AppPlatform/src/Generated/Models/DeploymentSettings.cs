// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Deployment settings payload
    /// </summary>
    public partial class DeploymentSettings
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentSettings class.
        /// </summary>
        public DeploymentSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentSettings class.
        /// </summary>
        /// <param name="cpu">Required CPU</param>
        /// <param name="memoryInGB">Required Memory size in GB</param>
        /// <param name="jvmOptions">JVM parameter</param>
        /// <param name="instanceCount">Instance count</param>
        /// <param name="environmentVariables">Collection of environment
        /// variables</param>
        /// <param name="runtimeVersion">Runtime version. Possible values
        /// include: 'Java_8', 'Java_11'</param>
        public DeploymentSettings(int? cpu = default(int?), int? memoryInGB = default(int?), string jvmOptions = default(string), int? instanceCount = default(int?), IDictionary<string, string> environmentVariables = default(IDictionary<string, string>), string runtimeVersion = default(string))
        {
            Cpu = cpu;
            MemoryInGB = memoryInGB;
            JvmOptions = jvmOptions;
            InstanceCount = instanceCount;
            EnvironmentVariables = environmentVariables;
            RuntimeVersion = runtimeVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets required CPU
        /// </summary>
        [JsonProperty(PropertyName = "cpu")]
        public int? Cpu { get; set; }

        /// <summary>
        /// Gets or sets required Memory size in GB
        /// </summary>
        [JsonProperty(PropertyName = "memoryInGB")]
        public int? MemoryInGB { get; set; }

        /// <summary>
        /// Gets or sets JVM parameter
        /// </summary>
        [JsonProperty(PropertyName = "jvmOptions")]
        public string JvmOptions { get; set; }

        /// <summary>
        /// Gets or sets instance count
        /// </summary>
        [JsonProperty(PropertyName = "instanceCount")]
        public int? InstanceCount { get; set; }

        /// <summary>
        /// Gets or sets collection of environment variables
        /// </summary>
        [JsonProperty(PropertyName = "environmentVariables")]
        public IDictionary<string, string> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets or sets runtime version. Possible values include: 'Java_8',
        /// 'Java_11'
        /// </summary>
        [JsonProperty(PropertyName = "runtimeVersion")]
        public string RuntimeVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Cpu > 4)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Cpu", 4);
            }
            if (Cpu < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Cpu", 1);
            }
            if (MemoryInGB > 8)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MemoryInGB", 8);
            }
            if (MemoryInGB < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MemoryInGB", 1);
            }
            if (InstanceCount > 20)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "InstanceCount", 20);
            }
            if (InstanceCount < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "InstanceCount", 1);
            }
        }
    }
}
