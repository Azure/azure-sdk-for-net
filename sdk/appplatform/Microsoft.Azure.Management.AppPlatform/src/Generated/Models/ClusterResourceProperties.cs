// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Service properties payload
    /// </summary>
    public partial class ClusterResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>
        public ClusterResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>
        /// <param name="provisioningState">Provisioning state of the Service.
        /// Possible values include: 'Creating', 'Updating', 'Starting',
        /// 'Stopping', 'Deleting', 'Deleted', 'Succeeded', 'Failed', 'Moving',
        /// 'Moved', 'MoveFailed'</param>
        /// <param name="networkProfile">Network profile of the Service</param>
        /// <param name="vnetAddons">Additional Service settings in vnet
        /// injection instance</param>
        /// <param name="version">Version of the Service</param>
        /// <param name="serviceId">ServiceInstanceEntity GUID which uniquely
        /// identifies a created resource</param>
        /// <param name="powerState">Power state of the Service. Possible
        /// values include: 'Running', 'Stopped'</param>
        /// <param name="fqdn">Fully qualified dns name of the service
        /// instance</param>
        /// <param name="marketplaceResource">Purchasing 3rd party product of
        /// the Service resource.</param>
        public ClusterResourceProperties(string provisioningState = default(string), NetworkProfile networkProfile = default(NetworkProfile), ServiceVNetAddons vnetAddons = default(ServiceVNetAddons), int? version = default(int?), string serviceId = default(string), string powerState = default(string), bool? zoneRedundant = default(bool?), string fqdn = default(string), MarketplaceResource marketplaceResource = default(MarketplaceResource))
        {
            ProvisioningState = provisioningState;
            NetworkProfile = networkProfile;
            VnetAddons = vnetAddons;
            Version = version;
            ServiceId = serviceId;
            PowerState = powerState;
            ZoneRedundant = zoneRedundant;
            Fqdn = fqdn;
            MarketplaceResource = marketplaceResource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the Service. Possible values include:
        /// 'Creating', 'Updating', 'Starting', 'Stopping', 'Deleting',
        /// 'Deleted', 'Succeeded', 'Failed', 'Moving', 'Moved', 'MoveFailed'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets network profile of the Service
        /// </summary>
        [JsonProperty(PropertyName = "networkProfile")]
        public NetworkProfile NetworkProfile { get; set; }

        /// <summary>
        /// Gets or sets additional Service settings in vnet injection instance
        /// </summary>
        [JsonProperty(PropertyName = "vnetAddons")]
        public ServiceVNetAddons VnetAddons { get; set; }

        /// <summary>
        /// Gets version of the Service
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; private set; }

        /// <summary>
        /// Gets serviceInstanceEntity GUID which uniquely identifies a created
        /// resource
        /// </summary>
        [JsonProperty(PropertyName = "serviceId")]
        public string ServiceId { get; private set; }

        /// <summary>
        /// Gets power state of the Service. Possible values include:
        /// 'Running', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "powerState")]
        public string PowerState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zoneRedundant")]
        public bool? ZoneRedundant { get; set; }

        /// <summary>
        /// Gets fully qualified dns name of the service instance
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; private set; }

        /// <summary>
        /// Gets or sets purchasing 3rd party product of the Service resource.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceResource")]
        public MarketplaceResource MarketplaceResource { get; set; }

    }
}
