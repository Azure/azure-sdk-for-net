// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Config server git properties payload
    /// </summary>
    public partial class ConfigServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ConfigServerProperties class.
        /// </summary>
        public ConfigServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigServerProperties class.
        /// </summary>
        /// <param name="provisioningState">State of the config server.
        /// Possible values include: 'NotAvailable', 'Deleted', 'Failed',
        /// 'Succeeded', 'Updating'</param>
        /// <param name="error">Error when apply config server
        /// settings.</param>
        /// <param name="configServer">Settings of config server.</param>
        public ConfigServerProperties(string provisioningState = default(string), Error error = default(Error), ConfigServerSettings configServer = default(ConfigServerSettings))
        {
            ProvisioningState = provisioningState;
            Error = error;
            ConfigServer = configServer;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the config server. Possible values include:
        /// 'NotAvailable', 'Deleted', 'Failed', 'Succeeded', 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets error when apply config server settings.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public Error Error { get; set; }

        /// <summary>
        /// Gets or sets settings of config server.
        /// </summary>
        [JsonProperty(PropertyName = "configServer")]
        public ConfigServerSettings ConfigServer { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConfigServer != null)
            {
                ConfigServer.Validate();
            }
        }
    }
}
