// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Property of git.
    /// </summary>
    public partial class ConfigServerGitProperty
    {
        /// <summary>
        /// Initializes a new instance of the ConfigServerGitProperty class.
        /// </summary>
        public ConfigServerGitProperty()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConfigServerGitProperty class.
        /// </summary>
        /// <param name="uri">URI of the repository</param>
        /// <param name="repositories">Repositories of git.</param>
        /// <param name="label">Label of the repository</param>
        /// <param name="searchPaths">Searching path of the repository</param>
        /// <param name="username">Username of git repository basic
        /// auth.</param>
        /// <param name="password">Password of git repository basic
        /// auth.</param>
        /// <param name="hostKey">Public sshKey of git repository.</param>
        /// <param name="hostKeyAlgorithm">SshKey algorithm of git
        /// repository.</param>
        /// <param name="privateKey">Private sshKey algorithm of git
        /// repository.</param>
        /// <param name="strictHostKeyChecking">Strict host key checking or
        /// not.</param>
        public ConfigServerGitProperty(string uri, IList<GitPatternRepository> repositories = default(IList<GitPatternRepository>), string label = default(string), IList<string> searchPaths = default(IList<string>), string username = default(string), string password = default(string), string hostKey = default(string), string hostKeyAlgorithm = default(string), string privateKey = default(string), bool? strictHostKeyChecking = default(bool?))
        {
            Repositories = repositories;
            Uri = uri;
            Label = label;
            SearchPaths = searchPaths;
            Username = username;
            Password = password;
            HostKey = hostKey;
            HostKeyAlgorithm = hostKeyAlgorithm;
            PrivateKey = privateKey;
            StrictHostKeyChecking = strictHostKeyChecking;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets repositories of git.
        /// </summary>
        [JsonProperty(PropertyName = "repositories")]
        public IList<GitPatternRepository> Repositories { get; set; }

        /// <summary>
        /// Gets or sets URI of the repository
        /// </summary>
        [JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or sets label of the repository
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets searching path of the repository
        /// </summary>
        [JsonProperty(PropertyName = "searchPaths")]
        public IList<string> SearchPaths { get; set; }

        /// <summary>
        /// Gets or sets username of git repository basic auth.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets password of git repository basic auth.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets public sshKey of git repository.
        /// </summary>
        [JsonProperty(PropertyName = "hostKey")]
        public string HostKey { get; set; }

        /// <summary>
        /// Gets or sets sshKey algorithm of git repository.
        /// </summary>
        [JsonProperty(PropertyName = "hostKeyAlgorithm")]
        public string HostKeyAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets private sshKey algorithm of git repository.
        /// </summary>
        [JsonProperty(PropertyName = "privateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or sets strict host key checking or not.
        /// </summary>
        [JsonProperty(PropertyName = "strictHostKeyChecking")]
        public bool? StrictHostKeyChecking { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Uri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Uri");
            }
            if (Repositories != null)
            {
                foreach (var element in Repositories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
