// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes an available Azure Spring Cloud SKU.
    /// </summary>
    public partial class ResourceSku
    {
        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>
        public ResourceSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceSku class.
        /// </summary>
        /// <param name="resourceType">Gets the type of resource the SKU
        /// applies to.</param>
        /// <param name="name">Gets the name of SKU.</param>
        /// <param name="tier">Gets the tier of SKU.</param>
        /// <param name="capacity">Gets the capacity of SKU.</param>
        /// <param name="locations">Gets the set of locations that the SKU is
        /// available.</param>
        /// <param name="locationInfo">Gets a list of locations and
        /// availability zones in those locations where the SKU is
        /// available.</param>
        /// <param name="restrictions">Gets the restrictions because of which
        /// SKU cannot be used. This is
        /// empty if there are no restrictions.</param>
        public ResourceSku(string resourceType = default(string), string name = default(string), string tier = default(string), SkuCapacity capacity = default(SkuCapacity), IList<string> locations = default(IList<string>), IList<ResourceSkuLocationInfo> locationInfo = default(IList<ResourceSkuLocationInfo>), IList<ResourceSkuRestrictions> restrictions = default(IList<ResourceSkuRestrictions>))
        {
            ResourceType = resourceType;
            Name = name;
            Tier = tier;
            Capacity = capacity;
            Locations = locations;
            LocationInfo = locationInfo;
            Restrictions = restrictions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the type of resource the SKU applies to.
        /// </summary>
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets the name of SKU.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets the tier of SKU.
        /// </summary>
        [JsonProperty(PropertyName = "tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Gets the capacity of SKU.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public SkuCapacity Capacity { get; set; }

        /// <summary>
        /// Gets the set of locations that the SKU is available.
        /// </summary>
        [JsonProperty(PropertyName = "locations")]
        public IList<string> Locations { get; set; }

        /// <summary>
        /// Gets a list of locations and availability zones in those locations
        /// where the SKU is available.
        /// </summary>
        [JsonProperty(PropertyName = "locationInfo")]
        public IList<ResourceSkuLocationInfo> LocationInfo { get; set; }

        /// <summary>
        /// Gets the restrictions because of which SKU cannot be used. This is
        /// empty if there are no restrictions.
        /// </summary>
        [JsonProperty(PropertyName = "restrictions")]
        public IList<ResourceSkuRestrictions> Restrictions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Capacity != null)
            {
                Capacity.Validate();
            }
        }
    }
}
