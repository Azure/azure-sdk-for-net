// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// API portal properties payload
    /// </summary>
    public partial class ApiPortalProperties
    {
        /// <summary>
        /// Initializes a new instance of the ApiPortalProperties class.
        /// </summary>
        public ApiPortalProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiPortalProperties class.
        /// </summary>
        /// <param name="provisioningState">State of the API portal. Possible
        /// values include: 'Creating', 'Updating', 'Succeeded', 'Failed',
        /// 'Deleting'</param>
        /// <param name="publicProperty">Indicates whether the API portal
        /// exposes endpoint.</param>
        /// <param name="url">URL of the API portal, exposed when 'public' is
        /// true.</param>
        /// <param name="httpsOnly">Indicate if only https is allowed.</param>
        /// <param name="gatewayIds">The array of resource Ids of gateway to
        /// integrate with API portal.</param>
        /// <param name="sourceUrls">Collection of OpenAPI source URL
        /// locations.</param>
        /// <param name="resourceRequests">The requested resource quantity for
        /// required CPU and Memory.</param>
        /// <param name="instances">Collection of instances belong to API
        /// portal.</param>
        public ApiPortalProperties(string provisioningState = default(string), bool? publicProperty = default(bool?), string url = default(string), bool? httpsOnly = default(bool?), IList<string> gatewayIds = default(IList<string>), IList<string> sourceUrls = default(IList<string>), SsoProperties ssoProperties = default(SsoProperties), ApiPortalResourceRequests resourceRequests = default(ApiPortalResourceRequests), IList<ApiPortalInstance> instances = default(IList<ApiPortalInstance>))
        {
            ProvisioningState = provisioningState;
            PublicProperty = publicProperty;
            Url = url;
            HttpsOnly = httpsOnly;
            GatewayIds = gatewayIds;
            SourceUrls = sourceUrls;
            SsoProperties = ssoProperties;
            ResourceRequests = resourceRequests;
            Instances = instances;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets state of the API portal. Possible values include: 'Creating',
        /// 'Updating', 'Succeeded', 'Failed', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets indicates whether the API portal exposes endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "public")]
        public bool? PublicProperty { get; set; }

        /// <summary>
        /// Gets URL of the API portal, exposed when 'public' is true.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; private set; }

        /// <summary>
        /// Gets or sets indicate if only https is allowed.
        /// </summary>
        [JsonProperty(PropertyName = "httpsOnly")]
        public bool? HttpsOnly { get; set; }

        /// <summary>
        /// Gets or sets the array of resource Ids of gateway to integrate with
        /// API portal.
        /// </summary>
        [JsonProperty(PropertyName = "gatewayIds")]
        public IList<string> GatewayIds { get; set; }

        /// <summary>
        /// Gets or sets collection of OpenAPI source URL locations.
        /// </summary>
        [JsonProperty(PropertyName = "sourceUrls")]
        public IList<string> SourceUrls { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ssoProperties")]
        public SsoProperties SsoProperties { get; set; }

        /// <summary>
        /// Gets the requested resource quantity for required CPU and Memory.
        /// </summary>
        [JsonProperty(PropertyName = "resourceRequests")]
        public ApiPortalResourceRequests ResourceRequests { get; private set; }

        /// <summary>
        /// Gets collection of instances belong to API portal.
        /// </summary>
        [JsonProperty(PropertyName = "instances")]
        public IList<ApiPortalInstance> Instances { get; private set; }

    }
}
