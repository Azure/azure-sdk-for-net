// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// REST API for Azure Spring Apps
    /// </summary>
    public partial class AppPlatformManagementClient : ServiceClient<AppPlatformManagementClient>, IAppPlatformManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// Gets subscription ID which uniquely identify the Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IServicesOperations.
        /// </summary>
        public virtual IServicesOperations Services { get; private set; }

        /// <summary>
        /// Gets the IConfigServersOperations.
        /// </summary>
        public virtual IConfigServersOperations ConfigServers { get; private set; }

        /// <summary>
        /// Gets the IConfigurationServicesOperations.
        /// </summary>
        public virtual IConfigurationServicesOperations ConfigurationServices { get; private set; }

        /// <summary>
        /// Gets the IServiceRegistriesOperations.
        /// </summary>
        public virtual IServiceRegistriesOperations ServiceRegistries { get; private set; }

        /// <summary>
        /// Gets the IBuildServiceOperations.
        /// </summary>
        public virtual IBuildServiceOperations BuildService { get; private set; }

        /// <summary>
        /// Gets the IBuildpackBindingOperations.
        /// </summary>
        public virtual IBuildpackBindingOperations BuildpackBinding { get; private set; }

        /// <summary>
        /// Gets the IBuildServiceBuilderOperations.
        /// </summary>
        public virtual IBuildServiceBuilderOperations BuildServiceBuilder { get; private set; }

        /// <summary>
        /// Gets the IBuildServiceAgentPoolOperations.
        /// </summary>
        public virtual IBuildServiceAgentPoolOperations BuildServiceAgentPool { get; private set; }

        /// <summary>
        /// Gets the IMonitoringSettingsOperations.
        /// </summary>
        public virtual IMonitoringSettingsOperations MonitoringSettings { get; private set; }

        /// <summary>
        /// Gets the IAppsOperations.
        /// </summary>
        public virtual IAppsOperations Apps { get; private set; }

        /// <summary>
        /// Gets the IBindingsOperations.
        /// </summary>
        public virtual IBindingsOperations Bindings { get; private set; }

        /// <summary>
        /// Gets the IStoragesOperations.
        /// </summary>
        public virtual IStoragesOperations Storages { get; private set; }

        /// <summary>
        /// Gets the ICertificatesOperations.
        /// </summary>
        public virtual ICertificatesOperations Certificates { get; private set; }

        /// <summary>
        /// Gets the ICustomDomainsOperations.
        /// </summary>
        public virtual ICustomDomainsOperations CustomDomains { get; private set; }

        /// <summary>
        /// Gets the IDeploymentsOperations.
        /// </summary>
        public virtual IDeploymentsOperations Deployments { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IRuntimeVersionsOperations.
        /// </summary>
        public virtual IRuntimeVersionsOperations RuntimeVersions { get; private set; }

        /// <summary>
        /// Gets the ISkusOperations.
        /// </summary>
        public virtual ISkusOperations Skus { get; private set; }

        /// <summary>
        /// Gets the IGatewaysOperations.
        /// </summary>
        public virtual IGatewaysOperations Gateways { get; private set; }

        /// <summary>
        /// Gets the IGatewayRouteConfigsOperations.
        /// </summary>
        public virtual IGatewayRouteConfigsOperations GatewayRouteConfigs { get; private set; }

        /// <summary>
        /// Gets the IGatewayCustomDomainsOperations.
        /// </summary>
        public virtual IGatewayCustomDomainsOperations GatewayCustomDomains { get; private set; }

        /// <summary>
        /// Gets the IApiPortalsOperations.
        /// </summary>
        public virtual IApiPortalsOperations ApiPortals { get; private set; }

        /// <summary>
        /// Gets the IApiPortalCustomDomainsOperations.
        /// </summary>
        public virtual IApiPortalCustomDomainsOperations ApiPortalCustomDomains { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AppPlatformManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected AppPlatformManagementClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AppPlatformManagementClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AppPlatformManagementClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AppPlatformManagementClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AppPlatformManagementClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppPlatformManagementClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AppPlatformManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppPlatformManagementClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppPlatformManagementClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppPlatformManagementClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppPlatformManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppPlatformManagementClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Services = new ServicesOperations(this);
            ConfigServers = new ConfigServersOperations(this);
            ConfigurationServices = new ConfigurationServicesOperations(this);
            ServiceRegistries = new ServiceRegistriesOperations(this);
            BuildService = new BuildServiceOperations(this);
            BuildpackBinding = new BuildpackBindingOperations(this);
            BuildServiceBuilder = new BuildServiceBuilderOperations(this);
            BuildServiceAgentPool = new BuildServiceAgentPoolOperations(this);
            MonitoringSettings = new MonitoringSettingsOperations(this);
            Apps = new AppsOperations(this);
            Bindings = new BindingsOperations(this);
            Storages = new StoragesOperations(this);
            Certificates = new CertificatesOperations(this);
            CustomDomains = new CustomDomainsOperations(this);
            Deployments = new DeploymentsOperations(this);
            Operations = new Operations(this);
            RuntimeVersions = new RuntimeVersionsOperations(this);
            Skus = new SkusOperations(this);
            Gateways = new GatewaysOperations(this);
            GatewayRouteConfigs = new GatewayRouteConfigsOperations(this);
            GatewayCustomDomains = new GatewayCustomDomainsOperations(this);
            ApiPortals = new ApiPortalsOperations(this);
            ApiPortalCustomDomains = new ApiPortalCustomDomainsOperations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            ApiVersion = "2022-05-01-preview";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CustomPersistentDiskProperties>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CustomPersistentDiskProperties>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CertificateProperties>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CertificateProperties>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<StorageProperties>("storageType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<StorageProperties>("storageType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<UserSourceInfo>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<UserSourceInfo>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProbeAction>("type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProbeAction>("type"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
