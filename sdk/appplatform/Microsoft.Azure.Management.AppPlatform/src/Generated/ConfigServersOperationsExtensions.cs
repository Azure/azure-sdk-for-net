// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AppPlatform
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConfigServersOperations.
    /// </summary>
    public static partial class ConfigServersOperationsExtensions
    {
            /// <summary>
            /// Get the config server and its properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            public static ConfigServerResource Get(this IConfigServersOperations operations, string resourceGroupName, string serviceName)
            {
                return operations.GetAsync(resourceGroupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the config server and its properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerResource> GetAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            public static ConfigServerResource UpdatePut(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource)
            {
                return operations.UpdatePutAsync(resourceGroupName, serviceName, configServerResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerResource> UpdatePutAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePutWithHttpMessagesAsync(resourceGroupName, serviceName, configServerResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            public static ConfigServerResource UpdatePatch(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource)
            {
                return operations.UpdatePatchAsync(resourceGroupName, serviceName, configServerResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerResource> UpdatePatchAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePatchWithHttpMessagesAsync(resourceGroupName, serviceName, configServerResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if the config server settings are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerSettings'>
            /// Config server settings to be validated
            /// </param>
            public static ConfigServerSettingsValidateResult Validate(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerSettings configServerSettings)
            {
                return operations.ValidateAsync(resourceGroupName, serviceName, configServerSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the config server settings are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerSettings'>
            /// Config server settings to be validated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerSettingsValidateResult> ValidateAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerSettings configServerSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(resourceGroupName, serviceName, configServerSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            public static ConfigServerResource BeginUpdatePut(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource)
            {
                return operations.BeginUpdatePutAsync(resourceGroupName, serviceName, configServerResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerResource> BeginUpdatePutAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdatePutWithHttpMessagesAsync(resourceGroupName, serviceName, configServerResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            public static ConfigServerResource BeginUpdatePatch(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource)
            {
                return operations.BeginUpdatePatchAsync(resourceGroupName, serviceName, configServerResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the config server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerResource'>
            /// Parameters for the update operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerResource> BeginUpdatePatchAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerResource configServerResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdatePatchWithHttpMessagesAsync(resourceGroupName, serviceName, configServerResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if the config server settings are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerSettings'>
            /// Config server settings to be validated
            /// </param>
            public static ConfigServerSettingsValidateResult BeginValidate(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerSettings configServerSettings)
            {
                return operations.BeginValidateAsync(resourceGroupName, serviceName, configServerSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the config server settings are valid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the Service resource.
            /// </param>
            /// <param name='configServerSettings'>
            /// Config server settings to be validated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfigServerSettingsValidateResult> BeginValidateAsync(this IConfigServersOperations operations, string resourceGroupName, string serviceName, ConfigServerSettings configServerSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginValidateWithHttpMessagesAsync(resourceGroupName, serviceName, configServerSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
