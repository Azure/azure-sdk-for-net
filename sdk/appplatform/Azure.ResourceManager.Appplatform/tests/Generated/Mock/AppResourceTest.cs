// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Appplatform;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Appplatform.Tests.Mock
{
    /// <summary> Test for AppResource. </summary>
    public partial class AppResourceMockTests : MockTestBase
    {
        public AppResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Appplatform.AppResourceCollection> GetAppResourceCollectionAsync(string resourceGroupName, string serviceName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServiceResourceCollection serviceResourceCollection = resourceGroup.GetServiceResources();
            var serviceResourceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serviceResourceCollection, serviceName);
            ServiceResource serviceResource = serviceResourceOperation.Value;
            AppResourceCollection appResourceCollection = serviceResource.GetAppResources();
            return appResourceCollection;
        }

        private async Task<Appplatform.AppResource> GetAppResourceAsync()
        {
            var collection = await GetAppResourceCollectionAsync("myResourceGroup", "myservice");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myapp");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Apps_Get
            var appResource = await GetAppResourceAsync();
            string syncStatus = null;

            await appResource.GetAsync(syncStatus);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Apps_Delete
            var appResource = await GetAppResourceAsync();

            await appResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Apps_Update
            var appResource = await GetAppResourceAsync();
            Appplatform.AppResourceData appResource2 = new Appplatform.AppResourceData()
            {
                Properties = new Appplatform.Models.AppResourceProperties()
                {
                    Public = true,
                    ActiveDeploymentName = "mydeployment1",
                    Fqdn = "myapp.mydomain.com",
                    HttpsOnly = false,
                    TemporaryDisk = new Appplatform.Models.TemporaryDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mytemporarydisk",
                    },
                    PersistentDisk = new Appplatform.Models.PersistentDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mypersistentdisk",
                    },
                    EnableEndToEndTLS = false,
                },
                Identity = new Appplatform.Models.ManagedIdentityProperties()
                {
                    Type = new Appplatform.Models.ManagedIdentityType("SystemAssigned"),
                    PrincipalId = null,
                    TenantId = null,
                },
                Location = "eastus",
            };

            await appResource.UpdateAsync(appResource2);
        }

        [RecordedTest]
        public async Task GetResourceUploadUrlAsync()
        {
            // Example: Apps_GetResourceUploadUrl
            var appResource = await GetAppResourceAsync();

            await appResource.GetResourceUploadUrlAsync();
        }

        [RecordedTest]
        public async Task ValidateDomainAsync()
        {
            // Example: Apps_ValidateDomain
            var appResource = await GetAppResourceAsync();
            Appplatform.Models.CustomDomainValidatePayload validatePayload = new Appplatform.Models.CustomDomainValidatePayload("mydomain.io");

            await appResource.ValidateDomainAsync(validatePayload);
        }
    }
}
