// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.ResourceManager;
using Azure.ResourceManager.Appplatform;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using NUnit.Framework;
using System.Net.Sockets;

namespace Azure.ResourceManager.Appplatform.Tests.Mock
{
    [SetUpFixture]
    public class MockTestsSetupClass
    {
        private static bool embededMockServerStarted = false;
        public static string MockEndPoint = $"https://localhost:8443";

        private static bool TestMockServerRunning()
        {
            using (var tcpClient = new TcpClient())
            {
                try
                {
                    var uri = new Uri(MockEndPoint);
                    tcpClient.Connect(uri.Host, uri.Port);
                }
                catch (SocketException)
                {
                    return false;
                }
            }
            return true;
        }

        [OneTimeSetUp]
        public void GlobalSetup()
        {
            if (!TestMockServerRunning())
            {
                embededMockServerStarted = true;
            }
        }

        [OneTimeTearDown]
        public void GlobalTeardown()
        {
            if (embededMockServerStarted)
            {
                embededMockServerStarted = false;
            }
        }
    }

    /// <summary> Test Extension for Azure.ResourceManager.Appplatform. </summary>
    public static partial class TestHelper
    {
        public static async Task<Appplatform.Models.ServiceCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(ServiceResourceCollection collection, string serviceName)
        {
            // Example: Services_CreateOrUpdate
            Appplatform.ServiceResourceData resource = new Appplatform.ServiceResourceData("eastus")
            {
                Properties = new Appplatform.Models.ClusterResourceProperties(),
                Sku = new Appplatform.Models.Sku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
            };
            resource.Tags.ReplaceWith(new Dictionary<string, string>() { { "key1", "value1" }, });
            return await collection.CreateOrUpdateAsync(serviceName, resource);
        }

        public static async Task<Response<Appplatform.ServiceResource>> GetExampleInstanceAsync(ServiceResourceCollection collection, string serviceName)
        {
            // Example: Services_Get

            return await collection.GetAsync(serviceName);
        }

        public static AsyncPageable<Appplatform.ServiceResource> GetAllExampleInstanceAsync(ServiceResourceCollection collection)
        {
            // Example: Services_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.AppCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(AppResourceCollection collection, string appName)
        {
            // Example: Apps_CreateOrUpdate
            Appplatform.AppResourceData appResource = new Appplatform.AppResourceData()
            {
                Properties = new Appplatform.Models.AppResourceProperties()
                {
                    Public = true,
                    ActiveDeploymentName = "mydeployment1",
                    Fqdn = "myapp.mydomain.com",
                    HttpsOnly = false,
                    TemporaryDisk = new Appplatform.Models.TemporaryDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mytemporarydisk",
                    },
                    PersistentDisk = new Appplatform.Models.PersistentDisk()
                    {
                        SizeInGB = 2,
                        MountPath = "/mypersistentdisk",
                    },
                    EnableEndToEndTLS = false,
                },
                Identity = new Appplatform.Models.ManagedIdentityProperties(),
                Location = "eastus",
            };

            return await collection.CreateOrUpdateAsync(appName, appResource);
        }

        public static async Task<Response<Appplatform.AppResource>> GetExampleInstanceAsync(AppResourceCollection collection, string appName)
        {
            // Example: Apps_Get
            string syncStatus = null;

            return await collection.GetAsync(appName, syncStatus);
        }

        public static AsyncPageable<Appplatform.AppResource> GetAllExampleInstanceAsync(AppResourceCollection collection)
        {
            // Example: Apps_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.BindingCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(BindingResourceCollection collection, string bindingName)
        {
            // Example: Bindings_CreateOrUpdate
            Appplatform.BindingResourceData bindingResource = new Appplatform.BindingResourceData()
            {
                Properties = new Appplatform.Models.BindingResourceProperties()
                {
                    ResourceId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.DocumentDB/databaseAccounts/my-cosmosdb-1",
                    Key = "xxxx",
                },
            };

            return await collection.CreateOrUpdateAsync(bindingName, bindingResource);
        }

        public static async Task<Response<Appplatform.BindingResource>> GetExampleInstanceAsync(BindingResourceCollection collection, string bindingName)
        {
            // Example: Bindings_Get

            return await collection.GetAsync(bindingName);
        }

        public static AsyncPageable<Appplatform.BindingResource> GetAllExampleInstanceAsync(BindingResourceCollection collection)
        {
            // Example: Bindings_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.StorageCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(StorageResourceCollection collection, string storageName)
        {
            // Example: Storages_CreateOrUpdate
            Appplatform.StorageResourceData storageResource = new Appplatform.StorageResourceData()
            {
                Properties = new Appplatform.Models.StorageAccount("storage-account-name", "account-key-of-storage-account")
                {
                    StorageType = new Appplatform.Models.StoragePropertiesStorageType("StorageAccount"),
                },
            };

            return await collection.CreateOrUpdateAsync(storageName, storageResource);
        }

        public static async Task<Response<Appplatform.StorageResource>> GetExampleInstanceAsync(StorageResourceCollection collection, string storageName)
        {
            // Example: Storages_Get

            return await collection.GetAsync(storageName);
        }

        public static AsyncPageable<Appplatform.StorageResource> GetAllExampleInstanceAsync(StorageResourceCollection collection)
        {
            // Example: Storages_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.CertificateCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(CertificateResourceCollection collection, string certificateName)
        {
            // Example: Certificates_CreateOrUpdate
            Appplatform.CertificateResourceData certificateResource = new Appplatform.CertificateResourceData()
            {
                Properties = new Appplatform.Models.KeyVaultCertificateProperties("https://myvault.vault.azure.net", "mycert")
                {
                    CertVersion = "08a219d06d874795a96db47e06fbb01e",
                    Type = "KeyVaultCertificate",
                },
            };

            return await collection.CreateOrUpdateAsync(certificateName, certificateResource);
        }

        public static async Task<Response<Appplatform.CertificateResource>> GetExampleInstanceAsync(CertificateResourceCollection collection, string certificateName)
        {
            // Example: Certificates_Get

            return await collection.GetAsync(certificateName);
        }

        public static AsyncPageable<Appplatform.CertificateResource> GetAllExampleInstanceAsync(CertificateResourceCollection collection)
        {
            // Example: Certificates_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.CustomDomainCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(CustomDomainResourceCollection collection, string domainName)
        {
            // Example: CustomDomains_CreateOrUpdate
            Appplatform.CustomDomainResourceData domainResource = new Appplatform.CustomDomainResourceData()
            {
                Properties = new Appplatform.Models.CustomDomainProperties()
                {
                    Thumbprint = "934367bf1c97033f877db0f15cb1b586957d3133",
                    CertName = "mycert",
                },
            };

            return await collection.CreateOrUpdateAsync(domainName, domainResource);
        }

        public static async Task<Response<Appplatform.CustomDomainResource>> GetExampleInstanceAsync(CustomDomainResourceCollection collection, string domainName)
        {
            // Example: CustomDomains_Get

            return await collection.GetAsync(domainName);
        }

        public static AsyncPageable<Appplatform.CustomDomainResource> GetAllExampleInstanceAsync(CustomDomainResourceCollection collection)
        {
            // Example: CustomDomains_List

            return collection.GetAllAsync();
        }

        public static async Task<Appplatform.Models.DeploymentCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DeploymentResourceCollection collection, string deploymentName)
        {
            // Example: Deployments_CreateOrUpdate
            Appplatform.DeploymentResourceData deploymentResource = new Appplatform.DeploymentResourceData()
            {
                Properties = new Appplatform.Models.DeploymentResourceProperties()
                {
                    Source = new Appplatform.Models.UserSourceInfo()
                    {
                        Type = new Appplatform.Models.UserSourceType("Source"),
                        RelativePath = "resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc",
                        Version = "1.0",
                        ArtifactSelector = "sub-module-1",
                    },
                    DeploymentSettings = new Appplatform.Models.DeploymentSettings()
                    {
                        ResourceRequests = new Appplatform.Models.ResourceRequests()
                        {
                            Cpu = "1000m",
                            Memory = "3Gi",
                        },
                        JvmOptions = "-Xms1G -Xmx3G",
                        RuntimeVersion = new Appplatform.Models.RuntimeVersion("Java_8"),
                    },
                },
            };

            return await collection.CreateOrUpdateAsync(deploymentName, deploymentResource);
        }

        public static async Task<Response<Appplatform.DeploymentResource>> GetExampleInstanceAsync(DeploymentResourceCollection collection, string deploymentName)
        {
            // Example: Deployments_Get

            return await collection.GetAsync(deploymentName);
        }

        public static AsyncPageable<Appplatform.DeploymentResource> GetAllExampleInstanceAsync(DeploymentResourceCollection collection)
        {
            // Example: Deployments_List
            IEnumerable<string> version = null;

            return collection.GetAllAsync(version);
        }

        public static async Task<ResourceGroup> CreateResourceGroupAsync(string resourceGroupName, ArmClient client)
        {
            var defaultSubscription = await client.GetDefaultSubscriptionAsync();
            var rgop = await defaultSubscription.GetResourceGroups().CreateOrUpdateAsync
            (
            resourceGroupName,
            new ResourceGroupData(defaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            );
            return rgop.Value;
        }

        public static IDictionary<string, string> ReplaceWith(this IDictionary<string, string> dest, IDictionary<string, string> src)
        {
            dest.Clear();
            foreach (var kv in src)
            {
                dest.Add(kv);
            }
            return dest;
        }
    }
}
