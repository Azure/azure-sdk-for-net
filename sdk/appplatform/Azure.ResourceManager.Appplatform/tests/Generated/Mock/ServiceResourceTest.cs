// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Appplatform;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Appplatform.Tests.Mock
{
    /// <summary> Test for ServiceResource. </summary>
    public partial class ServiceResourceMockTests : MockTestBase
    {
        public ServiceResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Appplatform.ServiceResourceCollection> GetServiceResourceCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServiceResourceCollection serviceResourceCollection = resourceGroup.GetServiceResources();
            return serviceResourceCollection;
        }

        private async Task<Appplatform.ServiceResource> GetServiceResourceAsync()
        {
            var collection = await GetServiceResourceCollectionAsync("myResourceGroup");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myservice");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Services_Get
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Services_Delete
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Services_Update
            var serviceResource = await GetServiceResourceAsync();
            Appplatform.ServiceResourceData resource = new Appplatform.ServiceResourceData("eastus")
            {
                Properties = new Appplatform.Models.ClusterResourceProperties(),
                Sku = new Appplatform.Models.Sku()
                {
                    Name = "S0",
                    Tier = "Standard",
                },
            };
            resource.Tags.ReplaceWith(new Dictionary<string, string>() { { "key1", "value1" }, });
            await serviceResource.UpdateAsync(resource);
        }

        [RecordedTest]
        public async Task GetTestKeysAsync()
        {
            // Example: Services_ListTestKeys
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.GetTestKeysAsync();
        }

        [RecordedTest]
        public async Task RegenerateTestKeyAsync()
        {
            // Example: Services_RegenerateTestKey
            var serviceResource = await GetServiceResourceAsync();
            Appplatform.Models.RegenerateTestKeyRequestPayload regenerateTestKeyRequest = new Appplatform.Models.RegenerateTestKeyRequestPayload(new Appplatform.Models.TestKeyType("Primary"));

            await serviceResource.RegenerateTestKeyAsync(regenerateTestKeyRequest);
        }

        [RecordedTest]
        public async Task DisableTestEndpointAsync()
        {
            // Example: Services_DisableTestEndpoint
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.DisableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task EnableTestEndpointAsync()
        {
            // Example: Services_EnableTestEndpoint
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.EnableTestEndpointAsync();
        }

        [RecordedTest]
        public async Task StopAsync()
        {
            // Example: Services_Stop
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.StopAsync();
        }

        [RecordedTest]
        public async Task StartAsync()
        {
            // Example: Services_Start
            var serviceResource = await GetServiceResourceAsync();

            await serviceResource.StartAsync();
        }

        [RecordedTest]
        public async Task ValidateConfigServerAsync()
        {
            // Example: ConfigServers_Validate
            var serviceResource = await GetServiceResourceAsync();
            Appplatform.Models.ConfigServerSettings configServerSettings = new Appplatform.Models.ConfigServerSettings()
            {
                GitProperty = new Appplatform.Models.ConfigServerGitProperty("https://github.com/fake-user/fake-repository.git")
                {
                    Label = "master",
                },
            };

            await serviceResource.ValidateConfigServerAsync(configServerSettings);
        }

        [RecordedTest]
        public async Task GetForClusterDeploymentsAsync()
        {
            // Example: Deployments_ListForCluster
            var serviceResource = await GetServiceResourceAsync();
            IEnumerable<string> version = null;

            serviceResource.GetForClusterDeploymentsAsync(version);
        }

        [RecordedTest]
        public async Task ConfigServerResourceGetAsync()
        {
            // Example: ConfigServers_Get
            var serviceResource = await GetServiceResourceAsync();
            var configServerResource = serviceResource.GetConfigServerResource();

            await configServerResource.GetAsync();
        }

        [RecordedTest]
        public async Task ConfigServerResourceUpdateAsync()
        {
            // Example: ConfigServers_UpdatePatch
            var serviceResource = await GetServiceResourceAsync();
            var configServerResource = serviceResource.GetConfigServerResource();
            Appplatform.ConfigServerResourceData configServerResource2 = new Appplatform.ConfigServerResourceData()
            {
                Properties = new Appplatform.Models.ConfigServerProperties()
                {
                    ConfigServer = new Appplatform.Models.ConfigServerSettings()
                    {
                        GitProperty = new Appplatform.Models.ConfigServerGitProperty("https://github.com/fake-user/fake-repository.git")
                        {
                            Label = "master",
                        },
                    },
                },
            };

            await configServerResource.UpdateAsync(configServerResource2);
        }

        [RecordedTest]
        public async Task MonitoringSettingResourceGetAsync()
        {
            // Example: MonitoringSettings_Get
            var serviceResource = await GetServiceResourceAsync();
            var monitoringSettingResource = serviceResource.GetMonitoringSettingResource();

            await monitoringSettingResource.GetAsync();
        }

        [RecordedTest]
        public async Task MonitoringSettingResourceUpdateAsync()
        {
            // Example: MonitoringSettings_UpdatePatch
            var serviceResource = await GetServiceResourceAsync();
            var monitoringSettingResource = serviceResource.GetMonitoringSettingResource();
            Appplatform.MonitoringSettingResourceData monitoringSettingResource2 = new Appplatform.MonitoringSettingResourceData()
            {
                Properties = new Appplatform.Models.MonitoringSettingProperties()
                {
                    TraceEnabled = true,
                    AppInsightsInstrumentationKey = "00000000-0000-0000-0000-000000000000",
                    AppInsightsSamplingRate = 10,
                },
            };

            await monitoringSettingResource.UpdateAsync(monitoringSettingResource2);
        }
    }
}
