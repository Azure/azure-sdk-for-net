// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Appplatform;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Appplatform.Tests.Mock
{
    /// <summary> Test for DeploymentResource. </summary>
    public partial class DeploymentResourceMockTests : MockTestBase
    {
        public DeploymentResourceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Appplatform.DeploymentResourceCollection> GetDeploymentResourceCollectionAsync(string resourceGroupName, string serviceName, string appName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServiceResourceCollection serviceResourceCollection = resourceGroup.GetServiceResources();
            var serviceResourceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serviceResourceCollection, serviceName);
            ServiceResource serviceResource = serviceResourceOperation.Value;
            AppResourceCollection appResourceCollection = serviceResource.GetAppResources();
            var appResourceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(appResourceCollection, appName);
            AppResource appResource = appResourceOperation.Value;
            DeploymentResourceCollection deploymentResourceCollection = appResource.GetDeploymentResources();
            return deploymentResourceCollection;
        }

        private async Task<Appplatform.DeploymentResource> GetDeploymentResourceAsync()
        {
            var collection = await GetDeploymentResourceCollectionAsync("myResourceGroup", "myservice", "myapp");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "mydeployment");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Deployments_Get
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Deployments_Delete
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Deployments_Update
            var deploymentResource = await GetDeploymentResourceAsync();
            Appplatform.DeploymentResourceData deploymentResource2 = new Appplatform.DeploymentResourceData()
            {
                Properties = new Appplatform.Models.DeploymentResourceProperties()
                {
                    Source = new Appplatform.Models.UserSourceInfo()
                    {
                        Type = new Appplatform.Models.UserSourceType("Source"),
                        RelativePath = "resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc",
                        Version = "1.0",
                        ArtifactSelector = "sub-module-1",
                    },
                },
            };

            await deploymentResource.UpdateAsync(deploymentResource2);
        }

        [RecordedTest]
        public async Task StartAsync()
        {
            // Example: Deployments_Start
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.StartAsync();
        }

        [RecordedTest]
        public async Task StopAsync()
        {
            // Example: Deployments_Stop
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.StopAsync();
        }

        [RecordedTest]
        public async Task RestartAsync()
        {
            // Example: Deployments_Restart
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.RestartAsync();
        }

        [RecordedTest]
        public async Task GetLogFileUrlAsync()
        {
            // Example: Deployments_GetLogFileUrl
            var deploymentResource = await GetDeploymentResourceAsync();

            await deploymentResource.GetLogFileUrlAsync();
        }

        [RecordedTest]
        public async Task GenerateHeapDumpAsync()
        {
            // Example: Deployments_GenerateHeapDump
            var deploymentResource = await GetDeploymentResourceAsync();
            Appplatform.Models.DiagnosticParameters diagnosticParameters = new Appplatform.Models.DiagnosticParameters()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
            };

            await deploymentResource.GenerateHeapDumpAsync(diagnosticParameters);
        }

        [RecordedTest]
        public async Task GenerateThreadDumpAsync()
        {
            // Example: Deployments_GenerateHeapDump
            var deploymentResource = await GetDeploymentResourceAsync();
            Appplatform.Models.DiagnosticParameters diagnosticParameters = new Appplatform.Models.DiagnosticParameters()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
            };

            await deploymentResource.GenerateThreadDumpAsync(diagnosticParameters);
        }

        [RecordedTest]
        public async Task StartJFRAsync()
        {
            // Example: Deployments_StartJFR
            var deploymentResource = await GetDeploymentResourceAsync();
            Appplatform.Models.DiagnosticParameters diagnosticParameters = new Appplatform.Models.DiagnosticParameters()
            {
                AppInstance = "myappinstance",
                FilePath = "/byos/diagnose",
                Duration = "60s",
            };

            await deploymentResource.StartJFRAsync(diagnosticParameters);
        }
    }
}
