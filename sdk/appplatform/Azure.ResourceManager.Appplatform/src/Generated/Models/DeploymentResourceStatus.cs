// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Appplatform.Models
{
    /// <summary> Status of the Deployment. </summary>
    public readonly partial struct DeploymentResourceStatus : IEquatable<DeploymentResourceStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeploymentResourceStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeploymentResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string StoppedValue = "Stopped";
        private const string RunningValue = "Running";
        private const string FailedValue = "Failed";
        private const string AllocatingValue = "Allocating";
        private const string UpgradingValue = "Upgrading";
        private const string CompilingValue = "Compiling";

        /// <summary> Unknown. </summary>
        public static DeploymentResourceStatus Unknown { get; } = new DeploymentResourceStatus(UnknownValue);
        /// <summary> Stopped. </summary>
        public static DeploymentResourceStatus Stopped { get; } = new DeploymentResourceStatus(StoppedValue);
        /// <summary> Running. </summary>
        public static DeploymentResourceStatus Running { get; } = new DeploymentResourceStatus(RunningValue);
        /// <summary> Failed. </summary>
        public static DeploymentResourceStatus Failed { get; } = new DeploymentResourceStatus(FailedValue);
        /// <summary> Allocating. </summary>
        public static DeploymentResourceStatus Allocating { get; } = new DeploymentResourceStatus(AllocatingValue);
        /// <summary> Upgrading. </summary>
        public static DeploymentResourceStatus Upgrading { get; } = new DeploymentResourceStatus(UpgradingValue);
        /// <summary> Compiling. </summary>
        public static DeploymentResourceStatus Compiling { get; } = new DeploymentResourceStatus(CompilingValue);
        /// <summary> Determines if two <see cref="DeploymentResourceStatus"/> values are the same. </summary>
        public static bool operator ==(DeploymentResourceStatus left, DeploymentResourceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeploymentResourceStatus"/> values are not the same. </summary>
        public static bool operator !=(DeploymentResourceStatus left, DeploymentResourceStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeploymentResourceStatus"/>. </summary>
        public static implicit operator DeploymentResourceStatus(string value) => new DeploymentResourceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeploymentResourceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeploymentResourceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
