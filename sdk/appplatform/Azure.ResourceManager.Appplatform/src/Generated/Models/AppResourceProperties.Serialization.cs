// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Appplatform.Models
{
    public partial class AppResourceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Public))
            {
                writer.WritePropertyName("public");
                writer.WriteBooleanValue(Public.Value);
            }
            if (Optional.IsDefined(ActiveDeploymentName))
            {
                writer.WritePropertyName("activeDeploymentName");
                writer.WriteStringValue(ActiveDeploymentName);
            }
            if (Optional.IsDefined(Fqdn))
            {
                writer.WritePropertyName("fqdn");
                writer.WriteStringValue(Fqdn);
            }
            if (Optional.IsDefined(HttpsOnly))
            {
                writer.WritePropertyName("httpsOnly");
                writer.WriteBooleanValue(HttpsOnly.Value);
            }
            if (Optional.IsDefined(TemporaryDisk))
            {
                writer.WritePropertyName("temporaryDisk");
                writer.WriteObjectValue(TemporaryDisk);
            }
            if (Optional.IsDefined(PersistentDisk))
            {
                writer.WritePropertyName("persistentDisk");
                writer.WriteObjectValue(PersistentDisk);
            }
            if (Optional.IsCollectionDefined(CustomPersistentDisks))
            {
                writer.WritePropertyName("customPersistentDisks");
                writer.WriteStartArray();
                foreach (var item in CustomPersistentDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EnableEndToEndTLS))
            {
                writer.WritePropertyName("enableEndToEndTLS");
                writer.WriteBooleanValue(EnableEndToEndTLS.Value);
            }
            if (Optional.IsCollectionDefined(LoadedCertificates))
            {
                writer.WritePropertyName("loadedCertificates");
                writer.WriteStartArray();
                foreach (var item in LoadedCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AppResourceProperties DeserializeAppResourceProperties(JsonElement element)
        {
            Optional<bool> @public = default;
            Optional<string> url = default;
            Optional<AppResourceProvisioningState> provisioningState = default;
            Optional<string> activeDeploymentName = default;
            Optional<string> fqdn = default;
            Optional<bool> httpsOnly = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<TemporaryDisk> temporaryDisk = default;
            Optional<PersistentDisk> persistentDisk = default;
            Optional<IList<CustomPersistentDiskResource>> customPersistentDisks = default;
            Optional<bool> enableEndToEndTLS = default;
            Optional<IList<LoadedCertificate>> loadedCertificates = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("public"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @public = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("url"))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new AppResourceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("activeDeploymentName"))
                {
                    activeDeploymentName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fqdn"))
                {
                    fqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpsOnly"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    httpsOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createdTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("temporaryDisk"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temporaryDisk = TemporaryDisk.DeserializeTemporaryDisk(property.Value);
                    continue;
                }
                if (property.NameEquals("persistentDisk"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    persistentDisk = PersistentDisk.DeserializePersistentDisk(property.Value);
                    continue;
                }
                if (property.NameEquals("customPersistentDisks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CustomPersistentDiskResource> array = new List<CustomPersistentDiskResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CustomPersistentDiskResource.DeserializeCustomPersistentDiskResource(item));
                    }
                    customPersistentDisks = array;
                    continue;
                }
                if (property.NameEquals("enableEndToEndTLS"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableEndToEndTLS = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("loadedCertificates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LoadedCertificate> array = new List<LoadedCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LoadedCertificate.DeserializeLoadedCertificate(item));
                    }
                    loadedCertificates = array;
                    continue;
                }
            }
            return new AppResourceProperties(Optional.ToNullable(@public), url.Value, Optional.ToNullable(provisioningState), activeDeploymentName.Value, fqdn.Value, Optional.ToNullable(httpsOnly), Optional.ToNullable(createdTime), temporaryDisk.Value, persistentDisk.Value, Optional.ToList(customPersistentDisks), Optional.ToNullable(enableEndToEndTLS), Optional.ToList(loadedCertificates));
        }
    }
}
