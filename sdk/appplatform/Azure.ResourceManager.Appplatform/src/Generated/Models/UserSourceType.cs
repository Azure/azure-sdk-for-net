// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Appplatform.Models
{
    /// <summary> Type of the source uploaded. </summary>
    public readonly partial struct UserSourceType : IEquatable<UserSourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UserSourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UserSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JarValue = "Jar";
        private const string NetCoreZipValue = "NetCoreZip";
        private const string SourceValue = "Source";
        private const string ContainerValue = "Container";

        /// <summary> Jar. </summary>
        public static UserSourceType Jar { get; } = new UserSourceType(JarValue);
        /// <summary> NetCoreZip. </summary>
        public static UserSourceType NetCoreZip { get; } = new UserSourceType(NetCoreZipValue);
        /// <summary> Source. </summary>
        public static UserSourceType Source { get; } = new UserSourceType(SourceValue);
        /// <summary> Container. </summary>
        public static UserSourceType Container { get; } = new UserSourceType(ContainerValue);
        /// <summary> Determines if two <see cref="UserSourceType"/> values are the same. </summary>
        public static bool operator ==(UserSourceType left, UserSourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UserSourceType"/> values are not the same. </summary>
        public static bool operator !=(UserSourceType left, UserSourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UserSourceType"/>. </summary>
        public static implicit operator UserSourceType(string value) => new UserSourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UserSourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UserSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
