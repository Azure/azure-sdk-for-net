// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Appplatform
{
    /// <summary> A class to add extension methods to Tenant. </summary>
    public static partial class TenantExtensions
    {
        private static RuntimeVersionsRestOperations GetRuntimeVersionsRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, Uri endpoint = null)
        {
            return new RuntimeVersionsRestOperations(clientDiagnostics, pipeline, clientOptions, endpoint);
        }

        /// <summary> Lists all of the available runtime versions supported by Microsoft.AppPlatform provider. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response<IReadOnlyList<SupportedRuntimeVersion>>> GetRuntimeVersionsRuntimeVersionsAsync(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return await tenant.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("TenantExtensions.GetRuntimeVersionsRuntimeVersions");
                scope.Start();
                try
                {
                    var restOperations = GetRuntimeVersionsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = await restOperations.ListRuntimeVersionsAsync(cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(response.Value.Value, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <summary> Lists all of the available runtime versions supported by Microsoft.AppPlatform provider. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response<IReadOnlyList<SupportedRuntimeVersion>> GetRuntimeVersionsRuntimeVersions(this Tenant tenant, CancellationToken cancellationToken = default)
        {
            return tenant.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                using var scope = clientDiagnostics.CreateScope("TenantExtensions.GetRuntimeVersionsRuntimeVersions");
                scope.Start();
                try
                {
                    var restOperations = GetRuntimeVersionsRestOperations(clientDiagnostics, credential, options, pipeline, baseUri);
                    var response = restOperations.ListRuntimeVersions(cancellationToken);
                    return Response.FromValue(response.Value.Value, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }
    }
}
