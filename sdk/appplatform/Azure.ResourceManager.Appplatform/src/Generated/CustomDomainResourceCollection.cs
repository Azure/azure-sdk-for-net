// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Appplatform
{
    /// <summary> A class representing collection of CustomDomainResource and their operations over its parent. </summary>
    public partial class CustomDomainResourceCollection : ArmCollection, IEnumerable<CustomDomainResource>, IAsyncEnumerable<CustomDomainResource>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly CustomDomainsRestOperations _customDomainsRestClient;

        /// <summary> Initializes a new instance of the <see cref="CustomDomainResourceCollection"/> class for mocking. </summary>
        protected CustomDomainResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of CustomDomainResourceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal CustomDomainResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _customDomainsRestClient = new CustomDomainsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => AppResource.ResourceType;

        // Collection level operations.

        /// <summary> Create or update custom domain of one lifecycle application. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="domainResource"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> or <paramref name="domainResource"/> is null. </exception>
        public virtual CustomDomainCreateOrUpdateOperation CreateOrUpdate(string domainName, CustomDomainResourceData domainResource, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }
            if (domainResource == null)
            {
                throw new ArgumentNullException(nameof(domainResource));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, domainResource, cancellationToken);
                var operation = new CustomDomainCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _customDomainsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, domainResource).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update custom domain of one lifecycle application. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="domainResource"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> or <paramref name="domainResource"/> is null. </exception>
        public async virtual Task<CustomDomainCreateOrUpdateOperation> CreateOrUpdateAsync(string domainName, CustomDomainResourceData domainResource, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }
            if (domainResource == null)
            {
                throw new ArgumentNullException(nameof(domainResource));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, domainResource, cancellationToken).ConfigureAwait(false);
                var operation = new CustomDomainCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _customDomainsRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, domainResource).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the custom domain of one lifecycle application. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public virtual Response<CustomDomainResource> Get(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CustomDomainResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the custom domain of one lifecycle application. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public async virtual Task<Response<CustomDomainResource>> GetAsync(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new CustomDomainResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public virtual Response<CustomDomainResource> GetIfExists(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _customDomainsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<CustomDomainResource>(null, response.GetRawResponse())
                    : Response.FromValue(new CustomDomainResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public async virtual Task<Response<CustomDomainResource>> GetIfExistsAsync(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _customDomainsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, domainName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<CustomDomainResource>(null, response.GetRawResponse())
                    : Response.FromValue(new CustomDomainResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(domainName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="domainName"> The name of the custom domain resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="domainName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string domainName, CancellationToken cancellationToken = default)
        {
            if (domainName == null)
            {
                throw new ArgumentNullException(nameof(domainName));
            }

            using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(domainName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the custom domains of one lifecycle application. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomDomainResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomDomainResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<CustomDomainResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _customDomainsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomainResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomDomainResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _customDomainsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomainResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List the custom domains of one lifecycle application. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomDomainResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomDomainResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomDomainResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _customDomainsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomainResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomDomainResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CustomDomainResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _customDomainsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomDomainResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<CustomDomainResource> IEnumerable<CustomDomainResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CustomDomainResource> IAsyncEnumerable<CustomDomainResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, CustomDomainResource, CustomDomainResourceData> Construct() { }
    }
}
