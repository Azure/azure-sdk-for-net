// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Appplatform.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Appplatform
{
    /// <summary> A class representing collection of StorageResource and their operations over its parent. </summary>
    public partial class StorageResourceCollection : ArmCollection, IEnumerable<StorageResource>, IAsyncEnumerable<StorageResource>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly StoragesRestOperations _storagesRestClient;

        /// <summary> Initializes a new instance of the <see cref="StorageResourceCollection"/> class for mocking. </summary>
        protected StorageResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of StorageResourceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal StorageResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _storagesRestClient = new StoragesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ServiceResource.ResourceType;

        // Collection level operations.

        /// <summary> Create or update storage resource. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="storageResource"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> or <paramref name="storageResource"/> is null. </exception>
        public virtual StorageCreateOrUpdateOperation CreateOrUpdate(string storageName, StorageResourceData storageResource, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }
            if (storageResource == null)
            {
                throw new ArgumentNullException(nameof(storageResource));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _storagesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, storageResource, cancellationToken);
                var operation = new StorageCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storagesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, storageResource).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update storage resource. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="storageResource"> Parameters for the create or update operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> or <paramref name="storageResource"/> is null. </exception>
        public async virtual Task<StorageCreateOrUpdateOperation> CreateOrUpdateAsync(string storageName, StorageResourceData storageResource, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }
            if (storageResource == null)
            {
                throw new ArgumentNullException(nameof(storageResource));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _storagesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, storageResource, cancellationToken).ConfigureAwait(false);
                var operation = new StorageCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _storagesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, storageResource).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the storage resource. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public virtual Response<StorageResource> Get(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _storagesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new StorageResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the storage resource. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public async virtual Task<Response<StorageResource>> GetAsync(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _storagesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new StorageResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public virtual Response<StorageResource> GetIfExists(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _storagesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<StorageResource>(null, response.GetRawResponse())
                    : Response.FromValue(new StorageResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public async virtual Task<Response<StorageResource>> GetIfExistsAsync(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _storagesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, storageName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<StorageResource>(null, response.GetRawResponse())
                    : Response.FromValue(new StorageResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(storageName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="storageName"> The name of the storage resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string storageName, CancellationToken cancellationToken = default)
        {
            if (storageName == null)
            {
                throw new ArgumentNullException(nameof(storageName));
            }

            using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(storageName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all the storages of one Azure Spring Cloud instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="StorageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<StorageResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<StorageResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _storagesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<StorageResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _storagesRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all the storages of one Azure Spring Cloud instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="StorageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<StorageResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StorageResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _storagesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<StorageResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("StorageResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _storagesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new StorageResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<StorageResource> IEnumerable<StorageResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<StorageResource> IAsyncEnumerable<StorageResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, StorageResource, StorageResourceData> Construct() { }
    }
}
