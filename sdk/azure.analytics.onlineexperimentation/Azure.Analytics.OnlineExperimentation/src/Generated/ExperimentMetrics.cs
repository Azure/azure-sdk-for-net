// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.OnlineExperimentation
{
    // Data plane generated sub-client.
    /// <summary> The ExperimentMetrics sub-client. </summary>
    public partial class ExperimentMetrics
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://exp.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ExperimentMetrics for mocking. </summary>
        protected ExperimentMetrics()
        {
        }

        /// <summary> Initializes a new instance of ExperimentMetrics. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> Endpoint URL for the Online Experimentation workspace. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal ExperimentMetrics(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Fetch a ExperimentMetric by Id. </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetricAsync(string,RequestConditions,CancellationToken)']/*" />
        public virtual async Task<Response<ExperimentMetric>> GetExperimentMetricAsync(string experimentMetricId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetExperimentMetricAsync(experimentMetricId, requestConditions, context).ConfigureAwait(false);
            return Response.FromValue(ExperimentMetric.FromResponse(response), response);
        }

        /// <summary> Fetch a ExperimentMetric by Id. </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetric(string,RequestConditions,CancellationToken)']/*" />
        public virtual Response<ExperimentMetric> GetExperimentMetric(string experimentMetricId, RequestConditions requestConditions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetExperimentMetric(experimentMetricId, requestConditions, context);
            return Response.FromValue(ExperimentMetric.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Fetch a ExperimentMetric by Id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExperimentMetricAsync(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetricAsync(string,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> GetExperimentMetricAsync(string experimentMetricId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.GetExperimentMetric");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExperimentMetricRequest(experimentMetricId, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Fetch a ExperimentMetric by Id.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExperimentMetric(string,RequestConditions,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetric(string,RequestConditions,RequestContext)']/*" />
        public virtual Response GetExperimentMetric(string experimentMetricId, RequestConditions requestConditions, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.GetExperimentMetric");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetExperimentMetricRequest(experimentMetricId, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a ExperimentMetric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='CreateOrUpdateAsync(string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateAsync(string experimentMetricId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(experimentMetricId, content, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates or updates a ExperimentMetric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='CreateOrUpdate(string,RequestContent,RequestConditions,RequestContext)']/*" />
        public virtual Response CreateOrUpdate(string experimentMetricId, RequestContent content, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(experimentMetricId, content, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Validates a ExperimentMetric. </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="body"> Metric input to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='ValidateAsync(string,ExperimentMetric,CancellationToken)']/*" />
        public virtual async Task<Response<ExperimentMetricValidateResult>> ValidateAsync(string experimentMetricId, ExperimentMetric body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ValidateAsync(experimentMetricId, content, context).ConfigureAwait(false);
            return Response.FromValue(ExperimentMetricValidateResult.FromResponse(response), response);
        }

        /// <summary> Validates a ExperimentMetric. </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="body"> Metric input to validate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="body"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='Validate(string,ExperimentMetric,CancellationToken)']/*" />
        public virtual Response<ExperimentMetricValidateResult> Validate(string experimentMetricId, ExperimentMetric body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Validate(experimentMetricId, content, context);
            return Response.FromValue(ExperimentMetricValidateResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Validates a ExperimentMetric.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ValidateAsync(string,ExperimentMetric,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='ValidateAsync(string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> ValidateAsync(string experimentMetricId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(experimentMetricId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Validates a ExperimentMetric.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="Validate(string,ExperimentMetric,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='Validate(string,RequestContent,RequestContext)']/*" />
        public virtual Response Validate(string experimentMetricId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.Validate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateValidateRequest(experimentMetricId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete a ExperimentMetric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='DeleteAsync(string,RequestConditions,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(string experimentMetricId, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(experimentMetricId, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete a ExperimentMetric asynchronously.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="experimentMetricId"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="experimentMetricId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="experimentMetricId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='Delete(string,RequestConditions,RequestContext)']/*" />
        public virtual Response Delete(string experimentMetricId, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(experimentMetricId, nameof(experimentMetricId));

            using var scope = ClientDiagnostics.CreateScope("ExperimentMetrics.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(experimentMetricId, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List ExperimentMetric resources. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetricsAsync(CancellationToken)']/*" />
        public virtual AsyncPageable<ExperimentMetric> GetExperimentMetricsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExperimentMetricsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExperimentMetricsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => ExperimentMetric.DeserializeExperimentMetric(e), ClientDiagnostics, _pipeline, "ExperimentMetrics.GetExperimentMetrics", "value", "nextLink", context);
        }

        /// <summary> List ExperimentMetric resources. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetrics(CancellationToken)']/*" />
        public virtual Pageable<ExperimentMetric> GetExperimentMetrics(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExperimentMetricsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExperimentMetricsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => ExperimentMetric.DeserializeExperimentMetric(e), ClientDiagnostics, _pipeline, "ExperimentMetrics.GetExperimentMetrics", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List ExperimentMetric resources
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExperimentMetricsAsync(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetricsAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetExperimentMetricsAsync(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExperimentMetricsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExperimentMetricsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ExperimentMetrics.GetExperimentMetrics", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List ExperimentMetric resources
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetExperimentMetrics(CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ExperimentMetrics.xml" path="doc/members/member[@name='GetExperimentMetrics(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetExperimentMetrics(RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetExperimentMetricsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetExperimentMetricsNextPageRequest(nextLink, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ExperimentMetrics.GetExperimentMetrics", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetExperimentMetricRequest(string experimentMetricId, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/experiment-metrics/", false);
            uri.AppendPath(experimentMetricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string experimentMetricId, RequestContent content, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/experiment-metrics/", false);
            uri.AppendPath(experimentMetricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateValidateRequest(string experimentMetricId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/experiment-metrics/", false);
            uri.AppendPath(experimentMetricId, true);
            uri.AppendPath(":validate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string experimentMetricId, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/experiment-metrics/", false);
            uri.AppendPath(experimentMetricId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateGetExperimentMetricsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/experiment-metrics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetExperimentMetricsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
