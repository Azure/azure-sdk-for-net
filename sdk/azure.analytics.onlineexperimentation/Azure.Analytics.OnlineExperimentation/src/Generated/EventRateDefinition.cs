// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> The definition of an EventRate metric. This metric type counts the percentage of events that satisfy a condition. </summary>
    public partial class EventRateDefinition : ExperimentMetricDefinition
    {
        /// <summary> Initializes a new instance of <see cref="EventRateDefinition"/>. </summary>
        /// <param name="event"> Event to observe as the rate denominator. </param>
        /// <param name="rateCondition"> The event contributes to the rate numerator if it satisfies this condition. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="event"/> or <paramref name="rateCondition"/> is null. </exception>
        public EventRateDefinition(ObservedEvent @event, string rateCondition)
        {
            Argument.AssertNotNull(@event, nameof(@event));
            Argument.AssertNotNull(rateCondition, nameof(rateCondition));

            Type = MetricType.EventRate;
            Event = @event;
            RateCondition = rateCondition;
        }

        /// <summary> Initializes a new instance of <see cref="EventRateDefinition"/>. </summary>
        /// <param name="type"> Discriminator property for ExperimentMetricDefinition. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="event"> Event to observe as the rate denominator. </param>
        /// <param name="rateCondition"> The event contributes to the rate numerator if it satisfies this condition. </param>
        internal EventRateDefinition(MetricType type, IDictionary<string, BinaryData> serializedAdditionalRawData, ObservedEvent @event, string rateCondition) : base(type, serializedAdditionalRawData)
        {
            Event = @event;
            RateCondition = rateCondition;
        }

        /// <summary> Initializes a new instance of <see cref="EventRateDefinition"/> for deserialization. </summary>
        internal EventRateDefinition()
        {
        }

        /// <summary> Event to observe as the rate denominator. </summary>
        public ObservedEvent Event { get; set; }
        /// <summary> The event contributes to the rate numerator if it satisfies this condition. </summary>
        public string RateCondition { get; set; }
    }
}
