// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> The result of validating a metric. </summary>
    public partial class ExperimentMetricValidateResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExperimentMetricValidateResult"/>. </summary>
        /// <param name="result"> Whether the metric is valid. </param>
        internal ExperimentMetricValidateResult(ValidationResultOption result)
        {
            Diagnostics = new ChangeTrackingList<DiagnosticInfo>();
            Result = result;
        }

        /// <summary> Initializes a new instance of <see cref="ExperimentMetricValidateResult"/>. </summary>
        /// <param name="diagnostics"> The validation result. </param>
        /// <param name="result"> Whether the metric is valid. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExperimentMetricValidateResult(IReadOnlyList<DiagnosticInfo> diagnostics, ValidationResultOption result, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Diagnostics = diagnostics;
            Result = result;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ExperimentMetricValidateResult"/> for deserialization. </summary>
        internal ExperimentMetricValidateResult()
        {
        }

        /// <summary> The validation result. </summary>
        public IReadOnlyList<DiagnosticInfo> Diagnostics { get; }
        /// <summary> Whether the metric is valid. </summary>
        public ValidationResultOption Result { get; }
    }
}
