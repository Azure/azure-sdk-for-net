// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> How the metric should be calculated from the event data. </summary>
    internal readonly partial struct MetricType : IEquatable<MetricType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MetricType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EventCountValue = "EventCount";
        private const string UserCountValue = "UserCount";
        private const string EventRateValue = "EventRate";
        private const string UserRateValue = "UserRate";
        private const string SumValue = "Sum";
        private const string AverageValue = "Average";
        private const string PercentileValue = "Percentile";

        /// <summary> Count the observations of an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricType EventCount { get; } = new MetricType(EventCountValue);
        /// <summary> Count the users who encounter an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricType UserCount { get; } = new MetricType(UserCountValue);
        /// <summary> Count the percentage of events that satisfy a condition. </summary>
        public static MetricType EventRate { get; } = new MetricType(EventRateValue);
        /// <summary> Count the percentage of users with the start event that then encounter the end event. The metric denominator counts the number of users who encounter the start event at least once. The metric numerator counts the number of users who encounter both the start and end events at least once. The computation is ordered, so the start event must occur before the end event. </summary>
        public static MetricType UserRate { get; } = new MetricType(UserRateValue);
        /// <summary> The sum of an event property. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static MetricType Sum { get; } = new MetricType(SumValue);
        /// <summary> The average of an event property. </summary>
        public static MetricType Average { get; } = new MetricType(AverageValue);
        /// <summary> The percentile of an event property. </summary>
        public static MetricType Percentile { get; } = new MetricType(PercentileValue);
        /// <summary> Determines if two <see cref="MetricType"/> values are the same. </summary>
        public static bool operator ==(MetricType left, MetricType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricType"/> values are not the same. </summary>
        public static bool operator !=(MetricType left, MetricType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MetricType"/>. </summary>
        public static implicit operator MetricType(string value) => new MetricType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
