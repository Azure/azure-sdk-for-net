// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> A ExperimentMetric object that describes the metric. </summary>
    public partial class ExperimentMetric
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExperimentMetric"/>. </summary>
        /// <param name="lifecycle"> The stage in the metric lifecycle, which determines when the metric is calculated. </param>
        /// <param name="displayName"> A display name for the metric to use for display rather than the ID. </param>
        /// <param name="description"> A description of the metric. </param>
        /// <param name="categories"> The categories of the metric. </param>
        /// <param name="desiredDirection"> Whether an increase or decrease to the metric value is desired. </param>
        /// <param name="definition">
        /// The metric definition, which determines how the metric value is calculated from event data.
        /// Please note <see cref="ExperimentMetricDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AverageDefinition"/>, <see cref="EventCountDefinition"/>, <see cref="EventRateDefinition"/>, <see cref="PercentileDefinition"/>, <see cref="SumDefinition"/>, <see cref="UserCountDefinition"/> and <see cref="UserRateDefinition"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/>, <paramref name="description"/>, <paramref name="categories"/> or <paramref name="definition"/> is null. </exception>
        public ExperimentMetric(LifecycleStage lifecycle, string displayName, string description, IEnumerable<string> categories, DesiredDirection desiredDirection, ExperimentMetricDefinition definition)
        {
            Argument.AssertNotNull(displayName, nameof(displayName));
            Argument.AssertNotNull(description, nameof(description));
            Argument.AssertNotNull(categories, nameof(categories));
            Argument.AssertNotNull(definition, nameof(definition));

            Lifecycle = lifecycle;
            DisplayName = displayName;
            Description = description;
            Categories = categories.ToList();
            DesiredDirection = desiredDirection;
            Definition = definition;
        }

        /// <summary> Initializes a new instance of <see cref="ExperimentMetric"/>. </summary>
        /// <param name="id"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="lifecycle"> The stage in the metric lifecycle, which determines when the metric is calculated. </param>
        /// <param name="displayName"> A display name for the metric to use for display rather than the ID. </param>
        /// <param name="description"> A description of the metric. </param>
        /// <param name="categories"> The categories of the metric. </param>
        /// <param name="desiredDirection"> Whether an increase or decrease to the metric value is desired. </param>
        /// <param name="definition">
        /// The metric definition, which determines how the metric value is calculated from event data.
        /// Please note <see cref="ExperimentMetricDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AverageDefinition"/>, <see cref="EventCountDefinition"/>, <see cref="EventRateDefinition"/>, <see cref="PercentileDefinition"/>, <see cref="SumDefinition"/>, <see cref="UserCountDefinition"/> and <see cref="UserRateDefinition"/>.
        /// </param>
        /// <param name="eTag"> ETag of the metric. </param>
        /// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExperimentMetric(string id, LifecycleStage lifecycle, string displayName, string description, IList<string> categories, DesiredDirection desiredDirection, ExperimentMetricDefinition definition, ETag eTag, DateTimeOffset lastModifiedAt, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Lifecycle = lifecycle;
            DisplayName = displayName;
            Description = description;
            Categories = categories;
            DesiredDirection = desiredDirection;
            Definition = definition;
            ETag = eTag;
            LastModifiedAt = lastModifiedAt;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ExperimentMetric"/> for deserialization. </summary>
        internal ExperimentMetric()
        {
        }

        /// <summary> An ID used to uniquely identify and reference the metric. </summary>
        public string Id { get; }
        /// <summary> The stage in the metric lifecycle, which determines when the metric is calculated. </summary>
        public LifecycleStage Lifecycle { get; set; }
        /// <summary> A display name for the metric to use for display rather than the ID. </summary>
        public string DisplayName { get; set; }
        /// <summary> A description of the metric. </summary>
        public string Description { get; set; }
        /// <summary> The categories of the metric. </summary>
        public IList<string> Categories { get; }
        /// <summary> Whether an increase or decrease to the metric value is desired. </summary>
        public DesiredDirection DesiredDirection { get; set; }
        /// <summary>
        /// The metric definition, which determines how the metric value is calculated from event data.
        /// Please note <see cref="ExperimentMetricDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AverageDefinition"/>, <see cref="EventCountDefinition"/>, <see cref="EventRateDefinition"/>, <see cref="PercentileDefinition"/>, <see cref="SumDefinition"/>, <see cref="UserCountDefinition"/> and <see cref="UserRateDefinition"/>.
        /// </summary>
        public ExperimentMetricDefinition Definition { get; set; }
        /// <summary> ETag of the metric. </summary>
        public ETag ETag { get; }
        /// <summary> The timestamp of resource last modification (UTC). </summary>
        public DateTimeOffset LastModifiedAt { get; }
    }
}
