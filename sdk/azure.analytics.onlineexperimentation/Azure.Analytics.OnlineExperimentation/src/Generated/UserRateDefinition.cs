// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> The definition of a UserRate metric. This metric type counts the percentage of users with the start event that then encounter the end event. The metric denominator counts the number of users who encounter the start event at least once. The metric numerator counts the number of users who encounter both the start and end events at least once. The computation is ordered, so the start event must occur before the end event. </summary>
    public partial class UserRateDefinition : ExperimentMetricDefinition
    {
        /// <summary> Initializes a new instance of <see cref="UserRateDefinition"/>. </summary>
        /// <param name="startEvent"> The start event to observe as the rate denominator. </param>
        /// <param name="endEvent"> The end event to observe, which is a condition for the rate numerator. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="startEvent"/> or <paramref name="endEvent"/> is null. </exception>
        public UserRateDefinition(ObservedEvent startEvent, ObservedEvent endEvent)
        {
            Argument.AssertNotNull(startEvent, nameof(startEvent));
            Argument.AssertNotNull(endEvent, nameof(endEvent));

            Type = MetricType.UserRate;
            StartEvent = startEvent;
            EndEvent = endEvent;
        }

        /// <summary> Initializes a new instance of <see cref="UserRateDefinition"/>. </summary>
        /// <param name="type"> Discriminator property for ExperimentMetricDefinition. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="startEvent"> The start event to observe as the rate denominator. </param>
        /// <param name="endEvent"> The end event to observe, which is a condition for the rate numerator. </param>
        internal UserRateDefinition(MetricType type, IDictionary<string, BinaryData> serializedAdditionalRawData, ObservedEvent startEvent, ObservedEvent endEvent) : base(type, serializedAdditionalRawData)
        {
            StartEvent = startEvent;
            EndEvent = endEvent;
        }

        /// <summary> Initializes a new instance of <see cref="UserRateDefinition"/> for deserialization. </summary>
        internal UserRateDefinition()
        {
        }

        /// <summary> The start event to observe as the rate denominator. </summary>
        public ObservedEvent StartEvent { get; set; }
        /// <summary> The end event to observe, which is a condition for the rate numerator. </summary>
        public ObservedEvent EndEvent { get; set; }
    }
}
