// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> The diagnostic error codes. </summary>
    public readonly partial struct DiagnosticCode : IEquatable<DiagnosticCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiagnosticCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiagnosticCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FailedSchemaValidationValue = "FailedSchemaValidation";
        private const string InvalidEventConditionValue = "InvalidEventCondition";
        private const string UnsupportedEventConditionValue = "UnsupportedEventCondition";
        private const string InvalidExperimentMetricDefinitionValue = "InvalidExperimentMetricDefinition";

        /// <summary> The metric definition is not according to Json Schema. </summary>
        public static DiagnosticCode FailedSchemaValidation { get; } = new DiagnosticCode(FailedSchemaValidationValue);
        /// <summary> The KQL filter condition is invalid. </summary>
        public static DiagnosticCode InvalidEventCondition { get; } = new DiagnosticCode(InvalidEventConditionValue);
        /// <summary> The KQL filter condition is valid but not currently supported. </summary>
        public static DiagnosticCode UnsupportedEventCondition { get; } = new DiagnosticCode(UnsupportedEventConditionValue);
        /// <summary>
        /// The metric definition provided is invalid.
        /// for example, if the metric is defined to calculate the average of the Revenue property,
        /// but also includes a filter such as Revenue == 'hello', this creates a type mismatch.
        /// The system infers conflicting data types—numeric and string—resulting in a validation failure.
        /// </summary>
        public static DiagnosticCode InvalidExperimentMetricDefinition { get; } = new DiagnosticCode(InvalidExperimentMetricDefinitionValue);
        /// <summary> Determines if two <see cref="DiagnosticCode"/> values are the same. </summary>
        public static bool operator ==(DiagnosticCode left, DiagnosticCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiagnosticCode"/> values are not the same. </summary>
        public static bool operator !=(DiagnosticCode left, DiagnosticCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DiagnosticCode"/>. </summary>
        public static implicit operator DiagnosticCode(string value) => new DiagnosticCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiagnosticCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiagnosticCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
