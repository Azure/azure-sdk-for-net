// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> Model factory for models. </summary>
    public static partial class AnalyticsOnlineExperimentationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.ExperimentMetric"/>. </summary>
        /// <param name="id"> An ID used to uniquely identify and reference the metric. </param>
        /// <param name="lifecycle"> The stage in the metric lifecycle, which determines when the metric is calculated. </param>
        /// <param name="displayName"> A display name for the metric to use for display rather than the ID. </param>
        /// <param name="description"> A description of the metric. </param>
        /// <param name="categories"> The categories of the metric. </param>
        /// <param name="desiredDirection"> Whether an increase or decrease to the metric value is desired. </param>
        /// <param name="definition">
        /// The metric definition, which determines how the metric value is calculated from event data.
        /// Please note <see cref="ExperimentMetricDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AverageDefinition"/>, <see cref="EventCountDefinition"/>, <see cref="EventRateDefinition"/>, <see cref="PercentileDefinition"/>, <see cref="SumDefinition"/>, <see cref="UserCountDefinition"/> and <see cref="UserRateDefinition"/>.
        /// </param>
        /// <param name="eTag"> ETag of the metric. </param>
        /// <param name="lastModifiedAt"> The timestamp of resource last modification (UTC). </param>
        /// <returns> A new <see cref="OnlineExperimentation.ExperimentMetric"/> instance for mocking. </returns>
        public static ExperimentMetric ExperimentMetric(string id = null, LifecycleStage lifecycle = default, string displayName = null, string description = null, IEnumerable<string> categories = null, DesiredDirection desiredDirection = default, ExperimentMetricDefinition definition = null, ETag eTag = default, DateTimeOffset lastModifiedAt = default)
        {
            categories ??= new List<string>();

            return new ExperimentMetric(
                id,
                lifecycle,
                displayName,
                description,
                categories?.ToList(),
                desiredDirection,
                definition,
                eTag,
                lastModifiedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.ExperimentMetricValidateResult"/>. </summary>
        /// <param name="diagnostics"> The validation result. </param>
        /// <param name="result"> Whether the metric is valid. </param>
        /// <returns> A new <see cref="OnlineExperimentation.ExperimentMetricValidateResult"/> instance for mocking. </returns>
        public static ExperimentMetricValidateResult ExperimentMetricValidateResult(IEnumerable<DiagnosticInfo> diagnostics = null, ValidationResultOption result = default)
        {
            diagnostics ??= new List<DiagnosticInfo>();

            return new ExperimentMetricValidateResult(diagnostics?.ToList(), result, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.DiagnosticInfo"/>. </summary>
        /// <param name="message"> The error message. </param>
        /// <param name="code"> The error code. </param>
        /// <returns> A new <see cref="OnlineExperimentation.DiagnosticInfo"/> instance for mocking. </returns>
        public static DiagnosticInfo DiagnosticInfo(string message = null, DiagnosticCode code = default)
        {
            return new DiagnosticInfo(message, code, serializedAdditionalRawData: null);
        }
    }
}
