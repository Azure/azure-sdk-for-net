// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AddonsOperations.
    /// </summary>
    public static partial class AddonsOperationsExtensions
    {
            /// <summary>
            /// Lists all the addons configured in the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static IPage<Addon> ListByRole(this IAddonsOperations operations, string deviceName, string roleName, string resourceGroupName)
            {
                return operations.ListByRoleAsync(deviceName, roleName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addons configured in the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Addon>> ListByRoleAsync(this IAddonsOperations operations, string deviceName, string roleName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRoleWithHttpMessagesAsync(deviceName, roleName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific addon by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Addon Get(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName)
            {
                return operations.GetAsync(deviceName, roleName, addonName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific addon by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Addon> GetAsync(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceName, roleName, addonName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a addon.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='addon'>
            /// The addon properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Addon CreateOrUpdate(this IAddonsOperations operations, string deviceName, string roleName, string addonName, Addon addon, string resourceGroupName)
            {
                return operations.CreateOrUpdateAsync(deviceName, roleName, addonName, addon, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a addon.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='addon'>
            /// The addon properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Addon> CreateOrUpdateAsync(this IAddonsOperations operations, string deviceName, string roleName, string addonName, Addon addon, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(deviceName, roleName, addonName, addon, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the addon on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void Delete(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName)
            {
                operations.DeleteAsync(deviceName, roleName, addonName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the addon on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(deviceName, roleName, addonName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a addon.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='addon'>
            /// The addon properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Addon BeginCreateOrUpdate(this IAddonsOperations operations, string deviceName, string roleName, string addonName, Addon addon, string resourceGroupName)
            {
                return operations.BeginCreateOrUpdateAsync(deviceName, roleName, addonName, addon, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a addon.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='addon'>
            /// The addon properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Addon> BeginCreateOrUpdateAsync(this IAddonsOperations operations, string deviceName, string roleName, string addonName, Addon addon, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(deviceName, roleName, addonName, addon, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the addon on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void BeginDelete(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(deviceName, roleName, addonName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the addon on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='roleName'>
            /// The role name.
            /// </param>
            /// <param name='addonName'>
            /// The addon name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IAddonsOperations operations, string deviceName, string roleName, string addonName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(deviceName, roleName, addonName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the addons configured in the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Addon> ListByRoleNext(this IAddonsOperations operations, string nextPageLink)
            {
                return operations.ListByRoleNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the addons configured in the role.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Addon>> ListByRoleNextAsync(this IAddonsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRoleNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
