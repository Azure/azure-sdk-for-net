// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContainersOperations.
    /// </summary>
    public static partial class ContainersOperationsExtensions
    {
            /// <summary>
            /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The storage Account name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static IPage<Container> ListByStorageAccount(this IContainersOperations operations, string deviceName, string storageAccountName, string resourceGroupName)
            {
                return operations.ListByStorageAccountAsync(deviceName, storageAccountName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The storage Account name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Container>> ListByStorageAccountAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByStorageAccountWithHttpMessagesAsync(deviceName, storageAccountName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a container by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container Name
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Container Get(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
            {
                return operations.GetAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a container by name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container Name
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Container> GetAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new container or updates an existing container on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='container'>
            /// The container properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Container CreateOrUpdate(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, Container container, string resourceGroupName)
            {
                return operations.CreateOrUpdateAsync(deviceName, storageAccountName, containerName, container, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new container or updates an existing container on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='container'>
            /// The container properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Container> CreateOrUpdateAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, Container container, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(deviceName, storageAccountName, containerName, container, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the container on the Data Box Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void Delete(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
            {
                operations.DeleteAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the container on the Data Box Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Refreshes the container metadata with the data from the cloud.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void Refresh(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
            {
                operations.RefreshAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes the container metadata with the data from the cloud.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RefreshWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new container or updates an existing container on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='container'>
            /// The container properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static Container BeginCreateOrUpdate(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, Container container, string resourceGroupName)
            {
                return operations.BeginCreateOrUpdateAsync(deviceName, storageAccountName, containerName, container, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new container or updates an existing container on the device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='container'>
            /// The container properties.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Container> BeginCreateOrUpdateAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, Container container, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(deviceName, storageAccountName, containerName, container, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the container on the Data Box Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void BeginDelete(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the container on the Data Box Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Refreshes the container metadata with the data from the cloud.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void BeginRefresh(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
            {
                operations.BeginRefreshAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes the container metadata with the data from the cloud.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='storageAccountName'>
            /// The Storage Account Name
            /// </param>
            /// <param name='containerName'>
            /// The container name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRefreshAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRefreshWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Container> ListByStorageAccountNext(this IContainersOperations operations, string nextPageLink)
            {
                return operations.ListByStorageAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Container>> ListByStorageAccountNextAsync(this IContainersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByStorageAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
