// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageAccountCredentialsOperations.
    /// </summary>
    public static partial class StorageAccountCredentialsOperationsExtensions
    {
            /// <summary>
            /// Gets all the storage account credentials in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static IPage<StorageAccountCredential> ListByDataBoxEdgeDevice(this IStorageAccountCredentialsOperations operations, string deviceName, string resourceGroupName)
            {
                return operations.ListByDataBoxEdgeDeviceAsync(deviceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the storage account credentials in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccountCredential>> ListByDataBoxEdgeDeviceAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataBoxEdgeDeviceWithHttpMessagesAsync(deviceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of the specified storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static StorageAccountCredential Get(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName)
            {
                return operations.GetAsync(deviceName, name, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the specified storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountCredential> GetAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(deviceName, name, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='storageAccountCredential'>
            /// The storage account credential.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static StorageAccountCredential CreateOrUpdate(this IStorageAccountCredentialsOperations operations, string deviceName, string name, StorageAccountCredential storageAccountCredential, string resourceGroupName)
            {
                return operations.CreateOrUpdateAsync(deviceName, name, storageAccountCredential, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='storageAccountCredential'>
            /// The storage account credential.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountCredential> CreateOrUpdateAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string name, StorageAccountCredential storageAccountCredential, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(deviceName, name, storageAccountCredential, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void Delete(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName)
            {
                operations.DeleteAsync(deviceName, name, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(deviceName, name, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='storageAccountCredential'>
            /// The storage account credential.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static StorageAccountCredential BeginCreateOrUpdate(this IStorageAccountCredentialsOperations operations, string deviceName, string name, StorageAccountCredential storageAccountCredential, string resourceGroupName)
            {
                return operations.BeginCreateOrUpdateAsync(deviceName, name, storageAccountCredential, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='storageAccountCredential'>
            /// The storage account credential.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountCredential> BeginCreateOrUpdateAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string name, StorageAccountCredential storageAccountCredential, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(deviceName, name, storageAccountCredential, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static void BeginDelete(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName)
            {
                operations.BeginDeleteAsync(deviceName, name, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the storage account credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='name'>
            /// The storage account credential name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IStorageAccountCredentialsOperations operations, string deviceName, string name, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(deviceName, name, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the storage account credentials in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StorageAccountCredential> ListByDataBoxEdgeDeviceNext(this IStorageAccountCredentialsOperations operations, string nextPageLink)
            {
                return operations.ListByDataBoxEdgeDeviceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the storage account credentials in a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccountCredential>> ListByDataBoxEdgeDeviceNextAsync(this IStorageAccountCredentialsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDataBoxEdgeDeviceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
