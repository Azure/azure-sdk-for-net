// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiagnosticSettingsOperations.
    /// </summary>
    public static partial class DiagnosticSettingsOperationsExtensions
    {
            /// <summary>
            /// Gets the proactive log collection settings of the specified Data Box
            /// Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticProactiveLogCollectionSettings GetDiagnosticProactiveLogCollectionSettings(this IDiagnosticSettingsOperations operations, string deviceName, string resourceGroupName)
            {
                return operations.GetDiagnosticProactiveLogCollectionSettingsAsync(deviceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the proactive log collection settings of the specified Data Box
            /// Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticProactiveLogCollectionSettings> GetDiagnosticProactiveLogCollectionSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticProactiveLogCollectionSettingsWithHttpMessagesAsync(deviceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the proactive log collection settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='proactiveLogCollectionSettings'>
            /// The proactive log collection settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticProactiveLogCollectionSettings UpdateDiagnosticProactiveLogCollectionSettings(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticProactiveLogCollectionSettings proactiveLogCollectionSettings, string resourceGroupName)
            {
                return operations.UpdateDiagnosticProactiveLogCollectionSettingsAsync(deviceName, proactiveLogCollectionSettings, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the proactive log collection settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='proactiveLogCollectionSettings'>
            /// The proactive log collection settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticProactiveLogCollectionSettings> UpdateDiagnosticProactiveLogCollectionSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticProactiveLogCollectionSettings proactiveLogCollectionSettings, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticProactiveLogCollectionSettingsWithHttpMessagesAsync(deviceName, proactiveLogCollectionSettings, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the diagnostic remote support settings of the specified Data Box
            /// Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticRemoteSupportSettings GetDiagnosticRemoteSupportSettings(this IDiagnosticSettingsOperations operations, string deviceName, string resourceGroupName)
            {
                return operations.GetDiagnosticRemoteSupportSettingsAsync(deviceName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the diagnostic remote support settings of the specified Data Box
            /// Edge/Data Box Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticRemoteSupportSettings> GetDiagnosticRemoteSupportSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticRemoteSupportSettingsWithHttpMessagesAsync(deviceName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the diagnostic remote support settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='diagnosticRemoteSupportSettings'>
            /// The diagnostic remote support settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticRemoteSupportSettings UpdateDiagnosticRemoteSupportSettings(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticRemoteSupportSettings diagnosticRemoteSupportSettings, string resourceGroupName)
            {
                return operations.UpdateDiagnosticRemoteSupportSettingsAsync(deviceName, diagnosticRemoteSupportSettings, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the diagnostic remote support settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='diagnosticRemoteSupportSettings'>
            /// The diagnostic remote support settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticRemoteSupportSettings> UpdateDiagnosticRemoteSupportSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticRemoteSupportSettings diagnosticRemoteSupportSettings, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticRemoteSupportSettingsWithHttpMessagesAsync(deviceName, diagnosticRemoteSupportSettings, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the proactive log collection settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='proactiveLogCollectionSettings'>
            /// The proactive log collection settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticProactiveLogCollectionSettings BeginUpdateDiagnosticProactiveLogCollectionSettings(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticProactiveLogCollectionSettings proactiveLogCollectionSettings, string resourceGroupName)
            {
                return operations.BeginUpdateDiagnosticProactiveLogCollectionSettingsAsync(deviceName, proactiveLogCollectionSettings, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the proactive log collection settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='proactiveLogCollectionSettings'>
            /// The proactive log collection settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticProactiveLogCollectionSettings> BeginUpdateDiagnosticProactiveLogCollectionSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticProactiveLogCollectionSettings proactiveLogCollectionSettings, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateDiagnosticProactiveLogCollectionSettingsWithHttpMessagesAsync(deviceName, proactiveLogCollectionSettings, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the diagnostic remote support settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='diagnosticRemoteSupportSettings'>
            /// The diagnostic remote support settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            public static DiagnosticRemoteSupportSettings BeginUpdateDiagnosticRemoteSupportSettings(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticRemoteSupportSettings diagnosticRemoteSupportSettings, string resourceGroupName)
            {
                return operations.BeginUpdateDiagnosticRemoteSupportSettingsAsync(deviceName, diagnosticRemoteSupportSettings, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the diagnostic remote support settings on a Data Box Edge/Data Box
            /// Gateway device.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceName'>
            /// The device name.
            /// </param>
            /// <param name='diagnosticRemoteSupportSettings'>
            /// The diagnostic remote support settings.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticRemoteSupportSettings> BeginUpdateDiagnosticRemoteSupportSettingsAsync(this IDiagnosticSettingsOperations operations, string deviceName, DiagnosticRemoteSupportSettings diagnosticRemoteSupportSettings, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateDiagnosticRemoteSupportSettingsWithHttpMessagesAsync(deviceName, diagnosticRemoteSupportSettings, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
