// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Object for Capturing DeviceCapacityRequestInfo
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DeviceCapacityRequestInfo
    {
        /// <summary>
        /// Initializes a new instance of the DeviceCapacityRequestInfo class.
        /// </summary>
        public DeviceCapacityRequestInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceCapacityRequestInfo class.
        /// </summary>
        /// <param name="vmPlacementQuery">Array containing the sizes of the
        /// VMs for checking if its feasible to create them on the
        /// appliance.</param>
        /// <param name="vmPlacementResults">Array of the VMs of the sizes in
        /// VmSizes can be provisioned on the appliance.</param>
        public DeviceCapacityRequestInfo(IList<IList<string>> vmPlacementQuery, IList<VmPlacementRequestResult> vmPlacementResults = default(IList<VmPlacementRequestResult>))
        {
            VmPlacementQuery = vmPlacementQuery;
            VmPlacementResults = vmPlacementResults;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets array containing the sizes of the VMs for checking if
        /// its feasible to create them on the appliance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmPlacementQuery")]
        public IList<IList<string>> VmPlacementQuery { get; set; }

        /// <summary>
        /// Gets or sets array of the VMs of the sizes in VmSizes can be
        /// provisioned on the appliance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmPlacementResults")]
        public IList<VmPlacementRequestResult> VmPlacementResults { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmPlacementQuery == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VmPlacementQuery");
            }
        }
    }
}
