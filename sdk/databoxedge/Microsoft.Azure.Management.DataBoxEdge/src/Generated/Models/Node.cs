// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a single node in a Data box Edge/Gateway device
    /// Gateway devices, standalone Edge devices and a single node cluster Edge
    /// device will all have 1 node
    /// Multi-node Edge devices will have more than 1 nodes
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Node : ARMBaseModel
    {
        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        public Node()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        /// <param name="id">The path ID that uniquely identifies the
        /// object.</param>
        /// <param name="name">The object name.</param>
        /// <param name="type">The hierarchical type of the object.</param>
        /// <param name="nodeStatus">The current status of the individual node.
        /// Possible values include: 'Unknown', 'Up', 'Down', 'Rebooting',
        /// 'ShuttingDown'</param>
        /// <param name="nodeChassisSerialNumber">Serial number of the
        /// Chassis</param>
        /// <param name="nodeSerialNumber">Serial number of the individual
        /// node</param>
        /// <param name="nodeDisplayName">Display Name of the individual
        /// node</param>
        /// <param name="nodeFriendlySoftwareVersion">Friendly software version
        /// name that is currently installed on the node</param>
        /// <param name="nodeHcsVersion">HCS version that is currently
        /// installed on the node</param>
        /// <param name="nodeInstanceId">Guid instance id of the node</param>
        public Node(string id = default(string), string name = default(string), string type = default(string), string nodeStatus = default(string), string nodeChassisSerialNumber = default(string), string nodeSerialNumber = default(string), string nodeDisplayName = default(string), string nodeFriendlySoftwareVersion = default(string), string nodeHcsVersion = default(string), string nodeInstanceId = default(string))
            : base(id, name, type)
        {
            NodeStatus = nodeStatus;
            NodeChassisSerialNumber = nodeChassisSerialNumber;
            NodeSerialNumber = nodeSerialNumber;
            NodeDisplayName = nodeDisplayName;
            NodeFriendlySoftwareVersion = nodeFriendlySoftwareVersion;
            NodeHcsVersion = nodeHcsVersion;
            NodeInstanceId = nodeInstanceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the current status of the individual node. Possible values
        /// include: 'Unknown', 'Up', 'Down', 'Rebooting', 'ShuttingDown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeStatus")]
        public string NodeStatus { get; private set; }

        /// <summary>
        /// Gets serial number of the Chassis
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeChassisSerialNumber")]
        public string NodeChassisSerialNumber { get; private set; }

        /// <summary>
        /// Gets serial number of the individual node
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeSerialNumber")]
        public string NodeSerialNumber { get; private set; }

        /// <summary>
        /// Gets display Name of the individual node
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeDisplayName")]
        public string NodeDisplayName { get; private set; }

        /// <summary>
        /// Gets friendly software version name that is currently installed on
        /// the node
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeFriendlySoftwareVersion")]
        public string NodeFriendlySoftwareVersion { get; private set; }

        /// <summary>
        /// Gets HCS version that is currently installed on the node
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeHcsVersion")]
        public string NodeHcsVersion { get; private set; }

        /// <summary>
        /// Gets guid instance id of the node
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeInstanceId")]
        public string NodeInstanceId { get; private set; }

    }
}
