// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Holds device secret either as a KeyVault reference or as an encrypted
    /// value.
    /// </summary>
    public partial class Secret
    {
        /// <summary>
        /// Initializes a new instance of the Secret class.
        /// </summary>
        public Secret()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Secret class.
        /// </summary>
        /// <param name="encryptedSecret">Encrypted (using device public key)
        /// secret value.</param>
        /// <param name="keyVaultId">Id of the Key-Vault where secret is stored
        /// (ex:
        /// secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).</param>
        public Secret(AsymmetricEncryptedSecret encryptedSecret = default(AsymmetricEncryptedSecret), string keyVaultId = default(string))
        {
            EncryptedSecret = encryptedSecret;
            KeyVaultId = keyVaultId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets encrypted (using device public key) secret value.
        /// </summary>
        [JsonProperty(PropertyName = "encryptedSecret")]
        public AsymmetricEncryptedSecret EncryptedSecret { get; set; }

        /// <summary>
        /// Gets or sets id of the Key-Vault where secret is stored (ex:
        /// secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultId")]
        public string KeyVaultId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EncryptedSecret != null)
            {
                EncryptedSecret.Validate();
            }
        }
    }
}
