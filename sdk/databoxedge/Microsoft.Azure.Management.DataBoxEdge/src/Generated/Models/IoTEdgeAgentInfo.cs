// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// IoT edge agent details is optional, this will be used for download
    /// system Agent module while bootstrapping IoT Role if specified.
    /// </summary>
    public partial class IoTEdgeAgentInfo
    {
        /// <summary>
        /// Initializes a new instance of the IoTEdgeAgentInfo class.
        /// </summary>
        public IoTEdgeAgentInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IoTEdgeAgentInfo class.
        /// </summary>
        /// <param name="imageName">Name of the IoT edge agent image.</param>
        /// <param name="tag">Image Tag.</param>
        /// <param name="imageRepository">Image repository details.</param>
        public IoTEdgeAgentInfo(string imageName, string tag, ImageRepositoryCredential imageRepository = default(ImageRepositoryCredential))
        {
            ImageName = imageName;
            Tag = tag;
            ImageRepository = imageRepository;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the IoT edge agent image.
        /// </summary>
        [JsonProperty(PropertyName = "imageName")]
        public string ImageName { get; set; }

        /// <summary>
        /// Gets or sets image Tag.
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or sets image repository details.
        /// </summary>
        [JsonProperty(PropertyName = "imageRepository")]
        public ImageRepositoryCredential ImageRepository { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ImageName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImageName");
            }
            if (Tag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tag");
            }
            if (ImageRepository != null)
            {
                ImageRepository.Validate();
            }
        }
    }
}
