// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The mapping between a particular user and the access type on the SMB
    /// share.
    /// </summary>
    public partial class UserAccessRight
    {
        /// <summary>
        /// Initializes a new instance of the UserAccessRight class.
        /// </summary>
        public UserAccessRight()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserAccessRight class.
        /// </summary>
        /// <param name="userId">User ID (already existing in the
        /// device).</param>
        /// <param name="accessType">Type of access to be allowed for the user.
        /// Possible values include: 'Change', 'Read', 'Custom'</param>
        public UserAccessRight(string userId, string accessType)
        {
            UserId = userId;
            AccessType = accessType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user ID (already existing in the device).
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets type of access to be allowed for the user. Possible
        /// values include: 'Change', 'Read', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "accessType")]
        public string AccessType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserId");
            }
            if (AccessType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessType");
            }
        }
    }
}
