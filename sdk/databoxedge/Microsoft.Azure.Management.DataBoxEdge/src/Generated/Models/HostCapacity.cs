// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Host Capacity Data.
    /// </summary>
    public partial class HostCapacity
    {
        /// <summary>
        /// Initializes a new instance of the HostCapacity class.
        /// </summary>
        public HostCapacity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostCapacity class.
        /// </summary>
        /// <param name="hostName">The name of the host.</param>
        /// <param name="effectiveAvailableMemoryMbOnHost">The available memory
        /// on the host accounting for VM placement size and any host VM
        /// reservations.</param>
        /// <param name="availableGpuCount">The available amount of GPUs on the
        /// host to use after accounting for GPUS used by reservations on the
        /// host.</param>
        /// <param name="vmUsedMemory">The VM used memory per VmId.</param>
        /// <param name="gpuType">The GPU type of the VM.</param>
        /// <param name="numaNodesData">The numa nodes information for Hpn
        /// VMs.</param>
        public HostCapacity(string hostName = default(string), long? effectiveAvailableMemoryMbOnHost = default(long?), int? availableGpuCount = default(int?), IDictionary<string, VmMemory> vmUsedMemory = default(IDictionary<string, VmMemory>), string gpuType = default(string), IList<NumaNodeData> numaNodesData = default(IList<NumaNodeData>))
        {
            HostName = hostName;
            EffectiveAvailableMemoryMbOnHost = effectiveAvailableMemoryMbOnHost;
            AvailableGpuCount = availableGpuCount;
            VmUsedMemory = vmUsedMemory;
            GpuType = gpuType;
            NumaNodesData = numaNodesData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the host.
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets the available memory on the host accounting for VM
        /// placement size and any host VM reservations.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveAvailableMemoryMbOnHost")]
        public long? EffectiveAvailableMemoryMbOnHost { get; set; }

        /// <summary>
        /// Gets or sets the available amount of GPUs on the host to use after
        /// accounting for GPUS used by reservations on the host.
        /// </summary>
        [JsonProperty(PropertyName = "availableGpuCount")]
        public int? AvailableGpuCount { get; set; }

        /// <summary>
        /// Gets or sets the VM used memory per VmId.
        /// </summary>
        [JsonProperty(PropertyName = "vmUsedMemory")]
        public IDictionary<string, VmMemory> VmUsedMemory { get; set; }

        /// <summary>
        /// Gets or sets the GPU type of the VM.
        /// </summary>
        [JsonProperty(PropertyName = "gpuType")]
        public string GpuType { get; set; }

        /// <summary>
        /// Gets or sets the numa nodes information for Hpn VMs.
        /// </summary>
        [JsonProperty(PropertyName = "numaNodesData")]
        public IList<NumaNodeData> NumaNodesData { get; set; }

    }
}
