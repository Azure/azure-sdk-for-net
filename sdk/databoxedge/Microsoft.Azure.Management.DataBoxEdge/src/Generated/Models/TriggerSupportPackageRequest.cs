// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The request object for trigger support package.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class TriggerSupportPackageRequest : ARMBaseModel
    {
        /// <summary>
        /// Initializes a new instance of the TriggerSupportPackageRequest
        /// class.
        /// </summary>
        public TriggerSupportPackageRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TriggerSupportPackageRequest
        /// class.
        /// </summary>
        /// <param name="id">The path ID that uniquely identifies the
        /// object.</param>
        /// <param name="name">The object name.</param>
        /// <param name="type">The hierarchical type of the object.</param>
        /// <param name="minimumTimeStamp">MinimumTimeStamp from where logs
        /// need to be collected</param>
        /// <param name="maximumTimeStamp">MaximumTimeStamp until where logs
        /// need to be collected</param>
        /// <param name="include">Type of files, which need to be included in
        /// the logs
        /// This will contain the type of logs
        /// (Default/DefaultWithDumps/None/All/DefaultWithArchived)
        /// or a comma separated list of log types that are required</param>
        public TriggerSupportPackageRequest(string id = default(string), string name = default(string), string type = default(string), System.DateTime? minimumTimeStamp = default(System.DateTime?), System.DateTime? maximumTimeStamp = default(System.DateTime?), string include = default(string))
            : base(id, name, type)
        {
            MinimumTimeStamp = minimumTimeStamp;
            MaximumTimeStamp = maximumTimeStamp;
            Include = include;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets minimumTimeStamp from where logs need to be collected
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimumTimeStamp")]
        public System.DateTime? MinimumTimeStamp { get; set; }

        /// <summary>
        /// Gets or sets maximumTimeStamp until where logs need to be collected
        /// </summary>
        [JsonProperty(PropertyName = "properties.maximumTimeStamp")]
        public System.DateTime? MaximumTimeStamp { get; set; }

        /// <summary>
        /// Gets or sets type of files, which need to be included in the logs
        /// This will contain the type of logs
        /// (Default/DefaultWithDumps/None/All/DefaultWithArchived)
        /// or a comma separated list of log types that are required
        /// </summary>
        [JsonProperty(PropertyName = "properties.include")]
        public string Include { get; set; }

    }
}
