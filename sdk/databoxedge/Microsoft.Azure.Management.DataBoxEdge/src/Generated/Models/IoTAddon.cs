// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// IoT Addon.
    /// </summary>
    [Newtonsoft.Json.JsonObject("IotEdge")]
    [Rest.Serialization.JsonTransformation]
    public partial class IoTAddon : Addon
    {
        /// <summary>
        /// Initializes a new instance of the IoTAddon class.
        /// </summary>
        public IoTAddon()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IoTAddon class.
        /// </summary>
        /// <param name="ioTDeviceDetails">IoT device metadata to which
        /// appliance needs to be connected.</param>
        /// <param name="ioTEdgeDeviceDetails">IoT edge device to which the IoT
        /// Addon needs to be configured.</param>
        /// <param name="id">The path ID that uniquely identifies the
        /// object.</param>
        /// <param name="name">The object name.</param>
        /// <param name="type">The hierarchical type of the object.</param>
        /// <param name="systemData">Addon type</param>
        /// <param name="version">Version of IoT running on the
        /// appliance.</param>
        /// <param name="hostPlatform">Host OS supported by the IoT addon.
        /// Possible values include: 'Windows', 'Linux'</param>
        /// <param name="hostPlatformType">Platform where the runtime is
        /// hosted. Possible values include: 'KubernetesCluster',
        /// 'LinuxVM'</param>
        /// <param name="provisioningState">Addon Provisioning State. Possible
        /// values include: 'Invalid', 'Creating', 'Created', 'Updating',
        /// 'Reconfiguring', 'Failed', 'Deleting'</param>
        public IoTAddon(IoTDeviceInfo ioTDeviceDetails, IoTDeviceInfo ioTEdgeDeviceDetails, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string version = default(string), string hostPlatform = default(string), string hostPlatformType = default(string), string provisioningState = default(string))
            : base(id, name, type, systemData)
        {
            IoTDeviceDetails = ioTDeviceDetails;
            IoTEdgeDeviceDetails = ioTEdgeDeviceDetails;
            Version = version;
            HostPlatform = hostPlatform;
            HostPlatformType = hostPlatformType;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ioT device metadata to which appliance needs to be
        /// connected.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ioTDeviceDetails")]
        public IoTDeviceInfo IoTDeviceDetails { get; set; }

        /// <summary>
        /// Gets or sets ioT edge device to which the IoT Addon needs to be
        /// configured.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ioTEdgeDeviceDetails")]
        public IoTDeviceInfo IoTEdgeDeviceDetails { get; set; }

        /// <summary>
        /// Gets version of IoT running on the appliance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets host OS supported by the IoT addon. Possible values include:
        /// 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostPlatform")]
        public string HostPlatform { get; private set; }

        /// <summary>
        /// Gets platform where the runtime is hosted. Possible values include:
        /// 'KubernetesCluster', 'LinuxVM'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostPlatformType")]
        public string HostPlatformType { get; private set; }

        /// <summary>
        /// Gets addon Provisioning State. Possible values include: 'Invalid',
        /// 'Creating', 'Created', 'Updating', 'Reconfiguring', 'Failed',
        /// 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IoTDeviceDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IoTDeviceDetails");
            }
            if (IoTEdgeDeviceDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IoTEdgeDeviceDetails");
            }
            if (IoTDeviceDetails != null)
            {
                IoTDeviceDetails.Validate();
            }
            if (IoTEdgeDeviceDetails != null)
            {
                IoTEdgeDeviceDetails.Validate();
            }
        }
    }
}
