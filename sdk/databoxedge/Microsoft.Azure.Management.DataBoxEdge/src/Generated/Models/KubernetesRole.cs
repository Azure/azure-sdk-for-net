// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The limited preview of Kubernetes Cluster Management from the Azure
    /// supports:
    /// 1. Using a simple turn-key option in Azure Portal, deploy a Kubernetes
    /// cluster on your Azure Stack Edge device.
    /// 2. Configure Kubernetes cluster running on your device with Arc enabled
    /// Kubernetes with a click of a button in the Azure Portal.
    /// Azure Arc enables organizations to view, manage, and govern their
    /// on-premises Kubernetes clusters using the Azure Portal, command line
    /// tools, and APIs.
    /// 3. Easily configure Persistent Volumes using SMB and NFS shares for
    /// storing container data.
    /// For more information, refer to the document here:
    /// https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8-Cloud-Management-20210323.pdf
    /// Or Demo:
    /// https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8S-Cloud-Management-20210323.mp4
    /// By using this feature, you agree to the preview legal terms. See the
    /// https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/
    /// </summary>
    [Newtonsoft.Json.JsonObject("Kubernetes")]
    [Rest.Serialization.JsonTransformation]
    public partial class KubernetesRole : Role
    {
        /// <summary>
        /// Initializes a new instance of the KubernetesRole class.
        /// </summary>
        public KubernetesRole()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KubernetesRole class.
        /// </summary>
        /// <param name="hostPlatform">Host OS supported by the Kubernetes
        /// role. Possible values include: 'Windows', 'Linux'</param>
        /// <param name="kubernetesClusterInfo">Kubernetes cluster
        /// configuration</param>
        /// <param name="kubernetesRoleResources">Kubernetes role
        /// resources</param>
        /// <param name="roleStatus">Role status. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="id">The path ID that uniquely identifies the
        /// object.</param>
        /// <param name="name">The object name.</param>
        /// <param name="type">The hierarchical type of the object.</param>
        /// <param name="systemData">Role configured on ASE resource</param>
        /// <param name="provisioningState">State of Kubernetes deployment.
        /// Possible values include: 'Invalid', 'Creating', 'Created',
        /// 'Updating', 'Reconfiguring', 'Failed', 'Deleting'</param>
        /// <param name="hostPlatformType">Platform where the runtime is
        /// hosted. Possible values include: 'KubernetesCluster',
        /// 'LinuxVM'</param>
        public KubernetesRole(string hostPlatform, KubernetesClusterInfo kubernetesClusterInfo, KubernetesRoleResources kubernetesRoleResources, string roleStatus, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), string hostPlatformType = default(string))
            : base(id, name, type, systemData)
        {
            HostPlatform = hostPlatform;
            ProvisioningState = provisioningState;
            HostPlatformType = hostPlatformType;
            KubernetesClusterInfo = kubernetesClusterInfo;
            KubernetesRoleResources = kubernetesRoleResources;
            RoleStatus = roleStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets host OS supported by the Kubernetes role. Possible
        /// values include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostPlatform")]
        public string HostPlatform { get; set; }

        /// <summary>
        /// Gets state of Kubernetes deployment. Possible values include:
        /// 'Invalid', 'Creating', 'Created', 'Updating', 'Reconfiguring',
        /// 'Failed', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets platform where the runtime is hosted. Possible values include:
        /// 'KubernetesCluster', 'LinuxVM'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostPlatformType")]
        public string HostPlatformType { get; private set; }

        /// <summary>
        /// Gets or sets kubernetes cluster configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.kubernetesClusterInfo")]
        public KubernetesClusterInfo KubernetesClusterInfo { get; set; }

        /// <summary>
        /// Gets or sets kubernetes role resources
        /// </summary>
        [JsonProperty(PropertyName = "properties.kubernetesRoleResources")]
        public KubernetesRoleResources KubernetesRoleResources { get; set; }

        /// <summary>
        /// Gets or sets role status. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.roleStatus")]
        public string RoleStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (HostPlatform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HostPlatform");
            }
            if (KubernetesClusterInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KubernetesClusterInfo");
            }
            if (KubernetesRoleResources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KubernetesRoleResources");
            }
            if (RoleStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoleStatus");
            }
            if (KubernetesClusterInfo != null)
            {
                KubernetesClusterInfo.Validate();
            }
            if (KubernetesRoleResources != null)
            {
                KubernetesRoleResources.Validate();
            }
        }
    }
}
