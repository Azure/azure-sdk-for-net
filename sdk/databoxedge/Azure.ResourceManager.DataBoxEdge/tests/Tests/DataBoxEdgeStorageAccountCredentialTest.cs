
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeStorageAccountCredentialTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeStorageAccountCredentialTest(bool isAsync) : base(isAsync) { }
        [TestCase]
        [RecordedTest]
        public async Task TestSACCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            

            DataBoxEdgeStorageAccountType dataBoxEdgeStorageAccountType = new DataBoxEdgeStorageAccountType("GeneralPurposeStorage");
            StorageAccountCredentialProperties saProperties = new StorageAccountCredentialProperties("sac",DataBoxEdgeStorageAccountSslStatus.Disabled,dataBoxEdgeStorageAccountType);
            DataBoxEdgeStorageAccountCredentialData sacData = new DataBoxEdgeStorageAccountCredentialData(saProperties);
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //List of sac
            AsyncPageable<DataBoxEdgeStorageAccountCredentialResource> sacs = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccountCredentials().GetAllAsync();
            List<DataBoxEdgeStorageAccountCredentialResource> sacsResult = await sacs.ToEnumerableAsync();
            DataBoxEdgeStorageAccountCredentialResource sac = sacsResult.FirstOrDefault();

            //Get
            Response<DataBoxEdgeStorageAccountCredentialResource> getSACResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccountCredentials().GetAsync(sac.Data.Name);
            DataBoxEdgeStorageAccountCredentialResource storageAccountCredentialResource = getSACResponse.Value;
            Assert.IsNotNull(storageAccountCredentialResource);

            //Create
            ResourceIdentifier resourceGroupResourceSACId = DataBoxEdgeStorageAccountCredentialResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, sac.Data.Name);
            var createSACOperation = await Client.GetDataBoxEdgeStorageAccountCredentialResource(resourceGroupResourceSACId).UpdateAsync(WaitUntil.Completed, sacData);

            Assert.IsTrue(createSACOperation.HasCompleted);
            Assert.IsTrue(createSACOperation.HasValue);

            //Get share
            Response<DataBoxEdgeShareResource> getShareResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeShares().GetAsync("asesdkfileshare");
            DataBoxEdgeShareResource shareResource = getShareResponse.Value;
            Assert.IsNotNull(shareResource);
            //Delete share
            var deleteShareOperation = await shareResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteShareOperation.HasCompleted);
            //Delete
            var deleteSACOperation = await storageAccountCredentialResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteSACOperation.HasCompleted);
        }
    }
}
