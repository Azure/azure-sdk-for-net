
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeStorageAccountTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeStorageAccountTest(bool isAsync):base(isAsync) { }
        [TestCase]
        [RecordedTest]
        public async Task TestStorageAccountCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            DataBoxEdgeStorageAccountType dataBoxEdgeStorageAccountType = new DataBoxEdgeStorageAccountType("GeneralPurposeStorage");
            StorageAccountCredentialProperties sacProperties = new StorageAccountCredentialProperties("sac", DataBoxEdgeStorageAccountSslStatus.Disabled, dataBoxEdgeStorageAccountType);
            DataBoxEdgeStorageAccountCredentialData sacData = new DataBoxEdgeStorageAccountCredentialData(sacProperties);
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            //List of sac
            AsyncPageable<DataBoxEdgeStorageAccountCredentialResource> sacs = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccountCredentials().GetAllAsync();
            List<DataBoxEdgeStorageAccountCredentialResource> sacsResult = await sacs.ToEnumerableAsync();
            DataBoxEdgeStorageAccountCredentialResource sacResource = sacsResult.FirstOrDefault();
            //Create
            ResourceIdentifier resourceGroupResourceSACId = DataBoxEdgeStorageAccountCredentialResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, sacResource.Data.Name);
            var createSACOperation = await Client.GetDataBoxEdgeStorageAccountCredentialResource(resourceGroupResourceSACId).UpdateAsync(WaitUntil.Completed, sacData);


            //BandwidthScheduleData schedule = BandwidthScheduleHelper.GetBWSObject();
            DataBoxEdgeDataPolicy dataBoxEdgeDataPolicy = new DataBoxEdgeDataPolicy("Cloud");
            StorageAccountProperties saProperties = new StorageAccountProperties(dataBoxEdgeDataPolicy);
            saProperties.Description = "A cloud storage account.";
            saProperties.StorageAccountStatus = new DataBoxEdgeStorageAccountStatus("OK");
            saProperties.StorageAccountCredentialId = new ResourceIdentifier("/subscriptions/db4e2fdb-6d80-4e6e-b7cd-736098270664/resourceGroups/demo-resources/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/demo-edge-sdk9-2023/storageAccountCredentials/asesdksa2");
            DataBoxEdgeStorageAccountData saData = new DataBoxEdgeStorageAccountData(saProperties);
            
            var createSAOperation = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccounts().CreateOrUpdateAsync(WaitUntil.Completed, "asdksase1", saData);

            Assert.IsTrue(createSAOperation.IsCompleted);
            //List of sa
            AsyncPageable<DataBoxEdgeStorageAccountResource> sas = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccounts().GetAllAsync();
            List<DataBoxEdgeStorageAccountResource> sasResult = await sas.ToEnumerableAsync();
            DataBoxEdgeStorageAccountResource sac = sasResult.FirstOrDefault();
            //Get
            Response<DataBoxEdgeStorageAccountResource> getSAResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeStorageAccounts().GetAsync(sac.Data.Name);
            DataBoxEdgeStorageAccountResource storageAccountResource = getSAResponse.Value;
            Assert.IsNotNull(storageAccountResource);


            //Delete
            var deleteSAOperation = await storageAccountResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteSAOperation.HasCompleted);
            //Create
            //Error:DataPolicy Locla is not supported.
           


        }
    }
}
