
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeUserTest : DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeUserTest(bool isAsync)
                : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestUserCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceUserId = DataBoxEdgeUserResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "user1");
            UserProperties userProperties = new UserProperties();
            userProperties.EncryptedPassword = new AsymmetricEncryptedSecret("j+Ve+e77JkFQNVXzARjlf/Fjn5pVZYWPSfy6/WqmGJQKeZjd4mBc8V0Ck1kEukMgxwFg/iY0yymEWfdAZ9qOd46azsRal8qvSCbWtAz/XrWQhOZU/DLvfZBnfcJst4UKQya9SpRHAUhfzwB3cF16VCl7yAGPwyFSAehMr6EO/UcnPofMPZLJqTOcEeCHsaUH5VIKVQyAHqAOr3LTE4aGkT76DGoPGvCeli/HC4npHTUbr2FfLSpIFDzHvLj2kXpIRdb7NyVOTTWPExiqbfpSuyFXpmiYfaTJXw7IGS2z5RCidAqOQ3LdtQz70Y5G4HS/yTtUNS1znxFD7TmKc9ZFMw==", DataBoxEdgeEncryptionAlgorithm.Aes256)
            {
                EncryptionCertThumbprint = "203B72802C1D30B77D680350AFA9B27552FE1D46",
            };
            userProperties.UserType = new DataBoxEdgeUserType("Share");
            DataBoxEdgeUserData userdata = new DataBoxEdgeUserData(userProperties);
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            var createUserOperation = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeUsers().CreateOrUpdateAsync(WaitUntil.Completed, "user1", userdata);

            Assert.IsTrue(createUserOperation.HasCompleted);
            Assert.IsTrue(createUserOperation.HasValue);
            //List of alerts
            AsyncPageable<DataBoxEdgeUserResource> sas = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeUsers().GetAllAsync();
            List<DataBoxEdgeUserResource> sasResult = await sas.ToEnumerableAsync();
            DataBoxEdgeUserResource sac = sasResult.FirstOrDefault();

            //Get
            Response<DataBoxEdgeUserResource> getUserResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeUsers().GetAsync("user1");
            DataBoxEdgeUserResource userResource = getUserResponse.Value;
            Assert.IsNotNull(userResource);

            //Delete
            var deleteUserOperation = await userResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteUserOperation.HasCompleted);

            //Create
            //error:An encrypted password was not specified.\r\nSpecify an encrypted password and retry the operation
            //amrawat

        }
    }
}
