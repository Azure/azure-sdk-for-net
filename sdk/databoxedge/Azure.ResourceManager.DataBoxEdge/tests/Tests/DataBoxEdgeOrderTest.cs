
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Tests.Helpers;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Assert = NUnit.Framework.Assert;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    internal class DataBoxEdgeOrderTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeOrderTest(bool isAsync)
          : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        [ExpectedException(typeof(ArgumentException), "Create or Update order is not supported. For creation of a new order use the Azure Edge Hardware Center.")]
        public async Task TestOrderCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeOrderResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //Create
            try
            {
                DataBoxEdgeOrderData order = DataboxEdgeOrderHelper.GetOrderObject();
                var createDataboxEdgeOrderOperation = await Client.GetDataBoxEdgeOrderResource(resourceGroupResourceId).CreateOrUpdateAsync(WaitUntil.Completed, order);
            }
            catch (Exception ex) { Console.WriteLine(ex); }

            //Get

            Response<DataBoxEdgeOrderResource> getOrderResponse = await Client.GetDataBoxEdgeOrderResource(resourceGroupResourceId).GetAsync();
            DataBoxEdgeOrderResource orderResource = getOrderResponse.Value;
            Assert.IsNotNull(orderResource);
            //Delete
            try
            {
                var deleteOrderOperation = await orderResource.DeleteAsync(WaitUntil.Completed);
            }
            catch (Exception ex) { Console.WriteLine(ex); }
        }
    }
}
