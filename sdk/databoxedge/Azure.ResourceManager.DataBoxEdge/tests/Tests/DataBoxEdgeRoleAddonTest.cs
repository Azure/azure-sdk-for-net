
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using System.Reflection;
using Azure.ResourceManager.DataBoxEdge.Models;
using System.Data;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeRoleAddonTest : DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeRoleAddonTest(bool isAsync)
            : base(isAsync)//)
        {
        }




        [TestCase]
        [RecordedTest]
        public async Task TestRoleAddOnCRUDOperations()
        {

            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeRoleResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "kubernetesRole");
            ResourceIdentifier resourceGroupDeviceResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            ResourceIdentifier resourceGroupResourceAddOnsId = DataBoxEdgeRoleAddonResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "kubernetesRole", "ArcAddon");
            ArcAddonProperties addOnProperties = new ArcAddonProperties(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, AzureLocation.WestEurope);
            EdgeArcAddon edgeArcAddOn = new EdgeArcAddon(addOnProperties);


            //Create k8 role
            EdgeKubernetesRole k8sRoleData = new EdgeKubernetesRole();
            DataBoxEdgeOSPlatformType dataBoxEdgeOSPlatformType = new DataBoxEdgeOSPlatformType("Linux");
            EdgeKubernetesClusterInfo edgeKubernetesClusterInfo = new EdgeKubernetesClusterInfo("v1.17.3");
            EdgeKubernetesRoleCompute edgeKubernetesRoleCompute = new EdgeKubernetesRoleCompute("DS1_v2");
            EdgeKubernetesRoleResources edgeKubernetesRoleResources = new EdgeKubernetesRoleResources(edgeKubernetesRoleCompute);
            KubernetesRoleProperties ks8Properties = new KubernetesRoleProperties(dataBoxEdgeOSPlatformType, edgeKubernetesClusterInfo, edgeKubernetesRoleResources, DataBoxEdgeRoleStatus.Enabled);
            k8sRoleData.Properties = ks8Properties;
            var createRoleOperation = await Client.GetDataBoxEdgeDeviceResource(resourceGroupDeviceResourceId).GetDataBoxEdgeRoles().CreateOrUpdateAsync(WaitUntil.Completed, "kubernetesRole", k8sRoleData);

            //Create role addon

            var createRoleAddOnOperation = await Client.GetDataBoxEdgeRoleAddonResource(resourceGroupResourceAddOnsId).UpdateAsync(WaitUntil.Completed, edgeArcAddOn);

            Assert.IsTrue(createRoleAddOnOperation.HasCompleted);
            Assert.IsTrue(createRoleAddOnOperation.HasValue);

            //List
            AsyncPageable<DataBoxEdgeRoleAddonResource> addons = Client.GetDataBoxEdgeRoleResource(resourceGroupResourceId).GetDataBoxEdgeRoleAddons().GetAllAsync();

            List<DataBoxEdgeRoleAddonResource> addonsResult = await addons.ToEnumerableAsync();
            DataBoxEdgeRoleAddonResource addon = addonsResult.FirstOrDefault();

            //Get
            Response<DataBoxEdgeRoleAddonResource> getRoleAddOnResponse = await Client.GetDataBoxEdgeRoleAddonResource(resourceGroupResourceAddOnsId).GetAsync();
            DataBoxEdgeRoleAddonResource roleAddOnResource = getRoleAddOnResponse.Value;
            Assert.IsNotNull(roleAddOnResource);
            //Delete
            var deleteRoleAddOnOperation = await roleAddOnResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteRoleAddOnOperation.HasCompleted);

        }
    }
}
