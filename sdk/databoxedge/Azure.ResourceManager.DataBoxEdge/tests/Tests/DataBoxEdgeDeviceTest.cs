
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeDeviceTest : DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeDeviceTest(bool isAsync)
          : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestDeviceCapacityOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            List<string>[] strings = new List<string>[] { new List<string> { "Standard_D2_v2" } };
            DeviceCapacityRequestInfoProperties deviceCapacityRequestInfoProperties = new DeviceCapacityRequestInfoProperties(strings);

            DeviceCapacityRequestContent content = new DeviceCapacityRequestContent(deviceCapacityRequestInfoProperties);
            var checkResourceCreationFeasibility = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).CheckResourceCreationFeasibilityAsync(WaitUntil.Completed, content);
            Assert.IsTrue(checkResourceCreationFeasibility.HasCompleted);
        }
        [TestCase]
        [RecordedTest]
        public async Task TestGetDeviceCapacityInfo()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //error-The requested API version - \u00272021-06-01\u0027 is not supported.\r\nEnsure that the client is using a supported API version- \u00272022-03-01\u0027
            Response<DataBoxEdgeDeviceCapacityInfo> getDataBoxEdgeDeviceCapacityInfo = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDeviceCapacityInfoAsync();
            DataBoxEdgeDeviceCapacityInfo dataBoxEdgeDeviceCapacityInfo = getDataBoxEdgeDeviceCapacityInfo.Value;
            Assert.IsNotNull(dataBoxEdgeDeviceCapacityInfo);
        }

        [TestCase]
        [RecordedTest]
        public async Task TestDeviceCRUDOperations()
        {
            try
            {
                SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

                ResourceIdentifier resourceGroupResourceDeviceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
                ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName);
                ResourceGroupResource resourceGroupResource = Client.GetResourceGroupResource(resourceGroupResourceId);
                ETag eTag = new ETag("W/\"datetime'2023-04-05T21%3A04%3A07.6500089Z'\"_W/\"datetime'2023-04-05T21%3A04%3A07.6570059Z'\"");
                DataBoxEdgeResourceMoveDetails dataBoxEdgeResourceMoveDetails = new DataBoxEdgeResourceMoveDetails() { OperationInProgress = "None" };
                DataBoxEdgeDeviceProperties dataBoxEdgeDeviceProperties = new DataBoxEdgeDeviceProperties() { ResourceMoveDetails = dataBoxEdgeResourceMoveDetails };
                DataBoxEdgeDeviceData data = new DataBoxEdgeDeviceData(AzureLocation.WestEurope)
                {
                    Sku = new DataBoxEdgeSku()
                    {
                        Name = DataBoxEdgeSkuName.Edge,
                        Tier = DataBoxEdgeSkuTier.Standard,
                    },
                    //ETag = eTag,
                    Properties = dataBoxEdgeDeviceProperties,
                   // Identity= new ResourceIdentity(type: "SystemAssigned");
            };
                ////Get
                //Response<DataBoxEdgeDeviceResource> getDBdevice = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).GetAsync();
                //DataBoxEdgeDeviceResource dataBoxEdgeDeviceResource = getDBdevice.Value;
                //Assert.IsNotNull(dataBoxEdgeDeviceResource);

                ////List by Resource group
                //AsyncPageable<DataBoxEdgeDeviceResource> listByRg = resourceGroupResource.GetDataBoxEdgeDevices().GetAllAsync();
                //List<DataBoxEdgeDeviceResource> listByRgResult = await listByRg.ToEnumerableAsync();
                //Assert.IsNotNull(listByRgResult);

                ////List of devices
                //AsyncPageable<DataBoxEdgeDeviceResource> listOfDBDevices = DataBoxEdgeExtensions.GetDataBoxEdgeDevicesAsync(subscription);
                //List<DataBoxEdgeDeviceResource> listOfDBDevicesResult = await listOfDBDevices.ToEnumerableAsync();
                //Assert.IsNotNull(listOfDBDevicesResult);

                //Create or update
                //error:/Media Type is not supported 
                var createOperations = await resourceGroupResource.GetDataBoxEdgeDevices().CreateOrUpdateAsync(WaitUntil.Completed, TestConstants.EdgeResourceName, data);
                Assert.IsTrue(createOperations.HasCompleted);

                //Update
                //error:/Media Type is not supported
                //var databoxEdgeDevicePatch = new DataBoxEdgeDevicePatch()
                //{
                //    Properties = new DataBoxEdgeDevicePropertiesPatch
                //    {
                //       SubscriptionId= subscription.Id,
                //    }
                //};
                //var Tags = new Dictionary<string, string>();
                //Tags = Tags.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                //Tags.Add("tag3", "value3");
                //Tags.Add("tag4", "value4");

                //DataBoxEdgeDevicePatch patch = new DataBoxEdgeDevicePatch()
                //{
                //    Tags = Tags,
                //    SubscriptionId = new ResourceIdentifier("/subscriptions/db4e2fdb-6d80-4e6e-b7cd-736098270664/resourceGroups/demo-resources/providers/Microsoft.AzureStack/linkedSubscriptions/a2837145-87f5-4b88-83be-56243f1247a0"),
                //};
                //var updateOperations = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).UpdateAsync(patch);


                ////Delete
                //var deleteOperation = await dataBoxEdgeDeviceResource.DeleteAsync(WaitUntil.Completed);
                //Assert.IsTrue(deleteOperation.HasCompleted);
            }
            catch (Exception ex) { Console.WriteLine(ex); }
        }

        [TestCase]
        [RecordedTest]
        public async Task DevicUpdatesTest()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceDeviceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            //Devices_GetUpdateSummary
            Response<DataBoxEdgeDeviceUpdateSummary> dataBoxEdgeDeviceUpdateSummary = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).GetUpdateSummaryAsync();
            DataBoxEdgeDeviceUpdateSummary dataBoxEdgeDeviceUpdateSummaryResult = dataBoxEdgeDeviceUpdateSummary.Value;
            Assert.IsNotNull(dataBoxEdgeDeviceUpdateSummaryResult);

            ////Devices_ScanForUpdates
            var scanForUpdates = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).ScanForUpdatesAsync(WaitUntil.Completed);
            Assert.IsTrue(scanForUpdates.HasCompleted);

            ////Devices_DownloadUpdates
            var downloadUpdates = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).DownloadUpdatesAsync(WaitUntil.Completed);
            Assert.IsTrue(downloadUpdates.HasCompleted);

            ////Devices_InstallUpdates
            var installUpdates = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).InstallUpdatesAsync(WaitUntil.Completed);
            Assert.IsTrue(installUpdates.HasCompleted);

        }
        [TestCase]
        [RecordedTest]
        public async Task DevicCertificateTest()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceDeviceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //Devices_UploadCertificate
            RawCertificateData rawCertificateData = new RawCertificateData("MIIEDjCCAnagAwIBAgIQKAP+8W8Xp7xBrtFaQ6mibzANBgkqhkiG9w0BAQUFADBDMUEwPwYDVQQDHjgAQwBCAF8AUABvAHIAdABhAGwAXwA2ADMAOAAxADYANAAxADIANQAxADIAMAA4ADIANwAwADUAMTAeFw0yMzA0MDYyMTA1MTJaFw0yMzA0MDkyMTE1MTJaMEMxQTA/BgNVBAMeOABDAEIAXwBQAG8AcgB0AGEAbABfADYAMwA4ADEANgA0ADEAMgA1ADEAMgAwADgAMgA3ADAANQAxMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAs34kBjIisXq1JYXL6+s+sNo/f46yyf7qVSJpfmj10iV/hhyg1QGJ9oW6I9NNLlwXXrfIPOiXHeyKkFv+YpXVsdifywwwtD4MVnZr2JBI2vnByEaS0M7zb3WIsc43lueZ3Pio5nt7Z0Ug+EO7p61GuGYW6fThFS0noaQQHfsst1s/ypXThcgDw3LD5tPtNIOF88zLlnkpQ0/DXP3olGSexemyB2Du1pdeDemyGmb7HR5AGL7mEC4VYjyOXCLupHZsD/d3QecN5Q8qms3IZZEK+PSFTx23+qtiPbVOXnuBne59HKmQrfxjq53Gw5N9iBnj7ZM6ePMHZcWECMVc/z47SXNw9vC4+9Y2SAAOogf1atnTBYM04RwX9bRQHPAWPbHQIqgXiRxysTy2wzWfvnoU7pY8FNP7u2Pgp4j+W4KLV4wpVLuTvJ9I9+65M9cyLv/A01XQ7lPwcgIK2M2ik3QclUGCY0VSnjpJ6lqFPr716BqfKwJE97m6CrAJAsWxaGGhAgMBAAEwDQYJKoZIhvcNAQEFBQADggGBAExaKL0LeXaFy4Gy24tIqkSoe/zVdLfBThr5hDLHJo7kkRx5N+kUskvvGmNUmlwMPZWqZHA0t+Uapw9qeqMSrbQ00AQJ3dyFIeiAbfnHR+p/dthQEajywAtbn8oJVGxveY1A+8+8sEHrpCledkyZx4sP7DddljF54JsTHkMDhH4kcv/8FZpPb+1U7xC4bgGQNHJDSdCVN2SKkq71f5lhTiVUCl3eFSNhMWTGbkd6Qrg9T7rOaDFxhq/bc9VaMZAoisfwwaV/3iqcnqISG6+BAOsKOLSVKnpI52vt66Vf6s5soO1cvhRIVv95eyhQHxBd87UBZMA6Z3hStlwrU6eFM8QyjS0TLEle4zxnpyM5Rwfj0SCUiOgrRoPcePjLxLqL6+yj2Td43lDCbzMXxNlTyos5YrUmJi3SSPlo7ZHs6X8065kH4t/hOU7Z/8l+x/drgW8b0quG60VCeJ3ZCQhP5W9HmKYk23lTJbFA/mNiPZAZQsIvscKEYCllXywkRlNBWw==");
            UploadCertificateContent uploadCertificateContent = new UploadCertificateContent(rawCertificateData);
            Response<UploadCertificateResponse> uploadCertificate = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).UploadCertificateAsync(uploadCertificateContent);
            UploadCertificateResponse upploadResponseResult = uploadCertificate.Value;
            Assert.IsNotNull(upploadResponseResult);

            //Devices_GenerateCertificate
            Response<GenerateCertResult> generateCertResultResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).GenerateCertificateAsync();
            GenerateCertResult generateCertResult = generateCertResultResponse.Value;
            Assert.IsNotNull(generateCertResult);
        }
        [TestCase]
        [RecordedTest]
        public async Task DeviceExtendedInfoTest()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceDeviceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            //Devices_GetExtendedInformation
            Response<DataBoxEdgeDeviceExtendedInfo> dataBoxEdgeDeviceExtendedInfo = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).GetExtendedInformationAsync();
            DataBoxEdgeDeviceExtendedInfo dataBoxEdgeDeviceResourceResult = dataBoxEdgeDeviceExtendedInfo.Value;
            Assert.IsNotNull(dataBoxEdgeDeviceResourceResult);
            // Devices_UpdateExtendedInformation
            ////error:Service request failed.Unsupported media type.
            var patch = new DataBoxEdgeDeviceExtendedInfoPatch()
            {
                ChannelIntegrityKeyName = "IK-2933456679231",
                ChannelIntegrityKeyVersion = "816a9e3c0cc543918d4cf0727d041ad4",
                ClientSecretStoreId = new ResourceIdentifier("/subscriptions/706c087b-4c6c-46bf-8adf-766ae266d5bf/resourceGroups/gateway-bvt/providers/Microsoft.KeyVault/vaults/asekv"),
                ClientSecretStoreUri = new Uri("https://asekv.vault.azure.net")
            };
            Response<DataBoxEdgeDeviceExtendedInfo> updateExtendedInfo = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).UpdateExtendedInformationAsync(patch);
            DataBoxEdgeDeviceExtendedInfo updateExtendedInfoResult = updateExtendedInfo.Value;
            Assert.IsNotNull(updateExtendedInfo);

        }
        [TestCase]
        [RecordedTest]
        public async Task DeviceSettingsTest()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceDeviceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //Devices_GetNetworkSettings
            Response<DataBoxEdgeDeviceNetworkSettings> dataBoxEdgeDeviceNetworkSettings = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).GetNetworkSettingsAsync();
            DataBoxEdgeDeviceNetworkSettings dataBoxEdgeDeviceNetworkSettingsResult = dataBoxEdgeDeviceNetworkSettings.Value;
            Assert.IsNotNull(dataBoxEdgeDeviceNetworkSettingsResult);

            //Devices_CreateOrUpdateSecuritySettings
            //error-Service request failed(Unsupported media type).
            AsymmetricEncryptedSecret asymmetricEncryptedSecret = new AsymmetricEncryptedSecret("j+Ve+e77JkFQNVXzARjlf/Fjn5pVZYWPSfy6/WqmGJQKeZjd4mBc8V0Ck1kEukMgxwFg/iY0yymEWfdAZ9qOd46azsRal8qvSCbWtAz/XrWQhOZU/DLvfZBnfcJst4UKQya9SpRHAUhfzwB3cF16VCl7yAGPwyFSAehMr6EO/UcnPofMPZLJqTOcEeCHsaUH5VIKVQyAHqAOr3LTE4aGkT76DGoPGvCeli/HC4npHTUbr2FfLSpIFDzHvLj2kXpIRdb7NyVOTTWPExiqbfpSuyFXpmiYfaTJXw7IGS2z5RCidAqOQ3LdtQz70Y5G4HS/yTtUNS1znxFD7TmKc9ZFMw==", DataBoxEdgeEncryptionAlgorithm.Aes256)
            {
                EncryptionCertThumbprint = "203B72802C1D30B77D680350AFA9B27552FE1D46",
            };
            SecuritySettingsProperties securitySettingsProperties = new SecuritySettingsProperties(asymmetricEncryptedSecret);
            DataBoxEdgeSecuritySettings dataBoxEdgeSecuritySettings = new DataBoxEdgeSecuritySettings(securitySettingsProperties);
            var dataBoxEdgeSecuritySettingsOperation = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceDeviceId).CreateOrUpdateSecuritySettingsAsync(WaitUntil.Completed, dataBoxEdgeSecuritySettings);
            Assert.IsTrue(dataBoxEdgeSecuritySettingsOperation.HasCompleted);
        }
    }
}
