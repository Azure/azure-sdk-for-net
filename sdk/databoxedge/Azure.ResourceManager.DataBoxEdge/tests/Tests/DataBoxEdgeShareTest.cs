
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.DataBoxEdge.Tests.Helpers;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeShareTest : DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeShareTest(bool isAsync)
            : base(isAsync)
        {
        }
        [TestCase]
        [RecordedTest]
        public async Task TestShareCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            ResourceIdentifier resourceGroupResourceShareId = DataBoxEdgeShareResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "smb1");

            ShareProperties shareProperties = new ShareProperties(new ShareStatus("OK"), DataBoxEdgeShareMonitoringStatus.Enabled, ShareAccessProtocol.Smb);
            shareProperties.Description = "It's a share Object";
            UserAccessRight userAccessRight = new UserAccessRight(
                new ResourceIdentifier("/subscriptions/db4e2fdb-6d80-4e6e-b7cd-736098270664/resourceGroups/demo-resources/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/demo-edge-sdk8-2023/users/user1"), ShareAccessType.Change);
            List<UserAccessRight> userAccessRights = new List<UserAccessRight>();
            userAccessRights.Add(userAccessRight);
            shareProperties.UserAccessRights = userAccessRights;
            shareProperties.DataPolicy = DataBoxEdgeDataPolicy.Local;

            DataBoxEdgeShareData data = new DataBoxEdgeShareData(shareProperties);

            //List of shares
            AsyncPageable<DataBoxEdgeShareResource> shares = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeShares().GetAllAsync();
            List<DataBoxEdgeShareResource> sharesResult = await shares.ToEnumerableAsync();
            DataBoxEdgeShareResource share = sharesResult.FirstOrDefault();
            //Create
            var createShareOperation = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeShares().CreateOrUpdateAsync(WaitUntil.Completed, "share1", data);

            Assert.IsTrue(createShareOperation.HasCompleted);
            Assert.IsTrue(createShareOperation.HasValue);

            //Get
            Response<DataBoxEdgeShareResource> getShareResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeShares().GetAsync(share.Data.Name);
            DataBoxEdgeShareResource shareResource = getShareResponse.Value;
            Assert.IsNotNull(shareResource);
            //Shares_Refresh
            var refreshOperation = await Client.GetDataBoxEdgeShareResource(resourceGroupResourceShareId).RefreshAsync(WaitUntil.Completed);
            Assert.IsTrue(refreshOperation.HasCompleted);
            //Delete
            var deleteShareOperation = await shareResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteShareOperation.HasCompleted);
        }
    }
}
