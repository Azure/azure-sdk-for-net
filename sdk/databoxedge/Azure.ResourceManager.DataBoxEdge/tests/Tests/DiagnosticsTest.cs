
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DiagnosticsTest:DataBoxEdgeManagementTestBase
    {
        public DiagnosticsTest(bool isAsync)
        : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestDiagnosticsOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();

            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //DiagnosticSettings_GetDiagnosticProactiveLogCollectionSettings
            Response<DiagnosticProactiveLogCollectionSettingResource> diagnosticProactiveLogCollectionSettingResource = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDiagnosticProactiveLogCollectionSetting().GetAsync();
            DiagnosticProactiveLogCollectionSettingResource diagnosticProactiveLogCollectionSettingResourceResult = diagnosticProactiveLogCollectionSettingResource.Value;
            Assert.IsNotNull(diagnosticProactiveLogCollectionSettingResourceResult);

            //DiagnosticSettings_UpdateDiagnosticProactiveLogCollectionSettings"
            //error:Service request failed(NoContent)
            ProactiveDiagnosticsConsent proactiveDiagnosticsConsent = new ProactiveDiagnosticsConsent("Enabled");
            ProactiveLogCollectionSettingsProperties proactiveLogCollectionSettingsProperties = new ProactiveLogCollectionSettingsProperties(proactiveDiagnosticsConsent);
            DiagnosticProactiveLogCollectionSettingData diagnosticProactiveLogCollectionSettingData = new DiagnosticProactiveLogCollectionSettingData(proactiveLogCollectionSettingsProperties);
            var updateOperations = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDiagnosticProactiveLogCollectionSetting().CreateOrUpdateAsync(WaitUntil.Completed, diagnosticProactiveLogCollectionSettingData);
            Assert.IsTrue(updateOperations.HasCompleted);

            //DiagnosticSettings_GetDiagnosticRemoteSupportSettings
            //error: Could not find the entity DiagnosticRemoteSupportSettingsInternal.
            //EdgeRemoteSupportSettings edgeRemoteSupportSettings = new EdgeRemoteSupportSettings() { RemoteApplicationType = "Powershell", AccessLevel = "ReadWrite", ExpireOn = Convert.ToDateTime("2500-09-14T00:00:00Z") };
            //List<EdgeRemoteSupportSettings> edgeRemoteSupportSettings1 = new List<EdgeRemoteSupportSettings>();
            //edgeRemoteSupportSettings1.Add(edgeRemoteSupportSettings);
            //DiagnosticRemoteSupportSettingsProperties diagnosticRemoteSupportSettingsProperties = new DiagnosticRemoteSupportSettingsProperties();
            //diagnosticRemoteSupportSettingsProperties.RemoteSupportSettingsList = edgeRemoteSupportSettings1;
            //DiagnosticRemoteSupportSettingData diagnosticRemoteSupportSettingData = new DiagnosticRemoteSupportSettingData(diagnosticRemoteSupportSettingsProperties);
            //Response<DiagnosticRemoteSupportSettingResource> diagnosticRemoteSupportSettingResource = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDiagnosticRemoteSupportSetting().GetAsync();
            //DiagnosticRemoteSupportSettingResource diagnosticRemoteSupportSettingResourceResult = diagnosticRemoteSupportSettingResource.Value;
            //Assert.IsNotNull(diagnosticRemoteSupportSettingResourceResult);


            ResourceIdentifier diagnosticRemoteSupportSettingResourceId = DiagnosticRemoteSupportSettingResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            DiagnosticRemoteSupportSettingResource diagnosticRemoteSupportSetting = Client.GetDiagnosticRemoteSupportSettingResource(diagnosticRemoteSupportSettingResourceId);

            // invoke the operation
            DiagnosticRemoteSupportSettingResource result = await diagnosticRemoteSupportSetting.GetAsync();
            Assert.IsNotNull(result);
            //DiagnosticSettings_UpdateDiagnosticRemoteSupportSettings
            //error:'Input is not valid: Value cannot be null.
            //var remoteOperations = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDiagnosticRemoteSupportSetting().CreateOrUpdateAsync(WaitUntil.Completed, diagnosticRemoteSupportSettingData);
            //Assert.IsTrue(remoteOperations.HasCompleted);
        }
    }
}
