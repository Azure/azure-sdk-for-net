
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeStorageContainerTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeStorageContainerTest(bool isAsync) : base(isAsync) { }
        [TestCase]
        [RecordedTest]
        public async Task TestStorageContainerCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceContainerId = DataBoxEdgeStorageContainerResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "asesdksa4", "asesdkcontainer2");
            ResourceIdentifier resourceGroupResourceSAId = DataBoxEdgeStorageAccountResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "asesdksa4");

            DataBoxEdgeStorageContainerDataFormat dataBoxEdgeStorageContainerDataFormat = new DataBoxEdgeStorageContainerDataFormat("BlockBlob");
            ContainerProperties containerProperties = new ContainerProperties(dataBoxEdgeStorageContainerDataFormat);
            DataBoxEdgeStorageContainerData containerData = new DataBoxEdgeStorageContainerData(containerProperties);
            //List of container
            try
            {
                AsyncPageable<DataBoxEdgeStorageContainerResource> sas = Client.GetDataBoxEdgeStorageAccountResource(resourceGroupResourceSAId).GetDataBoxEdgeStorageContainers().GetAllAsync();
                List<DataBoxEdgeStorageContainerResource> sasResult = await sas.ToEnumerableAsync();
                DataBoxEdgeStorageContainerResource sac = sasResult.FirstOrDefault();

                //Create
                //Error:Could not update the container.\r\nThe update operation is not supported on containers.".
                //Arjoo
                var createStorageContainerOperation = await Client.GetDataBoxEdgeStorageAccountResource(resourceGroupResourceSAId).GetDataBoxEdgeStorageContainers().CreateOrUpdateAsync(WaitUntil.Completed, "asesdkcontainer5", containerData);

                Assert.IsTrue(createStorageContainerOperation.HasCompleted);
                Assert.IsTrue(createStorageContainerOperation.HasValue);
                //Get
                Response<DataBoxEdgeStorageContainerResource> getStorageContainerResponse = await Client.GetDataBoxEdgeStorageContainerResource(resourceGroupResourceContainerId).GetAsync();
                DataBoxEdgeStorageContainerResource storageContainerResource = getStorageContainerResponse.Value;
                Assert.IsNotNull(storageContainerResource);
                //Containers_Refresh
                var refreshOperation = await Client.GetDataBoxEdgeStorageContainerResource(resourceGroupResourceContainerId).RefreshAsync(WaitUntil.Completed);
                Assert.IsTrue(refreshOperation.HasCompleted);

                //Delete
                var deleteContainerOperation = await storageContainerResource.DeleteAsync(WaitUntil.Completed);
                Assert.IsTrue(deleteContainerOperation.HasCompleted);
            }
            catch (Exception ex) { Console.Write(ex.Message); }

        }
    }
}
