
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeTriggerTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeTriggerTest(bool isAsync)
                : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestBandwidthCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceTriggerId = DataBoxEdgeTriggerResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "trigger");
            ResourceIdentifier resourceGroupResourceShareId = DataBoxEdgeShareResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "localshare");
            ResourceIdentifier resourceGroupResourceRoleId = DataBoxEdgeRoleResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "kubernetesRole");

            EdgeFileSourceInfo edgeFileSourceInfo = new EdgeFileSourceInfo(resourceGroupResourceShareId);
            DataBoxEdgeRoleSinkInfo dataBoxEdgeRoleSinkInfo = new DataBoxEdgeRoleSinkInfo(resourceGroupResourceRoleId);
            FileTriggerProperties fileTriggerProperties = new FileTriggerProperties(edgeFileSourceInfo, dataBoxEdgeRoleSinkInfo);
            fileTriggerProperties.CustomContextTag = "CustomContextTag-ebfdd6e";
            EdgeFileEventTrigger edgeFileEventTrigger = new EdgeFileEventTrigger(fileTriggerProperties);

            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //Create
            //error-Servicerquest failed.
            var createTriggerOperation = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeTriggers().CreateOrUpdateAsync(WaitUntil.Completed, "trigger1", edgeFileEventTrigger);
            Assert.IsTrue(createTriggerOperation.IsCompleted);

            //List of triggers
            AsyncPageable<DataBoxEdgeTriggerResource> triggers = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeTriggers().GetAllAsync();
            List<DataBoxEdgeTriggerResource> striggerResult = await triggers.ToEnumerableAsync();
            DataBoxEdgeTriggerResource trigger = striggerResult.FirstOrDefault();


            //Get
            Response<DataBoxEdgeTriggerResource> getTriggerResponse = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeTriggers().GetAsync(trigger.Data.Name);
            DataBoxEdgeTriggerResource triggerResource = getTriggerResponse.Value;
            Assert.IsNotNull(triggerResource);
            //Delete
            var deleteTriggerOperation = await triggerResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteTriggerOperation.HasCompleted);

        }
    }
}
