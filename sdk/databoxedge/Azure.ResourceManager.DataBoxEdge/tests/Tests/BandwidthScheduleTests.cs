
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.DataBoxEdge.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using NUnit.Framework.Internal;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class BandwidthScheduleTests : DataBoxEdgeManagementTestBase
    {
        public BandwidthScheduleTests(bool isAsync)
           : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestBandwidthCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceBandWidthId = BandwidthScheduleResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "schedule1");
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            BandwidthScheduleData schedule = BandwidthScheduleHelper.GetBWSObject();
            //List of bandwidth
            AsyncPageable<BandwidthScheduleResource> bandwidthSchedules = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetBandwidthSchedules().GetAllAsync();
            List<BandwidthScheduleResource> bandwidthSchedulesResult = await bandwidthSchedules.ToEnumerableAsync();

            //Create

            var createBandwidthOperation = await Client.GetBandwidthScheduleResource(resourceGroupResourceBandWidthId).UpdateAsync(WaitUntil.Completed, schedule);

            Assert.IsTrue(createBandwidthOperation.HasCompleted);
            Assert.IsTrue(createBandwidthOperation.HasValue);

            //Get
            Response<BandwidthScheduleResource> getBandwidthResponse = await Client.GetBandwidthScheduleResource(resourceGroupResourceBandWidthId).GetAsync();
            BandwidthScheduleResource bandwidthResource = getBandwidthResponse.Value;
            Assert.IsNotNull(bandwidthResource);
            //Delete
            var deleteBandwidthOperation = await bandwidthResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteBandwidthOperation.HasCompleted);
        }
    }
}
