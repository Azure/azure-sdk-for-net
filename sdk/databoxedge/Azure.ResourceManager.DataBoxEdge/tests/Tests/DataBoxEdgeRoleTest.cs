
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
using Azure.ResourceManager.DataBoxEdge.Models;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class DataBoxEdgeRoleTest:DataBoxEdgeManagementTestBase
    {
        public DataBoxEdgeRoleTest(bool isAsync)
   :        base(isAsync)//)
        {
        }


        [TestCase]
        [RecordedTest]
        public async Task TestRoleCRUDOperations()
        {
            //Basavaraj
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);

            //Create k8 role
            EdgeKubernetesRole k8sRoleData = new EdgeKubernetesRole();
            DataBoxEdgeOSPlatformType dataBoxEdgeOSPlatformType = new DataBoxEdgeOSPlatformType("Linux");
            EdgeKubernetesClusterInfo edgeKubernetesClusterInfo = new EdgeKubernetesClusterInfo("v1.17.3");
            EdgeKubernetesRoleCompute edgeKubernetesRoleCompute = new EdgeKubernetesRoleCompute("DS1_v2");
            EdgeKubernetesRoleResources edgeKubernetesRoleResources = new EdgeKubernetesRoleResources(edgeKubernetesRoleCompute);
            KubernetesRoleProperties ks8Properties = new KubernetesRoleProperties(dataBoxEdgeOSPlatformType, edgeKubernetesClusterInfo, edgeKubernetesRoleResources, DataBoxEdgeRoleStatus.Enabled);
            k8sRoleData.Properties = ks8Properties;
            var createRoleOperation = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeRoles().CreateOrUpdateAsync(WaitUntil.Completed, "kubernetesRole", k8sRoleData);
            Assert.IsTrue(createRoleOperation.HasCompleted);
            Assert.IsTrue(createRoleOperation.HasValue);

            //List of roles
            AsyncPageable<DataBoxEdgeRoleResource> roles = Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeRoles().GetAllAsync();
            List<DataBoxEdgeRoleResource> rolesResult = await roles.ToEnumerableAsync();
            DataBoxEdgeRoleResource role = rolesResult.FirstOrDefault();
            //Create
            ResourceIdentifier resourceGroupResourceRolesId = DataBoxEdgeRoleResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, role.Data.Name);
            DataBoxEdgeRoleData roledata= new DataBoxEdgeRoleData();

            //Get
            Response<DataBoxEdgeRoleResource> roleByName = await Client.GetDataBoxEdgeDeviceResource(resourceGroupResourceId).GetDataBoxEdgeRoles().GetAsync(role.Data.Name);
            DataBoxEdgeRoleResource roleResource = roleByName.Value;
            Assert.IsNotNull(roleResource);
            //Roles_Migrate
            var migrateOperation = await Client.GetDataBoxEdgeRoleResource(resourceGroupResourceRolesId).MigrateAsync();
            Assert.IsNotNull(migrateOperation);
            //Delete
            var deleteRoleOperation = await roleResource.DeleteAsync(WaitUntil.Completed);
            Assert.IsTrue(deleteRoleOperation.HasCompleted);
        }
    }
}
