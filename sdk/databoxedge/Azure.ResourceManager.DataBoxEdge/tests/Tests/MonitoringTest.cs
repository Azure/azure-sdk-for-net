// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.Core;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;
//using System.Diagnostics.Metrics;

namespace Azure.ResourceManager.DataBoxEdge.Tests.Tests
{
    public class MonitoringTest:DataBoxEdgeManagementTestBase
    {
        public MonitoringTest(bool isAsync)
        : base(isAsync)//)
        {
        }

        [TestCase]
        [RecordedTest]
        public async Task TestMarketPlaceImageVersionCRUDOperations()
        {
            SubscriptionResource subscription = await Client.GetDefaultSubscriptionAsync();
            //ResourceGroupResource rg = await CreateResourceGroup(subscription, "testRg", AzureLocation.WestEurope);
            ResourceIdentifier resourceGroupResourceId = DataBoxEdgeDeviceResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName);
            ResourceIdentifier resourceGroupResourceMonitoringId = MonitoringMetricConfigurationResource.CreateResourceIdentifier(subscription.Id.SubscriptionId, TestConstants.DefaultResourceGroupName, TestConstants.EdgeResourceName, "kubernetesRole");
            List<DataBoxEdgeMetricDimension> dataBoxEdgeMetricDimensions = new List<DataBoxEdgeMetricDimension>();
            DataBoxEdgeMetricDimension dataBoxEdgeMetricDimension = new DataBoxEdgeMetricDimension("ARMId", "/subscriptions/0d44739e-0563-474f-97e7-24a0cdb23b29/resourceGroups/testrg/providers/Microsoft.TestRP/TestResourceType/testresource");
            dataBoxEdgeMetricDimensions.Add(dataBoxEdgeMetricDimension);
            DataBoxEdgeMetricCounter counter = new DataBoxEdgeMetricCounter("HyperVVirtualProcessorUtilization") { Instance="*",DimensionFilter= dataBoxEdgeMetricDimensions };
            IEnumerable<DataBoxEdgeMetricCounter> counterList = new List<DataBoxEdgeMetricCounter>();
            counterList.ToList().Add(counter);
            DataBoxEdgeMetricCounterSet counterSet = new DataBoxEdgeMetricCounterSet(counterList);
            IEnumerable<DataBoxEdgeMetricCounterSet> counterSetList= new List<DataBoxEdgeMetricCounterSet>();
            counterSetList.ToList().Add(counterSet);
            DataBoxEdgeMetricConfiguration metricConfiguration= new DataBoxEdgeMetricConfiguration(new ResourceIdentifier("/subscriptions/2b6e2174-331c-4a9c-aada-7f793c987c58/providers/microsoft.hybridnetwork/locations/eastus2euap/vendors/qichcanarytest/virtualnetworkfunctions/b2988c97-4d37-414a-9d84-1657de04c085"), counterSetList)
            {MdmAccount= "EdgeGatewayTest", MetricNameSpace= "GatewayCustom" };
            IEnumerable<DataBoxEdgeMetricConfiguration> metricConfigurations = new List<DataBoxEdgeMetricConfiguration>();
            metricConfigurations.ToList().Add(metricConfiguration);
            MonitoringMetricConfigurationProperties properties= new MonitoringMetricConfigurationProperties(metricConfigurations);
            MonitoringMetricConfigurationData monitoringMetricConfigurationData = new MonitoringMetricConfigurationData(properties);

            //MonitoringConfig_CreateOrUpdate
            //amrawat
            var createOrUpdateOperations = Client.GetMonitoringMetricConfigurationResource(resourceGroupResourceMonitoringId).CreateOrUpdateAsync(WaitUntil.Completed, monitoringMetricConfigurationData);
            Assert.IsTrue(createOrUpdateOperations.IsCompleted);
            try
            {
                //MonitoringConfig_Get
                //error:Client app is not authorized to make this API call. Please use a whitelisted app
                Response<MonitoringMetricConfigurationResource> monitoringMetricConfigurationResourceResponse = await Client.GetMonitoringMetricConfigurationResource(resourceGroupResourceMonitoringId).GetAsync();
                MonitoringMetricConfigurationResource monitoringMetricConfigurationResourceResult = monitoringMetricConfigurationResourceResponse.Value;
                Assert.IsNotNull(monitoringMetricConfigurationResourceResult);

                //MonitoringConfig_Delete
                var deleteOpaerations = monitoringMetricConfigurationResourceResult.DeleteAsync(WaitUntil.Completed);
                Assert.IsTrue(!deleteOpaerations.IsCompleted);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }

        }
    }
}
