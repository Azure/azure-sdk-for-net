// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.DataBoxEdge
{
    /// <summary>
    /// A class representing a collection of <see cref="MarketplaceImageVersionResource" /> and their operations.
    /// Each <see cref="MarketplaceImageVersionResource" /> in the collection will belong to the same instance of <see cref="DataBoxEdgeDeviceResource" />.
    /// To get a <see cref="MarketplaceImageVersionCollection" /> instance call the GetMarketplaceImageVersions method from an instance of <see cref="DataBoxEdgeDeviceResource" />.
    /// </summary>
    public partial class MarketplaceImageVersionCollection : ArmCollection, IEnumerable<MarketplaceImageVersionResource>, IAsyncEnumerable<MarketplaceImageVersionResource>
    {
        private readonly ClientDiagnostics _marketplaceImageVersionClientDiagnostics;
        private readonly MarketplaceImageVersionRestOperations _marketplaceImageVersionRestClient;
        private readonly string _publisherName;
        private readonly string _offerName;
        private readonly string _skuName;

        /// <summary> Initializes a new instance of the <see cref="MarketplaceImageVersionCollection"/> class for mocking. </summary>
        protected MarketplaceImageVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MarketplaceImageVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="publisherName"> The String to use. </param>
        /// <param name="offerName"> The String to use. </param>
        /// <param name="skuName"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherName"/>, <paramref name="offerName"/> or <paramref name="skuName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="publisherName"/>, <paramref name="offerName"/> or <paramref name="skuName"/> is an empty string, and was expected to be non-empty. </exception>
        internal MarketplaceImageVersionCollection(ArmClient client, ResourceIdentifier id, string publisherName, string offerName, string skuName) : base(client, id)
        {
            _publisherName = publisherName;
            _offerName = offerName;
            _skuName = skuName;
            _marketplaceImageVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DataBoxEdge", MarketplaceImageVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(MarketplaceImageVersionResource.ResourceType, out string marketplaceImageVersionApiVersion);
            _marketplaceImageVersionRestClient = new MarketplaceImageVersionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, marketplaceImageVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != DataBoxEdgeDeviceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, DataBoxEdgeDeviceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Particular Image
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_GetParticularImage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual async Task<Response<MarketplaceImageVersionResource>> GetAsync(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _marketplaceImageVersionClientDiagnostics.CreateScope("MarketplaceImageVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _marketplaceImageVersionRestClient.GetParticularImageAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName, versionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MarketplaceImageVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Particular Image
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_GetParticularImage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<MarketplaceImageVersionResource> Get(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _marketplaceImageVersionClientDiagnostics.CreateScope("MarketplaceImageVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _marketplaceImageVersionRestClient.GetParticularImage(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName, versionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MarketplaceImageVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns List of Versions within SKU
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_ListVersionswithinSKU</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MarketplaceImageVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MarketplaceImageVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _marketplaceImageVersionRestClient.CreateListVersionswithinSKURequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _marketplaceImageVersionRestClient.CreateListVersionswithinSKUNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new MarketplaceImageVersionResource(Client, MarketplaceImageVersionData.DeserializeMarketplaceImageVersionData(e)), _marketplaceImageVersionClientDiagnostics, Pipeline, "MarketplaceImageVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Returns List of Versions within SKU
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_ListVersionswithinSKU</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MarketplaceImageVersionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MarketplaceImageVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _marketplaceImageVersionRestClient.CreateListVersionswithinSKURequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _marketplaceImageVersionRestClient.CreateListVersionswithinSKUNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new MarketplaceImageVersionResource(Client, MarketplaceImageVersionData.DeserializeMarketplaceImageVersionData(e)), _marketplaceImageVersionClientDiagnostics, Pipeline, "MarketplaceImageVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_GetParticularImage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _marketplaceImageVersionClientDiagnostics.CreateScope("MarketplaceImageVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _marketplaceImageVersionRestClient.GetParticularImageAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName, versionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}/versions/{versionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MarketplaceImageVersion_GetParticularImage</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="versionName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="versionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="versionName"/> is null. </exception>
        public virtual Response<bool> Exists(string versionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(versionName, nameof(versionName));

            using var scope = _marketplaceImageVersionClientDiagnostics.CreateScope("MarketplaceImageVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _marketplaceImageVersionRestClient.GetParticularImage(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _publisherName, _offerName, _skuName, versionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<MarketplaceImageVersionResource> IEnumerable<MarketplaceImageVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<MarketplaceImageVersionResource> IAsyncEnumerable<MarketplaceImageVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
