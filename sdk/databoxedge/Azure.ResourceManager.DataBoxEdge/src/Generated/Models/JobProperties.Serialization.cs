// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class JobProperties
    {
        internal static JobProperties DeserializeJobProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DataBoxEdgeJobType> jobType = default;
            Optional<UpdateOperationStage> currentStage = default;
            Optional<UpdateDownloadProgress> downloadProgress = default;
            Optional<UpdateInstallProgress> installProgress = default;
            Optional<int> totalRefreshErrors = default;
            Optional<string> errorManifestFile = default;
            Optional<ResourceIdentifier> refreshedEntityId = default;
            Optional<string> folder = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobType = new DataBoxEdgeJobType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("currentStage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentStage = new UpdateOperationStage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("downloadProgress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    downloadProgress = UpdateDownloadProgress.DeserializeUpdateDownloadProgress(property.Value);
                    continue;
                }
                if (property.NameEquals("installProgress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    installProgress = UpdateInstallProgress.DeserializeUpdateInstallProgress(property.Value);
                    continue;
                }
                if (property.NameEquals("totalRefreshErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalRefreshErrors = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("errorManifestFile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        errorManifestFile = null;
                        continue;
                    }
                    errorManifestFile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("refreshedEntityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        refreshedEntityId = null;
                        continue;
                    }
                    refreshedEntityId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("folder"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        folder = null;
                        continue;
                    }
                    folder = property.Value.GetString();
                    continue;
                }
            }
            return new JobProperties(Optional.ToNullable(jobType), Optional.ToNullable(currentStage), downloadProgress.Value, installProgress.Value, Optional.ToNullable(totalRefreshErrors), errorManifestFile.Value, refreshedEntityId.Value, folder.Value);
        }
    }
}
