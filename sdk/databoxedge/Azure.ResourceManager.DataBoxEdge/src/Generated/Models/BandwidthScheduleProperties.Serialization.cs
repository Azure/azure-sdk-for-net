// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class BandwidthScheduleProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("start"u8);
            writer.WriteStringValue(Start);
            writer.WritePropertyName("stop"u8);
            writer.WriteStringValue(Stop);
            writer.WritePropertyName("rateInMbps"u8);
            writer.WriteNumberValue(RateInMbps);
            writer.WritePropertyName("days"u8);
            writer.WriteStartArray();
            foreach (var item in Days)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static BandwidthScheduleProperties DeserializeBandwidthScheduleProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string start = default;
            string stop = default;
            int rateInMbps = default;
            IList<DataBoxEdgeDayOfWeek> days = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("start"u8))
                {
                    start = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stop"u8))
                {
                    stop = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rateInMbps"u8))
                {
                    rateInMbps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("days"u8))
                {
                    List<DataBoxEdgeDayOfWeek> array = new List<DataBoxEdgeDayOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new DataBoxEdgeDayOfWeek(item.GetString()));
                    }
                    days = array;
                    continue;
                }
            }
            return new BandwidthScheduleProperties(start, stop, rateInMbps, days);
        }
    }
}
