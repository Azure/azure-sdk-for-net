// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class DataBoxEdgeDeviceUpdateSummary : IUtf8JsonSerializable, IModelJsonSerializable<DataBoxEdgeDeviceUpdateSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DataBoxEdgeDeviceUpdateSummary>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DataBoxEdgeDeviceUpdateSummary>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(DeviceVersionNumber))
            {
                writer.WritePropertyName("deviceVersionNumber"u8);
                writer.WriteStringValue(DeviceVersionNumber);
            }
            if (Optional.IsDefined(FriendlyDeviceVersionName))
            {
                writer.WritePropertyName("friendlyDeviceVersionName"u8);
                writer.WriteStringValue(FriendlyDeviceVersionName);
            }
            if (Optional.IsDefined(DeviceLastScannedOn))
            {
                writer.WritePropertyName("deviceLastScannedDateTime"u8);
                writer.WriteStringValue(DeviceLastScannedOn.Value, "O");
            }
            if (Optional.IsDefined(LastCompletedScanJobOn))
            {
                writer.WritePropertyName("lastCompletedScanJobDateTime"u8);
                writer.WriteStringValue(LastCompletedScanJobOn.Value, "O");
            }
            if (Optional.IsDefined(LastSuccessfulScanJobOn))
            {
                writer.WritePropertyName("lastSuccessfulScanJobTime"u8);
                writer.WriteStringValue(LastSuccessfulScanJobOn.Value, "O");
            }
            if (Optional.IsDefined(LastSuccessfulInstallJobOn))
            {
                writer.WritePropertyName("lastSuccessfulInstallJobDateTime"u8);
                writer.WriteStringValue(LastSuccessfulInstallJobOn.Value, "O");
            }
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DataBoxEdgeDeviceUpdateSummary DeserializeDataBoxEdgeDeviceUpdateSummary(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> deviceVersionNumber = default;
            Optional<string> friendlyDeviceVersionName = default;
            Optional<DateTimeOffset> deviceLastScannedDateTime = default;
            Optional<DateTimeOffset> lastCompletedScanJobDateTime = default;
            Optional<DateTimeOffset> lastSuccessfulScanJobTime = default;
            Optional<DateTimeOffset> lastCompletedDownloadJobDateTime = default;
            Optional<ResourceIdentifier> lastCompletedDownloadJobId = default;
            Optional<DataBoxEdgeJobStatus> lastDownloadJobStatus = default;
            Optional<DateTimeOffset> lastSuccessfulInstallJobDateTime = default;
            Optional<DateTimeOffset> lastCompletedInstallJobDateTime = default;
            Optional<ResourceIdentifier> lastCompletedInstallJobId = default;
            Optional<DataBoxEdgeJobStatus> lastInstallJobStatus = default;
            Optional<int> totalNumberOfUpdatesAvailable = default;
            Optional<int> totalNumberOfUpdatesPendingDownload = default;
            Optional<int> totalNumberOfUpdatesPendingInstall = default;
            Optional<InstallRebootBehavior> rebootBehavior = default;
            Optional<DataBoxEdgeUpdateOperation> ongoingUpdateOperation = default;
            Optional<ResourceIdentifier> inProgressDownloadJobId = default;
            Optional<ResourceIdentifier> inProgressInstallJobId = default;
            Optional<DateTimeOffset> inProgressDownloadJobStartedDateTime = default;
            Optional<DateTimeOffset> inProgressInstallJobStartedDateTime = default;
            Optional<IReadOnlyList<string>> updateTitles = default;
            Optional<IReadOnlyList<DataBoxEdgeUpdateDetails>> updates = default;
            Optional<double> totalUpdateSizeInBytes = default;
            Optional<int> totalTimeInMinutes = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("deviceVersionNumber"u8))
                        {
                            deviceVersionNumber = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("friendlyDeviceVersionName"u8))
                        {
                            friendlyDeviceVersionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deviceLastScannedDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            deviceLastScannedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastCompletedScanJobDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastCompletedScanJobDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastSuccessfulScanJobTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastSuccessfulScanJobTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastCompletedDownloadJobDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastCompletedDownloadJobDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastCompletedDownloadJobId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastCompletedDownloadJobId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lastDownloadJobStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastDownloadJobStatus = new DataBoxEdgeJobStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lastSuccessfulInstallJobDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastSuccessfulInstallJobDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastCompletedInstallJobDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastCompletedInstallJobDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastCompletedInstallJobId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastCompletedInstallJobId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("lastInstallJobStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastInstallJobStatus = new DataBoxEdgeJobStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("totalNumberOfUpdatesAvailable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalNumberOfUpdatesAvailable = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalNumberOfUpdatesPendingDownload"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalNumberOfUpdatesPendingDownload = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalNumberOfUpdatesPendingInstall"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalNumberOfUpdatesPendingInstall = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("rebootBehavior"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            rebootBehavior = new InstallRebootBehavior(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ongoingUpdateOperation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ongoingUpdateOperation = new DataBoxEdgeUpdateOperation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("inProgressDownloadJobId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            inProgressDownloadJobId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("inProgressInstallJobId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            inProgressInstallJobId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("inProgressDownloadJobStartedDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            inProgressDownloadJobStartedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("inProgressInstallJobStartedDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            inProgressInstallJobStartedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updateTitles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            updateTitles = array;
                            continue;
                        }
                        if (property0.NameEquals("updates"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DataBoxEdgeUpdateDetails> array = new List<DataBoxEdgeUpdateDetails>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DataBoxEdgeUpdateDetails.DeserializeDataBoxEdgeUpdateDetails(item));
                            }
                            updates = array;
                            continue;
                        }
                        if (property0.NameEquals("totalUpdateSizeInBytes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalUpdateSizeInBytes = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("totalTimeInMinutes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalTimeInMinutes = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DataBoxEdgeDeviceUpdateSummary(id, name, type, systemData.Value, deviceVersionNumber.Value, friendlyDeviceVersionName.Value, Optional.ToNullable(deviceLastScannedDateTime), Optional.ToNullable(lastCompletedScanJobDateTime), Optional.ToNullable(lastSuccessfulScanJobTime), Optional.ToNullable(lastCompletedDownloadJobDateTime), lastCompletedDownloadJobId.Value, Optional.ToNullable(lastDownloadJobStatus), Optional.ToNullable(lastSuccessfulInstallJobDateTime), Optional.ToNullable(lastCompletedInstallJobDateTime), lastCompletedInstallJobId.Value, Optional.ToNullable(lastInstallJobStatus), Optional.ToNullable(totalNumberOfUpdatesAvailable), Optional.ToNullable(totalNumberOfUpdatesPendingDownload), Optional.ToNullable(totalNumberOfUpdatesPendingInstall), Optional.ToNullable(rebootBehavior), Optional.ToNullable(ongoingUpdateOperation), inProgressDownloadJobId.Value, inProgressInstallJobId.Value, Optional.ToNullable(inProgressDownloadJobStartedDateTime), Optional.ToNullable(inProgressInstallJobStartedDateTime), Optional.ToList(updateTitles), Optional.ToList(updates), Optional.ToNullable(totalUpdateSizeInBytes), Optional.ToNullable(totalTimeInMinutes), rawData);
        }

        DataBoxEdgeDeviceUpdateSummary IModelJsonSerializable<DataBoxEdgeDeviceUpdateSummary>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDataBoxEdgeDeviceUpdateSummary(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DataBoxEdgeDeviceUpdateSummary>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DataBoxEdgeDeviceUpdateSummary IModelSerializable<DataBoxEdgeDeviceUpdateSummary>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDataBoxEdgeDeviceUpdateSummary(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="DataBoxEdgeDeviceUpdateSummary"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="DataBoxEdgeDeviceUpdateSummary"/> to convert. </param>
        public static implicit operator RequestContent(DataBoxEdgeDeviceUpdateSummary model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="DataBoxEdgeDeviceUpdateSummary"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator DataBoxEdgeDeviceUpdateSummary(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDataBoxEdgeDeviceUpdateSummary(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
