// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class KubernetesClusterInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("version");
            writer.WriteStringValue(Version);
            writer.WriteEndObject();
        }

        internal static KubernetesClusterInfo DeserializeKubernetesClusterInfo(JsonElement element)
        {
            Optional<DataBoxEdgeEtcdInfo> etcdInfo = default;
            Optional<IReadOnlyList<KubernetesNodeInfo>> nodes = default;
            string version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etcdInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    etcdInfo = DataBoxEdgeEtcdInfo.DeserializeDataBoxEdgeEtcdInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("nodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<KubernetesNodeInfo> array = new List<KubernetesNodeInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KubernetesNodeInfo.DeserializeKubernetesNodeInfo(item));
                    }
                    nodes = array;
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
            }
            return new KubernetesClusterInfo(etcdInfo.Value, Optional.ToList(nodes), version);
        }
    }
}
