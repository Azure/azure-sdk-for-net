// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class HostCapacity : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(HostName))
            {
                if (HostName != null)
                {
                    writer.WritePropertyName("hostName"u8);
                    writer.WriteStringValue(HostName);
                }
                else
                {
                    writer.WriteNull("hostName");
                }
            }
            if (Optional.IsDefined(EffectiveAvailableMemoryInMBOnHost))
            {
                writer.WritePropertyName("effectiveAvailableMemoryMbOnHost"u8);
                writer.WriteNumberValue(EffectiveAvailableMemoryInMBOnHost.Value);
            }
            if (Optional.IsDefined(AvailableGpuCount))
            {
                writer.WritePropertyName("availableGpuCount"u8);
                writer.WriteNumberValue(AvailableGpuCount.Value);
            }
            if (Optional.IsCollectionDefined(VmUsedMemory))
            {
                if (VmUsedMemory != null)
                {
                    writer.WritePropertyName("vmUsedMemory"u8);
                    writer.WriteStartObject();
                    foreach (var item in VmUsedMemory)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("vmUsedMemory");
                }
            }
            if (Optional.IsDefined(GpuType))
            {
                if (GpuType != null)
                {
                    writer.WritePropertyName("gpuType"u8);
                    writer.WriteStringValue(GpuType);
                }
                else
                {
                    writer.WriteNull("gpuType");
                }
            }
            if (Optional.IsCollectionDefined(NumaNodesData))
            {
                if (NumaNodesData != null)
                {
                    writer.WritePropertyName("numaNodesData"u8);
                    writer.WriteStartArray();
                    foreach (var item in NumaNodesData)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("numaNodesData");
                }
            }
            writer.WriteEndObject();
        }

        internal static HostCapacity DeserializeHostCapacity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> hostName = default;
            Optional<long> effectiveAvailableMemoryMbOnHost = default;
            Optional<int> availableGpuCount = default;
            Optional<IDictionary<string, DataBoxEdgeVmMemory>> vmUsedMemory = default;
            Optional<string> gpuType = default;
            Optional<IList<NumaNodeInfo>> numaNodesData = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        hostName = null;
                        continue;
                    }
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("effectiveAvailableMemoryMbOnHost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    effectiveAvailableMemoryMbOnHost = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableGpuCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    availableGpuCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vmUsedMemory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vmUsedMemory = null;
                        continue;
                    }
                    Dictionary<string, DataBoxEdgeVmMemory> dictionary = new Dictionary<string, DataBoxEdgeVmMemory>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, DataBoxEdgeVmMemory.DeserializeDataBoxEdgeVmMemory(property0.Value));
                    }
                    vmUsedMemory = dictionary;
                    continue;
                }
                if (property.NameEquals("gpuType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        gpuType = null;
                        continue;
                    }
                    gpuType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numaNodesData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numaNodesData = null;
                        continue;
                    }
                    List<NumaNodeInfo> array = new List<NumaNodeInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NumaNodeInfo.DeserializeNumaNodeInfo(item));
                    }
                    numaNodesData = array;
                    continue;
                }
            }
            return new HostCapacity(hostName.Value, Optional.ToNullable(effectiveAvailableMemoryMbOnHost), Optional.ToNullable(availableGpuCount), Optional.ToDictionary(vmUsedMemory), gpuType.Value, Optional.ToList(numaNodesData));
        }
    }
}
