// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class NetworkAdapter
    {
        internal static NetworkAdapter DeserializeNetworkAdapter(JsonElement element)
        {
            Optional<string> adapterId = default;
            Optional<NetworkAdapterPosition> adapterPosition = default;
            Optional<int> index = default;
            Optional<string> nodeId = default;
            Optional<string> networkAdapterName = default;
            Optional<string> label = default;
            Optional<string> macAddress = default;
            Optional<long> linkSpeed = default;
            Optional<NetworkAdapterStatus> status = default;
            Optional<NetworkAdapterRdmaStatus> rdmaStatus = default;
            Optional<NetworkAdapterDhcpStatus> dhcpStatus = default;
            Optional<IPv4Config> ipv4Configuration = default;
            Optional<IPv6Config> ipv6Configuration = default;
            Optional<string> ipv6LinkLocalAddress = default;
            Optional<IReadOnlyList<string>> dnsServers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("adapterId"))
                {
                    adapterId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adapterPosition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    adapterPosition = NetworkAdapterPosition.DeserializeNetworkAdapterPosition(property.Value);
                    continue;
                }
                if (property.NameEquals("index"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    index = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeId"))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkAdapterName"))
                {
                    networkAdapterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("macAddress"))
                {
                    macAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkSpeed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    linkSpeed = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new NetworkAdapterStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rdmaStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rdmaStatus = new NetworkAdapterRdmaStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dhcpStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dhcpStatus = new NetworkAdapterDhcpStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipv4Configuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ipv4Configuration = IPv4Config.DeserializeIPv4Config(property.Value);
                    continue;
                }
                if (property.NameEquals("ipv6Configuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ipv6Configuration = IPv6Config.DeserializeIPv6Config(property.Value);
                    continue;
                }
                if (property.NameEquals("ipv6LinkLocalAddress"))
                {
                    ipv6LinkLocalAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
            }
            return new NetworkAdapter(adapterId.Value, adapterPosition.Value, Optional.ToNullable(index), nodeId.Value, networkAdapterName.Value, label.Value, macAddress.Value, Optional.ToNullable(linkSpeed), Optional.ToNullable(status), Optional.ToNullable(rdmaStatus), Optional.ToNullable(dhcpStatus), ipv4Configuration.Value, ipv6Configuration.Value, ipv6LinkLocalAddress.Value, Optional.ToList(dnsServers));
        }
    }
}
