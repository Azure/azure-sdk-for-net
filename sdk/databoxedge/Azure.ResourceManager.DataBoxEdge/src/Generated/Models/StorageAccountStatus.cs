// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    /// <summary> Current status of the storage account. </summary>
    public readonly partial struct StorageAccountStatus : IEquatable<StorageAccountStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StorageAccountStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageAccountStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OKValue = "OK";
        private const string OfflineValue = "Offline";
        private const string UnknownValue = "Unknown";
        private const string UpdatingValue = "Updating";
        private const string NeedsAttentionValue = "NeedsAttention";

        /// <summary> OK. </summary>
        public static StorageAccountStatus OK { get; } = new StorageAccountStatus(OKValue);
        /// <summary> Offline. </summary>
        public static StorageAccountStatus Offline { get; } = new StorageAccountStatus(OfflineValue);
        /// <summary> Unknown. </summary>
        public static StorageAccountStatus Unknown { get; } = new StorageAccountStatus(UnknownValue);
        /// <summary> Updating. </summary>
        public static StorageAccountStatus Updating { get; } = new StorageAccountStatus(UpdatingValue);
        /// <summary> NeedsAttention. </summary>
        public static StorageAccountStatus NeedsAttention { get; } = new StorageAccountStatus(NeedsAttentionValue);
        /// <summary> Determines if two <see cref="StorageAccountStatus"/> values are the same. </summary>
        public static bool operator ==(StorageAccountStatus left, StorageAccountStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StorageAccountStatus"/> values are not the same. </summary>
        public static bool operator !=(StorageAccountStatus left, StorageAccountStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StorageAccountStatus"/>. </summary>
        public static implicit operator StorageAccountStatus(string value) => new StorageAccountStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageAccountStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StorageAccountStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
