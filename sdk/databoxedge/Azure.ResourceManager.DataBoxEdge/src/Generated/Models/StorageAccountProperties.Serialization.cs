// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class StorageAccountProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                if (Description != null)
                {
                    writer.WritePropertyName("description"u8);
                    writer.WriteStringValue(Description);
                }
                else
                {
                    writer.WriteNull("description");
                }
            }
            if (Optional.IsDefined(StorageAccountStatus))
            {
                writer.WritePropertyName("storageAccountStatus"u8);
                writer.WriteStringValue(StorageAccountStatus.Value.ToString());
            }
            writer.WritePropertyName("dataPolicy"u8);
            writer.WriteStringValue(DataPolicy.ToString());
            if (Optional.IsDefined(StorageAccountCredentialId))
            {
                if (StorageAccountCredentialId != null)
                {
                    writer.WritePropertyName("storageAccountCredentialId"u8);
                    writer.WriteStringValue(StorageAccountCredentialId);
                }
                else
                {
                    writer.WriteNull("storageAccountCredentialId");
                }
            }
            writer.WriteEndObject();
        }

        internal static StorageAccountProperties DeserializeStorageAccountProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> description = default;
            Optional<DataBoxEdgeStorageAccountStatus> storageAccountStatus = default;
            DataBoxEdgeDataPolicy dataPolicy = default;
            Optional<ResourceIdentifier> storageAccountCredentialId = default;
            Optional<string> blobEndpoint = default;
            Optional<int?> containerCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    storageAccountStatus = new DataBoxEdgeStorageAccountStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dataPolicy"u8))
                {
                    dataPolicy = new DataBoxEdgeDataPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageAccountCredentialId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storageAccountCredentialId = null;
                        continue;
                    }
                    storageAccountCredentialId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("blobEndpoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        blobEndpoint = null;
                        continue;
                    }
                    blobEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("containerCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        containerCount = null;
                        continue;
                    }
                    containerCount = property.Value.GetInt32();
                    continue;
                }
            }
            return new StorageAccountProperties(description.Value, Optional.ToNullable(storageAccountStatus), dataPolicy, storageAccountCredentialId.Value, blobEndpoint.Value, Optional.ToNullable(containerCount));
        }
    }
}
