// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    /// <summary> Status of the order as per the allowed status types. </summary>
    public readonly partial struct OrderState : IEquatable<OrderState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OrderState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OrderState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UntrackedValue = "Untracked";
        private const string AwaitingFulfillmentValue = "AwaitingFulfillment";
        private const string AwaitingPreparationValue = "AwaitingPreparation";
        private const string AwaitingShipmentValue = "AwaitingShipment";
        private const string ShippedValue = "Shipped";
        private const string ArrivingValue = "Arriving";
        private const string DeliveredValue = "Delivered";
        private const string ReplacementRequestedValue = "ReplacementRequested";
        private const string LostDeviceValue = "LostDevice";
        private const string DeclinedValue = "Declined";
        private const string ReturnInitiatedValue = "ReturnInitiated";
        private const string AwaitingReturnShipmentValue = "AwaitingReturnShipment";
        private const string ShippedBackValue = "ShippedBack";
        private const string CollectedAtMicrosoftValue = "CollectedAtMicrosoft";
        private const string AwaitingPickupValue = "AwaitingPickup";
        private const string PickupCompletedValue = "PickupCompleted";
        private const string AwaitingDropValue = "AwaitingDrop";

        /// <summary> Untracked. </summary>
        public static OrderState Untracked { get; } = new OrderState(UntrackedValue);
        /// <summary> AwaitingFulfillment. </summary>
        public static OrderState AwaitingFulfillment { get; } = new OrderState(AwaitingFulfillmentValue);
        /// <summary> AwaitingPreparation. </summary>
        public static OrderState AwaitingPreparation { get; } = new OrderState(AwaitingPreparationValue);
        /// <summary> AwaitingShipment. </summary>
        public static OrderState AwaitingShipment { get; } = new OrderState(AwaitingShipmentValue);
        /// <summary> Shipped. </summary>
        public static OrderState Shipped { get; } = new OrderState(ShippedValue);
        /// <summary> Arriving. </summary>
        public static OrderState Arriving { get; } = new OrderState(ArrivingValue);
        /// <summary> Delivered. </summary>
        public static OrderState Delivered { get; } = new OrderState(DeliveredValue);
        /// <summary> ReplacementRequested. </summary>
        public static OrderState ReplacementRequested { get; } = new OrderState(ReplacementRequestedValue);
        /// <summary> LostDevice. </summary>
        public static OrderState LostDevice { get; } = new OrderState(LostDeviceValue);
        /// <summary> Declined. </summary>
        public static OrderState Declined { get; } = new OrderState(DeclinedValue);
        /// <summary> ReturnInitiated. </summary>
        public static OrderState ReturnInitiated { get; } = new OrderState(ReturnInitiatedValue);
        /// <summary> AwaitingReturnShipment. </summary>
        public static OrderState AwaitingReturnShipment { get; } = new OrderState(AwaitingReturnShipmentValue);
        /// <summary> ShippedBack. </summary>
        public static OrderState ShippedBack { get; } = new OrderState(ShippedBackValue);
        /// <summary> CollectedAtMicrosoft. </summary>
        public static OrderState CollectedAtMicrosoft { get; } = new OrderState(CollectedAtMicrosoftValue);
        /// <summary> AwaitingPickup. </summary>
        public static OrderState AwaitingPickup { get; } = new OrderState(AwaitingPickupValue);
        /// <summary> PickupCompleted. </summary>
        public static OrderState PickupCompleted { get; } = new OrderState(PickupCompletedValue);
        /// <summary> AwaitingDrop. </summary>
        public static OrderState AwaitingDrop { get; } = new OrderState(AwaitingDropValue);
        /// <summary> Determines if two <see cref="OrderState"/> values are the same. </summary>
        public static bool operator ==(OrderState left, OrderState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OrderState"/> values are not the same. </summary>
        public static bool operator !=(OrderState left, OrderState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OrderState"/>. </summary>
        public static implicit operator OrderState(string value) => new OrderState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OrderState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OrderState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
