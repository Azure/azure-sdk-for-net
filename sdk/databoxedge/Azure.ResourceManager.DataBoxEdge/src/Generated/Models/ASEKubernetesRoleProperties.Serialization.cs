// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class ASEKubernetesRoleProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("kubernetesRoleResources"u8);
            writer.WriteObjectValue(KubernetesRoleResources);
            writer.WritePropertyName("roleStatus"u8);
            writer.WriteStringValue(RoleStatus.ToString());
            writer.WriteEndObject();
        }

        internal static ASEKubernetesRoleProperties DeserializeASEKubernetesRoleProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DataBoxEdgeOSPlatformType> hostPlatform = default;
            Optional<EdgeKubernetesState> provisioningState = default;
            Optional<HostPlatformType?> hostPlatformType = default;
            ASEKubernetesRoleResources kubernetesRoleResources = default;
            DataBoxEdgeRoleStatus roleStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostPlatform"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hostPlatform = new DataBoxEdgeOSPlatformType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new EdgeKubernetesState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostPlatformType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        hostPlatformType = null;
                        continue;
                    }
                    hostPlatformType = new HostPlatformType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kubernetesRoleResources"u8))
                {
                    kubernetesRoleResources = ASEKubernetesRoleResources.DeserializeASEKubernetesRoleResources(property.Value);
                    continue;
                }
                if (property.NameEquals("roleStatus"u8))
                {
                    roleStatus = new DataBoxEdgeRoleStatus(property.Value.GetString());
                    continue;
                }
            }
            return new ASEKubernetesRoleProperties(Optional.ToNullable(hostPlatform), Optional.ToNullable(provisioningState), Optional.ToNullable(hostPlatformType), kubernetesRoleResources, roleStatus);
        }
    }
}
