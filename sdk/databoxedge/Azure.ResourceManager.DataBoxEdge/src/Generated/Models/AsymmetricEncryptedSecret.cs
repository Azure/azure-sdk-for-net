// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    /// <summary> Represent the secrets intended for encryption with asymmetric key pair. </summary>
    public partial class AsymmetricEncryptedSecret
    {
        /// <summary> Initializes a new instance of <see cref="AsymmetricEncryptedSecret"/>. </summary>
        /// <param name="value"> The value of the secret. </param>
        /// <param name="encryptionAlgorithm"> The algorithm used to encrypt "Value". </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AsymmetricEncryptedSecret(string value, DataBoxEdgeEncryptionAlgorithm encryptionAlgorithm)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value;
            EncryptionAlgorithm = encryptionAlgorithm;
        }

        /// <summary> Initializes a new instance of <see cref="AsymmetricEncryptedSecret"/>. </summary>
        /// <param name="value"> The value of the secret. </param>
        /// <param name="encryptionCertThumbprint"> Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null. </param>
        /// <param name="encryptionAlgorithm"> The algorithm used to encrypt "Value". </param>
        internal AsymmetricEncryptedSecret(string value, string encryptionCertThumbprint, DataBoxEdgeEncryptionAlgorithm encryptionAlgorithm)
        {
            Value = value;
            EncryptionCertThumbprint = encryptionCertThumbprint;
            EncryptionAlgorithm = encryptionAlgorithm;
        }

        /// <summary> The value of the secret. </summary>
        public string Value { get; set; }
        /// <summary> Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null. </summary>
        public string EncryptionCertThumbprint { get; set; }
        /// <summary> The algorithm used to encrypt "Value". </summary>
        public DataBoxEdgeEncryptionAlgorithm EncryptionAlgorithm { get; set; }
    }
}
