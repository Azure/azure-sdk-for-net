// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.DataBoxEdge.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataBoxEdge
{
    public partial class DataBoxEdgeShareData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("shareStatus"u8);
            writer.WriteStringValue(ShareStatus.ToString());
            writer.WritePropertyName("monitoringStatus"u8);
            writer.WriteStringValue(MonitoringStatus.ToString());
            if (Core.Optional.IsDefined(AzureContainerInfo))
            {
                writer.WritePropertyName("azureContainerInfo"u8);
                writer.WriteObjectValue(AzureContainerInfo);
            }
            writer.WritePropertyName("accessProtocol"u8);
            writer.WriteStringValue(AccessProtocol.ToString());
            if (Core.Optional.IsCollectionDefined(UserAccessRights))
            {
                writer.WritePropertyName("userAccessRights"u8);
                writer.WriteStartArray();
                foreach (var item in UserAccessRights)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ClientAccessRights))
            {
                writer.WritePropertyName("clientAccessRights"u8);
                writer.WriteStartArray();
                foreach (var item in ClientAccessRights)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(RefreshDetails))
            {
                writer.WritePropertyName("refreshDetails"u8);
                writer.WriteObjectValue(RefreshDetails);
            }
            if (Core.Optional.IsDefined(DataPolicy))
            {
                writer.WritePropertyName("dataPolicy"u8);
                writer.WriteStringValue(DataPolicy.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DataBoxEdgeShareData DeserializeDataBoxEdgeShareData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> description = default;
            ShareStatus shareStatus = default;
            DataBoxEdgeShareMonitoringStatus monitoringStatus = default;
            Core.Optional<DataBoxEdgeStorageContainerInfo> azureContainerInfo = default;
            ShareAccessProtocol accessProtocol = default;
            Core.Optional<IList<UserAccessRight>> userAccessRights = default;
            Core.Optional<IList<ClientAccessRight>> clientAccessRights = default;
            Core.Optional<DataBoxEdgeRefreshDetails> refreshDetails = default;
            Core.Optional<IReadOnlyList<DataBoxEdgeMountPointMap>> shareMappings = default;
            Core.Optional<DataBoxEdgeDataPolicy> dataPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("shareStatus"u8))
                        {
                            shareStatus = new ShareStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("monitoringStatus"u8))
                        {
                            monitoringStatus = new DataBoxEdgeShareMonitoringStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureContainerInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureContainerInfo = DataBoxEdgeStorageContainerInfo.DeserializeDataBoxEdgeStorageContainerInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("accessProtocol"u8))
                        {
                            accessProtocol = new ShareAccessProtocol(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("userAccessRights"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<UserAccessRight> array = new List<UserAccessRight>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UserAccessRight.DeserializeUserAccessRight(item));
                            }
                            userAccessRights = array;
                            continue;
                        }
                        if (property0.NameEquals("clientAccessRights"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ClientAccessRight> array = new List<ClientAccessRight>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ClientAccessRight.DeserializeClientAccessRight(item));
                            }
                            clientAccessRights = array;
                            continue;
                        }
                        if (property0.NameEquals("refreshDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            refreshDetails = DataBoxEdgeRefreshDetails.DeserializeDataBoxEdgeRefreshDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("shareMappings"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DataBoxEdgeMountPointMap> array = new List<DataBoxEdgeMountPointMap>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DataBoxEdgeMountPointMap.DeserializeDataBoxEdgeMountPointMap(item));
                            }
                            shareMappings = array;
                            continue;
                        }
                        if (property0.NameEquals("dataPolicy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataPolicy = new DataBoxEdgeDataPolicy(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DataBoxEdgeShareData(id, name, type, systemData.Value, description.Value, shareStatus, monitoringStatus, azureContainerInfo.Value, accessProtocol, Core.Optional.ToList(userAccessRights), Core.Optional.ToList(clientAccessRights), refreshDetails.Value, Core.Optional.ToList(shareMappings), Core.Optional.ToNullable(dataPolicy));
        }
    }
}
