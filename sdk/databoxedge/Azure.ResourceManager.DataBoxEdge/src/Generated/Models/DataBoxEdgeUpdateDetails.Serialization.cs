// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class DataBoxEdgeUpdateDetails : IUtf8JsonSerializable, IModelJsonSerializable<DataBoxEdgeUpdateDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DataBoxEdgeUpdateDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DataBoxEdgeUpdateDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(UpdateTitle))
            {
                writer.WritePropertyName("updateTitle"u8);
                writer.WriteStringValue(UpdateTitle);
            }
            if (Optional.IsDefined(UpdateSizeInBytes))
            {
                writer.WritePropertyName("updateSize"u8);
                writer.WriteNumberValue(UpdateSizeInBytes.Value);
            }
            if (Optional.IsDefined(UpdateType))
            {
                writer.WritePropertyName("updateType"u8);
                writer.WriteStringValue(UpdateType.Value.ToString());
            }
            if (Optional.IsDefined(TargetVersion))
            {
                writer.WritePropertyName("targetVersion"u8);
                writer.WriteStringValue(TargetVersion);
            }
            if (Optional.IsDefined(FriendlyVersionNumber))
            {
                writer.WritePropertyName("friendlyVersionNumber"u8);
                writer.WriteStringValue(FriendlyVersionNumber);
            }
            if (Optional.IsDefined(EstimatedInstallTimeInMins))
            {
                writer.WritePropertyName("estimatedInstallTimeInMins"u8);
                writer.WriteNumberValue(EstimatedInstallTimeInMins.Value);
            }
            if (Optional.IsDefined(RebootBehavior))
            {
                writer.WritePropertyName("rebootBehavior"u8);
                writer.WriteStringValue(RebootBehavior.Value.ToString());
            }
            if (Optional.IsDefined(InstallationImpact))
            {
                writer.WritePropertyName("installationImpact"u8);
                writer.WriteStringValue(InstallationImpact.Value.ToString());
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DataBoxEdgeUpdateDetails DeserializeDataBoxEdgeUpdateDetails(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> updateTitle = default;
            Optional<double> updateSize = default;
            Optional<DataBoxEdgeUpdateType> updateType = default;
            Optional<string> targetVersion = default;
            Optional<string> friendlyVersionNumber = default;
            Optional<int> estimatedInstallTimeInMins = default;
            Optional<InstallRebootBehavior> rebootBehavior = default;
            Optional<InstallationImpact> installationImpact = default;
            Optional<DataBoxEdgeUpdateStatus> status = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateTitle"u8))
                {
                    updateTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateSize = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("updateType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateType = new DataBoxEdgeUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVersion"u8))
                {
                    targetVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyVersionNumber"u8))
                {
                    friendlyVersionNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("estimatedInstallTimeInMins"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimatedInstallTimeInMins = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rebootBehavior"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rebootBehavior = new InstallRebootBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("installationImpact"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    installationImpact = new InstallationImpact(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new DataBoxEdgeUpdateStatus(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DataBoxEdgeUpdateDetails(updateTitle.Value, Optional.ToNullable(updateSize), Optional.ToNullable(updateType), targetVersion.Value, friendlyVersionNumber.Value, Optional.ToNullable(estimatedInstallTimeInMins), Optional.ToNullable(rebootBehavior), Optional.ToNullable(installationImpact), Optional.ToNullable(status), rawData);
        }

        DataBoxEdgeUpdateDetails IModelJsonSerializable<DataBoxEdgeUpdateDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDataBoxEdgeUpdateDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DataBoxEdgeUpdateDetails>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DataBoxEdgeUpdateDetails IModelSerializable<DataBoxEdgeUpdateDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDataBoxEdgeUpdateDetails(doc.RootElement, options);
        }

        public static implicit operator RequestContent(DataBoxEdgeUpdateDetails model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator DataBoxEdgeUpdateDetails(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDataBoxEdgeUpdateDetails(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
