// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class DataBoxEdgeUpdateDetails
    {
        internal static DataBoxEdgeUpdateDetails DeserializeDataBoxEdgeUpdateDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> updateTitle = default;
            Optional<double> updateSize = default;
            Optional<DataBoxEdgeUpdateType> updateType = default;
            Optional<string> targetVersion = default;
            Optional<string> friendlyVersionNumber = default;
            Optional<int> estimatedInstallTimeInMins = default;
            Optional<InstallRebootBehavior> rebootBehavior = default;
            Optional<InstallationImpact> installationImpact = default;
            Optional<DataBoxEdgeUpdateStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateTitle"u8))
                {
                    updateTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateSize = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("updateType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateType = new DataBoxEdgeUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVersion"u8))
                {
                    targetVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyVersionNumber"u8))
                {
                    friendlyVersionNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("estimatedInstallTimeInMins"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimatedInstallTimeInMins = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rebootBehavior"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rebootBehavior = new InstallRebootBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("installationImpact"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    installationImpact = new InstallationImpact(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new DataBoxEdgeUpdateStatus(property.Value.GetString());
                    continue;
                }
            }
            return new DataBoxEdgeUpdateDetails(updateTitle.Value, Optional.ToNullable(updateSize), Optional.ToNullable(updateType), targetVersion.Value, friendlyVersionNumber.Value, Optional.ToNullable(estimatedInstallTimeInMins), Optional.ToNullable(rebootBehavior), Optional.ToNullable(installationImpact), Optional.ToNullable(status));
        }
    }
}
