// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class ClusterMemoryCapacity : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ClusterFreeMemoryMb))
            {
                writer.WritePropertyName("clusterFreeMemoryMb");
                writer.WriteNumberValue(ClusterFreeMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterUsedMemoryMb))
            {
                writer.WritePropertyName("clusterUsedMemoryMb");
                writer.WriteNumberValue(ClusterUsedMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterFailoverMemoryMb))
            {
                writer.WritePropertyName("clusterFailoverMemoryMb");
                writer.WriteNumberValue(ClusterFailoverMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterFragmentationMemoryMb))
            {
                writer.WritePropertyName("clusterFragmentationMemoryMb");
                writer.WriteNumberValue(ClusterFragmentationMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterHyperVReserveMemoryMb))
            {
                writer.WritePropertyName("clusterHypervReserveMemoryMb");
                writer.WriteNumberValue(ClusterHyperVReserveMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterInfraVmMemoryMb))
            {
                writer.WritePropertyName("clusterInfraVmMemoryMb");
                writer.WriteNumberValue(ClusterInfraVmMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterTotalMemoryMb))
            {
                writer.WritePropertyName("clusterTotalMemoryMb");
                writer.WriteNumberValue(ClusterTotalMemoryMb.Value);
            }
            if (Optional.IsDefined(ClusterNonFailoverVmMb))
            {
                writer.WritePropertyName("clusterNonFailoverVmMb");
                writer.WriteNumberValue(ClusterNonFailoverVmMb.Value);
            }
            if (Optional.IsDefined(ClusterMemoryUsedByVmsMb))
            {
                writer.WritePropertyName("clusterMemoryUsedByVmsMb");
                writer.WriteNumberValue(ClusterMemoryUsedByVmsMb.Value);
            }
            writer.WriteEndObject();
        }

        internal static ClusterMemoryCapacity DeserializeClusterMemoryCapacity(JsonElement element)
        {
            Optional<double> clusterFreeMemoryMb = default;
            Optional<double> clusterUsedMemoryMb = default;
            Optional<double> clusterFailoverMemoryMb = default;
            Optional<double> clusterFragmentationMemoryMb = default;
            Optional<double> clusterHyperVReserveMemoryMb = default;
            Optional<double> clusterInfraVmMemoryMb = default;
            Optional<double> clusterTotalMemoryMb = default;
            Optional<double> clusterNonFailoverVmMb = default;
            Optional<double> clusterMemoryUsedByVmsMb = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clusterFreeMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterFreeMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterUsedMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterUsedMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterFailoverMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterFailoverMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterFragmentationMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterFragmentationMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterHypervReserveMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterHyperVReserveMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterInfraVmMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterInfraVmMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterTotalMemoryMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterTotalMemoryMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterNonFailoverVmMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterNonFailoverVmMb = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("clusterMemoryUsedByVmsMb"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterMemoryUsedByVmsMb = property.Value.GetDouble();
                    continue;
                }
            }
            return new ClusterMemoryCapacity(Optional.ToNullable(clusterFreeMemoryMb), Optional.ToNullable(clusterUsedMemoryMb), Optional.ToNullable(clusterFailoverMemoryMb), Optional.ToNullable(clusterFragmentationMemoryMb), Optional.ToNullable(clusterHyperVReserveMemoryMb), Optional.ToNullable(clusterInfraVmMemoryMb), Optional.ToNullable(clusterTotalMemoryMb), Optional.ToNullable(clusterNonFailoverVmMb), Optional.ToNullable(clusterMemoryUsedByVmsMb));
        }
    }
}
