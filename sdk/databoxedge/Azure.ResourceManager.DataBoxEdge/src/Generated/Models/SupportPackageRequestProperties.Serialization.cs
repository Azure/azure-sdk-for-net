// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class SupportPackageRequestProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MinimumTimeStamp))
            {
                writer.WritePropertyName("minimumTimeStamp"u8);
                writer.WriteStringValue(MinimumTimeStamp.Value, "O");
            }
            if (Optional.IsDefined(MaximumTimeStamp))
            {
                writer.WritePropertyName("maximumTimeStamp"u8);
                writer.WriteStringValue(MaximumTimeStamp.Value, "O");
            }
            if (Optional.IsDefined(Include))
            {
                if (Include != null)
                {
                    writer.WritePropertyName("include"u8);
                    writer.WriteStringValue(Include);
                }
                else
                {
                    writer.WriteNull("include");
                }
            }
            writer.WriteEndObject();
        }

        internal static SupportPackageRequestProperties DeserializeSupportPackageRequestProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> minimumTimeStamp = default;
            Optional<DateTimeOffset> maximumTimeStamp = default;
            Optional<string> include = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("minimumTimeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minimumTimeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("maximumTimeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maximumTimeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("include"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        include = null;
                        continue;
                    }
                    include = property.Value.GetString();
                    continue;
                }
            }
            return new SupportPackageRequestProperties(Optional.ToNullable(minimumTimeStamp), Optional.ToNullable(maximumTimeStamp), include.Value);
        }
    }
}
