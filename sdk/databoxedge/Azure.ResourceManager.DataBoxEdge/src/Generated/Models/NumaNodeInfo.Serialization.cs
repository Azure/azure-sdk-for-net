// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class NumaNodeInfo : IUtf8JsonSerializable, IModelJsonSerializable<NumaNodeInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<NumaNodeInfo>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<NumaNodeInfo>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(NumaNodeIndex))
            {
                writer.WritePropertyName("numaNodeIndex"u8);
                writer.WriteNumberValue(NumaNodeIndex.Value);
            }
            if (Optional.IsDefined(TotalMemoryInMB))
            {
                writer.WritePropertyName("totalMemoryInMb"u8);
                writer.WriteNumberValue(TotalMemoryInMB.Value);
            }
            if (Optional.IsDefined(LogicalCoreCountPerCore))
            {
                writer.WritePropertyName("logicalCoreCountPerCore"u8);
                writer.WriteNumberValue(LogicalCoreCountPerCore.Value);
            }
            if (Optional.IsDefined(EffectiveAvailableMemoryInMB))
            {
                writer.WritePropertyName("effectiveAvailableMemoryInMb"u8);
                writer.WriteNumberValue(EffectiveAvailableMemoryInMB.Value);
            }
            if (Optional.IsCollectionDefined(FreeVCpuIndexesForHpn))
            {
                writer.WritePropertyName("freeVCpuIndexesForHpn"u8);
                writer.WriteStartArray();
                foreach (var item in FreeVCpuIndexesForHpn)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VCpuIndexesForHpn))
            {
                writer.WritePropertyName("vCpuIndexesForHpn"u8);
                writer.WriteStartArray();
                foreach (var item in VCpuIndexesForHpn)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VCpuIndexesForRoot))
            {
                writer.WritePropertyName("vCpuIndexesForRoot"u8);
                writer.WriteStartArray();
                foreach (var item in VCpuIndexesForRoot)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static NumaNodeInfo DeserializeNumaNodeInfo(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> numaNodeIndex = default;
            Optional<long> totalMemoryInMb = default;
            Optional<int> logicalCoreCountPerCore = default;
            Optional<long> effectiveAvailableMemoryInMb = default;
            Optional<IList<int>> freeVCpuIndexesForHpn = default;
            Optional<IList<int>> vCpuIndexesForHpn = default;
            Optional<IList<int>> vCpuIndexesForRoot = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numaNodeIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numaNodeIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalMemoryInMb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalMemoryInMb = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("logicalCoreCountPerCore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logicalCoreCountPerCore = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("effectiveAvailableMemoryInMb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    effectiveAvailableMemoryInMb = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("freeVCpuIndexesForHpn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    freeVCpuIndexesForHpn = array;
                    continue;
                }
                if (property.NameEquals("vCpuIndexesForHpn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    vCpuIndexesForHpn = array;
                    continue;
                }
                if (property.NameEquals("vCpuIndexesForRoot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    vCpuIndexesForRoot = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new NumaNodeInfo(Optional.ToNullable(numaNodeIndex), Optional.ToNullable(totalMemoryInMb), Optional.ToNullable(logicalCoreCountPerCore), Optional.ToNullable(effectiveAvailableMemoryInMb), Optional.ToList(freeVCpuIndexesForHpn), Optional.ToList(vCpuIndexesForHpn), Optional.ToList(vCpuIndexesForRoot), rawData);
        }

        NumaNodeInfo IModelJsonSerializable<NumaNodeInfo>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeNumaNodeInfo(doc.RootElement, options);
        }

        BinaryData IModelSerializable<NumaNodeInfo>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        NumaNodeInfo IModelSerializable<NumaNodeInfo>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeNumaNodeInfo(doc.RootElement, options);
        }

        public static implicit operator RequestContent(NumaNodeInfo model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator NumaNodeInfo(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeNumaNodeInfo(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
