// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class ShareProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                if (Description != null)
                {
                    writer.WritePropertyName("description"u8);
                    writer.WriteStringValue(Description);
                }
                else
                {
                    writer.WriteNull("description");
                }
            }
            writer.WritePropertyName("shareStatus"u8);
            writer.WriteStringValue(ShareStatus.ToString());
            writer.WritePropertyName("monitoringStatus"u8);
            writer.WriteStringValue(MonitoringStatus.ToString());
            if (Optional.IsDefined(AzureContainerInfo))
            {
                writer.WritePropertyName("azureContainerInfo"u8);
                writer.WriteObjectValue(AzureContainerInfo);
            }
            writer.WritePropertyName("accessProtocol"u8);
            writer.WriteStringValue(AccessProtocol.ToString());
            if (Optional.IsCollectionDefined(UserAccessRights))
            {
                if (UserAccessRights != null)
                {
                    writer.WritePropertyName("userAccessRights"u8);
                    writer.WriteStartArray();
                    foreach (var item in UserAccessRights)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("userAccessRights");
                }
            }
            if (Optional.IsCollectionDefined(ClientAccessRights))
            {
                if (ClientAccessRights != null)
                {
                    writer.WritePropertyName("clientAccessRights"u8);
                    writer.WriteStartArray();
                    foreach (var item in ClientAccessRights)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("clientAccessRights");
                }
            }
            if (Optional.IsDefined(RefreshDetails))
            {
                writer.WritePropertyName("refreshDetails"u8);
                writer.WriteObjectValue(RefreshDetails);
            }
            if (Optional.IsDefined(DataPolicy))
            {
                writer.WritePropertyName("dataPolicy"u8);
                writer.WriteStringValue(DataPolicy.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ShareProperties DeserializeShareProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> description = default;
            ShareStatus shareStatus = default;
            DataBoxEdgeShareMonitoringStatus monitoringStatus = default;
            Optional<DataBoxEdgeStorageContainerInfo> azureContainerInfo = default;
            ShareAccessProtocol accessProtocol = default;
            Optional<IList<UserAccessRight>> userAccessRights = default;
            Optional<IList<ClientAccessRight>> clientAccessRights = default;
            Optional<DataBoxEdgeRefreshDetails> refreshDetails = default;
            Optional<IReadOnlyList<DataBoxEdgeMountPointMap>> shareMappings = default;
            Optional<DataBoxEdgeDataPolicy> dataPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        description = null;
                        continue;
                    }
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shareStatus"u8))
                {
                    shareStatus = new ShareStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("monitoringStatus"u8))
                {
                    monitoringStatus = new DataBoxEdgeShareMonitoringStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureContainerInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    azureContainerInfo = DataBoxEdgeStorageContainerInfo.DeserializeDataBoxEdgeStorageContainerInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("accessProtocol"u8))
                {
                    accessProtocol = new ShareAccessProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("userAccessRights"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        userAccessRights = null;
                        continue;
                    }
                    List<UserAccessRight> array = new List<UserAccessRight>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserAccessRight.DeserializeUserAccessRight(item));
                    }
                    userAccessRights = array;
                    continue;
                }
                if (property.NameEquals("clientAccessRights"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        clientAccessRights = null;
                        continue;
                    }
                    List<ClientAccessRight> array = new List<ClientAccessRight>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ClientAccessRight.DeserializeClientAccessRight(item));
                    }
                    clientAccessRights = array;
                    continue;
                }
                if (property.NameEquals("refreshDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    refreshDetails = DataBoxEdgeRefreshDetails.DeserializeDataBoxEdgeRefreshDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("shareMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        shareMappings = null;
                        continue;
                    }
                    List<DataBoxEdgeMountPointMap> array = new List<DataBoxEdgeMountPointMap>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataBoxEdgeMountPointMap.DeserializeDataBoxEdgeMountPointMap(item));
                    }
                    shareMappings = array;
                    continue;
                }
                if (property.NameEquals("dataPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataPolicy = new DataBoxEdgeDataPolicy(property.Value.GetString());
                    continue;
                }
            }
            return new ShareProperties(description.Value, shareStatus, monitoringStatus, azureContainerInfo.Value, accessProtocol, Optional.ToList(userAccessRights), Optional.ToList(clientAccessRights), refreshDetails.Value, Optional.ToList(shareMappings), Optional.ToNullable(dataPolicy));
        }
    }
}
