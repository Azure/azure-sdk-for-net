// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class DeviceCapacityInfoProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TimeStamp))
            {
                writer.WritePropertyName("timeStamp"u8);
                writer.WriteStringValue(TimeStamp.Value, "O");
            }
            if (Optional.IsDefined(ClusterStorageCapacityInfo))
            {
                writer.WritePropertyName("clusterStorageCapacityInfo"u8);
                writer.WriteObjectValue(ClusterStorageCapacityInfo);
            }
            if (Optional.IsDefined(ClusterComputeCapacityInfo))
            {
                writer.WritePropertyName("clusterComputeCapacityInfo"u8);
                writer.WriteObjectValue(ClusterComputeCapacityInfo);
            }
            if (Optional.IsCollectionDefined(NodeCapacityInfos))
            {
                if (NodeCapacityInfos != null)
                {
                    writer.WritePropertyName("nodeCapacityInfos"u8);
                    writer.WriteStartObject();
                    foreach (var item in NodeCapacityInfos)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("nodeCapacityInfos");
                }
            }
            writer.WriteEndObject();
        }

        internal static DeviceCapacityInfoProperties DeserializeDeviceCapacityInfoProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> timeStamp = default;
            Optional<EdgeClusterStorageViewInfo> clusterStorageCapacityInfo = default;
            Optional<EdgeClusterCapacityViewInfo> clusterComputeCapacityInfo = default;
            Optional<IDictionary<string, HostCapacity>> nodeCapacityInfos = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeStamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeStamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("clusterStorageCapacityInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterStorageCapacityInfo = EdgeClusterStorageViewInfo.DeserializeEdgeClusterStorageViewInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("clusterComputeCapacityInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    clusterComputeCapacityInfo = EdgeClusterCapacityViewInfo.DeserializeEdgeClusterCapacityViewInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("nodeCapacityInfos"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nodeCapacityInfos = null;
                        continue;
                    }
                    Dictionary<string, HostCapacity> dictionary = new Dictionary<string, HostCapacity>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, HostCapacity.DeserializeHostCapacity(property0.Value));
                    }
                    nodeCapacityInfos = dictionary;
                    continue;
                }
            }
            return new DeviceCapacityInfoProperties(Optional.ToNullable(timeStamp), clusterStorageCapacityInfo.Value, clusterComputeCapacityInfo.Value, Optional.ToDictionary(nodeCapacityInfos));
        }
    }
}
