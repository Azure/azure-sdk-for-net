// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class AlertProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ErrorDetails))
            {
                writer.WritePropertyName("errorDetails"u8);
                writer.WriteObjectValue(ErrorDetails);
            }
            writer.WriteEndObject();
        }

        internal static AlertProperties DeserializeAlertProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> title = default;
            Optional<string> alertType = default;
            Optional<DateTimeOffset> appearedAtDateTime = default;
            Optional<string> recommendation = default;
            Optional<DataBoxEdgeAlertSeverity> severity = default;
            Optional<DataBoxEdgeAlertErrorDetails> errorDetails = default;
            Optional<IReadOnlyDictionary<string, string>> detailedInformation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("title"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        title = null;
                        continue;
                    }
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("alertType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        alertType = null;
                        continue;
                    }
                    alertType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appearedAtDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appearedAtDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recommendation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recommendation = null;
                        continue;
                    }
                    recommendation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    severity = new DataBoxEdgeAlertSeverity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    errorDetails = DataBoxEdgeAlertErrorDetails.DeserializeDataBoxEdgeAlertErrorDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("detailedInformation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        detailedInformation = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    detailedInformation = dictionary;
                    continue;
                }
            }
            return new AlertProperties(title.Value, alertType.Value, Optional.ToNullable(appearedAtDateTime), recommendation.Value, Optional.ToNullable(severity), errorDetails.Value, Optional.ToDictionary(detailedInformation));
        }
    }
}
