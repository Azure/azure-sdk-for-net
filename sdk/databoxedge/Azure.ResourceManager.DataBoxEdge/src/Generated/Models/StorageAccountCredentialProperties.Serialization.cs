// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBoxEdge.Models
{
    public partial class StorageAccountCredentialProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("alias"u8);
            writer.WriteStringValue(Alias);
            if (Optional.IsDefined(UserName))
            {
                if (UserName != null)
                {
                    writer.WritePropertyName("userName"u8);
                    writer.WriteStringValue(UserName);
                }
                else
                {
                    writer.WriteNull("userName");
                }
            }
            if (Optional.IsDefined(AccountKey))
            {
                writer.WritePropertyName("accountKey"u8);
                writer.WriteObjectValue(AccountKey);
            }
            if (Optional.IsDefined(ConnectionString))
            {
                if (ConnectionString != null)
                {
                    writer.WritePropertyName("connectionString"u8);
                    writer.WriteStringValue(ConnectionString);
                }
                else
                {
                    writer.WriteNull("connectionString");
                }
            }
            writer.WritePropertyName("sslStatus"u8);
            writer.WriteStringValue(SslStatus.ToString());
            if (Optional.IsDefined(BlobDomainName))
            {
                if (BlobDomainName != null)
                {
                    writer.WritePropertyName("blobDomainName"u8);
                    writer.WriteStringValue(BlobDomainName);
                }
                else
                {
                    writer.WriteNull("blobDomainName");
                }
            }
            writer.WritePropertyName("accountType"u8);
            writer.WriteStringValue(AccountType.ToString());
            if (Optional.IsDefined(StorageAccountId))
            {
                if (StorageAccountId != null)
                {
                    writer.WritePropertyName("storageAccountId"u8);
                    writer.WriteStringValue(StorageAccountId);
                }
                else
                {
                    writer.WriteNull("storageAccountId");
                }
            }
            writer.WriteEndObject();
        }

        internal static StorageAccountCredentialProperties DeserializeStorageAccountCredentialProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string @alias = default;
            Optional<string> userName = default;
            Optional<AsymmetricEncryptedSecret> accountKey = default;
            Optional<string> connectionString = default;
            DataBoxEdgeStorageAccountSslStatus sslStatus = default;
            Optional<string> blobDomainName = default;
            DataBoxEdgeStorageAccountType accountType = default;
            Optional<ResourceIdentifier> storageAccountId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alias"u8))
                {
                    @alias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        userName = null;
                        continue;
                    }
                    userName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accountKey = AsymmetricEncryptedSecret.DeserializeAsymmetricEncryptedSecret(property.Value);
                    continue;
                }
                if (property.NameEquals("connectionString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        connectionString = null;
                        continue;
                    }
                    connectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslStatus"u8))
                {
                    sslStatus = new DataBoxEdgeStorageAccountSslStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("blobDomainName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        blobDomainName = null;
                        continue;
                    }
                    blobDomainName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountType"u8))
                {
                    accountType = new DataBoxEdgeStorageAccountType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storageAccountId = null;
                        continue;
                    }
                    storageAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
            }
            return new StorageAccountCredentialProperties(@alias, userName.Value, accountKey.Value, connectionString.Value, sslStatus, blobDomainName.Value, accountType, storageAccountId.Value);
        }
    }
}
