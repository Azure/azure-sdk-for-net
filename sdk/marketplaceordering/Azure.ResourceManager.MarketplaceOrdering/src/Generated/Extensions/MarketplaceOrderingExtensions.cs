// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.MarketplaceOrdering.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.MarketplaceOrdering
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.MarketplaceOrdering. </summary>
    public static partial class MarketplaceOrderingExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of OfferTypePublisherOfferPlanAgreementResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of OfferTypePublisherOfferPlanAgreementResources and their operations over a OfferTypePublisherOfferPlanAgreementResource. </returns>
        public static OfferTypePublisherOfferPlanAgreementCollection GetOfferTypePublisherOfferPlanAgreements(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetOfferTypePublisherOfferPlanAgreements();
        }

        /// <summary>
        /// Get marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<OfferTypePublisherOfferPlanAgreementResource>> GetOfferTypePublisherOfferPlanAgreementAsync(this SubscriptionResource subscriptionResource, OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetOfferTypePublisherOfferPlanAgreements().GetAsync(offerType, publisherId, offerId, planId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<OfferTypePublisherOfferPlanAgreementResource> GetOfferTypePublisherOfferPlanAgreement(this SubscriptionResource subscriptionResource, OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetOfferTypePublisherOfferPlanAgreements().Get(offerType, publisherId, offerId, planId, cancellationToken);
        }

        /// <summary> Gets a collection of AgreementOfferPlanResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AgreementOfferPlanResources and their operations over a AgreementOfferPlanResource. </returns>
        public static AgreementOfferPlanCollection GetAgreementOfferPlans(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAgreementOfferPlans();
        }

        /// <summary>
        /// Get marketplace agreement.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}
        /// Operation Id: MarketplaceAgreements_GetAgreement
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AgreementOfferPlanResource>> GetAgreementOfferPlanAsync(this SubscriptionResource subscriptionResource, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetAgreementOfferPlans().GetAsync(publisherId, offerId, planId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get marketplace agreement.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}
        /// Operation Id: MarketplaceAgreements_GetAgreement
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AgreementOfferPlanResource> GetAgreementOfferPlan(this SubscriptionResource subscriptionResource, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetAgreementOfferPlans().Get(publisherId, offerId, planId, cancellationToken);
        }

        #region OfferTypePublisherOfferPlanAgreementResource
        /// <summary>
        /// Gets an object representing an <see cref="OfferTypePublisherOfferPlanAgreementResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OfferTypePublisherOfferPlanAgreementResource.CreateResourceIdentifier" /> to create an <see cref="OfferTypePublisherOfferPlanAgreementResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OfferTypePublisherOfferPlanAgreementResource" /> object. </returns>
        public static OfferTypePublisherOfferPlanAgreementResource GetOfferTypePublisherOfferPlanAgreementResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                OfferTypePublisherOfferPlanAgreementResource.ValidateResourceId(id);
                return new OfferTypePublisherOfferPlanAgreementResource(client, id);
            }
            );
        }
        #endregion

        #region AgreementOfferPlanResource
        /// <summary>
        /// Gets an object representing an <see cref="AgreementOfferPlanResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AgreementOfferPlanResource.CreateResourceIdentifier" /> to create an <see cref="AgreementOfferPlanResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AgreementOfferPlanResource" /> object. </returns>
        public static AgreementOfferPlanResource GetAgreementOfferPlanResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AgreementOfferPlanResource.ValidateResourceId(id);
                return new AgreementOfferPlanResource(client, id);
            }
            );
        }
        #endregion
    }
}
