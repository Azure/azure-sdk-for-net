// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.MarketplaceOrdering.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.MarketplaceOrdering
{
    /// <summary>
    /// A class representing a collection of <see cref="OfferTypePublisherOfferPlanAgreementResource" /> and their operations.
    /// Each <see cref="OfferTypePublisherOfferPlanAgreementResource" /> in the collection will belong to the same instance of <see cref="SubscriptionResource" />.
    /// To get an <see cref="OfferTypePublisherOfferPlanAgreementCollection" /> instance call the GetOfferTypePublisherOfferPlanAgreements method from an instance of <see cref="SubscriptionResource" />.
    /// </summary>
    public partial class OfferTypePublisherOfferPlanAgreementCollection : ArmCollection
    {
        private readonly ClientDiagnostics _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics;
        private readonly MarketplaceAgreementsRestOperations _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient;

        /// <summary> Initializes a new instance of the <see cref="OfferTypePublisherOfferPlanAgreementCollection"/> class for mocking. </summary>
        protected OfferTypePublisherOfferPlanAgreementCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OfferTypePublisherOfferPlanAgreementCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OfferTypePublisherOfferPlanAgreementCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.MarketplaceOrdering", OfferTypePublisherOfferPlanAgreementResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OfferTypePublisherOfferPlanAgreementResource.ResourceType, out string offerTypePublisherOfferPlanAgreementMarketplaceAgreementsApiVersion);
            _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient = new MarketplaceAgreementsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, offerTypePublisherOfferPlanAgreementMarketplaceAgreementsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Save marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="data"> Parameters supplied to the Create Marketplace Terms operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/>, <paramref name="planId"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<OfferTypePublisherOfferPlanAgreementResource>> CreateOrUpdateAsync(WaitUntil waitUntil, OfferType offerType, string publisherId, string offerId, string planId, AgreementTermData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.CreateAsync(Id.SubscriptionId, offerType, publisherId, offerId, planId, data, cancellationToken).ConfigureAwait(false);
                var operation = new MarketplaceOrderingArmOperation<OfferTypePublisherOfferPlanAgreementResource>(Response.FromValue(new OfferTypePublisherOfferPlanAgreementResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Save marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="data"> Parameters supplied to the Create Marketplace Terms operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/>, <paramref name="planId"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<OfferTypePublisherOfferPlanAgreementResource> CreateOrUpdate(WaitUntil waitUntil, OfferType offerType, string publisherId, string offerId, string planId, AgreementTermData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.Create(Id.SubscriptionId, offerType, publisherId, offerId, planId, data, cancellationToken);
                var operation = new MarketplaceOrderingArmOperation<OfferTypePublisherOfferPlanAgreementResource>(Response.FromValue(new OfferTypePublisherOfferPlanAgreementResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        public virtual async Task<Response<OfferTypePublisherOfferPlanAgreementResource>> GetAsync(OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.Get");
            scope.Start();
            try
            {
                var response = await _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.GetAsync(Id.SubscriptionId, offerType, publisherId, offerId, planId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfferTypePublisherOfferPlanAgreementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get marketplace terms.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        public virtual Response<OfferTypePublisherOfferPlanAgreementResource> Get(OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.Get");
            scope.Start();
            try
            {
                var response = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.Get(Id.SubscriptionId, offerType, publisherId, offerId, planId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OfferTypePublisherOfferPlanAgreementResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.Exists");
            scope.Start();
            try
            {
                var response = await _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.GetAsync(Id.SubscriptionId, offerType, publisherId, offerId, planId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current
        /// Operation Id: MarketplaceAgreements_Get
        /// </summary>
        /// <param name="offerType"> Offer Type, currently only virtualmachine type is supported. </param>
        /// <param name="publisherId"> Publisher identifier string of image being deployed. </param>
        /// <param name="offerId"> Offer identifier string of image being deployed. </param>
        /// <param name="planId"> Plan identifier string of image being deployed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/>, <paramref name="offerId"/> or <paramref name="planId"/> is null. </exception>
        public virtual Response<bool> Exists(OfferType offerType, string publisherId, string offerId, string planId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publisherId, nameof(publisherId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));
            Argument.AssertNotNullOrEmpty(planId, nameof(planId));

            using var scope = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsClientDiagnostics.CreateScope("OfferTypePublisherOfferPlanAgreementCollection.Exists");
            scope.Start();
            try
            {
                var response = _offerTypePublisherOfferPlanAgreementMarketplaceAgreementsRestClient.Get(Id.SubscriptionId, offerType, publisherId, offerId, planId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
