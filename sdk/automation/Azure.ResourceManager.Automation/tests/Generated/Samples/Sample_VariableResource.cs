// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation
{
    public partial class Sample_VariableResource
    {
        // Update a variable
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateAVariable()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateVariable_patch.json
            // this example is just showing the usage of "Variable_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VariableResource created on azure
            // for more information of creating VariableResource, please refer to the document of VariableResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "sampleAccount9";
            string variableName = "sampleVariable";
            ResourceIdentifier variableResourceId = VariableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, variableName);
            VariableResource variable = client.GetVariableResource(variableResourceId);

            // invoke the operation
            VariablePatch patch = new VariablePatch()
            {
                Name = "sampleVariable",
                Value = "\"ComputerName3.domain.com\"",
            };
            VariableResource result = await variable.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VariableData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a variable
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAVariable()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteVariable.json
            // this example is just showing the usage of "Variable_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VariableResource created on azure
            // for more information of creating VariableResource, please refer to the document of VariableResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "sampleAccount9";
            string variableName = "sampleVariable";
            ResourceIdentifier variableResourceId = VariableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, variableName);
            VariableResource variable = client.GetVariableResource(variableResourceId);

            // invoke the operation
            await variable.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get a variable
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAVariable()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getVariable.json
            // this example is just showing the usage of "Variable_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VariableResource created on azure
            // for more information of creating VariableResource, please refer to the document of VariableResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "sampleAccount9";
            string variableName = "sampleVariable";
            ResourceIdentifier variableResourceId = VariableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, variableName);
            VariableResource variable = client.GetVariableResource(variableResourceId);

            // invoke the operation
            VariableResource result = await variable.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VariableData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
