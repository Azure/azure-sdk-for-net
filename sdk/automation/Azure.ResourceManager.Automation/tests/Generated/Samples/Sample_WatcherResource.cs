// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation
{
    public partial class Sample_WatcherResource
    {
        // Get watcher
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetWatcher()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getWatcher.json
            // this example is just showing the usage of "Watcher_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WatcherResource created on azure
            // for more information of creating WatcherResource, please refer to the document of WatcherResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyTestAutomationAccount";
            string watcherName = "MyTestWatcher";
            ResourceIdentifier watcherResourceId = WatcherResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, watcherName);
            WatcherResource watcher = client.GetWatcherResource(watcherResourceId);

            // invoke the operation
            WatcherResource result = await watcher.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WatcherData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update watcher
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateWatcher()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateWatcher.json
            // this example is just showing the usage of "Watcher_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WatcherResource created on azure
            // for more information of creating WatcherResource, please refer to the document of WatcherResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyTestAutomationAccount";
            string watcherName = "MyTestWatcher";
            ResourceIdentifier watcherResourceId = WatcherResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, watcherName);
            WatcherResource watcher = client.GetWatcherResource(watcherResourceId);

            // invoke the operation
            WatcherPatch patch = new WatcherPatch()
            {
                Name = "MyTestWatcher",
                ExecutionFrequencyInSeconds = 600,
            };
            WatcherResource result = await watcher.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WatcherData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete watcher
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteWatcher()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteWatcher.json
            // this example is just showing the usage of "Watcher_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WatcherResource created on azure
            // for more information of creating WatcherResource, please refer to the document of WatcherResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyTestAutomationAccount";
            string watcherName = "MyTestWatcher";
            ResourceIdentifier watcherResourceId = WatcherResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, watcherName);
            WatcherResource watcher = client.GetWatcherResource(watcherResourceId);

            // invoke the operation
            await watcher.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Start Watcher
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_StartWatcher()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/startWatcher.json
            // this example is just showing the usage of "Watcher_Start" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WatcherResource created on azure
            // for more information of creating WatcherResource, please refer to the document of WatcherResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyTestAutomationAccount";
            string watcherName = "MyTestWatcher";
            ResourceIdentifier watcherResourceId = WatcherResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, watcherName);
            WatcherResource watcher = client.GetWatcherResource(watcherResourceId);

            // invoke the operation
            await watcher.StartAsync();

            Console.WriteLine($"Succeeded");
        }

        // Start Watcher
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_StartWatcher()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/stopWatcher.json
            // this example is just showing the usage of "Watcher_Stop" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WatcherResource created on azure
            // for more information of creating WatcherResource, please refer to the document of WatcherResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "MyTestAutomationAccount";
            string watcherName = "MyTestWatcher";
            ResourceIdentifier watcherResourceId = WatcherResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, watcherName);
            WatcherResource watcher = client.GetWatcherResource(watcherResourceId);

            // invoke the operation
            await watcher.StopAsync();

            Console.WriteLine($"Succeeded");
        }
    }
}
