// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation
{
    public partial class Sample_WebhookResource
    {
        // Delete webhook
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteWebhook()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/deleteWebhook.json
            // this example is just showing the usage of "Webhook_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WebhookResource created on azure
            // for more information of creating WebhookResource, please refer to the document of WebhookResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount33";
            string webhookName = "TestWebhook";
            ResourceIdentifier webhookResourceId = WebhookResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, webhookName);
            WebhookResource webhook = client.GetWebhookResource(webhookResourceId);

            // invoke the operation
            await webhook.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get webhook
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetWebhook()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/getWebhook.json
            // this example is just showing the usage of "Webhook_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WebhookResource created on azure
            // for more information of creating WebhookResource, please refer to the document of WebhookResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount33";
            string webhookName = "TestWebhook";
            ResourceIdentifier webhookResourceId = WebhookResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, webhookName);
            WebhookResource webhook = client.GetWebhookResource(webhookResourceId);

            // invoke the operation
            WebhookResource result = await webhook.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebhookData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update webhook
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateWebhook()
        {
            // Generated from example definition: specification/automation/resource-manager/Microsoft.Automation/stable/2015-10-31/examples/updateWebhook.json
            // this example is just showing the usage of "Webhook_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WebhookResource created on azure
            // for more information of creating WebhookResource, please refer to the document of WebhookResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg";
            string automationAccountName = "myAutomationAccount33";
            string webhookName = "TestWebhook";
            ResourceIdentifier webhookResourceId = WebhookResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, automationAccountName, webhookName);
            WebhookResource webhook = client.GetWebhookResource(webhookResourceId);

            // invoke the operation
            WebhookPatch patch = new WebhookPatch()
            {
                Name = "TestWebhook",
                IsEnabled = false,
                Description = "updated webhook",
            };
            WebhookResource result = await webhook.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WebhookData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
