// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation
{
    /// <summary>
    /// A class representing a collection of <see cref="AutomationAccountPython3PackageResource" /> and their operations.
    /// Each <see cref="AutomationAccountPython3PackageResource" /> in the collection will belong to the same instance of <see cref="AutomationAccountResource" />.
    /// To get an <see cref="AutomationAccountPython3PackageCollection" /> instance call the GetAutomationAccountPython3Packages method from an instance of <see cref="AutomationAccountResource" />.
    /// </summary>
    public partial class AutomationAccountPython3PackageCollection : ArmCollection, IEnumerable<AutomationAccountPython3PackageResource>, IAsyncEnumerable<AutomationAccountPython3PackageResource>
    {
        private readonly ClientDiagnostics _automationAccountPython3PackagePython3PackageClientDiagnostics;
        private readonly Python3PackageRestOperations _automationAccountPython3PackagePython3PackageRestClient;

        /// <summary> Initializes a new instance of the <see cref="AutomationAccountPython3PackageCollection"/> class for mocking. </summary>
        protected AutomationAccountPython3PackageCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AutomationAccountPython3PackageCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AutomationAccountPython3PackageCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _automationAccountPython3PackagePython3PackageClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Automation", AutomationAccountPython3PackageResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AutomationAccountPython3PackageResource.ResourceType, out string automationAccountPython3PackagePython3PackageApiVersion);
            _automationAccountPython3PackagePython3PackageRestClient = new Python3PackageRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, automationAccountPython3PackagePython3PackageApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != AutomationAccountResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, AutomationAccountResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or Update the python 3 package identified by package name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="packageName"> The name of python package. </param>
        /// <param name="pythonPackageCreateParameters"> The create or update parameters for python package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> or <paramref name="pythonPackageCreateParameters"/> is null. </exception>
        public virtual async Task<ArmOperation<AutomationAccountPython3PackageResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string packageName, PythonPackageCreateParameters pythonPackageCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));
            Argument.AssertNotNull(pythonPackageCreateParameters, nameof(pythonPackageCreateParameters));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _automationAccountPython3PackagePython3PackageRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, pythonPackageCreateParameters, cancellationToken).ConfigureAwait(false);
                var operation = new AutomationArmOperation<AutomationAccountPython3PackageResource>(Response.FromValue(new AutomationAccountPython3PackageResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or Update the python 3 package identified by package name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="packageName"> The name of python package. </param>
        /// <param name="pythonPackageCreateParameters"> The create or update parameters for python package. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> or <paramref name="pythonPackageCreateParameters"/> is null. </exception>
        public virtual ArmOperation<AutomationAccountPython3PackageResource> CreateOrUpdate(WaitUntil waitUntil, string packageName, PythonPackageCreateParameters pythonPackageCreateParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));
            Argument.AssertNotNull(pythonPackageCreateParameters, nameof(pythonPackageCreateParameters));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _automationAccountPython3PackagePython3PackageRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, pythonPackageCreateParameters, cancellationToken);
                var operation = new AutomationArmOperation<AutomationAccountPython3PackageResource>(Response.FromValue(new AutomationAccountPython3PackageResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the python 3 package identified by package name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_Get
        /// </summary>
        /// <param name="packageName"> The python package name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> is null. </exception>
        public virtual async Task<Response<AutomationAccountPython3PackageResource>> GetAsync(string packageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.Get");
            scope.Start();
            try
            {
                var response = await _automationAccountPython3PackagePython3PackageRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AutomationAccountPython3PackageResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the python 3 package identified by package name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_Get
        /// </summary>
        /// <param name="packageName"> The python package name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> is null. </exception>
        public virtual Response<AutomationAccountPython3PackageResource> Get(string packageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.Get");
            scope.Start();
            try
            {
                var response = _automationAccountPython3PackagePython3PackageRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AutomationAccountPython3PackageResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve a list of python 3 packages.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages
        /// Operation Id: Python3Package_ListByAutomationAccount
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutomationAccountPython3PackageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutomationAccountPython3PackageResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AutomationAccountPython3PackageResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _automationAccountPython3PackagePython3PackageRestClient.ListByAutomationAccountAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationAccountPython3PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutomationAccountPython3PackageResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _automationAccountPython3PackagePython3PackageRestClient.ListByAutomationAccountNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationAccountPython3PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve a list of python 3 packages.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages
        /// Operation Id: Python3Package_ListByAutomationAccount
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutomationAccountPython3PackageResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutomationAccountPython3PackageResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AutomationAccountPython3PackageResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _automationAccountPython3PackagePython3PackageRestClient.ListByAutomationAccount(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationAccountPython3PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutomationAccountPython3PackageResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _automationAccountPython3PackagePython3PackageRestClient.ListByAutomationAccountNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationAccountPython3PackageResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_Get
        /// </summary>
        /// <param name="packageName"> The python package name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string packageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.Exists");
            scope.Start();
            try
            {
                var response = await _automationAccountPython3PackagePython3PackageRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/python3Packages/{packageName}
        /// Operation Id: Python3Package_Get
        /// </summary>
        /// <param name="packageName"> The python package name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="packageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="packageName"/> is null. </exception>
        public virtual Response<bool> Exists(string packageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(packageName, nameof(packageName));

            using var scope = _automationAccountPython3PackagePython3PackageClientDiagnostics.CreateScope("AutomationAccountPython3PackageCollection.Exists");
            scope.Start();
            try
            {
                var response = _automationAccountPython3PackagePython3PackageRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, packageName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AutomationAccountPython3PackageResource> IEnumerable<AutomationAccountPython3PackageResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AutomationAccountPython3PackageResource> IAsyncEnumerable<AutomationAccountPython3PackageResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
