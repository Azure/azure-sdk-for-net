// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Automation.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Automation
{
    /// <summary> A class representing the Schedule data model. </summary>
    public partial class ScheduleData : ResourceData
    {
        /// <summary> Initializes a new instance of ScheduleData. </summary>
        public ScheduleData()
        {
        }

        /// <summary> Initializes a new instance of ScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="startOn"> Gets or sets the start time of the schedule. </param>
        /// <param name="startTimeOffsetMinutes"> Gets the start time&apos;s offset in minutes. </param>
        /// <param name="expiryOn"> Gets or sets the end time of the schedule. </param>
        /// <param name="expiryTimeOffsetMinutes"> Gets or sets the expiry time&apos;s offset in minutes. </param>
        /// <param name="isEnabled"> Gets or sets a value indicating whether this schedule is enabled. </param>
        /// <param name="nextRun"> Gets or sets the next run time of the schedule. </param>
        /// <param name="nextRunOffsetMinutes"> Gets or sets the next run time&apos;s offset in minutes. </param>
        /// <param name="interval"> Gets or sets the interval of the schedule. </param>
        /// <param name="frequency"> Gets or sets the frequency of the schedule. </param>
        /// <param name="timeZone"> Gets or sets the time zone of the schedule. </param>
        /// <param name="advancedSchedule"> Gets or sets the advanced schedule. </param>
        /// <param name="createdOn"> Gets or sets the creation time. </param>
        /// <param name="lastModifiedOn"> Gets or sets the last modified time. </param>
        /// <param name="description"> Gets or sets the description. </param>
        internal ScheduleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DateTimeOffset? startOn, double? startTimeOffsetMinutes, DateTimeOffset? expiryOn, double? expiryTimeOffsetMinutes, bool? isEnabled, DateTimeOffset? nextRun, double? nextRunOffsetMinutes, BinaryData interval, ScheduleFrequency? frequency, string timeZone, AdvancedSchedule advancedSchedule, DateTimeOffset? createdOn, DateTimeOffset? lastModifiedOn, string description) : base(id, name, resourceType, systemData)
        {
            StartOn = startOn;
            StartTimeOffsetMinutes = startTimeOffsetMinutes;
            ExpiryOn = expiryOn;
            ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutes;
            IsEnabled = isEnabled;
            NextRun = nextRun;
            NextRunOffsetMinutes = nextRunOffsetMinutes;
            Interval = interval;
            Frequency = frequency;
            TimeZone = timeZone;
            AdvancedSchedule = advancedSchedule;
            CreatedOn = createdOn;
            LastModifiedOn = lastModifiedOn;
            Description = description;
        }

        /// <summary> Gets or sets the start time of the schedule. </summary>
        public DateTimeOffset? StartOn { get; set; }
        /// <summary> Gets the start time&apos;s offset in minutes. </summary>
        public double? StartTimeOffsetMinutes { get; }
        /// <summary> Gets or sets the end time of the schedule. </summary>
        public DateTimeOffset? ExpiryOn { get; set; }
        /// <summary> Gets or sets the expiry time&apos;s offset in minutes. </summary>
        public double? ExpiryTimeOffsetMinutes { get; set; }
        /// <summary> Gets or sets a value indicating whether this schedule is enabled. </summary>
        public bool? IsEnabled { get; set; }
        /// <summary> Gets or sets the next run time of the schedule. </summary>
        public DateTimeOffset? NextRun { get; set; }
        /// <summary> Gets or sets the next run time&apos;s offset in minutes. </summary>
        public double? NextRunOffsetMinutes { get; set; }
        /// <summary>
        /// Gets or sets the interval of the schedule.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Interval { get; set; }
        /// <summary> Gets or sets the frequency of the schedule. </summary>
        public ScheduleFrequency? Frequency { get; set; }
        /// <summary> Gets or sets the time zone of the schedule. </summary>
        public string TimeZone { get; set; }
        /// <summary> Gets or sets the advanced schedule. </summary>
        public AdvancedSchedule AdvancedSchedule { get; set; }
        /// <summary> Gets or sets the creation time. </summary>
        public DateTimeOffset? CreatedOn { get; set; }
        /// <summary> Gets or sets the last modified time. </summary>
        public DateTimeOffset? LastModifiedOn { get; set; }
        /// <summary> Gets or sets the description. </summary>
        public string Description { get; set; }
    }
}
