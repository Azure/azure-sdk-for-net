// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Automation.Models;

namespace Azure.ResourceManager.Automation
{
    /// <summary>
    /// A Class representing a SourceControl along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="SourceControlResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetSourceControlResource method.
    /// Otherwise you can get one from its parent resource <see cref="AutomationAccountResource" /> using the GetSourceControl method.
    /// </summary>
    public partial class SourceControlResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SourceControlResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string automationAccountName, string sourceControlName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _sourceControlClientDiagnostics;
        private readonly SourceControlRestOperations _sourceControlRestClient;
        private readonly ClientDiagnostics _sourceControlSyncJobClientDiagnostics;
        private readonly SourceControlSyncJobRestOperations _sourceControlSyncJobRestClient;
        private readonly ClientDiagnostics _sourceControlSyncJobStreamsClientDiagnostics;
        private readonly SourceControlSyncJobStreamsRestOperations _sourceControlSyncJobStreamsRestClient;
        private readonly SourceControlData _data;

        /// <summary> Initializes a new instance of the <see cref="SourceControlResource"/> class for mocking. </summary>
        protected SourceControlResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SourceControlResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SourceControlResource(ArmClient client, SourceControlData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SourceControlResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SourceControlResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _sourceControlClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Automation", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string sourceControlApiVersion);
            _sourceControlRestClient = new SourceControlRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sourceControlApiVersion);
            _sourceControlSyncJobClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Automation", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _sourceControlSyncJobRestClient = new SourceControlSyncJobRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _sourceControlSyncJobStreamsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Automation", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _sourceControlSyncJobStreamsRestClient = new SourceControlSyncJobStreamsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Automation/automationAccounts/sourceControls";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual SourceControlData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Retrieve the source control identified by source control name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SourceControlResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Get");
            scope.Start();
            try
            {
                var response = await _sourceControlRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SourceControlResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the source control identified by source control name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SourceControlResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Get");
            scope.Start();
            try
            {
                var response = _sourceControlRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SourceControlResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Delete");
            scope.Start();
            try
            {
                var response = await _sourceControlRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new AutomationArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Delete");
            scope.Start();
            try
            {
                var response = _sourceControlRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new AutomationArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Update
        /// </summary>
        /// <param name="patch"> The parameters supplied to the update source control operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<SourceControlResource>> UpdateAsync(SourceControlPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Update");
            scope.Start();
            try
            {
                var response = await _sourceControlRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SourceControlResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}
        /// Operation Id: SourceControl_Update
        /// </summary>
        /// <param name="patch"> The parameters supplied to the update source control operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<SourceControlResource> Update(SourceControlPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _sourceControlClientDiagnostics.CreateScope("SourceControlResource.Update");
            scope.Start();
            try
            {
                var response = _sourceControlRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken);
                return Response.FromValue(new SourceControlResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates the sync job for a source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}
        /// Operation Id: SourceControlSyncJob_Create
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="content"> The parameters supplied to the create source control sync job operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<SourceControlSyncJob>> CreateSourceControlSyncJobAsync(Guid sourceControlSyncJobId, SourceControlSyncJobCreateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.CreateSourceControlSyncJob");
            scope.Start();
            try
            {
                var response = await _sourceControlSyncJobRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates the sync job for a source control.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}
        /// Operation Id: SourceControlSyncJob_Create
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="content"> The parameters supplied to the create source control sync job operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<SourceControlSyncJob> CreateSourceControlSyncJob(Guid sourceControlSyncJobId, SourceControlSyncJobCreateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.CreateSourceControlSyncJob");
            scope.Start();
            try
            {
                var response = _sourceControlSyncJobRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the source control sync job identified by job id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}
        /// Operation Id: SourceControlSyncJob_Get
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SourceControlSyncJobById>> GetSourceControlSyncJobAsync(Guid sourceControlSyncJobId, CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJob");
            scope.Start();
            try
            {
                var response = await _sourceControlSyncJobRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve the source control sync job identified by job id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}
        /// Operation Id: SourceControlSyncJob_Get
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SourceControlSyncJobById> GetSourceControlSyncJob(Guid sourceControlSyncJobId, CancellationToken cancellationToken = default)
        {
            using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJob");
            scope.Start();
            try
            {
                var response = _sourceControlSyncJobRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve a list of source control sync jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs
        /// Operation Id: SourceControlSyncJob_ListByAutomationAccount
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SourceControlSyncJob" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SourceControlSyncJob> GetSourceControlSyncJobsByAutomationAccountAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SourceControlSyncJob>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobsByAutomationAccount");
                scope.Start();
                try
                {
                    var response = await _sourceControlSyncJobRestClient.ListByAutomationAccountAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SourceControlSyncJob>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobsByAutomationAccount");
                scope.Start();
                try
                {
                    var response = await _sourceControlSyncJobRestClient.ListByAutomationAccountNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve a list of source control sync jobs.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs
        /// Operation Id: SourceControlSyncJob_ListByAutomationAccount
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SourceControlSyncJob" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SourceControlSyncJob> GetSourceControlSyncJobsByAutomationAccount(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SourceControlSyncJob> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobsByAutomationAccount");
                scope.Start();
                try
                {
                    var response = _sourceControlSyncJobRestClient.ListByAutomationAccount(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SourceControlSyncJob> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobsByAutomationAccount");
                scope.Start();
                try
                {
                    var response = _sourceControlSyncJobRestClient.ListByAutomationAccountNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve a list of sync job streams identified by sync job id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams
        /// Operation Id: SourceControlSyncJobStreams_ListBySyncJob
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SourceControlSyncJobStream" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SourceControlSyncJobStream> GetSourceControlSyncJobStreamsBySyncJobAsync(Guid sourceControlSyncJobId, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SourceControlSyncJobStream>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStreamsBySyncJob");
                scope.Start();
                try
                {
                    var response = await _sourceControlSyncJobStreamsRestClient.ListBySyncJobAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SourceControlSyncJobStream>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStreamsBySyncJob");
                scope.Start();
                try
                {
                    var response = await _sourceControlSyncJobStreamsRestClient.ListBySyncJobNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve a list of sync job streams identified by sync job id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams
        /// Operation Id: SourceControlSyncJobStreams_ListBySyncJob
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SourceControlSyncJobStream" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SourceControlSyncJobStream> GetSourceControlSyncJobStreamsBySyncJob(Guid sourceControlSyncJobId, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SourceControlSyncJobStream> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStreamsBySyncJob");
                scope.Start();
                try
                {
                    var response = _sourceControlSyncJobStreamsRestClient.ListBySyncJob(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SourceControlSyncJobStream> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStreamsBySyncJob");
                scope.Start();
                try
                {
                    var response = _sourceControlSyncJobStreamsRestClient.ListBySyncJobNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Retrieve a sync job stream identified by stream id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams/{streamId}
        /// Operation Id: SourceControlSyncJobStreams_Get
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="streamId"> The id of the sync job stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="streamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="streamId"/> is null. </exception>
        public virtual async Task<Response<SourceControlSyncJobStreamById>> GetSourceControlSyncJobStreamAsync(Guid sourceControlSyncJobId, string streamId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(streamId, nameof(streamId));

            using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStream");
            scope.Start();
            try
            {
                var response = await _sourceControlSyncJobStreamsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, streamId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve a sync job stream identified by stream id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}/sourceControlSyncJobs/{sourceControlSyncJobId}/streams/{streamId}
        /// Operation Id: SourceControlSyncJobStreams_Get
        /// </summary>
        /// <param name="sourceControlSyncJobId"> The source control sync job id. </param>
        /// <param name="streamId"> The id of the sync job stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="streamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="streamId"/> is null. </exception>
        public virtual Response<SourceControlSyncJobStreamById> GetSourceControlSyncJobStream(Guid sourceControlSyncJobId, string streamId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(streamId, nameof(streamId));

            using var scope = _sourceControlSyncJobStreamsClientDiagnostics.CreateScope("SourceControlResource.GetSourceControlSyncJobStream");
            scope.Start();
            try
            {
                var response = _sourceControlSyncJobStreamsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, sourceControlSyncJobId, streamId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
