// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Automation.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Automation
{
    public partial class HybridRunbookWorkerData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(IP))
            {
                writer.WritePropertyName("ip"u8);
                writer.WriteStringValue(IP);
            }
            if (Optional.IsDefined(RegisteredOn))
            {
                writer.WritePropertyName("registeredDateTime"u8);
                writer.WriteStringValue(RegisteredOn.Value, "O");
            }
            if (Optional.IsDefined(LastSeenOn))
            {
                writer.WritePropertyName("lastSeenDateTime"u8);
                writer.WriteStringValue(LastSeenOn.Value, "O");
            }
            if (Optional.IsDefined(VmResourceId))
            {
                writer.WritePropertyName("vmResourceId"u8);
                writer.WriteStringValue(VmResourceId);
            }
            if (Optional.IsDefined(WorkerType))
            {
                writer.WritePropertyName("workerType"u8);
                writer.WriteStringValue(WorkerType.Value.ToString());
            }
            if (Optional.IsDefined(WorkerName))
            {
                writer.WritePropertyName("workerName"u8);
                writer.WriteStringValue(WorkerName);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static HybridRunbookWorkerData DeserializeHybridRunbookWorkerData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> ip = default;
            Optional<DateTimeOffset> registeredDateTime = default;
            Optional<DateTimeOffset> lastSeenDateTime = default;
            Optional<ResourceIdentifier> vmResourceId = default;
            Optional<HybridWorkerType> workerType = default;
            Optional<string> workerName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ip"u8))
                        {
                            ip = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("registeredDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            registeredDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastSeenDateTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastSeenDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("vmResourceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmResourceId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("workerType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            workerType = new HybridWorkerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("workerName"u8))
                        {
                            workerName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HybridRunbookWorkerData(id, name, type, systemData.Value, ip.Value, Optional.ToNullable(registeredDateTime), Optional.ToNullable(lastSeenDateTime), vmResourceId.Value, Optional.ToNullable(workerType), workerName.Value);
        }
    }
}
