// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Automation.Models
{
    /// <summary> Gets or sets the status of the job. </summary>
    public readonly partial struct JobStatus : IEquatable<JobStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NewValue = "New";
        private const string ActivatingValue = "Activating";
        private const string RunningValue = "Running";
        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";
        private const string StoppedValue = "Stopped";
        private const string BlockedValue = "Blocked";
        private const string SuspendedValue = "Suspended";
        private const string DisconnectedValue = "Disconnected";
        private const string SuspendingValue = "Suspending";
        private const string StoppingValue = "Stopping";
        private const string ResumingValue = "Resuming";
        private const string RemovingValue = "Removing";

        /// <summary> New. </summary>
        public static JobStatus New { get; } = new JobStatus(NewValue);
        /// <summary> Activating. </summary>
        public static JobStatus Activating { get; } = new JobStatus(ActivatingValue);
        /// <summary> Running. </summary>
        public static JobStatus Running { get; } = new JobStatus(RunningValue);
        /// <summary> Completed. </summary>
        public static JobStatus Completed { get; } = new JobStatus(CompletedValue);
        /// <summary> Failed. </summary>
        public static JobStatus Failed { get; } = new JobStatus(FailedValue);
        /// <summary> Stopped. </summary>
        public static JobStatus Stopped { get; } = new JobStatus(StoppedValue);
        /// <summary> Blocked. </summary>
        public static JobStatus Blocked { get; } = new JobStatus(BlockedValue);
        /// <summary> Suspended. </summary>
        public static JobStatus Suspended { get; } = new JobStatus(SuspendedValue);
        /// <summary> Disconnected. </summary>
        public static JobStatus Disconnected { get; } = new JobStatus(DisconnectedValue);
        /// <summary> Suspending. </summary>
        public static JobStatus Suspending { get; } = new JobStatus(SuspendingValue);
        /// <summary> Stopping. </summary>
        public static JobStatus Stopping { get; } = new JobStatus(StoppingValue);
        /// <summary> Resuming. </summary>
        public static JobStatus Resuming { get; } = new JobStatus(ResumingValue);
        /// <summary> Removing. </summary>
        public static JobStatus Removing { get; } = new JobStatus(RemovingValue);
        /// <summary> Determines if two <see cref="JobStatus"/> values are the same. </summary>
        public static bool operator ==(JobStatus left, JobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobStatus"/> values are not the same. </summary>
        public static bool operator !=(JobStatus left, JobStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobStatus"/>. </summary>
        public static implicit operator JobStatus(string value) => new JobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
