// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Automation.Models
{
    /// <summary> The CountType. </summary>
    public readonly partial struct CountType : IEquatable<CountType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CountType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StatusValue = "status";
        private const string NodeconfigurationValue = "nodeconfiguration";

        /// <summary> status. </summary>
        public static CountType Status { get; } = new CountType(StatusValue);
        /// <summary> nodeconfiguration. </summary>
        public static CountType Nodeconfiguration { get; } = new CountType(NodeconfigurationValue);
        /// <summary> Determines if two <see cref="CountType"/> values are the same. </summary>
        public static bool operator ==(CountType left, CountType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CountType"/> values are not the same. </summary>
        public static bool operator !=(CountType left, CountType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CountType"/>. </summary>
        public static implicit operator CountType(string value) => new CountType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CountType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CountType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
