// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Automation.Models
{
    public partial class SoftwareUpdateConfigurationSpecificProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("operatingSystem");
            writer.WriteStringValue(OperatingSystem.ToSerialString());
            if (Optional.IsDefined(Windows))
            {
                writer.WritePropertyName("windows");
                writer.WriteObjectValue(Windows);
            }
            if (Optional.IsDefined(Linux))
            {
                writer.WritePropertyName("linux");
                writer.WriteObjectValue(Linux);
            }
            if (Optional.IsDefined(Duration))
            {
                writer.WritePropertyName("duration");
                writer.WriteStringValue(Duration.Value, "P");
            }
            if (Optional.IsCollectionDefined(AzureVirtualMachines))
            {
                writer.WritePropertyName("azureVirtualMachines");
                writer.WriteStartArray();
                foreach (var item in AzureVirtualMachines)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NonAzureComputerNames))
            {
                writer.WritePropertyName("nonAzureComputerNames");
                writer.WriteStartArray();
                foreach (var item in NonAzureComputerNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Targets))
            {
                writer.WritePropertyName("targets");
                writer.WriteObjectValue(Targets);
            }
            writer.WriteEndObject();
        }

        internal static SoftwareUpdateConfigurationSpecificProperties DeserializeSoftwareUpdateConfigurationSpecificProperties(JsonElement element)
        {
            SoftwareUpdateConfigurationOperatingSystemType operatingSystem = default;
            Optional<WindowsUpdateConfigurationProperties> windows = default;
            Optional<LinuxUpdateConfigurationProperties> linux = default;
            Optional<TimeSpan> duration = default;
            Optional<IList<string>> azureVirtualMachines = default;
            Optional<IList<string>> nonAzureComputerNames = default;
            Optional<SoftwareUpdateConfigurationTargetProperties> targets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("operatingSystem"))
                {
                    operatingSystem = property.Value.GetString().ToSoftwareUpdateConfigurationOperatingSystemType();
                    continue;
                }
                if (property.NameEquals("windows"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windows = WindowsUpdateConfigurationProperties.DeserializeWindowsUpdateConfigurationProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("linux"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    linux = LinuxUpdateConfigurationProperties.DeserializeLinuxUpdateConfigurationProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("duration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    duration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("azureVirtualMachines"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    azureVirtualMachines = array;
                    continue;
                }
                if (property.NameEquals("nonAzureComputerNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    nonAzureComputerNames = array;
                    continue;
                }
                if (property.NameEquals("targets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    targets = SoftwareUpdateConfigurationTargetProperties.DeserializeSoftwareUpdateConfigurationTargetProperties(property.Value);
                    continue;
                }
            }
            return new SoftwareUpdateConfigurationSpecificProperties(operatingSystem, windows.Value, linux.Value, Optional.ToNullable(duration), Optional.ToList(azureVirtualMachines), Optional.ToList(nonAzureComputerNames), targets.Value);
        }
    }
}
