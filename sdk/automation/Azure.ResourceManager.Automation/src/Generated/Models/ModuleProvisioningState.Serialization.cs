// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Automation.Models
{
    internal static partial class ModuleProvisioningStateExtensions
    {
        public static string ToSerialString(this ModuleProvisioningState value) => value switch
        {
            ModuleProvisioningState.Created => "Created",
            ModuleProvisioningState.Creating => "Creating",
            ModuleProvisioningState.StartingImportModuleRunbook => "StartingImportModuleRunbook",
            ModuleProvisioningState.RunningImportModuleRunbook => "RunningImportModuleRunbook",
            ModuleProvisioningState.ContentRetrieved => "ContentRetrieved",
            ModuleProvisioningState.ContentDownloaded => "ContentDownloaded",
            ModuleProvisioningState.ContentValidated => "ContentValidated",
            ModuleProvisioningState.ConnectionTypeImported => "ConnectionTypeImported",
            ModuleProvisioningState.ContentStored => "ContentStored",
            ModuleProvisioningState.ModuleDataStored => "ModuleDataStored",
            ModuleProvisioningState.ActivitiesStored => "ActivitiesStored",
            ModuleProvisioningState.ModuleImportRunbookComplete => "ModuleImportRunbookComplete",
            ModuleProvisioningState.Succeeded => "Succeeded",
            ModuleProvisioningState.Failed => "Failed",
            ModuleProvisioningState.Cancelled => "Cancelled",
            ModuleProvisioningState.Updating => "Updating",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ModuleProvisioningState value.")
        };

        public static ModuleProvisioningState ToModuleProvisioningState(this string value)
        {
            if (string.Equals(value, "Created", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Created;
            if (string.Equals(value, "Creating", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Creating;
            if (string.Equals(value, "StartingImportModuleRunbook", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.StartingImportModuleRunbook;
            if (string.Equals(value, "RunningImportModuleRunbook", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.RunningImportModuleRunbook;
            if (string.Equals(value, "ContentRetrieved", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ContentRetrieved;
            if (string.Equals(value, "ContentDownloaded", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ContentDownloaded;
            if (string.Equals(value, "ContentValidated", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ContentValidated;
            if (string.Equals(value, "ConnectionTypeImported", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ConnectionTypeImported;
            if (string.Equals(value, "ContentStored", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ContentStored;
            if (string.Equals(value, "ModuleDataStored", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ModuleDataStored;
            if (string.Equals(value, "ActivitiesStored", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ActivitiesStored;
            if (string.Equals(value, "ModuleImportRunbookComplete", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.ModuleImportRunbookComplete;
            if (string.Equals(value, "Succeeded", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Succeeded;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Failed;
            if (string.Equals(value, "Cancelled", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Cancelled;
            if (string.Equals(value, "Updating", StringComparison.InvariantCultureIgnoreCase)) return ModuleProvisioningState.Updating;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ModuleProvisioningState value.");
        }
    }
}
