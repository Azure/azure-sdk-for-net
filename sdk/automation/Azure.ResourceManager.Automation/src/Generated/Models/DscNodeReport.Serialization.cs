// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Automation.Models
{
    public partial class DscNodeReport
    {
        internal static DscNodeReport DeserializeDscNodeReport(JsonElement element)
        {
            Optional<DateTimeOffset?> endTime = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<DateTimeOffset?> startTime = default;
            Optional<string> type = default;
            Optional<string> reportId = default;
            Optional<string> status = default;
            Optional<string> refreshMode = default;
            Optional<string> rebootRequested = default;
            Optional<string> reportFormatVersion = default;
            Optional<string> configurationVersion = default;
            Optional<string> id = default;
            Optional<IReadOnlyList<DscReportError>> errors = default;
            Optional<IReadOnlyList<DscReportResource>> resources = default;
            Optional<DscMetaConfiguration> metaConfiguration = default;
            Optional<string> hostName = default;
            Optional<IReadOnlyList<string>> ipV4Addresses = default;
            Optional<IReadOnlyList<string>> ipV6Addresses = default;
            Optional<int> numberOfResources = default;
            Optional<string> rawErrors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startTime = null;
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reportId"))
                {
                    reportId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("refreshMode"))
                {
                    refreshMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rebootRequested"))
                {
                    rebootRequested = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reportFormatVersion"))
                {
                    reportFormatVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configurationVersion"))
                {
                    configurationVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DscReportError> array = new List<DscReportError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DscReportError.DeserializeDscReportError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("resources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DscReportResource> array = new List<DscReportResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DscReportResource.DeserializeDscReportResource(item));
                    }
                    resources = array;
                    continue;
                }
                if (property.NameEquals("metaConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    metaConfiguration = DscMetaConfiguration.DeserializeDscMetaConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("hostName"))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("iPV4Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV4Addresses = array;
                    continue;
                }
                if (property.NameEquals("iPV6Addresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipV6Addresses = array;
                    continue;
                }
                if (property.NameEquals("numberOfResources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfResources = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rawErrors"))
                {
                    rawErrors = property.Value.GetString();
                    continue;
                }
            }
            return new DscNodeReport(Optional.ToNullable(endTime), Optional.ToNullable(lastModifiedTime), Optional.ToNullable(startTime), type.Value, reportId.Value, status.Value, refreshMode.Value, rebootRequested.Value, reportFormatVersion.Value, configurationVersion.Value, id.Value, Optional.ToList(errors), Optional.ToList(resources), metaConfiguration.Value, hostName.Value, Optional.ToList(ipV4Addresses), Optional.ToList(ipV6Addresses), Optional.ToNullable(numberOfResources), rawErrors.Value);
        }
    }
}
