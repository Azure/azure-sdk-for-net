// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Automation.Models
{
    /// <summary> Definition of the statistic. </summary>
    public partial class AutomationAccountStatistics
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AutomationAccountStatistics"/>. </summary>
        internal AutomationAccountStatistics()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AutomationAccountStatistics"/>. </summary>
        /// <param name="counterProperty"> Gets the property value of the statistic. </param>
        /// <param name="counterValue"> Gets the value of the statistic. </param>
        /// <param name="startOn"> Gets the startTime of the statistic. </param>
        /// <param name="endOn"> Gets the endTime of the statistic. </param>
        /// <param name="id"> Gets the id. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AutomationAccountStatistics(string counterProperty, long? counterValue, DateTimeOffset? startOn, DateTimeOffset? endOn, string id, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CounterProperty = counterProperty;
            CounterValue = counterValue;
            StartOn = startOn;
            EndOn = endOn;
            Id = id;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets the property value of the statistic. </summary>
        public string CounterProperty { get; }
        /// <summary> Gets the value of the statistic. </summary>
        public long? CounterValue { get; }
        /// <summary> Gets the startTime of the statistic. </summary>
        public DateTimeOffset? StartOn { get; }
        /// <summary> Gets the endTime of the statistic. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> Gets the id. </summary>
        public string Id { get; }
    }
}
