// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Automation.Models
{
    /// <summary> Gets or sets the provisioning state of the module. </summary>
    public readonly partial struct ModuleProvisioningState : IEquatable<ModuleProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ModuleProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModuleProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string CreatingValue = "Creating";
        private const string StartingImportModuleRunbookValue = "StartingImportModuleRunbook";
        private const string RunningImportModuleRunbookValue = "RunningImportModuleRunbook";
        private const string ContentRetrievedValue = "ContentRetrieved";
        private const string ContentDownloadedValue = "ContentDownloaded";
        private const string ContentValidatedValue = "ContentValidated";
        private const string ConnectionTypeImportedValue = "ConnectionTypeImported";
        private const string ContentStoredValue = "ContentStored";
        private const string ModuleDataStoredValue = "ModuleDataStored";
        private const string ActivitiesStoredValue = "ActivitiesStored";
        private const string ModuleImportRunbookCompleteValue = "ModuleImportRunbookComplete";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";
        private const string UpdatingValue = "Updating";

        /// <summary> Created. </summary>
        public static ModuleProvisioningState Created { get; } = new ModuleProvisioningState(CreatedValue);
        /// <summary> Creating. </summary>
        public static ModuleProvisioningState Creating { get; } = new ModuleProvisioningState(CreatingValue);
        /// <summary> StartingImportModuleRunbook. </summary>
        public static ModuleProvisioningState StartingImportModuleRunbook { get; } = new ModuleProvisioningState(StartingImportModuleRunbookValue);
        /// <summary> RunningImportModuleRunbook. </summary>
        public static ModuleProvisioningState RunningImportModuleRunbook { get; } = new ModuleProvisioningState(RunningImportModuleRunbookValue);
        /// <summary> ContentRetrieved. </summary>
        public static ModuleProvisioningState ContentRetrieved { get; } = new ModuleProvisioningState(ContentRetrievedValue);
        /// <summary> ContentDownloaded. </summary>
        public static ModuleProvisioningState ContentDownloaded { get; } = new ModuleProvisioningState(ContentDownloadedValue);
        /// <summary> ContentValidated. </summary>
        public static ModuleProvisioningState ContentValidated { get; } = new ModuleProvisioningState(ContentValidatedValue);
        /// <summary> ConnectionTypeImported. </summary>
        public static ModuleProvisioningState ConnectionTypeImported { get; } = new ModuleProvisioningState(ConnectionTypeImportedValue);
        /// <summary> ContentStored. </summary>
        public static ModuleProvisioningState ContentStored { get; } = new ModuleProvisioningState(ContentStoredValue);
        /// <summary> ModuleDataStored. </summary>
        public static ModuleProvisioningState ModuleDataStored { get; } = new ModuleProvisioningState(ModuleDataStoredValue);
        /// <summary> ActivitiesStored. </summary>
        public static ModuleProvisioningState ActivitiesStored { get; } = new ModuleProvisioningState(ActivitiesStoredValue);
        /// <summary> ModuleImportRunbookComplete. </summary>
        public static ModuleProvisioningState ModuleImportRunbookComplete { get; } = new ModuleProvisioningState(ModuleImportRunbookCompleteValue);
        /// <summary> Succeeded. </summary>
        public static ModuleProvisioningState Succeeded { get; } = new ModuleProvisioningState(SucceededValue);
        /// <summary> Failed. </summary>
        public static ModuleProvisioningState Failed { get; } = new ModuleProvisioningState(FailedValue);
        /// <summary> Cancelled. </summary>
        public static ModuleProvisioningState Cancelled { get; } = new ModuleProvisioningState(CancelledValue);
        /// <summary> Updating. </summary>
        public static ModuleProvisioningState Updating { get; } = new ModuleProvisioningState(UpdatingValue);
        /// <summary> Determines if two <see cref="ModuleProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ModuleProvisioningState left, ModuleProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModuleProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ModuleProvisioningState left, ModuleProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModuleProvisioningState"/>. </summary>
        public static implicit operator ModuleProvisioningState(string value) => new ModuleProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModuleProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModuleProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
