// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Definition of the content source.
    /// </summary>
    public partial class ContentSource
    {
        /// <summary>
        /// Initializes a new instance of the ContentSource class.
        /// </summary>
        public ContentSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContentSource class.
        /// </summary>
        /// <param name="hash">Gets or sets the hash.</param>
        /// <param name="type">Gets or sets the content source type. Possible
        /// values include: 'embeddedContent', 'uri'</param>
        /// <param name="value">Gets or sets the value of the content. This is
        /// based on the content source type.</param>
        /// <param name="version">Gets or sets the version of the
        /// content.</param>
        public ContentSource(ContentHash hash = default(ContentHash), string type = default(string), string value = default(string), string version = default(string))
        {
            Hash = hash;
            Type = type;
            Value = value;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the hash.
        /// </summary>
        [JsonProperty(PropertyName = "hash")]
        public ContentHash Hash { get; set; }

        /// <summary>
        /// Gets or sets the content source type. Possible values include:
        /// 'embeddedContent', 'uri'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the value of the content. This is based on the content
        /// source type.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the version of the content.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Hash != null)
            {
                Hash.Validate();
            }
        }
    }
}
