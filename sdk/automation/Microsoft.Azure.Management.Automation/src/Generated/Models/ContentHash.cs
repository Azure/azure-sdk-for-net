// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Definition of the runbook property type.
    /// </summary>
    public partial class ContentHash
    {
        /// <summary>
        /// Initializes a new instance of the ContentHash class.
        /// </summary>
        public ContentHash()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContentHash class.
        /// </summary>
        /// <param name="algorithm">Gets or sets the content hash algorithm
        /// used to hash the content.</param>
        /// <param name="value">Gets or sets expected hash value of the
        /// content.</param>
        public ContentHash(string algorithm, string value)
        {
            Algorithm = algorithm;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the content hash algorithm used to hash the content.
        /// </summary>
        [JsonProperty(PropertyName = "algorithm")]
        public string Algorithm { get; set; }

        /// <summary>
        /// Gets or sets expected hash value of the content.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Algorithm == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Algorithm");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
