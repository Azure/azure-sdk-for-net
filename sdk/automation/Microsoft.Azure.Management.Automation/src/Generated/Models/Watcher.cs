// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of the watcher type.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Watcher : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Watcher class.
        /// </summary>
        public Watcher()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Watcher class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the
        /// resource</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="executionFrequencyInSeconds">Gets or sets the
        /// frequency at which the watcher is invoked.</param>
        /// <param name="scriptName">Gets or sets the name of the script the
        /// watcher is attached to, i.e. the name of an existing
        /// runbook.</param>
        /// <param name="scriptParameters">Gets or sets the parameters of the
        /// script.</param>
        /// <param name="scriptRunOn">Gets or sets the name of the hybrid
        /// worker group the watcher will run on.</param>
        /// <param name="status">Gets the current status of the
        /// watcher.</param>
        /// <param name="creationTime">Gets or sets the creation time.</param>
        /// <param name="lastModifiedTime">Gets or sets the last modified
        /// time.</param>
        /// <param name="lastModifiedBy">Details of the user who last modified
        /// the watcher.</param>
        /// <param name="description">Gets or sets the description.</param>
        /// <param name="etag">Gets or sets the etag of the resource.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        public Watcher(string id = default(string), string name = default(string), string type = default(string), long? executionFrequencyInSeconds = default(long?), string scriptName = default(string), IDictionary<string, string> scriptParameters = default(IDictionary<string, string>), string scriptRunOn = default(string), string status = default(string), System.DateTimeOffset creationTime = default(System.DateTimeOffset), System.DateTimeOffset lastModifiedTime = default(System.DateTimeOffset), string lastModifiedBy = default(string), string description = default(string), string etag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string location = default(string))
            : base(id, name, type)
        {
            ExecutionFrequencyInSeconds = executionFrequencyInSeconds;
            ScriptName = scriptName;
            ScriptParameters = scriptParameters;
            ScriptRunOn = scriptRunOn;
            Status = status;
            CreationTime = creationTime;
            LastModifiedTime = lastModifiedTime;
            LastModifiedBy = lastModifiedBy;
            Description = description;
            Etag = etag;
            Tags = tags;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the frequency at which the watcher is invoked.
        /// </summary>
        [JsonProperty(PropertyName = "properties.executionFrequencyInSeconds")]
        public long? ExecutionFrequencyInSeconds { get; set; }

        /// <summary>
        /// Gets or sets the name of the script the watcher is attached to,
        /// i.e. the name of an existing runbook.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptName")]
        public string ScriptName { get; set; }

        /// <summary>
        /// Gets or sets the parameters of the script.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptParameters")]
        public IDictionary<string, string> ScriptParameters { get; set; }

        /// <summary>
        /// Gets or sets the name of the hybrid worker group the watcher will
        /// run on.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scriptRunOn")]
        public string ScriptRunOn { get; set; }

        /// <summary>
        /// Gets the current status of the watcher.
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets the creation time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTimeOffset CreationTime { get; private set; }

        /// <summary>
        /// Gets or sets the last modified time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTimeOffset LastModifiedTime { get; private set; }

        /// <summary>
        /// Gets details of the user who last modified the watcher.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModifiedBy")]
        public string LastModifiedBy { get; private set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the etag of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the geo-location where the resource lives
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

    }
}
