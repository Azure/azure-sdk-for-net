// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The parameters supplied to the create or update source control
    /// operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SourceControlCreateOrUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SourceControlCreateOrUpdateParameters class.
        /// </summary>
        public SourceControlCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SourceControlCreateOrUpdateParameters class.
        /// </summary>
        /// <param name="repoUrl">The repo url of the source control.</param>
        /// <param name="branch">The repo branch of the source control. Include
        /// branch as empty string for VsoTfvc.</param>
        /// <param name="folderPath">The folder path of the source control.
        /// Path must be relative.</param>
        /// <param name="autoSync">The auto async of the source control.
        /// Default is false.</param>
        /// <param name="publishRunbook">The auto publish of the source
        /// control. Default is true.</param>
        /// <param name="sourceType">The source type. Must be one of VsoGit,
        /// VsoTfvc, GitHub, case sensitive. Possible values include: 'VsoGit',
        /// 'VsoTfvc', 'GitHub'</param>
        /// <param name="securityToken">The authorization token for the repo of
        /// the source control.</param>
        /// <param name="description">The user description of the source
        /// control.</param>
        public SourceControlCreateOrUpdateParameters(string repoUrl = default(string), string branch = default(string), string folderPath = default(string), bool? autoSync = default(bool?), bool? publishRunbook = default(bool?), string sourceType = default(string), SourceControlSecurityTokenProperties securityToken = default(SourceControlSecurityTokenProperties), string description = default(string))
        {
            RepoUrl = repoUrl;
            Branch = branch;
            FolderPath = folderPath;
            AutoSync = autoSync;
            PublishRunbook = publishRunbook;
            SourceType = sourceType;
            SecurityToken = securityToken;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the repo url of the source control.
        /// </summary>
        [JsonProperty(PropertyName = "properties.repoUrl")]
        public string RepoUrl { get; set; }

        /// <summary>
        /// Gets or sets the repo branch of the source control. Include branch
        /// as empty string for VsoTfvc.
        /// </summary>
        [JsonProperty(PropertyName = "properties.branch")]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or sets the folder path of the source control. Path must be
        /// relative.
        /// </summary>
        [JsonProperty(PropertyName = "properties.folderPath")]
        public string FolderPath { get; set; }

        /// <summary>
        /// Gets or sets the auto async of the source control. Default is
        /// false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoSync")]
        public bool? AutoSync { get; set; }

        /// <summary>
        /// Gets or sets the auto publish of the source control. Default is
        /// true.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publishRunbook")]
        public bool? PublishRunbook { get; set; }

        /// <summary>
        /// Gets or sets the source type. Must be one of VsoGit, VsoTfvc,
        /// GitHub, case sensitive. Possible values include: 'VsoGit',
        /// 'VsoTfvc', 'GitHub'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceType")]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or sets the authorization token for the repo of the source
        /// control.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityToken")]
        public SourceControlSecurityTokenProperties SecurityToken { get; set; }

        /// <summary>
        /// Gets or sets the user description of the source control.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RepoUrl != null)
            {
                if (RepoUrl.Length > 2000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RepoUrl", 2000);
                }
            }
            if (Branch != null)
            {
                if (Branch.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Branch", 255);
                }
            }
            if (FolderPath != null)
            {
                if (FolderPath.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FolderPath", 255);
                }
            }
            if (SecurityToken != null)
            {
                SecurityToken.Validate();
            }
            if (Description != null)
            {
                if (Description.Length > 512)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 512);
                }
            }
        }
    }
}
