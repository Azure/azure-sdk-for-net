// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Automation
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CredentialOperations.
    /// </summary>
    public static partial class CredentialOperationsExtensions
    {
            /// <summary>
            /// Delete the credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The name of credential.
            /// </param>
            public static void Delete(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName)
            {
                operations.DeleteAsync(resourceGroupName, automationAccountName, credentialName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The name of credential.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, automationAccountName, credentialName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve the credential identified by credential name.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The name of credential.
            /// </param>
            public static Credential Get(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName)
            {
                return operations.GetAsync(resourceGroupName, automationAccountName, credentialName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the credential identified by credential name.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The name of credential.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Credential> GetAsync(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, automationAccountName, credentialName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The parameters supplied to the create or update credential operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create or update credential operation.
            /// </param>
            public static Credential CreateOrUpdate(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CredentialCreateOrUpdateParameters parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, automationAccountName, credentialName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The parameters supplied to the create or update credential operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the create or update credential operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Credential> CreateOrUpdateAsync(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CredentialCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, automationAccountName, credentialName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The parameters supplied to the Update credential operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the Update credential operation.
            /// </param>
            public static Credential Update(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CredentialUpdateParameters parameters)
            {
                return operations.UpdateAsync(resourceGroupName, automationAccountName, credentialName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a credential.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='credentialName'>
            /// The parameters supplied to the Update credential operation.
            /// </param>
            /// <param name='parameters'>
            /// The parameters supplied to the Update credential operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Credential> UpdateAsync(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, string credentialName, CredentialUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, automationAccountName, credentialName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of credentials.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            public static IPage<Credential> ListByAutomationAccount(this ICredentialOperations operations, string resourceGroupName, string automationAccountName)
            {
                return operations.ListByAutomationAccountAsync(resourceGroupName, automationAccountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of credentials.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of an Azure Resource group.
            /// </param>
            /// <param name='automationAccountName'>
            /// The name of the automation account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Credential>> ListByAutomationAccountAsync(this ICredentialOperations operations, string resourceGroupName, string automationAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountWithHttpMessagesAsync(resourceGroupName, automationAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a list of credentials.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Credential> ListByAutomationAccountNext(this ICredentialOperations operations, string nextPageLink)
            {
                return operations.ListByAutomationAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a list of credentials.
            /// <see href="http://aka.ms/azureautomationsdk/credentialoperations" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Credential>> ListByAutomationAccountNextAsync(this ICredentialOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAutomationAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
