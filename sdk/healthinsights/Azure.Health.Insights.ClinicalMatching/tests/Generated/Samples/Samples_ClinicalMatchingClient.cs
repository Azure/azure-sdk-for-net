// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Insights.ClinicalMatching.Samples
{
    public partial class Samples_ClinicalMatchingClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClinicalMatchingClient_MatchTrials_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
}
            },
            });
            Operation<BinaryData> operation = client.MatchTrials(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("patientId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClinicalMatchingClient_MatchTrials_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
}
            },
            });
            Operation<BinaryData> operation = await client.MatchTrialsAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("patientId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClinicalMatchingClient_MatchTrials_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            TrialMatcherData trialMatcherData = new TrialMatcherData(new PatientRecord[]
            {
new PatientRecord("<id>")
            });
            Operation<TrialMatcherInferenceResult> operation = client.MatchTrials(WaitUntil.Completed, trialMatcherData);
            TrialMatcherInferenceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClinicalMatchingClient_MatchTrials_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            TrialMatcherData trialMatcherData = new TrialMatcherData(new PatientRecord[]
            {
new PatientRecord("<id>")
            });
            Operation<TrialMatcherInferenceResult> operation = await client.MatchTrialsAsync(WaitUntil.Completed, trialMatcherData);
            TrialMatcherInferenceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClinicalMatchingClient_MatchTrials_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
info = new
{
sex = "female",
birthDate = "2022-05-10",
clinicalInfo = new object[]
{
new
{
resourceType = "<resourceType>",
id = "<id>",
meta = new
{
versionId = "<versionId>",
lastUpdated = "<lastUpdated>",
source = "<source>",
profile = new object[]
{
"<profile>"
},
security = new object[]
{
new
{
system = "<system>",
version = "<version>",
code = "<code>",
display = "<display>",
id = "<id>",
extension = new object[]
{
new
{
url = "<url>",
valueQuantity = new
{
value = 123.45,
comparator = "<comparator>",
unit = "<unit>",
system = "<system>",
code = "<code>",
id = "<id>",
extension = new object[]
{
null
},
},
valueCodeableConcept = new
{
coding = new object[]
{
null
},
text = "<text>",
id = "<id>",
extension = new object[]
{
null
},
},
valueString = "<valueString>",
valueBoolean = true,
valueInteger = 1234,
valueRange = new
{
id = "<id>",
extension = new object[]
{
null
},
},
valueRatio = new
{
id = "<id>",
extension = new object[]
{
null
},
},
valueSampledData = new
{
period = 123.45,
factor = 123.45,
lowerLimit = 123.45,
upperLimit = 123.45,
dimensions = 1234,
data = "<data>",
id = "<id>",
extension = new object[]
{
null
},
},
valueTime = "01:23:45",
valueDateTime = "<valueDateTime>",
valuePeriod = new
{
start = "<start>",
end = "<end>",
id = "<id>",
extension = new object[]
{
null
},
},
valueReference = new
{
reference = "<reference>",
type = "<type>",
identifier = new
{
use = "<use>",
system = "<system>",
value = "<value>",
id = "<id>",
extension = new object[]
{
null
},
},
display = "<display>",
id = "<id>",
extension = new object[]
{
null
},
},
id = "<id>",
extension = new object[]
{
null
},
}
},
}
},
tag = new object[]
{
null
},
},
implicitRules = "<implicitRules>",
language = "<language>",
}
},
},
encounters = new object[]
{
new Dictionary<string, object>
{
["id"] = "<id>",
["period"] = new
{
start = "2022-05-10T14:57:31.2311892-04:00",
end = "2022-05-10T14:57:31.2311892-04:00",
},
["class"] = "inpatient"
}
},
patientDocuments = new object[]
{
new
{
type = "note",
clinicalType = "consultation",
id = "<id>",
language = "<language>",
createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
authors = new object[]
{
new
{
id = "<id>",
fullName = "<fullName>",
}
},
specialtyType = "pathology",
administrativeMetadata = new
{
orderedProcedures = new object[]
{
new
{
extension = new object[]
{
null
},
description = "<description>",
}
},
encounterId = "<encounterId>",
},
content = new
{
sourceType = "inline",
value = "<value>",
},
}
},
}
            },
                configuration = new
                {
                    verbose = true,
                    includeEvidence = true,
                    clinicalTrials = new
                    {
                        customTrials = new object[]
            {
new
{
identifier = new object[]
{
null
},
title = "<title>",
protocol = new object[]
{
null
},
partOf = new object[]
{
null
},
status = "active",
category = new object[]
{
null
},
focus = new object[]
{
null
},
condition = new object[]
{
null
},
contact = new object[]
{
new
{
name = "<name>",
telecom = new object[]
{
new
{
system = "phone",
value = "<value>",
use = "home",
rank = 1234,
}
},
id = "<id>",
extension = new object[]
{
null
},
}
},
keyword = new object[]
{
null
},
location = new object[]
{
null
},
description = "<description>",
enrollment = new object[]
{
null
},
site = new object[]
{
null
},
note = new object[]
{
new
{
authorString = "<authorString>",
time = "<time>",
text = "<text>",
id = "<id>",
extension = new object[]
{
null
},
}
},
arm = new object[]
{
new
{
name = "<name>",
description = "<description>",
}
},
objective = new object[]
{
new
{
name = "<name>",
}
},
resourceType = "ResearchStudy",
text = new
{
status = "<status>",
div = "<div>",
id = "<id>",
extension = new object[]
{
null
},
},
contained = new object[]
{
null
},
extension = new object[]
{
null
},
modifierExtension = new object[]
{
null
},
id = "<id>",
implicitRules = "<implicitRules>",
language = "<language>",
}
            },
                        registryFilters = new object[]
            {
new
{
conditions = new object[]
{
"<conditions>"
},
studyTypes = new object[]
{
"interventional"
},
recruitmentStatuses = new object[]
{
"unknownStatus"
},
sponsors = new object[]
{
"<sponsors>"
},
phases = new object[]
{
"notApplicable"
},
purposes = new object[]
{
"notApplicable"
},
ids = new object[]
{
"<ids>"
},
sources = new object[]
{
"custom"
},
facilityNames = new object[]
{
"<facilityNames>"
},
facilityLocations = new object[]
{
new
{
city = "<city>",
state = "<state>",
countryOrRegion = "<countryOrRegion>",
}
},
facilityAreas = new object[]
{
new
{
type = "Feature",
geometry = new
{
type = "Point",
coordinates = new object[]
{
123.45F
},
},
properties = new
{
subType = "Circle",
radius = 123.45,
},
}
},
}
            },
                    },
                },
            });
            Operation<BinaryData> operation = client.MatchTrials(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("patientId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("eligibilityCriteriaEvidence").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("clinicalTrialId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("phases")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("studyType").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("recruitmentStatus").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("conditions")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("sponsors")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("countryOrRegion").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("system").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("semanticType").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("knowledgeGraphLastUpdateDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClinicalMatchingClient_MatchTrials_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
info = new
{
sex = "female",
birthDate = "2022-05-10",
clinicalInfo = new object[]
{
new
{
resourceType = "<resourceType>",
id = "<id>",
meta = new
{
versionId = "<versionId>",
lastUpdated = "<lastUpdated>",
source = "<source>",
profile = new object[]
{
"<profile>"
},
security = new object[]
{
new
{
system = "<system>",
version = "<version>",
code = "<code>",
display = "<display>",
id = "<id>",
extension = new object[]
{
new
{
url = "<url>",
valueQuantity = new
{
value = 123.45,
comparator = "<comparator>",
unit = "<unit>",
system = "<system>",
code = "<code>",
id = "<id>",
extension = new object[]
{
null
},
},
valueCodeableConcept = new
{
coding = new object[]
{
null
},
text = "<text>",
id = "<id>",
extension = new object[]
{
null
},
},
valueString = "<valueString>",
valueBoolean = true,
valueInteger = 1234,
valueRange = new
{
id = "<id>",
extension = new object[]
{
null
},
},
valueRatio = new
{
id = "<id>",
extension = new object[]
{
null
},
},
valueSampledData = new
{
period = 123.45,
factor = 123.45,
lowerLimit = 123.45,
upperLimit = 123.45,
dimensions = 1234,
data = "<data>",
id = "<id>",
extension = new object[]
{
null
},
},
valueTime = "01:23:45",
valueDateTime = "<valueDateTime>",
valuePeriod = new
{
start = "<start>",
end = "<end>",
id = "<id>",
extension = new object[]
{
null
},
},
valueReference = new
{
reference = "<reference>",
type = "<type>",
identifier = new
{
use = "<use>",
system = "<system>",
value = "<value>",
id = "<id>",
extension = new object[]
{
null
},
},
display = "<display>",
id = "<id>",
extension = new object[]
{
null
},
},
id = "<id>",
extension = new object[]
{
null
},
}
},
}
},
tag = new object[]
{
null
},
},
implicitRules = "<implicitRules>",
language = "<language>",
}
},
},
encounters = new object[]
{
new Dictionary<string, object>
{
["id"] = "<id>",
["period"] = new
{
start = "2022-05-10T14:57:31.2311892-04:00",
end = "2022-05-10T14:57:31.2311892-04:00",
},
["class"] = "inpatient"
}
},
patientDocuments = new object[]
{
new
{
type = "note",
clinicalType = "consultation",
id = "<id>",
language = "<language>",
createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
authors = new object[]
{
new
{
id = "<id>",
fullName = "<fullName>",
}
},
specialtyType = "pathology",
administrativeMetadata = new
{
orderedProcedures = new object[]
{
new
{
extension = new object[]
{
null
},
description = "<description>",
}
},
encounterId = "<encounterId>",
},
content = new
{
sourceType = "inline",
value = "<value>",
},
}
},
}
            },
                configuration = new
                {
                    verbose = true,
                    includeEvidence = true,
                    clinicalTrials = new
                    {
                        customTrials = new object[]
            {
new
{
identifier = new object[]
{
null
},
title = "<title>",
protocol = new object[]
{
null
},
partOf = new object[]
{
null
},
status = "active",
category = new object[]
{
null
},
focus = new object[]
{
null
},
condition = new object[]
{
null
},
contact = new object[]
{
new
{
name = "<name>",
telecom = new object[]
{
new
{
system = "phone",
value = "<value>",
use = "home",
rank = 1234,
}
},
id = "<id>",
extension = new object[]
{
null
},
}
},
keyword = new object[]
{
null
},
location = new object[]
{
null
},
description = "<description>",
enrollment = new object[]
{
null
},
site = new object[]
{
null
},
note = new object[]
{
new
{
authorString = "<authorString>",
time = "<time>",
text = "<text>",
id = "<id>",
extension = new object[]
{
null
},
}
},
arm = new object[]
{
new
{
name = "<name>",
description = "<description>",
}
},
objective = new object[]
{
new
{
name = "<name>",
}
},
resourceType = "ResearchStudy",
text = new
{
status = "<status>",
div = "<div>",
id = "<id>",
extension = new object[]
{
null
},
},
contained = new object[]
{
null
},
extension = new object[]
{
null
},
modifierExtension = new object[]
{
null
},
id = "<id>",
implicitRules = "<implicitRules>",
language = "<language>",
}
            },
                        registryFilters = new object[]
            {
new
{
conditions = new object[]
{
"<conditions>"
},
studyTypes = new object[]
{
"interventional"
},
recruitmentStatuses = new object[]
{
"unknownStatus"
},
sponsors = new object[]
{
"<sponsors>"
},
phases = new object[]
{
"notApplicable"
},
purposes = new object[]
{
"notApplicable"
},
ids = new object[]
{
"<ids>"
},
sources = new object[]
{
"custom"
},
facilityNames = new object[]
{
"<facilityNames>"
},
facilityLocations = new object[]
{
new
{
city = "<city>",
state = "<state>",
countryOrRegion = "<countryOrRegion>",
}
},
facilityAreas = new object[]
{
new
{
type = "Feature",
geometry = new
{
type = "Point",
coordinates = new object[]
{
123.45F
},
},
properties = new
{
subType = "Circle",
radius = 123.45,
},
}
},
}
            },
                    },
                },
            });
            Operation<BinaryData> operation = await client.MatchTrialsAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("patientId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("eligibilityCriteriaEvidence").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("clinicalTrialId").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("phases")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("studyType").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("recruitmentStatus").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("conditions")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("sponsors")[0].ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("phone").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("city").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("countryOrRegion").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("system").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("semanticType").ToString());
            Console.WriteLine(result.GetProperty("patientResults")[0].GetProperty("neededClinicalInfo")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("modelVersion").ToString());
            Console.WriteLine(result.GetProperty("knowledgeGraphLastUpdateDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ClinicalMatchingClient_MatchTrials_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            TrialMatcherData trialMatcherData = new TrialMatcherData(new PatientRecord[]
            {
new PatientRecord("<id>")
{
Info = new PatientDetails
{
Sex = PatientSex.Female,
BirthDate = DateTimeOffset.Parse("2022-05-10"),
ClinicalInfo = {new FhirR4Resource("<resourceType>")
{
Id = "<id>",
Meta = new FhirR4Meta
{
VersionId = "<versionId>",
LastUpdated = "<lastUpdated>",
Source = "<source>",
Profile = {"<profile>"},
Security = {new FhirR4Coding
{
System = "<system>",
Version = "<version>",
Code = "<code>",
Display = "<display>",
}},
Tag = {default},
},
ImplicitRules = "<implicitRules>",
Language = "<language>",
}},
},
Encounters = {new Encounter("<id>")
{
Period = new TimePeriod
{
Start = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
End = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
},
Class = EncounterClass.InPatient,
}},
PatientDocuments = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
ClinicalType = ClinicalDocumentType.Consultation,
Language = "<language>",
CreatedDateTime = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
Authors = {new DocumentAuthor
{
Id = "<id>",
FullName = "<fullName>",
}},
SpecialtyType = SpecialtyType.Pathology,
AdministrativeMetadata = new DocumentAdministrativeMetadata
{
OrderedProcedures = {new FhirR4Extendible
{
Extension = {default},
Code = default,
Description = "<description>",
}},
EncounterId = "<encounterId>",
},
}},
}
            })
            {
                Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials
                {
                    CustomTrials = {new FhirR4ResearchStudy(ResearchStudyStatusCodeType.Active)
{
Identifier = {default},
Title = "<title>",
Protocol = {default},
PartOf = {default},
PrimaryPurposeType = default,
Phase = default,
Category = {default},
Focus = {default},
Condition = {default},
Contact = {new FhirR4ContactDetail
{
Name = "<name>",
Telecom = {new FhirR4ContactPoint
{
System = ContactPointSystem.Phone,
Value = "<value>",
Use = ContactPointUse.Home,
Rank = 1234,
Period = default,
}},
}},
Keyword = {default},
Location = {default},
Description = "<description>",
Enrollment = {default},
Period = default,
Sponsor = default,
PrincipalInvestigator = default,
Site = {default},
ReasonStopped = default,
Note = {new FhirR4Annotation("<text>")
{
AuthorString = "<authorString>",
Time = "<time>",
}},
Arm = {new ResearchStudyArm("<name>")
{
Type = default,
Description = "<description>",
}},
Objective = {new ResearchStudyObjective("<name>")
{
Type = default,
}},
Text = new FhirR4Narrative("<status>", "<div>"),
Contained = {default},
Extension = {default},
ModifierExtension = {default},
Id = "<id>",
Meta = default,
ImplicitRules = "<implicitRules>",
Language = "<language>",
}},
                    RegistryFilters = {new ClinicalTrialRegistryFilter
{
Conditions = {"<conditions>"},
StudyTypes = {ClinicalTrialStudyType.Interventional},
RecruitmentStatuses = {ClinicalTrialRecruitmentStatus.UnknownStatus},
Sponsors = {"<sponsors>"},
Phases = {ClinicalTrialPhase.NotApplicable},
Purposes = {ClinicalTrialPurpose.NotApplicable},
Ids = {"<ids>"},
Sources = {ClinicalTrialSource.Custom},
FacilityNames = {"<facilityNames>"},
FacilityLocations = {new GeographicLocation("<countryOrRegion>")
{
City = "<city>",
State = "<state>",
}},
FacilityAreas = {new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[]{123.45F}), new AreaProperties(GeoJsonPropertiesSubType.Circle, 123.45))},
}},
                })
                {
                    Verbose = true,
                    IncludeEvidence = true,
                },
            };
            Operation<TrialMatcherInferenceResult> operation = client.MatchTrials(WaitUntil.Completed, trialMatcherData);
            TrialMatcherInferenceResult responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ClinicalMatchingClient_MatchTrials_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

            TrialMatcherData trialMatcherData = new TrialMatcherData(new PatientRecord[]
            {
new PatientRecord("<id>")
{
Info = new PatientDetails
{
Sex = PatientSex.Female,
BirthDate = DateTimeOffset.Parse("2022-05-10"),
ClinicalInfo = {new FhirR4Resource("<resourceType>")
{
Id = "<id>",
Meta = new FhirR4Meta
{
VersionId = "<versionId>",
LastUpdated = "<lastUpdated>",
Source = "<source>",
Profile = {"<profile>"},
Security = {new FhirR4Coding
{
System = "<system>",
Version = "<version>",
Code = "<code>",
Display = "<display>",
}},
Tag = {default},
},
ImplicitRules = "<implicitRules>",
Language = "<language>",
}},
},
Encounters = {new Encounter("<id>")
{
Period = new TimePeriod
{
Start = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
End = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
},
Class = EncounterClass.InPatient,
}},
PatientDocuments = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
ClinicalType = ClinicalDocumentType.Consultation,
Language = "<language>",
CreatedDateTime = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
Authors = {new DocumentAuthor
{
Id = "<id>",
FullName = "<fullName>",
}},
SpecialtyType = SpecialtyType.Pathology,
AdministrativeMetadata = new DocumentAdministrativeMetadata
{
OrderedProcedures = {new FhirR4Extendible
{
Extension = {default},
Code = default,
Description = "<description>",
}},
EncounterId = "<encounterId>",
},
}},
}
            })
            {
                Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials
                {
                    CustomTrials = {new FhirR4ResearchStudy(ResearchStudyStatusCodeType.Active)
{
Identifier = {default},
Title = "<title>",
Protocol = {default},
PartOf = {default},
PrimaryPurposeType = default,
Phase = default,
Category = {default},
Focus = {default},
Condition = {default},
Contact = {new FhirR4ContactDetail
{
Name = "<name>",
Telecom = {new FhirR4ContactPoint
{
System = ContactPointSystem.Phone,
Value = "<value>",
Use = ContactPointUse.Home,
Rank = 1234,
Period = default,
}},
}},
Keyword = {default},
Location = {default},
Description = "<description>",
Enrollment = {default},
Period = default,
Sponsor = default,
PrincipalInvestigator = default,
Site = {default},
ReasonStopped = default,
Note = {new FhirR4Annotation("<text>")
{
AuthorString = "<authorString>",
Time = "<time>",
}},
Arm = {new ResearchStudyArm("<name>")
{
Type = default,
Description = "<description>",
}},
Objective = {new ResearchStudyObjective("<name>")
{
Type = default,
}},
Text = new FhirR4Narrative("<status>", "<div>"),
Contained = {default},
Extension = {default},
ModifierExtension = {default},
Id = "<id>",
Meta = default,
ImplicitRules = "<implicitRules>",
Language = "<language>",
}},
                    RegistryFilters = {new ClinicalTrialRegistryFilter
{
Conditions = {"<conditions>"},
StudyTypes = {ClinicalTrialStudyType.Interventional},
RecruitmentStatuses = {ClinicalTrialRecruitmentStatus.UnknownStatus},
Sponsors = {"<sponsors>"},
Phases = {ClinicalTrialPhase.NotApplicable},
Purposes = {ClinicalTrialPurpose.NotApplicable},
Ids = {"<ids>"},
Sources = {ClinicalTrialSource.Custom},
FacilityNames = {"<facilityNames>"},
FacilityLocations = {new GeographicLocation("<countryOrRegion>")
{
City = "<city>",
State = "<state>",
}},
FacilityAreas = {new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[]{123.45F}), new AreaProperties(GeoJsonPropertiesSubType.Circle, 123.45))},
}},
                })
                {
                    Verbose = true,
                    IncludeEvidence = true,
                },
            };
            Operation<TrialMatcherInferenceResult> operation = await client.MatchTrialsAsync(WaitUntil.Completed, trialMatcherData);
            TrialMatcherInferenceResult responseData = operation.Value;
        }
    }
}
