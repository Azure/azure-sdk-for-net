// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Health.Insights.ClinicalMatching
{
    public partial class ClinicalTrialMetadata : IUtf8JsonSerializable, IModelJsonSerializable<ClinicalTrialMetadata>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ClinicalTrialMetadata>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ClinicalTrialMetadata>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Phases))
            {
                writer.WritePropertyName("phases"u8);
                writer.WriteStartArray();
                foreach (var item in Phases)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(StudyType))
            {
                writer.WritePropertyName("studyType"u8);
                writer.WriteStringValue(StudyType.Value.ToString());
            }
            if (Optional.IsDefined(RecruitmentStatus))
            {
                writer.WritePropertyName("recruitmentStatus"u8);
                writer.WriteStringValue(RecruitmentStatus.Value.ToString());
            }
            writer.WritePropertyName("conditions"u8);
            writer.WriteStartArray();
            foreach (var item in Conditions)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Sponsors))
            {
                writer.WritePropertyName("sponsors"u8);
                writer.WriteStartArray();
                foreach (var item in Sponsors)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Contacts))
            {
                writer.WritePropertyName("contacts"u8);
                writer.WriteStartArray();
                foreach (var item in Contacts)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<ContactDetails>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Facilities))
            {
                writer.WritePropertyName("facilities"u8);
                writer.WriteStartArray();
                foreach (var item in Facilities)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<ClinicalTrialResearchFacility>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ClinicalTrialMetadata DeserializeClinicalTrialMetadata(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<ClinicalTrialPhase>> phases = default;
            Optional<ClinicalTrialStudyType> studyType = default;
            Optional<ClinicalTrialRecruitmentStatus> recruitmentStatus = default;
            IList<string> conditions = default;
            Optional<IList<string>> sponsors = default;
            Optional<IList<ContactDetails>> contacts = default;
            Optional<IList<ClinicalTrialResearchFacility>> facilities = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("phases"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ClinicalTrialPhase> array = new List<ClinicalTrialPhase>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ClinicalTrialPhase(item.GetString()));
                    }
                    phases = array;
                    continue;
                }
                if (property.NameEquals("studyType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    studyType = new ClinicalTrialStudyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recruitmentStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recruitmentStatus = new ClinicalTrialRecruitmentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("conditions"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    conditions = array;
                    continue;
                }
                if (property.NameEquals("sponsors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sponsors = array;
                    continue;
                }
                if (property.NameEquals("contacts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ContactDetails> array = new List<ContactDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ContactDetails.DeserializeContactDetails(item));
                    }
                    contacts = array;
                    continue;
                }
                if (property.NameEquals("facilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ClinicalTrialResearchFacility> array = new List<ClinicalTrialResearchFacility>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ClinicalTrialResearchFacility.DeserializeClinicalTrialResearchFacility(item));
                    }
                    facilities = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ClinicalTrialMetadata(Optional.ToList(phases), Optional.ToNullable(studyType), Optional.ToNullable(recruitmentStatus), conditions, Optional.ToList(sponsors), Optional.ToList(contacts), Optional.ToList(facilities), serializedAdditionalRawData);
        }

        ClinicalTrialMetadata IModelJsonSerializable<ClinicalTrialMetadata>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeClinicalTrialMetadata(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ClinicalTrialMetadata>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ClinicalTrialMetadata IModelSerializable<ClinicalTrialMetadata>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeClinicalTrialMetadata(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ClinicalTrialMetadata"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ClinicalTrialMetadata"/> to convert. </param>
        public static implicit operator RequestContent(ClinicalTrialMetadata model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ClinicalTrialMetadata"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ClinicalTrialMetadata(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeClinicalTrialMetadata(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
