<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="MatchTrialsAsync(WaitUntil,TrialMatcherData,CancellationToken)">
<example>
This sample shows how to call MatchTrialsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var trialMatcherData = new TrialMatcherData(new PatientRecord[] 
{
    new PatientRecord("<id>")
{
        Info = new PatientInfo()
{
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.UtcNow,
            ClinicalInfo = 
{
                new ClinicalCodedElement("<system>", "<code>")
{
                    Name = "<Name>",
                    Value = "<Value>",
                }
            },
        },
        Data = 
{
            new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
                ClinicalType = ClinicalDocumentType.Consultation,
                Language = "<Language>",
                CreatedDateTime = DateTimeOffset.UtcNow,
            }
        },
    }
})
{
    Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials()
{
        CustomTrials = 
{
            new ClinicalTrialDetails("<id>", new ClinicalTrialMetadata(new string[] 
{
                "<null>"
            })
{
                Phases = 
{
                    ClinicalTrialPhase.NotApplicable
                },
                StudyType = ClinicalTrialStudyType.Interventional,
                RecruitmentStatus = ClinicalTrialRecruitmentStatus.UnknownStatus,
                Sponsors = 
{
                    "<null>"
                },
                Contacts = 
{
                    new ContactDetails()
{
                        Name = "<Name>",
                        Email = "<Email>",
                        Phone = "<Phone>",
                    }
                },
                Facilities = 
{
                    new ClinicalTrialResearchFacility("<name>", "<countryOrRegion>")
{
                        City = "<City>",
                        State = "<State>",
                    }
                },
            })
{
                EligibilityCriteriaText = "<EligibilityCriteriaText>",
                Demographics = new ClinicalTrialDemographics()
{
                    AcceptedSex = ClinicalTrialAcceptedSex.All,
                    AcceptedAgeRange = new AcceptedAgeRange()
{
                        MinimumAge = new AcceptedAge(AgeUnit.Years, 3.14f),
                    },
                },
            }
        },
        RegistryFilters = 
{
            new ClinicalTrialRegistryFilter()
{
                Conditions = 
{
                    "<null>"
                },
                StudyTypes = 
{
                    ClinicalTrialStudyType.Interventional
                },
                RecruitmentStatuses = 
{
                    ClinicalTrialRecruitmentStatus.UnknownStatus
                },
                Sponsors = 
{
                    "<null>"
                },
                Phases = 
{
                    ClinicalTrialPhase.NotApplicable
                },
                Purposes = 
{
                    ClinicalTrialPurpose.NotApplicable
                },
                Ids = 
{
                    "<null>"
                },
                Sources = 
{
                    ClinicalTrialSource.Custom
                },
                FacilityNames = 
{
                    "<null>"
                },
                FacilityLocations = 
{
                    new GeographicLocation("<countryOrRegion>")
{
                        City = "<City>",
                        State = "<State>",
                    }
                },
                FacilityAreas = 
{
                    new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[] 
{
                        3.14f
                    }), new AreaProperties(GeoJsonPropertiesSubType.Circle, 3.14))
                },
            }
        },
    })
{
        Verbose = true,
        IncludeEvidence = true,
    },
};
var operation = await client.MatchTrialsAsync(WaitUntil.Completed, trialMatcherData);
]]></code>
</example>
    </member>
    <member name="MatchTrials(WaitUntil,TrialMatcherData,CancellationToken)">
<example>
This sample shows how to call MatchTrials with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var trialMatcherData = new TrialMatcherData(new PatientRecord[] 
{
    new PatientRecord("<id>")
{
        Info = new PatientInfo()
{
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.UtcNow,
            ClinicalInfo = 
{
                new ClinicalCodedElement("<system>", "<code>")
{
                    Name = "<Name>",
                    Value = "<Value>",
                }
            },
        },
        Data = 
{
            new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
                ClinicalType = ClinicalDocumentType.Consultation,
                Language = "<Language>",
                CreatedDateTime = DateTimeOffset.UtcNow,
            }
        },
    }
})
{
    Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials()
{
        CustomTrials = 
{
            new ClinicalTrialDetails("<id>", new ClinicalTrialMetadata(new string[] 
{
                "<null>"
            })
{
                Phases = 
{
                    ClinicalTrialPhase.NotApplicable
                },
                StudyType = ClinicalTrialStudyType.Interventional,
                RecruitmentStatus = ClinicalTrialRecruitmentStatus.UnknownStatus,
                Sponsors = 
{
                    "<null>"
                },
                Contacts = 
{
                    new ContactDetails()
{
                        Name = "<Name>",
                        Email = "<Email>",
                        Phone = "<Phone>",
                    }
                },
                Facilities = 
{
                    new ClinicalTrialResearchFacility("<name>", "<countryOrRegion>")
{
                        City = "<City>",
                        State = "<State>",
                    }
                },
            })
{
                EligibilityCriteriaText = "<EligibilityCriteriaText>",
                Demographics = new ClinicalTrialDemographics()
{
                    AcceptedSex = ClinicalTrialAcceptedSex.All,
                    AcceptedAgeRange = new AcceptedAgeRange()
{
                        MinimumAge = new AcceptedAge(AgeUnit.Years, 3.14f),
                    },
                },
            }
        },
        RegistryFilters = 
{
            new ClinicalTrialRegistryFilter()
{
                Conditions = 
{
                    "<null>"
                },
                StudyTypes = 
{
                    ClinicalTrialStudyType.Interventional
                },
                RecruitmentStatuses = 
{
                    ClinicalTrialRecruitmentStatus.UnknownStatus
                },
                Sponsors = 
{
                    "<null>"
                },
                Phases = 
{
                    ClinicalTrialPhase.NotApplicable
                },
                Purposes = 
{
                    ClinicalTrialPurpose.NotApplicable
                },
                Ids = 
{
                    "<null>"
                },
                Sources = 
{
                    ClinicalTrialSource.Custom
                },
                FacilityNames = 
{
                    "<null>"
                },
                FacilityLocations = 
{
                    new GeographicLocation("<countryOrRegion>")
{
                        City = "<City>",
                        State = "<State>",
                    }
                },
                FacilityAreas = 
{
                    new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[] 
{
                        3.14f
                    }), new AreaProperties(GeoJsonPropertiesSubType.Circle, 3.14))
                },
            }
        },
    })
{
        Verbose = true,
        IncludeEvidence = true,
    },
};
var operation = client.MatchTrials(WaitUntil.Completed, trialMatcherData);
]]></code>
</example>
    </member>
    <member name="MatchTrialsAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call MatchTrialsAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
        }
    },
};

var operation = await client.MatchTrialsAsync(WaitUntil.Completed, RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call MatchTrialsAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
            info = new {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new {
        verbose = true,
        includeEvidence = true,
        clinicalTrials = new {
            customTrials = new[] {
                new {
                    id = "<id>",
                    eligibilityCriteriaText = "<eligibilityCriteriaText>",
                    demographics = new {
                        acceptedSex = "all",
                        acceptedAgeRange = new {
                            minimumAge = new {
                                unit = "years",
                                value = 123.45f,
                            },
                            maximumAge = new {
                                unit = "years",
                                value = 123.45f,
                            },
                        },
                    },
                    metadata = new {
                        phases = new[] {
                            "notApplicable"
                        },
                        studyType = "interventional",
                        recruitmentStatus = "unknownStatus",
                        conditions = new[] {
                            "<String>"
                        },
                        sponsors = new[] {
                            "<String>"
                        },
                        contacts = new[] {
                            new {
                                name = "<name>",
                                email = "<email>",
                                phone = "<phone>",
                            }
                        },
                        facilities = new[] {
                            new {
                                name = "<name>",
                                city = "<city>",
                                state = "<state>",
                                countryOrRegion = "<countryOrRegion>",
                            }
                        },
                    },
                }
            },
            registryFilters = new[] {
                new {
                    conditions = new[] {
                        "<String>"
                    },
                    studyTypes = new[] {
                        "interventional"
                    },
                    recruitmentStatuses = new[] {
                        "unknownStatus"
                    },
                    sponsors = new[] {
                        "<String>"
                    },
                    phases = new[] {
                        "notApplicable"
                    },
                    purposes = new[] {
                        "notApplicable"
                    },
                    ids = new[] {
                        "<String>"
                    },
                    sources = new[] {
                        "custom"
                    },
                    facilityNames = new[] {
                        "<String>"
                    },
                    facilityLocations = new[] {
                        new {
                            city = "<city>",
                            state = "<state>",
                            countryOrRegion = "<countryOrRegion>",
                        }
                    },
                    facilityAreas = new[] {
                        new {
                            type = "Feature",
                            geometry = new {
                                type = "Point",
                                coordinates = new[] {
                                    123.45f
                                },
                            },
                            properties = new {
                                subType = "Circle",
                                radius = 123.45d,
                            },
                        }
                    },
                }
            },
        },
    },
};

var operation = await client.MatchTrialsAsync(WaitUntil.Completed, RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
]]></code>
</example>
    </member>
    <member name="MatchTrials(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call MatchTrials with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
        }
    },
};

var operation = client.MatchTrials(WaitUntil.Completed, RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call MatchTrials with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ClinicalMatchingClient(endpoint, credential);

var data = new {
    patients = new[] {
        new {
            id = "<id>",
            info = new {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new {
        verbose = true,
        includeEvidence = true,
        clinicalTrials = new {
            customTrials = new[] {
                new {
                    id = "<id>",
                    eligibilityCriteriaText = "<eligibilityCriteriaText>",
                    demographics = new {
                        acceptedSex = "all",
                        acceptedAgeRange = new {
                            minimumAge = new {
                                unit = "years",
                                value = 123.45f,
                            },
                            maximumAge = new {
                                unit = "years",
                                value = 123.45f,
                            },
                        },
                    },
                    metadata = new {
                        phases = new[] {
                            "notApplicable"
                        },
                        studyType = "interventional",
                        recruitmentStatus = "unknownStatus",
                        conditions = new[] {
                            "<String>"
                        },
                        sponsors = new[] {
                            "<String>"
                        },
                        contacts = new[] {
                            new {
                                name = "<name>",
                                email = "<email>",
                                phone = "<phone>",
                            }
                        },
                        facilities = new[] {
                            new {
                                name = "<name>",
                                city = "<city>",
                                state = "<state>",
                                countryOrRegion = "<countryOrRegion>",
                            }
                        },
                    },
                }
            },
            registryFilters = new[] {
                new {
                    conditions = new[] {
                        "<String>"
                    },
                    studyTypes = new[] {
                        "interventional"
                    },
                    recruitmentStatuses = new[] {
                        "unknownStatus"
                    },
                    sponsors = new[] {
                        "<String>"
                    },
                    phases = new[] {
                        "notApplicable"
                    },
                    purposes = new[] {
                        "notApplicable"
                    },
                    ids = new[] {
                        "<String>"
                    },
                    sources = new[] {
                        "custom"
                    },
                    facilityNames = new[] {
                        "<String>"
                    },
                    facilityLocations = new[] {
                        new {
                            city = "<city>",
                            state = "<state>",
                            countryOrRegion = "<countryOrRegion>",
                        }
                    },
                    facilityAreas = new[] {
                        new {
                            type = "Feature",
                            geometry = new {
                                type = "Point",
                                coordinates = new[] {
                                    123.45f
                                },
                            },
                            properties = new {
                                subType = "Circle",
                                radius = 123.45d,
                            },
                        }
                    },
                }
            },
        },
    },
};

var operation = client.MatchTrials(WaitUntil.Completed, RequestContent.Create(data));

BinaryData responseData = operation.Value;
JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
]]></code>
</example>
    </member>
  </members>
</doc>