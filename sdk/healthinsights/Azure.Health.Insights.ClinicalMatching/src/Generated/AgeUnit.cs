// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.ClinicalMatching
{
    /// <summary> Possible units for a person's age. </summary>
    public readonly partial struct AgeUnit : IEquatable<AgeUnit>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AgeUnit"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string YearsValue = "years";
        private const string MonthsValue = "months";
        private const string DaysValue = "days";

        /// <summary> years. </summary>
        public static AgeUnit Years { get; } = new AgeUnit(YearsValue);
        /// <summary> months. </summary>
        public static AgeUnit Months { get; } = new AgeUnit(MonthsValue);
        /// <summary> days. </summary>
        public static AgeUnit Days { get; } = new AgeUnit(DaysValue);
        /// <summary> Determines if two <see cref="AgeUnit"/> values are the same. </summary>
        public static bool operator ==(AgeUnit left, AgeUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgeUnit"/> values are not the same. </summary>
        public static bool operator !=(AgeUnit left, AgeUnit right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgeUnit"/>. </summary>
        public static implicit operator AgeUnit(string value) => new AgeUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgeUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgeUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
