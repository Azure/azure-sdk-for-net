// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Health.Insights.ClinicalMatching
{
    internal static partial class ClinicalTrialPurposeExtensions
    {
        public static string ToSerialString(this ClinicalTrialPurpose value) => value switch
        {
            ClinicalTrialPurpose.NotApplicable => "notApplicable",
            ClinicalTrialPurpose.Screening => "screening",
            ClinicalTrialPurpose.Diagnostic => "diagnostic",
            ClinicalTrialPurpose.Prevention => "prevention",
            ClinicalTrialPurpose.HealthServicesResearch => "healthServicesResearch",
            ClinicalTrialPurpose.Treatment => "treatment",
            ClinicalTrialPurpose.DeviceFeasibility => "deviceFeasibility",
            ClinicalTrialPurpose.SupportiveCare => "supportiveCare",
            ClinicalTrialPurpose.BasicScience => "basicScience",
            ClinicalTrialPurpose.Other => "other",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ClinicalTrialPurpose value.")
        };

        public static ClinicalTrialPurpose ToClinicalTrialPurpose(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "notApplicable")) return ClinicalTrialPurpose.NotApplicable;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "screening")) return ClinicalTrialPurpose.Screening;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "diagnostic")) return ClinicalTrialPurpose.Diagnostic;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "prevention")) return ClinicalTrialPurpose.Prevention;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "healthServicesResearch")) return ClinicalTrialPurpose.HealthServicesResearch;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "treatment")) return ClinicalTrialPurpose.Treatment;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "deviceFeasibility")) return ClinicalTrialPurpose.DeviceFeasibility;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "supportiveCare")) return ClinicalTrialPurpose.SupportiveCare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "basicScience")) return ClinicalTrialPurpose.BasicScience;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "other")) return ClinicalTrialPurpose.Other;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ClinicalTrialPurpose value.");
        }
    }
}
