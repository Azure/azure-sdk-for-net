// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The category that gets a value, e.g. BIRADS, Z-SCORE or FRAX SCORE. </summary>
    public readonly partial struct ScoringAndAssessmentCategoryType : IEquatable<ScoringAndAssessmentCategoryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScoringAndAssessmentCategoryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScoringAndAssessmentCategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BIRADSValue = "BIRADS";
        private const string CRADSCOLONICFINDINGSValue = "C-RADS COLONIC FINDINGS";
        private const string CADRADSValue = "CAD-RADS";
        private const string LIRADSValue = "LI-RADS";
        private const string LUNGRADSValue = "LUNG-RADS";
        private const string NIRADSValue = "NI-RADS";
        private const string ORADSValue = "O-RADS";
        private const string PIRADSValue = "PI-RADS";
        private const string TIRADSValue = "TI-RADS";
        private const string CRADSEXTRACOLONICFINDINGSValue = "C-RADS EXTRACOLONIC FINDINGS";
        private const string LIFETIMEBREASTCANCERRISKValue = "LIFETIME BREAST CANCER RISK";
        private const string ASCVDRISKValue = "ASCVD RISK";
        private const string MODIFIEDGAILMODELRISKValue = "MODIFIED GAIL MODEL RISK";
        private const string TYRERCUSICKMODELRISKValue = "TYRER CUSICK MODEL RISK";
        private const string AGATSTONSCOREValue = "AGATSTON SCORE";
        private const string TENYEARCHDRISKValue = "10 YEAR CHD RISK";
        private const string ZSCOREValue = "Z-SCORE";
        private const string TSCOREValue = "T-SCORE";
        private const string CALCIUMVOLUMESCOREValue = "CALCIUM VOLUME SCORE";
        private const string USLIRADSVISUALIZATIONSCOREValue = "US LI-RADS VISUALIZATION SCORE";
        private const string USLIRADSValue = "US LI-RADS";
        private const string CEUSLIRADSValue = "CEUS LI-RADS";
        private const string TREATMENTRESPONSELIRADSValue = "TREATMENT RESPONSE LI-RADS";
        private const string ORADSMRIValue = "O-RADS MRI";
        private const string CALCIUMMASSSCOREValue = "CALCIUM MASS SCORE";
        private const string RISKOFMALIGNANCYINDEXValue = "RISK OF MALIGNANCY INDEX";
        private const string HNPCCMUTATIONRISKValue = "HNPCC MUTATION RISK";
        private const string ALBERTASTROKEPROGRAMEARLYCTSCOREValue = "ALBERTA STROKE PROGRAM EARLY CT SCORE";
        private const string KELLGRENLAWRENCEGRADINGSCALEValue = "KELLGREN-LAWRENCE GRADING SCALE";
        private const string TONNISCLASSIFICATIONValue = "TONNIS CLASSIFICATION";
        private const string CALCIUMSCOREUNSPECIFIEDValue = "CALCIUM SCORE (UNSPECIFIED)";
        private const string TENYEARCHDRISKOBSERVEDAGEValue = "10 YEAR CHD RISK (OBSERVED AGE)";
        private const string TENYEARCHDRISKARTERIALAGEValue = "10 YEAR CHD RISK (ARTERIAL AGE)";
        private const string FRAXSCOREValue = "FRAX SCORE";

        /// <summary> BIRADS. </summary>
        public static ScoringAndAssessmentCategoryType BIRADS { get; } = new ScoringAndAssessmentCategoryType(BIRADSValue);
        /// <summary> C-RADS COLONIC FINDINGS. </summary>
        public static ScoringAndAssessmentCategoryType CRADSCOLONICFINDINGS { get; } = new ScoringAndAssessmentCategoryType(CRADSCOLONICFINDINGSValue);
        /// <summary> CAD-RADS. </summary>
        public static ScoringAndAssessmentCategoryType CADRADS { get; } = new ScoringAndAssessmentCategoryType(CADRADSValue);
        /// <summary> LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType LIRADS { get; } = new ScoringAndAssessmentCategoryType(LIRADSValue);
        /// <summary> LUNG-RADS. </summary>
        public static ScoringAndAssessmentCategoryType LUNGRADS { get; } = new ScoringAndAssessmentCategoryType(LUNGRADSValue);
        /// <summary> NI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType NIRADS { get; } = new ScoringAndAssessmentCategoryType(NIRADSValue);
        /// <summary> O-RADS. </summary>
        public static ScoringAndAssessmentCategoryType ORADS { get; } = new ScoringAndAssessmentCategoryType(ORADSValue);
        /// <summary> PI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType PIRADS { get; } = new ScoringAndAssessmentCategoryType(PIRADSValue);
        /// <summary> TI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType TIRADS { get; } = new ScoringAndAssessmentCategoryType(TIRADSValue);
        /// <summary> C-RADS EXTRACOLONIC FINDINGS. </summary>
        public static ScoringAndAssessmentCategoryType CRADSEXTRACOLONICFINDINGS { get; } = new ScoringAndAssessmentCategoryType(CRADSEXTRACOLONICFINDINGSValue);
        /// <summary> LIFETIME BREAST CANCER RISK. </summary>
        public static ScoringAndAssessmentCategoryType LIFETIMEBREASTCANCERRISK { get; } = new ScoringAndAssessmentCategoryType(LIFETIMEBREASTCANCERRISKValue);
        /// <summary> ASCVD RISK. </summary>
        public static ScoringAndAssessmentCategoryType ASCVDRISK { get; } = new ScoringAndAssessmentCategoryType(ASCVDRISKValue);
        /// <summary> MODIFIED GAIL MODEL RISK. </summary>
        public static ScoringAndAssessmentCategoryType MODIFIEDGAILMODELRISK { get; } = new ScoringAndAssessmentCategoryType(MODIFIEDGAILMODELRISKValue);
        /// <summary> TYRER CUSICK MODEL RISK. </summary>
        public static ScoringAndAssessmentCategoryType TYRERCUSICKMODELRISK { get; } = new ScoringAndAssessmentCategoryType(TYRERCUSICKMODELRISKValue);
        /// <summary> AGATSTON SCORE. </summary>
        public static ScoringAndAssessmentCategoryType AGATSTONSCORE { get; } = new ScoringAndAssessmentCategoryType(AGATSTONSCOREValue);
        /// <summary> 10 YEAR CHD RISK. </summary>
        public static ScoringAndAssessmentCategoryType TENYEARCHDRISK { get; } = new ScoringAndAssessmentCategoryType(TENYEARCHDRISKValue);
        /// <summary> Z-SCORE. </summary>
        public static ScoringAndAssessmentCategoryType ZSCORE { get; } = new ScoringAndAssessmentCategoryType(ZSCOREValue);
        /// <summary> T-SCORE. </summary>
        public static ScoringAndAssessmentCategoryType TSCORE { get; } = new ScoringAndAssessmentCategoryType(TSCOREValue);
        /// <summary> CALCIUM VOLUME SCORE. </summary>
        public static ScoringAndAssessmentCategoryType CALCIUMVOLUMESCORE { get; } = new ScoringAndAssessmentCategoryType(CALCIUMVOLUMESCOREValue);
        /// <summary> US LI-RADS VISUALIZATION SCORE. </summary>
        public static ScoringAndAssessmentCategoryType USLIRADSVISUALIZATIONSCORE { get; } = new ScoringAndAssessmentCategoryType(USLIRADSVISUALIZATIONSCOREValue);
        /// <summary> US LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType USLIRADS { get; } = new ScoringAndAssessmentCategoryType(USLIRADSValue);
        /// <summary> CEUS LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType CEUSLIRADS { get; } = new ScoringAndAssessmentCategoryType(CEUSLIRADSValue);
        /// <summary> TREATMENT RESPONSE LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType TREATMENTRESPONSELIRADS { get; } = new ScoringAndAssessmentCategoryType(TREATMENTRESPONSELIRADSValue);
        /// <summary> O-RADS MRI. </summary>
        public static ScoringAndAssessmentCategoryType ORADSMRI { get; } = new ScoringAndAssessmentCategoryType(ORADSMRIValue);
        /// <summary> CALCIUM MASS SCORE. </summary>
        public static ScoringAndAssessmentCategoryType CALCIUMMASSSCORE { get; } = new ScoringAndAssessmentCategoryType(CALCIUMMASSSCOREValue);
        /// <summary> RISK OF MALIGNANCY INDEX. </summary>
        public static ScoringAndAssessmentCategoryType RISKOFMALIGNANCYINDEX { get; } = new ScoringAndAssessmentCategoryType(RISKOFMALIGNANCYINDEXValue);
        /// <summary> HNPCC MUTATION RISK. </summary>
        public static ScoringAndAssessmentCategoryType HNPCCMUTATIONRISK { get; } = new ScoringAndAssessmentCategoryType(HNPCCMUTATIONRISKValue);
        /// <summary> ALBERTA STROKE PROGRAM EARLY CT SCORE. </summary>
        public static ScoringAndAssessmentCategoryType ALBERTASTROKEPROGRAMEARLYCTSCORE { get; } = new ScoringAndAssessmentCategoryType(ALBERTASTROKEPROGRAMEARLYCTSCOREValue);
        /// <summary> KELLGREN-LAWRENCE GRADING SCALE. </summary>
        public static ScoringAndAssessmentCategoryType KELLGRENLAWRENCEGRADINGSCALE { get; } = new ScoringAndAssessmentCategoryType(KELLGRENLAWRENCEGRADINGSCALEValue);
        /// <summary> TONNIS CLASSIFICATION. </summary>
        public static ScoringAndAssessmentCategoryType TONNISCLASSIFICATION { get; } = new ScoringAndAssessmentCategoryType(TONNISCLASSIFICATIONValue);
        /// <summary> CALCIUM SCORE (UNSPECIFIED). </summary>
        public static ScoringAndAssessmentCategoryType CALCIUMSCOREUNSPECIFIED { get; } = new ScoringAndAssessmentCategoryType(CALCIUMSCOREUNSPECIFIEDValue);
        /// <summary> 10 YEAR CHD RISK (OBSERVED AGE). </summary>
        public static ScoringAndAssessmentCategoryType TENYEARCHDRISKOBSERVEDAGE { get; } = new ScoringAndAssessmentCategoryType(TENYEARCHDRISKOBSERVEDAGEValue);
        /// <summary> 10 YEAR CHD RISK (ARTERIAL AGE). </summary>
        public static ScoringAndAssessmentCategoryType TENYEARCHDRISKARTERIALAGE { get; } = new ScoringAndAssessmentCategoryType(TENYEARCHDRISKARTERIALAGEValue);
        /// <summary> FRAX SCORE. </summary>
        public static ScoringAndAssessmentCategoryType FRAXSCORE { get; } = new ScoringAndAssessmentCategoryType(FRAXSCOREValue);
        /// <summary> Determines if two <see cref="ScoringAndAssessmentCategoryType"/> values are the same. </summary>
        public static bool operator ==(ScoringAndAssessmentCategoryType left, ScoringAndAssessmentCategoryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScoringAndAssessmentCategoryType"/> values are not the same. </summary>
        public static bool operator !=(ScoringAndAssessmentCategoryType left, ScoringAndAssessmentCategoryType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScoringAndAssessmentCategoryType"/>. </summary>
        public static implicit operator ScoringAndAssessmentCategoryType(string value) => new ScoringAndAssessmentCategoryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScoringAndAssessmentCategoryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScoringAndAssessmentCategoryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
