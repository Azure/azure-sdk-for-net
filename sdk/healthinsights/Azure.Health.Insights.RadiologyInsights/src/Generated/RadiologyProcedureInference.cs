// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Procedures found in the document text or associated with the document administrative metadata. </summary>
    public partial class RadiologyProcedureInference : RadiologyInsightsInference
    {
        /// <summary> Initializes a new instance of <see cref="RadiologyProcedureInference"/>. </summary>
        /// <param name="imagingProcedures"> Imaging procedure. </param>
        /// <param name="orderedProcedure"> The related procedure information from the document administration information or as extracted from the document. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="imagingProcedures"/> or <paramref name="orderedProcedure"/> is null. </exception>
        internal RadiologyProcedureInference(IEnumerable<ImagingProcedure> imagingProcedures, OrderedProcedure orderedProcedure)
        {
            Argument.AssertNotNull(imagingProcedures, nameof(imagingProcedures));
            Argument.AssertNotNull(orderedProcedure, nameof(orderedProcedure));

            Kind = "radiologyProcedure";
            ProcedureCodes = new ChangeTrackingList<CodeableConcept>();
            ImagingProcedures = imagingProcedures.ToList();
            OrderedProcedure = orderedProcedure;
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyProcedureInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="procedureCodes"> The LOINC codes for the procedure. </param>
        /// <param name="imagingProcedures"> Imaging procedure. </param>
        /// <param name="orderedProcedure"> The related procedure information from the document administration information or as extracted from the document. </param>
        internal RadiologyProcedureInference(IReadOnlyList<Extension> extension, string kind, IReadOnlyList<CodeableConcept> procedureCodes, IReadOnlyList<ImagingProcedure> imagingProcedures, OrderedProcedure orderedProcedure) : base(extension, kind)
        {
            ProcedureCodes = procedureCodes;
            ImagingProcedures = imagingProcedures;
            OrderedProcedure = orderedProcedure;
        }

        /// <summary> The LOINC codes for the procedure. </summary>
        public IReadOnlyList<CodeableConcept> ProcedureCodes { get; }
        /// <summary> Imaging procedure. </summary>
        public IReadOnlyList<ImagingProcedure> ImagingProcedures { get; }
        /// <summary> The related procedure information from the document administration information or as extracted from the document. </summary>
        public OrderedProcedure OrderedProcedure { get; }
    }
}
