// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class Observation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Identifier))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteStartArray();
                foreach (var item in Identifier)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (Optional.IsCollectionDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStartArray();
                foreach (var item in Category)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("code"u8);
            writer.WriteObjectValue(Code);
            if (Optional.IsDefined(Subject))
            {
                writer.WritePropertyName("subject"u8);
                writer.WriteObjectValue(Subject);
            }
            if (Optional.IsDefined(Encounter))
            {
                writer.WritePropertyName("encounter"u8);
                writer.WriteObjectValue(Encounter);
            }
            if (Optional.IsDefined(EffectiveDateTime))
            {
                writer.WritePropertyName("effectiveDateTime"u8);
                writer.WriteStringValue(EffectiveDateTime);
            }
            if (Optional.IsDefined(EffectivePeriod))
            {
                writer.WritePropertyName("effectivePeriod"u8);
                writer.WriteObjectValue(EffectivePeriod);
            }
            if (Optional.IsDefined(EffectiveInstant))
            {
                writer.WritePropertyName("effectiveInstant"u8);
                writer.WriteStringValue(EffectiveInstant);
            }
            if (Optional.IsDefined(Issued))
            {
                writer.WritePropertyName("issued"u8);
                writer.WriteStringValue(Issued);
            }
            if (Optional.IsDefined(ValueQuantity))
            {
                writer.WritePropertyName("valueQuantity"u8);
                writer.WriteObjectValue(ValueQuantity);
            }
            if (Optional.IsDefined(ValueCodeableConcept))
            {
                writer.WritePropertyName("valueCodeableConcept"u8);
                writer.WriteObjectValue(ValueCodeableConcept);
            }
            if (Optional.IsDefined(ValueString))
            {
                writer.WritePropertyName("valueString"u8);
                writer.WriteStringValue(ValueString);
            }
            if (Optional.IsDefined(ValueBoolean))
            {
                writer.WritePropertyName("valueBoolean"u8);
                writer.WriteBooleanValue(ValueBoolean.Value);
            }
            if (Optional.IsDefined(ValueInteger))
            {
                writer.WritePropertyName("valueInteger"u8);
                writer.WriteNumberValue(ValueInteger.Value);
            }
            if (Optional.IsDefined(ValueRange))
            {
                writer.WritePropertyName("valueRange"u8);
                writer.WriteObjectValue(ValueRange);
            }
            if (Optional.IsDefined(ValueRatio))
            {
                writer.WritePropertyName("valueRatio"u8);
                writer.WriteObjectValue(ValueRatio);
            }
            if (Optional.IsDefined(ValueSampledData))
            {
                writer.WritePropertyName("valueSampledData"u8);
                writer.WriteObjectValue(ValueSampledData);
            }
            if (Optional.IsDefined(ValueTime))
            {
                writer.WritePropertyName("valueTime"u8);
                writer.WriteStringValue(ValueTime.Value, "T");
            }
            if (Optional.IsDefined(ValueDateTime))
            {
                writer.WritePropertyName("valueDateTime"u8);
                writer.WriteStringValue(ValueDateTime);
            }
            if (Optional.IsDefined(ValuePeriod))
            {
                writer.WritePropertyName("valuePeriod"u8);
                writer.WriteObjectValue(ValuePeriod);
            }
            if (Optional.IsDefined(DataAbsentReason))
            {
                writer.WritePropertyName("dataAbsentReason"u8);
                writer.WriteObjectValue(DataAbsentReason);
            }
            if (Optional.IsCollectionDefined(Interpretation))
            {
                writer.WritePropertyName("interpretation"u8);
                writer.WriteStartArray();
                foreach (var item in Interpretation)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Note))
            {
                writer.WritePropertyName("note"u8);
                writer.WriteStartArray();
                foreach (var item in Note)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BodySite))
            {
                writer.WritePropertyName("bodySite"u8);
                writer.WriteObjectValue(BodySite);
            }
            if (Optional.IsDefined(Method))
            {
                writer.WritePropertyName("method"u8);
                writer.WriteObjectValue(Method);
            }
            if (Optional.IsCollectionDefined(ReferenceRange))
            {
                writer.WritePropertyName("referenceRange"u8);
                writer.WriteStartArray();
                foreach (var item in ReferenceRange)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HasMember))
            {
                writer.WritePropertyName("hasMember"u8);
                writer.WriteStartArray();
                foreach (var item in HasMember)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DerivedFrom))
            {
                writer.WritePropertyName("derivedFrom"u8);
                writer.WriteStartArray();
                foreach (var item in DerivedFrom)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Component))
            {
                writer.WritePropertyName("component"u8);
                writer.WriteStartArray();
                foreach (var item in Component)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text"u8);
                writer.WriteObjectValue(Text);
            }
            if (Optional.IsCollectionDefined(Contained))
            {
                writer.WritePropertyName("contained"u8);
                writer.WriteStartArray();
                foreach (var item in Contained)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Extension))
            {
                writer.WritePropertyName("extension"u8);
                writer.WriteStartArray();
                foreach (var item in Extension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ModifierExtension))
            {
                writer.WritePropertyName("modifierExtension"u8);
                writer.WriteStartArray();
                foreach (var item in ModifierExtension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Meta))
            {
                writer.WritePropertyName("meta"u8);
                writer.WriteObjectValue(Meta);
            }
            if (Optional.IsDefined(ImplicitRules))
            {
                writer.WritePropertyName("implicitRules"u8);
                writer.WriteStringValue(ImplicitRules);
            }
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        internal static Observation DeserializeObservation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<Identifier>> identifier = default;
            ObservationStatusCodeType status = default;
            Optional<IList<CodeableConcept>> category = default;
            CodeableConcept code = default;
            Optional<Reference> subject = default;
            Optional<Reference> encounter = default;
            Optional<string> effectiveDateTime = default;
            Optional<Period> effectivePeriod = default;
            Optional<string> effectiveInstant = default;
            Optional<string> issued = default;
            Optional<Quantity> valueQuantity = default;
            Optional<CodeableConcept> valueCodeableConcept = default;
            Optional<string> valueString = default;
            Optional<bool> valueBoolean = default;
            Optional<int> valueInteger = default;
            Optional<Range> valueRange = default;
            Optional<Ratio> valueRatio = default;
            Optional<SampledData> valueSampledData = default;
            Optional<TimeSpan> valueTime = default;
            Optional<string> valueDateTime = default;
            Optional<Period> valuePeriod = default;
            Optional<CodeableConcept> dataAbsentReason = default;
            Optional<IList<CodeableConcept>> interpretation = default;
            Optional<IList<Annotation>> note = default;
            Optional<CodeableConcept> bodySite = default;
            Optional<CodeableConcept> method = default;
            Optional<IList<ObservationReferenceRange>> referenceRange = default;
            Optional<IList<Reference>> hasMember = default;
            Optional<IList<Reference>> derivedFrom = default;
            Optional<IList<ObservationComponent>> component = default;
            Optional<Narrative> text = default;
            Optional<IList<Resource>> contained = default;
            Optional<IList<Extension>> extension = default;
            Optional<IList<Extension>> modifierExtension = default;
            string resourceType = default;
            Optional<string> id = default;
            Optional<Meta> meta = default;
            Optional<string> implicitRules = default;
            Optional<string> language = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Identifier> array = new List<Identifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RadiologyInsights.Identifier.DeserializeIdentifier(item));
                    }
                    identifier = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new ObservationStatusCodeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CodeableConcept> array = new List<CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodeableConcept.DeserializeCodeableConcept(item));
                    }
                    category = array;
                    continue;
                }
                if (property.NameEquals("code"u8))
                {
                    code = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subject = Reference.DeserializeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("encounter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    encounter = Reference.DeserializeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("effectiveDateTime"u8))
                {
                    effectiveDateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("effectivePeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    effectivePeriod = Period.DeserializePeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("effectiveInstant"u8))
                {
                    effectiveInstant = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("issued"u8))
                {
                    issued = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valueQuantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueQuantity = Quantity.DeserializeQuantity(property.Value);
                    continue;
                }
                if (property.NameEquals("valueCodeableConcept"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueCodeableConcept = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("valueString"u8))
                {
                    valueString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valueBoolean"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueBoolean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("valueInteger"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueInteger = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("valueRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueRange = Range.DeserializeRange(property.Value);
                    continue;
                }
                if (property.NameEquals("valueRatio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueRatio = Ratio.DeserializeRatio(property.Value);
                    continue;
                }
                if (property.NameEquals("valueSampledData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueSampledData = SampledData.DeserializeSampledData(property.Value);
                    continue;
                }
                if (property.NameEquals("valueTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueTime = property.Value.GetTimeSpan("T");
                    continue;
                }
                if (property.NameEquals("valueDateTime"u8))
                {
                    valueDateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valuePeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valuePeriod = Period.DeserializePeriod(property.Value);
                    continue;
                }
                if (property.NameEquals("dataAbsentReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataAbsentReason = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("interpretation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CodeableConcept> array = new List<CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodeableConcept.DeserializeCodeableConcept(item));
                    }
                    interpretation = array;
                    continue;
                }
                if (property.NameEquals("note"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Annotation> array = new List<Annotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Annotation.DeserializeAnnotation(item));
                    }
                    note = array;
                    continue;
                }
                if (property.NameEquals("bodySite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bodySite = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("method"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    method = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("referenceRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservationReferenceRange> array = new List<ObservationReferenceRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservationReferenceRange.DeserializeObservationReferenceRange(item));
                    }
                    referenceRange = array;
                    continue;
                }
                if (property.NameEquals("hasMember"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Reference> array = new List<Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Reference.DeserializeReference(item));
                    }
                    hasMember = array;
                    continue;
                }
                if (property.NameEquals("derivedFrom"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Reference> array = new List<Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Reference.DeserializeReference(item));
                    }
                    derivedFrom = array;
                    continue;
                }
                if (property.NameEquals("component"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ObservationComponent> array = new List<ObservationComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ObservationComponent.DeserializeObservationComponent(item));
                    }
                    component = array;
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    text = Narrative.DeserializeNarrative(property.Value);
                    continue;
                }
                if (property.NameEquals("contained"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Resource> array = new List<Resource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeResource(item));
                    }
                    contained = array;
                    continue;
                }
                if (property.NameEquals("extension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Extension> array = new List<Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RadiologyInsights.Extension.DeserializeExtension(item));
                    }
                    extension = array;
                    continue;
                }
                if (property.NameEquals("modifierExtension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Extension> array = new List<Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RadiologyInsights.Extension.DeserializeExtension(item));
                    }
                    modifierExtension = array;
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meta"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meta = Meta.DeserializeMeta(property.Value);
                    continue;
                }
                if (property.NameEquals("implicitRules"u8))
                {
                    implicitRules = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new Observation(resourceType, id.Value, meta.Value, implicitRules.Value, language.Value, additionalProperties, text.Value, Optional.ToList(contained), Optional.ToList(extension), Optional.ToList(modifierExtension), Optional.ToList(identifier), status, Optional.ToList(category), code, subject.Value, encounter.Value, effectiveDateTime.Value, effectivePeriod.Value, effectiveInstant.Value, issued.Value, valueQuantity.Value, valueCodeableConcept.Value, valueString.Value, Optional.ToNullable(valueBoolean), Optional.ToNullable(valueInteger), valueRange.Value, valueRatio.Value, valueSampledData.Value, Optional.ToNullable(valueTime), valueDateTime.Value, valuePeriod.Value, dataAbsentReason.Value, Optional.ToList(interpretation), Optional.ToList(note), bodySite.Value, method.Value, Optional.ToList(referenceRange), Optional.ToList(hasMember), Optional.ToList(derivedFrom), Optional.ToList(component));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new Observation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeObservation(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
