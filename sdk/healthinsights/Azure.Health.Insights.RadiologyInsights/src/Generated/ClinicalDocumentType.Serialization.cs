// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Health.Insights.RadiologyInsights
{
    internal static partial class ClinicalDocumentTypeExtensions
    {
        public static string ToSerialString(this ClinicalDocumentType value) => value switch
        {
            ClinicalDocumentType.Consultation => "consultation",
            ClinicalDocumentType.DischargeSummary => "dischargeSummary",
            ClinicalDocumentType.HistoryAndPhysical => "historyAndPhysical",
            ClinicalDocumentType.RadiologyReport => "radiologyReport",
            ClinicalDocumentType.Procedure => "procedure",
            ClinicalDocumentType.Progress => "progress",
            ClinicalDocumentType.Laboratory => "laboratory",
            ClinicalDocumentType.PathologyReport => "pathologyReport",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ClinicalDocumentType value.")
        };

        public static ClinicalDocumentType ToClinicalDocumentType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "consultation")) return ClinicalDocumentType.Consultation;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "dischargeSummary")) return ClinicalDocumentType.DischargeSummary;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "historyAndPhysical")) return ClinicalDocumentType.HistoryAndPhysical;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "radiologyReport")) return ClinicalDocumentType.RadiologyReport;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "procedure")) return ClinicalDocumentType.Procedure;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "progress")) return ClinicalDocumentType.Progress;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "laboratory")) return ClinicalDocumentType.Laboratory;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pathologyReport")) return ClinicalDocumentType.PathologyReport;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ClinicalDocumentType value.");
        }
    }
}
