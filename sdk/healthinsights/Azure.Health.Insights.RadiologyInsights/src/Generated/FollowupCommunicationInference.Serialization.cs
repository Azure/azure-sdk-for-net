// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class FollowupCommunicationInference
    {
        internal static FollowupCommunicationInference DeserializeFollowupCommunicationInference(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<DateTimeOffset>> dateTime = default;
            Optional<IReadOnlyList<string>> recipient = default;
            bool wasAcknowledged = default;
            string kind = default;
            Optional<IReadOnlyList<Extension>> extension = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DateTimeOffset> array = new List<DateTimeOffset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDateTimeOffset("O"));
                    }
                    dateTime = array;
                    continue;
                }
                if (property.NameEquals("recipient"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    recipient = array;
                    continue;
                }
                if (property.NameEquals("wasAcknowledged"u8))
                {
                    wasAcknowledged = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Extension> array = new List<Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RadiologyInsights.Extension.DeserializeExtension(item));
                    }
                    extension = array;
                    continue;
                }
            }
            return new FollowupCommunicationInference(Optional.ToList(extension), kind, Optional.ToList(dateTime), Optional.ToList(recipient), wasAcknowledged);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new FollowupCommunicationInference FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFollowupCommunicationInference(document.RootElement);
        }
    }
}
