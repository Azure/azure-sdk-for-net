// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class ImagingProcedure
    {
        internal static ImagingProcedure DeserializeImagingProcedure(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CodeableConcept modality = default;
            CodeableConcept anatomy = default;
            Optional<CodeableConcept> laterality = default;
            Optional<RadiologyCodeWithTypes> contrast = default;
            Optional<RadiologyCodeWithTypes> view = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("modality"u8))
                {
                    modality = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("anatomy"u8))
                {
                    anatomy = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("laterality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    laterality = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("contrast"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contrast = RadiologyCodeWithTypes.DeserializeRadiologyCodeWithTypes(property.Value);
                    continue;
                }
                if (property.NameEquals("view"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    view = RadiologyCodeWithTypes.DeserializeRadiologyCodeWithTypes(property.Value);
                    continue;
                }
            }
            return new ImagingProcedure(modality, anatomy, laterality.Value, contrast.Value, view.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ImagingProcedure FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeImagingProcedure(document.RootElement);
        }
    }
}
