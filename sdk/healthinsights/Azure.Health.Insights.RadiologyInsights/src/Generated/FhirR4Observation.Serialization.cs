// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    internal partial class FhirR4Observation : IUtf8JsonSerializable, IJsonModel<FhirR4Observation>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FhirR4Observation>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<FhirR4Observation>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4Observation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FhirR4Observation)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (!(Identifier is ChangeTrackingList<FhirR4Identifier> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteStartArray();
                foreach (var item in Identifier)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            if (!(Category is ChangeTrackingList<FhirR4CodeableConcept> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStartArray();
                foreach (var item in Category)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("code"u8);
            writer.WriteObjectValue(Code);
            if (Subject != null)
            {
                writer.WritePropertyName("subject"u8);
                writer.WriteObjectValue(Subject);
            }
            if (Encounter != null)
            {
                writer.WritePropertyName("encounter"u8);
                writer.WriteObjectValue(Encounter);
            }
            if (EffectiveDateTime != null)
            {
                writer.WritePropertyName("effectiveDateTime"u8);
                writer.WriteStringValue(EffectiveDateTime);
            }
            if (EffectivePeriod != null)
            {
                writer.WritePropertyName("effectivePeriod"u8);
                writer.WriteObjectValue(EffectivePeriod);
            }
            if (EffectiveInstant != null)
            {
                writer.WritePropertyName("effectiveInstant"u8);
                writer.WriteStringValue(EffectiveInstant);
            }
            if (Issued != null)
            {
                writer.WritePropertyName("issued"u8);
                writer.WriteStringValue(Issued);
            }
            if (ValueQuantity != null)
            {
                writer.WritePropertyName("valueQuantity"u8);
                writer.WriteObjectValue(ValueQuantity);
            }
            if (ValueCodeableConcept != null)
            {
                writer.WritePropertyName("valueCodeableConcept"u8);
                writer.WriteObjectValue(ValueCodeableConcept);
            }
            if (ValueString != null)
            {
                writer.WritePropertyName("valueString"u8);
                writer.WriteStringValue(ValueString);
            }
            if (ValueBoolean.HasValue)
            {
                writer.WritePropertyName("valueBoolean"u8);
                writer.WriteBooleanValue(ValueBoolean.Value);
            }
            if (ValueInteger.HasValue)
            {
                writer.WritePropertyName("valueInteger"u8);
                writer.WriteNumberValue(ValueInteger.Value);
            }
            if (ValueRange != null)
            {
                writer.WritePropertyName("valueRange"u8);
                writer.WriteObjectValue(ValueRange);
            }
            if (ValueRatio != null)
            {
                writer.WritePropertyName("valueRatio"u8);
                writer.WriteObjectValue(ValueRatio);
            }
            if (ValueSampledData != null)
            {
                writer.WritePropertyName("valueSampledData"u8);
                writer.WriteObjectValue(ValueSampledData);
            }
            if (ValueTime.HasValue)
            {
                writer.WritePropertyName("valueTime"u8);
                writer.WriteStringValue(ValueTime.Value, "T");
            }
            if (ValueDateTime != null)
            {
                writer.WritePropertyName("valueDateTime"u8);
                writer.WriteStringValue(ValueDateTime);
            }
            if (ValuePeriod != null)
            {
                writer.WritePropertyName("valuePeriod"u8);
                writer.WriteObjectValue(ValuePeriod);
            }
            if (DataAbsentReason != null)
            {
                writer.WritePropertyName("dataAbsentReason"u8);
                writer.WriteObjectValue(DataAbsentReason);
            }
            if (!(Interpretation is ChangeTrackingList<FhirR4CodeableConcept> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("interpretation"u8);
                writer.WriteStartArray();
                foreach (var item in Interpretation)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Note is ChangeTrackingList<FhirR4Annotation> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("note"u8);
                writer.WriteStartArray();
                foreach (var item in Note)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (BodySite != null)
            {
                writer.WritePropertyName("bodySite"u8);
                writer.WriteObjectValue(BodySite);
            }
            if (Method != null)
            {
                writer.WritePropertyName("method"u8);
                writer.WriteObjectValue(Method);
            }
            if (!(ReferenceRange is ChangeTrackingList<FhirR4ObservationReferenceRange> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("referenceRange"u8);
                writer.WriteStartArray();
                foreach (var item in ReferenceRange)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(HasMember is ChangeTrackingList<FhirR4Reference> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("hasMember"u8);
                writer.WriteStartArray();
                foreach (var item in HasMember)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(DerivedFrom is ChangeTrackingList<FhirR4Reference> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("derivedFrom"u8);
                writer.WriteStartArray();
                foreach (var item in DerivedFrom)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Component is ChangeTrackingList<FhirR4ObservationComponent> collection6 && collection6.IsUndefined))
            {
                writer.WritePropertyName("component"u8);
                writer.WriteStartArray();
                foreach (var item in Component)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Text != null)
            {
                writer.WritePropertyName("text"u8);
                writer.WriteObjectValue(Text);
            }
            if (!(Contained is ChangeTrackingList<FhirR4Resource> collection7 && collection7.IsUndefined))
            {
                writer.WritePropertyName("contained"u8);
                writer.WriteStartArray();
                foreach (var item in Contained)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Extension is ChangeTrackingList<FhirR4Extension> collection8 && collection8.IsUndefined))
            {
                writer.WritePropertyName("extension"u8);
                writer.WriteStartArray();
                foreach (var item in Extension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ModifierExtension is ChangeTrackingList<FhirR4Extension> collection9 && collection9.IsUndefined))
            {
                writer.WritePropertyName("modifierExtension"u8);
                writer.WriteStartArray();
                foreach (var item in ModifierExtension)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("resourceType"u8);
            writer.WriteStringValue(ResourceType);
            if (Id != null)
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Meta != null)
            {
                writer.WritePropertyName("meta"u8);
                writer.WriteObjectValue(Meta);
            }
            if (ImplicitRules != null)
            {
                writer.WritePropertyName("implicitRules"u8);
                writer.WriteStringValue(ImplicitRules);
            }
            if (Language != null)
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        FhirR4Observation IJsonModel<FhirR4Observation>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4Observation>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FhirR4Observation)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFhirR4Observation(document.RootElement, options);
        }

        internal static FhirR4Observation DeserializeFhirR4Observation(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<FhirR4Identifier> identifier = default;
            ObservationStatusCodeType status = default;
            IList<FhirR4CodeableConcept> category = default;
            FhirR4CodeableConcept code = default;
            FhirR4Reference subject = default;
            FhirR4Reference encounter = default;
            string effectiveDateTime = default;
            FhirR4Period effectivePeriod = default;
            string effectiveInstant = default;
            string issued = default;
            FhirR4Quantity valueQuantity = default;
            FhirR4CodeableConcept valueCodeableConcept = default;
            string valueString = default;
            bool? valueBoolean = default;
            int? valueInteger = default;
            FhirR4Range valueRange = default;
            FhirR4Ratio valueRatio = default;
            FhirR4SampledData valueSampledData = default;
            TimeSpan? valueTime = default;
            string valueDateTime = default;
            FhirR4Period valuePeriod = default;
            FhirR4CodeableConcept dataAbsentReason = default;
            IList<FhirR4CodeableConcept> interpretation = default;
            IList<FhirR4Annotation> note = default;
            FhirR4CodeableConcept bodySite = default;
            FhirR4CodeableConcept method = default;
            IList<FhirR4ObservationReferenceRange> referenceRange = default;
            IList<FhirR4Reference> hasMember = default;
            IList<FhirR4Reference> derivedFrom = default;
            IList<FhirR4ObservationComponent> component = default;
            FhirR4Narrative text = default;
            IList<FhirR4Resource> contained = default;
            IList<FhirR4Extension> extension = default;
            IList<FhirR4Extension> modifierExtension = default;
            string resourceType = default;
            string id = default;
            FhirR4Meta meta = default;
            string implicitRules = default;
            string language = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Identifier> array = new List<FhirR4Identifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Identifier.DeserializeFhirR4Identifier(item, options));
                    }
                    identifier = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new ObservationStatusCodeType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item, options));
                    }
                    category = array;
                    continue;
                }
                if (property.NameEquals("code"u8))
                {
                    code = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value, options);
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subject = FhirR4Reference.DeserializeFhirR4Reference(property.Value, options);
                    continue;
                }
                if (property.NameEquals("encounter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    encounter = FhirR4Reference.DeserializeFhirR4Reference(property.Value, options);
                    continue;
                }
                if (property.NameEquals("effectiveDateTime"u8))
                {
                    effectiveDateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("effectivePeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    effectivePeriod = FhirR4Period.DeserializeFhirR4Period(property.Value, options);
                    continue;
                }
                if (property.NameEquals("effectiveInstant"u8))
                {
                    effectiveInstant = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("issued"u8))
                {
                    issued = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valueQuantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueQuantity = FhirR4Quantity.DeserializeFhirR4Quantity(property.Value, options);
                    continue;
                }
                if (property.NameEquals("valueCodeableConcept"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueCodeableConcept = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value, options);
                    continue;
                }
                if (property.NameEquals("valueString"u8))
                {
                    valueString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valueBoolean"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueBoolean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("valueInteger"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueInteger = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("valueRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueRange = FhirR4Range.DeserializeFhirR4Range(property.Value, options);
                    continue;
                }
                if (property.NameEquals("valueRatio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueRatio = FhirR4Ratio.DeserializeFhirR4Ratio(property.Value, options);
                    continue;
                }
                if (property.NameEquals("valueSampledData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueSampledData = FhirR4SampledData.DeserializeFhirR4SampledData(property.Value, options);
                    continue;
                }
                if (property.NameEquals("valueTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valueTime = property.Value.GetTimeSpan("T");
                    continue;
                }
                if (property.NameEquals("valueDateTime"u8))
                {
                    valueDateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("valuePeriod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    valuePeriod = FhirR4Period.DeserializeFhirR4Period(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataAbsentReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataAbsentReason = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value, options);
                    continue;
                }
                if (property.NameEquals("interpretation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item, options));
                    }
                    interpretation = array;
                    continue;
                }
                if (property.NameEquals("note"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Annotation> array = new List<FhirR4Annotation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Annotation.DeserializeFhirR4Annotation(item, options));
                    }
                    note = array;
                    continue;
                }
                if (property.NameEquals("bodySite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bodySite = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value, options);
                    continue;
                }
                if (property.NameEquals("method"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    method = FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(property.Value, options);
                    continue;
                }
                if (property.NameEquals("referenceRange"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4ObservationReferenceRange> array = new List<FhirR4ObservationReferenceRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4ObservationReferenceRange.DeserializeFhirR4ObservationReferenceRange(item, options));
                    }
                    referenceRange = array;
                    continue;
                }
                if (property.NameEquals("hasMember"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item, options));
                    }
                    hasMember = array;
                    continue;
                }
                if (property.NameEquals("derivedFrom"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Reference> array = new List<FhirR4Reference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Reference.DeserializeFhirR4Reference(item, options));
                    }
                    derivedFrom = array;
                    continue;
                }
                if (property.NameEquals("component"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4ObservationComponent> array = new List<FhirR4ObservationComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4ObservationComponent.DeserializeFhirR4ObservationComponent(item, options));
                    }
                    component = array;
                    continue;
                }
                if (property.NameEquals("text"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    text = FhirR4Narrative.DeserializeFhirR4Narrative(property.Value, options);
                    continue;
                }
                if (property.NameEquals("contained"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Resource> array = new List<FhirR4Resource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeFhirR4Resource(item, options));
                    }
                    contained = array;
                    continue;
                }
                if (property.NameEquals("extension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Extension> array = new List<FhirR4Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Extension.DeserializeFhirR4Extension(item, options));
                    }
                    extension = array;
                    continue;
                }
                if (property.NameEquals("modifierExtension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4Extension> array = new List<FhirR4Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4Extension.DeserializeFhirR4Extension(item, options));
                    }
                    modifierExtension = array;
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("meta"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    meta = FhirR4Meta.DeserializeFhirR4Meta(property.Value, options);
                    continue;
                }
                if (property.NameEquals("implicitRules"u8))
                {
                    implicitRules = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new FhirR4Observation(
                resourceType,
                id,
                meta,
                implicitRules,
                language,
                additionalProperties,
                text,
                contained ?? new ChangeTrackingList<FhirR4Resource>(),
                extension ?? new ChangeTrackingList<FhirR4Extension>(),
                modifierExtension ?? new ChangeTrackingList<FhirR4Extension>(),
                identifier ?? new ChangeTrackingList<FhirR4Identifier>(),
                status,
                category ?? new ChangeTrackingList<FhirR4CodeableConcept>(),
                code,
                subject,
                encounter,
                effectiveDateTime,
                effectivePeriod,
                effectiveInstant,
                issued,
                valueQuantity,
                valueCodeableConcept,
                valueString,
                valueBoolean,
                valueInteger,
                valueRange,
                valueRatio,
                valueSampledData,
                valueTime,
                valueDateTime,
                valuePeriod,
                dataAbsentReason,
                interpretation ?? new ChangeTrackingList<FhirR4CodeableConcept>(),
                note ?? new ChangeTrackingList<FhirR4Annotation>(),
                bodySite,
                method,
                referenceRange ?? new ChangeTrackingList<FhirR4ObservationReferenceRange>(),
                hasMember ?? new ChangeTrackingList<FhirR4Reference>(),
                derivedFrom ?? new ChangeTrackingList<FhirR4Reference>(),
                component ?? new ChangeTrackingList<FhirR4ObservationComponent>());
        }

        BinaryData IPersistableModel<FhirR4Observation>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4Observation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FhirR4Observation)} does not support '{options.Format}' format.");
            }
        }

        FhirR4Observation IPersistableModel<FhirR4Observation>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FhirR4Observation>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFhirR4Observation(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FhirR4Observation)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<FhirR4Observation>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new FhirR4Observation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFhirR4Observation(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
