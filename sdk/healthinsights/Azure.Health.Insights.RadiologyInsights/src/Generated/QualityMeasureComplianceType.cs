// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Whether the document is compliant. </summary>
    public readonly partial struct QualityMeasureComplianceType : IEquatable<QualityMeasureComplianceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QualityMeasureComplianceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QualityMeasureComplianceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotEligibleValue = "notEligible";
        private const string PerformanceNotMetValue = "performanceNotMet";
        private const string PerformanceMetValue = "performanceMet";
        private const string DenominatorExceptionValue = "denominatorException";

        /// <summary> not eligible. </summary>
        public static QualityMeasureComplianceType NotEligible { get; } = new QualityMeasureComplianceType(NotEligibleValue);
        /// <summary> performance not met. </summary>
        public static QualityMeasureComplianceType PerformanceNotMet { get; } = new QualityMeasureComplianceType(PerformanceNotMetValue);
        /// <summary> performance met. </summary>
        public static QualityMeasureComplianceType PerformanceMet { get; } = new QualityMeasureComplianceType(PerformanceMetValue);
        /// <summary> denominator exception. </summary>
        public static QualityMeasureComplianceType DenominatorException { get; } = new QualityMeasureComplianceType(DenominatorExceptionValue);
        /// <summary> Determines if two <see cref="QualityMeasureComplianceType"/> values are the same. </summary>
        public static bool operator ==(QualityMeasureComplianceType left, QualityMeasureComplianceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QualityMeasureComplianceType"/> values are not the same. </summary>
        public static bool operator !=(QualityMeasureComplianceType left, QualityMeasureComplianceType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="QualityMeasureComplianceType"/>. </summary>
        public static implicit operator QualityMeasureComplianceType(string value) => new QualityMeasureComplianceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QualityMeasureComplianceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QualityMeasureComplianceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
