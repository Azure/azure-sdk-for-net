// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class CompleteOrderDiscrepancyInference
    {
        internal static CompleteOrderDiscrepancyInference DeserializeCompleteOrderDiscrepancyInference(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CodeableConcept orderType = default;
            Optional<IReadOnlyList<CodeableConcept>> missingBodyParts = default;
            Optional<IReadOnlyList<CodeableConcept>> missingBodyPartMeasurements = default;
            string kind = default;
            Optional<IReadOnlyList<Extension>> extension = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("orderType"u8))
                {
                    orderType = CodeableConcept.DeserializeCodeableConcept(property.Value);
                    continue;
                }
                if (property.NameEquals("missingBodyParts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CodeableConcept> array = new List<CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodeableConcept.DeserializeCodeableConcept(item));
                    }
                    missingBodyParts = array;
                    continue;
                }
                if (property.NameEquals("missingBodyPartMeasurements"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CodeableConcept> array = new List<CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CodeableConcept.DeserializeCodeableConcept(item));
                    }
                    missingBodyPartMeasurements = array;
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extension"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Extension> array = new List<Extension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RadiologyInsights.Extension.DeserializeExtension(item));
                    }
                    extension = array;
                    continue;
                }
            }
            return new CompleteOrderDiscrepancyInference(Optional.ToList(extension), kind, orderType, Optional.ToList(missingBodyParts), Optional.ToList(missingBodyPartMeasurements));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new CompleteOrderDiscrepancyInference FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeCompleteOrderDiscrepancyInference(document.RootElement);
        }
    }
}
