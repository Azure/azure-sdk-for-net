// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary>
    /// Detailed information about observations
    /// Based on [FHIR Observation](https://www.hl7.org/fhir/R4/observation.html)
    /// </summary>
    public partial class Observation : DomainResource
    {
        /// <summary> Initializes a new instance of <see cref="Observation"/>. </summary>
        /// <param name="status"> registered | preliminary | final | amended +. </param>
        /// <param name="code"> Type of observation (code / type). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/> is null. </exception>
        public Observation(ObservationStatusCodeType status, CodeableConcept code) : base("Observation")
        {
            Argument.AssertNotNull(code, nameof(code));

            Identifier = new ChangeTrackingList<Identifier>();
            Status = status;
            Category = new ChangeTrackingList<CodeableConcept>();
            Code = code;
            Interpretation = new ChangeTrackingList<CodeableConcept>();
            Note = new ChangeTrackingList<Annotation>();
            ReferenceRange = new ChangeTrackingList<ObservationReferenceRange>();
            HasMember = new ChangeTrackingList<Reference>();
            DerivedFrom = new ChangeTrackingList<Reference>();
            Component = new ChangeTrackingList<ObservationComponent>();
        }

        /// <summary> Initializes a new instance of <see cref="Observation"/>. </summary>
        /// <param name="resourceType"> The type of resource. </param>
        /// <param name="id"> Resource Id. </param>
        /// <param name="meta"> Metadata about the resource. </param>
        /// <param name="implicitRules"> A set of rules under which this content was created. </param>
        /// <param name="language"> Language of the resource content. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="text"> Text summary of the resource, for human interpretation. </param>
        /// <param name="contained"> Contained, inline Resources. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="modifierExtension"> Extensions that cannot be ignored. </param>
        /// <param name="identifier"> Business Identifier for observation. </param>
        /// <param name="status"> registered | preliminary | final | amended +. </param>
        /// <param name="category"> Classification of  type of observation. </param>
        /// <param name="code"> Type of observation (code / type). </param>
        /// <param name="subject"> Who and/or what the observation is about. </param>
        /// <param name="encounter"> Healthcare event during which this observation is made. </param>
        /// <param name="effectiveDateTime"> Clinically relevant time/time-period for observation. </param>
        /// <param name="effectivePeriod"> Clinically relevant time/time-period for observation. </param>
        /// <param name="effectiveInstant"> Clinically relevant time/time-period for observation. </param>
        /// <param name="issued"> Date/Time this version was made available. </param>
        /// <param name="valueQuantity"> Actual result. </param>
        /// <param name="valueCodeableConcept"> Actual result. </param>
        /// <param name="valueString"> Actual result. </param>
        /// <param name="valueBoolean"> Actual result. </param>
        /// <param name="valueInteger"> Actual result. </param>
        /// <param name="valueRange"> Actual result. </param>
        /// <param name="valueRatio"> Actual result. </param>
        /// <param name="valueSampledData"> Actual result. </param>
        /// <param name="valueTime"> Actual result. </param>
        /// <param name="valueDateTime"> Actual result. </param>
        /// <param name="valuePeriod"> Actual result. </param>
        /// <param name="dataAbsentReason"> Why the result is missing. </param>
        /// <param name="interpretation"> High, low, normal, etc. </param>
        /// <param name="note"> Comments about the observation. </param>
        /// <param name="bodySite"> Observed body part. </param>
        /// <param name="method"> How it was done. </param>
        /// <param name="referenceRange"> Provides guide for interpretation. </param>
        /// <param name="hasMember"> Related resource that belongs to the Observation group. </param>
        /// <param name="derivedFrom"> Related measurements the observation is made from. </param>
        /// <param name="component"> Component results. </param>
        internal Observation(string resourceType, string id, Meta meta, string implicitRules, string language, IDictionary<string, BinaryData> additionalProperties, Narrative text, IList<Resource> contained, IList<Extension> extension, IList<Extension> modifierExtension, IList<Identifier> identifier, ObservationStatusCodeType status, IList<CodeableConcept> category, CodeableConcept code, Reference subject, Reference encounter, string effectiveDateTime, Period effectivePeriod, string effectiveInstant, string issued, Quantity valueQuantity, CodeableConcept valueCodeableConcept, string valueString, bool? valueBoolean, int? valueInteger, Range valueRange, Ratio valueRatio, SampledData valueSampledData, TimeSpan? valueTime, string valueDateTime, Period valuePeriod, CodeableConcept dataAbsentReason, IList<CodeableConcept> interpretation, IList<Annotation> note, CodeableConcept bodySite, CodeableConcept method, IList<ObservationReferenceRange> referenceRange, IList<Reference> hasMember, IList<Reference> derivedFrom, IList<ObservationComponent> component) : base(resourceType, id, meta, implicitRules, language, additionalProperties, text, contained, extension, modifierExtension)
        {
            Identifier = identifier;
            Status = status;
            Category = category;
            Code = code;
            Subject = subject;
            Encounter = encounter;
            EffectiveDateTime = effectiveDateTime;
            EffectivePeriod = effectivePeriod;
            EffectiveInstant = effectiveInstant;
            Issued = issued;
            ValueQuantity = valueQuantity;
            ValueCodeableConcept = valueCodeableConcept;
            ValueString = valueString;
            ValueBoolean = valueBoolean;
            ValueInteger = valueInteger;
            ValueRange = valueRange;
            ValueRatio = valueRatio;
            ValueSampledData = valueSampledData;
            ValueTime = valueTime;
            ValueDateTime = valueDateTime;
            ValuePeriod = valuePeriod;
            DataAbsentReason = dataAbsentReason;
            Interpretation = interpretation;
            Note = note;
            BodySite = bodySite;
            Method = method;
            ReferenceRange = referenceRange;
            HasMember = hasMember;
            DerivedFrom = derivedFrom;
            Component = component;
        }

        /// <summary> Initializes a new instance of <see cref="Observation"/> for deserialization. </summary>
        internal Observation()
        {
        }

        /// <summary> Business Identifier for observation. </summary>
        public IList<Identifier> Identifier { get; }
        /// <summary> registered | preliminary | final | amended +. </summary>
        public ObservationStatusCodeType Status { get; set; }
        /// <summary> Classification of  type of observation. </summary>
        public IList<CodeableConcept> Category { get; }
        /// <summary> Type of observation (code / type). </summary>
        public CodeableConcept Code { get; set; }
        /// <summary> Who and/or what the observation is about. </summary>
        public Reference Subject { get; set; }
        /// <summary> Healthcare event during which this observation is made. </summary>
        public Reference Encounter { get; set; }
        /// <summary> Clinically relevant time/time-period for observation. </summary>
        public string EffectiveDateTime { get; set; }
        /// <summary> Clinically relevant time/time-period for observation. </summary>
        public Period EffectivePeriod { get; set; }
        /// <summary> Clinically relevant time/time-period for observation. </summary>
        public string EffectiveInstant { get; set; }
        /// <summary> Date/Time this version was made available. </summary>
        public string Issued { get; set; }
        /// <summary> Actual result. </summary>
        public Quantity ValueQuantity { get; set; }
        /// <summary> Actual result. </summary>
        public CodeableConcept ValueCodeableConcept { get; set; }
        /// <summary> Actual result. </summary>
        public string ValueString { get; set; }
        /// <summary> Actual result. </summary>
        public bool? ValueBoolean { get; set; }
        /// <summary> Actual result. </summary>
        public int? ValueInteger { get; set; }
        /// <summary> Actual result. </summary>
        public Range ValueRange { get; set; }
        /// <summary> Actual result. </summary>
        public Ratio ValueRatio { get; set; }
        /// <summary> Actual result. </summary>
        public SampledData ValueSampledData { get; set; }
        /// <summary> Actual result. </summary>
        public TimeSpan? ValueTime { get; set; }
        /// <summary> Actual result. </summary>
        public string ValueDateTime { get; set; }
        /// <summary> Actual result. </summary>
        public Period ValuePeriod { get; set; }
        /// <summary> Why the result is missing. </summary>
        public CodeableConcept DataAbsentReason { get; set; }
        /// <summary> High, low, normal, etc. </summary>
        public IList<CodeableConcept> Interpretation { get; }
        /// <summary> Comments about the observation. </summary>
        public IList<Annotation> Note { get; }
        /// <summary> Observed body part. </summary>
        public CodeableConcept BodySite { get; set; }
        /// <summary> How it was done. </summary>
        public CodeableConcept Method { get; set; }
        /// <summary> Provides guide for interpretation. </summary>
        public IList<ObservationReferenceRange> ReferenceRange { get; }
        /// <summary> Related resource that belongs to the Observation group. </summary>
        public IList<Reference> HasMember { get; }
        /// <summary> Related measurements the observation is made from. </summary>
        public IList<Reference> DerivedFrom { get; }
        /// <summary> Component results. </summary>
        public IList<ObservationComponent> Component { get; }
    }
}
