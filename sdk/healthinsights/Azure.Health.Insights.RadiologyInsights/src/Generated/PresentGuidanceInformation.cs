// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> An item of the structured information (e.g. laterality or size) and one or more corresponding details (e.g. left or size-value). </summary>
    public partial class PresentGuidanceInformation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PresentGuidanceInformation"/>. </summary>
        /// <param name="presentGuidanceItem"> The item of the structured information. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="presentGuidanceItem"/> is null. </exception>
        internal PresentGuidanceInformation(string presentGuidanceItem)
        {
            Argument.AssertNotNull(presentGuidanceItem, nameof(presentGuidanceItem));

            PresentGuidanceItem = presentGuidanceItem;
            Sizes = new ChangeTrackingList<FhirR4Observation>();
            PresentGuidanceValues = new ChangeTrackingList<string>();
            Extension = new ChangeTrackingList<FhirR4Extension>();
        }

        /// <summary> Initializes a new instance of <see cref="PresentGuidanceInformation"/>. </summary>
        /// <param name="presentGuidanceItem"> The item of the structured information. </param>
        /// <param name="sizes"> A list of size values, if the item is about size. </param>
        /// <param name="maximumDiameterAsInText"> The maximum diameter value, if the item is about the maximum diameter. </param>
        /// <param name="presentGuidanceValues"> The list of item values that are mentioned in the report. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PresentGuidanceInformation(string presentGuidanceItem, IReadOnlyList<FhirR4Observation> sizes, FhirR4Quantity maximumDiameterAsInText, IReadOnlyList<string> presentGuidanceValues, IReadOnlyList<FhirR4Extension> extension, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PresentGuidanceItem = presentGuidanceItem;
            Sizes = sizes;
            MaximumDiameterAsInText = maximumDiameterAsInText;
            PresentGuidanceValues = presentGuidanceValues;
            Extension = extension;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PresentGuidanceInformation"/> for deserialization. </summary>
        internal PresentGuidanceInformation()
        {
        }

        /// <summary> The item of the structured information. </summary>
        public string PresentGuidanceItem { get; }
        /// <summary> A list of size values, if the item is about size. </summary>
        public IReadOnlyList<FhirR4Observation> Sizes { get; }
        /// <summary> The maximum diameter value, if the item is about the maximum diameter. </summary>
        public FhirR4Quantity MaximumDiameterAsInText { get; }
        /// <summary> The list of item values that are mentioned in the report. </summary>
        public IReadOnlyList<string> PresentGuidanceValues { get; }
        /// <summary> Additional Content defined by implementations. </summary>
        public IReadOnlyList<FhirR4Extension> Extension { get; }
    }
}
