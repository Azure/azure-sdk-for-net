// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary>
    /// Laterality discrepancy, returns in 3 different cases:
    /// OrderLateralityMismatch: there is a discrepancy between the text and the procedure/order related to the clinical document.
    /// TextLateralityContradiction: there is a contradiction within the text of the clinical document.
    /// TextLateralityMissing: laterality is missing/not mentioned in the clinical document.
    /// </summary>
    public partial class LateralityDiscrepancyInference : RadiologyInsightsInference
    {
        /// <summary> Initializes a new instance of <see cref="LateralityDiscrepancyInference"/>. </summary>
        /// <param name="discrepancyType"> mismatch type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="discrepancyType"/> is null. </exception>
        internal LateralityDiscrepancyInference(string discrepancyType)
        {
            Argument.AssertNotNull(discrepancyType, nameof(discrepancyType));

            Kind = "lateralityDiscrepancy";
            DiscrepancyType = discrepancyType;
        }

        /// <summary> Initializes a new instance of <see cref="LateralityDiscrepancyInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="lateralityIndication"> laterality indication. </param>
        /// <param name="discrepancyType"> mismatch type. </param>
        internal LateralityDiscrepancyInference(IReadOnlyList<Extension> extension, string kind, CodeableConcept lateralityIndication, string discrepancyType) : base(extension, kind)
        {
            LateralityIndication = lateralityIndication;
            DiscrepancyType = discrepancyType;
        }

        /// <summary> laterality indication. </summary>
        public CodeableConcept LateralityIndication { get; }
        /// <summary> mismatch type. </summary>
        public string DiscrepancyType { get; }
    }
}
