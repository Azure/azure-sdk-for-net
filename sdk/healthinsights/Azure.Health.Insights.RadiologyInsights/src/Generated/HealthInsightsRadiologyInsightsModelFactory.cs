// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsRadiologyInsightsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.PatientRecord"/>. </summary>
        /// <param name="id"> A given identifier for the patient. Has to be unique across all patients in a single request. </param>
        /// <param name="info"> Patient structured information, including demographics and known structured clinical information. </param>
        /// <param name="encounters"> Patient encounters/visits. </param>
        /// <param name="patientDocuments"> Patient unstructured clinical data, given as documents. </param>
        /// <returns> A new <see cref="RadiologyInsights.PatientRecord"/> instance for mocking. </returns>
        public static PatientRecord PatientRecord(string id = null, PatientDetails info = null, IEnumerable<Encounter> encounters = null, IEnumerable<PatientDocument> patientDocuments = null)
        {
            encounters ??= new List<Encounter>();
            patientDocuments ??= new List<PatientDocument>();

            return new PatientRecord(id, info, encounters?.ToList(), patientDocuments?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Element"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Element"/> instance for mocking. </returns>
        public static FhirR4Element FhirR4Element(string id = null, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Element(id, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Extension"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="url"> Source of the definition for the extension code - a logical name or a URL. </param>
        /// <param name="valueQuantity"> Value as Quantity. </param>
        /// <param name="valueCodeableConcept"> Value as CodeableConcept. </param>
        /// <param name="valueString"> Value as string. </param>
        /// <param name="valueBoolean"> Value as boolean. </param>
        /// <param name="valueInteger"> Value as integer. </param>
        /// <param name="valueRange"> Value as Range. </param>
        /// <param name="valueRatio"> Value as Ratio. </param>
        /// <param name="valueSampledData"> Value as SampledData. </param>
        /// <param name="valueTime"> Value as time (hh:mm:ss). </param>
        /// <param name="valueDateTime"> Value as dateTime. </param>
        /// <param name="valuePeriod"> Value as Period. </param>
        /// <param name="valueReference"> Value as reference. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Extension"/> instance for mocking. </returns>
        public static FhirR4Extension FhirR4Extension(string id = null, IEnumerable<FhirR4Extension> extension = null, string url = null, FhirR4Quantity valueQuantity = null, FhirR4CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, FhirR4Range valueRange = null, FhirR4Ratio valueRatio = null, FhirR4SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, FhirR4Period valuePeriod = null, FhirR4Reference valueReference = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Extension(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                url,
                valueQuantity,
                valueCodeableConcept,
                valueString,
                valueBoolean,
                valueInteger,
                valueRange,
                valueRatio,
                valueSampledData,
                valueTime,
                valueDateTime,
                valuePeriod,
                valueReference);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Quantity"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="value"> Numerical value (with implicit precision). </param>
        /// <param name="comparator"> &lt; | &lt;= | &gt;= | &gt; - how to understand the value. </param>
        /// <param name="unit"> Unit representation. </param>
        /// <param name="system"> System that defines coded unit form. </param>
        /// <param name="code"> Coded form of the unit. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Quantity"/> instance for mocking. </returns>
        public static FhirR4Quantity FhirR4Quantity(string id = null, IEnumerable<FhirR4Extension> extension = null, double? value = null, string comparator = null, string unit = null, string system = null, string code = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Quantity(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                value,
                comparator,
                unit,
                system,
                code);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4CodeableConcept"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="coding"> Code defined by a terminology system. </param>
        /// <param name="text"> Plain text representation of the concept. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4CodeableConcept"/> instance for mocking. </returns>
        public static FhirR4CodeableConcept FhirR4CodeableConcept(string id = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Coding> coding = null, string text = null)
        {
            extension ??= new List<FhirR4Extension>();
            coding ??= new List<FhirR4Coding>();

            return new FhirR4CodeableConcept(id, extension?.ToList(), serializedAdditionalRawData: null, coding?.ToList(), text);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Coding"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="system"> Identity of the terminology system. </param>
        /// <param name="version"> Version of the system - if relevant. </param>
        /// <param name="code"> Symbol in syntax defined by the system. </param>
        /// <param name="display"> Representation defined by the system. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Coding"/> instance for mocking. </returns>
        public static FhirR4Coding FhirR4Coding(string id = null, IEnumerable<FhirR4Extension> extension = null, string system = null, string version = null, string code = null, string display = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Coding(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                system,
                version,
                code,
                display);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Range"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="low"> Low limit. </param>
        /// <param name="high"> High limit. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Range"/> instance for mocking. </returns>
        public static FhirR4Range FhirR4Range(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity low = null, FhirR4Quantity high = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Range(id, extension?.ToList(), serializedAdditionalRawData: null, low, high);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Ratio"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="numerator"> Numerator value. </param>
        /// <param name="denominator"> Denominator value. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Ratio"/> instance for mocking. </returns>
        public static FhirR4Ratio FhirR4Ratio(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity numerator = null, FhirR4Quantity denominator = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Ratio(id, extension?.ToList(), serializedAdditionalRawData: null, numerator, denominator);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4SampledData"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="origin"> Zero value and units. </param>
        /// <param name="period"> Number of milliseconds between samples. </param>
        /// <param name="factor"> Multiply data by this before adding to origin. </param>
        /// <param name="lowerLimit"> Lower limit of detection. </param>
        /// <param name="upperLimit"> Upper limit of detection. </param>
        /// <param name="dimensions"> Number of sample points at each time point. </param>
        /// <param name="data"> Decimal values with spaces, or "E" | "U" | "L". </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4SampledData"/> instance for mocking. </returns>
        public static FhirR4SampledData FhirR4SampledData(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity origin = null, double period = default, double? factor = null, double? lowerLimit = null, double? upperLimit = null, int dimensions = default, string data = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4SampledData(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                origin,
                period,
                factor,
                lowerLimit,
                upperLimit,
                dimensions,
                data);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Period"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="start"> Starting time with inclusive boundary. </param>
        /// <param name="end"> End time with inclusive boundary, if not ongoing. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Period"/> instance for mocking. </returns>
        public static FhirR4Period FhirR4Period(string id = null, IEnumerable<FhirR4Extension> extension = null, string start = null, string end = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Period(id, extension?.ToList(), serializedAdditionalRawData: null, start, end);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Reference"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="reference"> Literal reference, Relative, internal or absolute URL. </param>
        /// <param name="type"> Type the reference refers to (e.g. "Patient"). </param>
        /// <param name="identifier"> Logical reference, when literal reference is not known. </param>
        /// <param name="display"> Text alternative for the resource. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Reference"/> instance for mocking. </returns>
        public static FhirR4Reference FhirR4Reference(string id = null, IEnumerable<FhirR4Extension> extension = null, string reference = null, string type = null, FhirR4Identifier identifier = null, string display = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Reference(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                reference,
                type,
                identifier,
                display);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Identifier"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="use"> usual | official | temp | secondary | old (If known). </param>
        /// <param name="type"> Description of identifier. </param>
        /// <param name="system"> The namespace for the identifier value. </param>
        /// <param name="value"> The value that is unique. </param>
        /// <param name="period"> Time period when id is/was valid for use. </param>
        /// <param name="assigner"> Organization that issued id (may be just text). </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Identifier"/> instance for mocking. </returns>
        public static FhirR4Identifier FhirR4Identifier(string id = null, IEnumerable<FhirR4Extension> extension = null, string use = null, FhirR4CodeableConcept type = null, string system = null, string value = null, FhirR4Period period = null, FhirR4Reference assigner = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Identifier(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                use,
                type,
                system,
                value,
                period,
                assigner);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.Encounter"/>. </summary>
        /// <param name="id"> The id of the visit. </param>
        /// <param name="period">
        /// Time period of the visit.
        /// In case of admission, use timePeriod.start to indicate the admission time and timePeriod.end to indicate the discharge time.
        /// </param>
        /// <param name="class"> The class of the encounter. </param>
        /// <returns> A new <see cref="RadiologyInsights.Encounter"/> instance for mocking. </returns>
        public static Encounter Encounter(string id = null, TimePeriod period = null, EncounterClass? @class = null)
        {
            return new Encounter(id, period, @class, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.PatientDocument"/>. </summary>
        /// <param name="type"> The type of the patient document, such as 'note' (text document) or 'fhirBundle' (FHIR JSON document). </param>
        /// <param name="clinicalType"> The type of the clinical document. </param>
        /// <param name="id"> A given identifier for the document. Has to be unique across all documents for a single patient. </param>
        /// <param name="language"> A 2 letter ISO 639-1 representation of the language of the document. </param>
        /// <param name="createdDateTime"> The date and time when the document was created. </param>
        /// <param name="authors"> Document author(s). </param>
        /// <param name="specialtyType"> specialty type the document. </param>
        /// <param name="administrativeMetadata"> Administrative metadata for the document. </param>
        /// <param name="content"> The content of the patient document. </param>
        /// <returns> A new <see cref="RadiologyInsights.PatientDocument"/> instance for mocking. </returns>
        public static PatientDocument PatientDocument(DocumentType type = default, ClinicalDocumentType? clinicalType = null, string id = null, string language = null, DateTimeOffset? createdDateTime = null, IEnumerable<DocumentAuthor> authors = null, SpecialtyType? specialtyType = null, DocumentAdministrativeMetadata administrativeMetadata = null, DocumentContent content = null)
        {
            authors ??= new List<DocumentAuthor>();

            return new PatientDocument(
                type,
                clinicalType,
                id,
                language,
                createdDateTime,
                authors?.ToList(),
                specialtyType,
                administrativeMetadata,
                content,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsInferenceResult"/>. </summary>
        /// <param name="patientResults"> Results for the patients given in the request. </param>
        /// <param name="modelVersion"> The version of the model used for inference, expressed as the model date. </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsInferenceResult"/> instance for mocking. </returns>
        public static RadiologyInsightsInferenceResult RadiologyInsightsInferenceResult(IEnumerable<RadiologyInsightsPatientResult> patientResults = null, string modelVersion = null)
        {
            patientResults ??= new List<RadiologyInsightsPatientResult>();

            return new RadiologyInsightsInferenceResult(patientResults?.ToList(), modelVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsPatientResult"/>. </summary>
        /// <param name="patientId"> Identifier given for the patient in the request. </param>
        /// <param name="inferences">
        /// The model's inferences for the given patient.
        /// Please note <see cref="RadiologyInsights.RadiologyInsightsInference"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RadiologyInsights.AgeMismatchInference"/>, <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/>, <see cref="RadiologyInsights.CriticalResultInference"/>, <see cref="RadiologyInsights.FindingInference"/>, <see cref="RadiologyInsights.FollowupCommunicationInference"/>, <see cref="RadiologyInsights.FollowupRecommendationInference"/>, <see cref="RadiologyInsights.LateralityDiscrepancyInference"/>, <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/>, <see cref="RadiologyInsights.RadiologyProcedureInference"/> and <see cref="RadiologyInsights.SexMismatchInference"/>.
        /// </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsPatientResult"/> instance for mocking. </returns>
        public static RadiologyInsightsPatientResult RadiologyInsightsPatientResult(string patientId = null, IEnumerable<RadiologyInsightsInference> inferences = null)
        {
            inferences ??= new List<RadiologyInsightsInference>();

            return new RadiologyInsightsPatientResult(patientId, inferences?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsInference"/>. </summary>
        /// <param name="kind"> Discriminator. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsInference"/> instance for mocking. </returns>
        public static RadiologyInsightsInference RadiologyInsightsInference(string kind = null, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new UnknownRadiologyInsightsInference(kind, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.AgeMismatchInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="RadiologyInsights.AgeMismatchInference"/> instance for mocking. </returns>
        public static AgeMismatchInference AgeMismatchInference(IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new AgeMismatchInference("ageMismatch", extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.SexMismatchInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="sexIndication"> Sex indication : SNOMED CT code for gender finding. </param>
        /// <returns> A new <see cref="RadiologyInsights.SexMismatchInference"/> instance for mocking. </returns>
        public static SexMismatchInference SexMismatchInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept sexIndication = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new SexMismatchInference("sexMismatch", extension?.ToList(), serializedAdditionalRawData: null, sexIndication);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.LateralityDiscrepancyInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="lateralityIndication"> Laterality indication : SNOMED CT code for laterality qualifier value. </param>
        /// <param name="discrepancyType"> Mismatch type : orderLateralityMismatch, textLateralityContradiction, textLateralityMissing. </param>
        /// <returns> A new <see cref="RadiologyInsights.LateralityDiscrepancyInference"/> instance for mocking. </returns>
        public static LateralityDiscrepancyInference LateralityDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept lateralityIndication = null, LateralityDiscrepancyType discrepancyType = default)
        {
            extension ??= new List<FhirR4Extension>();

            return new LateralityDiscrepancyInference("lateralityDiscrepancy", extension?.ToList(), serializedAdditionalRawData: null, lateralityIndication, discrepancyType);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="orderType"> Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or breast. </param>
        /// <param name="missingBodyParts"> List of missing body parts required by a complete order : SNOMED CT codes. </param>
        /// <param name="missingBodyPartMeasurements"> List of missing body parts that require measurement by a complete order : SNOMED CT codes. </param>
        /// <returns> A new <see cref="RadiologyInsights.CompleteOrderDiscrepancyInference"/> instance for mocking. </returns>
        public static CompleteOrderDiscrepancyInference CompleteOrderDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept orderType = null, IEnumerable<FhirR4CodeableConcept> missingBodyParts = null, IEnumerable<FhirR4CodeableConcept> missingBodyPartMeasurements = null)
        {
            extension ??= new List<FhirR4Extension>();
            missingBodyParts ??= new List<FhirR4CodeableConcept>();
            missingBodyPartMeasurements ??= new List<FhirR4CodeableConcept>();

            return new CompleteOrderDiscrepancyInference(
                "completeOrderDiscrepancy",
                extension?.ToList(),
                serializedAdditionalRawData: null,
                orderType,
                missingBodyParts?.ToList(),
                missingBodyPartMeasurements?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="orderType"> Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or breast. </param>
        /// <param name="presentBodyParts"> List of body parts found in the document : SNOMED CT codes. </param>
        /// <param name="presentBodyPartMeasurements"> List of body parts that are measured according to the document : SNOMED CT codes. </param>
        /// <returns> A new <see cref="RadiologyInsights.LimitedOrderDiscrepancyInference"/> instance for mocking. </returns>
        public static LimitedOrderDiscrepancyInference LimitedOrderDiscrepancyInference(IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept orderType = null, IEnumerable<FhirR4CodeableConcept> presentBodyParts = null, IEnumerable<FhirR4CodeableConcept> presentBodyPartMeasurements = null)
        {
            extension ??= new List<FhirR4Extension>();
            presentBodyParts ??= new List<FhirR4CodeableConcept>();
            presentBodyPartMeasurements ??= new List<FhirR4CodeableConcept>();

            return new LimitedOrderDiscrepancyInference(
                "limitedOrderDiscrepancy",
                extension?.ToList(),
                serializedAdditionalRawData: null,
                orderType,
                presentBodyParts?.ToList(),
                presentBodyPartMeasurements?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FindingInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="finding"> Finding data : contains extensions, fields and components linked with the finding. </param>
        /// <returns> A new <see cref="RadiologyInsights.FindingInference"/> instance for mocking. </returns>
        public static FindingInference FindingInference(IEnumerable<FhirR4Extension> extension = null, FhirR4Observation finding = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FindingInference("finding", extension?.ToList(), serializedAdditionalRawData: null, finding);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Narrative"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="status"> generated, extensions, additional, empty. </param>
        /// <param name="div"> xhtml. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Narrative"/> instance for mocking. </returns>
        public static FhirR4Narrative FhirR4Narrative(string id = null, IEnumerable<FhirR4Extension> extension = null, string status = null, string div = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Narrative(id, extension?.ToList(), serializedAdditionalRawData: null, status, div);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Annotation"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="authorString"> Individual responsible for the annotation. </param>
        /// <param name="time"> When the annotation was made. </param>
        /// <param name="text"> The annotation - text content (as markdown). </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Annotation"/> instance for mocking. </returns>
        public static FhirR4Annotation FhirR4Annotation(string id = null, IEnumerable<FhirR4Extension> extension = null, string authorString = null, string time = null, string text = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Annotation(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                authorString,
                time,
                text);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4ObservationComponent"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="code"> Type of component observation (code / type). </param>
        /// <param name="valueQuantity"> Value as Quantity. </param>
        /// <param name="valueCodeableConcept"> Value as CodeableConcept. </param>
        /// <param name="valueString"> Value as string. </param>
        /// <param name="valueBoolean"> Value as boolean. </param>
        /// <param name="valueInteger"> Value as integer. </param>
        /// <param name="valueRange"> Value as Range. </param>
        /// <param name="valueRatio"> Value as Ratio. </param>
        /// <param name="valueSampledData"> Value as SampledData. </param>
        /// <param name="valueTime"> Value as time (hh:mm:ss). </param>
        /// <param name="valueDateTime"> Value as dateTime. </param>
        /// <param name="valuePeriod"> Value as Period. </param>
        /// <param name="valueReference"> Value as reference. </param>
        /// <param name="dataAbsentReason"> Why the component result is missing. </param>
        /// <param name="interpretation"> High, low, normal, etc. </param>
        /// <param name="referenceRange"> Provides guide for interpretation of component result. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4ObservationComponent"/> instance for mocking. </returns>
        public static FhirR4ObservationComponent FhirR4ObservationComponent(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4CodeableConcept code = null, FhirR4Quantity valueQuantity = null, FhirR4CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, FhirR4Range valueRange = null, FhirR4Ratio valueRatio = null, FhirR4SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, FhirR4Period valuePeriod = null, FhirR4Reference valueReference = null, FhirR4CodeableConcept dataAbsentReason = null, IEnumerable<FhirR4CodeableConcept> interpretation = null, IEnumerable<FhirR4ObservationReferenceRange> referenceRange = null)
        {
            extension ??= new List<FhirR4Extension>();
            interpretation ??= new List<FhirR4CodeableConcept>();
            referenceRange ??= new List<FhirR4ObservationReferenceRange>();

            return new FhirR4ObservationComponent(
                id,
                extension?.ToList(),
                serializedAdditionalRawData: null,
                code,
                valueQuantity,
                valueCodeableConcept,
                valueString,
                valueBoolean,
                valueInteger,
                valueRange,
                valueRatio,
                valueSampledData,
                valueTime,
                valueDateTime,
                valuePeriod,
                valueReference,
                dataAbsentReason,
                interpretation?.ToList(),
                referenceRange?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CriticalResultInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="result"> The complete Critical Result, as outlined below, will be reused for the recommendation. </param>
        /// <returns> A new <see cref="RadiologyInsights.CriticalResultInference"/> instance for mocking. </returns>
        public static CriticalResultInference CriticalResultInference(IEnumerable<FhirR4Extension> extension = null, CriticalResult result = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new CriticalResultInference("criticalResult", extension?.ToList(), serializedAdditionalRawData: null, result);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.CriticalResult"/>. </summary>
        /// <param name="description"> Description : medical problem. </param>
        /// <param name="finding"> Finding linked to the critical result. </param>
        /// <returns> A new <see cref="RadiologyInsights.CriticalResult"/> instance for mocking. </returns>
        public static CriticalResult CriticalResult(string description = null, FhirR4Observation finding = null)
        {
            return new CriticalResult(description, finding, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyProcedureInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="procedureCodes"> LOINC codes for the procedure. </param>
        /// <param name="imagingProcedures"> Imaging procedures. </param>
        /// <param name="orderedProcedure"> Ordered procedure information from the document information or text. </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyProcedureInference"/> instance for mocking. </returns>
        public static RadiologyProcedureInference RadiologyProcedureInference(IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4CodeableConcept> procedureCodes = null, IEnumerable<ImagingProcedure> imagingProcedures = null, FhirR4Extendible orderedProcedure = null)
        {
            extension ??= new List<FhirR4Extension>();
            procedureCodes ??= new List<FhirR4CodeableConcept>();
            imagingProcedures ??= new List<ImagingProcedure>();

            return new RadiologyProcedureInference(
                "radiologyProcedure",
                extension?.ToList(),
                serializedAdditionalRawData: null,
                procedureCodes?.ToList(),
                imagingProcedures?.ToList(),
                orderedProcedure);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ImagingProcedure"/>. </summary>
        /// <param name="modality"> Modality : SNOMED CT code. </param>
        /// <param name="anatomy"> Anatomy : SNOMED CT code. </param>
        /// <param name="laterality"> Laterality : SNOMED CT code. </param>
        /// <param name="contrast"> Contrast : see RadiologyCodeWithTypes (below). </param>
        /// <param name="view"> View : see RadiologyCodeWithTypes (below). </param>
        /// <returns> A new <see cref="RadiologyInsights.ImagingProcedure"/> instance for mocking. </returns>
        public static ImagingProcedure ImagingProcedure(FhirR4CodeableConcept modality = null, FhirR4CodeableConcept anatomy = null, FhirR4CodeableConcept laterality = null, RadiologyCodeWithTypes contrast = null, RadiologyCodeWithTypes view = null)
        {
            return new ImagingProcedure(
                modality,
                anatomy,
                laterality,
                contrast,
                view,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyCodeWithTypes"/>. </summary>
        /// <param name="code"> The SNOMED CT code indicates whether imaging was conducted with or without contrast in the case of contrast, and in the case of views, it denotes the number of views. </param>
        /// <param name="types"> The collection of types will indicate the contrast substance used in the case of contrast and, in the case of views, it will specify the types of views, such as lateral and frontal, etc. </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyCodeWithTypes"/> instance for mocking. </returns>
        public static RadiologyCodeWithTypes RadiologyCodeWithTypes(FhirR4CodeableConcept code = null, IEnumerable<FhirR4CodeableConcept> types = null)
        {
            types ??= new List<FhirR4CodeableConcept>();

            return new RadiologyCodeWithTypes(code, types?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FollowupRecommendationInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="effectiveDateTime"> Date and time are displayed when the procedure is recommended to be done at a specific point in time. </param>
        /// <param name="effectivePeriod"> The period is shown if a specific period is mentioned, with a start and end date-time. </param>
        /// <param name="findings"> Findings related to the recommendation. </param>
        /// <param name="isConditional"> The conditional value indicates whether or not the sentence containing the recommendation includes a conditional statement. Keywords for conditional statements include 'if', 'when', 'unless', and so on. </param>
        /// <param name="isOption"> The option value indicates whether or not the sentence containing the recommendation includes an optional statement. Keywords for optional statements include 'recommend', 'consider', and so on. </param>
        /// <param name="isGuideline"> The guideline value indicates whether or not the recommendation is part of a guideline section that compiles all recommendations applicable to various findings. </param>
        /// <param name="isHedging"> Hedging refers to ambiguous, vague or imprecise language within the sentence of the recommendation. Keywords for hedging are 'can be','may be',and so on. </param>
        /// <param name="recommendedProcedure">
        /// The procedure recommendation can be a generic procedure or an imaging procedure.
        /// Please note <see cref="ProcedureRecommendation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RadiologyInsights.GenericProcedureRecommendation"/> and <see cref="RadiologyInsights.ImagingProcedureRecommendation"/>.
        /// </param>
        /// <returns> A new <see cref="RadiologyInsights.FollowupRecommendationInference"/> instance for mocking. </returns>
        public static FollowupRecommendationInference FollowupRecommendationInference(IEnumerable<FhirR4Extension> extension = null, string effectiveDateTime = null, FhirR4Period effectivePeriod = null, IEnumerable<FhirR4Extendible> findings = null, bool isConditional = default, bool isOption = default, bool isGuideline = default, bool isHedging = default, ProcedureRecommendation recommendedProcedure = null)
        {
            extension ??= new List<FhirR4Extension>();
            findings ??= new List<FhirR4Extendible>();

            return new FollowupRecommendationInference(
                "followupRecommendation",
                extension?.ToList(),
                serializedAdditionalRawData: null,
                effectiveDateTime,
                effectivePeriod,
                findings?.ToList(),
                isConditional,
                isOption,
                isGuideline,
                isHedging,
                recommendedProcedure);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.GenericProcedureRecommendation"/>. </summary>
        /// <param name="code"> Procedure modality : SNOMED CT code. </param>
        /// <param name="description"> Procedure description : MANAGEMENT PROCEDURE (PROCEDURE) or CONSULTATION (PROCEDURE) based on SNOMED CT. </param>
        /// <returns> A new <see cref="RadiologyInsights.GenericProcedureRecommendation"/> instance for mocking. </returns>
        public static GenericProcedureRecommendation GenericProcedureRecommendation(FhirR4CodeableConcept code = null, string description = null)
        {
            return new GenericProcedureRecommendation("genericProcedureRecommendation", serializedAdditionalRawData: null, code, description);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.ImagingProcedureRecommendation"/>. </summary>
        /// <param name="procedureCodes"> LOINC codes for the procedure. </param>
        /// <param name="imagingProcedures"> Imaging procedures. </param>
        /// <returns> A new <see cref="RadiologyInsights.ImagingProcedureRecommendation"/> instance for mocking. </returns>
        public static ImagingProcedureRecommendation ImagingProcedureRecommendation(IEnumerable<FhirR4CodeableConcept> procedureCodes = null, IEnumerable<ImagingProcedure> imagingProcedures = null)
        {
            procedureCodes ??= new List<FhirR4CodeableConcept>();
            imagingProcedures ??= new List<ImagingProcedure>();

            return new ImagingProcedureRecommendation("imagingProcedureRecommendation", serializedAdditionalRawData: null, procedureCodes?.ToList(), imagingProcedures?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FollowupCommunicationInference"/>. </summary>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="dateTime"> Communication date and time. </param>
        /// <param name="recipient"> Recipient of the communication. </param>
        /// <param name="wasAcknowledged"> Communication was acknowledged. </param>
        /// <returns> A new <see cref="RadiologyInsights.FollowupCommunicationInference"/> instance for mocking. </returns>
        public static FollowupCommunicationInference FollowupCommunicationInference(IEnumerable<FhirR4Extension> extension = null, IEnumerable<DateTimeOffset> dateTime = null, IEnumerable<MedicalProfessionalType> recipient = null, bool wasAcknowledged = default)
        {
            extension ??= new List<FhirR4Extension>();
            dateTime ??= new List<DateTimeOffset>();
            recipient ??= new List<MedicalProfessionalType>();

            return new FollowupCommunicationInference(
                "followupCommunication",
                extension?.ToList(),
                serializedAdditionalRawData: null,
                dateTime?.ToList(),
                recipient?.ToList(),
                wasAcknowledged);
        }
    }
}
