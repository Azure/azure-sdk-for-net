// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Model factory for models. </summary>
    public static partial class HealthInsightsRadiologyInsightsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.RadiologyInsightsJob"/>. </summary>
        /// <param name="jobData"> The request data for the operation. </param>
        /// <param name="result"> The result of the operation. </param>
        /// <param name="status"> The status of the job. </param>
        /// <param name="createdAt"> The date and time when the processing job was created. </param>
        /// <param name="expiresAt"> The date and time when the processing job is set to expire. </param>
        /// <param name="updatedAt"> The date and time when the processing job was last updated. </param>
        /// <param name="error"> Error object that describes the error when status is "Failed". </param>
        /// <returns> A new <see cref="RadiologyInsights.RadiologyInsightsJob"/> instance for mocking. </returns>
        public static RadiologyInsightsJob RadiologyInsightsJob(RadiologyInsightsData jobData = null, RadiologyInsightsInferenceResult result = null, JobStatus status = default, DateTimeOffset? createdAt = null, DateTimeOffset? expiresAt = null, DateTimeOffset? updatedAt = null, ResponseError error = null)
        {
            return new RadiologyInsightsJob(jobData, result, status, createdAt, expiresAt, updatedAt, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Element"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Element"/> instance for mocking. </returns>
        public static FhirR4Element FhirR4Element(string id = null, IEnumerable<FhirR4Extension> extension = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Element(id, extension?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Extension"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="url"> Source of the definition for the extension code - a logical name or a URL. </param>
        /// <param name="valueQuantity"> Value as Quantity. </param>
        /// <param name="valueCodeableConcept"> Value as CodeableConcept. </param>
        /// <param name="valueString"> Value as string. </param>
        /// <param name="valueBoolean"> Value as boolean. </param>
        /// <param name="valueInteger"> Value as integer. </param>
        /// <param name="valueRange"> Value as Range. </param>
        /// <param name="valueRatio"> Value as Ratio. </param>
        /// <param name="valueSampledData"> Value as SampledData. </param>
        /// <param name="valueTime"> Value as time (hh:mm:ss). </param>
        /// <param name="valueDateTime"> Value as dateTime. </param>
        /// <param name="valuePeriod"> Value as Period. </param>
        /// <param name="valueReference"> Value as reference. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Extension"/> instance for mocking. </returns>
        public static FhirR4Extension FhirR4Extension(string id = null, IEnumerable<FhirR4Extension> extension = null, string url = null, FhirR4Quantity valueQuantity = null, FhirR4CodeableConcept valueCodeableConcept = null, string valueString = null, bool? valueBoolean = null, int? valueInteger = null, FhirR4Range valueRange = null, FhirR4Ratio valueRatio = null, FhirR4SampledData valueSampledData = null, TimeSpan? valueTime = null, string valueDateTime = null, FhirR4Period valuePeriod = null, FhirR4Reference valueReference = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Extension(id, extension?.ToList(), serializedAdditionalRawData: null, url, valueQuantity, valueCodeableConcept, valueString, valueBoolean, valueInteger, valueRange, valueRatio, valueSampledData, valueTime, valueDateTime, valuePeriod, valueReference);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Quantity"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="value"> Numerical value (with implicit precision). </param>
        /// <param name="comparator"> &lt; | &lt;= | &gt;= | &gt; - how to understand the value. </param>
        /// <param name="unit"> Unit representation. </param>
        /// <param name="system"> System that defines coded unit form. </param>
        /// <param name="code"> Coded form of the unit. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Quantity"/> instance for mocking. </returns>
        public static FhirR4Quantity FhirR4Quantity(string id = null, IEnumerable<FhirR4Extension> extension = null, double? value = null, string comparator = null, string unit = null, string system = null, string code = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Quantity(id, extension?.ToList(), serializedAdditionalRawData: null, value, comparator, unit, system, code);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4CodeableConcept"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="coding"> Code defined by a terminology system. </param>
        /// <param name="text"> Plain text representation of the concept. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4CodeableConcept"/> instance for mocking. </returns>
        public static FhirR4CodeableConcept FhirR4CodeableConcept(string id = null, IEnumerable<FhirR4Extension> extension = null, IEnumerable<FhirR4Coding> coding = null, string text = null)
        {
            extension ??= new List<FhirR4Extension>();
            coding ??= new List<FhirR4Coding>();

            return new FhirR4CodeableConcept(id, extension?.ToList(), serializedAdditionalRawData: null, coding?.ToList(), text);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Coding"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="system"> Identity of the terminology system. </param>
        /// <param name="version"> Version of the system - if relevant. </param>
        /// <param name="code"> Symbol in syntax defined by the system. </param>
        /// <param name="display"> Representation defined by the system. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Coding"/> instance for mocking. </returns>
        public static FhirR4Coding FhirR4Coding(string id = null, IEnumerable<FhirR4Extension> extension = null, string system = null, string version = null, string code = null, string display = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Coding(id, extension?.ToList(), serializedAdditionalRawData: null, system, version, code, display);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Range"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="low"> Low limit. </param>
        /// <param name="high"> High limit. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Range"/> instance for mocking. </returns>
        public static FhirR4Range FhirR4Range(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity low = null, FhirR4Quantity high = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Range(id, extension?.ToList(), serializedAdditionalRawData: null, low, high);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Ratio"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="numerator"> Numerator value. </param>
        /// <param name="denominator"> Denominator value. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Ratio"/> instance for mocking. </returns>
        public static FhirR4Ratio FhirR4Ratio(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity numerator = null, FhirR4Quantity denominator = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Ratio(id, extension?.ToList(), serializedAdditionalRawData: null, numerator, denominator);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4SampledData"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="origin"> Zero value and units. </param>
        /// <param name="period"> Number of milliseconds between samples. </param>
        /// <param name="factor"> Multiply data by this before adding to origin. </param>
        /// <param name="lowerLimit"> Lower limit of detection. </param>
        /// <param name="upperLimit"> Upper limit of detection. </param>
        /// <param name="dimensions"> Number of sample points at each time point. </param>
        /// <param name="data"> Decimal values with spaces, or "E" | "U" | "L". </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4SampledData"/> instance for mocking. </returns>
        public static FhirR4SampledData FhirR4SampledData(string id = null, IEnumerable<FhirR4Extension> extension = null, FhirR4Quantity origin = null, double period = default, double? factor = null, double? lowerLimit = null, double? upperLimit = null, int dimensions = default, string data = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4SampledData(id, extension?.ToList(), serializedAdditionalRawData: null, origin, period, factor, lowerLimit, upperLimit, dimensions, data);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Period"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="start"> Starting time with inclusive boundary. </param>
        /// <param name="end"> End time with inclusive boundary, if not ongoing. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Period"/> instance for mocking. </returns>
        public static FhirR4Period FhirR4Period(string id = null, IEnumerable<FhirR4Extension> extension = null, string start = null, string end = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Period(id, extension?.ToList(), serializedAdditionalRawData: null, start, end);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Reference"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="reference"> Literal reference, Relative, internal or absolute URL. </param>
        /// <param name="type"> Type the reference refers to (e.g. "Patient"). </param>
        /// <param name="identifier"> Logical reference, when literal reference is not known. </param>
        /// <param name="display"> Text alternative for the resource. </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Reference"/> instance for mocking. </returns>
        public static FhirR4Reference FhirR4Reference(string id = null, IEnumerable<FhirR4Extension> extension = null, string reference = null, string type = null, FhirR4Identifier identifier = null, string display = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Reference(id, extension?.ToList(), serializedAdditionalRawData: null, reference, type, identifier, display);
        }

        /// <summary> Initializes a new instance of <see cref="RadiologyInsights.FhirR4Identifier"/>. </summary>
        /// <param name="id"> Unique id for inter-element referencing. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="use"> usual | official | temp | secondary | old (If known). </param>
        /// <param name="type"> Description of identifier. </param>
        /// <param name="system"> The namespace for the identifier value. </param>
        /// <param name="value"> The value that is unique. </param>
        /// <param name="period"> Time period when id is/was valid for use. </param>
        /// <param name="assigner"> Organization that issued id (may be just text). </param>
        /// <returns> A new <see cref="RadiologyInsights.FhirR4Identifier"/> instance for mocking. </returns>
        public static FhirR4Identifier FhirR4Identifier(string id = null, IEnumerable<FhirR4Extension> extension = null, string use = null, FhirR4CodeableConcept type = null, string system = null, string value = null, FhirR4Period period = null, FhirR4Reference assigner = null)
        {
            extension ??= new List<FhirR4Extension>();

            return new FhirR4Identifier(id, extension?.ToList(), serializedAdditionalRawData: null, use, type, system, value, period, assigner);
        }
    }
}
