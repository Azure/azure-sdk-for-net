// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Health.Insights.RadiologyInsights
{
    internal static partial class RadiologyInsightsInferenceTypeExtensions
    {
        public static string ToSerialString(this RadiologyInsightsInferenceType value) => value switch
        {
            RadiologyInsightsInferenceType.AgeMismatch => "ageMismatch",
            RadiologyInsightsInferenceType.LateralityDiscrepancy => "lateralityDiscrepancy",
            RadiologyInsightsInferenceType.SexMismatch => "sexMismatch",
            RadiologyInsightsInferenceType.CompleteOrderDiscrepancy => "completeOrderDiscrepancy",
            RadiologyInsightsInferenceType.LimitedOrderDiscrepancy => "limitedOrderDiscrepancy",
            RadiologyInsightsInferenceType.Finding => "finding",
            RadiologyInsightsInferenceType.CriticalResult => "criticalResult",
            RadiologyInsightsInferenceType.FollowupRecommendation => "followupRecommendation",
            RadiologyInsightsInferenceType.FollowupCommunication => "followupCommunication",
            RadiologyInsightsInferenceType.RadiologyProcedure => "radiologyProcedure",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RadiologyInsightsInferenceType value.")
        };

        public static RadiologyInsightsInferenceType ToRadiologyInsightsInferenceType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ageMismatch")) return RadiologyInsightsInferenceType.AgeMismatch;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "lateralityDiscrepancy")) return RadiologyInsightsInferenceType.LateralityDiscrepancy;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "sexMismatch")) return RadiologyInsightsInferenceType.SexMismatch;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "completeOrderDiscrepancy")) return RadiologyInsightsInferenceType.CompleteOrderDiscrepancy;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "limitedOrderDiscrepancy")) return RadiologyInsightsInferenceType.LimitedOrderDiscrepancy;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "finding")) return RadiologyInsightsInferenceType.Finding;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "criticalResult")) return RadiologyInsightsInferenceType.CriticalResult;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "followupRecommendation")) return RadiologyInsightsInferenceType.FollowupRecommendation;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "followupCommunication")) return RadiologyInsightsInferenceType.FollowupCommunication;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "radiologyProcedure")) return RadiologyInsightsInferenceType.RadiologyProcedure;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown RadiologyInsightsInferenceType value.");
        }
    }
}
