// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> The category that gets a value, e.g. BIRADS, Z-SCORE or FRAX SCORE. </summary>
    public readonly partial struct ScoringAndAssessmentCategoryType : IEquatable<ScoringAndAssessmentCategoryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScoringAndAssessmentCategoryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScoringAndAssessmentCategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BiradsValue = "BIRADS";
        private const string CRadsColonicFindingsValue = "C-RADS COLONIC FINDINGS";
        private const string CadRadsValue = "CAD-RADS";
        private const string LiRadsValue = "LI-RADS";
        private const string LungRadsValue = "LUNG-RADS";
        private const string NiRadsValue = "NI-RADS";
        private const string ORadsValue = "O-RADS";
        private const string PiRadsValue = "PI-RADS";
        private const string TiRadsValue = "TI-RADS";
        private const string CRadsExtracolonicFindingsValue = "C-RADS EXTRACOLONIC FINDINGS";
        private const string LifetimeBreastCancerRiskValue = "LIFETIME BREAST CANCER RISK";
        private const string AscvdRiskValue = "ASCVD RISK";
        private const string ModifiedGailModelRiskValue = "MODIFIED GAIL MODEL RISK";
        private const string TyrerCusickModelRiskValue = "TYRER CUSICK MODEL RISK";
        private const string AgatstonScoreValue = "AGATSTON SCORE";
        private const string TenYearChdRiskValue = "10 YEAR CHD RISK";
        private const string ZScoreValue = "Z-SCORE";
        private const string TScoreValue = "T-SCORE";
        private const string CalciumVolumeScoreValue = "CALCIUM VOLUME SCORE";
        private const string UsLiRadsVisualizationScoreValue = "US LI-RADS VISUALIZATION SCORE";
        private const string UsLiRadsValue = "US LI-RADS";
        private const string CeusLiRadsValue = "CEUS LI-RADS";
        private const string TreatmentResponseLiRadsValue = "TREATMENT RESPONSE LI-RADS";
        private const string ORadsMriValue = "O-RADS MRI";
        private const string CalciumMassScoreValue = "CALCIUM MASS SCORE";
        private const string RiskOfMalignancyIndexValue = "RISK OF MALIGNANCY INDEX";
        private const string HnpccMutationRiskValue = "HNPCC MUTATION RISK";
        private const string AlbertaStrokeProgramEarlyCtScoreValue = "ALBERTA STROKE PROGRAM EARLY CT SCORE";
        private const string KellgrenLawrenceGradingScaleValue = "KELLGREN-LAWRENCE GRADING SCALE";
        private const string TonnisClassificationValue = "TONNIS CLASSIFICATION";
        private const string CalciumScoreUnspecifiedValue = "CALCIUM SCORE (UNSPECIFIED)";
        private const string TenYearChdRiskObservedAgeValue = "10 YEAR CHD RISK (OBSERVED AGE)";
        private const string TenYearChdRiskArterialAgeValue = "10 YEAR CHD RISK (ARTERIAL AGE)";
        private const string FraxScoreValue = "FRAX SCORE";

        /// <summary> BIRADS. </summary>
        public static ScoringAndAssessmentCategoryType Birads { get; } = new ScoringAndAssessmentCategoryType(BiradsValue);
        /// <summary> C-RADS COLONIC FINDINGS. </summary>
        public static ScoringAndAssessmentCategoryType CRadsColonicFindings { get; } = new ScoringAndAssessmentCategoryType(CRadsColonicFindingsValue);
        /// <summary> CAD-RADS. </summary>
        public static ScoringAndAssessmentCategoryType CadRads { get; } = new ScoringAndAssessmentCategoryType(CadRadsValue);
        /// <summary> LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType LiRads { get; } = new ScoringAndAssessmentCategoryType(LiRadsValue);
        /// <summary> LUNG-RADS. </summary>
        public static ScoringAndAssessmentCategoryType LungRads { get; } = new ScoringAndAssessmentCategoryType(LungRadsValue);
        /// <summary> NI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType NiRads { get; } = new ScoringAndAssessmentCategoryType(NiRadsValue);
        /// <summary> O-RADS. </summary>
        public static ScoringAndAssessmentCategoryType ORads { get; } = new ScoringAndAssessmentCategoryType(ORadsValue);
        /// <summary> PI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType PiRads { get; } = new ScoringAndAssessmentCategoryType(PiRadsValue);
        /// <summary> TI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType TiRads { get; } = new ScoringAndAssessmentCategoryType(TiRadsValue);
        /// <summary> C-RADS EXTRACOLONIC FINDINGS. </summary>
        public static ScoringAndAssessmentCategoryType CRadsExtracolonicFindings { get; } = new ScoringAndAssessmentCategoryType(CRadsExtracolonicFindingsValue);
        /// <summary> LIFETIME BREAST CANCER RISK. </summary>
        public static ScoringAndAssessmentCategoryType LifetimeBreastCancerRisk { get; } = new ScoringAndAssessmentCategoryType(LifetimeBreastCancerRiskValue);
        /// <summary> ASCVD RISK. </summary>
        public static ScoringAndAssessmentCategoryType AscvdRisk { get; } = new ScoringAndAssessmentCategoryType(AscvdRiskValue);
        /// <summary> MODIFIED GAIL MODEL RISK. </summary>
        public static ScoringAndAssessmentCategoryType ModifiedGailModelRisk { get; } = new ScoringAndAssessmentCategoryType(ModifiedGailModelRiskValue);
        /// <summary> TYRER CUSICK MODEL RISK. </summary>
        public static ScoringAndAssessmentCategoryType TyrerCusickModelRisk { get; } = new ScoringAndAssessmentCategoryType(TyrerCusickModelRiskValue);
        /// <summary> AGATSTON SCORE. </summary>
        public static ScoringAndAssessmentCategoryType AgatstonScore { get; } = new ScoringAndAssessmentCategoryType(AgatstonScoreValue);
        /// <summary> 10 YEAR CHD RISK. </summary>
        public static ScoringAndAssessmentCategoryType TenYearChdRisk { get; } = new ScoringAndAssessmentCategoryType(TenYearChdRiskValue);
        /// <summary> Z-SCORE. </summary>
        public static ScoringAndAssessmentCategoryType ZScore { get; } = new ScoringAndAssessmentCategoryType(ZScoreValue);
        /// <summary> T-SCORE. </summary>
        public static ScoringAndAssessmentCategoryType TScore { get; } = new ScoringAndAssessmentCategoryType(TScoreValue);
        /// <summary> CALCIUM VOLUME SCORE. </summary>
        public static ScoringAndAssessmentCategoryType CalciumVolumeScore { get; } = new ScoringAndAssessmentCategoryType(CalciumVolumeScoreValue);
        /// <summary> US LI-RADS VISUALIZATION SCORE. </summary>
        public static ScoringAndAssessmentCategoryType UsLiRadsVisualizationScore { get; } = new ScoringAndAssessmentCategoryType(UsLiRadsVisualizationScoreValue);
        /// <summary> US LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType UsLiRads { get; } = new ScoringAndAssessmentCategoryType(UsLiRadsValue);
        /// <summary> CEUS LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType CeusLiRads { get; } = new ScoringAndAssessmentCategoryType(CeusLiRadsValue);
        /// <summary> TREATMENT RESPONSE LI-RADS. </summary>
        public static ScoringAndAssessmentCategoryType TreatmentResponseLiRads { get; } = new ScoringAndAssessmentCategoryType(TreatmentResponseLiRadsValue);
        /// <summary> O-RADS MRI. </summary>
        public static ScoringAndAssessmentCategoryType ORadsMri { get; } = new ScoringAndAssessmentCategoryType(ORadsMriValue);
        /// <summary> CALCIUM MASS SCORE. </summary>
        public static ScoringAndAssessmentCategoryType CalciumMassScore { get; } = new ScoringAndAssessmentCategoryType(CalciumMassScoreValue);
        /// <summary> RISK OF MALIGNANCY INDEX. </summary>
        public static ScoringAndAssessmentCategoryType RiskOfMalignancyIndex { get; } = new ScoringAndAssessmentCategoryType(RiskOfMalignancyIndexValue);
        /// <summary> HNPCC MUTATION RISK. </summary>
        public static ScoringAndAssessmentCategoryType HnpccMutationRisk { get; } = new ScoringAndAssessmentCategoryType(HnpccMutationRiskValue);
        /// <summary> ALBERTA STROKE PROGRAM EARLY CT SCORE. </summary>
        public static ScoringAndAssessmentCategoryType AlbertaStrokeProgramEarlyCtScore { get; } = new ScoringAndAssessmentCategoryType(AlbertaStrokeProgramEarlyCtScoreValue);
        /// <summary> KELLGREN-LAWRENCE GRADING SCALE. </summary>
        public static ScoringAndAssessmentCategoryType KellgrenLawrenceGradingScale { get; } = new ScoringAndAssessmentCategoryType(KellgrenLawrenceGradingScaleValue);
        /// <summary> TONNIS CLASSIFICATION. </summary>
        public static ScoringAndAssessmentCategoryType TonnisClassification { get; } = new ScoringAndAssessmentCategoryType(TonnisClassificationValue);
        /// <summary> CALCIUM SCORE (UNSPECIFIED). </summary>
        public static ScoringAndAssessmentCategoryType CalciumScoreUnspecified { get; } = new ScoringAndAssessmentCategoryType(CalciumScoreUnspecifiedValue);
        /// <summary> 10 YEAR CHD RISK (OBSERVED AGE). </summary>
        public static ScoringAndAssessmentCategoryType TenYearChdRiskObservedAge { get; } = new ScoringAndAssessmentCategoryType(TenYearChdRiskObservedAgeValue);
        /// <summary> 10 YEAR CHD RISK (ARTERIAL AGE). </summary>
        public static ScoringAndAssessmentCategoryType TenYearChdRiskArterialAge { get; } = new ScoringAndAssessmentCategoryType(TenYearChdRiskArterialAgeValue);
        /// <summary> FRAX SCORE. </summary>
        public static ScoringAndAssessmentCategoryType FraxScore { get; } = new ScoringAndAssessmentCategoryType(FraxScoreValue);
        /// <summary> Determines if two <see cref="ScoringAndAssessmentCategoryType"/> values are the same. </summary>
        public static bool operator ==(ScoringAndAssessmentCategoryType left, ScoringAndAssessmentCategoryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScoringAndAssessmentCategoryType"/> values are not the same. </summary>
        public static bool operator !=(ScoringAndAssessmentCategoryType left, ScoringAndAssessmentCategoryType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ScoringAndAssessmentCategoryType"/>. </summary>
        public static implicit operator ScoringAndAssessmentCategoryType(string value) => new ScoringAndAssessmentCategoryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScoringAndAssessmentCategoryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScoringAndAssessmentCategoryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
