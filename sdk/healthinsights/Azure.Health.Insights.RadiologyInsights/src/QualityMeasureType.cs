// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary> Mips types that can be checked by the engine. </summary>
    public readonly partial struct QualityMeasureType : IEquatable<QualityMeasureType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QualityMeasureType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QualityMeasureType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Mips76Value = "mips76";
        private const string Mips147Value = "mips147";
        private const string Mips195Value = "mips195";
        private const string Mips360Value = "mips360";
        private const string Mips364Value = "mips364";
        private const string Mips405Value = "mips405";
        private const string Mips406Value = "mips406";
        private const string Mips436Value = "mips436";
        private const string Mips145Value = "mips145";
        private const string Acrad36Value = "acrad36";
        private const string Acrad37Value = "acrad37";
        private const string Acrad38Value = "acrad38";
        private const string Acrad39Value = "acrad39";
        private const string Acrad40Value = "acrad40";
        private const string Acrad41Value = "acrad41";
        private const string Acrad42Value = "acrad42";
        private const string Mednax55Value = "mednax55";
        private const string Msn13Value = "msn13";
        private const string Msn15Value = "msn15";
        private const string Qmm26Value = "qmm26";
        private const string Qmm17Value = "qmm17";
        private const string Qmm18Value = "qmm18";
        private const string Qmm19Value = "qmm19";

        /// <summary> Mips 76. </summary>
        public static QualityMeasureType Mips76 { get; } = new QualityMeasureType(Mips76Value);
        /// <summary> Mips 147. </summary>
        public static QualityMeasureType Mips147 { get; } = new QualityMeasureType(Mips147Value);
        /// <summary> Mips 195. </summary>
        public static QualityMeasureType Mips195 { get; } = new QualityMeasureType(Mips195Value);
        /// <summary> Mips 360. </summary>
        public static QualityMeasureType Mips360 { get; } = new QualityMeasureType(Mips360Value);
        /// <summary> Mips 364. </summary>
        public static QualityMeasureType Mips364 { get; } = new QualityMeasureType(Mips364Value);
        /// <summary> Mips 405. </summary>
        public static QualityMeasureType Mips405 { get; } = new QualityMeasureType(Mips405Value);
        /// <summary> Mips 406. </summary>
        public static QualityMeasureType Mips406 { get; } = new QualityMeasureType(Mips406Value);
        /// <summary> Mips 436. </summary>
        public static QualityMeasureType Mips436 { get; } = new QualityMeasureType(Mips436Value);
        /// <summary> Mips 145. </summary>
        public static QualityMeasureType Mips145 { get; } = new QualityMeasureType(Mips145Value);
        /// <summary> Acrad 36. </summary>
        public static QualityMeasureType Acrad36 { get; } = new QualityMeasureType(Acrad36Value);
        /// <summary> Acrad 37. </summary>
        public static QualityMeasureType Acrad37 { get; } = new QualityMeasureType(Acrad37Value);
        /// <summary> Acrad 38. </summary>
        public static QualityMeasureType Acrad38 { get; } = new QualityMeasureType(Acrad38Value);
        /// <summary> Acrad 39. </summary>
        public static QualityMeasureType Acrad39 { get; } = new QualityMeasureType(Acrad39Value);
        /// <summary> Acrad 40. </summary>
        public static QualityMeasureType Acrad40 { get; } = new QualityMeasureType(Acrad40Value);
        /// <summary> Acrad 41. </summary>
        public static QualityMeasureType Acrad41 { get; } = new QualityMeasureType(Acrad41Value);
        /// <summary> Acrad 42. </summary>
        public static QualityMeasureType Acrad42 { get; } = new QualityMeasureType(Acrad42Value);
        /// <summary> Mednax55. </summary>
        public static QualityMeasureType Mednax55 { get; } = new QualityMeasureType(Mednax55Value);
        /// <summary> Msn13. </summary>
        public static QualityMeasureType Msn13 { get; } = new QualityMeasureType(Msn13Value);
        /// <summary> Msn15. </summary>
        public static QualityMeasureType Msn15 { get; } = new QualityMeasureType(Msn15Value);
        /// <summary> Qmm26. </summary>
        public static QualityMeasureType Qmm26 { get; } = new QualityMeasureType(Qmm26Value);
        /// <summary> Qmm17. </summary>
        public static QualityMeasureType Qmm17 { get; } = new QualityMeasureType(Qmm17Value);
        /// <summary> Qmm18. </summary>
        public static QualityMeasureType Qmm18 { get; } = new QualityMeasureType(Qmm18Value);
        /// <summary> Qmm19. </summary>
        public static QualityMeasureType Qmm19 { get; } = new QualityMeasureType(Qmm19Value);
        /// <summary> Determines if two <see cref="QualityMeasureType"/> values are the same. </summary>
        public static bool operator ==(QualityMeasureType left, QualityMeasureType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QualityMeasureType"/> values are not the same. </summary>
        public static bool operator !=(QualityMeasureType left, QualityMeasureType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="QualityMeasureType"/>. </summary>
        public static implicit operator QualityMeasureType(string value) => new QualityMeasureType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QualityMeasureType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QualityMeasureType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
