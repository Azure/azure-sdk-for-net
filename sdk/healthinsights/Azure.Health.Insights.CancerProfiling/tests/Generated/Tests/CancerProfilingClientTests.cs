// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Insights.CancerProfiling.Tests
{
    public partial class CancerProfilingClientTests : HealthInsightsCancerProfilingTestBase
    {
        public CancerProfilingClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancerProfilingClient_InferCancerProfile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CancerProfilingClient client = CreateCancerProfilingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
}
            },
            });
            Operation<BinaryData> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancerProfilingClient_InferCancerProfile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CancerProfilingClient client = CreateCancerProfilingClient(endpoint, credential);

            OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
            {
new PatientRecord("<id>")
            });
            Operation<OncoPhenotypeResults> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, body);
            OncoPhenotypeResults responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancerProfilingClient_InferCancerProfile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CancerProfilingClient client = CreateCancerProfilingClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                patients = new object[]
            {
new
{
id = "<id>",
info = new
{
sex = "female",
birthDate = "2022-05-10",
clinicalInfo = new object[]
{
new
{
system = "<system>",
code = "<code>",
name = "<name>",
value = "<value>",
}
},
},
data = new object[]
{
new
{
type = "note",
clinicalType = "consultation",
id = "<id>",
language = "<language>",
createdDateTime = "2022-05-10T18:57:31.2311892Z",
content = new
{
sourceType = "inline",
value = "<value>",
},
}
},
}
            },
                configuration = new
                {
                    verbose = true,
                    includeEvidence = true,
                    inferenceTypes = new object[]
            {
"tumorSite"
            },
                    checkForCancerCase = true,
                },
            });
            Operation<BinaryData> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CancerProfilingClient_InferCancerProfile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            CancerProfilingClient client = CreateCancerProfilingClient(endpoint, credential);

            OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
            {
new PatientRecord("<id>")
{
Info = new PatientInfo
{
Sex = PatientInfoSex.Female,
BirthDate = DateTimeOffset.Parse("2022-05-10"),
ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
{
Name = "<name>",
Value = "<value>",
}},
},
Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
ClinicalType = ClinicalDocumentType.Consultation,
Language = "<language>",
CreatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
}},
}
            })
            {
                Configuration = new OncoPhenotypeModelConfiguration
                {
                    Verbose = true,
                    IncludeEvidence = true,
                    InferenceTypes = { OncoPhenotypeInferenceType.TumorSite },
                    CheckForCancerCase = true,
                },
            };
            Operation<OncoPhenotypeResults> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, body);
            OncoPhenotypeResults responseData = operation.Value;
        }
    }
}
