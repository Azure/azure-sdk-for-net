// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Insights.CancerProfiling.Samples
{
    public class Samples_CancerProfilingClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InferCancerProfile()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new CancerProfilingClient(endpoint, credential);

            var data = new
            {
                patients = new[] {
        new {
            id = "<id>",
        }
    },
            };

            var operation = client.InferCancerProfile(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InferCancerProfile_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new CancerProfilingClient(endpoint, credential);

            var data = new
            {
                patients = new[] {
        new {
            id = "<id>",
            info = new {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
                configuration = new
                {
                    verbose = true,
                    includeEvidence = true,
                    inferenceTypes = new[] {
            "tumorSite"
        },
                    checkForCancerCase = true,
                },
            };

            var operation = client.InferCancerProfile(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InferCancerProfile_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new CancerProfilingClient(endpoint, credential);

            var data = new
            {
                patients = new[] {
        new {
            id = "<id>",
        }
    },
            };

            var operation = await client.InferCancerProfileAsync(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InferCancerProfile_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new CancerProfilingClient(endpoint, credential);

            var data = new
            {
                patients = new[] {
        new {
            id = "<id>",
            info = new {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new[] {
                    new {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new[] {
                new {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
                configuration = new
                {
                    verbose = true,
                    includeEvidence = true,
                    inferenceTypes = new[] {
            "tumorSite"
        },
                    checkForCancerCase = true,
                },
            };

            var operation = await client.InferCancerProfileAsync(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InferCancerProfile_Convenience_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new CancerProfilingClient(endpoint, credential);

            var oncoPhenotypeData = new OncoPhenotypeData(new PatientRecord[]
            {
    new PatientRecord("<id>")
{
        Info = new PatientInfo()
{
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.UtcNow,
            ClinicalInfo =
{
                new ClinicalCodedElement("<system>", "<code>")
{
                    Name = "<Name>",
                    Value = "<Value>",
                }
            },
        },
        Data =
{
            new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
{
                ClinicalType = ClinicalDocumentType.Consultation,
                Language = "<Language>",
                CreatedDateTime = DateTimeOffset.UtcNow,
            }
        },
    }
            })
            {
                Configuration = new OncoPhenotypeModelConfiguration()
                {
                    Verbose = true,
                    IncludeEvidence = true,
                    InferenceTypes =
{
            OncoPhenotypeInferenceType.TumorSite
        },
                    CheckForCancerCase = true,
                },
            };
            var operation = await client.InferCancerProfileAsync(WaitUntil.Completed, oncoPhenotypeData);
        }
    }
}
