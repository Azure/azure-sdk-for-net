<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="InferCancerProfileAsync(WaitUntil,OncoPhenotypeData,CancellationToken)">
      <example>
This sample shows how to call InferCancerProfileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData oncoPhenotypeData = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation operation = await client.InferCancerProfileAsync(WaitUntil.Completed, oncoPhenotypeData);
]]></code>
This sample shows how to call InferCancerProfileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData oncoPhenotypeData = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        }},
    }
})
{
    Configuration = new OncoPhenotypeModelConfiguration
    {
        Verbose = true,
        IncludeEvidence = true,
        InferenceTypes = { OncoPhenotypeInferenceType.TumorSite },
        CheckForCancerCase = true,
    },
};
Operation operation = await client.InferCancerProfileAsync(WaitUntil.Completed, oncoPhenotypeData);
]]></code></example>
    </member>
    <member name="InferCancerProfile(WaitUntil,OncoPhenotypeData,CancellationToken)">
      <example>
This sample shows how to call InferCancerProfile.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData oncoPhenotypeData = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation operation = client.InferCancerProfile(WaitUntil.Completed, oncoPhenotypeData);
]]></code>
This sample shows how to call InferCancerProfile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData oncoPhenotypeData = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        }},
    }
})
{
    Configuration = new OncoPhenotypeModelConfiguration
    {
        Verbose = true,
        IncludeEvidence = true,
        InferenceTypes = { OncoPhenotypeInferenceType.TumorSite },
        CheckForCancerCase = true,
    },
};
Operation operation = client.InferCancerProfile(WaitUntil.Completed, oncoPhenotypeData);
]]></code></example>
    </member>
    <member name="InferCancerProfileAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call InferCancerProfileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
]]></code>
This sample shows how to call InferCancerProfileAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        inferenceTypes = new object[]
        {
            "tumorSite"
        },
        checkForCancerCase = true,
    },
});
Operation operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="InferCancerProfile(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call InferCancerProfile.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation operation = client.InferCancerProfile(WaitUntil.Completed, content);
]]></code>
This sample shows how to call InferCancerProfile with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T14:57:31.2311892-04:00",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        inferenceTypes = new object[]
        {
            "tumorSite"
        },
        checkForCancerCase = true,
    },
});
Operation operation = client.InferCancerProfile(WaitUntil.Completed, content);
]]></code></example>
    </member>
  </members>
</doc>