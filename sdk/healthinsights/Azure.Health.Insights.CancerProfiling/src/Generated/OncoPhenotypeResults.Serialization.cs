// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Azure.Health.Insights.CancerProfiling
{
    public partial class OncoPhenotypeResults
    {
        internal static OncoPhenotypeResults DeserializeOncoPhenotypeResults(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<OncoPhenotypePatientResult> patients = default;
            string modelVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("patients"u8))
                {
                    List<OncoPhenotypePatientResult> array = new List<OncoPhenotypePatientResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OncoPhenotypePatientResult.DeserializeOncoPhenotypePatientResult(item));
                    }
                    patients = array;
                    continue;
                }
                if (property.NameEquals("modelVersion"u8))
                {
                    modelVersion = property.Value.GetString();
                    continue;
                }
            }
            return new OncoPhenotypeResults(patients, modelVersion);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static OncoPhenotypeResults FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeOncoPhenotypeResults(document.RootElement);
        }
    }
}
