// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Health.Insights.CancerProfiling
{
    internal static partial class OncoPhenotypeInferenceTypeExtensions
    {
        public static string ToSerialString(this OncoPhenotypeInferenceType value) => value switch
        {
            OncoPhenotypeInferenceType.TumorSite => "tumorSite",
            OncoPhenotypeInferenceType.Histology => "histology",
            OncoPhenotypeInferenceType.ClinicalStageT => "clinicalStageT",
            OncoPhenotypeInferenceType.ClinicalStageN => "clinicalStageN",
            OncoPhenotypeInferenceType.ClinicalStageM => "clinicalStageM",
            OncoPhenotypeInferenceType.PathologicStageT => "pathologicStageT",
            OncoPhenotypeInferenceType.PathologicStageN => "pathologicStageN",
            OncoPhenotypeInferenceType.PathologicStageM => "pathologicStageM",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OncoPhenotypeInferenceType value.")
        };

        public static OncoPhenotypeInferenceType ToOncoPhenotypeInferenceType(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "tumorSite")) return OncoPhenotypeInferenceType.TumorSite;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "histology")) return OncoPhenotypeInferenceType.Histology;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "clinicalStageT")) return OncoPhenotypeInferenceType.ClinicalStageT;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "clinicalStageN")) return OncoPhenotypeInferenceType.ClinicalStageN;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "clinicalStageM")) return OncoPhenotypeInferenceType.ClinicalStageM;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pathologicStageT")) return OncoPhenotypeInferenceType.PathologicStageT;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pathologicStageN")) return OncoPhenotypeInferenceType.PathologicStageN;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "pathologicStageM")) return OncoPhenotypeInferenceType.PathologicStageM;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown OncoPhenotypeInferenceType value.");
        }
    }
}
