// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Health.Insights.CancerProfiling
{
    /// <summary> The inference results for the Onco Phenotype request. </summary>
    public partial class OncoPhenotypeResults
    {
        /// <summary> Initializes a new instance of <see cref="OncoPhenotypeResults"/>. </summary>
        /// <param name="patients"> Results for the patients given in the request. </param>
        /// <param name="modelVersion"> The version of the model used for inference, expressed as the model date. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patients"/> or <paramref name="modelVersion"/> is null. </exception>
        internal OncoPhenotypeResults(IEnumerable<OncoPhenotypePatientResult> patients, string modelVersion)
        {
            Argument.AssertNotNull(patients, nameof(patients));
            Argument.AssertNotNull(modelVersion, nameof(modelVersion));

            Patients = patients.ToList();
            ModelVersion = modelVersion;
        }

        /// <summary> Initializes a new instance of <see cref="OncoPhenotypeResults"/>. </summary>
        /// <param name="patients"> Results for the patients given in the request. </param>
        /// <param name="modelVersion"> The version of the model used for inference, expressed as the model date. </param>
        internal OncoPhenotypeResults(IReadOnlyList<OncoPhenotypePatientResult> patients, string modelVersion)
        {
            Patients = patients;
            ModelVersion = modelVersion;
        }

        /// <summary> Results for the patients given in the request. </summary>
        public IReadOnlyList<OncoPhenotypePatientResult> Patients { get; }
        /// <summary> The version of the model used for inference, expressed as the model date. </summary>
        public string ModelVersion { get; }
    }
}
