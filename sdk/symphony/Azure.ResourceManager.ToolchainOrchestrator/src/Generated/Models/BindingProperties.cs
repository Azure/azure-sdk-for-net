// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> Defines a binding for a provider. </summary>
    public partial class BindingProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BindingProperties"/>. </summary>
        /// <param name="provider"> Name of the provider. </param>
        /// <param name="role"> Role that the provider binds to with the component. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> or <paramref name="role"/> is null. </exception>
        public BindingProperties(string provider, string role)
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(role, nameof(role));

            Provider = provider;
            Config = new ChangeTrackingDictionary<string, string>();
            Role = role;
        }

        /// <summary> Initializes a new instance of <see cref="BindingProperties"/>. </summary>
        /// <param name="provider"> Name of the provider. </param>
        /// <param name="config"> Configuration values for the binding. </param>
        /// <param name="role"> Role that the provider binds to with the component. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BindingProperties(string provider, IDictionary<string, string> config, string role, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Provider = provider;
            Config = config;
            Role = role;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BindingProperties"/> for deserialization. </summary>
        internal BindingProperties()
        {
        }

        /// <summary> Name of the provider. </summary>
        public string Provider { get; set; }
        /// <summary> Configuration values for the binding. </summary>
        public IDictionary<string, string> Config { get; }
        /// <summary> Role that the provider binds to with the component. </summary>
        public string Role { get; set; }
    }
}
