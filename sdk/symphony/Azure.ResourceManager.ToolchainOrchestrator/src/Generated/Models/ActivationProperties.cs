// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> Defining the Activation. </summary>
    public partial class ActivationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ActivationProperties"/>. </summary>
        /// <param name="campaign"> The campaign name that the Activation should trigger. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="campaign"/> is null. </exception>
        public ActivationProperties(string campaign)
        {
            Argument.AssertNotNull(campaign, nameof(campaign));

            Inputs = new ChangeTrackingDictionary<string, BinaryData>();
            Campaign = campaign;
        }

        /// <summary> Initializes a new instance of <see cref="ActivationProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the activation. </param>
        /// <param name="inputs"> The inputs of the Activation. Inputs holds a key-value map of user-defined parameters for the initial stage. </param>
        /// <param name="stage"> The stage of the campaign from where the Activation should trigger. </param>
        /// <param name="campaign"> The campaign name that the Activation should trigger. </param>
        /// <param name="status"> The status of the Activation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ActivationProperties(ProvisioningState? provisioningState, IDictionary<string, BinaryData> inputs, string stage, string campaign, ActivationStatusProperties status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            Inputs = inputs;
            Stage = stage;
            Campaign = campaign;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ActivationProperties"/> for deserialization. </summary>
        internal ActivationProperties()
        {
        }

        /// <summary> Provisioning state of the activation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The inputs of the Activation. Inputs holds a key-value map of user-defined parameters for the initial stage
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Inputs { get; }
        /// <summary> The stage of the campaign from where the Activation should trigger. </summary>
        public string Stage { get; set; }
        /// <summary> The campaign name that the Activation should trigger. </summary>
        public string Campaign { get; set; }
        /// <summary> The status of the Activation. </summary>
        public ActivationStatusProperties Status { get; }
    }
}
