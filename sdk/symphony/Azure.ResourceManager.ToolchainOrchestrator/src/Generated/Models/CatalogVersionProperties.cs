// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> The properties of the CatalogVersion. </summary>
    public partial class CatalogVersionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CatalogVersionProperties"/>. </summary>
        public CatalogVersionProperties()
        {
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="CatalogVersionProperties"/>. </summary>
        /// <param name="provisioningState"> The provisioning state of the CatalogVersion. </param>
        /// <param name="properties"> The properties of the CatalogVersion. </param>
        /// <param name="metadata"> The metadata of the CatalogVersion. </param>
        /// <param name="parentName"> The name of parent CatalogVersion. </param>
        /// <param name="catalogType"> The catalogType of the CatalogVersion. </param>
        /// <param name="status"> The status of the CatalogVersion. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CatalogVersionProperties(ProvisioningState? provisioningState, IDictionary<string, BinaryData> properties, IDictionary<string, string> metadata, string parentName, string catalogType, CatalogStatusProperties status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            Properties = properties;
            Metadata = metadata;
            ParentName = parentName;
            CatalogType = catalogType;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The provisioning state of the CatalogVersion. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The properties of the CatalogVersion.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Properties { get; }
        /// <summary> The metadata of the CatalogVersion. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> The name of parent CatalogVersion. </summary>
        public string ParentName { get; set; }
        /// <summary> The catalogType of the CatalogVersion. </summary>
        public string CatalogType { get; set; }
        /// <summary> The status of the CatalogVersion. </summary>
        internal CatalogStatusProperties Status { get; }
        /// <summary> The properties of the CatalogStatus. </summary>
        public IReadOnlyDictionary<string, string> StatusProperties
        {
            get => Status?.Properties;
        }
    }
}
