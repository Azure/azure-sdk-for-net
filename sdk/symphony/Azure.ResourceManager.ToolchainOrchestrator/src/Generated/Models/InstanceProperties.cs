// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> The properties of an Instance resource. </summary>
    public partial class InstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/>. </summary>
        /// <param name="solution"> The SolutionVersion resource of the InstanceVersion resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solution"/> is null. </exception>
        public InstanceProperties(string solution)
        {
            Argument.AssertNotNull(solution, nameof(solution));

            Metadata = new ChangeTrackingDictionary<string, string>();
            Solution = solution;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="metadata"> The metadata information of the InstanceVersion resource. </param>
        /// <param name="displayName"> The display name of the InstanceVersion resource. </param>
        /// <param name="scope"> The scope of the InstanceVersion resource. </param>
        /// <param name="solution"> The SolutionVersion resource of the InstanceVersion resource. </param>
        /// <param name="target"> Defines the Target the InstanceVersion resource will deploy to. </param>
        /// <param name="reconciliationPolicy"> The reconciliationPolicy of the InstanceVersion resource. </param>
        /// <param name="isDryRun"> The running state for the InstanceVersion resource. </param>
        /// <param name="status"> The status of the InstanceVersion. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceProperties(ProvisioningState? provisioningState, IDictionary<string, string> metadata, string displayName, string scope, string solution, TargetSelectorProperties target, ReconciliationPolicyProperties reconciliationPolicy, bool? isDryRun, InstanceTargetStatusProperties status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            Metadata = metadata;
            DisplayName = displayName;
            Scope = scope;
            Solution = solution;
            Target = target;
            ReconciliationPolicy = reconciliationPolicy;
            IsDryRun = isDryRun;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceProperties"/> for deserialization. </summary>
        internal InstanceProperties()
        {
        }

        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The metadata information of the InstanceVersion resource. </summary>
        public IDictionary<string, string> Metadata { get; }
        /// <summary> The display name of the InstanceVersion resource. </summary>
        public string DisplayName { get; set; }
        /// <summary> The scope of the InstanceVersion resource. </summary>
        public string Scope { get; set; }
        /// <summary> The SolutionVersion resource of the InstanceVersion resource. </summary>
        public string Solution { get; set; }
        /// <summary> Defines the Target the InstanceVersion resource will deploy to. </summary>
        public TargetSelectorProperties Target { get; set; }
        /// <summary> The reconciliationPolicy of the InstanceVersion resource. </summary>
        public ReconciliationPolicyProperties ReconciliationPolicy { get; set; }
        /// <summary> The running state for the InstanceVersion resource. </summary>
        public bool? IsDryRun { get; set; }
        /// <summary> The status of the InstanceVersion. </summary>
        public InstanceTargetStatusProperties Status { get; }
    }
}
