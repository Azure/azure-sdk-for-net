// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> Defines a StageHistory. </summary>
    public partial class StageHistoryProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StageHistoryProperties"/>. </summary>
        /// <param name="stage"> The stage of the StageHistory. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="stage"/> is null. </exception>
        internal StageHistoryProperties(string stage)
        {
            Argument.AssertNotNull(stage, nameof(stage));

            Inputs = new ChangeTrackingDictionary<string, BinaryData>();
            Outputs = new ChangeTrackingDictionary<string, BinaryData>();
            Stage = stage;
        }

        /// <summary> Initializes a new instance of <see cref="StageHistoryProperties"/>. </summary>
        /// <param name="inputs"> The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage. </param>
        /// <param name="outputs"> The outputs of the StageHistory, it is different as the different input stages. </param>
        /// <param name="stage"> The stage of the StageHistory. </param>
        /// <param name="isActive"> The state of the StageHistory. </param>
        /// <param name="nextStage"> The nextStage of the StageHistory. </param>
        /// <param name="errorMessage"> The errorMessage of the StageHistory. </param>
        /// <param name="status"> The status code of the StageHistory. </param>
        /// <param name="statusMessage"> The status message of the StageHistory. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StageHistoryProperties(IReadOnlyDictionary<string, BinaryData> inputs, IReadOnlyDictionary<string, BinaryData> outputs, string stage, bool? isActive, string nextStage, string errorMessage, int? status, string statusMessage, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Inputs = inputs;
            Outputs = outputs;
            Stage = stage;
            IsActive = isActive;
            NextStage = nextStage;
            ErrorMessage = errorMessage;
            Status = status;
            StatusMessage = statusMessage;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StageHistoryProperties"/> for deserialization. </summary>
        internal StageHistoryProperties()
        {
        }

        /// <summary>
        /// The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Inputs { get; }
        /// <summary>
        /// The outputs of the StageHistory, it is different as the different input stages.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Outputs { get; }
        /// <summary> The stage of the StageHistory. </summary>
        public string Stage { get; }
        /// <summary> The state of the StageHistory. </summary>
        public bool? IsActive { get; }
        /// <summary> The nextStage of the StageHistory. </summary>
        public string NextStage { get; }
        /// <summary> The errorMessage of the StageHistory. </summary>
        public string ErrorMessage { get; }
        /// <summary> The status code of the StageHistory. </summary>
        public int? Status { get; }
        /// <summary> The status message of the StageHistory. </summary>
        public string StatusMessage { get; }
    }
}
