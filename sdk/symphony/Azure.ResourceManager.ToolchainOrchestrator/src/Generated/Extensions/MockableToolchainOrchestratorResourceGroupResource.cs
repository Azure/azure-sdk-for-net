// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.ToolchainOrchestrator.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableToolchainOrchestratorResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableToolchainOrchestratorResourceGroupResource"/> class for mocking. </summary>
        protected MockableToolchainOrchestratorResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableToolchainOrchestratorResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableToolchainOrchestratorResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SolutionResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of SolutionResources and their operations over a SolutionResource. </returns>
        public virtual SolutionCollection GetSolutions()
        {
            return GetCachedClient(client => new SolutionCollection(client, Id));
        }

        /// <summary>
        /// Returns details of specified Solution resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SolutionResource>> GetSolutionAsync(string solutionName, CancellationToken cancellationToken = default)
        {
            return await GetSolutions().GetAsync(solutionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of specified Solution resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/solutions/{solutionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionName"> Name of solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<SolutionResource> GetSolution(string solutionName, CancellationToken cancellationToken = default)
        {
            return GetSolutions().Get(solutionName, cancellationToken);
        }

        /// <summary> Gets a collection of TargetResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of TargetResources and their operations over a TargetResource. </returns>
        public virtual TargetCollection GetTargets()
        {
            return GetCachedClient(client => new TargetCollection(client, Id));
        }

        /// <summary>
        /// Returns details of specified Target resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Targets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<TargetResource>> GetTargetAsync(string targetName, CancellationToken cancellationToken = default)
        {
            return await GetTargets().GetAsync(targetName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of specified Target resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/targets/{targetName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Targets_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="targetName"> Name of target. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="targetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="targetName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<TargetResource> GetTarget(string targetName, CancellationToken cancellationToken = default)
        {
            return GetTargets().Get(targetName, cancellationToken);
        }

        /// <summary> Gets a collection of InstanceResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of InstanceResources and their operations over a InstanceResource. </returns>
        public virtual InstanceCollection GetInstances()
        {
            return GetCachedClient(client => new InstanceCollection(client, Id));
        }

        /// <summary>
        /// Returns details of specified Instance resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instances_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of Instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<InstanceResource>> GetInstanceAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            return await GetInstances().GetAsync(instanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of specified Instance resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/instances/{instanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instances_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="instanceName"> Name of Instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="instanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<InstanceResource> GetInstance(string instanceName, CancellationToken cancellationToken = default)
        {
            return GetInstances().Get(instanceName, cancellationToken);
        }

        /// <summary> Gets a collection of CampaignResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of CampaignResources and their operations over a CampaignResource. </returns>
        public virtual CampaignCollection GetCampaigns()
        {
            return GetCachedClient(client => new CampaignCollection(client, Id));
        }

        /// <summary>
        /// Returns the details of the campaign.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/campaigns/{campaignName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Campaigns_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CampaignResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="campaignName"> The name of the campaign. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="campaignName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="campaignName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CampaignResource>> GetCampaignAsync(string campaignName, CancellationToken cancellationToken = default)
        {
            return await GetCampaigns().GetAsync(campaignName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the details of the campaign.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/campaigns/{campaignName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Campaigns_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CampaignResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="campaignName"> The name of the campaign. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="campaignName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="campaignName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<CampaignResource> GetCampaign(string campaignName, CancellationToken cancellationToken = default)
        {
            return GetCampaigns().Get(campaignName, cancellationToken);
        }

        /// <summary> Gets a collection of ActivationResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of ActivationResources and their operations over a ActivationResource. </returns>
        public virtual ActivationCollection GetActivations()
        {
            return GetCachedClient(client => new ActivationCollection(client, Id));
        }

        /// <summary>
        /// Returns the details of the activation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/activations/{activationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Activations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ActivationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="activationName"> The name of the activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="activationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="activationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ActivationResource>> GetActivationAsync(string activationName, CancellationToken cancellationToken = default)
        {
            return await GetActivations().GetAsync(activationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the details of the activation.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/activations/{activationName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Activations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ActivationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="activationName"> The name of the activation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="activationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="activationName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ActivationResource> GetActivation(string activationName, CancellationToken cancellationToken = default)
        {
            return GetActivations().Get(activationName, cancellationToken);
        }

        /// <summary> Gets a collection of CatalogResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of CatalogResources and their operations over a CatalogResource. </returns>
        public virtual CatalogCollection GetCatalogs()
        {
            return GetCachedClient(client => new CatalogCollection(client, Id));
        }

        /// <summary>
        /// Returns details of the Catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/catalogs/{catalogName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Catalogs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CatalogResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogName"> The name of Azure API Center service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CatalogResource>> GetCatalogAsync(string catalogName, CancellationToken cancellationToken = default)
        {
            return await GetCatalogs().GetAsync(catalogName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of the Catalog.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/catalogs/{catalogName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Catalogs_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CatalogResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="catalogName"> The name of Azure API Center service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="catalogName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="catalogName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<CatalogResource> GetCatalog(string catalogName, CancellationToken cancellationToken = default)
        {
            return GetCatalogs().Get(catalogName, cancellationToken);
        }

        /// <summary> Gets a collection of DiagnosticResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of DiagnosticResources and their operations over a DiagnosticResource. </returns>
        public virtual DiagnosticCollection GetDiagnostics()
        {
            return GetCachedClient(client => new DiagnosticCollection(client, Id));
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DiagnosticResource>> GetDiagnosticAsync(string diagnosticName, CancellationToken cancellationToken = default)
        {
            return await GetDiagnostics().GetAsync(diagnosticName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns details of specified Diagnostic resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ToolchainOrchestrator/diagnostics/{diagnosticName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostics_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="diagnosticName"> Name of Diagnostic. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DiagnosticResource> GetDiagnostic(string diagnosticName, CancellationToken cancellationToken = default)
        {
            return GetDiagnostics().Get(diagnosticName, cancellationToken);
        }
    }
}
