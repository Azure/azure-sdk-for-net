// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.ToolchainOrchestrator.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableToolchainOrchestratorSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _solutionClientDiagnostics;
        private SolutionsRestOperations _solutionRestClient;
        private ClientDiagnostics _targetClientDiagnostics;
        private TargetsRestOperations _targetRestClient;
        private ClientDiagnostics _instanceClientDiagnostics;
        private InstancesRestOperations _instanceRestClient;
        private ClientDiagnostics _campaignClientDiagnostics;
        private CampaignsRestOperations _campaignRestClient;
        private ClientDiagnostics _activationClientDiagnostics;
        private ActivationsRestOperations _activationRestClient;
        private ClientDiagnostics _catalogClientDiagnostics;
        private CatalogsRestOperations _catalogRestClient;
        private ClientDiagnostics _diagnosticClientDiagnostics;
        private DiagnosticsRestOperations _diagnosticRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableToolchainOrchestratorSubscriptionResource"/> class for mocking. </summary>
        protected MockableToolchainOrchestratorSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableToolchainOrchestratorSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableToolchainOrchestratorSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SolutionClientDiagnostics => _solutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", SolutionResource.ResourceType.Namespace, Diagnostics);
        private SolutionsRestOperations SolutionRestClient => _solutionRestClient ??= new SolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SolutionResource.ResourceType));
        private ClientDiagnostics TargetClientDiagnostics => _targetClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", TargetResource.ResourceType.Namespace, Diagnostics);
        private TargetsRestOperations TargetRestClient => _targetRestClient ??= new TargetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TargetResource.ResourceType));
        private ClientDiagnostics InstanceClientDiagnostics => _instanceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", InstanceResource.ResourceType.Namespace, Diagnostics);
        private InstancesRestOperations InstanceRestClient => _instanceRestClient ??= new InstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(InstanceResource.ResourceType));
        private ClientDiagnostics CampaignClientDiagnostics => _campaignClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", CampaignResource.ResourceType.Namespace, Diagnostics);
        private CampaignsRestOperations CampaignRestClient => _campaignRestClient ??= new CampaignsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CampaignResource.ResourceType));
        private ClientDiagnostics ActivationClientDiagnostics => _activationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", ActivationResource.ResourceType.Namespace, Diagnostics);
        private ActivationsRestOperations ActivationRestClient => _activationRestClient ??= new ActivationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ActivationResource.ResourceType));
        private ClientDiagnostics CatalogClientDiagnostics => _catalogClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", CatalogResource.ResourceType.Namespace, Diagnostics);
        private CatalogsRestOperations CatalogRestClient => _catalogRestClient ??= new CatalogsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CatalogResource.ResourceType));
        private ClientDiagnostics DiagnosticClientDiagnostics => _diagnosticClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ToolchainOrchestrator", DiagnosticResource.ResourceType.Namespace, Diagnostics);
        private DiagnosticsRestOperations DiagnosticRestClient => _diagnosticRestClient ??= new DiagnosticsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(DiagnosticResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists Solutions resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SolutionResource> GetSolutionsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SolutionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SolutionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SolutionResource(Client, SolutionData.DeserializeSolutionData(e)), SolutionClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetSolutions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Solutions resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/solutions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Solution_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SolutionResource> GetSolutions(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => SolutionRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => SolutionRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SolutionResource(Client, SolutionData.DeserializeSolutionData(e)), SolutionClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetSolutions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Targets resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TargetResource> GetTargetsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TargetRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TargetRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new TargetResource(Client, TargetData.DeserializeTargetData(e)), TargetClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetTargets", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Targets resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/targets</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Target_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TargetResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TargetResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TargetResource> GetTargets(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TargetRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TargetRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new TargetResource(Client, TargetData.DeserializeTargetData(e)), TargetClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetTargets", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Instances resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InstanceResource> GetInstancesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new InstanceResource(Client, InstanceData.DeserializeInstanceData(e)), InstanceClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetInstances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Instances resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/instances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Instance_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="InstanceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InstanceResource> GetInstances(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InstanceRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InstanceRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new InstanceResource(Client, InstanceData.DeserializeInstanceData(e)), InstanceClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetInstances", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists campaigns within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/campaigns</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Campaign_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CampaignResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CampaignResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CampaignResource> GetCampaignsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CampaignRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CampaignRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CampaignResource(Client, CampaignData.DeserializeCampaignData(e)), CampaignClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetCampaigns", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists campaigns within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/campaigns</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Campaign_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CampaignResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CampaignResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CampaignResource> GetCampaigns(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CampaignRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CampaignRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CampaignResource(Client, CampaignData.DeserializeCampaignData(e)), CampaignClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetCampaigns", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists activations within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/activations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Activation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ActivationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ActivationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ActivationResource> GetActivationsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ActivationRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ActivationRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ActivationResource(Client, ActivationData.DeserializeActivationData(e)), ActivationClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetActivations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists activations within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/activations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Activation_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ActivationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ActivationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ActivationResource> GetActivations(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => ActivationRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => ActivationRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ActivationResource(Client, ActivationData.DeserializeActivationData(e)), ActivationClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetActivations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Catalogs within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/catalogs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Catalog_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CatalogResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CatalogResource> GetCatalogsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CatalogRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CatalogRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new CatalogResource(Client, CatalogData.DeserializeCatalogData(e)), CatalogClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetCatalogs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Catalogs within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/catalogs</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Catalog_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="CatalogResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CatalogResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CatalogResource> GetCatalogs(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CatalogRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CatalogRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new CatalogResource(Client, CatalogData.DeserializeCatalogData(e)), CatalogClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetCatalogs", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Diagnostics resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DiagnosticResource> GetDiagnosticsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DiagnosticRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DiagnosticRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DiagnosticResource(Client, DiagnosticData.DeserializeDiagnosticData(e)), DiagnosticClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetDiagnostics", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists Diagnostics resources within an Azure subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ToolchainOrchestrator/diagnostics</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Diagnostic_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-08-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DiagnosticResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiagnosticResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DiagnosticResource> GetDiagnostics(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => DiagnosticRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => DiagnosticRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DiagnosticResource(Client, DiagnosticData.DeserializeDiagnosticData(e)), DiagnosticClientDiagnostics, Pipeline, "MockableToolchainOrchestratorSubscriptionResource.GetDiagnostics", "value", "nextLink", cancellationToken);
        }
    }
}
