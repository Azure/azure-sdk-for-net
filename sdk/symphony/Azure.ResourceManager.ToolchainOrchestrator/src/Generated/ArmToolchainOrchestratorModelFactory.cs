// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ToolchainOrchestrator.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmToolchainOrchestratorModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.DiagnosticData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="diagnosticProvisioningState"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.DiagnosticData"/> instance for mocking. </returns>
        public static DiagnosticData DiagnosticData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? diagnosticProvisioningState = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DiagnosticData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                diagnosticProvisioningState != null ? new DiagnosticProperties(diagnosticProvisioningState, serializedAdditionalRawData: null) : null,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.CampaignVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.CampaignVersionData"/> instance for mocking. </returns>
        public static CampaignVersionData CampaignVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CampaignVersionProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CampaignVersionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CampaignVersionProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the campaignVersion. </param>
        /// <param name="firstStage"> The initial stage of the CampaignVersion. </param>
        /// <param name="selfDriving"> Whether campaign is self driving or not. That is whether a stage should trigger the next stage when it finishes. </param>
        /// <param name="stages"> The stages of the CampaignVersion. </param>
        /// <returns> A new <see cref="Models.CampaignVersionProperties"/> instance for mocking. </returns>
        public static CampaignVersionProperties CampaignVersionProperties(ProvisioningState? provisioningState = null, string firstStage = null, bool? selfDriving = null, IDictionary<string, StageProperties> stages = null)
        {
            stages ??= new Dictionary<string, StageProperties>();

            return new CampaignVersionProperties(provisioningState, firstStage, selfDriving, stages, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.CatalogVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the CatalogVersion. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.CatalogVersionData"/> instance for mocking. </returns>
        public static CatalogVersionData CatalogVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CatalogVersionProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CatalogVersionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CatalogVersionProperties"/>. </summary>
        /// <param name="provisioningState"> The provisioning state of the CatalogVersion. </param>
        /// <param name="properties"> The properties of the CatalogVersion. </param>
        /// <param name="metadata"> The metadata of the CatalogVersion. </param>
        /// <param name="parentName"> The name of parent CatalogVersion. </param>
        /// <param name="catalogType"> The catalogType of the CatalogVersion. </param>
        /// <param name="statusProperties"> The status of the CatalogVersion. </param>
        /// <returns> A new <see cref="Models.CatalogVersionProperties"/> instance for mocking. </returns>
        public static CatalogVersionProperties CatalogVersionProperties(ProvisioningState? provisioningState = null, IDictionary<string, BinaryData> properties = null, IDictionary<string, string> metadata = null, string parentName = null, string catalogType = null, IReadOnlyDictionary<string, string> statusProperties = null)
        {
            properties ??= new Dictionary<string, BinaryData>();
            metadata ??= new Dictionary<string, string>();
            statusProperties ??= new Dictionary<string, string>();

            return new CatalogVersionProperties(
                provisioningState,
                properties,
                metadata,
                parentName,
                catalogType,
                statusProperties != null ? new CatalogStatusProperties(statusProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvalExpressionResponse"/>. </summary>
        /// <param name="id"> Operation Id. </param>
        /// <param name="name"> Operation Name. </param>
        /// <param name="status"> Provisioning state of the expression evaluation resource. </param>
        /// <param name="error"> Error listing the expression evaluation response. </param>
        /// <param name="properties"> Properties of the expression evaluation response. </param>
        /// <returns> A new <see cref="Models.EvalExpressionResponse"/> instance for mocking. </returns>
        public static EvalExpressionResponse EvalExpressionResponse(string id = null, string name = null, ResourceProvisioningState? status = null, EvalExpressionResponseError error = null, IReadOnlyDictionary<string, BinaryData> properties = null)
        {
            properties ??= new Dictionary<string, BinaryData>();

            return new EvalExpressionResponse(
                id,
                name,
                status,
                error,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EvalExpressionResponseError"/>. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.EvalExpressionResponseError"/> instance for mocking. </returns>
        public static EvalExpressionResponseError EvalExpressionResponseError(string code = null, string message = null)
        {
            return new EvalExpressionResponseError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.SolutionVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.SolutionVersionData"/> instance for mocking. </returns>
        public static SolutionVersionData SolutionVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SolutionVersionProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SolutionVersionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SolutionVersionProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="components"> A list of components. </param>
        /// <param name="displayName"> The display name of the SolutionVersion resource. </param>
        /// <param name="metadata"> The metadata information of the SolutionVersion resource. </param>
        /// <returns> A new <see cref="Models.SolutionVersionProperties"/> instance for mocking. </returns>
        public static SolutionVersionProperties SolutionVersionProperties(ProvisioningState? provisioningState = null, IEnumerable<ComponentProperties> components = null, string displayName = null, IDictionary<string, string> metadata = null)
        {
            components ??= new List<ComponentProperties>();
            metadata ??= new Dictionary<string, string>();

            return new SolutionVersionProperties(provisioningState, components?.ToList(), displayName, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.CatalogData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="catalogProvisioningState"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the Catalog. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.CatalogData"/> instance for mocking. </returns>
        public static CatalogData CatalogData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? catalogProvisioningState = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CatalogData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                catalogProvisioningState != null ? new CatalogProperties(catalogProvisioningState, serializedAdditionalRawData: null) : null,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.ActivationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.ActivationData"/> instance for mocking. </returns>
        public static ActivationData ActivationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ActivationProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ActivationData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ActivationProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of the activation. </param>
        /// <param name="inputs"> The inputs of the Activation. Inputs holds a key-value map of user-defined parameters for the initial stage. </param>
        /// <param name="stage"> The stage of the campaign from where the Activation should trigger. </param>
        /// <param name="campaign"> The campaign name that the Activation should trigger. </param>
        /// <param name="status"> The status of the Activation. </param>
        /// <returns> A new <see cref="Models.ActivationProperties"/> instance for mocking. </returns>
        public static ActivationProperties ActivationProperties(ProvisioningState? provisioningState = null, IDictionary<string, BinaryData> inputs = null, string stage = null, string campaign = null, ActivationStatusProperties status = null)
        {
            inputs ??= new Dictionary<string, BinaryData>();

            return new ActivationProperties(
                provisioningState,
                inputs,
                stage,
                campaign,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ActivationStatusProperties"/>. </summary>
        /// <param name="stageHistory"> The execution history Activation. </param>
        /// <param name="activationGeneration"> The activationGeneration of the ActivationStatus. </param>
        /// <param name="updateTime"> The updateTime of the ActivationStatus. </param>
        /// <param name="status"> The status code of the ActivationStatus. </param>
        /// <param name="statusMessage"> The status message of the ActivationStatus. </param>
        /// <returns> A new <see cref="Models.ActivationStatusProperties"/> instance for mocking. </returns>
        public static ActivationStatusProperties ActivationStatusProperties(IEnumerable<StageHistoryProperties> stageHistory = null, string activationGeneration = null, string updateTime = null, int? status = null, string statusMessage = null)
        {
            stageHistory ??= new List<StageHistoryProperties>();

            return new ActivationStatusProperties(
                stageHistory?.ToList(),
                activationGeneration,
                updateTime,
                status,
                statusMessage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StageHistoryProperties"/>. </summary>
        /// <param name="inputs"> The inputs of the StageHistory, Inputs holds a key-value map of user-defined parameters for the initial stage. </param>
        /// <param name="outputs"> The outputs of the StageHistory, it is different as the different input stages. </param>
        /// <param name="stage"> The stage of the StageHistory. </param>
        /// <param name="isActive"> The state of the StageHistory. </param>
        /// <param name="nextStage"> The nextStage of the StageHistory. </param>
        /// <param name="errorMessage"> The errorMessage of the StageHistory. </param>
        /// <param name="status"> The status code of the StageHistory. </param>
        /// <param name="statusMessage"> The status message of the StageHistory. </param>
        /// <returns> A new <see cref="Models.StageHistoryProperties"/> instance for mocking. </returns>
        public static StageHistoryProperties StageHistoryProperties(IReadOnlyDictionary<string, BinaryData> inputs = null, IReadOnlyDictionary<string, BinaryData> outputs = null, string stage = null, bool? isActive = null, string nextStage = null, string errorMessage = null, int? status = null, string statusMessage = null)
        {
            inputs ??= new Dictionary<string, BinaryData>();
            outputs ??= new Dictionary<string, BinaryData>();

            return new StageHistoryProperties(
                inputs,
                outputs,
                stage,
                isActive,
                nextStage,
                errorMessage,
                status,
                statusMessage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.CampaignData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="campaignProvisioningState"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.CampaignData"/> instance for mocking. </returns>
        public static CampaignData CampaignData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? campaignProvisioningState = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CampaignData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                campaignProvisioningState != null ? new CampaignProperties(campaignProvisioningState, serializedAdditionalRawData: null) : null,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.InstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.InstanceData"/> instance for mocking. </returns>
        public static InstanceData InstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, InstanceProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new InstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InstanceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="metadata"> The metadata information of the InstanceVersion resource. </param>
        /// <param name="displayName"> The display name of the InstanceVersion resource. </param>
        /// <param name="scope"> The scope of the InstanceVersion resource. </param>
        /// <param name="solution"> The SolutionVersion resource of the InstanceVersion resource. </param>
        /// <param name="target"> Defines the Target the InstanceVersion resource will deploy to. </param>
        /// <param name="reconciliationPolicy"> The reconciliationPolicy of the InstanceVersion resource. </param>
        /// <param name="isDryRun"> The running state for the InstanceVersion resource. </param>
        /// <param name="status"> The status of the InstanceVersion. </param>
        /// <returns> A new <see cref="Models.InstanceProperties"/> instance for mocking. </returns>
        public static InstanceProperties InstanceProperties(ProvisioningState? provisioningState = null, IDictionary<string, string> metadata = null, string displayName = null, string scope = null, string solution = null, TargetSelectorProperties target = null, ReconciliationPolicyProperties reconciliationPolicy = null, bool? isDryRun = null, InstanceTargetStatusProperties status = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new InstanceProperties(
                provisioningState,
                metadata,
                displayName,
                scope,
                solution,
                target,
                reconciliationPolicy,
                isDryRun,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InstanceTargetStatusProperties"/>. </summary>
        /// <param name="lastModified"> The lastModified of the Status. </param>
        /// <param name="properties"> The state properties of the Status. </param>
        /// <returns> A new <see cref="Models.InstanceTargetStatusProperties"/> instance for mocking. </returns>
        public static InstanceTargetStatusProperties InstanceTargetStatusProperties(DateTimeOffset lastModified = default, IReadOnlyDictionary<string, string> properties = null)
        {
            properties ??= new Dictionary<string, string>();

            return new InstanceTargetStatusProperties(lastModified, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.TargetData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.TargetData"/> instance for mocking. </returns>
        public static TargetData TargetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, TargetProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TargetData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TargetProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="metadata"> The metadata information of the TargetVersion. </param>
        /// <param name="properties"> The properties of the TargetVersion. </param>
        /// <param name="displayName"> The display name of the TargetVersion. </param>
        /// <param name="constraints"> The constraints of the TargetVersion. </param>
        /// <param name="scope"> The scope of the TargetVersion. </param>
        /// <param name="topologies"> Defines the device topology for a target or instance. </param>
        /// <param name="components"> A list of components. </param>
        /// <param name="reconciliationPolicy"> The reconciliationPolicy of the TargetVersion. </param>
        /// <param name="isDryRun"> The running state for the TargetVersion resource. </param>
        /// <param name="status"> The status of the TargetVersion. </param>
        /// <returns> A new <see cref="Models.TargetProperties"/> instance for mocking. </returns>
        public static TargetProperties TargetProperties(ProvisioningState? provisioningState = null, IDictionary<string, string> metadata = null, IDictionary<string, string> properties = null, string displayName = null, string constraints = null, string scope = null, IEnumerable<TopologyProperties> topologies = null, IEnumerable<ComponentProperties> components = null, ReconciliationPolicyProperties reconciliationPolicy = null, bool? isDryRun = null, InstanceTargetStatusProperties status = null)
        {
            metadata ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            topologies ??= new List<TopologyProperties>();
            components ??= new List<ComponentProperties>();

            return new TargetProperties(
                provisioningState,
                metadata,
                properties,
                displayName,
                constraints,
                scope,
                topologies?.ToList(),
                components?.ToList(),
                reconciliationPolicy,
                isDryRun,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ToolchainOrchestrator.SolutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="solutionProvisioningState"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> Edge location of the resource. </param>
        /// <returns> A new <see cref="ToolchainOrchestrator.SolutionData"/> instance for mocking. </returns>
        public static SolutionData SolutionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? solutionProvisioningState = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SolutionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                solutionProvisioningState != null ? new SolutionProperties(solutionProvisioningState, serializedAdditionalRawData: null) : null,
                extendedLocation,
                serializedAdditionalRawData: null);
        }
    }
}
