// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MigrationDiscoverySap.Models
{
    /// <summary> Select the database if this is a database server. Leave blank or add Not Applicable for all other instances except the Database Instance. </summary>
    public readonly partial struct DatabaseType : IEquatable<DatabaseType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DatabaseType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AdabasValue = "Adabas";
        private const string OracleValue = "Oracle";
        private const string SAPMaxDBValue = "SAPMaxDB";
        private const string Db2Value = "Db2";
        private const string SapaseValue = "SAPASE";
        private const string SQLServerValue = "SQLServer";
        private const string InformixValue = "Informix";
        private const string SapdbValue = "SAPDB";
        private const string HanaValue = "HANA";

        /// <summary> The type of Database- Adabas. </summary>
        public static DatabaseType Adabas { get; } = new DatabaseType(AdabasValue);
        /// <summary> The type of Database- Oracle. </summary>
        public static DatabaseType Oracle { get; } = new DatabaseType(OracleValue);
        /// <summary> The type of Database- SAPMaxDB. </summary>
        public static DatabaseType SAPMaxDB { get; } = new DatabaseType(SAPMaxDBValue);
        /// <summary> The type of Database- Db2. </summary>
        public static DatabaseType Db2 { get; } = new DatabaseType(Db2Value);
        /// <summary> The type of Database- SAPASE. </summary>
        public static DatabaseType Sapase { get; } = new DatabaseType(SapaseValue);
        /// <summary> The type of Database- SQLServer. </summary>
        public static DatabaseType SQLServer { get; } = new DatabaseType(SQLServerValue);
        /// <summary> The type of Database- Informix. </summary>
        public static DatabaseType Informix { get; } = new DatabaseType(InformixValue);
        /// <summary> The type of Database- SAPDB. </summary>
        public static DatabaseType Sapdb { get; } = new DatabaseType(SapdbValue);
        /// <summary> The type of Database- HANA. </summary>
        public static DatabaseType Hana { get; } = new DatabaseType(HanaValue);
        /// <summary> Determines if two <see cref="DatabaseType"/> values are the same. </summary>
        public static bool operator ==(DatabaseType left, DatabaseType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DatabaseType"/> values are not the same. </summary>
        public static bool operator !=(DatabaseType left, DatabaseType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DatabaseType"/>. </summary>
        public static implicit operator DatabaseType(string value) => new DatabaseType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DatabaseType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DatabaseType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
