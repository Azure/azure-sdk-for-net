{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "testApplicationOid": {
      "type": "string",
      "metadata": {
        "description": "The client OID to grant access to test resources."
      }
    },
    "baseName": {
      "type": "string",
      "minLength": 6,
      "maxLength": 50,
      "metadata": {
        "description": "The base resource name."
      },
      "defaultValue": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of the resource. By default, this is the same as the resource group."
      },
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "functions": [],
  "variables": {
    "rbacOwnerRoleDefinitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
    "adtOwnerRoleDefinitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe', subscription().subscriptionId)]"
  },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[guid(resourceGroup().id)]",
      "properties": {
        "roleDefinitionId": "[variables('rbacOwnerRoleDefinitionId')]",
        "principalId": "[parameters('testApplicationOid')]"
      }
    },
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "2020-03-01-preview",
      "name": "[parameters('baseName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "S1"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances/providers/roleAssignments",
      "apiVersion": "2020-03-01-preview",
      "name": "[format('{0}/Microsoft.Authorization/{1}', parameters('baseName'), guid(uniqueString(parameters('baseName'))))]",
      "properties": {
        "roleDefinitionId": "[variables('adtOwnerRoleDefinitionId')]",
        "principalId": "[parameters('testApplicationOid')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('baseName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2018-01-01-preview",
      "name": "[parameters('baseName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "zoneRedundant": false,
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0,
        "kafkaEnabled": false
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/{1}', parameters('baseName'), parameters('baseName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "messageRetentionInDays": 7,
        "partitionCount": 4,
        "status": "Active"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('baseName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/RootManageSharedAccessKey', parameters('baseName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('baseName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName')))]",
      "location": "[parameters('location')]",
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', parameters('baseName'), parameters('baseName')), '/')[0], split(format('{0}/{1}', parameters('baseName'), parameters('baseName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances/endpoints",
      "apiVersion": "2020-03-01-preview",
      "name": "[format('{0}/someEventHubEndpoint', parameters('baseName'))]",
      "properties": {
        "endpointType": "EventHub",
        "connectionString-PrimaryKey": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[0], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[1], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[2]), '2017-04-01').primaryConnectionString]",
        "connectionString-SecondaryKey": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[0], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[1], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[2]), '2017-04-01').secondaryConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('baseName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[0], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[1], split(format('{0}/owner', format('{0}/{1}', parameters('baseName'), parameters('baseName'))), '/')[2])]"
      ]
    }
  ],
  "outputs": {
    "DIGITALTWINS_URL": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', parameters('baseName'))).hostName)]"
    }
  }
}