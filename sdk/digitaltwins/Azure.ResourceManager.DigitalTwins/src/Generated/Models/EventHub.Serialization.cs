// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DigitalTwins.Models
{
    public partial class EventHub : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("connectionString-PrimaryKey");
            writer.WriteStringValue(ConnectionStringPrimaryKey);
            writer.WritePropertyName("connectionString-SecondaryKey");
            writer.WriteStringValue(ConnectionStringSecondaryKey);
            writer.WritePropertyName("endpointType");
            writer.WriteStringValue(EndpointType.ToString());
            if (ProvisioningState != null)
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (CreatedTime != null)
            {
                writer.WritePropertyName("createdTime");
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Tags != null)
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static EventHub DeserializeEventHub(JsonElement element)
        {
            string connectionStringPrimaryKey = default;
            string connectionStringSecondaryKey = default;
            EndpointType endpointType = default;
            EndpointProvisioningState? provisioningState = default;
            DateTimeOffset? createdTime = default;
            IDictionary<string, string> tags = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("connectionString-PrimaryKey"))
                {
                    connectionStringPrimaryKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionString-SecondaryKey"))
                {
                    connectionStringSecondaryKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endpointType"))
                {
                    endpointType = new EndpointType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new EndpointProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createdTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetString());
                        }
                    }
                    tags = dictionary;
                    continue;
                }
            }
            return new EventHub(endpointType, provisioningState, createdTime, tags, connectionStringPrimaryKey, connectionStringSecondaryKey);
        }
    }
}
