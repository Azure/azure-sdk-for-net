// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DigitalTwins.Models
{
    /// <summary> properties related to eventgrid. </summary>
    public partial class EventGrid : DigitalTwinsEndpointResourceProperties
    {
        /// <summary> Initializes a new instance of EventGrid. </summary>
        /// <param name="accessKey1"> EventGrid secondary accesskey. Will be obfuscated during read. </param>
        /// <param name="accessKey2"> EventGrid secondary accesskey. Will be obfuscated during read. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accessKey1"/> or <paramref name="accessKey2"/> is null. </exception>
        public EventGrid(string accessKey1, string accessKey2)
        {
            if (accessKey1 == null)
            {
                throw new ArgumentNullException(nameof(accessKey1));
            }
            if (accessKey2 == null)
            {
                throw new ArgumentNullException(nameof(accessKey2));
            }

            AccessKey1 = accessKey1;
            AccessKey2 = accessKey2;
            EndpointType = EndpointType.EventGrid;
        }

        /// <summary> Initializes a new instance of EventGrid. </summary>
        /// <param name="endpointType"> The type of Digital Twins endpoint. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="createdTime"> Time when the Endpoint was added to DigitalTwinsInstance. </param>
        /// <param name="tags"> The resource tags. </param>
        /// <param name="topicEndpoint"> EventGrid Topic Endpoint. </param>
        /// <param name="accessKey1"> EventGrid secondary accesskey. Will be obfuscated during read. </param>
        /// <param name="accessKey2"> EventGrid secondary accesskey. Will be obfuscated during read. </param>
        internal EventGrid(EndpointType endpointType, EndpointProvisioningState? provisioningState, DateTimeOffset? createdTime, IDictionary<string, string> tags, string topicEndpoint, string accessKey1, string accessKey2) : base(endpointType, provisioningState, createdTime, tags)
        {
            TopicEndpoint = topicEndpoint;
            AccessKey1 = accessKey1;
            AccessKey2 = accessKey2;
            EndpointType = endpointType;
        }

        /// <summary> EventGrid Topic Endpoint. </summary>
        public string TopicEndpoint { get; set; }
        /// <summary> EventGrid secondary accesskey. Will be obfuscated during read. </summary>
        public string AccessKey1 { get; set; }
        /// <summary> EventGrid secondary accesskey. Will be obfuscated during read. </summary>
        public string AccessKey2 { get; set; }
    }
}
