// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DigitalTwins.Models
{
    public partial class DataExplorerConnectionProperties : IUtf8JsonSerializable, IModelJsonSerializable<DataExplorerConnectionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DataExplorerConnectionProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DataExplorerConnectionProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<DataExplorerConnectionProperties>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("adxResourceId"u8);
            writer.WriteStringValue(AdxResourceId);
            writer.WritePropertyName("adxEndpointUri"u8);
            writer.WriteStringValue(AdxEndpointUri.AbsoluteUri);
            writer.WritePropertyName("adxDatabaseName"u8);
            writer.WriteStringValue(AdxDatabaseName);
            if (Optional.IsDefined(AdxTableName))
            {
                if (AdxTableName != null)
                {
                    writer.WritePropertyName("adxTableName"u8);
                    writer.WriteStringValue(AdxTableName);
                }
                else
                {
                    writer.WriteNull("adxTableName");
                }
            }
            if (Optional.IsDefined(AdxTwinLifecycleEventsTableName))
            {
                if (AdxTwinLifecycleEventsTableName != null)
                {
                    writer.WritePropertyName("adxTwinLifecycleEventsTableName"u8);
                    writer.WriteStringValue(AdxTwinLifecycleEventsTableName);
                }
                else
                {
                    writer.WriteNull("adxTwinLifecycleEventsTableName");
                }
            }
            if (Optional.IsDefined(AdxRelationshipLifecycleEventsTableName))
            {
                if (AdxRelationshipLifecycleEventsTableName != null)
                {
                    writer.WritePropertyName("adxRelationshipLifecycleEventsTableName"u8);
                    writer.WriteStringValue(AdxRelationshipLifecycleEventsTableName);
                }
                else
                {
                    writer.WriteNull("adxRelationshipLifecycleEventsTableName");
                }
            }
            writer.WritePropertyName("eventHubEndpointUri"u8);
            writer.WriteStringValue(EventHubEndpointUri.AbsoluteUri);
            writer.WritePropertyName("eventHubEntityPath"u8);
            writer.WriteStringValue(EventHubEntityPath);
            writer.WritePropertyName("eventHubNamespaceResourceId"u8);
            writer.WriteStringValue(EventHubNamespaceResourceId);
            if (Optional.IsDefined(EventHubConsumerGroup))
            {
                if (EventHubConsumerGroup != null)
                {
                    writer.WritePropertyName("eventHubConsumerGroup"u8);
                    writer.WriteStringValue(EventHubConsumerGroup);
                }
                else
                {
                    writer.WriteNull("eventHubConsumerGroup");
                }
            }
            if (Optional.IsDefined(RecordPropertyAndItemRemovals))
            {
                if (RecordPropertyAndItemRemovals != null)
                {
                    writer.WritePropertyName("recordPropertyAndItemRemovals"u8);
                    writer.WriteStringValue(RecordPropertyAndItemRemovals.Value.ToString());
                }
                else
                {
                    writer.WriteNull("recordPropertyAndItemRemovals");
                }
            }
            writer.WritePropertyName("connectionType"u8);
            writer.WriteStringValue(ConnectionType.ToString());
            if (Optional.IsDefined(Identity))
            {
                if (Identity != null)
                {
                    writer.WritePropertyName("identity"u8);
                    writer.WriteObjectValue(Identity);
                }
                else
                {
                    writer.WriteNull("identity");
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DataExplorerConnectionProperties DeserializeDataExplorerConnectionProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier adxResourceId = default;
            Uri adxEndpointUri = default;
            string adxDatabaseName = default;
            Optional<string> adxTableName = default;
            Optional<string> adxTwinLifecycleEventsTableName = default;
            Optional<string> adxRelationshipLifecycleEventsTableName = default;
            Uri eventHubEndpointUri = default;
            string eventHubEntityPath = default;
            ResourceIdentifier eventHubNamespaceResourceId = default;
            Optional<string> eventHubConsumerGroup = default;
            Optional<RecordPropertyAndItemRemoval?> recordPropertyAndItemRemovals = default;
            ConnectionType connectionType = default;
            Optional<TimeSeriesDatabaseConnectionState> provisioningState = default;
            Optional<DigitalTwinsManagedIdentityReference> identity = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("adxResourceId"u8))
                {
                    adxResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("adxEndpointUri"u8))
                {
                    adxEndpointUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("adxDatabaseName"u8))
                {
                    adxDatabaseName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adxTableName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        adxTableName = null;
                        continue;
                    }
                    adxTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adxTwinLifecycleEventsTableName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        adxTwinLifecycleEventsTableName = null;
                        continue;
                    }
                    adxTwinLifecycleEventsTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adxRelationshipLifecycleEventsTableName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        adxRelationshipLifecycleEventsTableName = null;
                        continue;
                    }
                    adxRelationshipLifecycleEventsTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventHubEndpointUri"u8))
                {
                    eventHubEndpointUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("eventHubEntityPath"u8))
                {
                    eventHubEntityPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eventHubNamespaceResourceId"u8))
                {
                    eventHubNamespaceResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("eventHubConsumerGroup"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        eventHubConsumerGroup = null;
                        continue;
                    }
                    eventHubConsumerGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recordPropertyAndItemRemovals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recordPropertyAndItemRemovals = null;
                        continue;
                    }
                    recordPropertyAndItemRemovals = new RecordPropertyAndItemRemoval(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("connectionType"u8))
                {
                    connectionType = new ConnectionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new TimeSeriesDatabaseConnectionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        identity = null;
                        continue;
                    }
                    identity = DigitalTwinsManagedIdentityReference.DeserializeDigitalTwinsManagedIdentityReference(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DataExplorerConnectionProperties(connectionType, Optional.ToNullable(provisioningState), identity.Value, adxResourceId, adxEndpointUri, adxDatabaseName, adxTableName.Value, adxTwinLifecycleEventsTableName.Value, adxRelationshipLifecycleEventsTableName.Value, eventHubEndpointUri, eventHubEntityPath, eventHubNamespaceResourceId, eventHubConsumerGroup.Value, Optional.ToNullable(recordPropertyAndItemRemovals), rawData);
        }

        DataExplorerConnectionProperties IModelJsonSerializable<DataExplorerConnectionProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<DataExplorerConnectionProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDataExplorerConnectionProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DataExplorerConnectionProperties>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<DataExplorerConnectionProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DataExplorerConnectionProperties IModelSerializable<DataExplorerConnectionProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<DataExplorerConnectionProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDataExplorerConnectionProperties(doc.RootElement, options);
        }

        public static implicit operator RequestContent(DataExplorerConnectionProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator DataExplorerConnectionProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDataExplorerConnectionProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
