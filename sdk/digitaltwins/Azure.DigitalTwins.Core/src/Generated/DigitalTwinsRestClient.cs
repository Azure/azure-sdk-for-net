// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.DigitalTwins.Core
{
    internal partial class DigitalTwinsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DigitalTwinsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public DigitalTwinsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-10-31")
        {
            endpoint ??= new Uri("https://digitaltwins-name.digitaltwins.azure.net");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetByIdRequest(string id, DigitalTwinsGetByIdOptions digitalTwinsGetByIdOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsGetByIdOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsGetByIdOptions.Traceparent);
            }
            if (digitalTwinsGetByIdOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsGetByIdOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string id, DigitalTwinsDeleteOptions digitalTwinsDeleteOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsDeleteOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsDeleteOptions.Traceparent);
            }
            if (digitalTwinsDeleteOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsDeleteOptions.Tracestate);
            }
            if (digitalTwinsDeleteOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsDeleteOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        ///   * RelationshipsNotDeleted - The digital twin contains relationships.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response> DeleteAsync(string id, DigitalTwinsDeleteOptions digitalTwinsDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id, digitalTwinsDeleteOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        ///   * RelationshipsNotDeleted - The digital twin contains relationships.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response Delete(string id, DigitalTwinsDeleteOptions digitalTwinsDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id, digitalTwinsDeleteOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string id, IEnumerable<object> patchDocument, DigitalTwinsUpdateOptions digitalTwinsUpdateOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsUpdateOptions.Traceparent);
            }
            if (digitalTwinsUpdateOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsUpdateOptions.Tracestate);
            }
            if (digitalTwinsUpdateOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateOptions.IfMatch);
            }
            request.Headers.Add("Content-Type", "application/json-patch+json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRelationshipByIdRequest(string id, string relationshipId, DigitalTwinsGetRelationshipByIdOptions digitalTwinsGetRelationshipByIdOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsGetRelationshipByIdOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsGetRelationshipByIdOptions.Traceparent);
            }
            if (digitalTwinsGetRelationshipByIdOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsGetRelationshipByIdOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddRelationshipRequest(string id, string relationshipId, object relationship, DigitalTwinsAddRelationshipOptions digitalTwinsAddRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsAddRelationshipOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsAddRelationshipOptions.Traceparent);
            }
            if (digitalTwinsAddRelationshipOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsAddRelationshipOptions.Tracestate);
            }
            request.Headers.Add("If-None-Match", "*");
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(relationship);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRelationshipRequest(string id, string relationshipId, DigitalTwinsDeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsDeleteRelationshipOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsDeleteRelationshipOptions.Traceparent);
            }
            if (digitalTwinsDeleteRelationshipOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsDeleteRelationshipOptions.Tracestate);
            }
            if (digitalTwinsDeleteRelationshipOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsDeleteRelationshipOptions.IfMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Deletes a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsDeleteRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public async Task<Response> DeleteRelationshipAsync(string id, string relationshipId, DigitalTwinsDeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateDeleteRelationshipRequest(id, relationshipId, digitalTwinsDeleteRelationshipOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deletes a relationship between two digital twins.
        /// Status codes:
        /// * 204 No Content
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id or relationship id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        ///   * RelationshipNotFound - The relationship was not found.
        /// * 412 Precondition Failed
        ///   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipId"> The id of the relationship. The id is unique within the digital twin and case sensitive. </param>
        /// <param name="digitalTwinsDeleteRelationshipOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="relationshipId"/> is null. </exception>
        public Response DeleteRelationship(string id, string relationshipId, DigitalTwinsDeleteRelationshipOptions digitalTwinsDeleteRelationshipOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (relationshipId == null)
            {
                throw new ArgumentNullException(nameof(relationshipId));
            }

            using var message = CreateDeleteRelationshipRequest(id, relationshipId, digitalTwinsDeleteRelationshipOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelationshipRequest(string id, string relationshipId, IEnumerable<object> patchDocument, DigitalTwinsUpdateRelationshipOptions digitalTwinsUpdateRelationshipOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/", false);
            uri.AppendPath(relationshipId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateRelationshipOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsUpdateRelationshipOptions.Traceparent);
            }
            if (digitalTwinsUpdateRelationshipOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsUpdateRelationshipOptions.Tracestate);
            }
            if (digitalTwinsUpdateRelationshipOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateRelationshipOptions.IfMatch);
            }
            request.Headers.Add("Content-Type", "application/json-patch+json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListRelationshipsRequest(string id, string relationshipName, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships", false);
            if (relationshipName != null)
            {
                uri.AppendQuery("relationshipName", relationshipName, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsListRelationshipsOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsListRelationshipsOptions.Traceparent);
            }
            if (digitalTwinsListRelationshipsOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsListRelationshipsOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipName"> The name of the relationship. </param>
        /// <param name="digitalTwinsListRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<RelationshipCollection>> ListRelationshipsAsync(string id, string relationshipName = null, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRelationshipsRequest(id, relationshipName, digitalTwinsListRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RelationshipCollection.DeserializeRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipName"> The name of the relationship. </param>
        /// <param name="digitalTwinsListRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<RelationshipCollection> ListRelationships(string id, string relationshipName = null, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRelationshipsRequest(id, relationshipName, digitalTwinsListRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RelationshipCollection.DeserializeRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListIncomingRelationshipsRequest(string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/incomingrelationships", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsListIncomingRelationshipsOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsListIncomingRelationshipsOptions.Traceparent);
            }
            if (digitalTwinsListIncomingRelationshipsOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsListIncomingRelationshipsOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<IncomingRelationshipCollection>> ListIncomingRelationshipsAsync(string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsRequest(id, digitalTwinsListIncomingRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<IncomingRelationshipCollection> ListIncomingRelationships(string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsRequest(id, digitalTwinsListIncomingRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendTelemetryRequest(string id, string messageId, object telemetry, string telemetrySourceTime, DigitalTwinsSendTelemetryOptions digitalTwinsSendTelemetryOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/telemetry", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsSendTelemetryOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsSendTelemetryOptions.Traceparent);
            }
            if (digitalTwinsSendTelemetryOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsSendTelemetryOptions.Tracestate);
            }
            request.Headers.Add("Message-Id", messageId);
            if (telemetrySourceTime != null)
            {
                request.Headers.Add("Telemetry-Source-Time", telemetrySourceTime);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(telemetry);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateSendComponentTelemetryRequest(string id, string componentPath, string messageId, object telemetry, string telemetrySourceTime, DigitalTwinsSendComponentTelemetryOptions digitalTwinsSendComponentTelemetryOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendPath("/telemetry", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsSendComponentTelemetryOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsSendComponentTelemetryOptions.Traceparent);
            }
            if (digitalTwinsSendComponentTelemetryOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsSendComponentTelemetryOptions.Tracestate);
            }
            request.Headers.Add("Message-Id", messageId);
            if (telemetrySourceTime != null)
            {
                request.Headers.Add("Telemetry-Source-Time", telemetrySourceTime);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(telemetry);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetComponentRequest(string id, string componentPath, DigitalTwinsGetComponentOptions digitalTwinsGetComponentOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsGetComponentOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsGetComponentOptions.Traceparent);
            }
            if (digitalTwinsGetComponentOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsGetComponentOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateComponentRequest(string id, string componentPath, IEnumerable<object> patchDocument, DigitalTwinsUpdateComponentOptions digitalTwinsUpdateComponentOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/digitaltwins/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/components/", false);
            uri.AppendPath(componentPath, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinsUpdateComponentOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsUpdateComponentOptions.Traceparent);
            }
            if (digitalTwinsUpdateComponentOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsUpdateComponentOptions.Tracestate);
            }
            if (digitalTwinsUpdateComponentOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", digitalTwinsUpdateComponentOptions.IfMatch);
            }
            request.Headers.Add("Content-Type", "application/json-patch+json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in patchDocument)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListRelationshipsNextPageRequest(string nextLink, string id, string relationshipName, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (digitalTwinsListRelationshipsOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsListRelationshipsOptions.Traceparent);
            }
            if (digitalTwinsListRelationshipsOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsListRelationshipsOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipName"> The name of the relationship. </param>
        /// <param name="digitalTwinsListRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public async Task<Response<RelationshipCollection>> ListRelationshipsNextPageAsync(string nextLink, string id, string relationshipName = null, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRelationshipsNextPageRequest(nextLink, id, relationshipName, digitalTwinsListRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RelationshipCollection.DeserializeRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="relationshipName"> The name of the relationship. </param>
        /// <param name="digitalTwinsListRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public Response<RelationshipCollection> ListRelationshipsNextPage(string nextLink, string id, string relationshipName = null, DigitalTwinsListRelationshipsOptions digitalTwinsListRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListRelationshipsNextPageRequest(nextLink, id, relationshipName, digitalTwinsListRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RelationshipCollection.DeserializeRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListIncomingRelationshipsNextPageRequest(string nextLink, string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (digitalTwinsListIncomingRelationshipsOptions?.Traceparent != null)
            {
                request.Headers.Add("traceparent", digitalTwinsListIncomingRelationshipsOptions.Traceparent);
            }
            if (digitalTwinsListIncomingRelationshipsOptions?.Tracestate != null)
            {
                request.Headers.Add("tracestate", digitalTwinsListIncomingRelationshipsOptions.Tracestate);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public async Task<Response<IncomingRelationshipCollection>> ListIncomingRelationshipsNextPageAsync(string nextLink, string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsNextPageRequest(nextLink, id, digitalTwinsListIncomingRelationshipsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// * 200 OK
        /// * 400 Bad Request
        ///   * InvalidArgument - The digital twin id is invalid.
        /// * 404 Not Found
        ///   * DigitalTwinNotFound - The digital twin was not found.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="id"> The id of the digital twin. The id is unique within the service and case sensitive. </param>
        /// <param name="digitalTwinsListIncomingRelationshipsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="id"/> is null. </exception>
        public Response<IncomingRelationshipCollection> ListIncomingRelationshipsNextPage(string nextLink, string id, DigitalTwinsListIncomingRelationshipsOptions digitalTwinsListIncomingRelationshipsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateListIncomingRelationshipsNextPageRequest(nextLink, id, digitalTwinsListIncomingRelationshipsOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IncomingRelationshipCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = IncomingRelationshipCollection.DeserializeIncomingRelationshipCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
