// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.DigitalTwins.Core
{
    internal partial class DigitalTwinModelsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DigitalTwinModelsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> This occurs when one of the required arguments is null. </exception>
        public DigitalTwinModelsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-05-31-preview")
        {
            endpoint ??= new Uri("https://digitaltwins-name.digitaltwins.azure.net");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListRequest(IEnumerable<string> dependenciesFor, bool? includeModelDefinition, GetModelsOptions digitalTwinModelsListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/models", false);
            if (dependenciesFor != null)
            {
                uri.AppendQueryDelimited("dependenciesFor", dependenciesFor, ",", true);
            }
            if (includeModelDefinition != null)
            {
                uri.AppendQuery("includeModelDefinition", includeModelDefinition.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (digitalTwinModelsListOptions?.MaxItemCount != null)
            {
                request.Headers.Add("x-ms-max-item-count", digitalTwinModelsListOptions.MaxItemCount.Value);
            }
            return message;
        }

        /// <summary>
        /// Retrieves model metadata and, optionally, model definitions.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// </summary>
        /// <param name="dependenciesFor"> The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="digitalTwinModelsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PagedModelDataCollection>> ListAsync(IEnumerable<string> dependenciesFor = null, bool? includeModelDefinition = null, GetModelsOptions digitalTwinModelsListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(dependenciesFor, includeModelDefinition, digitalTwinModelsListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PagedModelDataCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PagedModelDataCollection.DeserializePagedModelDataCollection(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves model metadata and, optionally, model definitions.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// </summary>
        /// <param name="dependenciesFor"> The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="digitalTwinModelsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PagedModelDataCollection> List(IEnumerable<string> dependenciesFor = null, bool? includeModelDefinition = null, GetModelsOptions digitalTwinModelsListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(dependenciesFor, includeModelDefinition, digitalTwinModelsListOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PagedModelDataCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PagedModelDataCollection.DeserializePagedModelDataCollection(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetByIdRequest(string id, bool? includeModelDefinition)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/models/", false);
            uri.AppendPath(id, true);
            if (includeModelDefinition != null)
            {
                uri.AppendQuery("includeModelDefinition", includeModelDefinition.Value, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary>
        /// Retrieves model metadata and optionally the model definition.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is no model with the provided id.
        /// </summary>
        /// <param name="id"> The id for the model. The id is globally unique and case sensitive. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ModelData>> GetByIdAsync(string id, bool? includeModelDefinition = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, includeModelDefinition);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ModelData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ModelData.DeserializeModelData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves model metadata and optionally the model definition.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is no model with the provided id.
        /// </summary>
        /// <param name="id"> The id for the model. The id is globally unique and case sensitive. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ModelData> GetById(string id, bool? includeModelDefinition = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, includeModelDefinition);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ModelData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ModelData.DeserializeModelData(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string id, IEnumerable<object> updateModel)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/models/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json-patch+json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in updateModel)
            {
                content.JsonWriter.WriteObjectValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/models/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            return message;
        }

        /// <summary>
        /// Deletes a model. A model can only be deleted if no other models reference it.
        /// Status codes:
        /// 204 (No Content): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no model with the provided id.
        /// 409 (Conflict): There are dependencies on the model that prevent it from being deleted.
        /// </summary>
        /// <param name="id"> The id for the model. The id is globally unique and case sensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> DeleteAsync(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Deletes a model. A model can only be deleted if no other models reference it.
        /// Status codes:
        /// 204 (No Content): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no model with the provided id.
        /// 409 (Conflict): There are dependencies on the model that prevent it from being deleted.
        /// </summary>
        /// <param name="id"> The id for the model. The id is globally unique and case sensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Delete(string id, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateDeleteRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, IEnumerable<string> dependenciesFor, bool? includeModelDefinition, GetModelsOptions digitalTwinModelsListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (digitalTwinModelsListOptions?.MaxItemCount != null)
            {
                request.Headers.Add("x-ms-max-item-count", digitalTwinModelsListOptions.MaxItemCount.Value);
            }
            return message;
        }

        /// <summary>
        /// Retrieves model metadata and, optionally, model definitions.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dependenciesFor"> The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="digitalTwinModelsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PagedModelDataCollection>> ListNextPageAsync(string nextLink, IEnumerable<string> dependenciesFor = null, bool? includeModelDefinition = null, GetModelsOptions digitalTwinModelsListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, dependenciesFor, includeModelDefinition, digitalTwinModelsListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PagedModelDataCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PagedModelDataCollection.DeserializePagedModelDataCollection(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Retrieves model metadata and, optionally, model definitions.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="dependenciesFor"> The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved. </param>
        /// <param name="includeModelDefinition"> When true the model definition will be returned as part of the result. </param>
        /// <param name="digitalTwinModelsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PagedModelDataCollection> ListNextPage(string nextLink, IEnumerable<string> dependenciesFor = null, bool? includeModelDefinition = null, GetModelsOptions digitalTwinModelsListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, dependenciesFor, includeModelDefinition, digitalTwinModelsListOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PagedModelDataCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = PagedModelDataCollection.DeserializePagedModelDataCollection(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
