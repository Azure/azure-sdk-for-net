// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.DigitalTwins.Core.Models;

namespace Azure.DigitalTwins.Core
{
    internal partial class DeleteJobsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;
        private readonly string _operationId;
        private readonly int? _timeoutInMinutes;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DeleteJobsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <param name="operationId"> ID for the operation's status monitor. The ID is generated if header was not passed by the client. </param>
        /// <param name="timeoutInMinutes"> Desired timeout for the delete job. Once the specified timeout is reached, service will stop any delete operations triggered by the current delete job that are in progress, and go to a failed state. Please note that this will leave your instance in an unknown state as there won't be any rollback operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public DeleteJobsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2023-10-31", string operationId = null, int? timeoutInMinutes = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://digitaltwins-hostname");
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _operationId = operationId;
            _timeoutInMinutes = timeoutInMinutes;
        }

        internal HttpMessage CreateAddRequest(DeleteJobsAddOptions deleteJobsAddOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/deletions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (_timeoutInMinutes != null)
            {
                uri.AppendQuery("timeoutInMinutes", _timeoutInMinutes.Value, true);
            }
            request.Uri = uri;
            if (_operationId != null)
            {
                request.Headers.Add("operation-id", _operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other types of entities.
        /// Status codes:
        /// * 202 Created
        /// * 400 Bad Request
        ///   * JobLimitReached - The maximum number of delete jobs allowed has been reached.
        ///   * ValidationFailed - Operation-Id already exists.
        /// </summary>
        /// <param name="deleteJobsAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<DeleteJobsAddHeaders>> AddAsync(DeleteJobsAddOptions deleteJobsAddOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateAddRequest(deleteJobsAddOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DeleteJobsAddHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete any other types of entities.
        /// Status codes:
        /// * 202 Created
        /// * 400 Bad Request
        ///   * JobLimitReached - The maximum number of delete jobs allowed has been reached.
        ///   * ValidationFailed - Operation-Id already exists.
        /// </summary>
        /// <param name="deleteJobsAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<DeleteJobsAddHeaders> Add(DeleteJobsAddOptions deleteJobsAddOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateAddRequest(deleteJobsAddOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new DeleteJobsAddHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest(DeleteJobsListOptions deleteJobsListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/deletions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (deleteJobsListOptions?.MaxItemsPerPage != null)
            {
                request.Headers.Add("max-items-per-page", deleteJobsListOptions.MaxItemsPerPage.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a history of delete jobs that have run or are currently running on the instance.
        /// Status codes:
        /// * 200 OK
        /// </summary>
        /// <param name="deleteJobsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DeleteJobCollection>> ListAsync(DeleteJobsListOptions deleteJobsListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(deleteJobsListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DeleteJobCollection.DeserializeDeleteJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a history of delete jobs that have run or are currently running on the instance.
        /// Status codes:
        /// * 200 OK
        /// </summary>
        /// <param name="deleteJobsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DeleteJobCollection> List(DeleteJobsListOptions deleteJobsListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(deleteJobsListOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DeleteJobCollection.DeserializeDeleteJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetByIdRequest(string id, DeleteJobsGetByIdOptions deleteJobsGetByIdOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/deletions/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves a delete job.
        /// Status codes:
        /// * 200 OK
        /// * 404 Not Found
        ///   * DeleteJobNotFound - The delete job was not found.
        /// </summary>
        /// <param name="id"> The id for the delete job. The id is unique within the service and case sensitive. </param>
        /// <param name="deleteJobsGetByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public async Task<Response<DeleteJob>> GetByIdAsync(string id, DeleteJobsGetByIdOptions deleteJobsGetByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, deleteJobsGetByIdOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJob value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DeleteJob.DeserializeDeleteJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Retrieves a delete job.
        /// Status codes:
        /// * 200 OK
        /// * 404 Not Found
        ///   * DeleteJobNotFound - The delete job was not found.
        /// </summary>
        /// <param name="id"> The id for the delete job. The id is unique within the service and case sensitive. </param>
        /// <param name="deleteJobsGetByIdOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public Response<DeleteJob> GetById(string id, DeleteJobsGetByIdOptions deleteJobsGetByIdOptions = null, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            using var message = CreateGetByIdRequest(id, deleteJobsGetByIdOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJob value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DeleteJob.DeserializeDeleteJob(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, DeleteJobsListOptions deleteJobsListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (deleteJobsListOptions?.MaxItemsPerPage != null)
            {
                request.Headers.Add("max-items-per-page", deleteJobsListOptions.MaxItemsPerPage.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a history of delete jobs that have run or are currently running on the instance.
        /// Status codes:
        /// * 200 OK
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deleteJobsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<DeleteJobCollection>> ListNextPageAsync(string nextLink, DeleteJobsListOptions deleteJobsListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, deleteJobsListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJobCollection value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = DeleteJobCollection.DeserializeDeleteJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested, or to view a history of delete jobs that have run or are currently running on the instance.
        /// Status codes:
        /// * 200 OK
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deleteJobsListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<DeleteJobCollection> ListNextPage(string nextLink, DeleteJobsListOptions deleteJobsListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, deleteJobsListOptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeleteJobCollection value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = DeleteJobCollection.DeserializeDeleteJobCollection(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
