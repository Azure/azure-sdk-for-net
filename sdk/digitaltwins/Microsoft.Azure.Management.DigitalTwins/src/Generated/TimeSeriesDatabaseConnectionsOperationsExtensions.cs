// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DigitalTwins
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TimeSeriesDatabaseConnectionsOperations.
    /// </summary>
    public static partial class TimeSeriesDatabaseConnectionsOperationsExtensions
    {
            /// <summary>
            /// Get all existing time series database connections for this DigitalTwins
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            public static IPage<TimeSeriesDatabaseConnection> List(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName)
            {
                return operations.ListAsync(resourceGroupName, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all existing time series database connections for this DigitalTwins
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TimeSeriesDatabaseConnection>> ListAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the description of an existing time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            public static TimeSeriesDatabaseConnection Get(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName)
            {
                return operations.GetAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the description of an existing time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeSeriesDatabaseConnection> GetAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='properties'>
            /// Properties of a specific time series database connection.
            /// </param>
            public static TimeSeriesDatabaseConnection CreateOrUpdate(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, TimeSeriesDatabaseConnectionProperties properties = default(TimeSeriesDatabaseConnectionProperties))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='properties'>
            /// Properties of a specific time series database connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeSeriesDatabaseConnection> CreateOrUpdateAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, TimeSeriesDatabaseConnectionProperties properties = default(TimeSeriesDatabaseConnectionProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            public static TimeSeriesDatabaseConnection Delete(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName)
            {
                return operations.DeleteAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeSeriesDatabaseConnection> DeleteAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='properties'>
            /// Properties of a specific time series database connection.
            /// </param>
            public static TimeSeriesDatabaseConnection BeginCreateOrUpdate(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, TimeSeriesDatabaseConnectionProperties properties = default(TimeSeriesDatabaseConnectionProperties))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='properties'>
            /// Properties of a specific time series database connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeSeriesDatabaseConnection> BeginCreateOrUpdateAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, TimeSeriesDatabaseConnectionProperties properties = default(TimeSeriesDatabaseConnectionProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            public static TimeSeriesDatabaseConnection BeginDelete(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a time series database connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the DigitalTwinsInstance.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the DigitalTwinsInstance.
            /// </param>
            /// <param name='timeSeriesDatabaseConnectionName'>
            /// Name of time series database connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimeSeriesDatabaseConnection> BeginDeleteAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string resourceGroupName, string resourceName, string timeSeriesDatabaseConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, resourceName, timeSeriesDatabaseConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all existing time series database connections for this DigitalTwins
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<TimeSeriesDatabaseConnection> ListNext(this ITimeSeriesDatabaseConnectionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all existing time series database connections for this DigitalTwins
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TimeSeriesDatabaseConnection>> ListNextAsync(this ITimeSeriesDatabaseConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
