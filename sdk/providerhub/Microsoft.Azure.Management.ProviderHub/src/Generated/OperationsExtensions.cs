// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ProviderHub
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Operations.
    /// </summary>
    public static partial class OperationsExtensions
    {
            /// <summary>
            /// Lists all the operations supported by Microsoft.ProviderHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<OperationsDefinition> List(this IOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the operations supported by Microsoft.ProviderHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationsDefinition>> ListAsync(this IOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the operations supported by the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            public static IList<OperationsDefinition> ListByProviderRegistration(this IOperations operations, string providerNamespace)
            {
                return operations.ListByProviderRegistrationAsync(providerNamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the operations supported by the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OperationsDefinition>> ListByProviderRegistrationAsync(this IOperations operations, string providerNamespace, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProviderRegistrationWithHttpMessagesAsync(providerNamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the operation supported by the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='contents'>
            /// </param>
            public static OperationsContent CreateOrUpdate(this IOperations operations, string providerNamespace, IList<OperationsDefinition> contents)
            {
                return operations.CreateOrUpdateAsync(providerNamespace, contents).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the operation supported by the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='contents'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationsContent> CreateOrUpdateAsync(this IOperations operations, string providerNamespace, IList<OperationsDefinition> contents, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(providerNamespace, contents, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            public static void Delete(this IOperations operations, string providerNamespace)
            {
                operations.DeleteAsync(providerNamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOperations operations, string providerNamespace, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(providerNamespace, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the operations supported by Microsoft.ProviderHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OperationsDefinition> ListNext(this IOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the operations supported by Microsoft.ProviderHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OperationsDefinition>> ListNextAsync(this IOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
