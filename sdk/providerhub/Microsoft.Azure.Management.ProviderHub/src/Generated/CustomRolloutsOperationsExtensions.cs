// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ProviderHub
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomRolloutsOperations.
    /// </summary>
    public static partial class CustomRolloutsOperationsExtensions
    {
            /// <summary>
            /// Gets the custom rollout details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            public static CustomRollout Get(this ICustomRolloutsOperations operations, string providerNamespace, string rolloutName)
            {
                return operations.GetAsync(providerNamespace, rolloutName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the custom rollout details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomRollout> GetAsync(this ICustomRolloutsOperations operations, string providerNamespace, string rolloutName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(providerNamespace, rolloutName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the rollout details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='properties'>
            /// Properties of the rollout.
            /// </param>
            public static CustomRollout CreateOrUpdate(this ICustomRolloutsOperations operations, string providerNamespace, string rolloutName, CustomRolloutPropertiesModel properties)
            {
                return operations.CreateOrUpdateAsync(providerNamespace, rolloutName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the rollout details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='rolloutName'>
            /// The rollout name.
            /// </param>
            /// <param name='properties'>
            /// Properties of the rollout.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomRollout> CreateOrUpdateAsync(this ICustomRolloutsOperations operations, string providerNamespace, string rolloutName, CustomRolloutPropertiesModel properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(providerNamespace, rolloutName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of the custom rollouts for the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            public static IPage<CustomRollout> ListByProviderRegistration(this ICustomRolloutsOperations operations, string providerNamespace)
            {
                return operations.ListByProviderRegistrationAsync(providerNamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of the custom rollouts for the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomRollout>> ListByProviderRegistrationAsync(this ICustomRolloutsOperations operations, string providerNamespace, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProviderRegistrationWithHttpMessagesAsync(providerNamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of the custom rollouts for the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CustomRollout> ListByProviderRegistrationNext(this ICustomRolloutsOperations operations, string nextPageLink)
            {
                return operations.ListByProviderRegistrationNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of the custom rollouts for the given provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CustomRollout>> ListByProviderRegistrationNextAsync(this ICustomRolloutsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProviderRegistrationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
