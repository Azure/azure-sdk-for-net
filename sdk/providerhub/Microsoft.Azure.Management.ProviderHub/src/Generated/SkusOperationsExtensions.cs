// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ProviderHub
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SkusOperations.
    /// </summary>
    public static partial class SkusOperationsExtensions
    {
            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static SkuResource Get(this ISkusOperations operations, string providerNamespace, string resourceType, string sku)
            {
                return operations.GetAsync(providerNamespace, resourceType, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> GetAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(providerNamespace, resourceType, sku, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            public static SkuResource CreateOrUpdate(this ISkusOperations operations, string providerNamespace, string resourceType, string sku, IList<SkuSetting> skuSettings)
            {
                return operations.CreateOrUpdateAsync(providerNamespace, resourceType, sku, skuSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> CreateOrUpdateAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string sku, IList<SkuSetting> skuSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(providerNamespace, resourceType, sku, skuSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static void Delete(this ISkusOperations operations, string providerNamespace, string resourceType, string sku)
            {
                operations.DeleteAsync(providerNamespace, resourceType, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(providerNamespace, resourceType, sku, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static SkuResource GetNestedResourceTypeFirst(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku)
            {
                return operations.GetNestedResourceTypeFirstAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> GetNestedResourceTypeFirstAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedResourceTypeFirstWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            public static SkuResource CreateOrUpdateNestedResourceTypeFirst(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku, IList<SkuSetting> skuSettings)
            {
                return operations.CreateOrUpdateNestedResourceTypeFirstAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku, skuSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> CreateOrUpdateNestedResourceTypeFirstAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku, IList<SkuSetting> skuSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateNestedResourceTypeFirstWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku, skuSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static void DeleteNestedResourceTypeFirst(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku)
            {
                operations.DeleteNestedResourceTypeFirstAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNestedResourceTypeFirstAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNestedResourceTypeFirstWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, sku, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static SkuResource GetNestedResourceTypeSecond(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku)
            {
                return operations.GetNestedResourceTypeSecondAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> GetNestedResourceTypeSecondAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedResourceTypeSecondWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            public static SkuResource CreateOrUpdateNestedResourceTypeSecond(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku, IList<SkuSetting> skuSettings)
            {
                return operations.CreateOrUpdateNestedResourceTypeSecondAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, skuSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> CreateOrUpdateNestedResourceTypeSecondAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku, IList<SkuSetting> skuSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateNestedResourceTypeSecondWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, skuSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static void DeleteNestedResourceTypeSecond(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku)
            {
                operations.DeleteNestedResourceTypeSecondAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNestedResourceTypeSecondAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNestedResourceTypeSecondWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static SkuResource GetNestedResourceTypeThird(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku)
            {
                return operations.GetNestedResourceTypeThirdAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the sku details for the given resource type and sku name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> GetNestedResourceTypeThirdAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedResourceTypeThirdWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            public static SkuResource CreateOrUpdateNestedResourceTypeThird(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku, IList<SkuSetting> skuSettings)
            {
                return operations.CreateOrUpdateNestedResourceTypeThirdAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, skuSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the resource type skus in the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='skuSettings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuResource> CreateOrUpdateNestedResourceTypeThirdAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku, IList<SkuSetting> skuSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateNestedResourceTypeThirdWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, skuSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            public static void DeleteNestedResourceTypeThird(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku)
            {
                operations.DeleteNestedResourceTypeThirdAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource type sku.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='sku'>
            /// The SKU.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNestedResourceTypeThirdAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, string sku, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNestedResourceTypeThirdWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrations(this ISkusOperations operations, string providerNamespace, string resourceType)
            {
                return operations.ListByResourceTypeRegistrationsAsync(providerNamespace, resourceType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsAsync(this ISkusOperations operations, string providerNamespace, string resourceType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsWithHttpMessagesAsync(providerNamespace, resourceType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeFirst(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeFirstAsync(providerNamespace, resourceType, nestedResourceTypeFirst).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeFirstAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeFirstWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeSecond(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeSecondAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeSecondAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeSecondWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeThird(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeThirdAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerNamespace'>
            /// The name of the resource provider hosted within ProviderHub.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='nestedResourceTypeFirst'>
            /// The first child resource type.
            /// </param>
            /// <param name='nestedResourceTypeSecond'>
            /// The second child resource type.
            /// </param>
            /// <param name='nestedResourceTypeThird'>
            /// The third child resource type.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeThirdAsync(this ISkusOperations operations, string providerNamespace, string resourceType, string nestedResourceTypeFirst, string nestedResourceTypeSecond, string nestedResourceTypeThird, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeThirdWithHttpMessagesAsync(providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNext(this ISkusOperations operations, string nextPageLink)
            {
                return operations.ListByResourceTypeRegistrationsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNextAsync(this ISkusOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeFirstNext(this ISkusOperations operations, string nextPageLink)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeFirstNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeFirstNextAsync(this ISkusOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeFirstNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeSecondNext(this ISkusOperations operations, string nextPageLink)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeSecondNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeSecondNextAsync(this ISkusOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeSecondNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuResource> ListByResourceTypeRegistrationsNestedResourceTypeThirdNext(this ISkusOperations operations, string nextPageLink)
            {
                return operations.ListByResourceTypeRegistrationsNestedResourceTypeThirdNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of skus for the given resource type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuResource>> ListByResourceTypeRegistrationsNestedResourceTypeThirdNextAsync(this ISkusOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceTypeRegistrationsNestedResourceTypeThirdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
