// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ProviderHub;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ProviderHubModelFactory
    {
        /// <summary> Initializes a new instance of CustomRolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the rollout. </param>
        /// <returns> A new <see cref="ProviderHub.CustomRolloutData"/> instance for mocking. </returns>
        public static CustomRolloutData CustomRolloutData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, CustomRolloutProperties properties = null)
        {
            return new CustomRolloutData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CustomRolloutProperties. </summary>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="specification"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="Models.CustomRolloutProperties"/> instance for mocking. </returns>
        public static CustomRolloutProperties CustomRolloutProperties(ProvisioningState? provisioningState = null, CustomRolloutPropertiesSpecification specification = null, CustomRolloutPropertiesStatus status = null)
        {
            return new CustomRolloutProperties(provisioningState, specification, status);
        }

        /// <summary> Initializes a new instance of CustomRolloutPropertiesSpecification. </summary>
        /// <param name="canaryRegions"></param>
        /// <param name="providerRegistration"></param>
        /// <param name="resourceTypeRegistrations"></param>
        /// <returns> A new <see cref="Models.CustomRolloutPropertiesSpecification"/> instance for mocking. </returns>
        public static CustomRolloutPropertiesSpecification CustomRolloutPropertiesSpecification(IEnumerable<string> canaryRegions = null, CustomRolloutSpecificationProviderRegistration providerRegistration = null, IEnumerable<ResourceTypeRegistrationData> resourceTypeRegistrations = null)
        {
            canaryRegions ??= new List<string>();
            resourceTypeRegistrations ??= new List<ResourceTypeRegistrationData>();

            return new CustomRolloutPropertiesSpecification(canaryRegions != null ? new CustomRolloutSpecificationCanary(canaryRegions?.ToList()) : null, providerRegistration, resourceTypeRegistrations?.ToList());
        }

        /// <summary> Initializes a new instance of CustomRolloutSpecification. </summary>
        /// <param name="canaryRegions"></param>
        /// <param name="providerRegistration"></param>
        /// <param name="resourceTypeRegistrations"></param>
        /// <returns> A new <see cref="Models.CustomRolloutSpecification"/> instance for mocking. </returns>
        public static CustomRolloutSpecification CustomRolloutSpecification(IEnumerable<string> canaryRegions = null, CustomRolloutSpecificationProviderRegistration providerRegistration = null, IEnumerable<ResourceTypeRegistrationData> resourceTypeRegistrations = null)
        {
            canaryRegions ??= new List<string>();
            resourceTypeRegistrations ??= new List<ResourceTypeRegistrationData>();

            return new CustomRolloutSpecification(canaryRegions != null ? new CustomRolloutSpecificationCanary(canaryRegions?.ToList()) : null, providerRegistration, resourceTypeRegistrations?.ToList());
        }

        /// <summary> Initializes a new instance of CustomRolloutSpecificationCanary. </summary>
        /// <param name="regions"></param>
        /// <returns> A new <see cref="Models.CustomRolloutSpecificationCanary"/> instance for mocking. </returns>
        public static CustomRolloutSpecificationCanary CustomRolloutSpecificationCanary(IEnumerable<string> regions = null)
        {
            regions ??= new List<string>();

            return new CustomRolloutSpecificationCanary(regions?.ToList());
        }

        /// <summary> Initializes a new instance of TrafficRegions. </summary>
        /// <param name="regions"></param>
        /// <returns> A new <see cref="Models.TrafficRegions"/> instance for mocking. </returns>
        public static TrafficRegions TrafficRegions(IEnumerable<string> regions = null)
        {
            regions ??= new List<string>();

            return new TrafficRegions(regions?.ToList());
        }

        /// <summary> Initializes a new instance of CustomRolloutSpecificationProviderRegistration. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.CustomRolloutSpecificationProviderRegistration"/> instance for mocking. </returns>
        public static CustomRolloutSpecificationProviderRegistration CustomRolloutSpecificationProviderRegistration(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new CustomRolloutSpecificationProviderRegistration(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ProviderRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.ProviderRegistrationData"/> instance for mocking. </returns>
        public static ProviderRegistrationData ProviderRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new ProviderRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ProviderRegistrationProperties. </summary>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="providerAuthorizations"></param>
        /// <param name="namespace"></param>
        /// <param name="providerVersion"></param>
        /// <param name="providerType"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="management"></param>
        /// <param name="capabilities"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="templateDeploymentOptions"></param>
        /// <param name="providerHubMetadata"></param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="subscriptionLifecycleNotificationSpecifications"></param>
        /// <returns> A new <see cref="Models.ProviderRegistrationProperties"/> instance for mocking. </returns>
        public static ProviderRegistrationProperties ProviderRegistrationProperties(IEnumerable<string> providerAuthenticationAllowedAudiences = null, IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, string @namespace = null, string providerVersion = null, ResourceProviderType? providerType = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, OptInHeaderType? optInHeaders = null, ResourceProviderManifestPropertiesManagement management = null, IEnumerable<ResourceProviderCapabilities> capabilities = null, BinaryData metadata = null, ResourceProviderManifestPropertiesTemplateDeploymentOptions templateDeploymentOptions = null, ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata = null, ProvisioningState? provisioningState = null, ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications = null)
        {
            providerAuthenticationAllowedAudiences ??= new List<string>();
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            requiredFeatures ??= new List<string>();
            capabilities ??= new List<ResourceProviderCapabilities>();

            return new ProviderRegistrationProperties(providerAuthenticationAllowedAudiences != null ? new ResourceProviderManifestPropertiesProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, providerAuthorizations?.ToList(), @namespace, providerVersion, providerType, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderManifestPropertiesFeaturesRule(requiredFeaturesPolicy.Value) : null, optInHeaders != null ? new ResourceProviderManifestPropertiesRequestHeaderOptions(optInHeaders) : null, management, capabilities?.ToList(), metadata, templateDeploymentOptions, providerHubMetadata, provisioningState, subscriptionLifecycleNotificationSpecifications);
        }

        /// <summary> Initializes a new instance of ProviderRegistrationPropertiesProviderHubMetadata. </summary>
        /// <param name="providerAuthorizations"></param>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="thirdPartyProviderAuthorization"></param>
        /// <returns> A new <see cref="Models.ProviderRegistrationPropertiesProviderHubMetadata"/> instance for mocking. </returns>
        public static ProviderRegistrationPropertiesProviderHubMetadata ProviderRegistrationPropertiesProviderHubMetadata(IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, IEnumerable<string> providerAuthenticationAllowedAudiences = null, ProviderHubMetadataThirdPartyProviderAuthorization thirdPartyProviderAuthorization = null)
        {
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            providerAuthenticationAllowedAudiences ??= new List<string>();

            return new ProviderRegistrationPropertiesProviderHubMetadata(providerAuthorizations?.ToList(), providerAuthenticationAllowedAudiences != null ? new ProviderHubMetadataProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, thirdPartyProviderAuthorization);
        }

        /// <summary> Initializes a new instance of ProviderHubMetadata. </summary>
        /// <param name="providerAuthorizations"></param>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="thirdPartyProviderAuthorization"></param>
        /// <returns> A new <see cref="Models.ProviderHubMetadata"/> instance for mocking. </returns>
        public static ProviderHubMetadata ProviderHubMetadata(IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, IEnumerable<string> providerAuthenticationAllowedAudiences = null, ProviderHubMetadataThirdPartyProviderAuthorization thirdPartyProviderAuthorization = null)
        {
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            providerAuthenticationAllowedAudiences ??= new List<string>();

            return new ProviderHubMetadata(providerAuthorizations?.ToList(), providerAuthenticationAllowedAudiences != null ? new ProviderHubMetadataProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, thirdPartyProviderAuthorization);
        }

        /// <summary> Initializes a new instance of ResourceProviderAuthorization. </summary>
        /// <param name="applicationId"></param>
        /// <param name="roleDefinitionId"></param>
        /// <param name="managedByRoleDefinitionId"></param>
        /// <returns> A new <see cref="Models.ResourceProviderAuthorization"/> instance for mocking. </returns>
        public static ResourceProviderAuthorization ResourceProviderAuthorization(string applicationId = null, string roleDefinitionId = null, string managedByRoleDefinitionId = null)
        {
            return new ResourceProviderAuthorization(applicationId, roleDefinitionId, managedByRoleDefinitionId);
        }

        /// <summary> Initializes a new instance of ProviderHubMetadataThirdPartyProviderAuthorization. </summary>
        /// <param name="authorizations"></param>
        /// <param name="managedByTenantId"></param>
        /// <returns> A new <see cref="Models.ProviderHubMetadataThirdPartyProviderAuthorization"/> instance for mocking. </returns>
        public static ProviderHubMetadataThirdPartyProviderAuthorization ProviderHubMetadataThirdPartyProviderAuthorization(IEnumerable<LightHouseAuthorization> authorizations = null, string managedByTenantId = null)
        {
            authorizations ??= new List<LightHouseAuthorization>();

            return new ProviderHubMetadataThirdPartyProviderAuthorization(authorizations?.ToList(), managedByTenantId);
        }

        /// <summary> Initializes a new instance of ThirdPartyProviderAuthorization. </summary>
        /// <param name="authorizations"></param>
        /// <param name="managedByTenantId"></param>
        /// <returns> A new <see cref="Models.ThirdPartyProviderAuthorization"/> instance for mocking. </returns>
        public static ThirdPartyProviderAuthorization ThirdPartyProviderAuthorization(IEnumerable<LightHouseAuthorization> authorizations = null, string managedByTenantId = null)
        {
            authorizations ??= new List<LightHouseAuthorization>();

            return new ThirdPartyProviderAuthorization(authorizations?.ToList(), managedByTenantId);
        }

        /// <summary> Initializes a new instance of ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications. </summary>
        /// <param name="subscriptionStateOverrideActions"></param>
        /// <param name="softDeleteTTL"></param>
        /// <returns> A new <see cref="Models.ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications"/> instance for mocking. </returns>
        public static ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(IEnumerable<SubscriptionStateOverrideAction> subscriptionStateOverrideActions = null, TimeSpan? softDeleteTTL = null)
        {
            subscriptionStateOverrideActions ??= new List<SubscriptionStateOverrideAction>();

            return new ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(subscriptionStateOverrideActions?.ToList(), softDeleteTTL);
        }

        /// <summary> Initializes a new instance of SubscriptionLifecycleNotificationSpecifications. </summary>
        /// <param name="subscriptionStateOverrideActions"></param>
        /// <param name="softDeleteTTL"></param>
        /// <returns> A new <see cref="Models.SubscriptionLifecycleNotificationSpecifications"/> instance for mocking. </returns>
        public static SubscriptionLifecycleNotificationSpecifications SubscriptionLifecycleNotificationSpecifications(IEnumerable<SubscriptionStateOverrideAction> subscriptionStateOverrideActions = null, TimeSpan? softDeleteTTL = null)
        {
            subscriptionStateOverrideActions ??= new List<SubscriptionStateOverrideAction>();

            return new SubscriptionLifecycleNotificationSpecifications(subscriptionStateOverrideActions?.ToList(), softDeleteTTL);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestProperties. </summary>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="providerAuthorizations"></param>
        /// <param name="namespace"></param>
        /// <param name="providerVersion"></param>
        /// <param name="providerType"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="management"></param>
        /// <param name="capabilities"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="templateDeploymentOptions"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestProperties"/> instance for mocking. </returns>
        public static ResourceProviderManifestProperties ResourceProviderManifestProperties(IEnumerable<string> providerAuthenticationAllowedAudiences = null, IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, string @namespace = null, string providerVersion = null, ResourceProviderType? providerType = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, OptInHeaderType? optInHeaders = null, ResourceProviderManifestPropertiesManagement management = null, IEnumerable<ResourceProviderCapabilities> capabilities = null, BinaryData metadata = null, ResourceProviderManifestPropertiesTemplateDeploymentOptions templateDeploymentOptions = null)
        {
            providerAuthenticationAllowedAudiences ??= new List<string>();
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            requiredFeatures ??= new List<string>();
            capabilities ??= new List<ResourceProviderCapabilities>();

            return new ResourceProviderManifestProperties(providerAuthenticationAllowedAudiences != null ? new ResourceProviderManifestPropertiesProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, providerAuthorizations?.ToList(), @namespace, providerVersion, providerType, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderManifestPropertiesFeaturesRule(requiredFeaturesPolicy.Value) : null, optInHeaders != null ? new ResourceProviderManifestPropertiesRequestHeaderOptions(optInHeaders) : null, management, capabilities?.ToList(), metadata, templateDeploymentOptions);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestPropertiesManagement. </summary>
        /// <param name="schemaOwners"></param>
        /// <param name="manifestOwners"></param>
        /// <param name="incidentRoutingService"></param>
        /// <param name="incidentRoutingTeam"></param>
        /// <param name="incidentContactEmail"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="resourceAccessPolicy"></param>
        /// <param name="resourceAccessRoles"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestPropertiesManagement"/> instance for mocking. </returns>
        public static ResourceProviderManifestPropertiesManagement ResourceProviderManifestPropertiesManagement(IEnumerable<string> schemaOwners = null, IEnumerable<string> manifestOwners = null, string incidentRoutingService = null, string incidentRoutingTeam = null, string incidentContactEmail = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, ResourceProviderManagementResourceAccessPolicy? resourceAccessPolicy = null, IEnumerable<BinaryData> resourceAccessRoles = null)
        {
            schemaOwners ??= new List<string>();
            manifestOwners ??= new List<string>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            resourceAccessRoles ??= new List<BinaryData>();

            return new ResourceProviderManifestPropertiesManagement(schemaOwners?.ToList(), manifestOwners?.ToList(), incidentRoutingService, incidentRoutingTeam, incidentContactEmail, serviceTreeInfos?.ToList(), resourceAccessPolicy, resourceAccessRoles?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceProviderManagement. </summary>
        /// <param name="schemaOwners"></param>
        /// <param name="manifestOwners"></param>
        /// <param name="incidentRoutingService"></param>
        /// <param name="incidentRoutingTeam"></param>
        /// <param name="incidentContactEmail"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="resourceAccessPolicy"></param>
        /// <param name="resourceAccessRoles"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManagement"/> instance for mocking. </returns>
        public static ResourceProviderManagement ResourceProviderManagement(IEnumerable<string> schemaOwners = null, IEnumerable<string> manifestOwners = null, string incidentRoutingService = null, string incidentRoutingTeam = null, string incidentContactEmail = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, ResourceProviderManagementResourceAccessPolicy? resourceAccessPolicy = null, IEnumerable<BinaryData> resourceAccessRoles = null)
        {
            schemaOwners ??= new List<string>();
            manifestOwners ??= new List<string>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            resourceAccessRoles ??= new List<BinaryData>();

            return new ResourceProviderManagement(schemaOwners?.ToList(), manifestOwners?.ToList(), incidentRoutingService, incidentRoutingTeam, incidentContactEmail, serviceTreeInfos?.ToList(), resourceAccessPolicy, resourceAccessRoles?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceTreeInfo. </summary>
        /// <param name="serviceId"></param>
        /// <param name="componentId"></param>
        /// <param name="readiness"></param>
        /// <returns> A new <see cref="Models.ServiceTreeInfo"/> instance for mocking. </returns>
        public static ServiceTreeInfo ServiceTreeInfo(string serviceId = null, string componentId = null, Readiness? readiness = null)
        {
            return new ServiceTreeInfo(serviceId, componentId, readiness);
        }

        /// <summary> Initializes a new instance of ResourceProviderCapabilities. </summary>
        /// <param name="quotaId"></param>
        /// <param name="effect"></param>
        /// <param name="requiredFeatures"></param>
        /// <returns> A new <see cref="Models.ResourceProviderCapabilities"/> instance for mocking. </returns>
        public static ResourceProviderCapabilities ResourceProviderCapabilities(string quotaId = null, ResourceProviderCapabilitiesEffect effect = default, IEnumerable<string> requiredFeatures = null)
        {
            requiredFeatures ??= new List<string>();

            return new ResourceProviderCapabilities(quotaId, effect, requiredFeatures?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestPropertiesTemplateDeploymentOptions. </summary>
        /// <param name="preflightSupported"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestPropertiesTemplateDeploymentOptions"/> instance for mocking. </returns>
        public static ResourceProviderManifestPropertiesTemplateDeploymentOptions ResourceProviderManifestPropertiesTemplateDeploymentOptions(bool? preflightSupported = null, IEnumerable<PreflightOption> preflightOptions = null)
        {
            preflightOptions ??= new List<PreflightOption>();

            return new ResourceProviderManifestPropertiesTemplateDeploymentOptions(preflightSupported, preflightOptions?.ToList());
        }

        /// <summary> Initializes a new instance of TemplateDeploymentOptions. </summary>
        /// <param name="preflightSupported"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.TemplateDeploymentOptions"/> instance for mocking. </returns>
        public static TemplateDeploymentOptions TemplateDeploymentOptions(bool? preflightSupported = null, IEnumerable<PreflightOption> preflightOptions = null)
        {
            preflightOptions ??= new List<PreflightOption>();

            return new TemplateDeploymentOptions(preflightSupported, preflightOptions?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.ResourceTypeRegistrationData"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationData ResourceTypeRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ResourceTypeRegistrationProperties properties = null)
        {
            return new ResourceTypeRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationProperties. </summary>
        /// <param name="routingType"></param>
        /// <param name="regionality"></param>
        /// <param name="endpoints"></param>
        /// <param name="extensionOptionsResourceCreationBegin"></param>
        /// <param name="marketplaceType"></param>
        /// <param name="swaggerSpecifications"></param>
        /// <param name="allowedUnauthorizedActions"></param>
        /// <param name="authorizationActionMappings"></param>
        /// <param name="linkedAccessChecks"></param>
        /// <param name="defaultApiVersion"></param>
        /// <param name="loggingRules"></param>
        /// <param name="throttlingRules"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="enableAsyncOperation"></param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="enableThirdPartyS2S"></param>
        /// <param name="subscriptionLifecycleNotificationSpecifications"></param>
        /// <param name="isPureProxy"></param>
        /// <param name="identityManagement"></param>
        /// <param name="checkNameAvailabilitySpecifications"></param>
        /// <param name="disallowedActionVerbs"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="subscriptionStateRules"></param>
        /// <param name="templateDeploymentOptions"></param>
        /// <param name="extendedLocations"></param>
        /// <param name="resourceMovePolicy"></param>
        /// <param name="resourceDeletionPolicy"></param>
        /// <param name="resourceConcurrencyControlOptions"> Dictionary of &lt;ResourceConcurrencyControlOption&gt;. </param>
        /// <param name="resourceGraphConfiguration"></param>
        /// <param name="management"></param>
        /// <param name="allowNoncompliantCollectionResponse"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationProperties"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationProperties ResourceTypeRegistrationProperties(RoutingType? routingType = null, Regionality? regionality = null, IEnumerable<ResourceTypeEndpoint> endpoints = null, ResourceTypeExtensionOptionsResourceCreationBegin extensionOptionsResourceCreationBegin = null, ResourceTypeRegistrationPropertiesMarketplaceType? marketplaceType = null, IEnumerable<SwaggerSpecification> swaggerSpecifications = null, IEnumerable<string> allowedUnauthorizedActions = null, IEnumerable<AuthorizationActionMapping> authorizationActionMappings = null, IEnumerable<LinkedAccessCheck> linkedAccessChecks = null, string defaultApiVersion = null, IEnumerable<LoggingRule> loggingRules = null, IEnumerable<ThrottlingRule> throttlingRules = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, bool? enableAsyncOperation = null, ProvisioningState? provisioningState = null, bool? enableThirdPartyS2S = null, ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications = null, bool? isPureProxy = null, ResourceTypeRegistrationPropertiesIdentityManagement identityManagement = null, ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications = null, IEnumerable<string> disallowedActionVerbs = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, OptInHeaderType? optInHeaders = null, IEnumerable<SubscriptionStateRule> subscriptionStateRules = null, ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions = null, IEnumerable<ExtendedLocationOptions> extendedLocations = null, ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy = null, ResourceDeletionPolicy? resourceDeletionPolicy = null, IDictionary<string, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions = null, ResourceTypeRegistrationPropertiesResourceGraphConfiguration resourceGraphConfiguration = null, ResourceTypeRegistrationPropertiesManagement management = null, bool? allowNoncompliantCollectionResponse = null)
        {
            endpoints ??= new List<ResourceTypeEndpoint>();
            swaggerSpecifications ??= new List<SwaggerSpecification>();
            allowedUnauthorizedActions ??= new List<string>();
            authorizationActionMappings ??= new List<AuthorizationActionMapping>();
            linkedAccessChecks ??= new List<LinkedAccessCheck>();
            loggingRules ??= new List<LoggingRule>();
            throttlingRules ??= new List<ThrottlingRule>();
            requiredFeatures ??= new List<string>();
            disallowedActionVerbs ??= new List<string>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            subscriptionStateRules ??= new List<SubscriptionStateRule>();
            extendedLocations ??= new List<ExtendedLocationOptions>();
            resourceConcurrencyControlOptions ??= new Dictionary<string, ResourceConcurrencyControlOption>();

            return new ResourceTypeRegistrationProperties(routingType, regionality, endpoints?.ToList(), extensionOptionsResourceCreationBegin != null ? new ResourceTypeRegistrationPropertiesExtensionOptions(extensionOptionsResourceCreationBegin) : null, marketplaceType, swaggerSpecifications?.ToList(), allowedUnauthorizedActions?.ToList(), authorizationActionMappings?.ToList(), linkedAccessChecks?.ToList(), defaultApiVersion, loggingRules?.ToList(), throttlingRules?.ToList(), requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceTypeRegistrationPropertiesFeaturesRule(requiredFeaturesPolicy.Value) : null, enableAsyncOperation, provisioningState, enableThirdPartyS2S, subscriptionLifecycleNotificationSpecifications, isPureProxy, identityManagement, checkNameAvailabilitySpecifications, disallowedActionVerbs?.ToList(), serviceTreeInfos?.ToList(), optInHeaders != null ? new ResourceTypeRegistrationPropertiesRequestHeaderOptions(optInHeaders) : null, subscriptionStateRules?.ToList(), templateDeploymentOptions, extendedLocations?.ToList(), resourceMovePolicy, resourceDeletionPolicy, resourceConcurrencyControlOptions, resourceGraphConfiguration, management, allowNoncompliantCollectionResponse != null ? new OpenApiConfiguration(new OpenApiValidation(allowNoncompliantCollectionResponse)) : null);
        }

        /// <summary> Initializes a new instance of ResourceTypeEndpoint. </summary>
        /// <param name="enabled"></param>
        /// <param name="apiVersions"></param>
        /// <param name="locations"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="extensions"></param>
        /// <param name="timeout"></param>
        /// <param name="endpointType"></param>
        /// <returns> A new <see cref="Models.ResourceTypeEndpoint"/> instance for mocking. </returns>
        public static ResourceTypeEndpoint ResourceTypeEndpoint(bool? enabled = null, IEnumerable<string> apiVersions = null, IEnumerable<string> locations = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, IEnumerable<ResourceTypeExtension> extensions = null, TimeSpan? timeout = null, EndpointType? endpointType = null)
        {
            apiVersions ??= new List<string>();
            locations ??= new List<string>();
            requiredFeatures ??= new List<string>();
            extensions ??= new List<ResourceTypeExtension>();

            return new ResourceTypeEndpoint(enabled, apiVersions?.ToList(), locations?.ToList(), requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceTypeEndpointFeaturesRule(requiredFeaturesPolicy.Value) : null, extensions?.ToList(), timeout, endpointType);
        }

        /// <summary> Initializes a new instance of ResourceTypeExtension. </summary>
        /// <param name="endpointUri"></param>
        /// <param name="extensionCategories"></param>
        /// <param name="timeout"></param>
        /// <returns> A new <see cref="Models.ResourceTypeExtension"/> instance for mocking. </returns>
        public static ResourceTypeExtension ResourceTypeExtension(Uri endpointUri = null, IEnumerable<ExtensionCategory> extensionCategories = null, TimeSpan? timeout = null)
        {
            extensionCategories ??= new List<ExtensionCategory>();

            return new ResourceTypeExtension(endpointUri, extensionCategories?.ToList(), timeout);
        }

        /// <summary> Initializes a new instance of ResourceTypeExtensionOptionsResourceCreationBegin. </summary>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="Models.ResourceTypeExtensionOptionsResourceCreationBegin"/> instance for mocking. </returns>
        public static ResourceTypeExtensionOptionsResourceCreationBegin ResourceTypeExtensionOptionsResourceCreationBegin(IEnumerable<ExtensionOptionType> request = null, IEnumerable<ExtensionOptionType> response = null)
        {
            request ??= new List<ExtensionOptionType>();
            response ??= new List<ExtensionOptionType>();

            return new ResourceTypeExtensionOptionsResourceCreationBegin(request?.ToList(), response?.ToList());
        }

        /// <summary> Initializes a new instance of ExtensionOptions. </summary>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <returns> A new <see cref="Models.ExtensionOptions"/> instance for mocking. </returns>
        public static ExtensionOptions ExtensionOptions(IEnumerable<ExtensionOptionType> request = null, IEnumerable<ExtensionOptionType> response = null)
        {
            request ??= new List<ExtensionOptionType>();
            response ??= new List<ExtensionOptionType>();

            return new ExtensionOptions(request?.ToList(), response?.ToList());
        }

        /// <summary> Initializes a new instance of SwaggerSpecification. </summary>
        /// <param name="apiVersions"></param>
        /// <param name="swaggerSpecFolderUri"></param>
        /// <returns> A new <see cref="Models.SwaggerSpecification"/> instance for mocking. </returns>
        public static SwaggerSpecification SwaggerSpecification(IEnumerable<string> apiVersions = null, Uri swaggerSpecFolderUri = null)
        {
            apiVersions ??= new List<string>();

            return new SwaggerSpecification(apiVersions?.ToList(), swaggerSpecFolderUri);
        }

        /// <summary> Initializes a new instance of AuthorizationActionMapping. </summary>
        /// <param name="original"></param>
        /// <param name="desired"></param>
        /// <returns> A new <see cref="Models.AuthorizationActionMapping"/> instance for mocking. </returns>
        public static AuthorizationActionMapping AuthorizationActionMapping(string original = null, string desired = null)
        {
            return new AuthorizationActionMapping(original, desired);
        }

        /// <summary> Initializes a new instance of LinkedAccessCheck. </summary>
        /// <param name="actionName"></param>
        /// <param name="linkedProperty"></param>
        /// <param name="linkedAction"></param>
        /// <param name="linkedActionVerb"></param>
        /// <param name="linkedType"></param>
        /// <returns> A new <see cref="Models.LinkedAccessCheck"/> instance for mocking. </returns>
        public static LinkedAccessCheck LinkedAccessCheck(string actionName = null, string linkedProperty = null, string linkedAction = null, string linkedActionVerb = null, string linkedType = null)
        {
            return new LinkedAccessCheck(actionName, linkedProperty, linkedAction, linkedActionVerb, linkedType);
        }

        /// <summary> Initializes a new instance of LoggingRule. </summary>
        /// <param name="action"></param>
        /// <param name="direction"></param>
        /// <param name="detailLevel"></param>
        /// <param name="hiddenPropertyPaths"></param>
        /// <returns> A new <see cref="Models.LoggingRule"/> instance for mocking. </returns>
        public static LoggingRule LoggingRule(string action = null, LoggingDirection direction = default, LoggingDetail detailLevel = default, LoggingRuleHiddenPropertyPaths hiddenPropertyPaths = null)
        {
            return new LoggingRule(action, direction, detailLevel, hiddenPropertyPaths);
        }

        /// <summary> Initializes a new instance of LoggingRuleHiddenPropertyPaths. </summary>
        /// <param name="hiddenPathsOnRequest"></param>
        /// <param name="hiddenPathsOnResponse"></param>
        /// <returns> A new <see cref="Models.LoggingRuleHiddenPropertyPaths"/> instance for mocking. </returns>
        public static LoggingRuleHiddenPropertyPaths LoggingRuleHiddenPropertyPaths(IEnumerable<string> hiddenPathsOnRequest = null, IEnumerable<string> hiddenPathsOnResponse = null)
        {
            hiddenPathsOnRequest ??= new List<string>();
            hiddenPathsOnResponse ??= new List<string>();

            return new LoggingRuleHiddenPropertyPaths(hiddenPathsOnRequest?.ToList(), hiddenPathsOnResponse?.ToList());
        }

        /// <summary> Initializes a new instance of LoggingHiddenPropertyPath. </summary>
        /// <param name="hiddenPathsOnRequest"></param>
        /// <param name="hiddenPathsOnResponse"></param>
        /// <returns> A new <see cref="Models.LoggingHiddenPropertyPath"/> instance for mocking. </returns>
        public static LoggingHiddenPropertyPath LoggingHiddenPropertyPath(IEnumerable<string> hiddenPathsOnRequest = null, IEnumerable<string> hiddenPathsOnResponse = null)
        {
            hiddenPathsOnRequest ??= new List<string>();
            hiddenPathsOnResponse ??= new List<string>();

            return new LoggingHiddenPropertyPath(hiddenPathsOnRequest?.ToList(), hiddenPathsOnResponse?.ToList());
        }

        /// <summary> Initializes a new instance of ThrottlingRule. </summary>
        /// <param name="action"></param>
        /// <param name="metrics"></param>
        /// <param name="requiredFeatures"></param>
        /// <returns> A new <see cref="Models.ThrottlingRule"/> instance for mocking. </returns>
        public static ThrottlingRule ThrottlingRule(string action = null, IEnumerable<ThrottlingMetric> metrics = null, IEnumerable<string> requiredFeatures = null)
        {
            metrics ??= new List<ThrottlingMetric>();
            requiredFeatures ??= new List<string>();

            return new ThrottlingRule(action, metrics?.ToList(), requiredFeatures?.ToList());
        }

        /// <summary> Initializes a new instance of ThrottlingMetric. </summary>
        /// <param name="metricType"></param>
        /// <param name="limit"></param>
        /// <param name="interval"></param>
        /// <returns> A new <see cref="Models.ThrottlingMetric"/> instance for mocking. </returns>
        public static ThrottlingMetric ThrottlingMetric(ThrottlingMetricType metricType = default, long limit = default, TimeSpan? interval = null)
        {
            return new ThrottlingMetric(metricType, limit, interval);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications. </summary>
        /// <param name="subscriptionStateOverrideActions"></param>
        /// <param name="softDeleteTTL"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(IEnumerable<SubscriptionStateOverrideAction> subscriptionStateOverrideActions = null, TimeSpan? softDeleteTTL = null)
        {
            subscriptionStateOverrideActions ??= new List<SubscriptionStateOverrideAction>();

            return new ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(subscriptionStateOverrideActions?.ToList(), softDeleteTTL);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesIdentityManagement. </summary>
        /// <param name="managementType"></param>
        /// <param name="applicationId"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesIdentityManagement"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesIdentityManagement ResourceTypeRegistrationPropertiesIdentityManagement(IdentityManagementType? managementType = null, string applicationId = null)
        {
            return new ResourceTypeRegistrationPropertiesIdentityManagement(managementType, applicationId);
        }

        /// <summary> Initializes a new instance of IdentityManagementProperties. </summary>
        /// <param name="managementType"></param>
        /// <param name="applicationId"></param>
        /// <returns> A new <see cref="Models.IdentityManagementProperties"/> instance for mocking. </returns>
        public static IdentityManagementProperties IdentityManagementProperties(IdentityManagementType? managementType = null, string applicationId = null)
        {
            return new IdentityManagementProperties(managementType, applicationId);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications. </summary>
        /// <param name="enableDefaultValidation"></param>
        /// <param name="resourceTypesWithCustomValidation"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications(bool? enableDefaultValidation = null, IEnumerable<string> resourceTypesWithCustomValidation = null)
        {
            resourceTypesWithCustomValidation ??= new List<string>();

            return new ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications(enableDefaultValidation, resourceTypesWithCustomValidation?.ToList());
        }

        /// <summary> Initializes a new instance of CheckNameAvailabilitySpecifications. </summary>
        /// <param name="enableDefaultValidation"></param>
        /// <param name="resourceTypesWithCustomValidation"></param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilitySpecifications"/> instance for mocking. </returns>
        public static CheckNameAvailabilitySpecifications CheckNameAvailabilitySpecifications(bool? enableDefaultValidation = null, IEnumerable<string> resourceTypesWithCustomValidation = null)
        {
            resourceTypesWithCustomValidation ??= new List<string>();

            return new CheckNameAvailabilitySpecifications(enableDefaultValidation, resourceTypesWithCustomValidation?.ToList());
        }

        /// <summary> Initializes a new instance of SubscriptionStateRule. </summary>
        /// <param name="state"></param>
        /// <param name="allowedActions"></param>
        /// <returns> A new <see cref="Models.SubscriptionStateRule"/> instance for mocking. </returns>
        public static SubscriptionStateRule SubscriptionStateRule(SubscriptionState? state = null, IEnumerable<string> allowedActions = null)
        {
            allowedActions ??= new List<string>();

            return new SubscriptionStateRule(state, allowedActions?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesTemplateDeploymentOptions. </summary>
        /// <param name="preflightSupported"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesTemplateDeploymentOptions"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesTemplateDeploymentOptions ResourceTypeRegistrationPropertiesTemplateDeploymentOptions(bool? preflightSupported = null, IEnumerable<PreflightOption> preflightOptions = null)
        {
            preflightOptions ??= new List<PreflightOption>();

            return new ResourceTypeRegistrationPropertiesTemplateDeploymentOptions(preflightSupported, preflightOptions?.ToList());
        }

        /// <summary> Initializes a new instance of ExtendedLocationOptions. </summary>
        /// <param name="extendedLocationOptionsType"></param>
        /// <param name="supportedPolicy"></param>
        /// <returns> A new <see cref="Models.ExtendedLocationOptions"/> instance for mocking. </returns>
        public static ExtendedLocationOptions ExtendedLocationOptions(string extendedLocationOptionsType = null, string supportedPolicy = null)
        {
            return new ExtendedLocationOptions(extendedLocationOptionsType, supportedPolicy);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesResourceMovePolicy. </summary>
        /// <param name="validationRequired"></param>
        /// <param name="crossResourceGroupMoveEnabled"></param>
        /// <param name="crossSubscriptionMoveEnabled"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesResourceMovePolicy"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesResourceMovePolicy ResourceTypeRegistrationPropertiesResourceMovePolicy(bool? validationRequired = null, bool? crossResourceGroupMoveEnabled = null, bool? crossSubscriptionMoveEnabled = null)
        {
            return new ResourceTypeRegistrationPropertiesResourceMovePolicy(validationRequired, crossResourceGroupMoveEnabled, crossSubscriptionMoveEnabled);
        }

        /// <summary> Initializes a new instance of ResourceMovePolicy. </summary>
        /// <param name="validationRequired"></param>
        /// <param name="crossResourceGroupMoveEnabled"></param>
        /// <param name="crossSubscriptionMoveEnabled"></param>
        /// <returns> A new <see cref="Models.ResourceMovePolicy"/> instance for mocking. </returns>
        public static ResourceMovePolicy ResourceMovePolicy(bool? validationRequired = null, bool? crossResourceGroupMoveEnabled = null, bool? crossSubscriptionMoveEnabled = null)
        {
            return new ResourceMovePolicy(validationRequired, crossResourceGroupMoveEnabled, crossSubscriptionMoveEnabled);
        }

        /// <summary> Initializes a new instance of ResourceConcurrencyControlOption. </summary>
        /// <param name="policy"></param>
        /// <returns> A new <see cref="Models.ResourceConcurrencyControlOption"/> instance for mocking. </returns>
        public static ResourceConcurrencyControlOption ResourceConcurrencyControlOption(Policy? policy = null)
        {
            return new ResourceConcurrencyControlOption(policy);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesResourceGraphConfiguration. </summary>
        /// <param name="enabled"></param>
        /// <param name="apiVersion"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesResourceGraphConfiguration"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesResourceGraphConfiguration ResourceTypeRegistrationPropertiesResourceGraphConfiguration(bool? enabled = null, string apiVersion = null)
        {
            return new ResourceTypeRegistrationPropertiesResourceGraphConfiguration(enabled, apiVersion);
        }

        /// <summary> Initializes a new instance of ResourceGraphConfiguration. </summary>
        /// <param name="enabled"></param>
        /// <param name="apiVersion"></param>
        /// <returns> A new <see cref="Models.ResourceGraphConfiguration"/> instance for mocking. </returns>
        public static ResourceGraphConfiguration ResourceGraphConfiguration(bool? enabled = null, string apiVersion = null)
        {
            return new ResourceGraphConfiguration(enabled, apiVersion);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationPropertiesManagement. </summary>
        /// <param name="schemaOwners"></param>
        /// <param name="manifestOwners"></param>
        /// <param name="incidentRoutingService"></param>
        /// <param name="incidentRoutingTeam"></param>
        /// <param name="incidentContactEmail"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="resourceAccessPolicy"></param>
        /// <param name="resourceAccessRoles"></param>
        /// <returns> A new <see cref="Models.ResourceTypeRegistrationPropertiesManagement"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationPropertiesManagement ResourceTypeRegistrationPropertiesManagement(IEnumerable<string> schemaOwners = null, IEnumerable<string> manifestOwners = null, string incidentRoutingService = null, string incidentRoutingTeam = null, string incidentContactEmail = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, ResourceProviderManagementResourceAccessPolicy? resourceAccessPolicy = null, IEnumerable<BinaryData> resourceAccessRoles = null)
        {
            schemaOwners ??= new List<string>();
            manifestOwners ??= new List<string>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            resourceAccessRoles ??= new List<BinaryData>();

            return new ResourceTypeRegistrationPropertiesManagement(schemaOwners?.ToList(), manifestOwners?.ToList(), incidentRoutingService, incidentRoutingTeam, incidentContactEmail, serviceTreeInfos?.ToList(), resourceAccessPolicy, resourceAccessRoles?.ToList());
        }

        /// <summary> Initializes a new instance of CustomRolloutPropertiesStatus. </summary>
        /// <param name="completedRegions"></param>
        /// <param name="failedOrSkippedRegions"> Dictionary of &lt;ExtendedErrorInfo&gt;. </param>
        /// <returns> A new <see cref="Models.CustomRolloutPropertiesStatus"/> instance for mocking. </returns>
        public static CustomRolloutPropertiesStatus CustomRolloutPropertiesStatus(IEnumerable<string> completedRegions = null, IDictionary<string, ExtendedErrorInfo> failedOrSkippedRegions = null)
        {
            completedRegions ??= new List<string>();
            failedOrSkippedRegions ??= new Dictionary<string, ExtendedErrorInfo>();

            return new CustomRolloutPropertiesStatus(completedRegions?.ToList(), failedOrSkippedRegions);
        }

        /// <summary> Initializes a new instance of CustomRolloutStatus. </summary>
        /// <param name="completedRegions"></param>
        /// <param name="failedOrSkippedRegions"> Dictionary of &lt;ExtendedErrorInfo&gt;. </param>
        /// <returns> A new <see cref="Models.CustomRolloutStatus"/> instance for mocking. </returns>
        public static CustomRolloutStatus CustomRolloutStatus(IEnumerable<string> completedRegions = null, IDictionary<string, ExtendedErrorInfo> failedOrSkippedRegions = null)
        {
            completedRegions ??= new List<string>();
            failedOrSkippedRegions ??= new Dictionary<string, ExtendedErrorInfo>();

            return new CustomRolloutStatus(completedRegions?.ToList(), failedOrSkippedRegions);
        }

        /// <summary> Initializes a new instance of ExtendedErrorInfo. </summary>
        /// <param name="code"></param>
        /// <param name="target"></param>
        /// <param name="message"></param>
        /// <param name="details"></param>
        /// <param name="additionalInfo"></param>
        /// <returns> A new <see cref="Models.ExtendedErrorInfo"/> instance for mocking. </returns>
        public static ExtendedErrorInfo ExtendedErrorInfo(string code = null, string target = null, string message = null, IEnumerable<ExtendedErrorInfo> details = null, IEnumerable<TypedErrorInfo> additionalInfo = null)
        {
            details ??= new List<ExtendedErrorInfo>();
            additionalInfo ??= new List<TypedErrorInfo>();

            return new ExtendedErrorInfo(code, target, message, details?.ToList(), additionalInfo?.ToList());
        }

        /// <summary> Initializes a new instance of TypedErrorInfo. </summary>
        /// <param name="typedErrorInfoType"></param>
        /// <param name="info"> Any object. </param>
        /// <returns> A new <see cref="Models.TypedErrorInfo"/> instance for mocking. </returns>
        public static TypedErrorInfo TypedErrorInfo(string typedErrorInfoType = null, BinaryData info = null)
        {
            return new TypedErrorInfo(typedErrorInfoType, info);
        }

        /// <summary> Initializes a new instance of DefaultRolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the rollout. </param>
        /// <returns> A new <see cref="ProviderHub.DefaultRolloutData"/> instance for mocking. </returns>
        public static DefaultRolloutData DefaultRolloutData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, DefaultRolloutProperties properties = null)
        {
            return new DefaultRolloutData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DefaultRolloutProperties. </summary>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="specification"></param>
        /// <param name="status"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutProperties"/> instance for mocking. </returns>
        public static DefaultRolloutProperties DefaultRolloutProperties(ProvisioningState? provisioningState = null, DefaultRolloutPropertiesSpecification specification = null, DefaultRolloutPropertiesStatus status = null)
        {
            return new DefaultRolloutProperties(provisioningState, specification, status);
        }

        /// <summary> Initializes a new instance of DefaultRolloutPropertiesSpecification. </summary>
        /// <param name="expeditedRolloutEnabled"></param>
        /// <param name="canary"></param>
        /// <param name="lowTraffic"></param>
        /// <param name="mediumTraffic"></param>
        /// <param name="highTraffic"></param>
        /// <param name="restOfTheWorldGroupOne"></param>
        /// <param name="restOfTheWorldGroupTwo"></param>
        /// <param name="providerRegistration"></param>
        /// <param name="resourceTypeRegistrations"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutPropertiesSpecification"/> instance for mocking. </returns>
        public static DefaultRolloutPropertiesSpecification DefaultRolloutPropertiesSpecification(bool? expeditedRolloutEnabled = null, DefaultRolloutSpecificationCanary canary = null, DefaultRolloutSpecificationLowTraffic lowTraffic = null, DefaultRolloutSpecificationMediumTraffic mediumTraffic = null, DefaultRolloutSpecificationHighTraffic highTraffic = null, DefaultRolloutSpecificationRestOfTheWorldGroupOne restOfTheWorldGroupOne = null, DefaultRolloutSpecificationRestOfTheWorldGroupTwo restOfTheWorldGroupTwo = null, DefaultRolloutSpecificationProviderRegistration providerRegistration = null, IEnumerable<ResourceTypeRegistrationData> resourceTypeRegistrations = null)
        {
            resourceTypeRegistrations ??= new List<ResourceTypeRegistrationData>();

            return new DefaultRolloutPropertiesSpecification(expeditedRolloutEnabled != null ? new DefaultRolloutSpecificationExpeditedRollout(expeditedRolloutEnabled) : null, canary, lowTraffic, mediumTraffic, highTraffic, restOfTheWorldGroupOne, restOfTheWorldGroupTwo, providerRegistration, resourceTypeRegistrations?.ToList());
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecification. </summary>
        /// <param name="expeditedRolloutEnabled"></param>
        /// <param name="canary"></param>
        /// <param name="lowTraffic"></param>
        /// <param name="mediumTraffic"></param>
        /// <param name="highTraffic"></param>
        /// <param name="restOfTheWorldGroupOne"></param>
        /// <param name="restOfTheWorldGroupTwo"></param>
        /// <param name="providerRegistration"></param>
        /// <param name="resourceTypeRegistrations"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecification"/> instance for mocking. </returns>
        public static DefaultRolloutSpecification DefaultRolloutSpecification(bool? expeditedRolloutEnabled = null, DefaultRolloutSpecificationCanary canary = null, DefaultRolloutSpecificationLowTraffic lowTraffic = null, DefaultRolloutSpecificationMediumTraffic mediumTraffic = null, DefaultRolloutSpecificationHighTraffic highTraffic = null, DefaultRolloutSpecificationRestOfTheWorldGroupOne restOfTheWorldGroupOne = null, DefaultRolloutSpecificationRestOfTheWorldGroupTwo restOfTheWorldGroupTwo = null, DefaultRolloutSpecificationProviderRegistration providerRegistration = null, IEnumerable<ResourceTypeRegistrationData> resourceTypeRegistrations = null)
        {
            resourceTypeRegistrations ??= new List<ResourceTypeRegistrationData>();

            return new DefaultRolloutSpecification(expeditedRolloutEnabled != null ? new DefaultRolloutSpecificationExpeditedRollout(expeditedRolloutEnabled) : null, canary, lowTraffic, mediumTraffic, highTraffic, restOfTheWorldGroupOne, restOfTheWorldGroupTwo, providerRegistration, resourceTypeRegistrations?.ToList());
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationCanary. </summary>
        /// <param name="skipRegions"></param>
        /// <param name="regions"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationCanary"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationCanary DefaultRolloutSpecificationCanary(IEnumerable<string> skipRegions = null, IEnumerable<string> regions = null)
        {
            skipRegions ??= new List<string>();
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationCanary(skipRegions?.ToList(), regions?.ToList());
        }

        /// <summary> Initializes a new instance of CanaryTrafficRegionRolloutConfiguration. </summary>
        /// <param name="skipRegions"></param>
        /// <param name="regions"></param>
        /// <returns> A new <see cref="Models.CanaryTrafficRegionRolloutConfiguration"/> instance for mocking. </returns>
        public static CanaryTrafficRegionRolloutConfiguration CanaryTrafficRegionRolloutConfiguration(IEnumerable<string> skipRegions = null, IEnumerable<string> regions = null)
        {
            skipRegions ??= new List<string>();
            regions ??= new List<string>();

            return new CanaryTrafficRegionRolloutConfiguration(skipRegions?.ToList(), regions?.ToList());
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationLowTraffic. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationLowTraffic"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationLowTraffic DefaultRolloutSpecificationLowTraffic(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationLowTraffic(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of TrafficRegionRolloutConfiguration. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.TrafficRegionRolloutConfiguration"/> instance for mocking. </returns>
        public static TrafficRegionRolloutConfiguration TrafficRegionRolloutConfiguration(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new TrafficRegionRolloutConfiguration(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationMediumTraffic. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationMediumTraffic"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationMediumTraffic DefaultRolloutSpecificationMediumTraffic(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationMediumTraffic(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationHighTraffic. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationHighTraffic"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationHighTraffic DefaultRolloutSpecificationHighTraffic(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationHighTraffic(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationRestOfTheWorldGroupOne. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationRestOfTheWorldGroupOne"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationRestOfTheWorldGroupOne DefaultRolloutSpecificationRestOfTheWorldGroupOne(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationRestOfTheWorldGroupOne(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationRestOfTheWorldGroupTwo. </summary>
        /// <param name="regions"></param>
        /// <param name="waitDuration"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationRestOfTheWorldGroupTwo"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationRestOfTheWorldGroupTwo DefaultRolloutSpecificationRestOfTheWorldGroupTwo(IEnumerable<string> regions = null, TimeSpan? waitDuration = null)
        {
            regions ??= new List<string>();

            return new DefaultRolloutSpecificationRestOfTheWorldGroupTwo(regions?.ToList(), waitDuration);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationProviderRegistration. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationProviderRegistration"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationProviderRegistration DefaultRolloutSpecificationProviderRegistration(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new DefaultRolloutSpecificationProviderRegistration(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DefaultRolloutPropertiesStatus. </summary>
        /// <param name="completedRegions"></param>
        /// <param name="failedOrSkippedRegions"> Dictionary of &lt;ExtendedErrorInfo&gt;. </param>
        /// <param name="nextTrafficRegion"></param>
        /// <param name="nextTrafficRegionScheduledOn"></param>
        /// <param name="subscriptionReregistrationResult"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutPropertiesStatus"/> instance for mocking. </returns>
        public static DefaultRolloutPropertiesStatus DefaultRolloutPropertiesStatus(IEnumerable<string> completedRegions = null, IDictionary<string, ExtendedErrorInfo> failedOrSkippedRegions = null, TrafficRegionCategory? nextTrafficRegion = null, DateTimeOffset? nextTrafficRegionScheduledOn = null, SubscriptionReregistrationResult? subscriptionReregistrationResult = null)
        {
            completedRegions ??= new List<string>();
            failedOrSkippedRegions ??= new Dictionary<string, ExtendedErrorInfo>();

            return new DefaultRolloutPropertiesStatus(completedRegions?.ToList(), failedOrSkippedRegions, nextTrafficRegion, nextTrafficRegionScheduledOn, subscriptionReregistrationResult);
        }

        /// <summary> Initializes a new instance of DefaultRolloutStatus. </summary>
        /// <param name="completedRegions"></param>
        /// <param name="failedOrSkippedRegions"> Dictionary of &lt;ExtendedErrorInfo&gt;. </param>
        /// <param name="nextTrafficRegion"></param>
        /// <param name="nextTrafficRegionScheduledOn"></param>
        /// <param name="subscriptionReregistrationResult"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutStatus"/> instance for mocking. </returns>
        public static DefaultRolloutStatus DefaultRolloutStatus(IEnumerable<string> completedRegions = null, IDictionary<string, ExtendedErrorInfo> failedOrSkippedRegions = null, TrafficRegionCategory? nextTrafficRegion = null, DateTimeOffset? nextTrafficRegionScheduledOn = null, SubscriptionReregistrationResult? subscriptionReregistrationResult = null)
        {
            completedRegions ??= new List<string>();
            failedOrSkippedRegions ??= new Dictionary<string, ExtendedErrorInfo>();

            return new DefaultRolloutStatus(completedRegions?.ToList(), failedOrSkippedRegions, nextTrafficRegion, nextTrafficRegionScheduledOn, subscriptionReregistrationResult);
        }

        /// <summary> Initializes a new instance of RolloutStatusBase. </summary>
        /// <param name="completedRegions"></param>
        /// <param name="failedOrSkippedRegions"> Dictionary of &lt;ExtendedErrorInfo&gt;. </param>
        /// <returns> A new <see cref="Models.RolloutStatusBase"/> instance for mocking. </returns>
        public static RolloutStatusBase RolloutStatusBase(IEnumerable<string> completedRegions = null, IDictionary<string, ExtendedErrorInfo> failedOrSkippedRegions = null)
        {
            completedRegions ??= new List<string>();
            failedOrSkippedRegions ??= new Dictionary<string, ExtendedErrorInfo>();

            return new RolloutStatusBase(completedRegions?.ToList(), failedOrSkippedRegions);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifest. </summary>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="providerAuthorizations"></param>
        /// <param name="namespace"></param>
        /// <param name="providerVersion"></param>
        /// <param name="providerType"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="resourceTypes"></param>
        /// <param name="management"></param>
        /// <param name="capabilities"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="globalNotificationEndpoints"></param>
        /// <param name="reRegisterSubscriptionMetadata"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifest"/> instance for mocking. </returns>
        public static ResourceProviderManifest ResourceProviderManifest(IEnumerable<string> providerAuthenticationAllowedAudiences = null, IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, string @namespace = null, string providerVersion = null, ResourceProviderType? providerType = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, OptInHeaderType? optInHeaders = null, IEnumerable<ResourceType> resourceTypes = null, ResourceProviderManifestManagement management = null, IEnumerable<ResourceProviderCapabilities> capabilities = null, BinaryData metadata = null, IEnumerable<ResourceProviderEndpoint> globalNotificationEndpoints = null, ResourceProviderManifestReRegisterSubscriptionMetadata reRegisterSubscriptionMetadata = null)
        {
            providerAuthenticationAllowedAudiences ??= new List<string>();
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            requiredFeatures ??= new List<string>();
            resourceTypes ??= new List<ResourceType>();
            capabilities ??= new List<ResourceProviderCapabilities>();
            globalNotificationEndpoints ??= new List<ResourceProviderEndpoint>();

            return new ResourceProviderManifest(providerAuthenticationAllowedAudiences != null ? new ResourceProviderManifestProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, providerAuthorizations?.ToList(), @namespace, providerVersion, providerType, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderManifestFeaturesRule(requiredFeaturesPolicy.Value) : null, optInHeaders != null ? new ResourceProviderManifestRequestHeaderOptions(optInHeaders) : null, resourceTypes?.ToList(), management, capabilities?.ToList(), metadata, globalNotificationEndpoints?.ToList(), reRegisterSubscriptionMetadata);
        }

        /// <summary> Initializes a new instance of ResourceType. </summary>
        /// <param name="name"></param>
        /// <param name="routingType"></param>
        /// <param name="resourceValidation"></param>
        /// <param name="allowedUnauthorizedActions"></param>
        /// <param name="authorizationActionMappings"></param>
        /// <param name="linkedAccessChecks"></param>
        /// <param name="defaultApiVersion"></param>
        /// <param name="loggingRules"></param>
        /// <param name="throttlingRules"></param>
        /// <param name="endpoints"></param>
        /// <param name="marketplaceType"></param>
        /// <param name="managementType"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="subscriptionStateRules"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="skuLink"></param>
        /// <param name="disallowedActionVerbs"></param>
        /// <param name="templateDeploymentPolicy"></param>
        /// <param name="extendedLocations"></param>
        /// <param name="linkedOperationRules"></param>
        /// <param name="resourceDeletionPolicy"></param>
        /// <returns> A new <see cref="Models.ResourceType"/> instance for mocking. </returns>
        public static ResourceType ResourceType(string name = null, RoutingType? routingType = null, ResourceValidation? resourceValidation = null, IEnumerable<string> allowedUnauthorizedActions = null, IEnumerable<AuthorizationActionMapping> authorizationActionMappings = null, IEnumerable<LinkedAccessCheck> linkedAccessChecks = null, string defaultApiVersion = null, IEnumerable<LoggingRule> loggingRules = null, IEnumerable<ThrottlingRule> throttlingRules = null, IEnumerable<ResourceProviderEndpoint> endpoints = null, ResourceTypeMarketplaceType? marketplaceType = null, IdentityManagementType? managementType = null, BinaryData metadata = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, IEnumerable<SubscriptionStateRule> subscriptionStateRules = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, OptInHeaderType? optInHeaders = null, string skuLink = null, IEnumerable<string> disallowedActionVerbs = null, ResourceTypeTemplateDeploymentPolicy templateDeploymentPolicy = null, IEnumerable<ExtendedLocationOptions> extendedLocations = null, IEnumerable<LinkedOperationRule> linkedOperationRules = null, ManifestResourceDeletionPolicy? resourceDeletionPolicy = null)
        {
            allowedUnauthorizedActions ??= new List<string>();
            authorizationActionMappings ??= new List<AuthorizationActionMapping>();
            linkedAccessChecks ??= new List<LinkedAccessCheck>();
            loggingRules ??= new List<LoggingRule>();
            throttlingRules ??= new List<ThrottlingRule>();
            endpoints ??= new List<ResourceProviderEndpoint>();
            requiredFeatures ??= new List<string>();
            subscriptionStateRules ??= new List<SubscriptionStateRule>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            disallowedActionVerbs ??= new List<string>();
            extendedLocations ??= new List<ExtendedLocationOptions>();
            linkedOperationRules ??= new List<LinkedOperationRule>();

            return new ResourceType(name, routingType, resourceValidation, allowedUnauthorizedActions?.ToList(), authorizationActionMappings?.ToList(), linkedAccessChecks?.ToList(), defaultApiVersion, loggingRules?.ToList(), throttlingRules?.ToList(), endpoints?.ToList(), marketplaceType, managementType != null ? new ResourceTypeIdentityManagement(managementType) : null, metadata, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceTypeFeaturesRule(requiredFeaturesPolicy.Value) : null, subscriptionStateRules?.ToList(), serviceTreeInfos?.ToList(), optInHeaders != null ? new ResourceTypeRequestHeaderOptions(optInHeaders) : null, skuLink, disallowedActionVerbs?.ToList(), templateDeploymentPolicy, extendedLocations?.ToList(), linkedOperationRules?.ToList(), resourceDeletionPolicy);
        }

        /// <summary> Initializes a new instance of ResourceProviderEndpoint. </summary>
        /// <param name="enabled"></param>
        /// <param name="apiVersions"></param>
        /// <param name="endpointUri"></param>
        /// <param name="locations"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="timeout"></param>
        /// <param name="endpointType"></param>
        /// <returns> A new <see cref="Models.ResourceProviderEndpoint"/> instance for mocking. </returns>
        public static ResourceProviderEndpoint ResourceProviderEndpoint(bool? enabled = null, IEnumerable<string> apiVersions = null, Uri endpointUri = null, IEnumerable<string> locations = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, TimeSpan? timeout = null, EndpointType? endpointType = null)
        {
            apiVersions ??= new List<string>();
            locations ??= new List<string>();
            requiredFeatures ??= new List<string>();

            return new ResourceProviderEndpoint(enabled, apiVersions?.ToList(), endpointUri, locations?.ToList(), requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderEndpointFeaturesRule(requiredFeaturesPolicy.Value) : null, timeout, endpointType);
        }

        /// <summary> Initializes a new instance of ResourceTypeTemplateDeploymentPolicy. </summary>
        /// <param name="capabilities"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.ResourceTypeTemplateDeploymentPolicy"/> instance for mocking. </returns>
        public static ResourceTypeTemplateDeploymentPolicy ResourceTypeTemplateDeploymentPolicy(TemplateDeploymentCapability capabilities = default, TemplateDeploymentPreflightOption preflightOptions = default)
        {
            return new ResourceTypeTemplateDeploymentPolicy(capabilities, preflightOptions);
        }

        /// <summary> Initializes a new instance of TemplateDeploymentPolicy. </summary>
        /// <param name="capabilities"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.TemplateDeploymentPolicy"/> instance for mocking. </returns>
        public static TemplateDeploymentPolicy TemplateDeploymentPolicy(TemplateDeploymentCapability capabilities = default, TemplateDeploymentPreflightOption preflightOptions = default)
        {
            return new TemplateDeploymentPolicy(capabilities, preflightOptions);
        }

        /// <summary> Initializes a new instance of LinkedOperationRule. </summary>
        /// <param name="linkedOperation"></param>
        /// <param name="linkedAction"></param>
        /// <returns> A new <see cref="Models.LinkedOperationRule"/> instance for mocking. </returns>
        public static LinkedOperationRule LinkedOperationRule(LinkedOperation linkedOperation = default, LinkedAction linkedAction = default)
        {
            return new LinkedOperationRule(linkedOperation, linkedAction);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestManagement. </summary>
        /// <param name="schemaOwners"></param>
        /// <param name="manifestOwners"></param>
        /// <param name="incidentRoutingService"></param>
        /// <param name="incidentRoutingTeam"></param>
        /// <param name="incidentContactEmail"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="resourceAccessPolicy"></param>
        /// <param name="resourceAccessRoles"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestManagement"/> instance for mocking. </returns>
        public static ResourceProviderManifestManagement ResourceProviderManifestManagement(IEnumerable<string> schemaOwners = null, IEnumerable<string> manifestOwners = null, string incidentRoutingService = null, string incidentRoutingTeam = null, string incidentContactEmail = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, ResourceProviderManagementResourceAccessPolicy? resourceAccessPolicy = null, IEnumerable<BinaryData> resourceAccessRoles = null)
        {
            schemaOwners ??= new List<string>();
            manifestOwners ??= new List<string>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            resourceAccessRoles ??= new List<BinaryData>();

            return new ResourceProviderManifestManagement(schemaOwners?.ToList(), manifestOwners?.ToList(), incidentRoutingService, incidentRoutingTeam, incidentContactEmail, serviceTreeInfos?.ToList(), resourceAccessPolicy, resourceAccessRoles?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestReRegisterSubscriptionMetadata. </summary>
        /// <param name="enabled"></param>
        /// <param name="concurrencyLimit"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestReRegisterSubscriptionMetadata"/> instance for mocking. </returns>
        public static ResourceProviderManifestReRegisterSubscriptionMetadata ResourceProviderManifestReRegisterSubscriptionMetadata(bool enabled = default, int? concurrencyLimit = null)
        {
            return new ResourceProviderManifestReRegisterSubscriptionMetadata(enabled, concurrencyLimit);
        }

        /// <summary> Initializes a new instance of ReRegisterSubscriptionMetadata. </summary>
        /// <param name="enabled"></param>
        /// <param name="concurrencyLimit"></param>
        /// <returns> A new <see cref="Models.ReRegisterSubscriptionMetadata"/> instance for mocking. </returns>
        public static ReRegisterSubscriptionMetadata ReRegisterSubscriptionMetadata(bool enabled = default, int? concurrencyLimit = null)
        {
            return new ReRegisterSubscriptionMetadata(enabled, concurrencyLimit);
        }

        /// <summary> Initializes a new instance of CheckinManifestInfo. </summary>
        /// <param name="isCheckedIn"></param>
        /// <param name="statusMessage"></param>
        /// <param name="pullRequest"></param>
        /// <param name="commitId"></param>
        /// <returns> A new <see cref="Models.CheckinManifestInfo"/> instance for mocking. </returns>
        public static CheckinManifestInfo CheckinManifestInfo(bool isCheckedIn = default, string statusMessage = null, string pullRequest = null, string commitId = null)
        {
            return new CheckinManifestInfo(isCheckedIn, statusMessage, pullRequest, commitId);
        }

        /// <summary> Initializes a new instance of NotificationRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.NotificationRegistrationData"/> instance for mocking. </returns>
        public static NotificationRegistrationData NotificationRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, NotificationRegistrationProperties properties = null)
        {
            return new NotificationRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of NotificationRegistrationProperties. </summary>
        /// <param name="notificationMode"></param>
        /// <param name="messageScope"></param>
        /// <param name="includedEvents"></param>
        /// <param name="notificationEndpoints"></param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <returns> A new <see cref="Models.NotificationRegistrationProperties"/> instance for mocking. </returns>
        public static NotificationRegistrationProperties NotificationRegistrationProperties(NotificationMode? notificationMode = null, MessageScope? messageScope = null, IEnumerable<string> includedEvents = null, IEnumerable<NotificationEndpoint> notificationEndpoints = null, ProvisioningState? provisioningState = null)
        {
            includedEvents ??= new List<string>();
            notificationEndpoints ??= new List<NotificationEndpoint>();

            return new NotificationRegistrationProperties(notificationMode, messageScope, includedEvents?.ToList(), notificationEndpoints?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of NotificationEndpoint. </summary>
        /// <param name="notificationDestination"></param>
        /// <param name="locations"></param>
        /// <returns> A new <see cref="Models.NotificationEndpoint"/> instance for mocking. </returns>
        public static NotificationEndpoint NotificationEndpoint(string notificationDestination = null, IEnumerable<string> locations = null)
        {
            locations ??= new List<string>();

            return new NotificationEndpoint(notificationDestination, locations?.ToList());
        }

        /// <summary> Initializes a new instance of OperationsDefinition. </summary>
        /// <param name="name"> Name of the operation. </param>
        /// <param name="isDataAction"> Indicates whether the operation applies to data-plane. </param>
        /// <param name="origin"></param>
        /// <param name="display"> Display information of the operation. </param>
        /// <param name="actionType"></param>
        /// <param name="properties"> Anything. </param>
        /// <returns> A new <see cref="Models.OperationsDefinition"/> instance for mocking. </returns>
        public static OperationsDefinition OperationsDefinition(string name = null, bool? isDataAction = null, OperationsDefinitionOrigin? origin = null, OperationsDefinitionDisplay display = null, OperationsDefinitionActionType? actionType = null, BinaryData properties = null)
        {
            return new OperationsDefinition(name, isDataAction, origin, display, actionType, properties);
        }

        /// <summary> Initializes a new instance of SkuResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.SkuResourceData"/> instance for mocking. </returns>
        public static SkuResourceData SkuResourceData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, SkuResourceProperties properties = null)
        {
            return new SkuResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of SkuResourceProperties. </summary>
        /// <param name="skuSettings"></param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <returns> A new <see cref="Models.SkuResourceProperties"/> instance for mocking. </returns>
        public static SkuResourceProperties SkuResourceProperties(IEnumerable<SkuSetting> skuSettings = null, ProvisioningState? provisioningState = null)
        {
            skuSettings ??= new List<SkuSetting>();

            return new SkuResourceProperties(skuSettings?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of ResourceTypeSkuInfo. </summary>
        /// <param name="skuSettings"></param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <returns> A new <see cref="Models.ResourceTypeSkuInfo"/> instance for mocking. </returns>
        public static ResourceTypeSkuInfo ResourceTypeSkuInfo(IEnumerable<SkuSetting> skuSettings = null, ProvisioningState? provisioningState = null)
        {
            skuSettings ??= new List<SkuSetting>();

            return new ResourceTypeSkuInfo(skuSettings?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of SkuSetting. </summary>
        /// <param name="name"></param>
        /// <param name="tier"></param>
        /// <param name="size"></param>
        /// <param name="family"></param>
        /// <param name="kind"></param>
        /// <param name="locations"></param>
        /// <param name="locationInfo"></param>
        /// <param name="requiredQuotaIds"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="capacity"></param>
        /// <param name="costs"></param>
        /// <param name="capabilities"></param>
        /// <returns> A new <see cref="Models.SkuSetting"/> instance for mocking. </returns>
        public static SkuSetting SkuSetting(string name = null, string tier = null, string size = null, string family = null, string kind = null, IEnumerable<string> locations = null, IEnumerable<SkuLocationInfo> locationInfo = null, IEnumerable<string> requiredQuotaIds = null, IEnumerable<string> requiredFeatures = null, SkuSettingCapacity capacity = null, IEnumerable<SkuCost> costs = null, IEnumerable<SkuCapability> capabilities = null)
        {
            locations ??= new List<string>();
            locationInfo ??= new List<SkuLocationInfo>();
            requiredQuotaIds ??= new List<string>();
            requiredFeatures ??= new List<string>();
            costs ??= new List<SkuCost>();
            capabilities ??= new List<SkuCapability>();

            return new SkuSetting(name, tier, size, family, kind, locations?.ToList(), locationInfo?.ToList(), requiredQuotaIds?.ToList(), requiredFeatures?.ToList(), capacity, costs?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of SkuLocationInfo. </summary>
        /// <param name="location"></param>
        /// <param name="zones"></param>
        /// <param name="zoneDetails"></param>
        /// <param name="extendedLocations"></param>
        /// <param name="infoType"></param>
        /// <returns> A new <see cref="Models.SkuLocationInfo"/> instance for mocking. </returns>
        public static SkuLocationInfo SkuLocationInfo(AzureLocation location = default, IEnumerable<string> zones = null, IEnumerable<SkuZoneDetail> zoneDetails = null, IEnumerable<string> extendedLocations = null, SkuLocationInfoType? infoType = null)
        {
            zones ??= new List<string>();
            zoneDetails ??= new List<SkuZoneDetail>();
            extendedLocations ??= new List<string>();

            return new SkuLocationInfo(location, zones?.ToList(), zoneDetails?.ToList(), extendedLocations?.ToList(), infoType);
        }

        /// <summary> Initializes a new instance of SkuZoneDetail. </summary>
        /// <param name="name"></param>
        /// <param name="capabilities"></param>
        /// <returns> A new <see cref="Models.SkuZoneDetail"/> instance for mocking. </returns>
        public static SkuZoneDetail SkuZoneDetail(IEnumerable<string> name = null, IEnumerable<SkuCapability> capabilities = null)
        {
            name ??= new List<string>();
            capabilities ??= new List<SkuCapability>();

            return new SkuZoneDetail(name?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of SkuSettingCapacity. </summary>
        /// <param name="minimum"></param>
        /// <param name="maximum"></param>
        /// <param name="default"></param>
        /// <param name="scaleType"></param>
        /// <returns> A new <see cref="Models.SkuSettingCapacity"/> instance for mocking. </returns>
        public static SkuSettingCapacity SkuSettingCapacity(int minimum = default, int? maximum = null, int? @default = null, SkuScaleType? scaleType = null)
        {
            return new SkuSettingCapacity(minimum, maximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of SkuCapacity. </summary>
        /// <param name="minimum"></param>
        /// <param name="maximum"></param>
        /// <param name="default"></param>
        /// <param name="scaleType"></param>
        /// <returns> A new <see cref="Models.SkuCapacity"/> instance for mocking. </returns>
        public static SkuCapacity SkuCapacity(int minimum = default, int? maximum = null, int? @default = null, SkuScaleType? scaleType = null)
        {
            return new SkuCapacity(minimum, maximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of SkuCost. </summary>
        /// <param name="meterId"></param>
        /// <param name="quantity"></param>
        /// <param name="extendedUnit"></param>
        /// <returns> A new <see cref="Models.SkuCost"/> instance for mocking. </returns>
        public static SkuCost SkuCost(string meterId = null, int? quantity = null, string extendedUnit = null)
        {
            return new SkuCost(meterId, quantity, extendedUnit);
        }

        /// <summary> Initializes a new instance of ResourceManagementAction. </summary>
        /// <param name="resources"> resource management action content. </param>
        /// <returns> A new <see cref="Models.ResourceManagementAction"/> instance for mocking. </returns>
        public static ResourceManagementAction ResourceManagementAction(IEnumerable<ResourceManagementEntity> resources = null)
        {
            resources ??= new List<ResourceManagementEntity>();

            return new ResourceManagementAction(resources?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceManagementEntity. </summary>
        /// <param name="resourceId"> The resource id. </param>
        /// <param name="homeTenantId"> The home tenant id. </param>
        /// <param name="location"> The location. </param>
        /// <param name="status"> The operation status. </param>
        /// <returns> A new <see cref="Models.ResourceManagementEntity"/> instance for mocking. </returns>
        public static ResourceManagementEntity ResourceManagementEntity(string resourceId = null, string homeTenantId = null, AzureLocation? location = null, string status = null)
        {
            return new ResourceManagementEntity(resourceId, homeTenantId, location, status);
        }
    }
}
