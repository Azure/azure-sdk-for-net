// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class ResourceProviderAuthorization : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ApplicationId))
            {
                writer.WritePropertyName("applicationId"u8);
                writer.WriteStringValue(ApplicationId);
            }
            if (Core.Optional.IsDefined(RoleDefinitionId))
            {
                writer.WritePropertyName("roleDefinitionId"u8);
                writer.WriteStringValue(RoleDefinitionId);
            }
            if (Core.Optional.IsDefined(ManagedByRoleDefinitionId))
            {
                writer.WritePropertyName("managedByRoleDefinitionId"u8);
                writer.WriteStringValue(ManagedByRoleDefinitionId);
            }
            writer.WriteEndObject();
        }

        internal static ResourceProviderAuthorization DeserializeResourceProviderAuthorization(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> applicationId = default;
            Core.Optional<string> roleDefinitionId = default;
            Core.Optional<string> managedByRoleDefinitionId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("applicationId"u8))
                {
                    applicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleDefinitionId"u8))
                {
                    roleDefinitionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedByRoleDefinitionId"u8))
                {
                    managedByRoleDefinitionId = property.Value.GetString();
                    continue;
                }
            }
            return new ResourceProviderAuthorization(applicationId.Value, roleDefinitionId.Value, managedByRoleDefinitionId.Value);
        }
    }
}
