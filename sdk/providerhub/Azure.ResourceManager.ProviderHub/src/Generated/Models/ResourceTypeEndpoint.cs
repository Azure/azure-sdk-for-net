// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary>
    /// The ResourceTypeEndpoint.
    /// Serialized Name: ResourceTypeEndpoint
    /// </summary>
    public partial class ResourceTypeEndpoint
    {
        /// <summary> Initializes a new instance of ResourceTypeEndpoint. </summary>
        public ResourceTypeEndpoint()
        {
            ApiVersions = new ChangeTrackingList<string>();
            Locations = new ChangeTrackingList<AzureLocation>();
            RequiredFeatures = new ChangeTrackingList<string>();
            Extensions = new ChangeTrackingList<ResourceTypeExtension>();
        }

        /// <summary> Initializes a new instance of ResourceTypeEndpoint. </summary>
        /// <param name="isEnabled"> Serialized Name: ResourceTypeEndpoint.enabled. </param>
        /// <param name="apiVersions"> Serialized Name: ResourceTypeEndpoint.apiVersions. </param>
        /// <param name="locations"> Serialized Name: ResourceTypeEndpoint.locations. </param>
        /// <param name="requiredFeatures"> Serialized Name: ResourceTypeEndpoint.requiredFeatures. </param>
        /// <param name="featuresRule"> Serialized Name: ResourceTypeEndpoint.featuresRule. </param>
        /// <param name="extensions"> Serialized Name: ResourceTypeEndpoint.extensions. </param>
        /// <param name="timeout"> Serialized Name: ResourceTypeEndpoint.timeout. </param>
        internal ResourceTypeEndpoint(bool? isEnabled, IList<string> apiVersions, IList<AzureLocation> locations, IList<string> requiredFeatures, FeaturesRule featuresRule, IList<ResourceTypeExtension> extensions, TimeSpan? timeout)
        {
            IsEnabled = isEnabled;
            ApiVersions = apiVersions;
            Locations = locations;
            RequiredFeatures = requiredFeatures;
            FeaturesRule = featuresRule;
            Extensions = extensions;
            Timeout = timeout;
        }

        /// <summary> Serialized Name: ResourceTypeEndpoint.enabled. </summary>
        public bool? IsEnabled { get; set; }
        /// <summary> Serialized Name: ResourceTypeEndpoint.apiVersions. </summary>
        public IList<string> ApiVersions { get; }
        /// <summary> Serialized Name: ResourceTypeEndpoint.locations. </summary>
        public IList<AzureLocation> Locations { get; }
        /// <summary> Serialized Name: ResourceTypeEndpoint.requiredFeatures. </summary>
        public IList<string> RequiredFeatures { get; }
        /// <summary> Serialized Name: ResourceTypeEndpoint.featuresRule. </summary>
        internal FeaturesRule FeaturesRule { get; set; }
        /// <summary> Serialized Name: FeaturesRule.requiredFeaturesPolicy. </summary>
        public FeaturesPolicy? RequiredFeaturesPolicy
        {
            get => FeaturesRule is null ? default(FeaturesPolicy?) : FeaturesRule.RequiredFeaturesPolicy;
            set
            {
                FeaturesRule = value.HasValue ? new FeaturesRule(value.Value) : null;
            }
        }

        /// <summary> Serialized Name: ResourceTypeEndpoint.extensions. </summary>
        public IList<ResourceTypeExtension> Extensions { get; }
        /// <summary> Serialized Name: ResourceTypeEndpoint.timeout. </summary>
        public TimeSpan? Timeout { get; set; }
    }
}
