// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class ResourceTypeRegistrationProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(RoutingType))
            {
                writer.WritePropertyName("routingType"u8);
                writer.WriteStringValue(RoutingType.Value.ToString());
            }
            if (Core.Optional.IsDefined(Regionality))
            {
                writer.WritePropertyName("regionality"u8);
                writer.WriteStringValue(Regionality.Value.ToString());
            }
            if (Core.Optional.IsCollectionDefined(Endpoints))
            {
                writer.WritePropertyName("endpoints"u8);
                writer.WriteStartArray();
                foreach (var item in Endpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(ExtensionOptions))
            {
                writer.WritePropertyName("extensionOptions"u8);
                writer.WriteObjectValue(ExtensionOptions);
            }
            if (Core.Optional.IsDefined(MarketplaceType))
            {
                writer.WritePropertyName("marketplaceType"u8);
                writer.WriteStringValue(MarketplaceType.Value.ToSerialString());
            }
            if (Core.Optional.IsCollectionDefined(SwaggerSpecifications))
            {
                writer.WritePropertyName("swaggerSpecifications"u8);
                writer.WriteStartArray();
                foreach (var item in SwaggerSpecifications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(AllowedUnauthorizedActions))
            {
                writer.WritePropertyName("allowedUnauthorizedActions"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedUnauthorizedActions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(AuthorizationActionMappings))
            {
                writer.WritePropertyName("authorizationActionMappings"u8);
                writer.WriteStartArray();
                foreach (var item in AuthorizationActionMappings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(LinkedAccessChecks))
            {
                writer.WritePropertyName("linkedAccessChecks"u8);
                writer.WriteStartArray();
                foreach (var item in LinkedAccessChecks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(DefaultApiVersion))
            {
                writer.WritePropertyName("defaultApiVersion"u8);
                writer.WriteStringValue(DefaultApiVersion);
            }
            if (Core.Optional.IsCollectionDefined(LoggingRules))
            {
                writer.WritePropertyName("loggingRules"u8);
                writer.WriteStartArray();
                foreach (var item in LoggingRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ThrottlingRules))
            {
                writer.WritePropertyName("throttlingRules"u8);
                writer.WriteStartArray();
                foreach (var item in ThrottlingRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(RequiredFeatures))
            {
                writer.WritePropertyName("requiredFeatures"u8);
                writer.WriteStartArray();
                foreach (var item in RequiredFeatures)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(FeaturesRule))
            {
                writer.WritePropertyName("featuresRule"u8);
                writer.WriteObjectValue(FeaturesRule);
            }
            if (Core.Optional.IsDefined(IsAsyncOperationEnabled))
            {
                writer.WritePropertyName("enableAsyncOperation"u8);
                writer.WriteBooleanValue(IsAsyncOperationEnabled.Value);
            }
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(IsThirdPartyS2SEnabled))
            {
                writer.WritePropertyName("enableThirdPartyS2S"u8);
                writer.WriteBooleanValue(IsThirdPartyS2SEnabled.Value);
            }
            if (Core.Optional.IsDefined(SubscriptionLifecycleNotificationSpecifications))
            {
                writer.WritePropertyName("subscriptionLifecycleNotificationSpecifications"u8);
                writer.WriteObjectValue(SubscriptionLifecycleNotificationSpecifications);
            }
            if (Core.Optional.IsDefined(IsPureProxy))
            {
                writer.WritePropertyName("isPureProxy"u8);
                writer.WriteBooleanValue(IsPureProxy.Value);
            }
            if (Core.Optional.IsDefined(IdentityManagement))
            {
                writer.WritePropertyName("identityManagement"u8);
                writer.WriteObjectValue(IdentityManagement);
            }
            if (Core.Optional.IsDefined(CheckNameAvailabilitySpecifications))
            {
                writer.WritePropertyName("checkNameAvailabilitySpecifications"u8);
                writer.WriteObjectValue(CheckNameAvailabilitySpecifications);
            }
            if (Core.Optional.IsCollectionDefined(DisallowedActionVerbs))
            {
                writer.WritePropertyName("disallowedActionVerbs"u8);
                writer.WriteStartArray();
                foreach (var item in DisallowedActionVerbs)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ServiceTreeInfos))
            {
                writer.WritePropertyName("serviceTreeInfos"u8);
                writer.WriteStartArray();
                foreach (var item in ServiceTreeInfos)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(RequestHeaderOptions))
            {
                writer.WritePropertyName("requestHeaderOptions"u8);
                writer.WriteObjectValue(RequestHeaderOptions);
            }
            if (Core.Optional.IsCollectionDefined(SubscriptionStateRules))
            {
                writer.WritePropertyName("subscriptionStateRules"u8);
                writer.WriteStartArray();
                foreach (var item in SubscriptionStateRules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(TemplateDeploymentOptions))
            {
                writer.WritePropertyName("templateDeploymentOptions"u8);
                writer.WriteObjectValue(TemplateDeploymentOptions);
            }
            if (Core.Optional.IsCollectionDefined(ExtendedLocations))
            {
                writer.WritePropertyName("extendedLocations"u8);
                writer.WriteStartArray();
                foreach (var item in ExtendedLocations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(ResourceMovePolicy))
            {
                writer.WritePropertyName("resourceMovePolicy"u8);
                writer.WriteObjectValue(ResourceMovePolicy);
            }
            if (Core.Optional.IsDefined(ResourceDeletionPolicy))
            {
                writer.WritePropertyName("resourceDeletionPolicy"u8);
                writer.WriteStringValue(ResourceDeletionPolicy.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ResourceTypeRegistrationProperties DeserializeResourceTypeRegistrationProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceRoutingType> routingType = default;
            Core.Optional<ResourceTypeRegistrationRegionality> regionality = default;
            Core.Optional<IList<ResourceTypeEndpoint>> endpoints = default;
            Core.Optional<ResourceTypeExtensionOptions> extensionOptions = default;
            Core.Optional<MarketplaceType> marketplaceType = default;
            Core.Optional<IList<SwaggerSpecification>> swaggerSpecifications = default;
            Core.Optional<IList<string>> allowedUnauthorizedActions = default;
            Core.Optional<IList<AuthorizationActionMapping>> authorizationActionMappings = default;
            Core.Optional<IList<LinkedAccessCheck>> linkedAccessChecks = default;
            Core.Optional<string> defaultApiVersion = default;
            Core.Optional<IList<LoggingRule>> loggingRules = default;
            Core.Optional<IList<ThrottlingRule>> throttlingRules = default;
            Core.Optional<IList<string>> requiredFeatures = default;
            Core.Optional<FeaturesRule> featuresRule = default;
            Core.Optional<bool> enableAsyncOperation = default;
            Core.Optional<ProviderHubProvisioningState> provisioningState = default;
            Core.Optional<bool> enableThirdPartyS2S = default;
            Core.Optional<SubscriptionLifecycleNotificationSpecifications> subscriptionLifecycleNotificationSpecifications = default;
            Core.Optional<bool> isPureProxy = default;
            Core.Optional<IdentityManagementProperties> identityManagement = default;
            Core.Optional<CheckNameAvailabilitySpecifications> checkNameAvailabilitySpecifications = default;
            Core.Optional<IList<string>> disallowedActionVerbs = default;
            Core.Optional<IList<ServiceTreeInfo>> serviceTreeInfos = default;
            Core.Optional<RequestHeaderOptions> requestHeaderOptions = default;
            Core.Optional<IList<ProviderSubscriptionStateRule>> subscriptionStateRules = default;
            Core.Optional<TemplateDeploymentOptions> templateDeploymentOptions = default;
            Core.Optional<IList<ProviderHubExtendedLocationOptions>> extendedLocations = default;
            Core.Optional<ResourceMovePolicy> resourceMovePolicy = default;
            Core.Optional<ResourceDeletionPolicy> resourceDeletionPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("routingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    routingType = new ResourceRoutingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("regionality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    regionality = new ResourceTypeRegistrationRegionality(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceTypeEndpoint> array = new List<ResourceTypeEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceTypeEndpoint.DeserializeResourceTypeEndpoint(item));
                    }
                    endpoints = array;
                    continue;
                }
                if (property.NameEquals("extensionOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extensionOptions = ResourceTypeExtensionOptions.DeserializeResourceTypeExtensionOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("marketplaceType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    marketplaceType = property.Value.GetString().ToMarketplaceType();
                    continue;
                }
                if (property.NameEquals("swaggerSpecifications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SwaggerSpecification> array = new List<SwaggerSpecification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SwaggerSpecification.DeserializeSwaggerSpecification(item));
                    }
                    swaggerSpecifications = array;
                    continue;
                }
                if (property.NameEquals("allowedUnauthorizedActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedUnauthorizedActions = array;
                    continue;
                }
                if (property.NameEquals("authorizationActionMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AuthorizationActionMapping> array = new List<AuthorizationActionMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AuthorizationActionMapping.DeserializeAuthorizationActionMapping(item));
                    }
                    authorizationActionMappings = array;
                    continue;
                }
                if (property.NameEquals("linkedAccessChecks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LinkedAccessCheck> array = new List<LinkedAccessCheck>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LinkedAccessCheck.DeserializeLinkedAccessCheck(item));
                    }
                    linkedAccessChecks = array;
                    continue;
                }
                if (property.NameEquals("defaultApiVersion"u8))
                {
                    defaultApiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loggingRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LoggingRule> array = new List<LoggingRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LoggingRule.DeserializeLoggingRule(item));
                    }
                    loggingRules = array;
                    continue;
                }
                if (property.NameEquals("throttlingRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ThrottlingRule> array = new List<ThrottlingRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ThrottlingRule.DeserializeThrottlingRule(item));
                    }
                    throttlingRules = array;
                    continue;
                }
                if (property.NameEquals("requiredFeatures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    requiredFeatures = array;
                    continue;
                }
                if (property.NameEquals("featuresRule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    featuresRule = FeaturesRule.DeserializeFeaturesRule(property.Value);
                    continue;
                }
                if (property.NameEquals("enableAsyncOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAsyncOperation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProviderHubProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableThirdPartyS2S"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableThirdPartyS2S = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("subscriptionLifecycleNotificationSpecifications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subscriptionLifecycleNotificationSpecifications = SubscriptionLifecycleNotificationSpecifications.DeserializeSubscriptionLifecycleNotificationSpecifications(property.Value);
                    continue;
                }
                if (property.NameEquals("isPureProxy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPureProxy = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("identityManagement"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identityManagement = IdentityManagementProperties.DeserializeIdentityManagementProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("checkNameAvailabilitySpecifications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    checkNameAvailabilitySpecifications = CheckNameAvailabilitySpecifications.DeserializeCheckNameAvailabilitySpecifications(property.Value);
                    continue;
                }
                if (property.NameEquals("disallowedActionVerbs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    disallowedActionVerbs = array;
                    continue;
                }
                if (property.NameEquals("serviceTreeInfos"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ServiceTreeInfo> array = new List<ServiceTreeInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServiceTreeInfo.DeserializeServiceTreeInfo(item));
                    }
                    serviceTreeInfos = array;
                    continue;
                }
                if (property.NameEquals("requestHeaderOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requestHeaderOptions = RequestHeaderOptions.DeserializeRequestHeaderOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("subscriptionStateRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ProviderSubscriptionStateRule> array = new List<ProviderSubscriptionStateRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ProviderSubscriptionStateRule.DeserializeProviderSubscriptionStateRule(item));
                    }
                    subscriptionStateRules = array;
                    continue;
                }
                if (property.NameEquals("templateDeploymentOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    templateDeploymentOptions = TemplateDeploymentOptions.DeserializeTemplateDeploymentOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("extendedLocations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ProviderHubExtendedLocationOptions> array = new List<ProviderHubExtendedLocationOptions>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ProviderHubExtendedLocationOptions.DeserializeProviderHubExtendedLocationOptions(item));
                    }
                    extendedLocations = array;
                    continue;
                }
                if (property.NameEquals("resourceMovePolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceMovePolicy = ResourceMovePolicy.DeserializeResourceMovePolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("resourceDeletionPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceDeletionPolicy = new ResourceDeletionPolicy(property.Value.GetString());
                    continue;
                }
            }
            return new ResourceTypeRegistrationProperties(Core.Optional.ToNullable(routingType), Core.Optional.ToNullable(regionality), Core.Optional.ToList(endpoints), extensionOptions.Value, Core.Optional.ToNullable(marketplaceType), Core.Optional.ToList(swaggerSpecifications), Core.Optional.ToList(allowedUnauthorizedActions), Core.Optional.ToList(authorizationActionMappings), Core.Optional.ToList(linkedAccessChecks), defaultApiVersion.Value, Core.Optional.ToList(loggingRules), Core.Optional.ToList(throttlingRules), Core.Optional.ToList(requiredFeatures), featuresRule.Value, Core.Optional.ToNullable(enableAsyncOperation), Core.Optional.ToNullable(provisioningState), Core.Optional.ToNullable(enableThirdPartyS2S), subscriptionLifecycleNotificationSpecifications.Value, Core.Optional.ToNullable(isPureProxy), identityManagement.Value, checkNameAvailabilitySpecifications.Value, Core.Optional.ToList(disallowedActionVerbs), Core.Optional.ToList(serviceTreeInfos), requestHeaderOptions.Value, Core.Optional.ToList(subscriptionStateRules), templateDeploymentOptions.Value, Core.Optional.ToList(extendedLocations), resourceMovePolicy.Value, Core.Optional.ToNullable(resourceDeletionPolicy));
        }
    }
}
