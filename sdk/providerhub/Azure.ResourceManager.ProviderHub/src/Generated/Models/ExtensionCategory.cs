// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The ExtensionCategory. </summary>
    public readonly partial struct ExtensionCategory : IEquatable<ExtensionCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExtensionCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExtensionCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string ResourceCreationValidateValue = "ResourceCreationValidate";
        private const string ResourceCreationBeginValue = "ResourceCreationBegin";
        private const string ResourceCreationCompletedValue = "ResourceCreationCompleted";
        private const string ResourceReadValidateValue = "ResourceReadValidate";
        private const string ResourceReadBeginValue = "ResourceReadBegin";
        private const string ResourcePatchValidateValue = "ResourcePatchValidate";
        private const string ResourcePatchCompletedValue = "ResourcePatchCompleted";
        private const string ResourceDeletionValidateValue = "ResourceDeletionValidate";
        private const string ResourceDeletionBeginValue = "ResourceDeletionBegin";
        private const string ResourceDeletionCompletedValue = "ResourceDeletionCompleted";
        private const string ResourcePostActionValue = "ResourcePostAction";
        private const string SubscriptionLifecycleNotificationValue = "SubscriptionLifecycleNotification";
        private const string ResourcePatchBeginValue = "ResourcePatchBegin";
        private const string ResourceMoveBeginValue = "ResourceMoveBegin";
        private const string ResourceMoveCompletedValue = "ResourceMoveCompleted";

        /// <summary> NotSpecified. </summary>
        public static ExtensionCategory NotSpecified { get; } = new ExtensionCategory(NotSpecifiedValue);
        /// <summary> ResourceCreationValidate. </summary>
        public static ExtensionCategory ResourceCreationValidate { get; } = new ExtensionCategory(ResourceCreationValidateValue);
        /// <summary> ResourceCreationBegin. </summary>
        public static ExtensionCategory ResourceCreationBegin { get; } = new ExtensionCategory(ResourceCreationBeginValue);
        /// <summary> ResourceCreationCompleted. </summary>
        public static ExtensionCategory ResourceCreationCompleted { get; } = new ExtensionCategory(ResourceCreationCompletedValue);
        /// <summary> ResourceReadValidate. </summary>
        public static ExtensionCategory ResourceReadValidate { get; } = new ExtensionCategory(ResourceReadValidateValue);
        /// <summary> ResourceReadBegin. </summary>
        public static ExtensionCategory ResourceReadBegin { get; } = new ExtensionCategory(ResourceReadBeginValue);
        /// <summary> ResourcePatchValidate. </summary>
        public static ExtensionCategory ResourcePatchValidate { get; } = new ExtensionCategory(ResourcePatchValidateValue);
        /// <summary> ResourcePatchCompleted. </summary>
        public static ExtensionCategory ResourcePatchCompleted { get; } = new ExtensionCategory(ResourcePatchCompletedValue);
        /// <summary> ResourceDeletionValidate. </summary>
        public static ExtensionCategory ResourceDeletionValidate { get; } = new ExtensionCategory(ResourceDeletionValidateValue);
        /// <summary> ResourceDeletionBegin. </summary>
        public static ExtensionCategory ResourceDeletionBegin { get; } = new ExtensionCategory(ResourceDeletionBeginValue);
        /// <summary> ResourceDeletionCompleted. </summary>
        public static ExtensionCategory ResourceDeletionCompleted { get; } = new ExtensionCategory(ResourceDeletionCompletedValue);
        /// <summary> ResourcePostAction. </summary>
        public static ExtensionCategory ResourcePostAction { get; } = new ExtensionCategory(ResourcePostActionValue);
        /// <summary> SubscriptionLifecycleNotification. </summary>
        public static ExtensionCategory SubscriptionLifecycleNotification { get; } = new ExtensionCategory(SubscriptionLifecycleNotificationValue);
        /// <summary> ResourcePatchBegin. </summary>
        public static ExtensionCategory ResourcePatchBegin { get; } = new ExtensionCategory(ResourcePatchBeginValue);
        /// <summary> ResourceMoveBegin. </summary>
        public static ExtensionCategory ResourceMoveBegin { get; } = new ExtensionCategory(ResourceMoveBeginValue);
        /// <summary> ResourceMoveCompleted. </summary>
        public static ExtensionCategory ResourceMoveCompleted { get; } = new ExtensionCategory(ResourceMoveCompletedValue);
        /// <summary> Determines if two <see cref="ExtensionCategory"/> values are the same. </summary>
        public static bool operator ==(ExtensionCategory left, ExtensionCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExtensionCategory"/> values are not the same. </summary>
        public static bool operator !=(ExtensionCategory left, ExtensionCategory right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExtensionCategory"/>. </summary>
        public static implicit operator ExtensionCategory(string value) => new ExtensionCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExtensionCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExtensionCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
