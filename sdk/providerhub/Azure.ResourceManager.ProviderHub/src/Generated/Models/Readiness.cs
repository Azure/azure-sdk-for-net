// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary>
    /// The Readiness.
    /// Serialized Name: Readiness
    /// </summary>
    public readonly partial struct Readiness : IEquatable<Readiness>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Readiness"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Readiness(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ClosingDownValue = "ClosingDown";
        private const string DeprecatedValue = "Deprecated";
        private const string GAValue = "GA";
        private const string InDevelopmentValue = "InDevelopment";
        private const string InternalOnlyValue = "InternalOnly";
        private const string PrivatePreviewValue = "PrivatePreview";
        private const string PublicPreviewValue = "PublicPreview";
        private const string RemovedFromARMValue = "RemovedFromARM";
        private const string RetiredValue = "Retired";

        /// <summary>
        /// ClosingDown
        /// Serialized Name: Readiness.ClosingDown
        /// </summary>
        public static Readiness ClosingDown { get; } = new Readiness(ClosingDownValue);
        /// <summary>
        /// Deprecated
        /// Serialized Name: Readiness.Deprecated
        /// </summary>
        public static Readiness Deprecated { get; } = new Readiness(DeprecatedValue);
        /// <summary>
        /// GA
        /// Serialized Name: Readiness.GA
        /// </summary>
        public static Readiness GA { get; } = new Readiness(GAValue);
        /// <summary>
        /// InDevelopment
        /// Serialized Name: Readiness.InDevelopment
        /// </summary>
        public static Readiness InDevelopment { get; } = new Readiness(InDevelopmentValue);
        /// <summary>
        /// InternalOnly
        /// Serialized Name: Readiness.InternalOnly
        /// </summary>
        public static Readiness InternalOnly { get; } = new Readiness(InternalOnlyValue);
        /// <summary>
        /// PrivatePreview
        /// Serialized Name: Readiness.PrivatePreview
        /// </summary>
        public static Readiness PrivatePreview { get; } = new Readiness(PrivatePreviewValue);
        /// <summary>
        /// PublicPreview
        /// Serialized Name: Readiness.PublicPreview
        /// </summary>
        public static Readiness PublicPreview { get; } = new Readiness(PublicPreviewValue);
        /// <summary>
        /// RemovedFromARM
        /// Serialized Name: Readiness.RemovedFromARM
        /// </summary>
        public static Readiness RemovedFromARM { get; } = new Readiness(RemovedFromARMValue);
        /// <summary>
        /// Retired
        /// Serialized Name: Readiness.Retired
        /// </summary>
        public static Readiness Retired { get; } = new Readiness(RetiredValue);
        /// <summary> Determines if two <see cref="Readiness"/> values are the same. </summary>
        public static bool operator ==(Readiness left, Readiness right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Readiness"/> values are not the same. </summary>
        public static bool operator !=(Readiness left, Readiness right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Readiness"/>. </summary>
        public static implicit operator Readiness(string value) => new Readiness(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Readiness other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Readiness other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
