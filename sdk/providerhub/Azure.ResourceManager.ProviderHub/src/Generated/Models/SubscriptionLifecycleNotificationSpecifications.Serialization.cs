// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class SubscriptionLifecycleNotificationSpecifications : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(SubscriptionStateOverrideActions))
            {
                writer.WritePropertyName("subscriptionStateOverrideActions"u8);
                writer.WriteStartArray();
                foreach (var item in SubscriptionStateOverrideActions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SoftDeleteTTL))
            {
                writer.WritePropertyName("softDeleteTTL"u8);
                writer.WriteStringValue(SoftDeleteTTL.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static SubscriptionLifecycleNotificationSpecifications DeserializeSubscriptionLifecycleNotificationSpecifications(JsonElement element)
        {
            Optional<IList<SubscriptionStateOverrideAction>> subscriptionStateOverrideActions = default;
            Optional<TimeSpan> softDeleteTTL = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subscriptionStateOverrideActions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SubscriptionStateOverrideAction> array = new List<SubscriptionStateOverrideAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubscriptionStateOverrideAction.DeserializeSubscriptionStateOverrideAction(item));
                    }
                    subscriptionStateOverrideActions = array;
                    continue;
                }
                if (property.NameEquals("softDeleteTTL"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    softDeleteTTL = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new SubscriptionLifecycleNotificationSpecifications(Optional.ToList(subscriptionStateOverrideActions), Optional.ToNullable(softDeleteTTL));
        }
    }
}
