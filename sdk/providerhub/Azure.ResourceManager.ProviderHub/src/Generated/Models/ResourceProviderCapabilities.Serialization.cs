// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class ResourceProviderCapabilities : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("quotaId");
            writer.WriteStringValue(QuotaId);
            writer.WritePropertyName("effect");
            writer.WriteStringValue(Effect.ToString());
            if (Optional.IsCollectionDefined(RequiredFeatures))
            {
                writer.WritePropertyName("requiredFeatures");
                writer.WriteStartArray();
                foreach (var item in RequiredFeatures)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ResourceProviderCapabilities DeserializeResourceProviderCapabilities(JsonElement element)
        {
            string quotaId = default;
            ResourceProviderCapabilitiesEffect effect = default;
            Optional<IList<string>> requiredFeatures = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("quotaId"))
                {
                    quotaId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("effect"))
                {
                    effect = new ResourceProviderCapabilitiesEffect(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requiredFeatures"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    requiredFeatures = array;
                    continue;
                }
            }
            return new ResourceProviderCapabilities(quotaId, effect, Optional.ToList(requiredFeatures));
        }
    }
}
