// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The ResourceTypeRegistrationPropertiesMarketplaceType. </summary>
    public readonly partial struct ResourceTypeRegistrationPropertiesMarketplaceType : IEquatable<ResourceTypeRegistrationPropertiesMarketplaceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceTypeRegistrationPropertiesMarketplaceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceTypeRegistrationPropertiesMarketplaceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string AddOnValue = "AddOn";
        private const string BypassValue = "Bypass";
        private const string StoreValue = "Store";

        /// <summary> NotSpecified. </summary>
        public static ResourceTypeRegistrationPropertiesMarketplaceType NotSpecified { get; } = new ResourceTypeRegistrationPropertiesMarketplaceType(NotSpecifiedValue);
        /// <summary> AddOn. </summary>
        public static ResourceTypeRegistrationPropertiesMarketplaceType AddOn { get; } = new ResourceTypeRegistrationPropertiesMarketplaceType(AddOnValue);
        /// <summary> Bypass. </summary>
        public static ResourceTypeRegistrationPropertiesMarketplaceType Bypass { get; } = new ResourceTypeRegistrationPropertiesMarketplaceType(BypassValue);
        /// <summary> Store. </summary>
        public static ResourceTypeRegistrationPropertiesMarketplaceType Store { get; } = new ResourceTypeRegistrationPropertiesMarketplaceType(StoreValue);
        /// <summary> Determines if two <see cref="ResourceTypeRegistrationPropertiesMarketplaceType"/> values are the same. </summary>
        public static bool operator ==(ResourceTypeRegistrationPropertiesMarketplaceType left, ResourceTypeRegistrationPropertiesMarketplaceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceTypeRegistrationPropertiesMarketplaceType"/> values are not the same. </summary>
        public static bool operator !=(ResourceTypeRegistrationPropertiesMarketplaceType left, ResourceTypeRegistrationPropertiesMarketplaceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceTypeRegistrationPropertiesMarketplaceType"/>. </summary>
        public static implicit operator ResourceTypeRegistrationPropertiesMarketplaceType(string value) => new ResourceTypeRegistrationPropertiesMarketplaceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceTypeRegistrationPropertiesMarketplaceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceTypeRegistrationPropertiesMarketplaceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
