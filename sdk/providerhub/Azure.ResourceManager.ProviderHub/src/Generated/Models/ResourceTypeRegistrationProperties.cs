// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary>
    /// The ResourceTypeRegistrationProperties.
    /// Serialized Name: ResourceTypeRegistrationProperties
    /// </summary>
    public partial class ResourceTypeRegistrationProperties
    {
        /// <summary> Initializes a new instance of ResourceTypeRegistrationProperties. </summary>
        public ResourceTypeRegistrationProperties()
        {
            Endpoints = new ChangeTrackingList<ResourceTypeEndpoint>();
            SwaggerSpecifications = new ChangeTrackingList<SwaggerSpecification>();
            AllowedUnauthorizedActions = new ChangeTrackingList<string>();
            AuthorizationActionMappings = new ChangeTrackingList<AuthorizationActionMapping>();
            LinkedAccessChecks = new ChangeTrackingList<LinkedAccessCheck>();
            LoggingRules = new ChangeTrackingList<LoggingRule>();
            ThrottlingRules = new ChangeTrackingList<ThrottlingRule>();
            RequiredFeatures = new ChangeTrackingList<string>();
            DisallowedActionVerbs = new ChangeTrackingList<string>();
            ServiceTreeInfos = new ChangeTrackingList<ServiceTreeInfo>();
            SubscriptionStateRules = new ChangeTrackingList<SubscriptionStateRule>();
            ExtendedLocations = new ChangeTrackingList<ExtendedLocationOptions>();
            ResourceConcurrencyControlOptions = new ChangeTrackingDictionary<string, ResourceConcurrencyControlOption>();
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationProperties. </summary>
        /// <param name="routingType"> Serialized Name: ResourceTypeRegistrationProperties.routingType. </param>
        /// <param name="regionality"> Serialized Name: ResourceTypeRegistrationProperties.regionality. </param>
        /// <param name="endpoints"> Serialized Name: ResourceTypeRegistrationProperties.endpoints. </param>
        /// <param name="extensionOptions"> Serialized Name: ResourceTypeRegistrationProperties.extensionOptions. </param>
        /// <param name="marketplaceType"> Serialized Name: ResourceTypeRegistrationProperties.marketplaceType. </param>
        /// <param name="swaggerSpecifications"> Serialized Name: ResourceTypeRegistrationProperties.swaggerSpecifications. </param>
        /// <param name="allowedUnauthorizedActions"> Serialized Name: ResourceTypeRegistrationProperties.allowedUnauthorizedActions. </param>
        /// <param name="authorizationActionMappings"> Serialized Name: ResourceTypeRegistrationProperties.authorizationActionMappings. </param>
        /// <param name="linkedAccessChecks"> Serialized Name: ResourceTypeRegistrationProperties.linkedAccessChecks. </param>
        /// <param name="defaultApiVersion"> Serialized Name: ResourceTypeRegistrationProperties.defaultApiVersion. </param>
        /// <param name="loggingRules"> Serialized Name: ResourceTypeRegistrationProperties.loggingRules. </param>
        /// <param name="throttlingRules"> Serialized Name: ResourceTypeRegistrationProperties.throttlingRules. </param>
        /// <param name="requiredFeatures"> Serialized Name: ResourceTypeRegistrationProperties.requiredFeatures. </param>
        /// <param name="featuresRule"> Serialized Name: ResourceTypeRegistrationProperties.featuresRule. </param>
        /// <param name="enableAsyncOperation"> Serialized Name: ResourceTypeRegistrationProperties.enableAsyncOperation. </param>
        /// <param name="provisioningState">
        /// The provisioned state of the resource.
        /// Serialized Name: ResourceTypeRegistrationProperties.provisioningState
        /// </param>
        /// <param name="enableThirdPartyS2S"> Serialized Name: ResourceTypeRegistrationProperties.enableThirdPartyS2S. </param>
        /// <param name="subscriptionLifecycleNotificationSpecifications"> Serialized Name: ResourceTypeRegistrationProperties.subscriptionLifecycleNotificationSpecifications. </param>
        /// <param name="isPureProxy"> Serialized Name: ResourceTypeRegistrationProperties.isPureProxy. </param>
        /// <param name="identityManagement"> Serialized Name: ResourceTypeRegistrationProperties.identityManagement. </param>
        /// <param name="checkNameAvailabilitySpecifications"> Serialized Name: ResourceTypeRegistrationProperties.checkNameAvailabilitySpecifications. </param>
        /// <param name="disallowedActionVerbs"> Serialized Name: ResourceTypeRegistrationProperties.disallowedActionVerbs. </param>
        /// <param name="serviceTreeInfos"> Serialized Name: ResourceTypeRegistrationProperties.serviceTreeInfos. </param>
        /// <param name="requestHeaderOptions"> Serialized Name: ResourceTypeRegistrationProperties.requestHeaderOptions. </param>
        /// <param name="subscriptionStateRules"> Serialized Name: ResourceTypeRegistrationProperties.subscriptionStateRules. </param>
        /// <param name="templateDeploymentOptions"> Serialized Name: ResourceTypeRegistrationProperties.templateDeploymentOptions. </param>
        /// <param name="extendedLocations"> Serialized Name: ResourceTypeRegistrationProperties.extendedLocations. </param>
        /// <param name="resourceMovePolicy"> Serialized Name: ResourceTypeRegistrationProperties.resourceMovePolicy. </param>
        /// <param name="resourceDeletionPolicy"> Serialized Name: ResourceTypeRegistrationProperties.resourceDeletionPolicy. </param>
        /// <param name="resourceConcurrencyControlOptions">
        /// Dictionary of &lt;ResourceConcurrencyControlOption&gt;
        /// Serialized Name: ResourceTypeRegistrationProperties.resourceConcurrencyControlOptions
        /// </param>
        /// <param name="resourceGraphConfiguration"> Serialized Name: ResourceTypeRegistrationProperties.resourceGraphConfiguration. </param>
        /// <param name="management"> Serialized Name: ResourceTypeRegistrationProperties.management. </param>
        /// <param name="openApiConfiguration"> Serialized Name: ResourceTypeRegistrationProperties.openApiConfiguration. </param>
        internal ResourceTypeRegistrationProperties(RoutingType? routingType, Regionality? regionality, IList<ResourceTypeEndpoint> endpoints, ResourceTypeRegistrationPropertiesExtensionOptions extensionOptions, ResourceTypeRegistrationPropertiesMarketplaceType? marketplaceType, IList<SwaggerSpecification> swaggerSpecifications, IList<string> allowedUnauthorizedActions, IList<AuthorizationActionMapping> authorizationActionMappings, IList<LinkedAccessCheck> linkedAccessChecks, string defaultApiVersion, IList<LoggingRule> loggingRules, IList<ThrottlingRule> throttlingRules, IList<string> requiredFeatures, ResourceTypeRegistrationPropertiesFeaturesRule featuresRule, bool? enableAsyncOperation, ProvisioningState? provisioningState, bool? enableThirdPartyS2S, ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications, bool? isPureProxy, ResourceTypeRegistrationPropertiesIdentityManagement identityManagement, ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications, IList<string> disallowedActionVerbs, IList<ServiceTreeInfo> serviceTreeInfos, ResourceTypeRegistrationPropertiesRequestHeaderOptions requestHeaderOptions, IList<SubscriptionStateRule> subscriptionStateRules, ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions, IList<ExtendedLocationOptions> extendedLocations, ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy, ResourceDeletionPolicy? resourceDeletionPolicy, IDictionary<string, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions, ResourceTypeRegistrationPropertiesResourceGraphConfiguration resourceGraphConfiguration, ResourceTypeRegistrationPropertiesManagement management, OpenApiConfiguration openApiConfiguration)
        {
            RoutingType = routingType;
            Regionality = regionality;
            Endpoints = endpoints;
            ExtensionOptions = extensionOptions;
            MarketplaceType = marketplaceType;
            SwaggerSpecifications = swaggerSpecifications;
            AllowedUnauthorizedActions = allowedUnauthorizedActions;
            AuthorizationActionMappings = authorizationActionMappings;
            LinkedAccessChecks = linkedAccessChecks;
            DefaultApiVersion = defaultApiVersion;
            LoggingRules = loggingRules;
            ThrottlingRules = throttlingRules;
            RequiredFeatures = requiredFeatures;
            FeaturesRule = featuresRule;
            EnableAsyncOperation = enableAsyncOperation;
            ProvisioningState = provisioningState;
            EnableThirdPartyS2S = enableThirdPartyS2S;
            SubscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
            IsPureProxy = isPureProxy;
            IdentityManagement = identityManagement;
            CheckNameAvailabilitySpecifications = checkNameAvailabilitySpecifications;
            DisallowedActionVerbs = disallowedActionVerbs;
            ServiceTreeInfos = serviceTreeInfos;
            RequestHeaderOptions = requestHeaderOptions;
            SubscriptionStateRules = subscriptionStateRules;
            TemplateDeploymentOptions = templateDeploymentOptions;
            ExtendedLocations = extendedLocations;
            ResourceMovePolicy = resourceMovePolicy;
            ResourceDeletionPolicy = resourceDeletionPolicy;
            ResourceConcurrencyControlOptions = resourceConcurrencyControlOptions;
            ResourceGraphConfiguration = resourceGraphConfiguration;
            Management = management;
            OpenApiConfiguration = openApiConfiguration;
        }

        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.routingType. </summary>
        public RoutingType? RoutingType { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.regionality. </summary>
        public Regionality? Regionality { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.endpoints. </summary>
        public IList<ResourceTypeEndpoint> Endpoints { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.extensionOptions. </summary>
        internal ResourceTypeRegistrationPropertiesExtensionOptions ExtensionOptions { get; set; }
        /// <summary> Serialized Name: ResourceTypeExtensionOptions.resourceCreationBegin. </summary>
        public ResourceTypeExtensionOptionsResourceCreationBegin ExtensionOptionsResourceCreationBegin
        {
            get => ExtensionOptions is null ? default : ExtensionOptions.ResourceCreationBegin;
            set
            {
                if (ExtensionOptions is null)
                    ExtensionOptions = new ResourceTypeRegistrationPropertiesExtensionOptions();
                ExtensionOptions.ResourceCreationBegin = value;
            }
        }

        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.marketplaceType. </summary>
        public ResourceTypeRegistrationPropertiesMarketplaceType? MarketplaceType { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.swaggerSpecifications. </summary>
        public IList<SwaggerSpecification> SwaggerSpecifications { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.allowedUnauthorizedActions. </summary>
        public IList<string> AllowedUnauthorizedActions { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.authorizationActionMappings. </summary>
        public IList<AuthorizationActionMapping> AuthorizationActionMappings { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.linkedAccessChecks. </summary>
        public IList<LinkedAccessCheck> LinkedAccessChecks { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.defaultApiVersion. </summary>
        public string DefaultApiVersion { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.loggingRules. </summary>
        public IList<LoggingRule> LoggingRules { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.throttlingRules. </summary>
        public IList<ThrottlingRule> ThrottlingRules { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.requiredFeatures. </summary>
        public IList<string> RequiredFeatures { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.featuresRule. </summary>
        internal ResourceTypeRegistrationPropertiesFeaturesRule FeaturesRule { get; set; }
        /// <summary> Serialized Name: FeaturesRule.requiredFeaturesPolicy. </summary>
        public FeaturesPolicy? RequiredFeaturesPolicy
        {
            get => FeaturesRule is null ? default(FeaturesPolicy?) : FeaturesRule.RequiredFeaturesPolicy;
            set
            {
                FeaturesRule = value.HasValue ? new ResourceTypeRegistrationPropertiesFeaturesRule(value.Value) : null;
            }
        }

        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.enableAsyncOperation. </summary>
        public bool? EnableAsyncOperation { get; set; }
        /// <summary>
        /// The provisioned state of the resource.
        /// Serialized Name: ResourceTypeRegistrationProperties.provisioningState
        /// </summary>
        public ProvisioningState? ProvisioningState { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.enableThirdPartyS2S. </summary>
        public bool? EnableThirdPartyS2S { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.subscriptionLifecycleNotificationSpecifications. </summary>
        public ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications SubscriptionLifecycleNotificationSpecifications { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.isPureProxy. </summary>
        public bool? IsPureProxy { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.identityManagement. </summary>
        public ResourceTypeRegistrationPropertiesIdentityManagement IdentityManagement { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.checkNameAvailabilitySpecifications. </summary>
        public ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications CheckNameAvailabilitySpecifications { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.disallowedActionVerbs. </summary>
        public IList<string> DisallowedActionVerbs { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.serviceTreeInfos. </summary>
        public IList<ServiceTreeInfo> ServiceTreeInfos { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.requestHeaderOptions. </summary>
        internal ResourceTypeRegistrationPropertiesRequestHeaderOptions RequestHeaderOptions { get; set; }
        /// <summary> Serialized Name: RequestHeaderOptions.optInHeaders. </summary>
        public OptInHeaderType? OptInHeaders
        {
            get => RequestHeaderOptions is null ? default : RequestHeaderOptions.OptInHeaders;
            set
            {
                if (RequestHeaderOptions is null)
                    RequestHeaderOptions = new ResourceTypeRegistrationPropertiesRequestHeaderOptions();
                RequestHeaderOptions.OptInHeaders = value;
            }
        }

        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.subscriptionStateRules. </summary>
        public IList<SubscriptionStateRule> SubscriptionStateRules { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.templateDeploymentOptions. </summary>
        public ResourceTypeRegistrationPropertiesTemplateDeploymentOptions TemplateDeploymentOptions { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.extendedLocations. </summary>
        public IList<ExtendedLocationOptions> ExtendedLocations { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.resourceMovePolicy. </summary>
        public ResourceTypeRegistrationPropertiesResourceMovePolicy ResourceMovePolicy { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.resourceDeletionPolicy. </summary>
        public ResourceDeletionPolicy? ResourceDeletionPolicy { get; set; }
        /// <summary>
        /// Dictionary of &lt;ResourceConcurrencyControlOption&gt;
        /// Serialized Name: ResourceTypeRegistrationProperties.resourceConcurrencyControlOptions
        /// </summary>
        public IDictionary<string, ResourceConcurrencyControlOption> ResourceConcurrencyControlOptions { get; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.resourceGraphConfiguration. </summary>
        public ResourceTypeRegistrationPropertiesResourceGraphConfiguration ResourceGraphConfiguration { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.management. </summary>
        public ResourceTypeRegistrationPropertiesManagement Management { get; set; }
        /// <summary> Serialized Name: ResourceTypeRegistrationProperties.openApiConfiguration. </summary>
        internal OpenApiConfiguration OpenApiConfiguration { get; set; }
        /// <summary>
        /// Indicates whether a non compliance response is allowed for a LIST call
        /// Serialized Name: OpenApiValidation.allowNoncompliantCollectionResponse
        /// </summary>
        public bool? AllowNoncompliantCollectionResponse
        {
            get => OpenApiConfiguration is null ? default : OpenApiConfiguration.AllowNoncompliantCollectionResponse;
            set
            {
                if (OpenApiConfiguration is null)
                    OpenApiConfiguration = new OpenApiConfiguration();
                OpenApiConfiguration.AllowNoncompliantCollectionResponse = value;
            }
        }
    }
}
