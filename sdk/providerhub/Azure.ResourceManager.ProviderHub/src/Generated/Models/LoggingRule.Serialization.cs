// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProviderHub.Models
{
    public partial class LoggingRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("action"u8);
            writer.WriteStringValue(Action);
            writer.WritePropertyName("direction"u8);
            writer.WriteStringValue(Direction.ToString());
            writer.WritePropertyName("detailLevel"u8);
            writer.WriteStringValue(DetailLevel.ToString());
            if (Optional.IsDefined(HiddenPropertyPaths))
            {
                writer.WritePropertyName("hiddenPropertyPaths"u8);
                writer.WriteObjectValue(HiddenPropertyPaths);
            }
            writer.WriteEndObject();
        }

        internal static LoggingRule DeserializeLoggingRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string action = default;
            LoggingDirection direction = default;
            LoggingDetail detailLevel = default;
            Optional<LoggingHiddenPropertyPaths> hiddenPropertyPaths = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("action"u8))
                {
                    action = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("direction"u8))
                {
                    direction = new LoggingDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("detailLevel"u8))
                {
                    detailLevel = new LoggingDetail(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hiddenPropertyPaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hiddenPropertyPaths = LoggingHiddenPropertyPaths.DeserializeLoggingHiddenPropertyPaths(property.Value);
                    continue;
                }
            }
            return new LoggingRule(action, direction, detailLevel, hiddenPropertyPaths.Value);
        }
    }
}
