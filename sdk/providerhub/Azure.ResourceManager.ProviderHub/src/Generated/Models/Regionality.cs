// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> The Regionality. </summary>
    public readonly partial struct Regionality : IEquatable<Regionality>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Regionality"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Regionality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string GlobalValue = "Global";
        private const string RegionalValue = "Regional";

        /// <summary> NotSpecified. </summary>
        public static Regionality NotSpecified { get; } = new Regionality(NotSpecifiedValue);
        /// <summary> Global. </summary>
        public static Regionality Global { get; } = new Regionality(GlobalValue);
        /// <summary> Regional. </summary>
        public static Regionality Regional { get; } = new Regionality(RegionalValue);
        /// <summary> Determines if two <see cref="Regionality"/> values are the same. </summary>
        public static bool operator ==(Regionality left, Regionality right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Regionality"/> values are not the same. </summary>
        public static bool operator !=(Regionality left, Regionality right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Regionality"/>. </summary>
        public static implicit operator Regionality(string value) => new Regionality(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Regionality other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Regionality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
