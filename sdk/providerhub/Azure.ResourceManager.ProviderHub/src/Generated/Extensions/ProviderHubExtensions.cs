// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ProviderHub
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ProviderHub. </summary>
    public static partial class ProviderHubExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ProviderRegistrationResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ProviderRegistrationResources and their operations over a ProviderRegistrationResource. </returns>
        public static ProviderRegistrationCollection GetProviderRegistrations(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetProviderRegistrations();
        }

        /// <summary>
        /// Gets the provider registration details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
        /// Operation Id: ProviderRegistrations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="providerNamespace"> The name of the resource provider hosted within ProviderHub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="providerNamespace"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="providerNamespace"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ProviderRegistrationResource>> GetProviderRegistrationAsync(this SubscriptionResource subscriptionResource, string providerNamespace, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetProviderRegistrations().GetAsync(providerNamespace, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the provider registration details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
        /// Operation Id: ProviderRegistrations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="providerNamespace"> The name of the resource provider hosted within ProviderHub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="providerNamespace"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="providerNamespace"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ProviderRegistrationResource> GetProviderRegistration(this SubscriptionResource subscriptionResource, string providerNamespace, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetProviderRegistrations().Get(providerNamespace, cancellationToken);
        }

        #region CustomRolloutResource
        /// <summary>
        /// Gets an object representing a <see cref="CustomRolloutResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomRolloutResource.CreateResourceIdentifier" /> to create a <see cref="CustomRolloutResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomRolloutResource" /> object. </returns>
        public static CustomRolloutResource GetCustomRolloutResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomRolloutResource.ValidateResourceId(id);
                return new CustomRolloutResource(client, id);
            }
            );
        }
        #endregion

        #region DefaultRolloutResource
        /// <summary>
        /// Gets an object representing a <see cref="DefaultRolloutResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DefaultRolloutResource.CreateResourceIdentifier" /> to create a <see cref="DefaultRolloutResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DefaultRolloutResource" /> object. </returns>
        public static DefaultRolloutResource GetDefaultRolloutResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DefaultRolloutResource.ValidateResourceId(id);
                return new DefaultRolloutResource(client, id);
            }
            );
        }
        #endregion

        #region NotificationRegistrationResource
        /// <summary>
        /// Gets an object representing a <see cref="NotificationRegistrationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NotificationRegistrationResource.CreateResourceIdentifier" /> to create a <see cref="NotificationRegistrationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="NotificationRegistrationResource" /> object. </returns>
        public static NotificationRegistrationResource GetNotificationRegistrationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                NotificationRegistrationResource.ValidateResourceId(id);
                return new NotificationRegistrationResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderRegistrationResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderRegistrationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderRegistrationResource.CreateResourceIdentifier" /> to create a <see cref="ProviderRegistrationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderRegistrationResource" /> object. </returns>
        public static ProviderRegistrationResource GetProviderRegistrationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderRegistrationResource.ValidateResourceId(id);
                return new ProviderRegistrationResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceTypeRegistrationResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceTypeRegistrationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceTypeRegistrationResource.CreateResourceIdentifier" /> to create a <see cref="ResourceTypeRegistrationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceTypeRegistrationResource" /> object. </returns>
        public static ResourceTypeRegistrationResource GetResourceTypeRegistrationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceTypeRegistrationResource.ValidateResourceId(id);
                return new ResourceTypeRegistrationResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderRegistrationResourcetypeRegistrationSkuResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderRegistrationResourcetypeRegistrationSkuResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderRegistrationResourcetypeRegistrationSkuResource.CreateResourceIdentifier" /> to create a <see cref="ProviderRegistrationResourcetypeRegistrationSkuResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderRegistrationResourcetypeRegistrationSkuResource" /> object. </returns>
        public static ProviderRegistrationResourcetypeRegistrationSkuResource GetProviderRegistrationResourcetypeRegistrationSkuResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderRegistrationResourcetypeRegistrationSkuResource.ValidateResourceId(id);
                return new ProviderRegistrationResourcetypeRegistrationSkuResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.CreateResourceIdentifier" /> to create a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> object. </returns>
        public static ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource GetProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.ValidateResourceId(id);
                return new ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.CreateResourceIdentifier" /> to create a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> object. </returns>
        public static ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource GetProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.ValidateResourceId(id);
                return new ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.CreateResourceIdentifier" /> to create a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource" /> object. </returns>
        public static ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource GetProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource.ValidateResourceId(id);
                return new ProviderRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationResourcetypeRegistrationSkuResource(client, id);
            }
            );
        }
        #endregion
    }
}
