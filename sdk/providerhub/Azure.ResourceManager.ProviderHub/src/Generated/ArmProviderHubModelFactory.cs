// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ProviderHub;

namespace Azure.ResourceManager.ProviderHub.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmProviderHubModelFactory
    {
        /// <summary> Initializes a new instance of CustomRolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the rollout. </param>
        /// <returns> A new <see cref="ProviderHub.CustomRolloutData"/> instance for mocking. </returns>
        public static CustomRolloutData CustomRolloutData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, CustomRolloutProperties properties = null)
        {
            return new CustomRolloutData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CustomRolloutSpecificationProviderRegistration. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.CustomRolloutSpecificationProviderRegistration"/> instance for mocking. </returns>
        public static CustomRolloutSpecificationProviderRegistration CustomRolloutSpecificationProviderRegistration(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new CustomRolloutSpecificationProviderRegistration(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ProviderRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.ProviderRegistrationData"/> instance for mocking. </returns>
        public static ProviderRegistrationData ProviderRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new ProviderRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ResourceTypeRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.ResourceTypeRegistrationData"/> instance for mocking. </returns>
        public static ResourceTypeRegistrationData ResourceTypeRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ResourceTypeRegistrationProperties properties = null)
        {
            return new ResourceTypeRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of TypedErrorInfo. </summary>
        /// <param name="typedErrorInfoType"></param>
        /// <param name="info"> Any object. </param>
        /// <returns> A new <see cref="Models.TypedErrorInfo"/> instance for mocking. </returns>
        public static TypedErrorInfo TypedErrorInfo(string typedErrorInfoType = null, BinaryData info = null)
        {
            return new TypedErrorInfo(typedErrorInfoType, info);
        }

        /// <summary> Initializes a new instance of DefaultRolloutData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of the rollout. </param>
        /// <returns> A new <see cref="ProviderHub.DefaultRolloutData"/> instance for mocking. </returns>
        public static DefaultRolloutData DefaultRolloutData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, DefaultRolloutProperties properties = null)
        {
            return new DefaultRolloutData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DefaultRolloutSpecificationProviderRegistration. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.DefaultRolloutSpecificationProviderRegistration"/> instance for mocking. </returns>
        public static DefaultRolloutSpecificationProviderRegistration DefaultRolloutSpecificationProviderRegistration(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, ProviderRegistrationProperties properties = null)
        {
            return new DefaultRolloutSpecificationProviderRegistration(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifest. </summary>
        /// <param name="providerAuthenticationAllowedAudiences"></param>
        /// <param name="providerAuthorizations"></param>
        /// <param name="namespace"></param>
        /// <param name="providerVersion"></param>
        /// <param name="providerType"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="resourceTypes"></param>
        /// <param name="management"></param>
        /// <param name="capabilities"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="globalNotificationEndpoints"></param>
        /// <param name="reRegisterSubscriptionMetadata"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifest"/> instance for mocking. </returns>
        public static ResourceProviderManifest ResourceProviderManifest(IEnumerable<string> providerAuthenticationAllowedAudiences = null, IEnumerable<ResourceProviderAuthorization> providerAuthorizations = null, string @namespace = null, string providerVersion = null, ResourceProviderType? providerType = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, OptInHeaderType? optInHeaders = null, IEnumerable<ResourceType> resourceTypes = null, ResourceProviderManifestManagement management = null, IEnumerable<ResourceProviderCapabilities> capabilities = null, BinaryData metadata = null, IEnumerable<ResourceProviderEndpoint> globalNotificationEndpoints = null, ResourceProviderManifestReRegisterSubscriptionMetadata reRegisterSubscriptionMetadata = null)
        {
            providerAuthenticationAllowedAudiences ??= new List<string>();
            providerAuthorizations ??= new List<ResourceProviderAuthorization>();
            requiredFeatures ??= new List<string>();
            resourceTypes ??= new List<ResourceType>();
            capabilities ??= new List<ResourceProviderCapabilities>();
            globalNotificationEndpoints ??= new List<ResourceProviderEndpoint>();

            return new ResourceProviderManifest(providerAuthenticationAllowedAudiences != null ? new ResourceProviderManifestProviderAuthentication(providerAuthenticationAllowedAudiences?.ToList()) : null, providerAuthorizations?.ToList(), @namespace, providerVersion, providerType, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderManifestFeaturesRule(requiredFeaturesPolicy.Value) : null, optInHeaders != null ? new ResourceProviderManifestRequestHeaderOptions(optInHeaders) : null, resourceTypes?.ToList(), management, capabilities?.ToList(), metadata, globalNotificationEndpoints?.ToList(), reRegisterSubscriptionMetadata);
        }

        /// <summary> Initializes a new instance of ResourceType. </summary>
        /// <param name="name"></param>
        /// <param name="routingType"></param>
        /// <param name="resourceValidation"></param>
        /// <param name="allowedUnauthorizedActions"></param>
        /// <param name="authorizationActionMappings"></param>
        /// <param name="linkedAccessChecks"></param>
        /// <param name="defaultApiVersion"></param>
        /// <param name="loggingRules"></param>
        /// <param name="throttlingRules"></param>
        /// <param name="endpoints"></param>
        /// <param name="marketplaceType"></param>
        /// <param name="managementType"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="subscriptionStateRules"></param>
        /// <param name="serviceTreeInfos"></param>
        /// <param name="optInHeaders"></param>
        /// <param name="skuLink"></param>
        /// <param name="disallowedActionVerbs"></param>
        /// <param name="templateDeploymentPolicy"></param>
        /// <param name="extendedLocations"></param>
        /// <param name="linkedOperationRules"></param>
        /// <param name="resourceDeletionPolicy"></param>
        /// <returns> A new <see cref="Models.ResourceType"/> instance for mocking. </returns>
        public static ResourceType ResourceType(string name = null, RoutingType? routingType = null, ResourceValidation? resourceValidation = null, IEnumerable<string> allowedUnauthorizedActions = null, IEnumerable<AuthorizationActionMapping> authorizationActionMappings = null, IEnumerable<LinkedAccessCheck> linkedAccessChecks = null, string defaultApiVersion = null, IEnumerable<LoggingRule> loggingRules = null, IEnumerable<ThrottlingRule> throttlingRules = null, IEnumerable<ResourceProviderEndpoint> endpoints = null, ResourceTypeMarketplaceType? marketplaceType = null, IdentityManagementType? managementType = null, BinaryData metadata = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, IEnumerable<SubscriptionStateRule> subscriptionStateRules = null, IEnumerable<ServiceTreeInfo> serviceTreeInfos = null, OptInHeaderType? optInHeaders = null, string skuLink = null, IEnumerable<string> disallowedActionVerbs = null, ResourceTypeTemplateDeploymentPolicy templateDeploymentPolicy = null, IEnumerable<ExtendedLocationOptions> extendedLocations = null, IEnumerable<LinkedOperationRule> linkedOperationRules = null, ManifestResourceDeletionPolicy? resourceDeletionPolicy = null)
        {
            allowedUnauthorizedActions ??= new List<string>();
            authorizationActionMappings ??= new List<AuthorizationActionMapping>();
            linkedAccessChecks ??= new List<LinkedAccessCheck>();
            loggingRules ??= new List<LoggingRule>();
            throttlingRules ??= new List<ThrottlingRule>();
            endpoints ??= new List<ResourceProviderEndpoint>();
            requiredFeatures ??= new List<string>();
            subscriptionStateRules ??= new List<SubscriptionStateRule>();
            serviceTreeInfos ??= new List<ServiceTreeInfo>();
            disallowedActionVerbs ??= new List<string>();
            extendedLocations ??= new List<ExtendedLocationOptions>();
            linkedOperationRules ??= new List<LinkedOperationRule>();

            return new ResourceType(name, routingType, resourceValidation, allowedUnauthorizedActions?.ToList(), authorizationActionMappings?.ToList(), linkedAccessChecks?.ToList(), defaultApiVersion, loggingRules?.ToList(), throttlingRules?.ToList(), endpoints?.ToList(), marketplaceType, managementType != null ? new ResourceTypeIdentityManagement(managementType) : null, metadata, requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceTypeFeaturesRule(requiredFeaturesPolicy.Value) : null, subscriptionStateRules?.ToList(), serviceTreeInfos?.ToList(), optInHeaders != null ? new ResourceTypeRequestHeaderOptions(optInHeaders) : null, skuLink, disallowedActionVerbs?.ToList(), templateDeploymentPolicy, extendedLocations?.ToList(), linkedOperationRules?.ToList(), resourceDeletionPolicy);
        }

        /// <summary> Initializes a new instance of ResourceProviderEndpoint. </summary>
        /// <param name="enabled"></param>
        /// <param name="apiVersions"></param>
        /// <param name="endpointUri"></param>
        /// <param name="locations"></param>
        /// <param name="requiredFeatures"></param>
        /// <param name="requiredFeaturesPolicy"></param>
        /// <param name="timeout"></param>
        /// <param name="endpointType"></param>
        /// <returns> A new <see cref="Models.ResourceProviderEndpoint"/> instance for mocking. </returns>
        public static ResourceProviderEndpoint ResourceProviderEndpoint(bool? enabled = null, IEnumerable<string> apiVersions = null, Uri endpointUri = null, IEnumerable<string> locations = null, IEnumerable<string> requiredFeatures = null, FeaturesPolicy? requiredFeaturesPolicy = null, TimeSpan? timeout = null, EndpointType? endpointType = null)
        {
            apiVersions ??= new List<string>();
            locations ??= new List<string>();
            requiredFeatures ??= new List<string>();

            return new ResourceProviderEndpoint(enabled, apiVersions?.ToList(), endpointUri, locations?.ToList(), requiredFeatures?.ToList(), requiredFeaturesPolicy.HasValue ? new ResourceProviderEndpointFeaturesRule(requiredFeaturesPolicy.Value) : null, timeout, endpointType);
        }

        /// <summary> Initializes a new instance of ResourceTypeTemplateDeploymentPolicy. </summary>
        /// <param name="capabilities"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.ResourceTypeTemplateDeploymentPolicy"/> instance for mocking. </returns>
        public static ResourceTypeTemplateDeploymentPolicy ResourceTypeTemplateDeploymentPolicy(TemplateDeploymentCapability capabilities = default, TemplateDeploymentPreflightOption preflightOptions = default)
        {
            return new ResourceTypeTemplateDeploymentPolicy(capabilities, preflightOptions);
        }

        /// <summary> Initializes a new instance of TemplateDeploymentPolicy. </summary>
        /// <param name="capabilities"></param>
        /// <param name="preflightOptions"></param>
        /// <returns> A new <see cref="Models.TemplateDeploymentPolicy"/> instance for mocking. </returns>
        public static TemplateDeploymentPolicy TemplateDeploymentPolicy(TemplateDeploymentCapability capabilities = default, TemplateDeploymentPreflightOption preflightOptions = default)
        {
            return new TemplateDeploymentPolicy(capabilities, preflightOptions);
        }

        /// <summary> Initializes a new instance of LinkedOperationRule. </summary>
        /// <param name="linkedOperation"></param>
        /// <param name="linkedAction"></param>
        /// <returns> A new <see cref="Models.LinkedOperationRule"/> instance for mocking. </returns>
        public static LinkedOperationRule LinkedOperationRule(LinkedOperation linkedOperation = default, LinkedAction linkedAction = default)
        {
            return new LinkedOperationRule(linkedOperation, linkedAction);
        }

        /// <summary> Initializes a new instance of ResourceProviderManifestReRegisterSubscriptionMetadata. </summary>
        /// <param name="enabled"></param>
        /// <param name="concurrencyLimit"></param>
        /// <returns> A new <see cref="Models.ResourceProviderManifestReRegisterSubscriptionMetadata"/> instance for mocking. </returns>
        public static ResourceProviderManifestReRegisterSubscriptionMetadata ResourceProviderManifestReRegisterSubscriptionMetadata(bool enabled = default, int? concurrencyLimit = null)
        {
            return new ResourceProviderManifestReRegisterSubscriptionMetadata(enabled, concurrencyLimit);
        }

        /// <summary> Initializes a new instance of ReRegisterSubscriptionMetadata. </summary>
        /// <param name="enabled"></param>
        /// <param name="concurrencyLimit"></param>
        /// <returns> A new <see cref="Models.ReRegisterSubscriptionMetadata"/> instance for mocking. </returns>
        public static ReRegisterSubscriptionMetadata ReRegisterSubscriptionMetadata(bool enabled = default, int? concurrencyLimit = null)
        {
            return new ReRegisterSubscriptionMetadata(enabled, concurrencyLimit);
        }

        /// <summary> Initializes a new instance of CheckinManifestInfo. </summary>
        /// <param name="isCheckedIn"></param>
        /// <param name="statusMessage"></param>
        /// <param name="pullRequest"></param>
        /// <param name="commitId"></param>
        /// <returns> A new <see cref="Models.CheckinManifestInfo"/> instance for mocking. </returns>
        public static CheckinManifestInfo CheckinManifestInfo(bool isCheckedIn = default, string statusMessage = null, string pullRequest = null, string commitId = null)
        {
            return new CheckinManifestInfo(isCheckedIn, statusMessage, pullRequest, commitId);
        }

        /// <summary> Initializes a new instance of NotificationRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.NotificationRegistrationData"/> instance for mocking. </returns>
        public static NotificationRegistrationData NotificationRegistrationData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, NotificationRegistrationProperties properties = null)
        {
            return new NotificationRegistrationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of OperationsDefinition. </summary>
        /// <param name="name"> Name of the operation. </param>
        /// <param name="isDataAction"> Indicates whether the operation applies to data-plane. </param>
        /// <param name="origin"></param>
        /// <param name="display"> Display information of the operation. </param>
        /// <param name="actionType"></param>
        /// <param name="properties"> Anything. </param>
        /// <returns> A new <see cref="Models.OperationsDefinition"/> instance for mocking. </returns>
        public static OperationsDefinition OperationsDefinition(string name = null, bool? isDataAction = null, OperationsDefinitionOrigin? origin = null, OperationsDefinitionDisplay display = null, OperationsDefinitionActionType? actionType = null, BinaryData properties = null)
        {
            return new OperationsDefinition(name, isDataAction, origin, display, actionType, properties);
        }

        /// <summary> Initializes a new instance of SkuResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="ProviderHub.SkuResourceData"/> instance for mocking. </returns>
        public static SkuResourceData SkuResourceData(ResourceIdentifier id = null, string name = null, Core.ResourceType resourceType = default, SystemData systemData = null, SkuResourceProperties properties = null)
        {
            return new SkuResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ResourceManagementEntity. </summary>
        /// <param name="resourceId"> The resource id. </param>
        /// <param name="homeTenantId"> The home tenant id. </param>
        /// <param name="location"> The location. </param>
        /// <param name="status"> The operation status. </param>
        /// <returns> A new <see cref="Models.ResourceManagementEntity"/> instance for mocking. </returns>
        public static ResourceManagementEntity ResourceManagementEntity(string resourceId = null, string homeTenantId = null, AzureLocation? location = null, string status = null)
        {
            return new ResourceManagementEntity(resourceId, homeTenantId, location, status);
        }
    }
}
