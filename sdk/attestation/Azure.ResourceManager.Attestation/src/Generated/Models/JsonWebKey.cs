// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Attestation.Models
{
    /// <summary> The JsonWebKey. </summary>
    public partial class JsonWebKey
    {
        /// <summary> Initializes a new instance of JsonWebKey. </summary>
        /// <param name="kty">
        /// The &quot;kty&quot; (key type) parameter identifies the cryptographic algorithm
        /// family used with the key, such as &quot;RSA&quot; or &quot;EC&quot;. &quot;kty&quot; values should
        /// either be registered in the IANA &quot;JSON Web Key Types&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The &quot;kty&quot; value is a case-sensitive string.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kty"/> is null. </exception>
        public JsonWebKey(string kty)
        {
            Argument.AssertNotNull(kty, nameof(kty));

            Kty = kty;
            X5C = new ChangeTrackingList<string>();
        }

        /// <summary>
        /// The &quot;alg&quot; (algorithm) parameter identifies the algorithm intended for
        /// use with the key.  The values used should either be registered in the
        /// IANA &quot;JSON Web Signature and Encryption Algorithms&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.
        /// </summary>
        public string Alg { get; set; }
        /// <summary> The &quot;crv&quot; (curve) parameter identifies the curve type. </summary>
        public string Crv { get; set; }
        /// <summary> RSA private exponent or ECC private key. </summary>
        public string D { get; set; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Dp { get; set; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Dq { get; set; }
        /// <summary> RSA public exponent, in Base64. </summary>
        public string E { get; set; }
        /// <summary> Symmetric key. </summary>
        public string K { get; set; }
        /// <summary>
        /// The &quot;kid&quot; (key ID) parameter is used to match a specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK Set
        /// during key rollover.  The structure of the &quot;kid&quot; value is
        /// unspecified.  When &quot;kid&quot; values are used within a JWK Set, different
        /// keys within the JWK Set SHOULD use distinct &quot;kid&quot; values.  (One
        /// example in which different keys might use the same &quot;kid&quot; value is if
        /// they have different &quot;kty&quot; (key type) values but are considered to be
        /// equivalent alternatives by the application using them.)  The &quot;kid&quot;
        /// value is a case-sensitive string.
        /// </summary>
        public string Kid { get; set; }
        /// <summary>
        /// The &quot;kty&quot; (key type) parameter identifies the cryptographic algorithm
        /// family used with the key, such as &quot;RSA&quot; or &quot;EC&quot;. &quot;kty&quot; values should
        /// either be registered in the IANA &quot;JSON Web Key Types&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The &quot;kty&quot; value is a case-sensitive string.
        /// </summary>
        public string Kty { get; }
        /// <summary> RSA modulus, in Base64. </summary>
        public string N { get; set; }
        /// <summary> RSA secret prime. </summary>
        public string P { get; set; }
        /// <summary> RSA secret prime, with p &lt; q. </summary>
        public string Q { get; set; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Qi { get; set; }
        /// <summary>
        /// Use (&quot;public key use&quot;) identifies the intended use of
        /// the public key. The &quot;use&quot; parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly &quot;sig&quot; (signature) or &quot;enc&quot; (encryption).
        /// </summary>
        public string Use { get; set; }
        /// <summary> X coordinate for the Elliptic Curve point. </summary>
        public string X { get; set; }
        /// <summary>
        /// The &quot;x5c&quot; (X.509 certificate chain) parameter contains a chain of one
        /// or more PKIX certificates [RFC5280].  The certificate chain is
        /// represented as a JSON array of certificate value strings.  Each
        /// string in the array is a base64-encoded (Section 4 of [RFC4648] --
        /// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
        /// The PKIX certificate containing the key value MUST be the first
        /// certificate.
        /// </summary>
        public IList<string> X5C { get; }
        /// <summary> Y coordinate for the Elliptic Curve point. </summary>
        public string Y { get; set; }
    }
}
