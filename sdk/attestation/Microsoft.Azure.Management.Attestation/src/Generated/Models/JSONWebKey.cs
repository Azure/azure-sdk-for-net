// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Attestation.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class JSONWebKey
    {
        /// <summary>
        /// Initializes a new instance of the JSONWebKey class.
        /// </summary>
        public JSONWebKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JSONWebKey class.
        /// </summary>
        /// <param name="alg">The "alg" (algorithm) parameter identifies the
        /// algorithm intended for
        /// use with the key.  The values used should either be registered in
        /// the
        /// IANA "JSON Web Signature and Encryption Algorithms" registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.</param>
        /// <param name="kid">The "kid" (key ID) parameter is used to match a
        /// specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK
        /// Set
        /// during key rollover.  The structure of the "kid" value is
        /// unspecified.  When "kid" values are used within a JWK Set,
        /// different
        /// keys within the JWK Set SHOULD use distinct "kid" values.  (One
        /// example in which different keys might use the same "kid" value is
        /// if
        /// they have different "kty" (key type) values but are considered to
        /// be
        /// equivalent alternatives by the application using them.)  The "kid"
        /// value is a case-sensitive string.</param>
        /// <param name="kty">The "kty" (key type) parameter identifies the
        /// cryptographic algorithm
        /// family used with the key, such as "RSA" or "EC". "kty" values
        /// should
        /// either be registered in the IANA "JSON Web Key Types" registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The "kty" value is a case-sensitive
        /// string.</param>
        /// <param name="use">Use ("public key use") identifies the intended
        /// use of
        /// the public key. The "use" parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly "sig" (signature) or "enc"
        /// (encryption).</param>
        /// <param name="crv">The "crv" (curve) parameter identifies the curve
        /// type</param>
        /// <param name="d">RSA private exponent or ECC private key</param>
        /// <param name="dp">RSA Private Key Parameter</param>
        /// <param name="dq">RSA Private Key Parameter</param>
        /// <param name="e">RSA public exponent, in Base64</param>
        /// <param name="k">Symmetric key</param>
        /// <param name="n">RSA modulus, in Base64</param>
        /// <param name="p">RSA secret prime</param>
        /// <param name="q">RSA secret prime, with p &lt; q</param>
        /// <param name="qi">RSA Private Key Parameter</param>
        /// <param name="x">X coordinate for the Elliptic Curve point</param>
        /// <param name="x5c">The "x5c" (X.509 certificate chain) parameter
        /// contains a chain of one
        /// or more PKIX certificates [RFC5280].  The certificate chain is
        /// represented as a JSON array of certificate value strings.  Each
        /// string in the array is a base64-encoded (Section 4 of [RFC4648] --
        /// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
        /// The PKIX certificate containing the key value MUST be the first
        /// certificate.</param>
        /// <param name="y">Y coordinate for the Elliptic Curve point</param>
        public JSONWebKey(string alg, string kid, string kty, string use, string crv = default(string), string d = default(string), string dp = default(string), string dq = default(string), string e = default(string), string k = default(string), string n = default(string), string p = default(string), string q = default(string), string qi = default(string), string x = default(string), IList<string> x5c = default(IList<string>), string y = default(string))
        {
            Alg = alg;
            Crv = crv;
            D = d;
            Dp = dp;
            Dq = dq;
            E = e;
            K = k;
            Kid = kid;
            Kty = kty;
            N = n;
            P = p;
            Q = q;
            Qi = qi;
            Use = use;
            X = x;
            X5c = x5c;
            Y = y;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the "alg" (algorithm) parameter identifies the
        /// algorithm intended for
        /// use with the key.  The values used should either be registered in
        /// the
        /// IANA "JSON Web Signature and Encryption Algorithms" registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.
        /// </summary>
        [JsonProperty(PropertyName = "alg")]
        public string Alg { get; set; }

        /// <summary>
        /// Gets or sets the "crv" (curve) parameter identifies the curve type
        /// </summary>
        [JsonProperty(PropertyName = "crv")]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or sets RSA private exponent or ECC private key
        /// </summary>
        [JsonProperty(PropertyName = "d")]
        public string D { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "dp")]
        public string Dp { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "dq")]
        public string Dq { get; set; }

        /// <summary>
        /// Gets or sets RSA public exponent, in Base64
        /// </summary>
        [JsonProperty(PropertyName = "e")]
        public string E { get; set; }

        /// <summary>
        /// Gets or sets symmetric key
        /// </summary>
        [JsonProperty(PropertyName = "k")]
        public string K { get; set; }

        /// <summary>
        /// Gets or sets the "kid" (key ID) parameter is used to match a
        /// specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK
        /// Set
        /// during key rollover.  The structure of the "kid" value is
        /// unspecified.  When "kid" values are used within a JWK Set,
        /// different
        /// keys within the JWK Set SHOULD use distinct "kid" values.  (One
        /// example in which different keys might use the same "kid" value is
        /// if
        /// they have different "kty" (key type) values but are considered to
        /// be
        /// equivalent alternatives by the application using them.)  The "kid"
        /// value is a case-sensitive string.
        /// </summary>
        [JsonProperty(PropertyName = "kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or sets the "kty" (key type) parameter identifies the
        /// cryptographic algorithm
        /// family used with the key, such as "RSA" or "EC". "kty" values
        /// should
        /// either be registered in the IANA "JSON Web Key Types" registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The "kty" value is a case-sensitive string.
        /// </summary>
        [JsonProperty(PropertyName = "kty")]
        public string Kty { get; set; }

        /// <summary>
        /// Gets or sets RSA modulus, in Base64
        /// </summary>
        [JsonProperty(PropertyName = "n")]
        public string N { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime
        /// </summary>
        [JsonProperty(PropertyName = "p")]
        public string P { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime, with p &amp;lt; q
        /// </summary>
        [JsonProperty(PropertyName = "q")]
        public string Q { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "qi")]
        public string Qi { get; set; }

        /// <summary>
        /// Gets or sets use ("public key use") identifies the intended use of
        /// the public key. The "use" parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly "sig" (signature) or "enc"
        /// (encryption).
        /// </summary>
        [JsonProperty(PropertyName = "use")]
        public string Use { get; set; }

        /// <summary>
        /// Gets or sets x coordinate for the Elliptic Curve point
        /// </summary>
        [JsonProperty(PropertyName = "x")]
        public string X { get; set; }

        /// <summary>
        /// Gets or sets the "x5c" (X.509 certificate chain) parameter contains
        /// a chain of one
        /// or more PKIX certificates [RFC5280].  The certificate chain is
        /// represented as a JSON array of certificate value strings.  Each
        /// string in the array is a base64-encoded (Section 4 of [RFC4648] --
        /// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
        /// The PKIX certificate containing the key value MUST be the first
        /// certificate.
        /// </summary>
        [JsonProperty(PropertyName = "x5c")]
        public IList<string> X5c { get; set; }

        /// <summary>
        /// Gets or sets y coordinate for the Elliptic Curve point
        /// </summary>
        [JsonProperty(PropertyName = "y")]
        public string Y { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alg == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alg");
            }
            if (Kid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kid");
            }
            if (Kty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kty");
            }
            if (Use == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Use");
            }
        }
    }
}
