// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Security.Attestation
{
    /// <summary> The result of the operation. </summary>
    public readonly partial struct CertificateModification : IEquatable<CertificateModification>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="CertificateModification"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CertificateModification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IsPresentValue = "IsPresent";
        private const string IsAbsentValue = "IsAbsent";

        /// <summary> After the operation was performed, the certificate is in the set of certificates. </summary>
        public static CertificateModification IsPresent { get; } = new CertificateModification(IsPresentValue);
        /// <summary> After the operation was performed, the certificate is no longer present in the set of certificates. </summary>
        public static CertificateModification IsAbsent { get; } = new CertificateModification(IsAbsentValue);
        /// <summary> Determines if two <see cref="CertificateModification"/> values are the same. </summary>
        public static bool operator ==(CertificateModification left, CertificateModification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CertificateModification"/> values are not the same. </summary>
        public static bool operator !=(CertificateModification left, CertificateModification right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CertificateModification"/>. </summary>
        public static implicit operator CertificateModification(string value) => new CertificateModification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CertificateModification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CertificateModification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
