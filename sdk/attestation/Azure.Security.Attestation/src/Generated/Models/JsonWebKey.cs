// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Security.Attestation.Models
{
    /// <summary> The JsonWebKey. </summary>
    internal partial class JsonWebKey
    {
        /// <summary> Initializes a new instance of JsonWebKey. </summary>
        /// <param name="alg">
        /// The &quot;alg&quot; (algorithm) parameter identifies the algorithm intended for
        /// use with the key.  The values used should either be registered in the
        /// IANA &quot;JSON Web Signature and Encryption Algorithms&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.
        /// </param>
        /// <param name="kid">
        /// The &quot;kid&quot; (key ID) parameter is used to match a specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK Set
        /// during key rollover.  The structure of the &quot;kid&quot; value is
        /// unspecified.  When &quot;kid&quot; values are used within a JWK Set, different
        /// keys within the JWK Set SHOULD use distinct &quot;kid&quot; values.  (One
        /// example in which different keys might use the same &quot;kid&quot; value is if
        /// they have different &quot;kty&quot; (key type) values but are considered to be
        /// equivalent alternatives by the application using them.)  The &quot;kid&quot;
        /// value is a case-sensitive string.
        /// </param>
        /// <param name="kty">
        /// The &quot;kty&quot; (key type) parameter identifies the cryptographic algorithm
        /// family used with the key, such as &quot;RSA&quot; or &quot;EC&quot;. &quot;kty&quot; values should
        /// either be registered in the IANA &quot;JSON Web Key Types&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The &quot;kty&quot; value is a case-sensitive string.
        /// </param>
        /// <param name="use">
        /// Use (&quot;public key use&quot;) identifies the intended use of
        /// the public key. The &quot;use&quot; parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly &quot;sig&quot; (signature) or &quot;enc&quot; (encryption).
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alg"/>, <paramref name="kid"/>, <paramref name="kty"/>, or <paramref name="use"/> is null. </exception>
        internal JsonWebKey(string alg, string kid, string kty, string use)
        {
            if (alg == null)
            {
                throw new ArgumentNullException(nameof(alg));
            }
            if (kid == null)
            {
                throw new ArgumentNullException(nameof(kid));
            }
            if (kty == null)
            {
                throw new ArgumentNullException(nameof(kty));
            }
            if (use == null)
            {
                throw new ArgumentNullException(nameof(use));
            }

            Alg = alg;
            Kid = kid;
            Kty = kty;
            Use = use;
            X5C = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of JsonWebKey. </summary>
        /// <param name="alg">
        /// The &quot;alg&quot; (algorithm) parameter identifies the algorithm intended for
        /// use with the key.  The values used should either be registered in the
        /// IANA &quot;JSON Web Signature and Encryption Algorithms&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.
        /// </param>
        /// <param name="crv"> The &quot;crv&quot; (curve) parameter identifies the curve type. </param>
        /// <param name="d"> RSA private exponent or ECC private key. </param>
        /// <param name="dp"> RSA Private Key Parameter. </param>
        /// <param name="dq"> RSA Private Key Parameter. </param>
        /// <param name="e"> RSA public exponent, in Base64. </param>
        /// <param name="k"> Symmetric key. </param>
        /// <param name="kid">
        /// The &quot;kid&quot; (key ID) parameter is used to match a specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK Set
        /// during key rollover.  The structure of the &quot;kid&quot; value is
        /// unspecified.  When &quot;kid&quot; values are used within a JWK Set, different
        /// keys within the JWK Set SHOULD use distinct &quot;kid&quot; values.  (One
        /// example in which different keys might use the same &quot;kid&quot; value is if
        /// they have different &quot;kty&quot; (key type) values but are considered to be
        /// equivalent alternatives by the application using them.)  The &quot;kid&quot;
        /// value is a case-sensitive string.
        /// </param>
        /// <param name="kty">
        /// The &quot;kty&quot; (key type) parameter identifies the cryptographic algorithm
        /// family used with the key, such as &quot;RSA&quot; or &quot;EC&quot;. &quot;kty&quot; values should
        /// either be registered in the IANA &quot;JSON Web Key Types&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The &quot;kty&quot; value is a case-sensitive string.
        /// </param>
        /// <param name="n"> RSA modulus, in Base64. </param>
        /// <param name="p"> RSA secret prime. </param>
        /// <param name="q"> RSA secret prime, with p &lt; q. </param>
        /// <param name="qi"> RSA Private Key Parameter. </param>
        /// <param name="use">
        /// Use (&quot;public key use&quot;) identifies the intended use of
        /// the public key. The &quot;use&quot; parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly &quot;sig&quot; (signature) or &quot;enc&quot; (encryption).
        /// </param>
        /// <param name="x"> X coordinate for the Elliptic Curve point. </param>
        /// <param name="x5C">
        /// The &quot;x5c&quot; (X.509 certificate chain) parameter contains a chain of one
        /// or more PKIX certificates [RFC5280].  The certificate chain is
        /// represented as a JSON array of certificate value strings.  Each
        /// string in the array is a base64-encoded (Section 4 of [RFC4648] --
        /// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
        /// The PKIX certificate containing the key value MUST be the first
        /// certificate.
        /// </param>
        /// <param name="y"> Y coordinate for the Elliptic Curve point. </param>
        internal JsonWebKey(string alg, string crv, string d, string dp, string dq, string e, string k, string kid, string kty, string n, string p, string q, string qi, string use, string x, IReadOnlyList<string> x5C, string y)
        {
            Alg = alg;
            Crv = crv;
            D = d;
            Dp = dp;
            Dq = dq;
            E = e;
            K = k;
            Kid = kid;
            Kty = kty;
            N = n;
            P = p;
            Q = q;
            Qi = qi;
            Use = use;
            X = x;
            X5C = x5C;
            Y = y;
        }

        /// <summary>
        /// The &quot;alg&quot; (algorithm) parameter identifies the algorithm intended for
        /// use with the key.  The values used should either be registered in the
        /// IANA &quot;JSON Web Signature and Encryption Algorithms&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.
        /// </summary>
        public string Alg { get; }
        /// <summary> The &quot;crv&quot; (curve) parameter identifies the curve type. </summary>
        public string Crv { get; }
        /// <summary> RSA private exponent or ECC private key. </summary>
        public string D { get; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Dp { get; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Dq { get; }
        /// <summary> RSA public exponent, in Base64. </summary>
        public string E { get; }
        /// <summary> Symmetric key. </summary>
        public string K { get; }
        /// <summary>
        /// The &quot;kid&quot; (key ID) parameter is used to match a specific key.  This
        /// is used, for instance, to choose among a set of keys within a JWK Set
        /// during key rollover.  The structure of the &quot;kid&quot; value is
        /// unspecified.  When &quot;kid&quot; values are used within a JWK Set, different
        /// keys within the JWK Set SHOULD use distinct &quot;kid&quot; values.  (One
        /// example in which different keys might use the same &quot;kid&quot; value is if
        /// they have different &quot;kty&quot; (key type) values but are considered to be
        /// equivalent alternatives by the application using them.)  The &quot;kid&quot;
        /// value is a case-sensitive string.
        /// </summary>
        public string Kid { get; }
        /// <summary>
        /// The &quot;kty&quot; (key type) parameter identifies the cryptographic algorithm
        /// family used with the key, such as &quot;RSA&quot; or &quot;EC&quot;. &quot;kty&quot; values should
        /// either be registered in the IANA &quot;JSON Web Key Types&quot; registry
        /// established by [JWA] or be a value that contains a Collision-
        /// Resistant Name.  The &quot;kty&quot; value is a case-sensitive string.
        /// </summary>
        public string Kty { get; }
        /// <summary> RSA modulus, in Base64. </summary>
        public string N { get; }
        /// <summary> RSA secret prime. </summary>
        public string P { get; }
        /// <summary> RSA secret prime, with p &lt; q. </summary>
        public string Q { get; }
        /// <summary> RSA Private Key Parameter. </summary>
        public string Qi { get; }
        /// <summary>
        /// Use (&quot;public key use&quot;) identifies the intended use of
        /// the public key. The &quot;use&quot; parameter is employed to indicate whether
        /// a public key is used for encrypting data or verifying the signature
        /// on data. Values are commonly &quot;sig&quot; (signature) or &quot;enc&quot; (encryption).
        /// </summary>
        public string Use { get; }
        /// <summary> X coordinate for the Elliptic Curve point. </summary>
        public string X { get; }
        /// <summary>
        /// The &quot;x5c&quot; (X.509 certificate chain) parameter contains a chain of one
        /// or more PKIX certificates [RFC5280].  The certificate chain is
        /// represented as a JSON array of certificate value strings.  Each
        /// string in the array is a base64-encoded (Section 4 of [RFC4648] --
        /// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
        /// The PKIX certificate containing the key value MUST be the first
        /// certificate.
        /// </summary>
        public IReadOnlyList<string> X5C { get; }
        /// <summary> Y coordinate for the Elliptic Curve point. </summary>
        public string Y { get; }
    }
}
