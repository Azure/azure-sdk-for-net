// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Security.Attestation
{
    [JsonConverter(typeof(PolicyResultConverter))]
    public partial class PolicyResult
    {
        internal static PolicyResult DeserializePolicyResult(JsonElement element)
        {
            Optional<PolicyModification> xMsPolicyResult = default;
            Optional<string> xMsPolicyTokenHash = default;
            Optional<JsonWebKey> xMsPolicySigner = default;
            Optional<string> xMsPolicy = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("x-ms-policy-result"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    xMsPolicyResult = new PolicyModification(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("x-ms-policy-token-hash"))
                {
                    xMsPolicyTokenHash = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("x-ms-policy-signer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    xMsPolicySigner = JsonWebKey.DeserializeJsonWebKey(property.Value);
                    continue;
                }
                if (property.NameEquals("x-ms-policy"))
                {
                    xMsPolicy = property.Value.GetString();
                    continue;
                }
            }
            return new PolicyResult(xMsPolicyResult, xMsPolicyTokenHash.Value, xMsPolicySigner.Value, xMsPolicy.Value);
        }

        internal partial class PolicyResultConverter : JsonConverter<PolicyResult>
        {
            public override void Write(Utf8JsonWriter writer, PolicyResult model, JsonSerializerOptions options)
            {
                throw new NotImplementedException();
            }
            public override PolicyResult Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializePolicyResult(document.RootElement);
            }
        }
    }
}
