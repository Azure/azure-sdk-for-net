// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.Attestation.Models
{
    internal partial class JsonWebKey
    {
        internal static JsonWebKey DeserializeJsonWebKey(JsonElement element)
        {
            string alg = default;
            Optional<string> crv = default;
            Optional<string> d = default;
            Optional<string> dp = default;
            Optional<string> dq = default;
            Optional<string> e = default;
            Optional<string> k = default;
            string kid = default;
            string kty = default;
            Optional<string> n = default;
            Optional<string> p = default;
            Optional<string> q = default;
            Optional<string> qi = default;
            string use = default;
            Optional<string> x = default;
            Optional<IReadOnlyList<string>> x5c = default;
            Optional<string> y = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alg"))
                {
                    alg = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crv"))
                {
                    crv = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("d"))
                {
                    d = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dp"))
                {
                    dp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dq"))
                {
                    dq = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("e"))
                {
                    e = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("k"))
                {
                    k = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kid"))
                {
                    kid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kty"))
                {
                    kty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("n"))
                {
                    n = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("p"))
                {
                    p = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("q"))
                {
                    q = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("qi"))
                {
                    qi = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("use"))
                {
                    use = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("x"))
                {
                    x = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("x5c"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    x5c = array;
                    continue;
                }
                if (property.NameEquals("y"))
                {
                    y = property.Value.GetString();
                    continue;
                }
            }
            return new JsonWebKey(alg, crv.Value, d.Value, dp.Value, dq.Value, e.Value, k.Value, kid, kty, n.Value, p.Value, q.Value, qi.Value, use, x.Value, Optional.ToList(x5c), y.Value);
        }
    }
}
