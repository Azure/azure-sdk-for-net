// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.NewRelicObservability.Models
{
    /// <summary> Provisioning State of the Monitor resource. </summary>
    public readonly partial struct NewrelicProvisioningState : IEquatable<NewrelicProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NewrelicProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NewrelicProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptedValue = "Accepted";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string DeletedValue = "Deleted";
        private const string NotSpecifiedValue = "NotSpecified";

        /// <summary> Monitor resource creation request accepted. </summary>
        public static NewrelicProvisioningState Accepted { get; } = new NewrelicProvisioningState(AcceptedValue);
        /// <summary> Monitor resource creation started. </summary>
        public static NewrelicProvisioningState Creating { get; } = new NewrelicProvisioningState(CreatingValue);
        /// <summary> Monitor resource is being updated. </summary>
        public static NewrelicProvisioningState Updating { get; } = new NewrelicProvisioningState(UpdatingValue);
        /// <summary> Monitor resource deletion started. </summary>
        public static NewrelicProvisioningState Deleting { get; } = new NewrelicProvisioningState(DeletingValue);
        /// <summary> Monitor resource creation successful. </summary>
        public static NewrelicProvisioningState Succeeded { get; } = new NewrelicProvisioningState(SucceededValue);
        /// <summary> Monitor resource creation failed. </summary>
        public static NewrelicProvisioningState Failed { get; } = new NewrelicProvisioningState(FailedValue);
        /// <summary> Monitor resource creation canceled. </summary>
        public static NewrelicProvisioningState Canceled { get; } = new NewrelicProvisioningState(CanceledValue);
        /// <summary> Monitor resource is deleted. </summary>
        public static NewrelicProvisioningState Deleted { get; } = new NewrelicProvisioningState(DeletedValue);
        /// <summary> Monitor resource state is unknown. </summary>
        public static NewrelicProvisioningState NotSpecified { get; } = new NewrelicProvisioningState(NotSpecifiedValue);
        /// <summary> Determines if two <see cref="NewrelicProvisioningState"/> values are the same. </summary>
        public static bool operator ==(NewrelicProvisioningState left, NewrelicProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NewrelicProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(NewrelicProvisioningState left, NewrelicProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NewrelicProvisioningState"/>. </summary>
        public static implicit operator NewrelicProvisioningState(string value) => new NewrelicProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NewrelicProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NewrelicProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
