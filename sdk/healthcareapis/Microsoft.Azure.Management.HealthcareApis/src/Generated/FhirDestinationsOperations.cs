// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.Management.HealthcareApis.Models;
using Page = Azure.Page<Microsoft.Azure.Management.HealthcareApis.Models.IotFhirDestination>;

namespace Microsoft.Azure.Management.HealthcareApis
{
    /// <summary> The FhirDestinations service client. </summary>
    public partial class FhirDestinationsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FhirDestinationsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of FhirDestinationsOperations for mocking. </summary>
        protected FhirDestinationsOperations()
        {
        }
        /// <summary> Initializes a new instance of FhirDestinationsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The subscription identifier. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal FhirDestinationsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-11-01")
        {
            RestClient = new FhirDestinationsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists all FHIR destinations for the given IoT Connector. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, or <paramref name="iotConnectorName"/> is null. </exception>
        public virtual AsyncPageable<IotFhirDestination> ListByIotConnectorAsync(string resourceGroupName, string workspaceName, string iotConnectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }

            async Task<Page> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirDestinationsOperations.ListByIotConnector");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByIotConnectorAsync(resourceGroupName, workspaceName, iotConnectorName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirDestinationsOperations.ListByIotConnector");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByIotConnectorNextPageAsync(nextLink, resourceGroupName, workspaceName, iotConnectorName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all FHIR destinations for the given IoT Connector. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, or <paramref name="iotConnectorName"/> is null. </exception>
        public virtual Pageable<IotFhirDestination> ListByIotConnector(string resourceGroupName, string workspaceName, string iotConnectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }

            Page FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirDestinationsOperations.ListByIotConnector");
                scope.Start();
                try
                {
                    var response = RestClient.ListByIotConnector(resourceGroupName, workspaceName, iotConnectorName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirDestinationsOperations.ListByIotConnector");
                scope.Start();
                try
                {
                    var response = RestClient.ListByIotConnectorNextPage(nextLink, resourceGroupName, workspaceName, iotConnectorName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
