// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Microsoft.Azure.Management.HealthcareApis.Models;

namespace Microsoft.Azure.Management.HealthcareApis
{
    /// <summary> The OperationResults service client. </summary>
    public partial class OperationResultsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal OperationResultsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of OperationResultsOperations for mocking. </summary>
        protected OperationResultsOperations()
        {
        }
        /// <summary> Initializes a new instance of OperationResultsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The subscription identifier. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal OperationResultsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-11-01")
        {
            RestClient = new OperationResultsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get the operation result for a long running operation. </summary>
        /// <param name="locationName"> The location of the operation. </param>
        /// <param name="operationResultId"> The ID of the operation result to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationResultsDescription>> GetAsync(string locationName, string operationResultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("OperationResultsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(locationName, operationResultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the operation result for a long running operation. </summary>
        /// <param name="locationName"> The location of the operation. </param>
        /// <param name="operationResultId"> The ID of the operation result to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationResultsDescription> Get(string locationName, string operationResultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("OperationResultsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(locationName, operationResultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
