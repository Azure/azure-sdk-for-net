// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.Azure.Management.HealthcareApis.Models;
using Page = Azure.Page<Microsoft.Azure.Management.HealthcareApis.Models.FhirService>;

namespace Microsoft.Azure.Management.HealthcareApis
{
    /// <summary> The FhirServices service client. </summary>
    public partial class FhirServicesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FhirServicesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of FhirServicesOperations for mocking. </summary>
        protected FhirServicesOperations()
        {
        }
        /// <summary> Initializes a new instance of FhirServicesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The subscription identifier. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal FhirServicesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-11-01")
        {
            RestClient = new FhirServicesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the properties of the specified FHIR Service. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FhirService>> GetAsync(string resourceGroupName, string workspaceName, string fhirServiceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, workspaceName, fhirServiceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified FHIR Service. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FhirService> Get(string resourceGroupName, string workspaceName, string fhirServiceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, workspaceName, fhirServiceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all FHIR Services for the given workspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is null. </exception>
        public virtual AsyncPageable<FhirService> ListByWorkspaceAsync(string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            async Task<Page> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.ListByWorkspace");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByWorkspaceAsync(resourceGroupName, workspaceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.ListByWorkspace");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByWorkspaceNextPageAsync(nextLink, resourceGroupName, workspaceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all FHIR Services for the given workspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is null. </exception>
        public virtual Pageable<FhirService> ListByWorkspace(string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            Page FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.ListByWorkspace");
                scope.Start();
                try
                {
                    var response = RestClient.ListByWorkspace(resourceGroupName, workspaceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.ListByWorkspace");
                scope.Start();
                try
                {
                    var response = RestClient.ListByWorkspaceNextPage(nextLink, resourceGroupName, workspaceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates or updates a FHIR Service resource with the specified parameters. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="fhirservice"> The parameters for creating or updating a Fhir Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="fhirServiceName"/>, or <paramref name="fhirservice"/> is null. </exception>
        public virtual async Task<FhirServicesCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string workspaceName, string fhirServiceName, FhirService fhirservice, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (fhirservice == null)
            {
                throw new ArgumentNullException(nameof(fhirservice));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, workspaceName, fhirServiceName, fhirservice, cancellationToken).ConfigureAwait(false);
                return new FhirServicesCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, fhirServiceName, fhirservice).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a FHIR Service resource with the specified parameters. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="fhirservice"> The parameters for creating or updating a Fhir Service resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="fhirServiceName"/>, or <paramref name="fhirservice"/> is null. </exception>
        public virtual FhirServicesCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string workspaceName, string fhirServiceName, FhirService fhirservice, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (fhirservice == null)
            {
                throw new ArgumentNullException(nameof(fhirservice));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, workspaceName, fhirServiceName, fhirservice, cancellationToken);
                return new FhirServicesCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, fhirServiceName, fhirservice).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Patch FHIR Service details. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirservicePatchResource"> The parameters for updating a Fhir Service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="fhirServiceName"/>, <paramref name="workspaceName"/>, or <paramref name="fhirservicePatchResource"/> is null. </exception>
        public virtual async Task<FhirServicesUpdateOperation> StartUpdateAsync(string resourceGroupName, string fhirServiceName, string workspaceName, FhirServicePatchResource fhirservicePatchResource, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (fhirservicePatchResource == null)
            {
                throw new ArgumentNullException(nameof(fhirservicePatchResource));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateAsync(resourceGroupName, fhirServiceName, workspaceName, fhirservicePatchResource, cancellationToken).ConfigureAwait(false);
                return new FhirServicesUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateRequest(resourceGroupName, fhirServiceName, workspaceName, fhirservicePatchResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Patch FHIR Service details. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="fhirservicePatchResource"> The parameters for updating a Fhir Service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="fhirServiceName"/>, <paramref name="workspaceName"/>, or <paramref name="fhirservicePatchResource"/> is null. </exception>
        public virtual FhirServicesUpdateOperation StartUpdate(string resourceGroupName, string fhirServiceName, string workspaceName, FhirServicePatchResource fhirservicePatchResource, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (fhirservicePatchResource == null)
            {
                throw new ArgumentNullException(nameof(fhirservicePatchResource));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Update(resourceGroupName, fhirServiceName, workspaceName, fhirservicePatchResource, cancellationToken);
                return new FhirServicesUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateRequest(resourceGroupName, fhirServiceName, workspaceName, fhirservicePatchResource).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a FHIR Service. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="fhirServiceName"/>, or <paramref name="workspaceName"/> is null. </exception>
        public virtual async Task<FhirServicesDeleteOperation> StartDeleteAsync(string resourceGroupName, string fhirServiceName, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, fhirServiceName, workspaceName, cancellationToken).ConfigureAwait(false);
                return new FhirServicesDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, fhirServiceName, workspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a FHIR Service. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="fhirServiceName"> The name of FHIR Service resource. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="fhirServiceName"/>, or <paramref name="workspaceName"/> is null. </exception>
        public virtual FhirServicesDeleteOperation StartDelete(string resourceGroupName, string fhirServiceName, string workspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (fhirServiceName == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("FhirServicesOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, fhirServiceName, workspaceName, cancellationToken);
                return new FhirServicesDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, fhirServiceName, workspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
