// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Setting indicating whether the service has a managed identity
    /// associated with it.
    /// </summary>
    public partial class ServiceManagedIdentityIdentity
    {
        /// <summary>
        /// Initializes a new instance of the ServiceManagedIdentityIdentity
        /// class.
        /// </summary>
        public ServiceManagedIdentityIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceManagedIdentityIdentity
        /// class.
        /// </summary>
        /// <param name="type">Type of identity being specified, currently
        /// SystemAssigned and None are allowed. Possible values include:
        /// 'None', 'SystemAssigned', 'UserAssigned',
        /// 'SystemAssigned,UserAssigned'</param>
        /// <param name="principalId">The service principal ID of the system
        /// assigned identity. This property will only be provided for a system
        /// assigned identity.</param>
        /// <param name="tenantId">The tenant ID of the system assigned
        /// identity. This property will only be provided for a system assigned
        /// identity.</param>
        public ServiceManagedIdentityIdentity(string type, System.Guid? principalId = default(System.Guid?), System.Guid? tenantId = default(System.Guid?), IDictionary<string, UserAssignedIdentity> userAssignedIdentities = default(IDictionary<string, UserAssignedIdentity>))
        {
            Type = type;
            PrincipalId = principalId;
            TenantId = tenantId;
            UserAssignedIdentities = userAssignedIdentities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of identity being specified, currently
        /// SystemAssigned and None are allowed. Possible values include:
        /// 'None', 'SystemAssigned', 'UserAssigned',
        /// 'SystemAssigned,UserAssigned'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets the service principal ID of the system assigned identity. This
        /// property will only be provided for a system assigned identity.
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public System.Guid? PrincipalId { get; private set; }

        /// <summary>
        /// Gets the tenant ID of the system assigned identity. This property
        /// will only be provided for a system assigned identity.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userAssignedIdentities")]
        public IDictionary<string, UserAssignedIdentity> UserAssignedIdentities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
