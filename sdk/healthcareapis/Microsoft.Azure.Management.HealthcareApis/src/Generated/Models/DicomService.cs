// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The description of Dicom Service
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DicomService
    {
        /// <summary>
        /// Initializes a new instance of the DicomService class.
        /// </summary>
        public DicomService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DicomService class.
        /// </summary>
        /// <param name="tags">Resource tags.</param>
        /// <param name="location">The resource location.</param>
        /// <param name="identity">Setting indicating whether the service has a
        /// managed identity associated with it.</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Deleting', 'Succeeded', 'Creating', 'Accepted',
        /// 'Verifying', 'Updating', 'Failed', 'Canceled', 'Deprovisioned',
        /// 'Moving', 'Suspended', 'Warned', 'SystemMaintenance'</param>
        /// <param name="authenticationConfiguration">Dicom Service
        /// authentication configuration.</param>
        /// <param name="serviceUrl">The url of the Dicom Services.</param>
        /// <param name="privateEndpointConnections">The list of private
        /// endpoint connections that are set up for this resource.</param>
        /// <param name="publicNetworkAccess">Control permission for data plane
        /// traffic coming from public networks while private endpoint is
        /// enabled. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource.</param>
        public DicomService(IDictionary<string, string> tags = default(IDictionary<string, string>), string location = default(string), ServiceManagedIdentityIdentity identity = default(ServiceManagedIdentityIdentity), string provisioningState = default(string), DicomServiceAuthenticationConfiguration authenticationConfiguration = default(DicomServiceAuthenticationConfiguration), string serviceUrl = default(string), IList<PrivateEndpointConnection> privateEndpointConnections = default(IList<PrivateEndpointConnection>), string publicNetworkAccess = default(string), SystemData systemData = default(SystemData))
        {
            Tags = tags;
            Location = location;
            Identity = identity;
            ProvisioningState = provisioningState;
            AuthenticationConfiguration = authenticationConfiguration;
            ServiceUrl = serviceUrl;
            PrivateEndpointConnections = privateEndpointConnections;
            PublicNetworkAccess = publicNetworkAccess;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the resource location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets setting indicating whether the service has a managed
        /// identity associated with it.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ServiceManagedIdentityIdentity Identity { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state. Possible values include:
        /// 'Deleting', 'Succeeded', 'Creating', 'Accepted', 'Verifying',
        /// 'Updating', 'Failed', 'Canceled', 'Deprovisioned', 'Moving',
        /// 'Suspended', 'Warned', 'SystemMaintenance'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets dicom Service authentication configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authenticationConfiguration")]
        public DicomServiceAuthenticationConfiguration AuthenticationConfiguration { get; set; }

        /// <summary>
        /// Gets the url of the Dicom Services.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceUrl")]
        public string ServiceUrl { get; private set; }

        /// <summary>
        /// Gets the list of private endpoint connections that are set up for
        /// this resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public IList<PrivateEndpointConnection> PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Gets or sets control permission for data plane traffic coming from
        /// public networks while private endpoint is enabled. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets or sets metadata pertaining to creation and last modification
        /// of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Identity != null)
            {
                Identity.Validate();
            }
            if (PrivateEndpointConnections != null)
            {
                foreach (var element in PrivateEndpointConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
