// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The description of the service.
    /// </summary>
    public partial class ServicesDescription : ServicesResource
    {
        /// <summary>
        /// Initializes a new instance of the ServicesDescription class.
        /// </summary>
        public ServicesDescription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServicesDescription class.
        /// </summary>
        /// <param name="kind">The kind of the service. Possible values
        /// include: 'fhir', 'fhir-Stu3', 'fhir-R4'</param>
        /// <param name="location">The resource location.</param>
        /// <param name="id">The resource identifier.</param>
        /// <param name="name">The resource name.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="tags">The resource tags.</param>
        /// <param name="etag">An etag associated with the resource, used for
        /// optimistic concurrency when editing it.</param>
        /// <param name="identity">Setting indicating whether the service has a
        /// managed identity associated with it.</param>
        /// <param name="properties">The common properties of a
        /// service.</param>
        public ServicesDescription(Kind kind, string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string), ServicesResourceIdentity identity = default(ServicesResourceIdentity), ServicesProperties properties = default(ServicesProperties))
            : base(kind, location, id, name, type, tags, etag, identity)
        {
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the common properties of a service.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public ServicesProperties Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Properties != null)
            {
                Properties.Validate();
            }
        }
    }
}
