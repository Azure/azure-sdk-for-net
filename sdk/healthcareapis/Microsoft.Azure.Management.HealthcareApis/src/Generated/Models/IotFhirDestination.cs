// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// IoT Connector FHIR destination definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class IotFhirDestination : LocationBasedResource
    {
        /// <summary>
        /// Initializes a new instance of the IotFhirDestination class.
        /// </summary>
        public IotFhirDestination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotFhirDestination class.
        /// </summary>
        /// <param name="resourceIdentityResolutionType">Determines how
        /// resource identity is resolved on the destination. Possible values
        /// include: 'Create', 'Lookup'</param>
        /// <param name="fhirServiceResourceId">Fully qualified resource id of
        /// the FHIR service to connect to.</param>
        /// <param name="fhirMapping">FHIR Mappings</param>
        /// <param name="location">The resource location.</param>
        /// <param name="provisioningState">The provisioning state. Possible
        /// values include: 'Deleting', 'Succeeded', 'Creating', 'Accepted',
        /// 'Verifying', 'Updating', 'Failed', 'Canceled', 'Deprovisioned',
        /// 'Moving', 'Suspended', 'Warned', 'SystemMaintenance'</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource.</param>
        public IotFhirDestination(string resourceIdentityResolutionType, string fhirServiceResourceId, IotMappingProperties fhirMapping, string location = default(string), string provisioningState = default(string), SystemData systemData = default(SystemData))
            : base(location)
        {
            ProvisioningState = provisioningState;
            ResourceIdentityResolutionType = resourceIdentityResolutionType;
            FhirServiceResourceId = fhirServiceResourceId;
            FhirMapping = fhirMapping;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the provisioning state. Possible values include:
        /// 'Deleting', 'Succeeded', 'Creating', 'Accepted', 'Verifying',
        /// 'Updating', 'Failed', 'Canceled', 'Deprovisioned', 'Moving',
        /// 'Suspended', 'Warned', 'SystemMaintenance'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets determines how resource identity is resolved on the
        /// destination. Possible values include: 'Create', 'Lookup'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceIdentityResolutionType")]
        public string ResourceIdentityResolutionType { get; set; }

        /// <summary>
        /// Gets or sets fully qualified resource id of the FHIR service to
        /// connect to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fhirServiceResourceId")]
        public string FhirServiceResourceId { get; set; }

        /// <summary>
        /// Gets or sets FHIR Mappings
        /// </summary>
        [JsonProperty(PropertyName = "properties.fhirMapping")]
        public IotMappingProperties FhirMapping { get; set; }

        /// <summary>
        /// Gets or sets metadata pertaining to creation and last modification
        /// of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceIdentityResolutionType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceIdentityResolutionType");
            }
            if (FhirServiceResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FhirServiceResourceId");
            }
            if (FhirMapping == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FhirMapping");
            }
        }
    }
}
