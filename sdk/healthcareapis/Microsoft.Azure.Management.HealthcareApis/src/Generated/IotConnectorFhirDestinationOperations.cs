// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Microsoft.Azure.Management.HealthcareApis.Models;

namespace Microsoft.Azure.Management.HealthcareApis
{
    /// <summary> The IotConnectorFhirDestination service client. </summary>
    public partial class IotConnectorFhirDestinationOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal IotConnectorFhirDestinationRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of IotConnectorFhirDestinationOperations for mocking. </summary>
        protected IotConnectorFhirDestinationOperations()
        {
        }
        /// <summary> Initializes a new instance of IotConnectorFhirDestinationOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The subscription identifier. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal IotConnectorFhirDestinationOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-11-01")
        {
            RestClient = new IotConnectorFhirDestinationRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the properties of the specified Iot Connector FHIR destination. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IotFhirDestination>> GetAsync(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified Iot Connector FHIR destination. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IotFhirDestination> Get(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an IoT Connector FHIR destination resource with the specified parameters. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="iotFhirDestination"> The parameters for creating or updating an IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="iotConnectorName"/>, <paramref name="fhirDestinationName"/>, or <paramref name="iotFhirDestination"/> is null. </exception>
        public virtual async Task<IotConnectorFhirDestinationCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, IotFhirDestination iotFhirDestination, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }
            if (fhirDestinationName == null)
            {
                throw new ArgumentNullException(nameof(fhirDestinationName));
            }
            if (iotFhirDestination == null)
            {
                throw new ArgumentNullException(nameof(iotFhirDestination));
            }

            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, iotFhirDestination, cancellationToken).ConfigureAwait(false);
                return new IotConnectorFhirDestinationCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, iotFhirDestination).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an IoT Connector FHIR destination resource with the specified parameters. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="iotFhirDestination"> The parameters for creating or updating an IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="iotConnectorName"/>, <paramref name="fhirDestinationName"/>, or <paramref name="iotFhirDestination"/> is null. </exception>
        public virtual IotConnectorFhirDestinationCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, IotFhirDestination iotFhirDestination, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }
            if (fhirDestinationName == null)
            {
                throw new ArgumentNullException(nameof(fhirDestinationName));
            }
            if (iotFhirDestination == null)
            {
                throw new ArgumentNullException(nameof(iotFhirDestination));
            }

            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, iotFhirDestination, cancellationToken);
                return new IotConnectorFhirDestinationCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, iotFhirDestination).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an IoT Connector FHIR destination. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="iotConnectorName"/>, or <paramref name="fhirDestinationName"/> is null. </exception>
        public virtual async Task<IotConnectorFhirDestinationDeleteOperation> StartDeleteAsync(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }
            if (fhirDestinationName == null)
            {
                throw new ArgumentNullException(nameof(fhirDestinationName));
            }

            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, cancellationToken).ConfigureAwait(false);
                return new IotConnectorFhirDestinationDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an IoT Connector FHIR destination. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the service instance. </param>
        /// <param name="workspaceName"> The name of workspace resource. </param>
        /// <param name="iotConnectorName"> The name of IoT Connector resource. </param>
        /// <param name="fhirDestinationName"> The name of IoT Connector FHIR destination resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="iotConnectorName"/>, or <paramref name="fhirDestinationName"/> is null. </exception>
        public virtual IotConnectorFhirDestinationDeleteOperation StartDelete(string resourceGroupName, string workspaceName, string iotConnectorName, string fhirDestinationName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException(nameof(workspaceName));
            }
            if (iotConnectorName == null)
            {
                throw new ArgumentNullException(nameof(iotConnectorName));
            }
            if (fhirDestinationName == null)
            {
                throw new ArgumentNullException(nameof(fhirDestinationName));
            }

            using var scope = _clientDiagnostics.CreateScope("IotConnectorFhirDestinationOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName, cancellationToken);
                return new IotConnectorFhirDestinationDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, workspaceName, iotConnectorName, fhirDestinationName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
