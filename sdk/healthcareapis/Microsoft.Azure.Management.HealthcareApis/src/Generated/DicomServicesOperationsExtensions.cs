// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DicomServicesOperations.
    /// </summary>
    public static partial class DicomServicesOperationsExtensions
    {
            /// <summary>
            /// Lists all DICOM Services for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static IPage<DicomService> ListByWorkspace(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all DICOM Services for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DicomService>> ListByWorkspaceAsync(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of the specified DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            public static DicomService Get(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, dicomServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the specified DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DicomService> GetAsync(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, dicomServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a DICOM Service resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='dicomservice'>
            /// The parameters for creating or updating a Dicom Service resource.
            /// </param>
            public static DicomService CreateOrUpdate(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName, DicomService dicomservice)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, dicomServiceName, dicomservice).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a DICOM Service resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='dicomservice'>
            /// The parameters for creating or updating a Dicom Service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DicomService> CreateOrUpdateAsync(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName, DicomService dicomservice, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, dicomServiceName, dicomservice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch DICOM Service details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomservicePatchResource'>
            /// The parameters for updating a Dicom Service.
            /// </param>
            public static DicomService Update(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, DicomServicePatchResource dicomservicePatchResource)
            {
                return operations.UpdateAsync(resourceGroupName, dicomServiceName, workspaceName, dicomservicePatchResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch DICOM Service details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomservicePatchResource'>
            /// The parameters for updating a Dicom Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DicomService> UpdateAsync(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, DicomServicePatchResource dicomservicePatchResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dicomServiceName, workspaceName, dicomservicePatchResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static void Delete(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName)
            {
                operations.DeleteAsync(resourceGroupName, dicomServiceName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dicomServiceName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a DICOM Service resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='dicomservice'>
            /// The parameters for creating or updating a Dicom Service resource.
            /// </param>
            public static DicomService BeginCreateOrUpdate(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName, DicomService dicomservice)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, dicomServiceName, dicomservice).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a DICOM Service resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='dicomservice'>
            /// The parameters for creating or updating a Dicom Service resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DicomService> BeginCreateOrUpdateAsync(this IDicomServicesOperations operations, string resourceGroupName, string workspaceName, string dicomServiceName, DicomService dicomservice, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, dicomServiceName, dicomservice, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch DICOM Service details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomservicePatchResource'>
            /// The parameters for updating a Dicom Service.
            /// </param>
            public static DicomService BeginUpdate(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, DicomServicePatchResource dicomservicePatchResource)
            {
                return operations.BeginUpdateAsync(resourceGroupName, dicomServiceName, workspaceName, dicomservicePatchResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch DICOM Service details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='dicomservicePatchResource'>
            /// The parameters for updating a Dicom Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DicomService> BeginUpdateAsync(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, DicomServicePatchResource dicomservicePatchResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, dicomServiceName, workspaceName, dicomservicePatchResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static void BeginDelete(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, dicomServiceName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a DICOM Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='dicomServiceName'>
            /// The name of DICOM Service resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IDicomServicesOperations operations, string resourceGroupName, string dicomServiceName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, dicomServiceName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all DICOM Services for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DicomService> ListByWorkspaceNext(this IDicomServicesOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all DICOM Services for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DicomService>> ListByWorkspaceNextAsync(this IDicomServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
