// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HealthcareApis
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IotConnectorsOperations.
    /// </summary>
    public static partial class IotConnectorsOperationsExtensions
    {
            /// <summary>
            /// Lists all IoT Connectors for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static IPage<IotConnector> ListByWorkspace(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all IoT Connectors for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotConnector>> ListByWorkspaceAsync(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of the specified IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            public static IotConnector Get(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, iotConnectorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of the specified IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotConnector> GetAsync(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, iotConnectorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an IoT Connector resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='iotConnector'>
            /// The parameters for creating or updating an IoT Connectors resource.
            /// </param>
            public static IotConnector CreateOrUpdate(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName, IotConnector iotConnector)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, iotConnectorName, iotConnector).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an IoT Connector resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='iotConnector'>
            /// The parameters for creating or updating an IoT Connectors resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotConnector> CreateOrUpdateAsync(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName, IotConnector iotConnector, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, iotConnectorName, iotConnector, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorPatchResource'>
            /// The parameters for updating an IoT Connector.
            /// </param>
            public static IotConnector Update(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, IotConnectorPatchResource iotConnectorPatchResource)
            {
                return operations.UpdateAsync(resourceGroupName, iotConnectorName, workspaceName, iotConnectorPatchResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorPatchResource'>
            /// The parameters for updating an IoT Connector.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotConnector> UpdateAsync(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, IotConnectorPatchResource iotConnectorPatchResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, iotConnectorName, workspaceName, iotConnectorPatchResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static void Delete(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName)
            {
                operations.DeleteAsync(resourceGroupName, iotConnectorName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, iotConnectorName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an IoT Connector resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='iotConnector'>
            /// The parameters for creating or updating an IoT Connectors resource.
            /// </param>
            public static IotConnector BeginCreateOrUpdate(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName, IotConnector iotConnector)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, iotConnectorName, iotConnector).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an IoT Connector resource with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='iotConnector'>
            /// The parameters for creating or updating an IoT Connectors resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotConnector> BeginCreateOrUpdateAsync(this IIotConnectorsOperations operations, string resourceGroupName, string workspaceName, string iotConnectorName, IotConnector iotConnector, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, iotConnectorName, iotConnector, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorPatchResource'>
            /// The parameters for updating an IoT Connector.
            /// </param>
            public static IotConnector BeginUpdate(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, IotConnectorPatchResource iotConnectorPatchResource)
            {
                return operations.BeginUpdateAsync(resourceGroupName, iotConnectorName, workspaceName, iotConnectorPatchResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='iotConnectorPatchResource'>
            /// The parameters for updating an IoT Connector.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IotConnector> BeginUpdateAsync(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, IotConnectorPatchResource iotConnectorPatchResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, iotConnectorName, workspaceName, iotConnectorPatchResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            public static void BeginDelete(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, iotConnectorName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an IoT Connector.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the service instance.
            /// </param>
            /// <param name='iotConnectorName'>
            /// The name of IoT Connector resource.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of workspace resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IIotConnectorsOperations operations, string resourceGroupName, string iotConnectorName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, iotConnectorName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all IoT Connectors for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IotConnector> ListByWorkspaceNext(this IIotConnectorsOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all IoT Connectors for the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IotConnector>> ListByWorkspaceNextAsync(this IIotConnectorsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
