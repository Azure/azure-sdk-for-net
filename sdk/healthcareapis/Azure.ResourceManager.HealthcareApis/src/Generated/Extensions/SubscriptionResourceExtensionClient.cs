// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.HealthcareApis.Models;

namespace Azure.ResourceManager.HealthcareApis
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _servicesDescriptionServicesClientDiagnostics;
        private ServicesRestOperations _servicesDescriptionServicesRestClient;
        private ClientDiagnostics _workspaceClientDiagnostics;
        private WorkspacesRestOperations _workspaceRestClient;
        private ClientDiagnostics _operationResultsClientDiagnostics;
        private OperationResultsRestOperations _operationResultsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ServicesDescriptionServicesClientDiagnostics => _servicesDescriptionServicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HealthcareApis", ServicesDescriptionResource.ResourceType.Namespace, Diagnostics);
        private ServicesRestOperations ServicesDescriptionServicesRestClient => _servicesDescriptionServicesRestClient ??= new ServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ServicesDescriptionResource.ResourceType));
        private ClientDiagnostics WorkspaceClientDiagnostics => _workspaceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HealthcareApis", WorkspaceResource.ResourceType.Namespace, Diagnostics);
        private WorkspacesRestOperations WorkspaceRestClient => _workspaceRestClient ??= new WorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(WorkspaceResource.ResourceType));
        private ClientDiagnostics OperationResultsClientDiagnostics => _operationResultsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HealthcareApis", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationResultsRestOperations OperationResultsRestClient => _operationResultsRestClient ??= new OperationResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get all the service instances in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/services
        /// Operation Id: Services_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServicesDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServicesDescriptionResource> GetServicesDescriptionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServicesDescriptionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetServicesDescriptions");
                scope.Start();
                try
                {
                    var response = await ServicesDescriptionServicesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServicesDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServicesDescriptionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetServicesDescriptions");
                scope.Start();
                try
                {
                    var response = await ServicesDescriptionServicesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServicesDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all the service instances in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/services
        /// Operation Id: Services_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServicesDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServicesDescriptionResource> GetServicesDescriptions(CancellationToken cancellationToken = default)
        {
            Page<ServicesDescriptionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetServicesDescriptions");
                scope.Start();
                try
                {
                    var response = ServicesDescriptionServicesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServicesDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServicesDescriptionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetServicesDescriptions");
                scope.Start();
                try
                {
                    var response = ServicesDescriptionServicesRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServicesDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Check if a service instance name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/checkNameAvailability
        /// Operation Id: Services_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServicesNameAvailabilityInfo>> CheckNameAvailabilityServiceAsync(CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityService");
            scope.Start();
            try
            {
                var response = await ServicesDescriptionServicesRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check if a service instance name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/checkNameAvailability
        /// Operation Id: Services_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServicesNameAvailabilityInfo> CheckNameAvailabilityService(CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ServicesDescriptionServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityService");
            scope.Start();
            try
            {
                var response = ServicesDescriptionServicesRestClient.CheckNameAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the available workspaces under the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/workspaces
        /// Operation Id: Workspaces_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkspaceResource> GetWorkspacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkspaceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = await WorkspaceRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkspaceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = await WorkspaceRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the available workspaces under the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/workspaces
        /// Operation Id: Workspaces_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkspaceResource> GetWorkspaces(CancellationToken cancellationToken = default)
        {
            Page<WorkspaceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = WorkspaceRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkspaceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = WorkspaceRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the operation result for a long running operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/locations/{locationName}/operationresults/{operationResultId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="locationName"> The location of the operation. </param>
        /// <param name="operationResultId"> The ID of the operation result to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationResultsDescription>> GetOperationResultAsync(string locationName, string operationResultId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationResult");
            scope.Start();
            try
            {
                var response = await OperationResultsRestClient.GetAsync(Id.SubscriptionId, locationName, operationResultId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the operation result for a long running operation.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/locations/{locationName}/operationresults/{operationResultId}
        /// Operation Id: OperationResults_Get
        /// </summary>
        /// <param name="locationName"> The location of the operation. </param>
        /// <param name="operationResultId"> The ID of the operation result to get. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationResultsDescription> GetOperationResult(string locationName, string operationResultId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationResult");
            scope.Start();
            try
            {
                var response = OperationResultsRestClient.Get(Id.SubscriptionId, locationName, operationResultId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
