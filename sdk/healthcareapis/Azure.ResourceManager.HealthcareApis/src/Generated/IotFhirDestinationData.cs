// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core;
using Azure.ResourceManager.HealthcareApis.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HealthcareApis
{
    /// <summary> A class representing the IotFhirDestination data model. </summary>
    public partial class IotFhirDestinationData : ResourceData
    {
        /// <summary> Initializes a new instance of IotFhirDestinationData. </summary>
        /// <param name="resourceIdentityResolutionType">
        /// Determines how resource identity is resolved on the destination.
        /// Serialized Name: IotFhirDestination.properties.resourceIdentityResolutionType
        /// </param>
        /// <param name="fhirServiceResourceId">
        /// Fully qualified resource id of the FHIR service to connect to.
        /// Serialized Name: IotFhirDestination.properties.fhirServiceResourceId
        /// </param>
        /// <param name="fhirMapping">
        /// FHIR Mappings
        /// Serialized Name: IotFhirDestination.properties.fhirMapping
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fhirServiceResourceId"/> or <paramref name="fhirMapping"/> is null. </exception>
        public IotFhirDestinationData(IotIdentityResolutionType resourceIdentityResolutionType, string fhirServiceResourceId, IotMappingProperties fhirMapping)
        {
            if (fhirServiceResourceId == null)
            {
                throw new ArgumentNullException(nameof(fhirServiceResourceId));
            }
            if (fhirMapping == null)
            {
                throw new ArgumentNullException(nameof(fhirMapping));
            }

            ResourceIdentityResolutionType = resourceIdentityResolutionType;
            FhirServiceResourceId = fhirServiceResourceId;
            FhirMapping = fhirMapping;
        }

        /// <summary> Initializes a new instance of IotFhirDestinationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState">
        /// The provisioning state.
        /// Serialized Name: IotFhirDestination.properties.provisioningState
        /// </param>
        /// <param name="resourceIdentityResolutionType">
        /// Determines how resource identity is resolved on the destination.
        /// Serialized Name: IotFhirDestination.properties.resourceIdentityResolutionType
        /// </param>
        /// <param name="fhirServiceResourceId">
        /// Fully qualified resource id of the FHIR service to connect to.
        /// Serialized Name: IotFhirDestination.properties.fhirServiceResourceId
        /// </param>
        /// <param name="fhirMapping">
        /// FHIR Mappings
        /// Serialized Name: IotFhirDestination.properties.fhirMapping
        /// </param>
        /// <param name="location">
        /// The resource location.
        /// Serialized Name: LocationBasedResource.location
        /// </param>
        /// <param name="etag">
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// Serialized Name: ResourceCore.etag
        /// </param>
        internal IotFhirDestinationData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, ProvisioningState? provisioningState, IotIdentityResolutionType resourceIdentityResolutionType, string fhirServiceResourceId, IotMappingProperties fhirMapping, AzureLocation? location, ETag? etag) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            ResourceIdentityResolutionType = resourceIdentityResolutionType;
            FhirServiceResourceId = fhirServiceResourceId;
            FhirMapping = fhirMapping;
            Location = location;
            ETag = etag;
        }

        /// <summary>
        /// The provisioning state.
        /// Serialized Name: IotFhirDestination.properties.provisioningState
        /// </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// Determines how resource identity is resolved on the destination.
        /// Serialized Name: IotFhirDestination.properties.resourceIdentityResolutionType
        /// </summary>
        public IotIdentityResolutionType ResourceIdentityResolutionType { get; set; }
        /// <summary>
        /// Fully qualified resource id of the FHIR service to connect to.
        /// Serialized Name: IotFhirDestination.properties.fhirServiceResourceId
        /// </summary>
        public string FhirServiceResourceId { get; set; }
        /// <summary>
        /// FHIR Mappings
        /// Serialized Name: IotFhirDestination.properties.fhirMapping
        /// </summary>
        internal IotMappingProperties FhirMapping { get; set; }
        /// <summary>
        /// The mapping.
        /// Serialized Name: IotMappingProperties.content
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData FhirMappingContent
        {
            get => FhirMapping is null ? default : FhirMapping.Content;
            set
            {
                if (FhirMapping is null)
                    FhirMapping = new IotMappingProperties();
                FhirMapping.Content = value;
            }
        }

        /// <summary>
        /// The resource location.
        /// Serialized Name: LocationBasedResource.location
        /// </summary>
        public AzureLocation? Location { get; set; }
        /// <summary>
        /// An etag associated with the resource, used for optimistic concurrency when editing it.
        /// Serialized Name: ResourceCore.etag
        /// </summary>
        public ETag? ETag { get; set; }
    }
}
