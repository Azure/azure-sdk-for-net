// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HealthcareApis.Models
{
    /// <summary> The description of Dicom Service. </summary>
    public partial class DicomService : TaggedResource
    {
        /// <summary> Initializes a new instance of <see cref="DicomService"/>. </summary>
        public DicomService()
        {
            PrivateEndpointConnections = new ChangeTrackingList<HealthcareApisPrivateEndpointConnectionData>();
        }

        /// <summary> Initializes a new instance of <see cref="DicomService"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="authenticationConfiguration"> Dicom Service authentication configuration. </param>
        /// <param name="corsConfiguration"> Dicom Service Cors configuration. </param>
        /// <param name="serviceUri"> The url of the Dicom Services. </param>
        /// <param name="privateEndpointConnections"> The list of private endpoint connections that are set up for this resource. </param>
        /// <param name="publicNetworkAccess"> Control permission for data plane traffic coming from public networks while private endpoint is enabled. </param>
        /// <param name="eventState"> DICOM Service event support status. </param>
        /// <param name="encryption"> The encryption settings of the DICOM service. </param>
        /// <param name="storageConfiguration"> The configuration of external storage account. </param>
        /// <param name="isDataPartitionsEnabled"> If data partitions is enabled or not. </param>
        internal DicomService(IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData, SystemData systemData, HealthcareApisProvisioningState? provisioningState, DicomServiceAuthenticationConfiguration authenticationConfiguration, DicomServiceCorsConfiguration corsConfiguration, Uri serviceUri, IReadOnlyList<HealthcareApisPrivateEndpointConnectionData> privateEndpointConnections, HealthcareApisPublicNetworkAccess? publicNetworkAccess, FhirServiceEventState? eventState, Encryption encryption, HealthcareApisServiceStorageConfiguration storageConfiguration, bool? isDataPartitionsEnabled) : base(tags, serializedAdditionalRawData)
        {
            SystemData = systemData;
            ProvisioningState = provisioningState;
            AuthenticationConfiguration = authenticationConfiguration;
            CorsConfiguration = corsConfiguration;
            ServiceUri = serviceUri;
            PrivateEndpointConnections = privateEndpointConnections;
            PublicNetworkAccess = publicNetworkAccess;
            EventState = eventState;
            Encryption = encryption;
            StorageConfiguration = storageConfiguration;
            IsDataPartitionsEnabled = isDataPartitionsEnabled;
        }

        /// <summary> Metadata pertaining to creation and last modification of the resource. </summary>
        public SystemData SystemData { get; }
        /// <summary> The provisioning state. </summary>
        public HealthcareApisProvisioningState? ProvisioningState { get; }
        /// <summary> Dicom Service authentication configuration. </summary>
        public DicomServiceAuthenticationConfiguration AuthenticationConfiguration { get; set; }
        /// <summary> Dicom Service Cors configuration. </summary>
        public DicomServiceCorsConfiguration CorsConfiguration { get; set; }
        /// <summary> The url of the Dicom Services. </summary>
        public Uri ServiceUri { get; }
        /// <summary> The list of private endpoint connections that are set up for this resource. </summary>
        public IReadOnlyList<HealthcareApisPrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary> Control permission for data plane traffic coming from public networks while private endpoint is enabled. </summary>
        public HealthcareApisPublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary> DICOM Service event support status. </summary>
        public FhirServiceEventState? EventState { get; }
        /// <summary> The encryption settings of the DICOM service. </summary>
        internal Encryption Encryption { get; set; }
        /// <summary> The URL of the key to use for encryption. </summary>
        public Uri KeyEncryptionKeyUri
        {
            get => Encryption is null ? default : Encryption.KeyEncryptionKeyUri;
            set
            {
                if (Encryption is null)
                    Encryption = new Encryption();
                Encryption.KeyEncryptionKeyUri = value;
            }
        }

        /// <summary> The configuration of external storage account. </summary>
        public HealthcareApisServiceStorageConfiguration StorageConfiguration { get; set; }
        /// <summary> If data partitions is enabled or not. </summary>
        public bool? IsDataPartitionsEnabled { get; set; }
    }
}
