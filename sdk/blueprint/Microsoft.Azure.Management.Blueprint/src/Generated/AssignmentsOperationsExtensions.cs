// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Blueprint
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AssignmentsOperations.
    /// </summary>
    public static partial class AssignmentsOperationsExtensions
    {
            /// <summary>
            /// Create or update a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='assignment'>
            /// Blueprint assignment object to save.
            /// </param>
            public static Assignment CreateOrUpdate(this IAssignmentsOperations operations, string resourceScope, string assignmentName, Assignment assignment)
            {
                return operations.CreateOrUpdateAsync(resourceScope, assignmentName, assignment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='assignment'>
            /// Blueprint assignment object to save.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Assignment> CreateOrUpdateAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, Assignment assignment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceScope, assignmentName, assignment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            public static Assignment Get(this IAssignmentsOperations operations, string resourceScope, string assignmentName)
            {
                return operations.GetAsync(resourceScope, assignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Assignment> GetAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceScope, assignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='deleteBehavior'>
            /// When deleteBehavior=all, the resources that were created by the blueprint
            /// assignment will be deleted. Possible values include: 'none', 'all'
            /// </param>
            public static Assignment Delete(this IAssignmentsOperations operations, string resourceScope, string assignmentName, string deleteBehavior = default(string))
            {
                return operations.DeleteAsync(resourceScope, assignmentName, deleteBehavior).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a blueprint assignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='deleteBehavior'>
            /// When deleteBehavior=all, the resources that were created by the blueprint
            /// assignment will be deleted. Possible values include: 'none', 'all'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Assignment> DeleteAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, string deleteBehavior = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceScope, assignmentName, deleteBehavior, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Blueprints service SPN objectId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            public static WhoIsBlueprintContract WhoIsBlueprint(this IAssignmentsOperations operations, string resourceScope, string assignmentName)
            {
                return operations.WhoIsBlueprintAsync(resourceScope, assignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Blueprints service SPN objectId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='assignmentName'>
            /// Name of the blueprint assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WhoIsBlueprintContract> WhoIsBlueprintAsync(this IAssignmentsOperations operations, string resourceScope, string assignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WhoIsBlueprintWithHttpMessagesAsync(resourceScope, assignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List blueprint assignments within a subscription or a management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            public static IPage<Assignment> List(this IAssignmentsOperations operations, string resourceScope)
            {
                return operations.ListAsync(resourceScope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List blueprint assignments within a subscription or a management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceScope'>
            /// The scope of the resource. Valid scopes are: management group (format:
            /// '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            /// subscription (format: '/subscriptions/{subscriptionId}').
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Assignment>> ListAsync(this IAssignmentsOperations operations, string resourceScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List blueprint assignments within a subscription or a management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Assignment> ListNext(this IAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List blueprint assignments within a subscription or a management group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Assignment>> ListNextAsync(this IAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
