// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Blueprint.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represent a parameter with constrains and metadata.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ParameterDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>
        public ParameterDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>
        /// <param name="type">Allowed data types for Resource Manager template
        /// parameters. Possible values include: 'string', 'array', 'bool',
        /// 'int', 'object', 'secureObject', 'secureString'</param>
        /// <param name="displayName">DisplayName of this
        /// parameter/resourceGroup.</param>
        /// <param name="description">Description of this
        /// parameter/resourceGroup.</param>
        /// <param name="strongType">StrongType for UI to render rich
        /// experience during blueprint assignment. Supported strong types are
        /// resourceType, principalId and location.</param>
        /// <param name="defaultValue">Default Value for this
        /// parameter.</param>
        /// <param name="allowedValues">Array of allowed values for this
        /// parameter.</param>
        public ParameterDefinition(string type, string displayName = default(string), string description = default(string), string strongType = default(string), object defaultValue = default(object), IList<object> allowedValues = default(IList<object>))
        {
            Type = type;
            DisplayName = displayName;
            Description = description;
            StrongType = strongType;
            DefaultValue = defaultValue;
            AllowedValues = allowedValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets allowed data types for Resource Manager template
        /// parameters. Possible values include: 'string', 'array', 'bool',
        /// 'int', 'object', 'secureObject', 'secureString'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets displayName of this parameter/resourceGroup.
        /// </summary>
        [JsonProperty(PropertyName = "metadata.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets description of this parameter/resourceGroup.
        /// </summary>
        [JsonProperty(PropertyName = "metadata.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets strongType for UI to render rich experience during
        /// blueprint assignment. Supported strong types are resourceType,
        /// principalId and location.
        /// </summary>
        [JsonProperty(PropertyName = "metadata.strongType")]
        public string StrongType { get; set; }

        /// <summary>
        /// Gets or sets default Value for this parameter.
        /// </summary>
        [JsonProperty(PropertyName = "defaultValue")]
        public object DefaultValue { get; set; }

        /// <summary>
        /// Gets or sets array of allowed values for this parameter.
        /// </summary>
        [JsonProperty(PropertyName = "allowedValues")]
        public IList<object> AllowedValues { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 256);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 500);
                }
            }
            if (StrongType != null)
            {
                if (StrongType.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "StrongType", 64);
                }
            }
        }
    }
}
