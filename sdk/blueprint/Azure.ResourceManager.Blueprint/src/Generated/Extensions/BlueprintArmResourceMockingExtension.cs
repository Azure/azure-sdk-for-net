// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Blueprint;

namespace Azure.ResourceManager.Blueprint.Mocking
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    public partial class BlueprintArmResourceMockingExtension : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="BlueprintArmResourceMockingExtension"/> class for mocking. </summary>
        protected BlueprintArmResourceMockingExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BlueprintArmResourceMockingExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal BlueprintArmResourceMockingExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of BlueprintResources in the ArmResource. </summary>
        /// <returns> An object representing collection of BlueprintResources and their operations over a BlueprintResource. </returns>
        public virtual BlueprintCollection GetBlueprints()
        {
            return GetCachedClient(Client => new BlueprintCollection(Client, Id));
        }

        /// <summary>
        /// Get a blueprint definition.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Blueprints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="blueprintName"> Name of the blueprint definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="blueprintName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="blueprintName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<BlueprintResource>> GetBlueprintAsync(string blueprintName, CancellationToken cancellationToken = default)
        {
            return await GetBlueprints().GetAsync(blueprintName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a blueprint definition.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Blueprints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="blueprintName"> Name of the blueprint definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="blueprintName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="blueprintName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<BlueprintResource> GetBlueprint(string blueprintName, CancellationToken cancellationToken = default)
        {
            return GetBlueprints().Get(blueprintName, cancellationToken);
        }

        /// <summary> Gets a collection of AssignmentResources in the ArmResource. </summary>
        /// <returns> An object representing collection of AssignmentResources and their operations over a AssignmentResource. </returns>
        public virtual AssignmentCollection GetAssignments()
        {
            return GetCachedClient(Client => new AssignmentCollection(Client, Id));
        }

        /// <summary>
        /// Get a blueprint assignment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assignmentName"> Name of the blueprint assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssignmentResource>> GetAssignmentAsync(string assignmentName, CancellationToken cancellationToken = default)
        {
            return await GetAssignments().GetAsync(assignmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a blueprint assignment.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceScope}/providers/Microsoft.Blueprint/blueprintAssignments/{assignmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Assignments_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assignmentName"> Name of the blueprint assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assignmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssignmentResource> GetAssignment(string assignmentName, CancellationToken cancellationToken = default)
        {
            return GetAssignments().Get(assignmentName, cancellationToken);
        }
    }
}
