// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Blueprint
{
    /// <summary>
    /// A Class representing a BlueprintVersionArtifact along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="BlueprintVersionArtifactResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetBlueprintVersionArtifactResource method.
    /// Otherwise you can get one from its parent resource <see cref="PublishedBlueprintResource" /> using the GetBlueprintVersionArtifact method.
    /// </summary>
    public partial class BlueprintVersionArtifactResource : ArtifactResource
    {
        /// <summary> Generate the resource identifier of a <see cref="BlueprintVersionArtifactResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string resourceScope, string blueprintName, string versionId, string artifactName)
        {
            var resourceId = $"{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _blueprintVersionArtifactPublishedArtifactsClientDiagnostics;
        private readonly PublishedArtifactsRestOperations _blueprintVersionArtifactPublishedArtifactsRestClient;

        /// <summary> Initializes a new instance of the <see cref="BlueprintVersionArtifactResource"/> class for mocking. </summary>
        protected BlueprintVersionArtifactResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "BlueprintVersionArtifactResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal BlueprintVersionArtifactResource(ArmClient client, ArtifactData data) : base(client, data)
        {
            _blueprintVersionArtifactPublishedArtifactsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Blueprint", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string blueprintVersionArtifactPublishedArtifactsApiVersion);
            _blueprintVersionArtifactPublishedArtifactsRestClient = new PublishedArtifactsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, blueprintVersionArtifactPublishedArtifactsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Initializes a new instance of the <see cref="BlueprintVersionArtifactResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal BlueprintVersionArtifactResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _blueprintVersionArtifactPublishedArtifactsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Blueprint", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string blueprintVersionArtifactPublishedArtifactsApiVersion);
            _blueprintVersionArtifactPublishedArtifactsRestClient = new PublishedArtifactsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, blueprintVersionArtifactPublishedArtifactsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Blueprint/blueprints/versions/artifacts";

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// The core implementation for operation Get
        /// Get an artifact for a published blueprint definition.
        /// Request Path: /{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}
        /// Operation Id: PublishedArtifacts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override async Task<Response<ArtifactResource>> GetCoreAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _blueprintVersionArtifactPublishedArtifactsClientDiagnostics.CreateScope("BlueprintVersionArtifactResource.GetCore");
            scope.Start();
            try
            {
                var response = await _blueprintVersionArtifactPublishedArtifactsRestClient.GetAsync(Id.Parent.Parent.Parent, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(GetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an artifact for a published blueprint definition.
        /// Request Path: /{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}
        /// Operation Id: PublishedArtifacts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public new virtual async Task<Response<BlueprintVersionArtifactResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            var value = await GetCoreAsync(cancellationToken).ConfigureAwait(false);
            return Response.FromValue((BlueprintVersionArtifactResource)value.Value, value.GetRawResponse());
        }

        /// <summary>
        /// The core implementation for operation Get
        /// Get an artifact for a published blueprint definition.
        /// Request Path: /{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}
        /// Operation Id: PublishedArtifacts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        protected override Response<ArtifactResource> GetCore(CancellationToken cancellationToken = default)
        {
            using var scope = _blueprintVersionArtifactPublishedArtifactsClientDiagnostics.CreateScope("BlueprintVersionArtifactResource.GetCore");
            scope.Start();
            try
            {
                var response = _blueprintVersionArtifactPublishedArtifactsRestClient.Get(Id.Parent.Parent.Parent, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(GetResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an artifact for a published blueprint definition.
        /// Request Path: /{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}
        /// Operation Id: PublishedArtifacts_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public new virtual Response<BlueprintVersionArtifactResource> Get(CancellationToken cancellationToken = default)
        {
            var value = GetCore(cancellationToken);
            return Response.FromValue((BlueprintVersionArtifactResource)value.Value, value.GetRawResponse());
        }
    }
}
