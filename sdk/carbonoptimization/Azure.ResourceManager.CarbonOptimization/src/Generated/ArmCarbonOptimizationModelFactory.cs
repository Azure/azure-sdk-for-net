// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmCarbonOptimizationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.QueryFilter"/>. </summary>
        /// <param name="reportType"> The ReportType requested for carbon emissions data. Required. Specifies how data is aggregated and displayed in the output, as explained in the ReportTypeEnum. </param>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <returns> A new <see cref="Models.QueryFilter"/> instance for mocking. </returns>
        public static QueryFilter QueryFilter(string reportType = null, DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new UnknownQueryFilter(
                reportType == null ? default : new ReportTypeEnum(reportType),
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OverallSummaryReportQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <returns> A new <see cref="Models.OverallSummaryReportQueryFilter"/> instance for mocking. </returns>
        public static OverallSummaryReportQueryFilter OverallSummaryReportQueryFilter(DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new OverallSummaryReportQueryFilter(
                ReportTypeEnum.OverallSummaryReport,
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonthlySummaryReportQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <returns> A new <see cref="Models.MonthlySummaryReportQueryFilter"/> instance for mocking. </returns>
        public static MonthlySummaryReportQueryFilter MonthlySummaryReportQueryFilter(DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new MonthlySummaryReportQueryFilter(
                ReportTypeEnum.MonthlySummaryReport,
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TopItemsSummaryReportQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <param name="categoryType"> Specifies the category type for which to retrieve top-emitting items. See supported values defined in CategoryTypeEnum. </param>
        /// <param name="topItems"> The number of top items to return, based on emissions. This value must be between 1 and 10. </param>
        /// <returns> A new <see cref="Models.TopItemsSummaryReportQueryFilter"/> instance for mocking. </returns>
        public static TopItemsSummaryReportQueryFilter TopItemsSummaryReportQueryFilter(DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null, CategoryTypeEnum categoryType = default, int topItems = default)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new TopItemsSummaryReportQueryFilter(
                ReportTypeEnum.TopItemsSummaryReport,
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null,
                categoryType,
                topItems);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TopItemsMonthlySummaryReportQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <param name="categoryType"> Specifies the category type to retrieve top-emitting items, aggregated by month. See supported types in CategoryTypeEnum. </param>
        /// <param name="topItems"> The number of top items to return, based on emissions. Must be between 1 and 10. </param>
        /// <returns> A new <see cref="Models.TopItemsMonthlySummaryReportQueryFilter"/> instance for mocking. </returns>
        public static TopItemsMonthlySummaryReportQueryFilter TopItemsMonthlySummaryReportQueryFilter(DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null, CategoryTypeEnum categoryType = default, int topItems = default)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new TopItemsMonthlySummaryReportQueryFilter(
                ReportTypeEnum.TopItemsMonthlySummaryReport,
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null,
                categoryType,
                topItems);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ItemDetailsQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01). </param>
        /// <param name="subscriptionList"> List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100. </param>
        /// <param name="resourceGroupUrlList"> List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase. </param>
        /// <param name="resourceTypeList"> List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'. </param>
        /// <param name="locationList"> List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names. </param>
        /// <param name="carbonScopeList"> List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes. </param>
        /// <param name="categoryType"> Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription. See supported types in CategoryTypeEnum. </param>
        /// <param name="orderBy"> The column name to order the results by. See supported values in OrderByColumnEnum. </param>
        /// <param name="sortDirection"> Direction for sorting results. See supported values in SortDirectionEnum. </param>
        /// <param name="pageSize"> Number of items to return in one request, max value is 5000. </param>
        /// <param name="skipToken"> Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response if additional data pages are available. </param>
        /// <returns> A new <see cref="Models.ItemDetailsQueryFilter"/> instance for mocking. </returns>
        public static ItemDetailsQueryFilter ItemDetailsQueryFilter(DateRange dateRange = null, IEnumerable<string> subscriptionList = null, IEnumerable<string> resourceGroupUrlList = null, IEnumerable<string> resourceTypeList = null, IEnumerable<string> locationList = null, IEnumerable<EmissionScopeEnum> carbonScopeList = null, CategoryTypeEnum categoryType = default, OrderByColumnEnum orderBy = default, SortDirectionEnum sortDirection = default, int pageSize = default, string skipToken = null)
        {
            subscriptionList ??= new List<string>();
            resourceGroupUrlList ??= new List<string>();
            resourceTypeList ??= new List<string>();
            locationList ??= new List<string>();
            carbonScopeList ??= new List<EmissionScopeEnum>();

            return new ItemDetailsQueryFilter(
                ReportTypeEnum.ItemDetailsReport,
                dateRange,
                subscriptionList?.ToList(),
                resourceGroupUrlList?.ToList(),
                resourceTypeList?.ToList(),
                locationList?.ToList(),
                carbonScopeList?.ToList(),
                serializedAdditionalRawData: null,
                categoryType,
                orderBy,
                sortDirection,
                pageSize,
                skipToken);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmission"/>. </summary>
        /// <param name="dataType"> The data type of the query result, indicating the format of the returned response. </param>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <returns> A new <see cref="Models.CarbonEmission"/> instance for mocking. </returns>
        public static CarbonEmission CarbonEmission(string dataType = null, double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null)
        {
            return new UnknownCarbonEmission(
                dataType == null ? default : new ResponseDataTypeEnum(dataType),
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionOverallSummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <returns> A new <see cref="Models.CarbonEmissionOverallSummary"/> instance for mocking. </returns>
        public static CarbonEmissionOverallSummary CarbonEmissionOverallSummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null)
        {
            return new CarbonEmissionOverallSummary(
                ResponseDataTypeEnum.OverallSummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionMonthlySummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="date"> The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01). </param>
        /// <param name="carbonIntensity"> Carbon intensity for the specified month, typically in units of kgCO2E per unit of normalized usage. </param>
        /// <returns> A new <see cref="Models.CarbonEmissionMonthlySummary"/> instance for mocking. </returns>
        public static CarbonEmissionMonthlySummary CarbonEmissionMonthlySummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string date = null, double carbonIntensity = default)
        {
            return new CarbonEmissionMonthlySummary(
                ResponseDataTypeEnum.MonthlySummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                date,
                carbonIntensity);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionTopItemsSummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> The identifier of the item being reported on, which could refer to the resource name, resource type name, location, resource group name, or subscription ID, depending on the specified category type. </param>
        /// <param name="categoryType"> The category type of the item. This defines which dimension the emissions are aggregated by, and the supported values are defined in CategoryTypeEnum (e.g., Subscription, ResourceGroup, Resource, etc.). </param>
        /// <returns> A new <see cref="Models.CarbonEmissionTopItemsSummary"/> instance for mocking. </returns>
        public static CarbonEmissionTopItemsSummary CarbonEmissionTopItemsSummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default)
        {
            return new CarbonEmissionTopItemsSummary(
                ResponseDataTypeEnum.TopItemsSummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceCarbonEmissionTopItemsSummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> The resource name of the resource for the Resource Category. </param>
        /// <param name="categoryType"> The category type of the item. This defines which dimension the emissions are aggregated by, and the supported values are defined in CategoryTypeEnum (e.g., Subscription, ResourceGroup, Resource, etc.). </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroup"> Resource group name. </param>
        /// <param name="resourceId"> Resource Id, The URI of the resource for the Resource Category. This identifies the resource being reported. </param>
        /// <returns> A new <see cref="Models.ResourceCarbonEmissionTopItemsSummary"/> instance for mocking. </returns>
        public static ResourceCarbonEmissionTopItemsSummary ResourceCarbonEmissionTopItemsSummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string subscriptionId = null, string resourceGroup = null, string resourceId = null)
        {
            return new ResourceCarbonEmissionTopItemsSummary(
                ResponseDataTypeEnum.ResourceTopItemsSummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                subscriptionId,
                resourceGroup,
                resourceId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceGroupCarbonEmissionTopItemsSummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> The resourceGroup name of the resource for ResourceGroup Category. </param>
        /// <param name="categoryType"> ResourceGroup Item category. </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroupUri"> Resource Group url, value format is '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}'. </param>
        /// <returns> A new <see cref="Models.ResourceGroupCarbonEmissionTopItemsSummary"/> instance for mocking. </returns>
        public static ResourceGroupCarbonEmissionTopItemsSummary ResourceGroupCarbonEmissionTopItemsSummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string subscriptionId = null, string resourceGroupUri = null)
        {
            return new ResourceGroupCarbonEmissionTopItemsSummary(
                ResponseDataTypeEnum.ResourceGroupTopItemsSummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                subscriptionId,
                resourceGroupUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionTopItemMonthlySummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> Item name, it can be resource name, resource type name, location, resource group name or subscriptionId. It depends on category type. </param>
        /// <param name="itemType"> Item type. </param>
        /// <param name="categoryType"> Item category, see supported type value defined in CategoryTypeEnum. </param>
        /// <param name="date"> The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01). </param>
        /// <returns> A new <see cref="Models.CarbonEmissionTopItemMonthlySummary"/> instance for mocking. </returns>
        public static CarbonEmissionTopItemMonthlySummary CarbonEmissionTopItemMonthlySummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, string itemType = null, CategoryTypeEnum categoryType = default, string date = null)
        {
            return new CarbonEmissionTopItemMonthlySummary(
                ResponseDataTypeEnum.TopItemsMonthlySummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                itemType,
                categoryType,
                date);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceCarbonEmissionTopItemMonthlySummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> The resource name of resource for Resource Category. </param>
        /// <param name="categoryType"> Resource Item category. </param>
        /// <param name="date"> Monthly date string, format is yyyy-MM-dd. </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroup"> Resource Group. </param>
        /// <param name="resourceId"> The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <returns> A new <see cref="Models.ResourceCarbonEmissionTopItemMonthlySummary"/> instance for mocking. </returns>
        public static ResourceCarbonEmissionTopItemMonthlySummary ResourceCarbonEmissionTopItemMonthlySummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string date = null, string subscriptionId = null, string resourceGroup = null, string resourceId = null)
        {
            return new ResourceCarbonEmissionTopItemMonthlySummary(
                ResponseDataTypeEnum.ResourceTopItemsMonthlySummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                date,
                subscriptionId,
                resourceGroup,
                resourceId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceGroupCarbonEmissionTopItemMonthlySummary"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> It's resource group name for ResourceGroup category. </param>
        /// <param name="categoryType"> ResourceGroup Item category. </param>
        /// <param name="date"> Monthly date string, format is yyyy-MM-dd. </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroupUri"> Resource Group url, the format is '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}'. </param>
        /// <returns> A new <see cref="Models.ResourceGroupCarbonEmissionTopItemMonthlySummary"/> instance for mocking. </returns>
        public static ResourceGroupCarbonEmissionTopItemMonthlySummary ResourceGroupCarbonEmissionTopItemMonthlySummary(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string date = null, string subscriptionId = null, string resourceGroupUri = null)
        {
            return new ResourceGroupCarbonEmissionTopItemMonthlySummary(
                ResponseDataTypeEnum.ResourceGroupTopItemsMonthlySummaryData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                date,
                subscriptionId,
                resourceGroupUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionItemDetail"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> Item name, it can be resource name, resource type name, location, resource group name or subscriptionId. It depends on category type. </param>
        /// <param name="categoryType"> Item category, see supported type value defined in CategoryTypeEnum. </param>
        /// <returns> A new <see cref="Models.CarbonEmissionItemDetail"/> instance for mocking. </returns>
        public static CarbonEmissionItemDetail CarbonEmissionItemDetail(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default)
        {
            return new CarbonEmissionItemDetail(
                ResponseDataTypeEnum.ItemDetailsData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceCarbonEmissionItemDetail"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> It's resource name. </param>
        /// <param name="categoryType"> Resource Item category, see supported value defined in CategoryTypeEnum. </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroup"> Resource Group. </param>
        /// <param name="resourceId"> The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="location"> Resource Location (e.g., 'east us'). </param>
        /// <param name="resourceType"> The type of resource, for example: microsoft.storage/storageaccounts. </param>
        /// <returns> A new <see cref="Models.ResourceCarbonEmissionItemDetail"/> instance for mocking. </returns>
        public static ResourceCarbonEmissionItemDetail ResourceCarbonEmissionItemDetail(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string subscriptionId = null, string resourceGroup = null, string resourceId = null, string location = null, string resourceType = null)
        {
            return new ResourceCarbonEmissionItemDetail(
                ResponseDataTypeEnum.ResourceItemDetailsData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                subscriptionId,
                resourceGroup,
                resourceId,
                location,
                resourceType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceGroupCarbonEmissionItemDetail"/>. </summary>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="itemName"> It's resource group name. </param>
        /// <param name="categoryType"> ResourceGroup Item category. </param>
        /// <param name="subscriptionId"> Subscription Id. </param>
        /// <param name="resourceGroupUri"> Resource Group url, value format is '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}'. </param>
        /// <returns> A new <see cref="Models.ResourceGroupCarbonEmissionItemDetail"/> instance for mocking. </returns>
        public static ResourceGroupCarbonEmissionItemDetail ResourceGroupCarbonEmissionItemDetail(double latestMonthEmissions = default, double previousMonthEmissions = default, double? monthOverMonthEmissionsChangeRatio = null, double? monthlyEmissionsChangeValue = null, string itemName = null, CategoryTypeEnum categoryType = default, string subscriptionId = null, string resourceGroupUri = null)
        {
            return new ResourceGroupCarbonEmissionItemDetail(
                ResponseDataTypeEnum.ResourceGroupItemDetailsData,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData: null,
                itemName,
                categoryType,
                subscriptionId,
                resourceGroupUri);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CarbonEmissionDataAvailableDateRange"/>. </summary>
        /// <param name="startDate"> Start date parameter, format is yyyy-MM-dd. </param>
        /// <param name="endDate"> End date parameter, format is yyyy-MM-dd. </param>
        /// <returns> A new <see cref="Models.CarbonEmissionDataAvailableDateRange"/> instance for mocking. </returns>
        public static CarbonEmissionDataAvailableDateRange CarbonEmissionDataAvailableDateRange(string startDate = null, string endDate = null)
        {
            return new CarbonEmissionDataAvailableDateRange(startDate, endDate, serializedAdditionalRawData: null);
        }
    }
}
