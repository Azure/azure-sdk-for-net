// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Supported category types to be used with QueryParameter. Each type represents a different level of emissions data aggregation. </summary>
    public readonly partial struct CarbonEmissionCategoryType : IEquatable<CarbonEmissionCategoryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CarbonEmissionCategoryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CarbonEmissionCategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SubscriptionValue = "Subscription";
        private const string ResourceGroupValue = "ResourceGroup";
        private const string LocationValue = "Location";
        private const string ResourceValue = "Resource";
        private const string ResourceTypeValue = "ResourceType";

        /// <summary> Emissions aggregated at the subscription level. </summary>
        public static CarbonEmissionCategoryType Subscription { get; } = new CarbonEmissionCategoryType(SubscriptionValue);
        /// <summary> Emissions aggregated at the resource group level. </summary>
        public static CarbonEmissionCategoryType ResourceGroup { get; } = new CarbonEmissionCategoryType(ResourceGroupValue);
        /// <summary> Emissions aggregated at the location level. </summary>
        public static CarbonEmissionCategoryType Location { get; } = new CarbonEmissionCategoryType(LocationValue);
        /// <summary> Emissions aggregated at the resource level. </summary>
        public static CarbonEmissionCategoryType Resource { get; } = new CarbonEmissionCategoryType(ResourceValue);
        /// <summary> Emissions aggregated at the resource type level. </summary>
        public static CarbonEmissionCategoryType ResourceType { get; } = new CarbonEmissionCategoryType(ResourceTypeValue);
        /// <summary> Determines if two <see cref="CarbonEmissionCategoryType"/> values are the same. </summary>
        public static bool operator ==(CarbonEmissionCategoryType left, CarbonEmissionCategoryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CarbonEmissionCategoryType"/> values are not the same. </summary>
        public static bool operator !=(CarbonEmissionCategoryType left, CarbonEmissionCategoryType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CarbonEmissionCategoryType"/>. </summary>
        public static implicit operator CarbonEmissionCategoryType(string value) => new CarbonEmissionCategoryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CarbonEmissionCategoryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CarbonEmissionCategoryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
