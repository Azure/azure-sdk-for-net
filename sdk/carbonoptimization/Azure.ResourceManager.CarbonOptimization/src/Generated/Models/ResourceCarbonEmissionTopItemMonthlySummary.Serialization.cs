// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    public partial class ResourceCarbonEmissionTopItemMonthlySummary : IUtf8JsonSerializable, IJsonModel<ResourceCarbonEmissionTopItemMonthlySummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResourceCarbonEmissionTopItemMonthlySummary>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ResourceCarbonEmissionTopItemMonthlySummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemMonthlySummary)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("itemName"u8);
            writer.WriteStringValue(ItemName);
            writer.WritePropertyName("categoryType"u8);
            writer.WriteStringValue(CategoryType.ToString());
            writer.WritePropertyName("date"u8);
            writer.WriteStringValue(Date);
            writer.WritePropertyName("subscriptionId"u8);
            writer.WriteStringValue(SubscriptionId);
            writer.WritePropertyName("resourceGroup"u8);
            writer.WriteStringValue(ResourceGroup);
            writer.WritePropertyName("resourceId"u8);
            writer.WriteStringValue(ResourceId);
        }

        ResourceCarbonEmissionTopItemMonthlySummary IJsonModel<ResourceCarbonEmissionTopItemMonthlySummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemMonthlySummary)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceCarbonEmissionTopItemMonthlySummary(document.RootElement, options);
        }

        internal static ResourceCarbonEmissionTopItemMonthlySummary DeserializeResourceCarbonEmissionTopItemMonthlySummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string itemName = default;
            CarbonEmissionCategoryType categoryType = default;
            string date = default;
            string subscriptionId = default;
            string resourceGroup = default;
            ResourceIdentifier resourceId = default;
            CarbonEmissionDataType dataType = default;
            double latestMonthEmissions = default;
            double previousMonthEmissions = default;
            double? monthOverMonthEmissionsChangeRatio = default;
            double? monthlyEmissionsChangeValue = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("itemName"u8))
                {
                    itemName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("categoryType"u8))
                {
                    categoryType = new CarbonEmissionCategoryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("date"u8))
                {
                    date = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceGroup"u8))
                {
                    resourceGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dataType"u8))
                {
                    dataType = new CarbonEmissionDataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("latestMonthEmissions"u8))
                {
                    latestMonthEmissions = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("previousMonthEmissions"u8))
                {
                    previousMonthEmissions = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthOverMonthEmissionsChangeRatio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthOverMonthEmissionsChangeRatio = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyEmissionsChangeValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyEmissionsChangeValue = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ResourceCarbonEmissionTopItemMonthlySummary(
                dataType,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                serializedAdditionalRawData,
                itemName,
                categoryType,
                date,
                subscriptionId,
                resourceGroup,
                resourceId);
        }

        BinaryData IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCarbonOptimizationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemMonthlySummary)} does not support writing '{options.Format}' format.");
            }
        }

        ResourceCarbonEmissionTopItemMonthlySummary IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeResourceCarbonEmissionTopItemMonthlySummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemMonthlySummary)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResourceCarbonEmissionTopItemMonthlySummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
