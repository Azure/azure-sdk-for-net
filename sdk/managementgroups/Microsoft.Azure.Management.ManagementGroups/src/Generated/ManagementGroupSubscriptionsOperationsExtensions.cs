// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagementGroupSubscriptionsOperations.
    /// </summary>
    public static partial class ManagementGroupSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Associates existing subscription with the management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            public static SubscriptionUnderManagementGroup Create(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache")
            {
                return operations.CreateAsync(groupId, subscriptionId, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates existing subscription with the management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionUnderManagementGroup> CreateAsync(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(groupId, subscriptionId, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// De-associates subscription from the management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            public static void Delete(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache")
            {
                operations.DeleteAsync(groupId, subscriptionId, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// De-associates subscription from the management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(groupId, subscriptionId, cacheControl, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves details about given subscription which is associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            public static SubscriptionUnderManagementGroup GetSubscription(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache")
            {
                return operations.GetSubscriptionAsync(groupId, subscriptionId, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves details about given subscription which is associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates whether the request should utilize any caches. Populate the
            /// header with 'no-cache' value to bypass existing caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionUnderManagementGroup> GetSubscriptionAsync(this IManagementGroupSubscriptionsOperations operations, string groupId, string subscriptionId, string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionWithHttpMessagesAsync(groupId, subscriptionId, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves details about all subscriptions which are associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='skiptoken'>
            /// Page continuation token is only used if a previous operation returned a
            /// partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a token parameter that specifies a starting
            /// point to use for subsequent calls.
            /// </param>
            public static IPage<SubscriptionUnderManagementGroup> GetSubscriptionsUnderManagementGroup(this IManagementGroupSubscriptionsOperations operations, string groupId, string skiptoken = default(string))
            {
                return operations.GetSubscriptionsUnderManagementGroupAsync(groupId, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves details about all subscriptions which are associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='skiptoken'>
            /// Page continuation token is only used if a previous operation returned a
            /// partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a token parameter that specifies a starting
            /// point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SubscriptionUnderManagementGroup>> GetSubscriptionsUnderManagementGroupAsync(this IManagementGroupSubscriptionsOperations operations, string groupId, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsUnderManagementGroupWithHttpMessagesAsync(groupId, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves details about all subscriptions which are associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SubscriptionUnderManagementGroup> GetSubscriptionsUnderManagementGroupNext(this IManagementGroupSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.GetSubscriptionsUnderManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves details about all subscriptions which are associated with the
            /// management group.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SubscriptionUnderManagementGroup>> GetSubscriptionsUnderManagementGroupNextAsync(this IManagementGroupSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsUnderManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
