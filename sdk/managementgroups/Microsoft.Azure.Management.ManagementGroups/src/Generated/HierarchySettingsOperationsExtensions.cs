// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HierarchySettingsOperations.
    /// </summary>
    public static partial class HierarchySettingsOperationsExtensions
    {
            /// <summary>
            /// Gets all the hierarchy settings defined at the Management Group level.
            /// Settings can only be set on the root Management Group of the hierarchy.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            public static HierarchySettingsList List(this IHierarchySettingsOperations operations, string groupId)
            {
                return operations.ListAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the hierarchy settings defined at the Management Group level.
            /// Settings can only be set on the root Management Group of the hierarchy.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HierarchySettingsList> ListAsync(this IHierarchySettingsOperations operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the hierarchy settings defined at the Management Group level. Settings
            /// can only be set on the root Management Group of the hierarchy.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            public static HierarchySettings Get(this IHierarchySettingsOperations operations, string groupId)
            {
                return operations.GetAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the hierarchy settings defined at the Management Group level. Settings
            /// can only be set on the root Management Group of the hierarchy.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HierarchySettings> GetAsync(this IHierarchySettingsOperations operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the hierarchy settings defined at the Management Group
            /// level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='createTenantSettingsRequest'>
            /// Tenant level settings request parameter.
            /// </param>
            public static HierarchySettings CreateOrUpdate(this IHierarchySettingsOperations operations, string groupId, CreateOrUpdateSettingsRequest createTenantSettingsRequest)
            {
                return operations.CreateOrUpdateAsync(groupId, createTenantSettingsRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the hierarchy settings defined at the Management Group
            /// level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='createTenantSettingsRequest'>
            /// Tenant level settings request parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HierarchySettings> CreateOrUpdateAsync(this IHierarchySettingsOperations operations, string groupId, CreateOrUpdateSettingsRequest createTenantSettingsRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(groupId, createTenantSettingsRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the hierarchy settings defined at the Management Group level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='createTenantSettingsRequest'>
            /// Tenant level settings request parameter.
            /// </param>
            public static HierarchySettings Update(this IHierarchySettingsOperations operations, string groupId, CreateOrUpdateSettingsRequest createTenantSettingsRequest)
            {
                return operations.UpdateAsync(groupId, createTenantSettingsRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the hierarchy settings defined at the Management Group level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='createTenantSettingsRequest'>
            /// Tenant level settings request parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HierarchySettings> UpdateAsync(this IHierarchySettingsOperations operations, string groupId, CreateOrUpdateSettingsRequest createTenantSettingsRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(groupId, createTenantSettingsRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the hierarchy settings defined at the Management Group level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            public static void Delete(this IHierarchySettingsOperations operations, string groupId)
            {
                operations.DeleteAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the hierarchy settings defined at the Management Group level.
            ///
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// Management Group ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IHierarchySettingsOperations operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
