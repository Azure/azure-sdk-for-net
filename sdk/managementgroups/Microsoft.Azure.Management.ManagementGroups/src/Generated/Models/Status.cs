// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Status.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Status
    {
        [EnumMember(Value = "NotStarted")]
        NotStarted,
        [EnumMember(Value = "NotStartedButGroupsExist")]
        NotStartedButGroupsExist,
        [EnumMember(Value = "Started")]
        Started,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Cancelled")]
        Cancelled,
        [EnumMember(Value = "Completed")]
        Completed
    }
    internal static class StatusEnumExtension
    {
        internal static string ToSerializedValue(this Status? value)
        {
            return value == null ? null : ((Status)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Status value)
        {
            switch( value )
            {
                case Status.NotStarted:
                    return "NotStarted";
                case Status.NotStartedButGroupsExist:
                    return "NotStartedButGroupsExist";
                case Status.Started:
                    return "Started";
                case Status.Failed:
                    return "Failed";
                case Status.Cancelled:
                    return "Cancelled";
                case Status.Completed:
                    return "Completed";
            }
            return null;
        }

        internal static Status? ParseStatus(this string value)
        {
            switch( value )
            {
                case "NotStarted":
                    return Status.NotStarted;
                case "NotStartedButGroupsExist":
                    return Status.NotStartedButGroupsExist;
                case "Started":
                    return Status.Started;
                case "Failed":
                    return Status.Failed;
                case "Cancelled":
                    return Status.Cancelled;
                case "Completed":
                    return Status.Completed;
            }
            return null;
        }
    }
}
