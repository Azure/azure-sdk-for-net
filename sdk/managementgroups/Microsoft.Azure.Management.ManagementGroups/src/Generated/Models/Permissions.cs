// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Permissions.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Permissions
    {
        [EnumMember(Value = "noaccess")]
        Noaccess,
        [EnumMember(Value = "view")]
        View,
        [EnumMember(Value = "edit")]
        Edit,
        [EnumMember(Value = "delete")]
        Delete
    }
    internal static class PermissionsEnumExtension
    {
        internal static string ToSerializedValue(this Permissions? value)
        {
            return value == null ? null : ((Permissions)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Permissions value)
        {
            switch( value )
            {
                case Permissions.Noaccess:
                    return "noaccess";
                case Permissions.View:
                    return "view";
                case Permissions.Edit:
                    return "edit";
                case Permissions.Delete:
                    return "delete";
            }
            return null;
        }

        internal static Permissions? ParsePermissions(this string value)
        {
            switch( value )
            {
                case "noaccess":
                    return Permissions.Noaccess;
                case "view":
                    return Permissions.View;
                case "edit":
                    return Permissions.Edit;
                case "delete":
                    return Permissions.Delete;
            }
            return null;
        }
    }
}
