// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagementGroups
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EntitiesOperations.
    /// </summary>
    public static partial class EntitiesOperationsExtensions
    {
            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skiptoken'>
            /// Page continuation token is only used if a previous operation returned a
            /// partial result. If a previous response contains a nextLink element, the
            /// value of the nextLink element will include a token parameter that specifies
            /// a starting point to use for subsequent calls.
            /// </param>
            /// <param name='skip'>
            /// Number of entities to skip over when retrieving results. Passing this in
            /// will override $skipToken.
            /// </param>
            /// <param name='top'>
            /// Number of elements to return when retrieving results. Passing this in will
            /// override $skipToken.
            /// </param>
            /// <param name='select'>
            /// This parameter specifies the fields to include in the response. Can include
            /// any combination of
            /// Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
            /// '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'.
            /// When specified the $select parameter can override select in $skipToken.
            /// </param>
            /// <param name='search'>
            /// The $search parameter is used in conjunction with the $filter parameter to
            /// return three different outputs depending on the parameter passed in. With
            /// $search=AllowedParents the API will return the entity info of all groups
            /// that the requested entity will be able to reparent to as determined by the
            /// user's permissions. With $search=AllowedChildren the API will return the
            /// entity info of all entities that can be added as children of the requested
            /// entity. With $search=ParentAndFirstLevelChildren the API will return the
            /// parent and  first level of children that the user has either direct access
            /// to or indirect access via one of their descendants. Possible values
            /// include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren'
            /// </param>
            /// <param name='filter'>
            /// The filter parameter allows you to filter on the the name or display name
            /// fields. You can check for equality on the name field (e.g. name eq
            /// '{entityName}')  and you can check for substrings on either the name or
            /// display name fields(e.g. contains(name, '{substringToSearch}'),
            /// contains(displayName, '{substringToSearch')). Note that the '{entityName}'
            /// and '{substringToSearch}' fields are checked case insensitively.
            /// </param>
            /// <param name='view'>
            /// The view parameter allows clients to filter the type of data that is
            /// returned by the getEntities call. Possible values include: 'FullHierarchy',
            /// 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
            /// </param>
            /// <param name='groupName'>
            /// A filter which allows the get entities call to focus on a particular group
            /// (i.e. "$filter=name eq 'groupName'")
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            public static IPage<EntityInfo> List(this IEntitiesOperations operations, string skiptoken = default(string), int? skip = default(int?), int? top = default(int?), string select = default(string), string search = default(string), string filter = default(string), string view = default(string), string groupName = default(string), string cacheControl = "no-cache")
            {
                return operations.ListAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skiptoken'>
            /// Page continuation token is only used if a previous operation returned a
            /// partial result. If a previous response contains a nextLink element, the
            /// value of the nextLink element will include a token parameter that specifies
            /// a starting point to use for subsequent calls.
            /// </param>
            /// <param name='skip'>
            /// Number of entities to skip over when retrieving results. Passing this in
            /// will override $skipToken.
            /// </param>
            /// <param name='top'>
            /// Number of elements to return when retrieving results. Passing this in will
            /// override $skipToken.
            /// </param>
            /// <param name='select'>
            /// This parameter specifies the fields to include in the response. Can include
            /// any combination of
            /// Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
            /// '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'.
            /// When specified the $select parameter can override select in $skipToken.
            /// </param>
            /// <param name='search'>
            /// The $search parameter is used in conjunction with the $filter parameter to
            /// return three different outputs depending on the parameter passed in. With
            /// $search=AllowedParents the API will return the entity info of all groups
            /// that the requested entity will be able to reparent to as determined by the
            /// user's permissions. With $search=AllowedChildren the API will return the
            /// entity info of all entities that can be added as children of the requested
            /// entity. With $search=ParentAndFirstLevelChildren the API will return the
            /// parent and  first level of children that the user has either direct access
            /// to or indirect access via one of their descendants. Possible values
            /// include: 'AllowedParents', 'AllowedChildren', 'ParentAndFirstLevelChildren'
            /// </param>
            /// <param name='filter'>
            /// The filter parameter allows you to filter on the the name or display name
            /// fields. You can check for equality on the name field (e.g. name eq
            /// '{entityName}')  and you can check for substrings on either the name or
            /// display name fields(e.g. contains(name, '{substringToSearch}'),
            /// contains(displayName, '{substringToSearch')). Note that the '{entityName}'
            /// and '{substringToSearch}' fields are checked case insensitively.
            /// </param>
            /// <param name='view'>
            /// The view parameter allows clients to filter the type of data that is
            /// returned by the getEntities call. Possible values include: 'FullHierarchy',
            /// 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
            /// </param>
            /// <param name='groupName'>
            /// A filter which allows the get entities call to focus on a particular group
            /// (i.e. "$filter=name eq 'groupName'")
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EntityInfo>> ListAsync(this IEntitiesOperations operations, string skiptoken = default(string), int? skip = default(int?), int? top = default(int?), string select = default(string), string search = default(string), string filter = default(string), string view = default(string), string groupName = default(string), string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            public static IPage<EntityInfo> ListNext(this IEntitiesOperations operations, string nextPageLink, string cacheControl = "no-cache")
            {
                return operations.ListNextAsync(nextPageLink, cacheControl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all entities (Management Groups, Subscriptions, etc.) for the
            /// authenticated user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cacheControl'>
            /// Indicates that the request shouldn't utilize any caches.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EntityInfo>> ListNextAsync(this IEntitiesOperations operations, string nextPageLink, string cacheControl = "no-cache", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, cacheControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
