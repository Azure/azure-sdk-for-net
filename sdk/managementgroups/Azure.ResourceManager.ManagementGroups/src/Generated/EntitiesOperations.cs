// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ManagementGroups.Models;

namespace Azure.ResourceManager.ManagementGroups
{
    /// <summary> The Entities service client. </summary>
    public partial class EntitiesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal EntitiesRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of EntitiesOperations for mocking. </summary>
        protected EntitiesOperations()
        {
        }

        /// <summary> Initializes a new instance of EntitiesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal EntitiesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2021-04-01")
        {
            RestClient = new EntitiesRestOperations(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
        /// .
        /// </summary>
        /// <param name="skiptoken">
        /// Page continuation token is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        /// .
        /// </param>
        /// <param name="skip"> Number of entities to skip over when retrieving results. Passing this in will override $skipToken. </param>
        /// <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
        /// <param name="select"> This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &apos;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&apos;. When specified the $select parameter can override select in $skipToken. </param>
        /// <param name="search">
        /// The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
        /// With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&apos;s permissions.
        /// With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
        /// With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
        /// With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
        /// With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&apos;s descendants for it to show up in the results.
        /// </param>
        /// <param name="filter"> The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &apos;{entityName}&apos;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &apos;{substringToSearch}&apos;), contains(displayName, &apos;{substringToSearch&apos;)). Note that the &apos;{entityName}&apos; and &apos;{substringToSearch}&apos; fields are checked case insensitively. </param>
        /// <param name="view"> The view parameter allows clients to filter the type of data that is returned by the getEntities call. </param>
        /// <param name="groupName"> A filter which allows the get entities call to focus on a particular group (i.e. &quot;$filter=name eq &apos;groupName&apos;&quot;). </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<EntityInfo> ListAsync(string skiptoken = null, int? skip = null, int? top = null, string select = null, Enum2? search = null, string filter = null, Enum3? view = null, string groupName = null, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<EntityInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EntitiesOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<EntityInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EntitiesOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all entities (Management Groups, Subscriptions, etc.) for the authenticated user.
        /// .
        /// </summary>
        /// <param name="skiptoken">
        /// Page continuation token is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        /// .
        /// </param>
        /// <param name="skip"> Number of entities to skip over when retrieving results. Passing this in will override $skipToken. </param>
        /// <param name="top"> Number of elements to return when retrieving results. Passing this in will override $skipToken. </param>
        /// <param name="select"> This parameter specifies the fields to include in the response. Can include any combination of Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g. &apos;$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain&apos;. When specified the $select parameter can override select in $skipToken. </param>
        /// <param name="search">
        /// The $search parameter is used in conjunction with the $filter parameter to return three different outputs depending on the parameter passed in.
        /// With $search=AllowedParents the API will return the entity info of all groups that the requested entity will be able to reparent to as determined by the user&apos;s permissions.
        /// With $search=AllowedChildren the API will return the entity info of all entities that can be added as children of the requested entity.
        /// With $search=ParentAndFirstLevelChildren the API will return the parent and  first level of children that the user has either direct access to or indirect access via one of their descendants.
        /// With $search=ParentOnly the API will return only the group if the user has access to at least one of the descendants of the group.
        /// With $search=ChildrenOnly the API will return only the first level of children of the group entity info specified in $filter.  The user must have direct access to the children entities or one of it&apos;s descendants for it to show up in the results.
        /// </param>
        /// <param name="filter"> The filter parameter allows you to filter on the the name or display name fields. You can check for equality on the name field (e.g. name eq &apos;{entityName}&apos;)  and you can check for substrings on either the name or display name fields(e.g. contains(name, &apos;{substringToSearch}&apos;), contains(displayName, &apos;{substringToSearch&apos;)). Note that the &apos;{entityName}&apos; and &apos;{substringToSearch}&apos; fields are checked case insensitively. </param>
        /// <param name="view"> The view parameter allows clients to filter the type of data that is returned by the getEntities call. </param>
        /// <param name="groupName"> A filter which allows the get entities call to focus on a particular group (i.e. &quot;$filter=name eq &apos;groupName&apos;&quot;). </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<EntityInfo> List(string skiptoken = null, int? skip = null, int? top = null, string select = null, Enum2? search = null, string filter = null, Enum3? view = null, string groupName = null, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            Page<EntityInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EntitiesOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<EntityInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("EntitiesOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, skiptoken, skip, top, select, search, filter, view, groupName, cacheControl, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
