// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagementGroups.Models
{
    /// <summary> The users specific permissions to this item. </summary>
    public readonly partial struct Permissions : IEquatable<Permissions>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Permissions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Permissions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoaccessValue = "noaccess";
        private const string ViewValue = "view";
        private const string EditValue = "edit";
        private const string DeleteValue = "delete";

        /// <summary> noaccess. </summary>
        public static Permissions Noaccess { get; } = new Permissions(NoaccessValue);
        /// <summary> view. </summary>
        public static Permissions View { get; } = new Permissions(ViewValue);
        /// <summary> edit. </summary>
        public static Permissions Edit { get; } = new Permissions(EditValue);
        /// <summary> delete. </summary>
        public static Permissions Delete { get; } = new Permissions(DeleteValue);
        /// <summary> Determines if two <see cref="Permissions"/> values are the same. </summary>
        public static bool operator ==(Permissions left, Permissions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Permissions"/> values are not the same. </summary>
        public static bool operator !=(Permissions left, Permissions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Permissions"/>. </summary>
        public static implicit operator Permissions(string value) => new Permissions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Permissions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Permissions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
