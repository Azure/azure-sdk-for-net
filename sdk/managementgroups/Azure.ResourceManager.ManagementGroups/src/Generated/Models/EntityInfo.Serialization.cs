// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagementGroups.Models
{
    public partial class EntityInfo
    {
        internal static EntityInfo DeserializeEntityInfo(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> type = default;
            Optional<string> name = default;
            Optional<string> tenantId = default;
            Optional<string> displayName = default;
            Optional<EntityParentGroupInfo> parent = default;
            Optional<Permissions?> permissions = default;
            Optional<Permissions?> inheritedPermissions = default;
            Optional<int?> numberOfDescendants = default;
            Optional<int?> numberOfChildren = default;
            Optional<int?> numberOfChildGroups = default;
            Optional<IReadOnlyList<string>> parentDisplayNameChain = default;
            Optional<IReadOnlyList<string>> parentNameChain = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        type = null;
                        continue;
                    }
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("tenantId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                tenantId = null;
                                continue;
                            }
                            tenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                displayName = null;
                                continue;
                            }
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("parent"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                parent = null;
                                continue;
                            }
                            parent = EntityParentGroupInfo.DeserializeEntityParentGroupInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("permissions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                permissions = null;
                                continue;
                            }
                            permissions = new Permissions(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("inheritedPermissions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                inheritedPermissions = null;
                                continue;
                            }
                            inheritedPermissions = new Permissions(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("numberOfDescendants"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                numberOfDescendants = null;
                                continue;
                            }
                            numberOfDescendants = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfChildren"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                numberOfChildren = null;
                                continue;
                            }
                            numberOfChildren = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfChildGroups"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                numberOfChildGroups = null;
                                continue;
                            }
                            numberOfChildGroups = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("parentDisplayNameChain"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                parentDisplayNameChain = null;
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            parentDisplayNameChain = array;
                            continue;
                        }
                        if (property0.NameEquals("parentNameChain"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                parentNameChain = null;
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            parentNameChain = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new EntityInfo(id.Value, type.Value, name.Value, tenantId.Value, displayName.Value, parent.Value, Optional.ToNullable(permissions), Optional.ToNullable(inheritedPermissions), Optional.ToNullable(numberOfDescendants), Optional.ToNullable(numberOfChildren), Optional.ToNullable(numberOfChildGroups), Optional.ToList(parentDisplayNameChain), Optional.ToList(parentNameChain));
        }
    }
}
