// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Translation.Document
{
    /// <summary> Status Summary. </summary>
    internal partial class StatusSummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StatusSummary"/>. </summary>
        /// <param name="total"> Total count. </param>
        /// <param name="failed"> Failed count. </param>
        /// <param name="success"> Number of Success. </param>
        /// <param name="inProgress"> Number of in progress. </param>
        /// <param name="notYetStarted"> Count of not yet started. </param>
        /// <param name="cancelled"> Number of cancelled. </param>
        /// <param name="totalCharacterCharged"> Total characters charged by the API. </param>
        internal StatusSummary(int total, int failed, int success, int inProgress, int notYetStarted, int cancelled, long totalCharacterCharged)
        {
            Total = total;
            Failed = failed;
            Success = success;
            InProgress = inProgress;
            NotYetStarted = notYetStarted;
            Cancelled = cancelled;
            TotalCharacterCharged = totalCharacterCharged;
        }

        /// <summary> Initializes a new instance of <see cref="StatusSummary"/>. </summary>
        /// <param name="total"> Total count. </param>
        /// <param name="failed"> Failed count. </param>
        /// <param name="success"> Number of Success. </param>
        /// <param name="inProgress"> Number of in progress. </param>
        /// <param name="notYetStarted"> Count of not yet started. </param>
        /// <param name="cancelled"> Number of cancelled. </param>
        /// <param name="totalCharacterCharged"> Total characters charged by the API. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StatusSummary(int total, int failed, int success, int inProgress, int notYetStarted, int cancelled, long totalCharacterCharged, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Total = total;
            Failed = failed;
            Success = success;
            InProgress = inProgress;
            NotYetStarted = notYetStarted;
            Cancelled = cancelled;
            TotalCharacterCharged = totalCharacterCharged;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StatusSummary"/> for deserialization. </summary>
        internal StatusSummary()
        {
        }

        /// <summary> Total count. </summary>
        public int Total { get; }
        /// <summary> Failed count. </summary>
        public int Failed { get; }
        /// <summary> Number of Success. </summary>
        public int Success { get; }
        /// <summary> Number of in progress. </summary>
        public int InProgress { get; }
        /// <summary> Count of not yet started. </summary>
        public int NotYetStarted { get; }
        /// <summary> Number of cancelled. </summary>
        public int Cancelled { get; }
        /// <summary> Total characters charged by the API. </summary>
        public long TotalCharacterCharged { get; }
    }
}
