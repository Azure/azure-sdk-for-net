<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DocumentTranslateAsync(string,DocumentTranslateContent,string,string,bool?,CancellationToken)">
      <example>
This sample shows how to call DocumentTranslateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

DocumentTranslateContent documentTranslateContent = new DocumentTranslateContent(BinaryData.FromObjectAsJson(new object()));
Response<BinaryData> response = await client.DocumentTranslateAsync("<targetLanguage>", documentTranslateContent);
]]></code>
This sample shows how to call DocumentTranslateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

DocumentTranslateContent documentTranslateContent = new DocumentTranslateContent(BinaryData.FromObjectAsJson(new object()))
{
    Glossary = { BinaryData.FromObjectAsJson(new object()) },
};
Response<BinaryData> response = await client.DocumentTranslateAsync("<targetLanguage>", documentTranslateContent, sourceLanguage: "<sourceLanguage>", category: "<category>", allowFallback: true);
]]></code></example>
    </member>
    <member name="DocumentTranslate(string,DocumentTranslateContent,string,string,bool?,CancellationToken)">
      <example>
This sample shows how to call DocumentTranslate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

DocumentTranslateContent documentTranslateContent = new DocumentTranslateContent(BinaryData.FromObjectAsJson(new object()));
Response<BinaryData> response = client.DocumentTranslate("<targetLanguage>", documentTranslateContent);
]]></code>
This sample shows how to call DocumentTranslate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

DocumentTranslateContent documentTranslateContent = new DocumentTranslateContent(BinaryData.FromObjectAsJson(new object()))
{
    Glossary = { BinaryData.FromObjectAsJson(new object()) },
};
Response<BinaryData> response = client.DocumentTranslate("<targetLanguage>", documentTranslateContent, sourceLanguage: "<sourceLanguage>", category: "<category>", allowFallback: true);
]]></code></example>
    </member>
    <member name="DocumentTranslateAsync(string,RequestContent,string,string,bool?,RequestContext)">
      <example>
This sample shows how to call DocumentTranslateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    document = new object(),
});
Response response = await client.DocumentTranslateAsync("<targetLanguage>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DocumentTranslateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    document = new object(),
    glossary = new object[]
    {
        new object()
    },
});
Response response = await client.DocumentTranslateAsync("<targetLanguage>", content, sourceLanguage: "<sourceLanguage>", category: "<category>", allowFallback: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="DocumentTranslate(string,RequestContent,string,string,bool?,RequestContext)">
      <example>
This sample shows how to call DocumentTranslate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    document = new object(),
});
Response response = client.DocumentTranslate("<targetLanguage>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DocumentTranslate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    document = new object(),
    glossary = new object[]
    {
        new object()
    },
});
Response response = client.DocumentTranslate("<targetLanguage>", content, sourceLanguage: "<sourceLanguage>", category: "<category>", allowFallback: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
  </members>
</doc>