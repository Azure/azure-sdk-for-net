// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Translation.Document
{
    /// <summary> Format types. </summary>
    public readonly partial struct FileFormatType : IEquatable<FileFormatType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileFormatType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileFormatType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DocumentValue = "document";
        private const string GlossaryValue = "glossary";

        /// <summary> Document type file format. </summary>
        public static FileFormatType Document { get; } = new FileFormatType(DocumentValue);
        /// <summary> Glossary type file format. </summary>
        public static FileFormatType Glossary { get; } = new FileFormatType(GlossaryValue);
        /// <summary> Determines if two <see cref="FileFormatType"/> values are the same. </summary>
        public static bool operator ==(FileFormatType left, FileFormatType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileFormatType"/> values are not the same. </summary>
        public static bool operator !=(FileFormatType left, FileFormatType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileFormatType"/>. </summary>
        public static implicit operator FileFormatType(string value) => new FileFormatType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileFormatType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileFormatType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
