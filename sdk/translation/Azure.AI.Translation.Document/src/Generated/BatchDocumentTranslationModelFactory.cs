// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Document.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class BatchDocumentTranslationModelFactory
    {
        /// <summary> Initializes a new instance of TranslationError. </summary>
        /// <param name="code"> Enums containing high level error codes. </param>
        /// <param name="message"> Gets high level error message. </param>
        /// <param name="target">
        /// Gets the source of the error. 
        /// For example it would be &quot;documents&quot; or &quot;document id&quot; in case of invalid document.
        /// </param>
        /// <param name="innerError">
        /// New Inner Error format which conforms to Cognitive Services API Guidelines which is available at https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
        /// This contains required properties ErrorCode, message and optional properties target, details(key value pair), inner error(this can be nested).
        /// </param>
        /// <returns> A new <see cref="Models.TranslationError"/> instance for mocking. </returns>
        public static TranslationError TranslationError(TranslationErrorCode code = default, string message = null, string target = null, InnerTranslationError innerError = null)
        {
            return new TranslationError(code, message, target, innerError);
        }

        /// <summary> Initializes a new instance of InnerTranslationError. </summary>
        /// <param name="code"> Gets code error string. </param>
        /// <param name="message"> Gets high level error message. </param>
        /// <param name="target">
        /// Gets the source of the error. 
        /// For example it would be &quot;documents&quot; or &quot;document id&quot; in case of invalid document.
        /// </param>
        /// <param name="innerError">
        /// New Inner Error format which conforms to Cognitive Services API Guidelines which is available at https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
        /// This contains required properties ErrorCode, message and optional properties target, details(key value pair), inner error(this can be nested).
        /// </param>
        /// <returns> A new <see cref="Models.InnerTranslationError"/> instance for mocking. </returns>
        public static InnerTranslationError InnerTranslationError(string code = null, string message = null, string target = null, InnerTranslationError innerError = null)
        {
            return new InnerTranslationError(code, message, target, innerError);
        }

        /// <summary> Initializes a new instance of TranslationStatus. </summary>
        /// <param name="id"> Id of the operation. </param>
        /// <param name="createdDateTimeUtc"> Operation created date time. </param>
        /// <param name="lastActionDateTimeUtc"> Date time in which the operation&apos;s status has been updated. </param>
        /// <param name="status"> List of possible statuses for job or document. </param>
        /// <param name="error"> This contains an outer error with error code, message, details, target and an inner error with more descriptive details. </param>
        /// <param name="summary"></param>
        /// <returns> A new <see cref="Models.TranslationStatus"/> instance for mocking. </returns>
        public static TranslationStatus TranslationStatus(Guid id = default, DateTimeOffset createdDateTimeUtc = default, DateTimeOffset lastActionDateTimeUtc = default, Status status = default, TranslationError error = null, StatusSummary summary = null)
        {
            return new TranslationStatus(id, createdDateTimeUtc, lastActionDateTimeUtc, status, error, summary);
        }

        /// <summary> Initializes a new instance of StatusSummary. </summary>
        /// <param name="total"> Total count. </param>
        /// <param name="failed"> Failed count. </param>
        /// <param name="success"> Number of Success. </param>
        /// <param name="inProgress"> Number of in progress. </param>
        /// <param name="notYetStarted"> Count of not yet started. </param>
        /// <param name="cancelled"> Number of cancelled. </param>
        /// <param name="totalCharacterCharged"> Total characters charged by the API. </param>
        /// <returns> A new <see cref="Models.StatusSummary"/> instance for mocking. </returns>
        public static StatusSummary StatusSummary(int total = default, int failed = default, int success = default, int inProgress = default, int notYetStarted = default, int cancelled = default, long totalCharacterCharged = default)
        {
            return new StatusSummary(total, failed, success, inProgress, notYetStarted, cancelled, totalCharacterCharged);
        }

        /// <summary> Initializes a new instance of DocumentStatus. </summary>
        /// <param name="path"> Location of the document or folder. </param>
        /// <param name="sourcePath"> Location of the source document. </param>
        /// <param name="createdDateTimeUtc"> Operation created date time. </param>
        /// <param name="lastActionDateTimeUtc"> Date time in which the operation&apos;s status has been updated. </param>
        /// <param name="status"> List of possible statuses for job or document. </param>
        /// <param name="to"> To language. </param>
        /// <param name="error"> This contains an outer error with error code, message, details, target and an inner error with more descriptive details. </param>
        /// <param name="progress"> Progress of the translation if available. </param>
        /// <param name="id"> Document Id. </param>
        /// <param name="characterCharged"> Character charged by the API. </param>
        /// <returns> A new <see cref="Models.DocumentStatus"/> instance for mocking. </returns>
        public static DocumentStatus DocumentStatus(string path = null, string sourcePath = null, DateTimeOffset createdDateTimeUtc = default, DateTimeOffset lastActionDateTimeUtc = default, Status status = default, string to = null, TranslationError error = null, float progress = default, Guid id = default, long? characterCharged = null)
        {
            return new DocumentStatus(path, sourcePath, createdDateTimeUtc, lastActionDateTimeUtc, status, to, error, progress, id, characterCharged);
        }

        /// <summary> Initializes a new instance of SupportedFileFormats. </summary>
        /// <param name="value"> list of objects. </param>
        /// <returns> A new <see cref="Models.SupportedFileFormats"/> instance for mocking. </returns>
        public static SupportedFileFormats SupportedFileFormats(IEnumerable<FileFormat> value = null)
        {
            value ??= new List<FileFormat>();

            return new SupportedFileFormats(value?.ToList());
        }

        /// <summary> Initializes a new instance of FileFormat. </summary>
        /// <param name="format"> Name of the format. </param>
        /// <param name="fileExtensions"> Supported file extension for this format. </param>
        /// <param name="contentTypes"> Supported Content-Types for this format. </param>
        /// <param name="defaultVersion"> Default version if none is specified. </param>
        /// <param name="versions"> Supported Version. </param>
        /// <returns> A new <see cref="Models.FileFormat"/> instance for mocking. </returns>
        public static FileFormat FileFormat(string format = null, IEnumerable<string> fileExtensions = null, IEnumerable<string> contentTypes = null, string defaultVersion = null, IEnumerable<string> versions = null)
        {
            fileExtensions ??= new List<string>();
            contentTypes ??= new List<string>();
            versions ??= new List<string>();

            return new FileFormat(format, fileExtensions?.ToList(), contentTypes?.ToList(), defaultVersion, versions?.ToList());
        }

        /// <summary> Initializes a new instance of SupportedStorageSources. </summary>
        /// <param name="value"> list of objects. </param>
        /// <returns> A new <see cref="Models.SupportedStorageSources"/> instance for mocking. </returns>
        public static SupportedStorageSources SupportedStorageSources(IEnumerable<StorageSource> value = null)
        {
            value ??= new List<StorageSource>();

            return new SupportedStorageSources(value?.ToList());
        }
    }
}
