// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Translation.Document;
using Azure.AI.Translation.Document.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Translation.Document.Samples
{
    public partial class Samples_DocumentTranslation
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_StartTranslation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
source = new
{
sourceUrl = "<sourceUrl>",
},
targets = new object[]
{
new
{
targetUrl = "<targetUrl>",
language = "<language>",
}
},
}
            },
            });
            Response response = client.StartTranslation(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_StartTranslation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
source = new
{
sourceUrl = "<sourceUrl>",
},
targets = new object[]
{
new
{
targetUrl = "<targetUrl>",
language = "<language>",
}
},
}
            },
            });
            Response response = await client.StartTranslationAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_StartTranslation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            StartTranslationDetails startTranslationDetails = new StartTranslationDetails(new DocumentTranslationInput[]
            {
new DocumentTranslationInput(new TranslationSource(new Uri("<sourceUrl>")), new TranslationTarget[]
{
new TranslationTarget(new Uri("<targetUrl>"), "<language>")
})
            });
            Response response = client.StartTranslation(startTranslationDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_StartTranslation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            StartTranslationDetails startTranslationDetails = new StartTranslationDetails(new DocumentTranslationInput[]
            {
new DocumentTranslationInput(new TranslationSource(new Uri("<sourceUrl>")), new TranslationTarget[]
{
new TranslationTarget(new Uri("<targetUrl>"), "<language>")
})
            });
            Response response = await client.StartTranslationAsync(startTranslationDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_StartTranslation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
source = new
{
sourceUrl = "<sourceUrl>",
filter = new
{
prefix = "<prefix>",
suffix = "<suffix>",
},
language = "<language>",
storageSource = "AzureBlob",
},
targets = new object[]
{
new
{
targetUrl = "<targetUrl>",
category = "<category>",
language = "<language>",
glossaries = new object[]
{
new
{
glossaryUrl = "<glossaryUrl>",
format = "<format>",
version = "<version>",
storageSource = "AzureBlob",
}
},
storageSource = "AzureBlob",
}
},
storageType = "Folder",
}
            },
            });
            Response response = client.StartTranslation(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_StartTranslation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
source = new
{
sourceUrl = "<sourceUrl>",
filter = new
{
prefix = "<prefix>",
suffix = "<suffix>",
},
language = "<language>",
storageSource = "AzureBlob",
},
targets = new object[]
{
new
{
targetUrl = "<targetUrl>",
category = "<category>",
language = "<language>",
glossaries = new object[]
{
new
{
glossaryUrl = "<glossaryUrl>",
format = "<format>",
version = "<version>",
storageSource = "AzureBlob",
}
},
storageSource = "AzureBlob",
}
},
storageType = "Folder",
}
            },
            });
            Response response = await client.StartTranslationAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_StartTranslation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            StartTranslationDetails startTranslationDetails = new StartTranslationDetails(new DocumentTranslationInput[]
            {
new DocumentTranslationInput(new TranslationSource(new Uri("<sourceUrl>"))
{
LanguageCode = "<language>",
}, new TranslationTarget[]
{
new TranslationTarget(new Uri("<targetUrl>"), "<language>")
{
CategoryId = "<category>",
Glossaries = {new TranslationGlossary(new Uri("<glossaryUrl>"), "<format>")
{
FormatVersion = "<version>",
}},
}
})
{
StorageUriKind = StorageInputUriKind.Folder,
}
            });
            Response response = client.StartTranslation(startTranslationDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_StartTranslation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            StartTranslationDetails startTranslationDetails = new StartTranslationDetails(new DocumentTranslationInput[]
            {
new DocumentTranslationInput(new TranslationSource(new Uri("<sourceUrl>"))
{
LanguageCode = "<language>",
}, new TranslationTarget[]
{
new TranslationTarget(new Uri("<targetUrl>"), "<language>")
{
CategoryId = "<category>",
Glossaries = {new TranslationGlossary(new Uri("<glossaryUrl>"), "<format>")
{
FormatVersion = "<version>",
}},
}
})
{
StorageUriKind = StorageInputUriKind.Folder,
}
            });
            Response response = await client.StartTranslationAsync(startTranslationDetails);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetDocumentStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourcePath").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("to").ToString());
            Console.WriteLine(result.GetProperty("progress").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetDocumentStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourcePath").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("to").ToString());
            Console.WriteLine(result.GetProperty("progress").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<DocumentStatusResult> response = client.GetDocumentStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<DocumentStatusResult> response = await client.GetDocumentStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetDocumentStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("sourcePath").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("to").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("progress").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("characterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetDocumentStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("sourcePath").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("to").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("progress").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("characterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<DocumentStatusResult> response = client.GetDocumentStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<DocumentStatusResult> response = await client.GetDocumentStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetTranslationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetTranslationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = client.GetTranslationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = await client.GetTranslationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetTranslationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetTranslationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = client.GetTranslationStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = await client.GetTranslationStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_CancelTranslation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.CancelTranslation(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_CancelTranslation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.CancelTranslationAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_CancelTranslation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = client.CancelTranslation(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_CancelTranslation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = await client.CancelTranslationAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_CancelTranslation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.CancelTranslation(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_CancelTranslation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.CancelTranslationAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_CancelTranslation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = client.CancelTranslation(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_CancelTranslation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<TranslationStatusResult> response = await client.CancelTranslationAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedDocumentFormats_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedDocumentFormats(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedDocumentFormats_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedDocumentFormatsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedDocumentFormats_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = client.GetSupportedDocumentFormats();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedDocumentFormats_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = await client.GetSupportedDocumentFormatsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedDocumentFormats_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedDocumentFormats(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("defaultVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedDocumentFormats_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedDocumentFormatsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("defaultVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedDocumentFormats_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = client.GetSupportedDocumentFormats();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedDocumentFormats_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = await client.GetSupportedDocumentFormatsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedGlossaryFormats(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedGlossaryFormatsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = client.GetSupportedGlossaryFormats();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = await client.GetSupportedGlossaryFormatsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedGlossaryFormats(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("defaultVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedGlossaryFormatsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("fileExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("contentTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("defaultVersion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = client.GetSupportedGlossaryFormats();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedGlossaryFormats_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedFileFormats> response = await client.GetSupportedGlossaryFormatsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedStorageSources_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedStorageSources(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedStorageSources_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedStorageSourcesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedStorageSources_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedStorageSources> response = client.GetSupportedStorageSources();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedStorageSources_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedStorageSources> response = await client.GetSupportedStorageSourcesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedStorageSources_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = client.GetSupportedStorageSources(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedStorageSources_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response response = await client.GetSupportedStorageSourcesAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetSupportedStorageSources_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedStorageSources> response = client.GetSupportedStorageSources();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetSupportedStorageSources_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            Response<SupportedStorageSources> response = await client.GetSupportedStorageSourcesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationsStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (BinaryData item in client.GetTranslationsStatus((int?)null, (int?)null, (int?)null, (IEnumerable<Guid>)null, (IEnumerable<string>)null, (DateTimeOffset?)null, (DateTimeOffset?)null, (IEnumerable<string>)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationsStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (BinaryData item in client.GetTranslationsStatusAsync((int?)null, (int?)null, (int?)null, (IEnumerable<Guid>)null, (IEnumerable<string>)null, (DateTimeOffset?)null, (DateTimeOffset?)null, (IEnumerable<string>)null, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationsStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (TranslationStatusResult item in client.GetTranslationsStatus())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationsStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (TranslationStatusResult item in client.GetTranslationsStatusAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationsStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (BinaryData item in client.GetTranslationsStatus(1234, 1234, 1234, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new string[] { "<orderBy>" }, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationsStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (BinaryData item in client.GetTranslationsStatusAsync(1234, 1234, 1234, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new string[] { "<orderBy>" }, (RequestContext)null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("success").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("inProgress").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("notYetStarted").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("cancelled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("totalCharacterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetTranslationsStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (TranslationStatusResult item in client.GetTranslationsStatus(maxCount: 1234, skip: 1234, maxpagesize: 1234, ids: new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, statuses: new string[] { "<statuses>" }, createdDateTimeUtcStart: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), createdDateTimeUtcEnd: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), orderBy: new string[] { "<orderBy>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetTranslationsStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (TranslationStatusResult item in client.GetTranslationsStatusAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234, ids: new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, statuses: new string[] { "<statuses>" }, createdDateTimeUtcStart: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), createdDateTimeUtcEnd: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), orderBy: new string[] { "<orderBy>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentsStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (BinaryData item in client.GetDocumentsStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourcePath").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("to").ToString());
                Console.WriteLine(result.GetProperty("progress").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentsStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (BinaryData item in client.GetDocumentsStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null, null, null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourcePath").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("to").ToString());
                Console.WriteLine(result.GetProperty("progress").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentsStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (DocumentStatusResult item in client.GetDocumentsStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentsStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (DocumentStatusResult item in client.GetDocumentsStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a")))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentsStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (BinaryData item in client.GetDocumentsStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), 1234, 1234, 1234, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new string[] { "<orderBy>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("sourcePath").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("to").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("progress").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("characterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentsStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (BinaryData item in client.GetDocumentsStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), 1234, 1234, 1234, new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new string[] { "<orderBy>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("sourcePath").ToString());
                Console.WriteLine(result.GetProperty("createdDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTimeUtc").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("to").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innerError").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("progress").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("characterCharged").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentTranslationOperations_GetDocumentsStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            foreach (DocumentStatusResult item in client.GetDocumentsStatus(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), maxCount: 1234, skip: 1234, maxpagesize: 1234, ids: new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, statuses: new string[] { "<statuses>" }, createdDateTimeUtcStart: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), createdDateTimeUtcEnd: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), orderBy: new string[] { "<orderBy>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentTranslationOperations_GetDocumentsStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslation client = new DocumentTranslationClient(endpoint, credential).GetDocumentTranslationClient(apiVersion: "v1.0");

            await foreach (DocumentStatusResult item in client.GetDocumentsStatusAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), maxCount: 1234, skip: 1234, maxpagesize: 1234, ids: new Guid[] { Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a") }, statuses: new string[] { "<statuses>" }, createdDateTimeUtcStart: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), createdDateTimeUtcEnd: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), orderBy: new string[] { "<orderBy>" }))
            {
            }
        }
    }
}
