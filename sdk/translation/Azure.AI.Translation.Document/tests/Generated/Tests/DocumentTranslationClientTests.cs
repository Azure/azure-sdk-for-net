// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Translation.Document.Tests
{
    public partial class DocumentTranslationClientTests : AITranslationDocumentTestBase
    {
        public DocumentTranslationClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetDocumentStatus_ReturnsTheStatusOfASingleDocumentInABatchTranslationRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response response = await client.GetDocumentStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"), Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F12F"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetDocumentStatus_ReturnsTheStatusOfASingleDocumentInABatchTranslationRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response<DocumentStatusResult> response = await client.GetDocumentStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"), Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F12F"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetTranslationStatus_ReturnsTheStatusForABatchDocumentTranslationRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response response = await client.GetTranslationStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetTranslationStatus_ReturnsTheStatusForABatchDocumentTranslationRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response<TranslationStatusResult> response = await client.GetTranslationStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_CancelTranslation_CancelACurrentlyProcessingOrQueuedTranslation()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response response = await client.CancelTranslationAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"), null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_CancelTranslation_CancelACurrentlyProcessingOrQueuedTranslation_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response<TranslationStatusResult> response = await client.CancelTranslationAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetSupportedFormats_ReturnsAListOfSupportedDocumentFormats()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response response = await client.GetSupportedFormatsAsync("document", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetSupportedFormats_ReturnsAListOfSupportedDocumentFormats_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            Response<SupportedFileFormats> response = await client.GetSupportedFormatsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetDocumentsStatus_ReturnsTheStatusForAllDocumentsInABatchDocumentTranslationRequest()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetDocumentsStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E"), null, 0, 1, new Guid[] { Guid.Parse("273622bd-835c-4946-9798-fd8f19f6bbf2"), Guid.Parse("511b6a66-a6f8-4640-83e1-48c325e9fa29") }, new string[] { "Succeeded" }, DateTimeOffset.Parse("2021-03-23T07:03:38.0136316Z"), DateTimeOffset.Parse("2021-03-25T07:03:38.0136316Z"), null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_GetDocumentsStatus_ReturnsTheStatusForAllDocumentsInABatchDocumentTranslationRequest_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            await foreach (DocumentStatusResult item in client.GetDocumentsStatusAsync(Guid.Parse("727BF148-F327-47A0-9481-ABAE6362F11E")))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_StartTranslation_SubmitADocumentTranslationRequestToTheDocumentTranslationService()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
source = new
{
sourceUrl = "https://myblob.blob.core.windows.net/sourceContainer",
filter = new
{
prefix = "pre",
suffix = ".txt",
},
language = "en",
storageSource = "AzureBlob",
},
targets = new object[]
{
new
{
targetUrl = "https://myblob.blob.core.windows.net/destinationContainer1",
category = "general",
language = "fr",
glossaries = new object[]
{
new
{
glossaryUrl = "https://myblob.blob.core.windows.net/myglossary/en_fr_glossary.xlf",
storageSource = "AzureBlob",
format = "XLIFF",
}
},
storageSource = "AzureBlob",
},
new
{
targetUrl = "https://myblob.blob.core.windows.net/destinationContainer2",
category = "general",
language = "es",
storageSource = "AzureBlob",
}
},
storageType = "Folder",
}
            },
            });
            Operation<BinaryData> operation = await client.StartTranslationAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentTranslationClient_StartTranslation_SubmitADocumentTranslationRequestToTheDocumentTranslationService_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new AzureKeyCredential("<key>");
            DocumentTranslationClient client = CreateDocumentTranslationClient(endpoint, credential);

            TranslationBatch body = new TranslationBatch(new DocumentTranslationInput[]
            {
new DocumentTranslationInput(new TranslationSource(new Uri("https://myblob.blob.core.windows.net/sourceContainer"))
{
LanguageCode = "en",
StorageSource = TranslationStorageSource.AzureBlob,
}, new TranslationTarget[]
{
new TranslationTarget(new Uri("https://myblob.blob.core.windows.net/destinationContainer1"), "fr")
{
CategoryId = "general",
Glossaries = {new TranslationGlossary(new Uri("https://myblob.blob.core.windows.net/myglossary/en_fr_glossary.xlf"), "XLIFF")
{
StorageSource = TranslationStorageSource.AzureBlob,
}},
StorageSource = TranslationStorageSource.AzureBlob,
},
new TranslationTarget(new Uri("https://myblob.blob.core.windows.net/destinationContainer2"), "es")
{
CategoryId = "general",
StorageSource = TranslationStorageSource.AzureBlob,
}
})
{
StorageUriKind = StorageInputUriKind.Folder,
}
            });
            Operation<TranslationStatusResult> operation = await client.StartTranslationAsync(WaitUntil.Completed, body);
            TranslationStatusResult responseData = operation.Value;
        }
    }
}
