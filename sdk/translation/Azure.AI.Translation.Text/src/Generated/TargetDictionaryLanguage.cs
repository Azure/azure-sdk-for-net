// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Translation.Text
{
    /// <summary> Properties of the target dictionary language. </summary>
    public partial class TargetDictionaryLanguage
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of TargetDictionaryLanguage. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="code"> Language code identifying the target language. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="nativeName"/>, <paramref name="dir"/> or <paramref name="code"/> is null. </exception>
        internal TargetDictionaryLanguage(string name, string nativeName, string dir, string code)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(nativeName, nameof(nativeName));
            Argument.AssertNotNull(dir, nameof(dir));
            Argument.AssertNotNull(code, nameof(code));

            Name = name;
            NativeName = nativeName;
            Dir = dir;
            Code = code;
        }

        /// <summary> Initializes a new instance of TargetDictionaryLanguage. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="code"> Language code identifying the target language. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal TargetDictionaryLanguage(string name, string nativeName, string dir, string code, Dictionary<string, BinaryData> rawData)
        {
            Name = name;
            NativeName = nativeName;
            Dir = dir;
            Code = code;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="TargetDictionaryLanguage"/> for deserialization. </summary>
        internal TargetDictionaryLanguage()
        {
        }

        /// <summary> Display name of the language in the locale requested via Accept-Language header. </summary>
        public string Name { get; }
        /// <summary> Display name of the language in the locale native for this language. </summary>
        public string NativeName { get; }
        /// <summary> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </summary>
        public string Dir { get; }
        /// <summary> Language code identifying the target language. </summary>
        public string Code { get; }
    }
}
