// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.AI.Translation.Text
{
    public partial class DictionaryExample : IUtf8JsonSerializable, IModelJsonSerializable<DictionaryExample>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DictionaryExample>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DictionaryExample>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("sourcePrefix"u8);
            writer.WriteStringValue(SourcePrefix);
            writer.WritePropertyName("sourceTerm"u8);
            writer.WriteStringValue(SourceTerm);
            writer.WritePropertyName("sourceSuffix"u8);
            writer.WriteStringValue(SourceSuffix);
            writer.WritePropertyName("targetPrefix"u8);
            writer.WriteStringValue(TargetPrefix);
            writer.WritePropertyName("targetTerm"u8);
            writer.WriteStringValue(TargetTerm);
            writer.WritePropertyName("targetSuffix"u8);
            writer.WriteStringValue(TargetSuffix);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DictionaryExample DeserializeDictionaryExample(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string sourcePrefix = default;
            string sourceTerm = default;
            string sourceSuffix = default;
            string targetPrefix = default;
            string targetTerm = default;
            string targetSuffix = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourcePrefix"u8))
                {
                    sourcePrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceTerm"u8))
                {
                    sourceTerm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceSuffix"u8))
                {
                    sourceSuffix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetPrefix"u8))
                {
                    targetPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetTerm"u8))
                {
                    targetTerm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetSuffix"u8))
                {
                    targetSuffix = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DictionaryExample(sourcePrefix, sourceTerm, sourceSuffix, targetPrefix, targetTerm, targetSuffix, rawData);
        }

        DictionaryExample IModelJsonSerializable<DictionaryExample>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDictionaryExample(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DictionaryExample>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DictionaryExample IModelSerializable<DictionaryExample>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDictionaryExample(doc.RootElement, options);
        }

        public static implicit operator RequestContent(DictionaryExample model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator DictionaryExample(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDictionaryExample(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
