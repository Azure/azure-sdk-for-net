// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Translation.Text
{
    // Data plane generated client.
    /// <summary>
    /// Text translation is a cloud-based REST API feature of the Translator service that uses neural
    /// machine translation technology to enable quick and accurate source-to-target text translation
    /// in real time across all supported languages.
    ///
    /// The following methods are supported by the Text Translation feature:
    ///
    /// Languages. Returns a list of languages supported by Translate, Transliterate, and Dictionary Lookup operations.
    ///
    /// Translate. Renders single source-language text to multiple target-language texts with a single request.
    ///
    /// Transliterate. Converts characters or letters of a source language to the corresponding characters or letters of a target language.
    ///
    /// Detect. Returns the source code language code and a boolean variable denoting whether the detected language is supported for text translation and transliteration.
    ///
    /// Dictionary lookup. Returns equivalent words for the source term in the target language.
    ///
    /// Dictionary example Returns grammatical structure and context examples for the source term and target term pair.
    /// </summary>
    public partial class TextTranslationClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TextTranslationClient for mocking. </summary>
        protected TextTranslationClient()
        {
        }

        /// <summary> Gets the set of languages currently supported by other operations of the Translator. </summary>
        /// <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        /// <param name="scope">
        /// A comma-separated list of names defining the group of languages to return.
        /// Allowed group names are: `translation`, `transliteration` and `dictionary`.
        /// If no scope is given, then all groups are returned, which is equivalent to passing
        /// `scope=translation,transliteration,dictionary`. To decide which set of supported languages
        /// is appropriate for your scenario, see the description of the [response object](#response-body).
        /// </param>
        /// <param name="acceptLanguage">
        /// The language to use for user interface strings. Some of the fields in the response are names of languages or
        /// names of regions. Use this parameter to define the language in which these names are returned.
        /// The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
        /// to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
        /// Names are provided in the English language when a target language is not specified or when localization
        /// is not available.
        /// </param>
        /// <param name="ifNoneMatch">
        /// Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
        /// If the resource has not been modified, the service will return status code 304 and an empty response body.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GetLanguagesResult>> GetLanguagesAsync(string clientTraceId = null, string scope = null, string acceptLanguage = null, ETag? ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetLanguagesAsync(clientTraceId, scope, acceptLanguage, ifNoneMatch, context).ConfigureAwait(false);
            return Response.FromValue(GetLanguagesResult.FromResponse(response), response);
        }

        /// <summary> Gets the set of languages currently supported by other operations of the Translator. </summary>
        /// <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        /// <param name="scope">
        /// A comma-separated list of names defining the group of languages to return.
        /// Allowed group names are: `translation`, `transliteration` and `dictionary`.
        /// If no scope is given, then all groups are returned, which is equivalent to passing
        /// `scope=translation,transliteration,dictionary`. To decide which set of supported languages
        /// is appropriate for your scenario, see the description of the [response object](#response-body).
        /// </param>
        /// <param name="acceptLanguage">
        /// The language to use for user interface strings. Some of the fields in the response are names of languages or
        /// names of regions. Use this parameter to define the language in which these names are returned.
        /// The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
        /// to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
        /// Names are provided in the English language when a target language is not specified or when localization
        /// is not available.
        /// </param>
        /// <param name="ifNoneMatch">
        /// Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
        /// If the resource has not been modified, the service will return status code 304 and an empty response body.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GetLanguagesResult> GetLanguages(string clientTraceId = null, string scope = null, string acceptLanguage = null, ETag? ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetLanguages(clientTraceId, scope, acceptLanguage, ifNoneMatch, context);
            return Response.FromValue(GetLanguagesResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Gets the set of languages currently supported by other operations of the Translator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetLanguagesAsync(string,string,string,ETag?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        /// <param name="scope">
        /// A comma-separated list of names defining the group of languages to return.
        /// Allowed group names are: `translation`, `transliteration` and `dictionary`.
        /// If no scope is given, then all groups are returned, which is equivalent to passing
        /// `scope=translation,transliteration,dictionary`. To decide which set of supported languages
        /// is appropriate for your scenario, see the description of the [response object](#response-body).
        /// </param>
        /// <param name="acceptLanguage">
        /// The language to use for user interface strings. Some of the fields in the response are names of languages or
        /// names of regions. Use this parameter to define the language in which these names are returned.
        /// The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
        /// to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
        /// Names are provided in the English language when a target language is not specified or when localization
        /// is not available.
        /// </param>
        /// <param name="ifNoneMatch">
        /// Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
        /// If the resource has not been modified, the service will return status code 304 and an empty response body.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetLanguagesAsync(string clientTraceId, string scope, string acceptLanguage, ETag? ifNoneMatch, RequestContext context)
        {
            using var scope0 = ClientDiagnostics.CreateScope("TextTranslationClient.GetLanguages");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetLanguagesRequest(clientTraceId, scope, acceptLanguage, ifNoneMatch, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the set of languages currently supported by other operations of the Translator.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetLanguages(string,string,string,ETag?,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        /// <param name="scope">
        /// A comma-separated list of names defining the group of languages to return.
        /// Allowed group names are: `translation`, `transliteration` and `dictionary`.
        /// If no scope is given, then all groups are returned, which is equivalent to passing
        /// `scope=translation,transliteration,dictionary`. To decide which set of supported languages
        /// is appropriate for your scenario, see the description of the [response object](#response-body).
        /// </param>
        /// <param name="acceptLanguage">
        /// The language to use for user interface strings. Some of the fields in the response are names of languages or
        /// names of regions. Use this parameter to define the language in which these names are returned.
        /// The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
        /// to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
        /// Names are provided in the English language when a target language is not specified or when localization
        /// is not available.
        /// </param>
        /// <param name="ifNoneMatch">
        /// Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
        /// If the resource has not been modified, the service will return status code 304 and an empty response body.
        /// </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetLanguages(string clientTraceId, string scope, string acceptLanguage, ETag? ifNoneMatch, RequestContext context)
        {
            using var scope0 = ClientDiagnostics.CreateScope("TextTranslationClient.GetLanguages");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetLanguagesRequest(clientTraceId, scope, acceptLanguage, ifNoneMatch, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetLanguagesRequest(string clientTraceId, string scope, string acceptLanguage, ETag? ifNoneMatch, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/languages", false);
            if (scope != null)
            {
                uri.AppendQuery("scope", scope, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch.Value);
            }
            return message;
        }

        internal HttpMessage CreateTranslateRequest(IEnumerable<string> to, RequestContent content, string clientTraceId, string @from, string textType, string category, string profanityAction, string profanityMarker, bool? includeAlignment, bool? includeSentenceLength, string suggestedFrom, string fromScript, string toScript, bool? allowFallback, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/translate", false);
            if (to != null && Optional.IsCollectionDefined(to))
            {
                foreach (var param in to)
                {
                    uri.AppendQuery("to", param, true);
                }
            }
            if (@from != null)
            {
                uri.AppendQuery("from", @from, true);
            }
            if (textType != null)
            {
                uri.AppendQuery("textType", textType, true);
            }
            if (category != null)
            {
                uri.AppendQuery("category", category, true);
            }
            if (profanityAction != null)
            {
                uri.AppendQuery("profanityAction", profanityAction, true);
            }
            if (profanityMarker != null)
            {
                uri.AppendQuery("profanityMarker", profanityMarker, true);
            }
            if (includeAlignment != null)
            {
                uri.AppendQuery("includeAlignment", includeAlignment.Value, true);
            }
            if (includeSentenceLength != null)
            {
                uri.AppendQuery("includeSentenceLength", includeSentenceLength.Value, true);
            }
            if (suggestedFrom != null)
            {
                uri.AppendQuery("suggestedFrom", suggestedFrom, true);
            }
            if (fromScript != null)
            {
                uri.AppendQuery("fromScript", fromScript, true);
            }
            if (toScript != null)
            {
                uri.AppendQuery("toScript", toScript, true);
            }
            if (allowFallback != null)
            {
                uri.AppendQuery("allowFallback", allowFallback.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateTransliterateRequest(string language, string fromScript, string toScript, RequestContent content, string clientTraceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/transliterate", false);
            uri.AppendQuery("language", language, true);
            uri.AppendQuery("fromScript", fromScript, true);
            uri.AppendQuery("toScript", toScript, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateFindSentenceBoundariesRequest(RequestContent content, string clientTraceId, string language, string script, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/breaksentence", false);
            if (language != null)
            {
                uri.AppendQuery("language", language, true);
            }
            if (script != null)
            {
                uri.AppendQuery("script", script, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateLookupDictionaryEntriesRequest(string @from, string to, RequestContent content, string clientTraceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/dictionary/lookup", false);
            uri.AppendQuery("from", @from, true);
            uri.AppendQuery("to", to, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateLookupDictionaryExamplesRequest(string @from, string to, RequestContent content, string clientTraceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/dictionary/examples", false);
            uri.AppendQuery("from", @from, true);
            uri.AppendQuery("to", to, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (clientTraceId != null)
            {
                request.Headers.Add("X-ClientTraceId", clientTraceId);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
