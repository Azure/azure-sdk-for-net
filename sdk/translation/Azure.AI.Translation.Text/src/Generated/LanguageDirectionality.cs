// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Translation.Text
{
    /// <summary> Language Directionality. </summary>
    public readonly partial struct LanguageDirectionality : IEquatable<LanguageDirectionality>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LanguageDirectionality"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LanguageDirectionality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeftToRightValue = "ltr";
        private const string RightToLeftValue = "rtl";

        /// <summary> ltr. </summary>
        public static LanguageDirectionality LeftToRight { get; } = new LanguageDirectionality(LeftToRightValue);
        /// <summary> rtl. </summary>
        public static LanguageDirectionality RightToLeft { get; } = new LanguageDirectionality(RightToLeftValue);
        /// <summary> Determines if two <see cref="LanguageDirectionality"/> values are the same. </summary>
        public static bool operator ==(LanguageDirectionality left, LanguageDirectionality right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LanguageDirectionality"/> values are not the same. </summary>
        public static bool operator !=(LanguageDirectionality left, LanguageDirectionality right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LanguageDirectionality"/>. </summary>
        public static implicit operator LanguageDirectionality(string value) => new LanguageDirectionality(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LanguageDirectionality other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LanguageDirectionality other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
