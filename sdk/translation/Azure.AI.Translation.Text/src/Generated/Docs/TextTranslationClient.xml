<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSupportedLanguagesAsync(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
]]></code>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
]]></code>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="TranslateAsync(TranslateBody,string,CancellationToken)">
      <example>
This sample shows how to call TranslateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

TranslateBody body = new TranslateBody(new TranslateInputItem[]
{
    new TranslateInputItem("This is a test.", new TranslateTarget[]
    {
        new TranslateTarget("cs")
        {
            Script = "Latn",
            ProfanityAction = ProfanityAction.NoAction,
            ProfanityMarker = ProfanityMarker.Asterisk,
            DeploymentName = "gpt-4o-mini",
            AllowFallback = true,
            Grade = "basic",
            Tone = "formal",
            Gender = "neutral",
            AdaptiveDatasetId = "21000",
            ReferenceTextPairs = {new ReferenceSentencePair("Please test this out.", "Vyzkoušejte si to.")},
        }
    })
    {
        Script = "Latn",
        Language = "en",
        TextType = TextType.Plain,
    }
});
Response<TranslationResult> response = await client.TranslateAsync(body);
]]></code>
This sample shows how to call TranslateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

TranslateBody body = new TranslateBody(new TranslateInputItem[]
{
    new TranslateInputItem("This is a test.", new TranslateTarget[]
    {
        new TranslateTarget("cs")
    })
});
Response<TranslationResult> response = await client.TranslateAsync(body);
]]></code></example>
    </member>
    <member name="Translate(TranslateBody,string,CancellationToken)">
      <example>
This sample shows how to call Translate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

TranslateBody body = new TranslateBody(new TranslateInputItem[]
{
    new TranslateInputItem("This is a test.", new TranslateTarget[]
    {
        new TranslateTarget("cs")
        {
            Script = "Latn",
            ProfanityAction = ProfanityAction.NoAction,
            ProfanityMarker = ProfanityMarker.Asterisk,
            DeploymentName = "gpt-4o-mini",
            AllowFallback = true,
            Grade = "basic",
            Tone = "formal",
            Gender = "neutral",
            AdaptiveDatasetId = "21000",
            ReferenceTextPairs = {new ReferenceSentencePair("Please test this out.", "Vyzkoušejte si to.")},
        }
    })
    {
        Script = "Latn",
        Language = "en",
        TextType = TextType.Plain,
    }
});
Response<TranslationResult> response = client.Translate(body);
]]></code>
This sample shows how to call Translate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

TranslateBody body = new TranslateBody(new TranslateInputItem[]
{
    new TranslateInputItem("This is a test.", new TranslateTarget[]
    {
        new TranslateTarget("cs")
    })
});
Response<TranslationResult> response = client.Translate(body);
]]></code></example>
    </member>
    <member name="TranslateAsync(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call TranslateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    inputs = new object[]
    {
        new
        {
            text = "This is a test.",
            script = "Latn",
            language = "en",
            textType = "Plain",
            targets = new object[]
            {
                new
                {
                    language = "cs",
                    script = "Latn",
                    profanityAction = "NoAction",
                    profanityMarker = "Asterisk",
                    deploymentName = "gpt-4o-mini",
                    allowFallback = true,
                    grade = "basic",
                    tone = "formal",
                    gender = "neutral",
                    adaptiveDatasetId = "21000",
                    referenceTextPairs = new object[]
                    {
                        new
                        {
                            source = "Please test this out.",
                            target = "Vyzkoušejte si to.",
                        }
                    },
                }
            },
        }
    },
});
Response response = await client.TranslateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code>
This sample shows how to call TranslateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    inputs = new object[]
    {
        new
        {
            text = "This is a test.",
            targets = new object[]
            {
                new
                {
                    language = "cs",
                }
            },
        }
    },
});
Response response = await client.TranslateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code></example>
    </member>
    <member name="Translate(RequestContent,string,RequestContext)">
      <example>
This sample shows how to call Translate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    inputs = new object[]
    {
        new
        {
            text = "This is a test.",
            script = "Latn",
            language = "en",
            textType = "Plain",
            targets = new object[]
            {
                new
                {
                    language = "cs",
                    script = "Latn",
                    profanityAction = "NoAction",
                    profanityMarker = "Asterisk",
                    deploymentName = "gpt-4o-mini",
                    allowFallback = true,
                    grade = "basic",
                    tone = "formal",
                    gender = "neutral",
                    adaptiveDatasetId = "21000",
                    referenceTextPairs = new object[]
                    {
                        new
                        {
                            source = "Please test this out.",
                            target = "Vyzkoušejte si to.",
                        }
                    },
                }
            },
        }
    },
});
Response response = client.Translate(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code>
This sample shows how to call Translate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TextTranslationClient client = new TextTranslationClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    inputs = new object[]
    {
        new
        {
            text = "This is a test.",
            targets = new object[]
            {
                new
                {
                    language = "cs",
                }
            },
        }
    },
});
Response response = client.Translate(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
]]></code></example>
    </member>
  </members>
</doc>