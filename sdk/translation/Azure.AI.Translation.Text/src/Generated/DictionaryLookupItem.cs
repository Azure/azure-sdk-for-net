// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.Translation.Text
{
    /// <summary> Dictionary Lookup Element. </summary>
    public partial class DictionaryLookupItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DictionaryLookupItem"/>. </summary>
        /// <param name="normalizedSource">
        /// A string giving the normalized form of the source term.
        /// For example, if the request is "JOHN", the normalized form will be "john".
        /// The content of this field becomes the input to lookup examples.
        /// </param>
        /// <param name="displaySource">
        /// A string giving the source term in a form best suited for end-user display.
        /// For example, if the input is "JOHN", the display form will reflect the usual
        /// spelling of the name: "John".
        /// </param>
        /// <param name="translations"> A list of translations for the source term. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="normalizedSource"/>, <paramref name="displaySource"/> or <paramref name="translations"/> is null. </exception>
        internal DictionaryLookupItem(string normalizedSource, string displaySource, IEnumerable<DictionaryTranslation> translations)
        {
            Argument.AssertNotNull(normalizedSource, nameof(normalizedSource));
            Argument.AssertNotNull(displaySource, nameof(displaySource));
            Argument.AssertNotNull(translations, nameof(translations));

            NormalizedSource = normalizedSource;
            DisplaySource = displaySource;
            Translations = translations.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryLookupItem"/>. </summary>
        /// <param name="normalizedSource">
        /// A string giving the normalized form of the source term.
        /// For example, if the request is "JOHN", the normalized form will be "john".
        /// The content of this field becomes the input to lookup examples.
        /// </param>
        /// <param name="displaySource">
        /// A string giving the source term in a form best suited for end-user display.
        /// For example, if the input is "JOHN", the display form will reflect the usual
        /// spelling of the name: "John".
        /// </param>
        /// <param name="translations"> A list of translations for the source term. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DictionaryLookupItem(string normalizedSource, string displaySource, IReadOnlyList<DictionaryTranslation> translations, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NormalizedSource = normalizedSource;
            DisplaySource = displaySource;
            Translations = translations;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DictionaryLookupItem"/> for deserialization. </summary>
        internal DictionaryLookupItem()
        {
        }

        /// <summary>
        /// A string giving the normalized form of the source term.
        /// For example, if the request is "JOHN", the normalized form will be "john".
        /// The content of this field becomes the input to lookup examples.
        /// </summary>
        public string NormalizedSource { get; }
        /// <summary>
        /// A string giving the source term in a form best suited for end-user display.
        /// For example, if the input is "JOHN", the display form will reflect the usual
        /// spelling of the name: "John".
        /// </summary>
        public string DisplaySource { get; }
        /// <summary> A list of translations for the source term. </summary>
        public IReadOnlyList<DictionaryTranslation> Translations { get; }
    }
}
