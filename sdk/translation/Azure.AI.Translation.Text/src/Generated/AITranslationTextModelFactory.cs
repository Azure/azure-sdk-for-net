// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Translation.Text
{
    /// <summary> Model factory for models. </summary>
    public static partial class AITranslationTextModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Text.GetSupportedLanguagesResult"/>. </summary>
        /// <param name="translation"> Languages that support translate API. </param>
        /// <param name="transliteration"> Languages that support transliteration API. </param>
        /// <param name="dictionary"> Languages that support dictionary API. </param>
        /// <returns> A new <see cref="Text.GetSupportedLanguagesResult"/> instance for mocking. </returns>
        public static GetSupportedLanguagesResult GetSupportedLanguagesResult(IReadOnlyDictionary<string, TranslationLanguage> translation = null, IReadOnlyDictionary<string, TransliterationLanguage> transliteration = null, IReadOnlyDictionary<string, SourceDictionaryLanguage> dictionary = null)
        {
            translation ??= new Dictionary<string, TranslationLanguage>();
            transliteration ??= new Dictionary<string, TransliterationLanguage>();
            dictionary ??= new Dictionary<string, SourceDictionaryLanguage>();

            return new GetSupportedLanguagesResult(translation, transliteration, dictionary, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <returns> A new <see cref="Text.TranslationLanguage"/> instance for mocking. </returns>
        public static TranslationLanguage TranslationLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default)
        {
            return new TranslationLanguage(name, nativeName, dir, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterationLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="scripts"> List of scripts to convert from. </param>
        /// <returns> A new <see cref="Text.TransliterationLanguage"/> instance for mocking. </returns>
        public static TransliterationLanguage TransliterationLanguage(string name = null, string nativeName = null, IEnumerable<TransliterableScript> scripts = null)
        {
            scripts ??= new List<TransliterableScript>();

            return new TransliterationLanguage(name, nativeName, scripts?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliterableScript"/>. </summary>
        /// <param name="code"> Code identifying the script. </param>
        /// <param name="name"> Display name of the script in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for the language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="toScripts"> List of scripts available to convert text to. </param>
        /// <returns> A new <see cref="Text.TransliterableScript"/> instance for mocking. </returns>
        public static TransliterableScript TransliterableScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality dir = default, IEnumerable<LanguageScript> toScripts = null)
        {
            toScripts ??= new List<LanguageScript>();

            return new TransliterableScript(
                code,
                name,
                nativeName,
                dir,
                serializedAdditionalRawData: null,
                toScripts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Text.LanguageScript"/>. </summary>
        /// <param name="code"> Code identifying the script. </param>
        /// <param name="name"> Display name of the script in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for the language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <returns> A new <see cref="Text.LanguageScript"/> instance for mocking. </returns>
        public static LanguageScript LanguageScript(string code = null, string name = null, string nativeName = null, LanguageDirectionality dir = default)
        {
            return new LanguageScript(code, name, nativeName, dir, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.SourceDictionaryLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="translations"> List of languages with alterative translations and examples for the query expressed in the source language. </param>
        /// <returns> A new <see cref="Text.SourceDictionaryLanguage"/> instance for mocking. </returns>
        public static SourceDictionaryLanguage SourceDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default, IEnumerable<TargetDictionaryLanguage> translations = null)
        {
            translations ??= new List<TargetDictionaryLanguage>();

            return new SourceDictionaryLanguage(name, nativeName, dir, translations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TargetDictionaryLanguage"/>. </summary>
        /// <param name="name"> Display name of the language in the locale requested via Accept-Language header. </param>
        /// <param name="nativeName"> Display name of the language in the locale native for this language. </param>
        /// <param name="dir"> Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. </param>
        /// <param name="code"> Language code identifying the target language. </param>
        /// <returns> A new <see cref="Text.TargetDictionaryLanguage"/> instance for mocking. </returns>
        public static TargetDictionaryLanguage TargetDictionaryLanguage(string name = null, string nativeName = null, LanguageDirectionality dir = default, string code = null)
        {
            return new TargetDictionaryLanguage(name, nativeName, dir, code, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslateBody"/>. </summary>
        /// <param name="text"> Text to translate. </param>
        /// <param name="script"> Specifies the script of the input text. </param>
        /// <param name="language">
        /// Specifies the language of the input text. Find which languages are available to translate by
        /// looking up supported languages using the translation scope. If the language parameter isn't
        /// specified, automatic language detection is applied to determine the source language.
        ///
        /// You must use the language parameter rather than autodetection when using the dynamic dictionary feature.
        /// Note: the dynamic dictionary feature is case-sensitive.
        /// </param>
        /// <param name="textType">
        /// Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
        /// complete element. Possible values are: plain (default) or html.
        /// </param>
        /// <param name="targets"> Translation target parameters. </param>
        /// <returns> A new <see cref="Text.TranslateBody"/> instance for mocking. </returns>
        public static TranslateBody TranslateBody(string text = null, string script = null, string language = null, TextType? textType = null, IEnumerable<TranslateTarget> targets = null)
        {
            targets ??= new List<TranslateTarget>();

            return new TranslateBody(
                text,
                script,
                language,
                textType,
                targets?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslateTarget"/>. </summary>
        /// <param name="language">
        /// Specifies the language of the output text. The target language must be one of the supported languages included
        /// in the translation scope. It's possible to translate to multiple languages simultaneously by including
        /// multiple string values in the targetsLanguage array.
        /// </param>
        /// <param name="script"> Specifies the script of the translated text. </param>
        /// <param name="profanityAction">
        /// Specifies how profanities should be treated in translations.
        /// Possible values are: NoAction (default), Marked or Deleted.
        /// </param>
        /// <param name="profanityMarker">
        /// Specifies how profanities should be marked in translations.
        /// Possible values are: Asterisk (default) or Tag.
        /// </param>
        /// <param name="deploymentName">
        /// Default is ‘general’, which uses NMT system.
        /// ‘abc-inc-gpt-4o’, and ‘abc-inc-gpt-4o-mini’ are examples of deployment names which use GPT-4o uses or
        /// GPT-4o-mini model. ‘gpt-4o’ uses GPT-4o model.
        ///
        /// ‘&lt;custom model id&gt;’ uses the custom NMT model tuned by customer.
        /// ‘best’ system determines which is the best model to use for the request. This intelligence could be introduced
        /// in future. Customer should have deployed it in their resource.
        ///
        /// </param>
        /// <param name="allowFallback">
        /// In the case where a custom system is being used, specifies that the service is allowed to fall back to a
        /// general system when a custom system doesn't exist.
        /// In the case where a Large Language Model is being used, specifies that the service is allowed to fall
        /// back to a Small Language Model if an error occurs.
        /// Possible values are: true (default) or false.
        ///
        /// allowFallback=false specifies that the translation should only use systems trained for the category specified
        /// by the request. If a translation for language X to language Y requires chaining through a pivot language E,
        /// then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
        /// If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
        /// specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
        /// </param>
        /// <param name="grade"> Defines complexity of LLM prompts to provide high accuracy translation. </param>
        /// <param name="tone"> Desired tone of target translation. </param>
        /// <param name="gender"> Desired gender of target translation. </param>
        /// <param name="adaptiveDatasetId"> Reference dataset ID having sentence pair to generate adaptive customized translation. </param>
        /// <param name="referenceTextPairs"> Reference sentence pairs to generate adaptive results. </param>
        /// <returns> A new <see cref="Text.TranslateTarget"/> instance for mocking. </returns>
        public static TranslateTarget TranslateTarget(string language = null, string script = null, ProfanityAction? profanityAction = null, ProfanityMarker? profanityMarker = null, string deploymentName = null, bool? allowFallback = null, string grade = null, string tone = null, string gender = null, string adaptiveDatasetId = null, IEnumerable<ReferenceSentencePair> referenceTextPairs = null)
        {
            referenceTextPairs ??= new List<ReferenceSentencePair>();

            return new TranslateTarget(
                language,
                script,
                profanityAction,
                profanityMarker,
                deploymentName,
                allowFallback,
                grade,
                tone,
                gender,
                adaptiveDatasetId,
                referenceTextPairs?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslatedTextItem"/>. </summary>
        /// <param name="detectedLanguage"> The detectedLanguage property is only present in the result object when language auto-detection is requested. </param>
        /// <param name="translations">
        /// An array of translation results. The size of the array matches the number of target
        /// languages specified through the to query parameter.
        /// </param>
        /// <returns> A new <see cref="Text.TranslatedTextItem"/> instance for mocking. </returns>
        public static TranslatedTextItem TranslatedTextItem(DetectedLanguage detectedLanguage = null, IEnumerable<TranslationText> translations = null)
        {
            translations ??= new List<TranslationText>();

            return new TranslatedTextItem(detectedLanguage, translations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.DetectedLanguage"/>. </summary>
        /// <param name="language"> A string representing the code of the detected language. </param>
        /// <param name="score">
        /// A float value indicating the confidence in the result.
        /// The score is between zero and one and a low score indicates a low confidence.
        /// </param>
        /// <returns> A new <see cref="Text.DetectedLanguage"/> instance for mocking. </returns>
        public static DetectedLanguage DetectedLanguage(string language = null, float score = default)
        {
            return new DetectedLanguage(language, score, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TranslationText"/>. </summary>
        /// <param name="language"> A string representing the language code of the target language. </param>
        /// <param name="sourceCharacters"> An interger indicating the number of characters in the source text string. </param>
        /// <param name="instructionTokens"> An interger indicating the number of tokens used in generating the translated text. </param>
        /// <param name="sourceTokens"> An interger indicating the number of tokens used in the source sentence. </param>
        /// <param name="responseTokens"> An interger indicating the number of tokens used in the translation response. </param>
        /// <param name="targetTokens"> An interger indicating the number of tokens used in the target sentence. </param>
        /// <param name="text"> A string giving the translated text. </param>
        /// <returns> A new <see cref="Text.TranslationText"/> instance for mocking. </returns>
        public static TranslationText TranslationText(string language = null, int? sourceCharacters = null, int? instructionTokens = null, int? sourceTokens = null, int? responseTokens = null, int? targetTokens = null, string text = null)
        {
            return new TranslationText(
                language,
                sourceCharacters,
                instructionTokens,
                sourceTokens,
                responseTokens,
                targetTokens,
                text,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Text.TransliteratedText"/>. </summary>
        /// <param name="text"> A string which is the result of converting the input string to the output script. </param>
        /// <param name="script"> A string specifying the script used in the output. </param>
        /// <returns> A new <see cref="Text.TransliteratedText"/> instance for mocking. </returns>
        public static TransliteratedText TransliteratedText(string text = null, string script = null)
        {
            return new TransliteratedText(text, script, serializedAdditionalRawData: null);
        }
    }
}
