// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Azure.AI.Translation.Text
{
    public partial class DictionaryTranslation
    {
        internal static DictionaryTranslation DeserializeDictionaryTranslation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string normalizedTarget = default;
            string displayTarget = default;
            string posTag = default;
            float confidence = default;
            string prefixWord = default;
            IReadOnlyList<BackTranslation> backTranslations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("normalizedTarget"u8))
                {
                    normalizedTarget = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayTarget"u8))
                {
                    displayTarget = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("posTag"u8))
                {
                    posTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("confidence"u8))
                {
                    confidence = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("prefixWord"u8))
                {
                    prefixWord = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("backTranslations"u8))
                {
                    List<BackTranslation> array = new List<BackTranslation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BackTranslation.DeserializeBackTranslation(item));
                    }
                    backTranslations = array;
                    continue;
                }
            }
            return new DictionaryTranslation(normalizedTarget, displayTarget, posTag, confidence, prefixWord, backTranslations);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DictionaryTranslation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDictionaryTranslation(document.RootElement);
        }
    }
}
