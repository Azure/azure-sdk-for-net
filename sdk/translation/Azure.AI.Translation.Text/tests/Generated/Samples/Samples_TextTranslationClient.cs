// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Translation.Text.Samples
{
    public class Samples_TextTranslationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLanguages()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            Response response = client.GetLanguages("<clientTraceId>", "<scope>", "<acceptLanguage>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLanguages_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            Response response = client.GetLanguages("<clientTraceId>", "<scope>", "<acceptLanguage>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLanguages_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            Response response = await client.GetLanguagesAsync("<clientTraceId>", "<scope>", "<acceptLanguage>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLanguages_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            Response response = await client.GetLanguagesAsync("<clientTraceId>", "<scope>", "<acceptLanguage>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("translation").GetProperty("<test>").GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("transliteration").GetProperty("<test>").GetProperty("scripts")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("nativeName").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("dir").ToString());
            Console.WriteLine(result.GetProperty("dictionary").GetProperty("<test>").GetProperty("translations")[0].GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Translate()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.Translate(new string[] { "<to>" }, RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Translate_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.Translate(new string[] { "<to>" }, RequestContent.Create(data), "<clientTraceId>", "<from>", "<textType>", "<category>", "<profanityAction>", "<profanityMarker>", true, true, "<suggestedFrom>", "<fromScript>", "<toScript>", true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("script").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("alignment").GetProperty("proj").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("sentLen").GetProperty("srcSentLen")[0].ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("sentLen").GetProperty("transSentLen")[0].ToString());
            Console.WriteLine(result[0].GetProperty("sourceText").GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Translate_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.TranslateAsync(new string[] { "<to>" }, RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Translate_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.TranslateAsync(new string[] { "<to>" }, RequestContent.Create(data), "<clientTraceId>", "<from>", "<textType>", "<category>", "<profanityAction>", "<profanityMarker>", true, true, "<suggestedFrom>", "<fromScript>", "<toScript>", true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("to").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("transliteration").GetProperty("script").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("alignment").GetProperty("proj").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("sentLen").GetProperty("srcSentLen")[0].ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("sentLen").GetProperty("transSentLen")[0].ToString());
            Console.WriteLine(result[0].GetProperty("sourceText").GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transliterate()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.Transliterate("<language>", "<fromScript>", "<toScript>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transliterate_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.Transliterate("<language>", "<fromScript>", "<toScript>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transliterate_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.TransliterateAsync("<language>", "<fromScript>", "<toScript>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transliterate_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.TransliterateAsync("<language>", "<fromScript>", "<toScript>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("text").ToString());
            Console.WriteLine(result[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FindSentenceBoundaries()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.FindSentenceBoundaries(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("sentLen")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FindSentenceBoundaries_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.FindSentenceBoundaries(RequestContent.Create(data), "<clientTraceId>", "<language>", "<script>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
            Console.WriteLine(result[0].GetProperty("sentLen")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FindSentenceBoundaries_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.FindSentenceBoundariesAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("sentLen")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FindSentenceBoundaries_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.FindSentenceBoundariesAsync(RequestContent.Create(data), "<clientTraceId>", "<language>", "<script>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("language").ToString());
            Console.WriteLine(result[0].GetProperty("detectedLanguage").GetProperty("score").ToString());
            Console.WriteLine(result[0].GetProperty("sentLen")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LookupDictionaryEntries()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.LookupDictionaryEntries("<from>", "<to>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("displaySource").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("displayTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("posTag").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("prefixWord").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("normalizedText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("numExamples").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("frequencyCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LookupDictionaryEntries_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = client.LookupDictionaryEntries("<from>", "<to>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("displaySource").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("displayTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("posTag").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("prefixWord").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("normalizedText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("numExamples").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("frequencyCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LookupDictionaryEntries_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.LookupDictionaryEntriesAsync("<from>", "<to>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("displaySource").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("displayTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("posTag").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("prefixWord").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("normalizedText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("numExamples").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("frequencyCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LookupDictionaryEntries_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        text = "<text>",
    }
};

            Response response = await client.LookupDictionaryEntriesAsync("<from>", "<to>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("displaySource").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("displayTarget").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("posTag").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("confidence").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("prefixWord").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("normalizedText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("displayText").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("numExamples").ToString());
            Console.WriteLine(result[0].GetProperty("translations")[0].GetProperty("backTranslations")[0].GetProperty("frequencyCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LookupDictionaryExamples()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        translation = "<translation>",
        text = "<text>",
    }
};

            Response response = client.LookupDictionaryExamples("<from>", "<to>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourcePrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceSuffix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetPrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetSuffix").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LookupDictionaryExamples_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        translation = "<translation>",
        text = "<text>",
    }
};

            Response response = client.LookupDictionaryExamples("<from>", "<to>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourcePrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceSuffix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetPrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetSuffix").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LookupDictionaryExamples_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        translation = "<translation>",
        text = "<text>",
    }
};

            Response response = await client.LookupDictionaryExamplesAsync("<from>", "<to>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourcePrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceSuffix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetPrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetSuffix").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LookupDictionaryExamples_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TextTranslationClient(endpoint);

            var data = new[] {
    new {
        translation = "<translation>",
        text = "<text>",
    }
};

            Response response = await client.LookupDictionaryExamplesAsync("<from>", "<to>", RequestContent.Create(data), "<clientTraceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("normalizedSource").ToString());
            Console.WriteLine(result[0].GetProperty("normalizedTarget").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourcePrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("sourceSuffix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetPrefix").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetTerm").ToString());
            Console.WriteLine(result[0].GetProperty("examples")[0].GetProperty("targetSuffix").ToString());
        }
    }
}
