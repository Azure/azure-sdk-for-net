// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Translation.Text.Samples
{
    public partial class Samples_TextTranslationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslator()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response response = client.GetSupportedLanguages("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslator_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response response = await client.GetSupportedLanguagesAsync("kayfnugjec", "translation,transliteration,dictionary", "en", new ETag("fpnhruttllvc"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslator_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslator_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslatorWithMinimumProperties()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response response = client.GetSupportedLanguages(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslatorWithMinimumProperties_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response response = await client.GetSupportedLanguagesAsync(null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslatorWithMinimumProperties_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_GetSupportedLanguages_GetsTheSetOfLanguagesCurrentlySupportedByOtherOperationsOfTheTranslatorWithMinimumProperties_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Translate_TranslateText()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "This is a test.",
script = "Latn",
language = "en",
textType = "Plain",
targets = new object[]
{
new
{
language = "cs",
script = "Latn",
profanityAction = "NoAction",
profanityMarker = "Asterisk",
deploymentName = "gpt-4o-mini",
allowFallback = true,
grade = "basic",
tone = "formal",
gender = "neutral",
adaptiveDatasetId = "21000",
referenceTextPairs = new object[]
{
new
{
source = "Please test this out.",
target = "Vyzkoušejte si to.",
}
},
}
},
}
            },
            });
            Response response = client.Translate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Translate_TranslateText_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "This is a test.",
script = "Latn",
language = "en",
textType = "Plain",
targets = new object[]
{
new
{
language = "cs",
script = "Latn",
profanityAction = "NoAction",
profanityMarker = "Asterisk",
deploymentName = "gpt-4o-mini",
allowFallback = true,
grade = "basic",
tone = "formal",
gender = "neutral",
adaptiveDatasetId = "21000",
referenceTextPairs = new object[]
{
new
{
source = "Please test this out.",
target = "Vyzkoušejte si to.",
}
},
}
},
}
            },
            });
            Response response = await client.TranslateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Translate_TranslateText_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TranslateBody body = new TranslateBody(new TranslateInputItem[]
            {
new TranslateInputItem("This is a test.", new TranslateTarget[]
{
new TranslateTarget("cs")
{
Script = "Latn",
ProfanityAction = ProfanityAction.NoAction,
ProfanityMarker = ProfanityMarker.Asterisk,
DeploymentName = "gpt-4o-mini",
AllowFallback = true,
Grade = "basic",
Tone = "formal",
Gender = "neutral",
AdaptiveDatasetId = "21000",
ReferenceTextPairs = {new ReferenceSentencePair("Please test this out.", "Vyzkoušejte si to.")},
}
})
{
Script = "Latn",
Language = "en",
TextType = TextType.Plain,
}
            });
            Response<TranslationResult> response = client.Translate(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Translate_TranslateText_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TranslateBody body = new TranslateBody(new TranslateInputItem[]
            {
new TranslateInputItem("This is a test.", new TranslateTarget[]
{
new TranslateTarget("cs")
{
Script = "Latn",
ProfanityAction = ProfanityAction.NoAction,
ProfanityMarker = ProfanityMarker.Asterisk,
DeploymentName = "gpt-4o-mini",
AllowFallback = true,
Grade = "basic",
Tone = "formal",
Gender = "neutral",
AdaptiveDatasetId = "21000",
ReferenceTextPairs = {new ReferenceSentencePair("Please test this out.", "Vyzkoušejte si to.")},
}
})
{
Script = "Latn",
Language = "en",
TextType = TextType.Plain,
}
            });
            Response<TranslationResult> response = await client.TranslateAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Translate_TranslateTextWithMinimumProperties()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "This is a test.",
targets = new object[]
{
new
{
language = "cs",
}
},
}
            },
            });
            Response response = client.Translate(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Translate_TranslateTextWithMinimumProperties_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "This is a test.",
targets = new object[]
{
new
{
language = "cs",
}
},
}
            },
            });
            Response response = await client.TranslateAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("language").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("translations")[0].GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Translate_TranslateTextWithMinimumProperties_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TranslateBody body = new TranslateBody(new TranslateInputItem[]
            {
new TranslateInputItem("This is a test.", new TranslateTarget[]
{
new TranslateTarget("cs")
})
            });
            Response<TranslationResult> response = client.Translate(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Translate_TranslateTextWithMinimumProperties_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TranslateBody body = new TranslateBody(new TranslateInputItem[]
            {
new TranslateInputItem("This is a test.", new TranslateTarget[]
{
new TranslateTarget("cs")
})
            });
            Response<TranslationResult> response = await client.TranslateAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Transliterate_TransliterateText()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "这是个测试。",
}
            },
            });
            Response response = client.Transliterate("zh-Hans", "Hans", "Latn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Transliterate_TransliterateText_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "这是个测试。",
}
            },
            });
            Response response = await client.TransliterateAsync("zh-Hans", "Hans", "Latn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Transliterate_TransliterateText_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TransliterateBody body = new TransliterateBody(new InputTextItem[]
            {
new InputTextItem("这是个测试。")
            });
            Response<TransliterateResult> response = client.Transliterate("zh-Hans", "Hans", "Latn", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Transliterate_TransliterateText_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TransliterateBody body = new TransliterateBody(new InputTextItem[]
            {
new InputTextItem("这是个测试。")
            });
            Response<TransliterateResult> response = await client.TransliterateAsync("zh-Hans", "Hans", "Latn", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Transliterate_TransliterateTextWithMinimumProperties()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "这是个测试。",
}
            },
            });
            Response response = client.Transliterate("zh-Hans", "Hans", "Latn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Transliterate_TransliterateTextWithMinimumProperties_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                inputs = new object[]
            {
new
{
text = "这是个测试。",
}
            },
            });
            Response response = await client.TransliterateAsync("zh-Hans", "Hans", "Latn", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("script").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TextTranslation_Transliterate_TransliterateTextWithMinimumProperties_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TransliterateBody body = new TransliterateBody(new InputTextItem[]
            {
new InputTextItem("这是个测试。")
            });
            Response<TransliterateResult> response = client.Transliterate("zh-Hans", "Hans", "Latn", body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TextTranslation_Transliterate_TransliterateTextWithMinimumProperties_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TextTranslationClient client = new TextTranslationClient(endpoint);

            TransliterateBody body = new TransliterateBody(new InputTextItem[]
            {
new InputTextItem("这是个测试。")
            });
            Response<TransliterateResult> response = await client.TransliterateAsync("zh-Hans", "Hans", "Latn", body);
        }
    }
}
