// <auto-generated/>

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using Azure.ResourceManager.FluidRelay;
using Azure.ResourceManager.FluidRelay.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.FluidRelay;

[ModelReaderWriterBuildable(typeof(FluidRelayContainerData))]
[ModelReaderWriterBuildable(typeof(FluidRelayContainerResource))]
[ModelReaderWriterBuildable(typeof(FluidRelayServerData))]
[ModelReaderWriterBuildable(typeof(FluidRelayServerResource))]
[ModelReaderWriterBuildable(typeof(CmkEncryptionProperties))]
[ModelReaderWriterBuildable(typeof(CmkIdentity))]
[ModelReaderWriterBuildable(typeof(Azure.ResourceManager.FluidRelay.Models.EncryptionProperties))]
[ModelReaderWriterBuildable(typeof(FluidRelayContainerList))]
[ModelReaderWriterBuildable(typeof(FluidRelayEndpoints))]
[ModelReaderWriterBuildable(typeof(FluidRelayServerKeys))]
[ModelReaderWriterBuildable(typeof(FluidRelayServerList))]
[ModelReaderWriterBuildable(typeof(FluidRelayServerPatch))]
[ModelReaderWriterBuildable(typeof(RegenerateKeyContent))]
public partial class AzureResourceManagerFluidRelayContext
{
    // TODO: This is workaround to get AzureResourceManagerContext, we will remove this when we fix the dependency context generation issue in System.ClientModel.
    private static AzureResourceManagerContext s_managerContext;
    private AzureResourceManagerContext ArmContext => s_managerContext ??= AzureResourceManagerContext.Default;

    partial void AddAdditionalFactories(Dictionary<Type, Func<ModelReaderWriterTypeBuilder>> factories)
    {
        factories.Add(typeof(ManagedServiceIdentity), () => ArmContext.GetTypeBuilder(typeof(ManagedServiceIdentity)));
        factories.Add(typeof(SystemData), () => ArmContext.GetTypeBuilder(typeof(SystemData)));
    }
}
