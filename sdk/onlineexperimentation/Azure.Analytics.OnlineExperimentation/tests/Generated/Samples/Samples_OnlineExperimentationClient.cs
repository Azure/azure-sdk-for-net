// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.OnlineExperimentation.Samples
{
    public partial class Samples_OnlineExperimentationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_GetMetric_GetMetric()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response response = client.GetMetric("events_purchase_creditcard", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_GetMetric_GetMetric_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response response = await client.GetMetricAsync("events_purchase_creditcard", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_GetMetric_GetMetric_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response<ExperimentMetric> response = client.GetMetric("events_purchase_creditcard");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_GetMetric_GetMetric_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response<ExperimentMetric> response = await client.GetMetricAsync("events_purchase_creditcard");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricAverage()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Average revenue per purchase [USD]",
                description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Average",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                        filter = "Revenue > 0",
                    },
                },
            });
            Response response = client.CreateOrUpdateMetric("avg_purchase_revenue", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricAverage_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Average revenue per purchase [USD]",
                description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Average",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                        filter = "Revenue > 0",
                    },
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("avg_purchase_revenue", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricEventCount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Number of purchases (credit card)",
                description = "The number of purchase transactions made with credit card. Refund transactions are excluded from this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "EventCount",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                        filter = "Revenue > 0 and ['payment.method'] == 'credit_card'",
                    }
                },
            });
            Response response = client.CreateOrUpdateMetric("events_purchase_creditcard", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricEventCount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Number of purchases (credit card)",
                description = "The number of purchase transactions made with credit card. Refund transactions are excluded from this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "EventCount",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                        filter = "Revenue > 0 and ['payment.method'] == 'credit_card'",
                    }
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("events_purchase_creditcard", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricEventRate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Refund rate",
                description = "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Neutral",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "EventRate",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                    },
                    ["rateCondition"] = "Revenue < 0"
                },
            });
            Response response = client.CreateOrUpdateMetric("rate_refund", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricEventRate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Refund rate",
                description = "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Neutral",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "EventRate",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                    },
                    ["rateCondition"] = "Revenue < 0"
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("rate_refund", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricPercentile()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "95th percentile of page load time [ms]",
                description = "The 95th percentile of the page load time for all pages. Measured in milliseconds. Review page-specific metric results to identify pages that need optimization.",
                lifecycle = "Active",
                categories = new object[]
            {
"Performance",
"Important"
            },
                desiredDirection = "Decrease",
                definition = new
                {
                    type = "Percentile",
                    value = new
                    {
                        eventName = "PageLoad",
                        eventProperty = "LoadTime_ms",
                    },
                    percentile = 95,
                },
            });
            Response response = client.CreateOrUpdateMetric("p95_page_load_time", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricPercentile_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "95th percentile of page load time [ms]",
                description = "The 95th percentile of the page load time for all pages. Measured in milliseconds. Review page-specific metric results to identify pages that need optimization.",
                lifecycle = "Active",
                categories = new object[]
            {
"Performance",
"Important"
            },
                desiredDirection = "Decrease",
                definition = new
                {
                    type = "Percentile",
                    value = new
                    {
                        eventName = "PageLoad",
                        eventProperty = "LoadTime_ms",
                    },
                    percentile = 95,
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("p95_page_load_time", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricSum()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Total revenue [USD]",
                description = "The total revenue in USD. Refund transactions contribute negatively to this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization",
"Important"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Sum",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                    },
                },
            });
            Response response = client.CreateOrUpdateMetric("sum_revenue", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricSum_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Total revenue [USD]",
                description = "The total revenue in USD. Refund transactions contribute negatively to this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization",
"Important"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Sum",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                    },
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("sum_revenue", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricUserCount()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Users with purchase",
                description = "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "UserCount",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                        filter = "Revenue > 0",
                    }
                },
            });
            Response response = client.CreateOrUpdateMetric("users_purchase", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricUserCount_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Users with purchase",
                description = "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new Dictionary<string, object>
                {
                    ["type"] = "UserCount",
                    ["event"] = new
                    {
                        eventName = "Transaction",
                        filter = "Revenue > 0",
                    }
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("users_purchase", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricUserRate()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Subscription ad conversion rate",
                description = "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "UserRate",
                    startEvent = new
                    {
                        eventName = "AdView",
                        filter = "Source == 'subscription_promo'",
                    },
                    endEvent = new
                    {
                        eventName = "Subscribe",
                        filter = "Status == 'Success'",
                    },
                },
            });
            Response response = client.CreateOrUpdateMetric("rate_subscription_ad", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_CreateOrUpdateMetric_CreateOrUpdateMetricUserRate_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Subscription ad conversion rate",
                description = "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "UserRate",
                    startEvent = new
                    {
                        eventName = "AdView",
                        filter = "Source == 'subscription_promo'",
                    },
                    endEvent = new
                    {
                        eventName = "Subscribe",
                        filter = "Status == 'Success'",
                    },
                },
            });
            Response response = await client.CreateOrUpdateMetricAsync("rate_subscription_ad", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("lifecycle").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("categories")[0].ToString());
            Console.WriteLine(result.GetProperty("desiredDirection").ToString());
            Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OnlineExperimentation_ValidateMetric_ValidateMetric()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Average revenue per purchase [USD]",
                description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Average",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                        filter = "Revenue >",
                    },
                },
            });
            Response response = client.ValidateMetric(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isValid").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OnlineExperimentation_ValidateMetric_ValidateMetric_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                displayName = "Average revenue per purchase [USD]",
                description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                lifecycle = "Active",
                categories = new object[]
            {
"Monetization"
            },
                desiredDirection = "Increase",
                definition = new
                {
                    type = "Average",
                    value = new
                    {
                        eventName = "Transaction",
                        eventProperty = "Revenue",
                        filter = "Revenue >",
                    },
                },
            });
            Response response = await client.ValidateMetricAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("isValid").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("code").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OnlineExperimentation_ValidateMetric_ValidateMetric_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            ExperimentMetric body = new ExperimentMetric(
                LifecycleStage.Active,
                "Average revenue per purchase [USD]",
                "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                new string[] { "Monetization" },
                DesiredDirection.Increase,
                new AverageMetricDefinition(new AggregatedValue("Transaction", "Revenue")
                {
                    Filter = "Revenue >",
                }));
            Response<ExperimentMetricValidationResult> response = client.ValidateMetric(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OnlineExperimentation_ValidateMetric_ValidateMetric_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            ExperimentMetric body = new ExperimentMetric(
                LifecycleStage.Active,
                "Average revenue per purchase [USD]",
                "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
                new string[] { "Monetization" },
                DesiredDirection.Increase,
                new AverageMetricDefinition(new AggregatedValue("Transaction", "Revenue")
                {
                    Filter = "Revenue >",
                }));
            Response<ExperimentMetricValidationResult> response = await client.ValidateMetricAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_DeleteMetric_DeleteMetric()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response response = client.DeleteMetric("avg_purchase_revenue");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_DeleteMetric_DeleteMetric_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            Response response = await client.DeleteMetricAsync("avg_purchase_revenue");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_GetMetrics_ListMetrics()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            foreach (BinaryData item in client.GetMetrics(null, 15, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("lifecycle").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("desiredDirection").ToString());
                Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_GetMetrics_ListMetrics_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetMetricsAsync(null, 15, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("lifecycle").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("categories")[0].ToString());
                Console.WriteLine(result.GetProperty("desiredDirection").ToString());
                Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ExperimentMetric_GetMetrics_ListMetrics_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            foreach (ExperimentMetric item in client.GetMetrics())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ExperimentMetric_GetMetrics_ListMetrics_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

            await foreach (ExperimentMetric item in client.GetMetricsAsync())
            {
            }
        }
    }
}
