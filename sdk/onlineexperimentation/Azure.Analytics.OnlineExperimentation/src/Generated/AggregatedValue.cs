// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> An event property value aggregated by a metric. </summary>
    public partial class AggregatedValue
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AggregatedValue"/>. </summary>
        /// <param name="eventName"> The name of the event. </param>
        /// <param name="eventProperty"> The key of the event property to aggregate. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="eventName"/> or <paramref name="eventProperty"/> is null. </exception>
        public AggregatedValue(string eventName, string eventProperty)
        {
            Argument.AssertNotNull(eventName, nameof(eventName));
            Argument.AssertNotNull(eventProperty, nameof(eventProperty));

            EventName = eventName;
            EventProperty = eventProperty;
        }

        /// <summary> Initializes a new instance of <see cref="AggregatedValue"/>. </summary>
        /// <param name="eventName"> The name of the event. </param>
        /// <param name="filter"> [Optional] A condition to filter events. </param>
        /// <param name="eventProperty"> The key of the event property to aggregate. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AggregatedValue(string eventName, string filter, string eventProperty, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EventName = eventName;
            Filter = filter;
            EventProperty = eventProperty;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AggregatedValue"/> for deserialization. </summary>
        internal AggregatedValue()
        {
        }

        /// <summary> The name of the event. </summary>
        public string EventName { get; set; }
        /// <summary> [Optional] A condition to filter events. </summary>
        public string Filter { get; set; }
        /// <summary> The key of the event property to aggregate. </summary>
        public string EventProperty { get; set; }
    }
}
