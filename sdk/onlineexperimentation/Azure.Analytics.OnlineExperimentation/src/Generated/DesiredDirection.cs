// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> Desired direction for an experiment metric value. </summary>
    public readonly partial struct DesiredDirection : IEquatable<DesiredDirection>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DesiredDirection"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DesiredDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IncreaseValue = "Increase";
        private const string DecreaseValue = "Decrease";
        private const string NeutralValue = "Neutral";

        /// <summary> An increase to the metric value is desired. E.g., Success rate, Total revenue. </summary>
        public static DesiredDirection Increase { get; } = new DesiredDirection(IncreaseValue);
        /// <summary> A decrease to the metric value is desired. E.g., Error rate, Latency. </summary>
        public static DesiredDirection Decrease { get; } = new DesiredDirection(DecreaseValue);
        /// <summary> Neither an increase nor a decrease to the metric value is desired, or the desired direction depends on other factors. E.g., Number of video play attempts, Number of user feedbacks. </summary>
        public static DesiredDirection Neutral { get; } = new DesiredDirection(NeutralValue);
        /// <summary> Determines if two <see cref="DesiredDirection"/> values are the same. </summary>
        public static bool operator ==(DesiredDirection left, DesiredDirection right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DesiredDirection"/> values are not the same. </summary>
        public static bool operator !=(DesiredDirection left, DesiredDirection right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DesiredDirection"/>. </summary>
        public static implicit operator DesiredDirection(string value) => new DesiredDirection(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DesiredDirection other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DesiredDirection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
