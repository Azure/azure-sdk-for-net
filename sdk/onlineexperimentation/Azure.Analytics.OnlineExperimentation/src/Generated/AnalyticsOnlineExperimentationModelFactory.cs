// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> Model factory for models. </summary>
    public static partial class AnalyticsOnlineExperimentationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.ExperimentMetric"/>. </summary>
        /// <param name="id"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        /// <param name="lifecycle"> Determines whether it is included in experiment analysis. </param>
        /// <param name="displayName"> A user-friendly display name for the experiment metric shown in reports and dashboards. </param>
        /// <param name="description"> A detailed description of the experiment metric. </param>
        /// <param name="categories"> Categories associated with the experiment metric. Used for organizing and filtering metrics. </param>
        /// <param name="desiredDirection"> The desired direction for changes in the metric value. </param>
        /// <param name="definition">
        /// The metric definition specifying how the metric value is calculated from event data.
        /// Please note <see cref="ExperimentMetricDefinition"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AverageMetricDefinition"/>, <see cref="EventCountMetricDefinition"/>, <see cref="EventRateMetricDefinition"/>, <see cref="PercentileMetricDefinition"/>, <see cref="SumMetricDefinition"/>, <see cref="UserCountMetricDefinition"/> and <see cref="UserRateMetricDefinition"/>.
        /// </param>
        /// <param name="eTag"> ETag of the experiment metric. </param>
        /// <param name="lastModifiedAt"> The timestamp (UTC) of the last modification to the experiment metric resource. </param>
        /// <returns> A new <see cref="OnlineExperimentation.ExperimentMetric"/> instance for mocking. </returns>
        public static ExperimentMetric ExperimentMetric(string id = null, LifecycleStage lifecycle = default, string displayName = null, string description = null, IEnumerable<string> categories = null, DesiredDirection desiredDirection = default, ExperimentMetricDefinition definition = null, ETag eTag = default, DateTimeOffset lastModifiedAt = default)
        {
            categories ??= new List<string>();

            return new ExperimentMetric(
                id,
                lifecycle,
                displayName,
                description,
                categories?.ToList(),
                desiredDirection,
                definition,
                eTag,
                lastModifiedAt,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.ExperimentMetricValidationResult"/>. </summary>
        /// <param name="isValid"> Indicates whether the experiment metric is valid. </param>
        /// <param name="diagnostics"> Diagnostic details from the validation process. </param>
        /// <returns> A new <see cref="OnlineExperimentation.ExperimentMetricValidationResult"/> instance for mocking. </returns>
        public static ExperimentMetricValidationResult ExperimentMetricValidationResult(bool isValid = default, IEnumerable<DiagnosticDetail> diagnostics = null)
        {
            diagnostics ??= new List<DiagnosticDetail>();

            return new ExperimentMetricValidationResult(isValid, diagnostics?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentation.DiagnosticDetail"/>. </summary>
        /// <param name="message"> A human-readable error message. </param>
        /// <param name="code"> The diagnostic error code. </param>
        /// <returns> A new <see cref="OnlineExperimentation.DiagnosticDetail"/> instance for mocking. </returns>
        public static DiagnosticDetail DiagnosticDetail(string message = null, DiagnosticCode code = default)
        {
            return new DiagnosticDetail(message, code, serializedAdditionalRawData: null);
        }
    }
}
