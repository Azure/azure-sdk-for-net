// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.OnlineExperimentation
{
    /// <summary> How the metric definition calculates metric values from event data. </summary>
    internal readonly partial struct ExperimentMetricType : IEquatable<ExperimentMetricType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExperimentMetricType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExperimentMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EventCountValue = "EventCount";
        private const string UserCountValue = "UserCount";
        private const string EventRateValue = "EventRate";
        private const string UserRateValue = "UserRate";
        private const string SumValue = "Sum";
        private const string AverageValue = "Average";
        private const string PercentileValue = "Percentile";

        /// <summary> Counts the occurrences of an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static ExperimentMetricType EventCount { get; } = new ExperimentMetricType(EventCountValue);
        /// <summary> Counts the number of unique users who encounter an event. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static ExperimentMetricType UserCount { get; } = new ExperimentMetricType(UserCountValue);
        /// <summary> Calculates the percentage of events that satisfy a specified condition. </summary>
        public static ExperimentMetricType EventRate { get; } = new ExperimentMetricType(EventRateValue);
        /// <summary> Calculates the percentage of users who encounter a start event and subsequently encounter an end event. Users must encounter the start event before the end event to be counted. </summary>
        public static ExperimentMetricType UserRate { get; } = new ExperimentMetricType(UserRateValue);
        /// <summary> Calculates the sum of a specified event property. Experiment analysis accounts for unequal traffic allocation. </summary>
        public static ExperimentMetricType Sum { get; } = new ExperimentMetricType(SumValue);
        /// <summary> Calculates the average value of a specified event property. </summary>
        public static ExperimentMetricType Average { get; } = new ExperimentMetricType(AverageValue);
        /// <summary> Calculates a specified percentile of an event property. </summary>
        public static ExperimentMetricType Percentile { get; } = new ExperimentMetricType(PercentileValue);
        /// <summary> Determines if two <see cref="ExperimentMetricType"/> values are the same. </summary>
        public static bool operator ==(ExperimentMetricType left, ExperimentMetricType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExperimentMetricType"/> values are not the same. </summary>
        public static bool operator !=(ExperimentMetricType left, ExperimentMetricType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExperimentMetricType"/>. </summary>
        public static implicit operator ExperimentMetricType(string value) => new ExperimentMetricType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExperimentMetricType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExperimentMetricType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
