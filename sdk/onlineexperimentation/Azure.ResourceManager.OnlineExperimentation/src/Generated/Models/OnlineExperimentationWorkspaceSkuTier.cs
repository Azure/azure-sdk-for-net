// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OnlineExperimentation.Models
{
    /// <summary> The allowed SKU tiers for the online experimentation workspace. </summary>
    public readonly partial struct OnlineExperimentationWorkspaceSkuTier : IEquatable<OnlineExperimentationWorkspaceSkuTier>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentationWorkspaceSkuTier"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OnlineExperimentationWorkspaceSkuTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FreeValue = "Free";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";
        private const string DeveloperValue = "Developer";

        /// <summary> The Free service tier. </summary>
        public static OnlineExperimentationWorkspaceSkuTier Free { get; } = new OnlineExperimentationWorkspaceSkuTier(FreeValue);
        /// <summary> The Standard service tier. </summary>
        public static OnlineExperimentationWorkspaceSkuTier Standard { get; } = new OnlineExperimentationWorkspaceSkuTier(StandardValue);
        /// <summary> The Premium service tier. </summary>
        public static OnlineExperimentationWorkspaceSkuTier Premium { get; } = new OnlineExperimentationWorkspaceSkuTier(PremiumValue);
        /// <summary> The Developer service tier. </summary>
        public static OnlineExperimentationWorkspaceSkuTier Developer { get; } = new OnlineExperimentationWorkspaceSkuTier(DeveloperValue);
        /// <summary> Determines if two <see cref="OnlineExperimentationWorkspaceSkuTier"/> values are the same. </summary>
        public static bool operator ==(OnlineExperimentationWorkspaceSkuTier left, OnlineExperimentationWorkspaceSkuTier right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OnlineExperimentationWorkspaceSkuTier"/> values are not the same. </summary>
        public static bool operator !=(OnlineExperimentationWorkspaceSkuTier left, OnlineExperimentationWorkspaceSkuTier right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OnlineExperimentationWorkspaceSkuTier"/>. </summary>
        public static implicit operator OnlineExperimentationWorkspaceSkuTier(string value) => new OnlineExperimentationWorkspaceSkuTier(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OnlineExperimentationWorkspaceSkuTier other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OnlineExperimentationWorkspaceSkuTier other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
