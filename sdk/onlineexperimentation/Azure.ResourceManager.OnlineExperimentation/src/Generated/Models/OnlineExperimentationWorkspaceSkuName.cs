// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OnlineExperimentation.Models
{
    /// <summary> The allowed SKU names for the online experimentation workspace. </summary>
    public readonly partial struct OnlineExperimentationWorkspaceSkuName : IEquatable<OnlineExperimentationWorkspaceSkuName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OnlineExperimentationWorkspaceSkuName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OnlineExperimentationWorkspaceSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string F0Value = "F0";
        private const string S0Value = "S0";
        private const string P0Value = "P0";
        private const string D0Value = "D0";

        /// <summary> The Free service sku name. </summary>
        public static OnlineExperimentationWorkspaceSkuName F0 { get; } = new OnlineExperimentationWorkspaceSkuName(F0Value);
        /// <summary> The Standard service sku name. </summary>
        public static OnlineExperimentationWorkspaceSkuName S0 { get; } = new OnlineExperimentationWorkspaceSkuName(S0Value);
        /// <summary> The Premium service sku name. </summary>
        public static OnlineExperimentationWorkspaceSkuName P0 { get; } = new OnlineExperimentationWorkspaceSkuName(P0Value);
        /// <summary> The Developer service sku name. </summary>
        public static OnlineExperimentationWorkspaceSkuName D0 { get; } = new OnlineExperimentationWorkspaceSkuName(D0Value);
        /// <summary> Determines if two <see cref="OnlineExperimentationWorkspaceSkuName"/> values are the same. </summary>
        public static bool operator ==(OnlineExperimentationWorkspaceSkuName left, OnlineExperimentationWorkspaceSkuName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OnlineExperimentationWorkspaceSkuName"/> values are not the same. </summary>
        public static bool operator !=(OnlineExperimentationWorkspaceSkuName left, OnlineExperimentationWorkspaceSkuName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OnlineExperimentationWorkspaceSkuName"/>. </summary>
        public static implicit operator OnlineExperimentationWorkspaceSkuName(string value) => new OnlineExperimentationWorkspaceSkuName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OnlineExperimentationWorkspaceSkuName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OnlineExperimentationWorkspaceSkuName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
