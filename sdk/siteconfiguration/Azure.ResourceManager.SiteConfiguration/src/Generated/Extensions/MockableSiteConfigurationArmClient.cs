// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.SiteConfiguration.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableSiteConfigurationArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableSiteConfigurationArmClient"/> class for mocking. </summary>
        protected MockableSiteConfigurationArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableSiteConfigurationArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableSiteConfigurationArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableSiteConfigurationArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ConfigurationReferenceResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ConfigurationReferenceResources and their operations over a ConfigurationReferenceResource. </returns>
        public virtual ConfigurationReferenceCollection GetConfigurationReferences(ResourceIdentifier scope)
        {
            return new ConfigurationReferenceCollection(Client, scope);
        }

        /// <summary>
        /// Get a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ConfigurationReferenceResource>> GetConfigurationReferenceAsync(ResourceIdentifier scope, string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            return await GetConfigurationReferences(scope).GetAsync(configurationReferenceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<ConfigurationReferenceResource> GetConfigurationReference(ResourceIdentifier scope, string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            return GetConfigurationReferences(scope).Get(configurationReferenceName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigurationReferenceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigurationReferenceResource.CreateResourceIdentifier" /> to create a <see cref="ConfigurationReferenceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigurationReferenceResource"/> object. </returns>
        public virtual ConfigurationReferenceResource GetConfigurationReferenceResource(ResourceIdentifier id)
        {
            ConfigurationReferenceResource.ValidateResourceId(id);
            return new ConfigurationReferenceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="ConfigurationResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConfigurationResource.CreateResourceIdentifier" /> to create a <see cref="ConfigurationResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConfigurationResource"/> object. </returns>
        public virtual ConfigurationResource GetConfigurationResource(ResourceIdentifier id)
        {
            ConfigurationResource.ValidateResourceId(id);
            return new ConfigurationResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DynamicConfigurationResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DynamicConfigurationResource.CreateResourceIdentifier" /> to create a <see cref="DynamicConfigurationResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DynamicConfigurationResource"/> object. </returns>
        public virtual DynamicConfigurationResource GetDynamicConfigurationResource(ResourceIdentifier id)
        {
            DynamicConfigurationResource.ValidateResourceId(id);
            return new DynamicConfigurationResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DynamicConfigurationVersionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DynamicConfigurationVersionResource.CreateResourceIdentifier" /> to create a <see cref="DynamicConfigurationVersionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DynamicConfigurationVersionResource"/> object. </returns>
        public virtual DynamicConfigurationVersionResource GetDynamicConfigurationVersionResource(ResourceIdentifier id)
        {
            DynamicConfigurationVersionResource.ValidateResourceId(id);
            return new DynamicConfigurationVersionResource(Client, id);
        }
    }
}
