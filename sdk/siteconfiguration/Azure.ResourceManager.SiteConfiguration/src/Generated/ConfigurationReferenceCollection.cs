// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.SiteConfiguration
{
    /// <summary>
    /// A class representing a collection of <see cref="ConfigurationReferenceResource"/> and their operations.
    /// Each <see cref="ConfigurationReferenceResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get a <see cref="ConfigurationReferenceCollection"/> instance call the GetConfigurationReferences method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class ConfigurationReferenceCollection : ArmCollection, IEnumerable<ConfigurationReferenceResource>, IAsyncEnumerable<ConfigurationReferenceResource>
    {
        private readonly ClientDiagnostics _configurationReferenceClientDiagnostics;
        private readonly ConfigurationReferencesRestOperations _configurationReferenceRestClient;

        /// <summary> Initializes a new instance of the <see cref="ConfigurationReferenceCollection"/> class for mocking. </summary>
        protected ConfigurationReferenceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ConfigurationReferenceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ConfigurationReferenceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _configurationReferenceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SiteConfiguration", ConfigurationReferenceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ConfigurationReferenceResource.ResourceType, out string configurationReferenceApiVersion);
            _configurationReferenceRestClient = new ConfigurationReferencesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, configurationReferenceApiVersion);
        }

        /// <summary>
        /// Create a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ConfigurationReferenceResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string configurationReferenceName, ConfigurationReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _configurationReferenceRestClient.CreateOrUpdateAsync(Id, configurationReferenceName, data, cancellationToken).ConfigureAwait(false);
                var uri = _configurationReferenceRestClient.CreateCreateOrUpdateRequestUri(Id, configurationReferenceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new SiteConfigurationArmOperation<ConfigurationReferenceResource>(Response.FromValue(new ConfigurationReferenceResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ConfigurationReferenceResource> CreateOrUpdate(WaitUntil waitUntil, string configurationReferenceName, ConfigurationReferenceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _configurationReferenceRestClient.CreateOrUpdate(Id, configurationReferenceName, data, cancellationToken);
                var uri = _configurationReferenceRestClient.CreateCreateOrUpdateRequestUri(Id, configurationReferenceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new SiteConfigurationArmOperation<ConfigurationReferenceResource>(Response.FromValue(new ConfigurationReferenceResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual async Task<Response<ConfigurationReferenceResource>> GetAsync(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = await _configurationReferenceRestClient.GetAsync(Id, configurationReferenceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfigurationReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ConfigurationReference
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual Response<ConfigurationReferenceResource> Get(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.Get");
            scope.Start();
            try
            {
                var response = _configurationReferenceRestClient.Get(Id, configurationReferenceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfigurationReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List ConfigurationReference resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ConfigurationReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ConfigurationReferenceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _configurationReferenceRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _configurationReferenceRestClient.CreateListNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ConfigurationReferenceResource(Client, ConfigurationReferenceData.DeserializeConfigurationReferenceData(e)), _configurationReferenceClientDiagnostics, Pipeline, "ConfigurationReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ConfigurationReference resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ConfigurationReferenceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ConfigurationReferenceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _configurationReferenceRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _configurationReferenceRestClient.CreateListNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ConfigurationReferenceResource(Client, ConfigurationReferenceData.DeserializeConfigurationReferenceData(e)), _configurationReferenceClientDiagnostics, Pipeline, "ConfigurationReferenceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _configurationReferenceRestClient.GetAsync(Id, configurationReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual Response<bool> Exists(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.Exists");
            scope.Start();
            try
            {
                var response = _configurationReferenceRestClient.Get(Id, configurationReferenceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual async Task<NullableResponse<ConfigurationReferenceResource>> GetIfExistsAsync(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _configurationReferenceRestClient.GetAsync(Id, configurationReferenceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ConfigurationReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new ConfigurationReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.Edge/configurationReferences/{configurationReferenceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfigurationReferences_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfigurationReferenceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configurationReferenceName"> The name of the ConfigurationReference. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="configurationReferenceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="configurationReferenceName"/> is null. </exception>
        public virtual NullableResponse<ConfigurationReferenceResource> GetIfExists(string configurationReferenceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(configurationReferenceName, nameof(configurationReferenceName));

            using var scope = _configurationReferenceClientDiagnostics.CreateScope("ConfigurationReferenceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _configurationReferenceRestClient.Get(Id, configurationReferenceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ConfigurationReferenceResource>(response.GetRawResponse());
                return Response.FromValue(new ConfigurationReferenceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ConfigurationReferenceResource> IEnumerable<ConfigurationReferenceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ConfigurationReferenceResource> IAsyncEnumerable<ConfigurationReferenceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
