// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Data.Tables.Models
{
    public partial class TableAccessPolicy : IXmlSerializable, IModelSerializable<TableAccessPolicy>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "AccessPolicy");
            if (StartsOn != null)
            {
                writer.WriteStartElement("Start");
                writer.WriteValue(StartsOn.Value, "O");
                writer.WriteEndElement();
            }
            if (ExpiresOn != null)
            {
                writer.WriteStartElement("Expiry");
                writer.WriteValue(ExpiresOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Permission != null)
            {
                writer.WriteStartElement("Permission");
                writer.WriteValue(Permission);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static TableAccessPolicy DeserializeTableAccessPolicy(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            DateTimeOffset? startsOn = default;
            DateTimeOffset? expiresOn = default;
            string permission = default;
            if (element.Element("Start") is XElement startElement)
            {
                startsOn = startElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("Expiry") is XElement expiryElement)
            {
                expiresOn = expiryElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("Permission") is XElement permissionElement)
            {
                permission = (string)permissionElement;
            }
            return new TableAccessPolicy(startsOn, expiresOn, permission, default);
        }

        BinaryData IModelSerializable<TableAccessPolicy>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        TableAccessPolicy IModelSerializable<TableAccessPolicy>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeTableAccessPolicy(XElement.Load(data.ToStream()), options);
        }

        public static implicit operator RequestContent(TableAccessPolicy model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator TableAccessPolicy(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeTableAccessPolicy(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
