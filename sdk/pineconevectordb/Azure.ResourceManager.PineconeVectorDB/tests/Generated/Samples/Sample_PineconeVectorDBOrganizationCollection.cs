// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.PineconeVectorDB.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.PineconeVectorDB.Samples
{
    public partial class Sample_PineconeVectorDBOrganizationCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_OrganizationsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2024-10-22-preview/Organizations_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PineconeVectorDBOrganizationResource
            PineconeVectorDBOrganizationCollection collection = resourceGroupResource.GetPineconeVectorDBOrganizations();

            // invoke the operation
            string organizationname = "example-organization-name";
            PineconeVectorDBOrganizationData data = new PineconeVectorDBOrganizationData(new AzureLocation("us-east"))
            {
                Properties = new PineconeVectorDBOrganizationProperties(new PineconeVectorDBMarketplaceDetails(new PineconeVectorDBOfferDetails("4d194daf-fa20-46a8-bfb4-5b7d96cae009", "013124d0-bf05-4eab-a6bb-01fa83870642", "62dda065-5acd-4ac5-b418-8610beed92a2")
                {
                    PlanName = "Freemium",
                    TermUnit = "der",
                    TermId = "a2b7ce01-f06d-4874-9f77-6ea4a4875c16",
                })
                {
                    SubscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077",
                }, new PineconeVectorDBUserDetails
                {
                    FirstName = "Jimmy",
                    LastName = "McExample",
                    EmailAddress = "example.user@example.com",
                    Upn = "example.user@example.com",
                    PhoneNumber = "555-555-5555",
                })
                {
                    PartnerDisplayName = "My Example Organization",
                    SingleSignOnProperties = new PineconeVectorDBSingleSignOnPropertiesV2(PineconeVectorDBSingleSignOnType.Saml)
                    {
                        State = PineconeVectorDBSingleSignOnState.Initial,
                        EnterpriseAppId = "44d3fb26-d8d5-41ff-9b9a-769737f22f13",
                        Uri = "https://login.pinecone.io/?sso=true&connection=dfwgsqzkbrjqrglcsa",
                        AadDomains = { "exampledomain" },
                    },
                },
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("ident904655400")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["my-tag"] = "tag.value"
},
            };
            ArmOperation<PineconeVectorDBOrganizationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, organizationname, data);
            PineconeVectorDBOrganizationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PineconeVectorDBOrganizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_OrganizationsGetMaximumSet()
        {
            // Generated from example definition: 2024-10-22-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PineconeVectorDBOrganizationResource
            PineconeVectorDBOrganizationCollection collection = resourceGroupResource.GetPineconeVectorDBOrganizations();

            // invoke the operation
            string organizationname = "example-organization-name";
            PineconeVectorDBOrganizationResource result = await collection.GetAsync(organizationname);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PineconeVectorDBOrganizationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_OrganizationsListByResourceGroupMaximumSet()
        {
            // Generated from example definition: 2024-10-22-preview/Organizations_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PineconeVectorDBOrganizationResource
            PineconeVectorDBOrganizationCollection collection = resourceGroupResource.GetPineconeVectorDBOrganizations();

            // invoke the operation and iterate over the result
            await foreach (PineconeVectorDBOrganizationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PineconeVectorDBOrganizationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_OrganizationsGetMaximumSet()
        {
            // Generated from example definition: 2024-10-22-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PineconeVectorDBOrganizationResource
            PineconeVectorDBOrganizationCollection collection = resourceGroupResource.GetPineconeVectorDBOrganizations();

            // invoke the operation
            string organizationname = "example-organization-name";
            bool result = await collection.ExistsAsync(organizationname);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_OrganizationsGetMaximumSet()
        {
            // Generated from example definition: 2024-10-22-preview/Organizations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "OrganizationResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "76a38ef6-c8c1-4f0d-bfe0-00ec782c8077";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this PineconeVectorDBOrganizationResource
            PineconeVectorDBOrganizationCollection collection = resourceGroupResource.GetPineconeVectorDBOrganizations();

            // invoke the operation
            string organizationname = "example-organization-name";
            NullableResponse<PineconeVectorDBOrganizationResource> response = await collection.GetIfExistsAsync(organizationname);
            PineconeVectorDBOrganizationResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PineconeVectorDBOrganizationData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
