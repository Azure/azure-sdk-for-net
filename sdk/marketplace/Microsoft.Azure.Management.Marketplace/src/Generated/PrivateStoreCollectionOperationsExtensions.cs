// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Marketplace
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateStoreCollectionOperations.
    /// </summary>
    public static partial class PrivateStoreCollectionOperationsExtensions
    {
            /// <summary>
            /// Gets private store collections list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            public static CollectionsList List(this IPrivateStoreCollectionOperations operations, string privateStoreId)
            {
                return operations.ListAsync(privateStoreId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets private store collections list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionsList> ListAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(privateStoreId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets private store collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            public static Collection Get(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId)
            {
                return operations.GetAsync(privateStoreId, collectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets private store collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> GetAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(privateStoreId, collectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update private store collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static Collection CreateOrUpdate(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, Collection payload = default(Collection))
            {
                return operations.CreateOrUpdateAsync(privateStoreId, collectionId, payload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update private store collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> CreateOrUpdateAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, Collection payload = default(Collection), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(privateStoreId, collectionId, payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a collection from the given private store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            public static void Delete(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId)
            {
                operations.DeleteAsync(privateStoreId, collectionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a collection from the given private store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(privateStoreId, collectionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete Private store collection. This is a workaround.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// Possible values include: 'DeletePrivateStoreOffer',
            /// 'DeletePrivateStoreCollection', 'DeletePrivateStoreCollectionOffer', 'Ping'
            /// </param>
            public static void Post(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, string payload = default(string))
            {
                operations.PostAsync(privateStoreId, collectionId, payload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Private store collection. This is a workaround.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// Possible values include: 'DeletePrivateStoreOffer',
            /// 'DeletePrivateStoreCollection', 'DeletePrivateStoreCollectionOffer', 'Ping'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, string payload = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(privateStoreId, collectionId, payload, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// transferring offers (copy or move) from source collection to target
            /// collection(s)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// </param>
            public static TransferOffersResponse TransferOffers(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, TransferOffersProperties payload = default(TransferOffersProperties))
            {
                return operations.TransferOffersAsync(privateStoreId, collectionId, payload).GetAwaiter().GetResult();
            }

            /// <summary>
            /// transferring offers (copy or move) from source collection to target
            /// collection(s)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='privateStoreId'>
            /// The store ID - must use the tenant ID
            /// </param>
            /// <param name='collectionId'>
            /// The collection ID
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransferOffersResponse> TransferOffersAsync(this IPrivateStoreCollectionOperations operations, string privateStoreId, string collectionId, TransferOffersProperties payload = default(TransferOffersProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TransferOffersWithHttpMessagesAsync(privateStoreId, collectionId, payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
