// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary>
    /// A Class representing a RequestApprovalResource along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="RequestApprovalResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetRequestApprovalResource method.
    /// Otherwise you can get one from its parent resource <see cref="PrivateStoreResource" /> using the GetRequestApprovalResource method.
    /// </summary>
    public partial class RequestApprovalResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="RequestApprovalResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string privateStoreId, string requestApprovalId)
        {
            var resourceId = $"/providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _requestApprovalResourcePrivateStoreClientDiagnostics;
        private readonly PrivateStoreRestOperations _requestApprovalResourcePrivateStoreRestClient;
        private readonly RequestApprovalResourceData _data;

        /// <summary> Initializes a new instance of the <see cref="RequestApprovalResource"/> class for mocking. </summary>
        protected RequestApprovalResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "RequestApprovalResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal RequestApprovalResource(ArmClient client, RequestApprovalResourceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="RequestApprovalResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal RequestApprovalResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _requestApprovalResourcePrivateStoreClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Marketplace", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string requestApprovalResourcePrivateStoreApiVersion);
            _requestApprovalResourcePrivateStoreRestClient = new PrivateStoreRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, requestApprovalResourcePrivateStoreApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Marketplace/privateStores/requestApprovals";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual RequestApprovalResourceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get open request approval details
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_GetRequestApproval
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestApprovalResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.Get");
            scope.Start();
            try
            {
                var response = await _requestApprovalResourcePrivateStoreRestClient.GetRequestApprovalAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RequestApprovalResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get open request approval details
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_GetRequestApproval
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestApprovalResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.Get");
            scope.Start();
            try
            {
                var response = _requestApprovalResourcePrivateStoreRestClient.GetRequestApproval(Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RequestApprovalResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create approval request
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_CreateApprovalRequest
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<RequestApprovalResource>> UpdateAsync(WaitUntil waitUntil, RequestApprovalResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.Update");
            scope.Start();
            try
            {
                var response = await _requestApprovalResourcePrivateStoreRestClient.CreateApprovalRequestAsync(Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new MarketplaceArmOperation<RequestApprovalResource>(Response.FromValue(new RequestApprovalResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create approval request
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_CreateApprovalRequest
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<RequestApprovalResource> Update(WaitUntil waitUntil, RequestApprovalResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.Update");
            scope.Start();
            try
            {
                var response = _requestApprovalResourcePrivateStoreRestClient.CreateApprovalRequest(Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new MarketplaceArmOperation<RequestApprovalResource>(Response.FromValue(new RequestApprovalResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get request statuses foreach plan, this api is used as a complex GET action.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}/query
        /// Operation Id: PrivateStore_QueryRequestApproval
        /// </summary>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<QueryRequestApproval>> QueryRequestApprovalAsync(QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.QueryRequestApproval");
            scope.Start();
            try
            {
                var response = await _requestApprovalResourcePrivateStoreRestClient.QueryRequestApprovalAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get request statuses foreach plan, this api is used as a complex GET action.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}/query
        /// Operation Id: PrivateStore_QueryRequestApproval
        /// </summary>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<QueryRequestApproval> QueryRequestApproval(QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.QueryRequestApproval");
            scope.Start();
            try
            {
                var response = _requestApprovalResourcePrivateStoreRestClient.QueryRequestApproval(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Withdraw a user request approval on specific plan
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}/withdrawPlan
        /// Operation Id: PrivateStore_WithdrawPlan
        /// </summary>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> WithdrawPlanAsync(WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.WithdrawPlan");
            scope.Start();
            try
            {
                var response = await _requestApprovalResourcePrivateStoreRestClient.WithdrawPlanAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Withdraw a user request approval on specific plan
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}/withdrawPlan
        /// Operation Id: PrivateStore_WithdrawPlan
        /// </summary>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response WithdrawPlan(WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _requestApprovalResourcePrivateStoreClientDiagnostics.CreateScope("RequestApprovalResource.WithdrawPlan");
            scope.Start();
            try
            {
                var response = _requestApprovalResourcePrivateStoreRestClient.WithdrawPlan(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
