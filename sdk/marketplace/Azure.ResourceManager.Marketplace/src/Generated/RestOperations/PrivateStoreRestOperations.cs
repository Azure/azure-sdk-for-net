// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    internal partial class PrivateStoreRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of PrivateStoreRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public PrivateStoreRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2022-03-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal HttpMessage CreateListRequest(string useCache)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (useCache != null)
            {
                uri.AppendQuery("use-cache", useCache, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PrivateStoreList>> ListAsync(string useCache = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(useCache);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PrivateStoreList> List(string useCache = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(useCache);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<PrivateStoreData>> GetAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateGetRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreData.DeserializePrivateStoreData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((PrivateStoreData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<PrivateStoreData> Get(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateGetRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreData.DeserializePrivateStoreData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((PrivateStoreData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string privateStoreId, PrivateStoreData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Changes private store properties. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="data"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string privateStoreId, PrivateStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(privateStoreId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Changes private store properties. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="data"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string privateStoreId, PrivateStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(privateStoreId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateDeleteRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateDeleteRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAnyExistingOffersInTheCollectionsRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/anyExistingOffersInTheCollections", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Query whether exists any offer in the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AnyExistingOffersInTheCollectionsResponse>> AnyExistingOffersInTheCollectionsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateAnyExistingOffersInTheCollectionsRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnyExistingOffersInTheCollectionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AnyExistingOffersInTheCollectionsResponse.DeserializeAnyExistingOffersInTheCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Query whether exists any offer in the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AnyExistingOffersInTheCollectionsResponse> AnyExistingOffersInTheCollections(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateAnyExistingOffersInTheCollectionsRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AnyExistingOffersInTheCollectionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AnyExistingOffersInTheCollectionsResponse.DeserializeAnyExistingOffersInTheCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryOffersRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryOffers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<QueryOffers>> QueryOffersAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryOffersRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<QueryOffers> QueryOffers(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryOffersRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryUserOffersRequest(string privateStoreId, QueryUserOffersProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryUserOffers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List of user&apos;s approved offers for the provided offers and subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryUserOffersProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<QueryOffers>> QueryUserOffersAsync(string privateStoreId, QueryUserOffersProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryUserOffersRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List of user&apos;s approved offers for the provided offers and subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryUserOffersProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<QueryOffers> QueryUserOffers(string privateStoreId, QueryUserOffersProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryUserOffersRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBillingAccountsRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/billingAccounts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<BillingAccountsResponse>> BillingAccountsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateBillingAccountsRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BillingAccountsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BillingAccountsResponse.DeserializeBillingAccountsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<BillingAccountsResponse> BillingAccounts(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateBillingAccountsRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BillingAccountsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BillingAccountsResponse.DeserializeBillingAccountsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCollectionsToSubscriptionsMappingRequest(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collectionsToSubscriptionsMapping", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<CollectionsToSubscriptionsMappingResponse>> CollectionsToSubscriptionsMappingAsync(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateCollectionsToSubscriptionsMappingRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionsToSubscriptionsMappingResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionsToSubscriptionsMappingResponse.DeserializeCollectionsToSubscriptionsMappingResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<CollectionsToSubscriptionsMappingResponse> CollectionsToSubscriptionsMapping(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateCollectionsToSubscriptionsMappingRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionsToSubscriptionsMappingResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionsToSubscriptionsMappingResponse.DeserializeCollectionsToSubscriptionsMappingResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryApprovedPlansRequest(string privateStoreId, QueryApprovedPlansPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryApprovedPlans", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<QueryApprovedPlansResponse>> QueryApprovedPlansAsync(string privateStoreId, QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryApprovedPlansRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryApprovedPlansResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryApprovedPlansResponse.DeserializeQueryApprovedPlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<QueryApprovedPlansResponse> QueryApprovedPlans(string privateStoreId, QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryApprovedPlansRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryApprovedPlansResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryApprovedPlansResponse.DeserializeQueryApprovedPlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBulkCollectionsActionRequest(string privateStoreId, BulkCollectionsPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/bulkCollectionsAction", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<BulkCollectionsResponse>> BulkCollectionsActionAsync(string privateStoreId, BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateBulkCollectionsActionRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BulkCollectionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BulkCollectionsResponse.DeserializeBulkCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<BulkCollectionsResponse> BulkCollectionsAction(string privateStoreId, BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateBulkCollectionsActionRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BulkCollectionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BulkCollectionsResponse.DeserializeBulkCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetApprovalRequestsListRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<RequestApprovalsList>> GetApprovalRequestsListAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateGetApprovalRequestsListRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalsList.DeserializeRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<RequestApprovalsList> GetApprovalRequestsList(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateGetApprovalRequestsListRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalsList.DeserializeRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequestApprovalRequest(string privateStoreId, string requestApprovalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<RequestApprovalResourceData>> GetRequestApprovalAsync(string privateStoreId, string requestApprovalId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateGetRequestApprovalRequest(privateStoreId, requestApprovalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalResourceData.DeserializeRequestApprovalResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((RequestApprovalResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<RequestApprovalResourceData> GetRequestApproval(string privateStoreId, string requestApprovalId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateGetRequestApprovalRequest(privateStoreId, requestApprovalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalResourceData.DeserializeRequestApprovalResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((RequestApprovalResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateApprovalRequestRequest(string privateStoreId, string requestApprovalId, RequestApprovalResourceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create approval request. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="data"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="requestApprovalId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<RequestApprovalResourceData>> CreateApprovalRequestAsync(string privateStoreId, string requestApprovalId, RequestApprovalResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateApprovalRequestRequest(privateStoreId, requestApprovalId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalResourceData.DeserializeRequestApprovalResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create approval request. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="data"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="requestApprovalId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<RequestApprovalResourceData> CreateApprovalRequest(string privateStoreId, string requestApprovalId, RequestApprovalResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateApprovalRequestRequest(privateStoreId, requestApprovalId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalResourceData.DeserializeRequestApprovalResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryRequestApprovalRequest(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendPath("/query", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<QueryRequestApproval>> QueryRequestApprovalAsync(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateQueryRequestApprovalRequest(privateStoreId, requestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryRequestApproval value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.QueryRequestApproval.DeserializeQueryRequestApproval(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<QueryRequestApproval> QueryRequestApproval(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateQueryRequestApprovalRequest(privateStoreId, requestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryRequestApproval value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.QueryRequestApproval.DeserializeQueryRequestApproval(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAdminRequestApprovalsListRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AdminRequestApprovalsList>> AdminRequestApprovalsListAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateAdminRequestApprovalsListRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.AdminRequestApprovalsList.DeserializeAdminRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AdminRequestApprovalsList> AdminRequestApprovalsList(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateAdminRequestApprovalsListRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.AdminRequestApprovalsList.DeserializeAdminRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAdminRequestApprovalRequest(string privateStoreId, string adminRequestApprovalId, string publisherId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals/", false);
            uri.AppendPath(adminRequestApprovalId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            uri.AppendQuery("publisherId", publisherId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AdminRequestApprovalsResourceData>> GetAdminRequestApprovalAsync(string privateStoreId, string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var message = CreateGetAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, publisherId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminRequestApprovalsResourceData.DeserializeAdminRequestApprovalsResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AdminRequestApprovalsResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AdminRequestApprovalsResourceData> GetAdminRequestApproval(string privateStoreId, string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var message = CreateGetAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, publisherId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminRequestApprovalsResourceData.DeserializeAdminRequestApprovalsResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AdminRequestApprovalsResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAdminRequestApprovalRequest(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResourceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals/", false);
            uri.AppendPath(adminRequestApprovalId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="data"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AdminRequestApprovalsResourceData>> UpdateAdminRequestApprovalAsync(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminRequestApprovalsResourceData.DeserializeAdminRequestApprovalsResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="data"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AdminRequestApprovalsResourceData> UpdateAdminRequestApproval(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateUpdateAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminRequestApprovalsResourceData.DeserializeAdminRequestApprovalsResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryNotificationsStateRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryNotificationsState", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<PrivateStoreNotificationsState>> QueryNotificationsStateAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryNotificationsStateRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreNotificationsState value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreNotificationsState.DeserializePrivateStoreNotificationsState(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<PrivateStoreNotificationsState> QueryNotificationsState(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateQueryNotificationsStateRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreNotificationsState value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreNotificationsState.DeserializePrivateStoreNotificationsState(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAcknowledgeOfferNotificationRequest(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendPath("/acknowledgeNotification", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> AcknowledgeOfferNotificationAsync(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var message = CreateAcknowledgeOfferNotificationRequest(privateStoreId, offerId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response AcknowledgeOfferNotification(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var message = CreateAcknowledgeOfferNotificationRequest(privateStoreId, offerId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateWithdrawPlanRequest(string privateStoreId, string requestApprovalId, WithdrawProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendPath("/withdrawPlan", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> WithdrawPlanAsync(string privateStoreId, string requestApprovalId, WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateWithdrawPlanRequest(privateStoreId, requestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response WithdrawPlan(string privateStoreId, string requestApprovalId, WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));
            Argument.AssertNotNullOrEmpty(requestApprovalId, nameof(requestApprovalId));

            using var message = CreateWithdrawPlanRequest(privateStoreId, requestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateFetchAllSubscriptionsInTenantRequest(string privateStoreId, string nextPageToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/fetchAllSubscriptionsInTenant", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (nextPageToken != null)
            {
                request.Headers.Add("next-page-token", nextPageToken);
            }
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Fetch all subscriptions in tenant, only for marketplace admin. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="nextPageToken"> The skip token to get the next page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SubscriptionsResponse>> FetchAllSubscriptionsInTenantAsync(string privateStoreId, string nextPageToken = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateFetchAllSubscriptionsInTenantRequest(privateStoreId, nextPageToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Fetch all subscriptions in tenant, only for marketplace admin. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="nextPageToken"> The skip token to get the next page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SubscriptionsResponse> FetchAllSubscriptionsInTenant(string privateStoreId, string nextPageToken = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateFetchAllSubscriptionsInTenantRequest(privateStoreId, nextPageToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionsResponse.DeserializeSubscriptionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNewPlansNotificationsRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/listNewPlansNotifications", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List new plans notifications. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<NewPlansNotificationsList>> ListNewPlansNotificationsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListNewPlansNotificationsRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NewPlansNotificationsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NewPlansNotificationsList.DeserializeNewPlansNotificationsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List new plans notifications. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<NewPlansNotificationsList> ListNewPlansNotifications(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListNewPlansNotificationsRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NewPlansNotificationsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NewPlansNotificationsList.DeserializeNewPlansNotificationsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListStopSellOffersPlansNotificationsRequest(string privateStoreId, StopSellSubscriptions stopSellSubscriptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/listStopSellOffersPlansNotifications", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (stopSellSubscriptions != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(stopSellSubscriptions);
                request.Content = content;
            }
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List stop sell notifications for both stop sell offers and stop sell plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="stopSellSubscriptions"> The StopSellSubscriptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<StopSellOffersPlansNotificationsList>> ListStopSellOffersPlansNotificationsAsync(string privateStoreId, StopSellSubscriptions stopSellSubscriptions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListStopSellOffersPlansNotificationsRequest(privateStoreId, stopSellSubscriptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StopSellOffersPlansNotificationsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StopSellOffersPlansNotificationsList.DeserializeStopSellOffersPlansNotificationsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List stop sell notifications for both stop sell offers and stop sell plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="stopSellSubscriptions"> The StopSellSubscriptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<StopSellOffersPlansNotificationsList> ListStopSellOffersPlansNotifications(string privateStoreId, StopSellSubscriptions stopSellSubscriptions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListStopSellOffersPlansNotificationsRequest(privateStoreId, stopSellSubscriptions);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StopSellOffersPlansNotificationsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StopSellOffersPlansNotificationsList.DeserializeStopSellOffersPlansNotificationsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSubscriptionsContextRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/listSubscriptionsContext", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List all the subscriptions in the private store context. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<SubscriptionsContextList>> ListSubscriptionsContextAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListSubscriptionsContextRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsContextList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionsContextList.DeserializeSubscriptionsContextList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all the subscriptions in the private store context. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateStoreId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<SubscriptionsContextList> ListSubscriptionsContext(string privateStoreId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(privateStoreId, nameof(privateStoreId));

            using var message = CreateListSubscriptionsContextRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsContextList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionsContextList.DeserializeSubscriptionsContextList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string useCache)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PrivateStoreList>> ListNextPageAsync(string nextLink, string useCache = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var message = CreateListNextPageRequest(nextLink, useCache);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PrivateStoreList> ListNextPage(string nextLink, string useCache = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));

            using var message = CreateListNextPageRequest(nextLink, useCache);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
