// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A class representing the PrivateStore data model. </summary>
    public partial class PrivateStoreData : ResourceData
    {
        /// <summary> Initializes a new instance of PrivateStoreData. </summary>
        public PrivateStoreData()
        {
            CollectionIds = new ChangeTrackingList<string>();
            Branding = new ChangeTrackingDictionary<string, string>();
            Recipients = new ChangeTrackingList<Recipient>();
        }

        /// <summary> Initializes a new instance of PrivateStoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="availability">
        /// Indicates private store availability
        /// Serialized Name: PrivateStore.properties.availability
        /// </param>
        /// <param name="privateStoreId">
        /// Private Store id
        /// Serialized Name: PrivateStore.properties.privateStoreId
        /// </param>
        /// <param name="eTag">
        /// Identifier for purposes of race condition
        /// Serialized Name: PrivateStore.properties.eTag
        /// </param>
        /// <param name="privateStoreName">
        /// Private Store Name
        /// Serialized Name: PrivateStore.properties.privateStoreName
        /// </param>
        /// <param name="tenantId">
        /// Tenant id
        /// Serialized Name: PrivateStore.properties.tenantId
        /// </param>
        /// <param name="isGov">
        /// Is government
        /// Serialized Name: PrivateStore.properties.isGov
        /// </param>
        /// <param name="collectionIds">
        /// Gets list of associated collection ids
        /// Serialized Name: PrivateStore.properties.collectionIds
        /// </param>
        /// <param name="branding">
        /// Gets or sets list of branding characteristics
        /// Serialized Name: PrivateStore.properties.branding
        /// </param>
        /// <param name="recipients">
        /// Gets or sets list of notified recipients for new requests
        /// Serialized Name: PrivateStore.properties.notificationsSettings.recipients
        /// </param>
        /// <param name="sendToAllMarketplaceAdmins">
        /// Gets or sets whether to send email to all marketplace admins for new requests
        /// Serialized Name: PrivateStore.properties.notificationsSettings.sendToAllMarketplaceAdmins
        /// </param>
        internal PrivateStoreData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, Availability? availability, string privateStoreId, ETag? eTag, string privateStoreName, Guid? tenantId, bool? isGov, IReadOnlyList<string> collectionIds, IDictionary<string, string> branding, IList<Recipient> recipients, bool? sendToAllMarketplaceAdmins) : base(id, name, resourceType, systemData)
        {
            Availability = availability;
            PrivateStoreId = privateStoreId;
            ETag = eTag;
            PrivateStoreName = privateStoreName;
            TenantId = tenantId;
            IsGov = isGov;
            CollectionIds = collectionIds;
            Branding = branding;
            Recipients = recipients;
            SendToAllMarketplaceAdmins = sendToAllMarketplaceAdmins;
        }

        /// <summary>
        /// Indicates private store availability
        /// Serialized Name: PrivateStore.properties.availability
        /// </summary>
        public Availability? Availability { get; set; }
        /// <summary>
        /// Private Store id
        /// Serialized Name: PrivateStore.properties.privateStoreId
        /// </summary>
        public string PrivateStoreId { get; }
        /// <summary>
        /// Identifier for purposes of race condition
        /// Serialized Name: PrivateStore.properties.eTag
        /// </summary>
        public ETag? ETag { get; set; }
        /// <summary>
        /// Private Store Name
        /// Serialized Name: PrivateStore.properties.privateStoreName
        /// </summary>
        public string PrivateStoreName { get; set; }
        /// <summary>
        /// Tenant id
        /// Serialized Name: PrivateStore.properties.tenantId
        /// </summary>
        public Guid? TenantId { get; set; }
        /// <summary>
        /// Is government
        /// Serialized Name: PrivateStore.properties.isGov
        /// </summary>
        public bool? IsGov { get; set; }
        /// <summary>
        /// Gets list of associated collection ids
        /// Serialized Name: PrivateStore.properties.collectionIds
        /// </summary>
        public IReadOnlyList<string> CollectionIds { get; }
        /// <summary>
        /// Gets or sets list of branding characteristics
        /// Serialized Name: PrivateStore.properties.branding
        /// </summary>
        public IDictionary<string, string> Branding { get; }
        /// <summary>
        /// Gets or sets list of notified recipients for new requests
        /// Serialized Name: PrivateStore.properties.notificationsSettings.recipients
        /// </summary>
        public IList<Recipient> Recipients { get; }
        /// <summary>
        /// Gets or sets whether to send email to all marketplace admins for new requests
        /// Serialized Name: PrivateStore.properties.notificationsSettings.sendToAllMarketplaceAdmins
        /// </summary>
        public bool? SendToAllMarketplaceAdmins { get; set; }
    }
}
