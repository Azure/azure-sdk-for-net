// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Marketplace.Models
{
    public partial class PrivateStoreNotificationsState
    {
        internal static PrivateStoreNotificationsState DeserializePrivateStoreNotificationsState(JsonElement element)
        {
            Optional<IReadOnlyList<StopSellNotifications>> stopSellNotifications = default;
            Optional<IReadOnlyList<NewNotifications>> newNotifications = default;
            Optional<IReadOnlyList<RequestApprovalsDetails>> approvalRequests = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("stopSellNotifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<StopSellNotifications> array = new List<StopSellNotifications>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.StopSellNotifications.DeserializeStopSellNotifications(item));
                    }
                    stopSellNotifications = array;
                    continue;
                }
                if (property.NameEquals("newNotifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<NewNotifications> array = new List<NewNotifications>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.NewNotifications.DeserializeNewNotifications(item));
                    }
                    newNotifications = array;
                    continue;
                }
                if (property.NameEquals("approvalRequests"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RequestApprovalsDetails> array = new List<RequestApprovalsDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RequestApprovalsDetails.DeserializeRequestApprovalsDetails(item));
                    }
                    approvalRequests = array;
                    continue;
                }
            }
            return new PrivateStoreNotificationsState(Optional.ToList(stopSellNotifications), Optional.ToList(newNotifications), Optional.ToList(approvalRequests));
        }
    }
}
