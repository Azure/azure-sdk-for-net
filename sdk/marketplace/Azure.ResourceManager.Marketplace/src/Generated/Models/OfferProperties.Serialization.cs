// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.ResourceManager.Marketplace.Models
{
    public partial class OfferProperties
    {
        internal static OfferProperties DeserializeOfferProperties(JsonElement element)
        {
            Optional<string> uniqueOfferId = default;
            Optional<string> offerDisplayName = default;
            Optional<string> publisherDisplayName = default;
            Optional<ETag> eTag = default;
            Optional<string> privateStoreId = default;
            Optional<string> createdAt = default;
            Optional<string> modifiedAt = default;
            Optional<IReadOnlyList<string>> specificPlanIdsLimitation = default;
            Optional<bool> updateSuppressedDueIdempotence = default;
            Optional<IReadOnlyDictionary<string, string>> iconFileUris = default;
            Optional<IReadOnlyList<MarketplacePlan>> plans = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("uniqueOfferId"))
                {
                    uniqueOfferId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("offerDisplayName"))
                {
                    offerDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publisherDisplayName"))
                {
                    publisherDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eTag"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    eTag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateStoreId"))
                {
                    privateStoreId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdAt"))
                {
                    createdAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modifiedAt"))
                {
                    modifiedAt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specificPlanIdsLimitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    specificPlanIdsLimitation = array;
                    continue;
                }
                if (property.NameEquals("updateSuppressedDueIdempotence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updateSuppressedDueIdempotence = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("iconFileUris"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    iconFileUris = dictionary;
                    continue;
                }
                if (property.NameEquals("plans"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MarketplacePlan> array = new List<MarketplacePlan>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MarketplacePlan.DeserializeMarketplacePlan(item));
                    }
                    plans = array;
                    continue;
                }
            }
            return new OfferProperties(uniqueOfferId.Value, offerDisplayName.Value, publisherDisplayName.Value, Optional.ToNullable(eTag), privateStoreId.Value, createdAt.Value, modifiedAt.Value, Optional.ToList(specificPlanIdsLimitation), Optional.ToNullable(updateSuppressedDueIdempotence), Optional.ToDictionary(iconFileUris), Optional.ToList(plans));
        }
    }
}
