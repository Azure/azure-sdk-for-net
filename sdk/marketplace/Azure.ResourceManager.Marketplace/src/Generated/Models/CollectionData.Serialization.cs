// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Marketplace
{
    public partial class CollectionData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(CollectionName))
            {
                writer.WritePropertyName("collectionName");
                writer.WriteStringValue(CollectionName);
            }
            if (Optional.IsDefined(Claim))
            {
                writer.WritePropertyName("claim");
                writer.WriteStringValue(Claim);
            }
            if (Optional.IsDefined(AllSubscriptions))
            {
                writer.WritePropertyName("allSubscriptions");
                writer.WriteBooleanValue(AllSubscriptions.Value);
            }
            if (Optional.IsCollectionDefined(SubscriptionsList))
            {
                writer.WritePropertyName("subscriptionsList");
                writer.WriteStartArray();
                foreach (var item in SubscriptionsList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static CollectionData DeserializeCollectionData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> collectionId = default;
            Optional<string> collectionName = default;
            Optional<string> claim = default;
            Optional<bool> allSubscriptions = default;
            Optional<bool> approveAllItems = default;
            Optional<DateTimeOffset> approveAllItemsModifiedAt = default;
            Optional<IList<string>> subscriptionsList = default;
            Optional<bool> enabled = default;
            Optional<long> numberOfOffers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("collectionId"))
                        {
                            collectionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("collectionName"))
                        {
                            collectionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("claim"))
                        {
                            claim = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("allSubscriptions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            allSubscriptions = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("approveAllItems"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            approveAllItems = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("approveAllItemsModifiedAt"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            approveAllItemsModifiedAt = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("subscriptionsList"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            subscriptionsList = array;
                            continue;
                        }
                        if (property0.NameEquals("enabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("numberOfOffers"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            numberOfOffers = property0.Value.GetInt64();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CollectionData(id, name, type, systemData.Value, collectionId.Value, collectionName.Value, claim.Value, Optional.ToNullable(allSubscriptions), Optional.ToNullable(approveAllItems), Optional.ToNullable(approveAllItemsModifiedAt), Optional.ToList(subscriptionsList), Optional.ToNullable(enabled), Optional.ToNullable(numberOfOffers));
        }
    }
}
