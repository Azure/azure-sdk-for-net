// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary>
    /// A Class representing a PrivateStore along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="PrivateStoreResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetPrivateStoreResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetPrivateStore method.
    /// </summary>
    public partial class PrivateStoreResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="PrivateStoreResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string privateStoreId)
        {
            var resourceId = $"/providers/Microsoft.Marketplace/privateStores/{privateStoreId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _privateStoreClientDiagnostics;
        private readonly PrivateStoreRestOperations _privateStoreRestClient;
        private readonly PrivateStoreData _data;

        /// <summary> Initializes a new instance of the <see cref="PrivateStoreResource"/> class for mocking. </summary>
        protected PrivateStoreResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "PrivateStoreResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal PrivateStoreResource(ArmClient client, PrivateStoreData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateStoreResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateStoreResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _privateStoreClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Marketplace", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string privateStoreApiVersion);
            _privateStoreRestClient = new PrivateStoreRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, privateStoreApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Marketplace/privateStores";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual PrivateStoreData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of RequestApprovalResources in the PrivateStore. </summary>
        /// <returns> An object representing collection of RequestApprovalResources and their operations over a RequestApprovalResource. </returns>
        public virtual RequestApprovalResourceCollection GetRequestApprovalResources()
        {
            return GetCachedClient(Client => new RequestApprovalResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get open request approval details
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_GetRequestApproval
        /// </summary>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestApprovalId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<RequestApprovalResource>> GetRequestApprovalResourceAsync(string requestApprovalId, CancellationToken cancellationToken = default)
        {
            return await GetRequestApprovalResources().GetAsync(requestApprovalId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get open request approval details
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/requestApprovals/{requestApprovalId}
        /// Operation Id: PrivateStore_GetRequestApproval
        /// </summary>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="requestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="requestApprovalId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<RequestApprovalResource> GetRequestApprovalResource(string requestApprovalId, CancellationToken cancellationToken = default)
        {
            return GetRequestApprovalResources().Get(requestApprovalId, cancellationToken);
        }

        /// <summary> Gets a collection of AdminRequestApprovalsResources in the PrivateStore. </summary>
        /// <returns> An object representing collection of AdminRequestApprovalsResources and their operations over a AdminRequestApprovalsResource. </returns>
        public virtual AdminRequestApprovalsResourceCollection GetAdminRequestApprovalsResources()
        {
            return GetCachedClient(Client => new AdminRequestApprovalsResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get open approval requests
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AdminRequestApprovalsResource>> GetAdminRequestApprovalsResourceAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            return await GetAdminRequestApprovalsResources().GetAsync(adminRequestApprovalId, publisherId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get open approval requests
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AdminRequestApprovalsResource> GetAdminRequestApprovalsResource(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            return GetAdminRequestApprovalsResources().Get(adminRequestApprovalId, publisherId, cancellationToken);
        }

        /// <summary> Gets a collection of CollectionResources in the PrivateStore. </summary>
        /// <returns> An object representing collection of CollectionResources and their operations over a CollectionResource. </returns>
        public virtual CollectionCollection GetCollections()
        {
            return GetCachedClient(Client => new CollectionCollection(Client, Id));
        }

        /// <summary>
        /// Gets private store collection
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collections/{collectionId}
        /// Operation Id: PrivateStoreCollection_Get
        /// </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CollectionResource>> GetCollectionAsync(string collectionId, CancellationToken cancellationToken = default)
        {
            return await GetCollections().GetAsync(collectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets private store collection
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collections/{collectionId}
        /// Operation Id: PrivateStoreCollection_Get
        /// </summary>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="collectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="collectionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CollectionResource> GetCollection(string collectionId, CancellationToken cancellationToken = default)
        {
            return GetCollections().Get(collectionId, cancellationToken);
        }

        /// <summary>
        /// Get information about the private store
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PrivateStoreResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Get");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateStoreResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about the private store
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStoreResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Get");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateStoreResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the private store. All that is not saved will be lost.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Delete");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.DeleteAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new MarketplaceArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the private store. All that is not saved will be lost.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Delete");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.Delete(Id.Name, cancellationToken);
                var operation = new MarketplaceArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Changes private store properties
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation> UpdateAsync(WaitUntil waitUntil, PrivateStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Update");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.CreateOrUpdateAsync(Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new MarketplaceArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Changes private store properties
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}
        /// Operation Id: PrivateStore_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation Update(WaitUntil waitUntil, PrivateStoreData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.Update");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.CreateOrUpdate(Id.Name, data, cancellationToken);
                var operation = new MarketplaceArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Query whether exists any offer in the collections.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/anyExistingOffersInTheCollections
        /// Operation Id: PrivateStore_AnyExistingOffersInTheCollections
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnyExistingOffersInTheCollectionsResponse>> AnyExistingOffersInTheCollectionsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.AnyExistingOffersInTheCollections");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.AnyExistingOffersInTheCollectionsAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Query whether exists any offer in the collections.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/anyExistingOffersInTheCollections
        /// Operation Id: PrivateStore_AnyExistingOffersInTheCollections
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnyExistingOffersInTheCollectionsResponse> AnyExistingOffersInTheCollections(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.AnyExistingOffersInTheCollections");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.AnyExistingOffersInTheCollections(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List of offers, regardless the collections
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryOffers
        /// Operation Id: PrivateStore_QueryOffers
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OfferProperties> QueryOffersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OfferProperties>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryOffers");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.QueryOffersAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List of offers, regardless the collections
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryOffers
        /// Operation Id: PrivateStore_QueryOffers
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OfferProperties> QueryOffers(CancellationToken cancellationToken = default)
        {
            Page<OfferProperties> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryOffers");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.QueryOffers(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List of user&apos;s approved offers for the provided offers and subscriptions
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryUserOffers
        /// Operation Id: PrivateStore_QueryUserOffers
        /// </summary>
        /// <param name="payload"> The QueryUserOffersProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OfferProperties> QueryUserOffersAsync(QueryUserOffersProperties payload = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OfferProperties>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryUserOffers");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.QueryUserOffersAsync(Id.Name, payload, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List of user&apos;s approved offers for the provided offers and subscriptions
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryUserOffers
        /// Operation Id: PrivateStore_QueryUserOffers
        /// </summary>
        /// <param name="payload"> The QueryUserOffersProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OfferProperties" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OfferProperties> QueryUserOffers(QueryUserOffersProperties payload = null, CancellationToken cancellationToken = default)
        {
            Page<OfferProperties> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryUserOffers");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.QueryUserOffers(Id.Name, payload, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Tenant billing accounts names
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/billingAccounts
        /// Operation Id: PrivateStore_BillingAccounts
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BillingAccountsResponse>> BillingAccountsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.BillingAccounts");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.BillingAccountsAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tenant billing accounts names
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/billingAccounts
        /// Operation Id: PrivateStore_BillingAccounts
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BillingAccountsResponse> BillingAccounts(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.BillingAccounts");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.BillingAccounts(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collectionsToSubscriptionsMapping
        /// Operation Id: PrivateStore_CollectionsToSubscriptionsMapping
        /// </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CollectionsToSubscriptionsMappingResponse>> CollectionsToSubscriptionsMappingAsync(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.CollectionsToSubscriptionsMappingAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collectionsToSubscriptionsMapping
        /// Operation Id: PrivateStore_CollectionsToSubscriptionsMapping
        /// </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionsToSubscriptionsMappingResponse> CollectionsToSubscriptionsMapping(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.CollectionsToSubscriptionsMapping(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get map of plans and related approved subscriptions.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryApprovedPlans
        /// Operation Id: PrivateStore_QueryApprovedPlans
        /// </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<QueryApprovedPlansResponse>> QueryApprovedPlansAsync(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.QueryApprovedPlansAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get map of plans and related approved subscriptions.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryApprovedPlans
        /// Operation Id: PrivateStore_QueryApprovedPlans
        /// </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<QueryApprovedPlansResponse> QueryApprovedPlans(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.QueryApprovedPlans(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Perform an action on bulk collections
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/bulkCollectionsAction
        /// Operation Id: PrivateStore_BulkCollectionsAction
        /// </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BulkCollectionsResponse>> BulkCollectionsActionAsync(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.BulkCollectionsActionAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Perform an action on bulk collections
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/bulkCollectionsAction
        /// Operation Id: PrivateStore_BulkCollectionsAction
        /// </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BulkCollectionsResponse> BulkCollectionsAction(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.BulkCollectionsAction(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get private store notifications state
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryNotificationsState
        /// Operation Id: PrivateStore_QueryNotificationsState
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PrivateStoreNotificationsState>> QueryNotificationsStateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.QueryNotificationsStateAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get private store notifications state
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryNotificationsState
        /// Operation Id: PrivateStore_QueryNotificationsState
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStoreNotificationsState> QueryNotificationsState(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.QueryNotificationsState(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Acknowledge notification for offer
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/offers/{offerId}/acknowledgeNotification
        /// Operation Id: PrivateStore_AcknowledgeOfferNotification
        /// </summary>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual async Task<Response> AcknowledgeOfferNotificationAsync(string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.AcknowledgeOfferNotificationAsync(Id.Name, offerId, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Acknowledge notification for offer
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/offers/{offerId}/acknowledgeNotification
        /// Operation Id: PrivateStore_AcknowledgeOfferNotification
        /// </summary>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="offerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="offerId"/> is null. </exception>
        public virtual Response AcknowledgeOfferNotification(string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(offerId, nameof(offerId));

            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.AcknowledgeOfferNotification(Id.Name, offerId, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Fetch all subscriptions in tenant, only for marketplace admin
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/fetchAllSubscriptionsInTenant
        /// Operation Id: PrivateStore_FetchAllSubscriptionsInTenant
        /// </summary>
        /// <param name="nextPageToken"> The skip token to get the next page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Subscription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Subscription> FetchAllSubscriptionsInTenantAsync(string nextPageToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Subscription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.FetchAllSubscriptionsInTenant");
                scope.Start();
                try
                {
                    var response = await _privateStoreRestClient.FetchAllSubscriptionsInTenantAsync(Id.Name, nextPageToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Fetch all subscriptions in tenant, only for marketplace admin
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/fetchAllSubscriptionsInTenant
        /// Operation Id: PrivateStore_FetchAllSubscriptionsInTenant
        /// </summary>
        /// <param name="nextPageToken"> The skip token to get the next page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Subscription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Subscription> FetchAllSubscriptionsInTenant(string nextPageToken = null, CancellationToken cancellationToken = default)
        {
            Page<Subscription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.FetchAllSubscriptionsInTenant");
                scope.Start();
                try
                {
                    var response = _privateStoreRestClient.FetchAllSubscriptionsInTenant(Id.Name, nextPageToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List new plans notifications
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listNewPlansNotifications
        /// Operation Id: PrivateStore_ListNewPlansNotifications
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NewPlansNotificationsList>> GetNewPlansNotificationsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetNewPlansNotifications");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.ListNewPlansNotificationsAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List new plans notifications
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listNewPlansNotifications
        /// Operation Id: PrivateStore_ListNewPlansNotifications
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NewPlansNotificationsList> GetNewPlansNotifications(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetNewPlansNotifications");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.ListNewPlansNotifications(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List stop sell notifications for both stop sell offers and stop sell plans
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listStopSellOffersPlansNotifications
        /// Operation Id: PrivateStore_ListStopSellOffersPlansNotifications
        /// </summary>
        /// <param name="stopSellSubscriptions"> The StopSellSubscriptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<StopSellOffersPlansNotificationsList>> GetStopSellOffersPlansNotificationsAsync(StopSellSubscriptions stopSellSubscriptions = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetStopSellOffersPlansNotifications");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.ListStopSellOffersPlansNotificationsAsync(Id.Name, stopSellSubscriptions, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List stop sell notifications for both stop sell offers and stop sell plans
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listStopSellOffersPlansNotifications
        /// Operation Id: PrivateStore_ListStopSellOffersPlansNotifications
        /// </summary>
        /// <param name="stopSellSubscriptions"> The StopSellSubscriptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StopSellOffersPlansNotificationsList> GetStopSellOffersPlansNotifications(StopSellSubscriptions stopSellSubscriptions = null, CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetStopSellOffersPlansNotifications");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.ListStopSellOffersPlansNotifications(Id.Name, stopSellSubscriptions, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all the subscriptions in the private store context
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listSubscriptionsContext
        /// Operation Id: PrivateStore_ListSubscriptionsContext
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SubscriptionsContextList>> GetSubscriptionsContextAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetSubscriptionsContext");
            scope.Start();
            try
            {
                var response = await _privateStoreRestClient.ListSubscriptionsContextAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all the subscriptions in the private store context
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/listSubscriptionsContext
        /// Operation Id: PrivateStore_ListSubscriptionsContext
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionsContextList> GetSubscriptionsContext(CancellationToken cancellationToken = default)
        {
            using var scope = _privateStoreClientDiagnostics.CreateScope("PrivateStoreResource.GetSubscriptionsContext");
            scope.Start();
            try
            {
                var response = _privateStoreRestClient.ListSubscriptionsContext(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
