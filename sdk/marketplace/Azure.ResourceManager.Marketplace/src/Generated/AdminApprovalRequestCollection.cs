// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary>
    /// A class representing a collection of <see cref="AdminApprovalRequestResource" /> and their operations.
    /// Each <see cref="AdminApprovalRequestResource" /> in the collection will belong to the same instance of <see cref="PrivateStoreResource" />.
    /// To get an <see cref="AdminApprovalRequestCollection" /> instance call the GetAdminApprovalRequests method from an instance of <see cref="PrivateStoreResource" />.
    /// </summary>
    public partial class AdminApprovalRequestCollection : ArmCollection, IEnumerable<AdminApprovalRequestResource>, IAsyncEnumerable<AdminApprovalRequestResource>
    {
        private readonly ClientDiagnostics _adminApprovalRequestPrivateStoreClientDiagnostics;
        private readonly PrivateStoreRestOperations _adminApprovalRequestPrivateStoreRestClient;

        /// <summary> Initializes a new instance of the <see cref="AdminApprovalRequestCollection"/> class for mocking. </summary>
        protected AdminApprovalRequestCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AdminApprovalRequestCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AdminApprovalRequestCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _adminApprovalRequestPrivateStoreClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Marketplace", AdminApprovalRequestResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AdminApprovalRequestResource.ResourceType, out string adminApprovalRequestPrivateStoreApiVersion);
            _adminApprovalRequestPrivateStoreRestClient = new PrivateStoreRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, adminApprovalRequestPrivateStoreApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PrivateStoreResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PrivateStoreResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Update the admin action, weather the request is approved or rejected and the approved plans
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_UpdateAdminRequestApproval
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="data"> The AdminApprovalRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AdminApprovalRequestResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string adminRequestApprovalId, AdminApprovalRequestData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _adminApprovalRequestPrivateStoreRestClient.UpdateAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, data, cancellationToken).ConfigureAwait(false);
                var operation = new MarketplaceArmOperation<AdminApprovalRequestResource>(Response.FromValue(new AdminApprovalRequestResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the admin action, weather the request is approved or rejected and the approved plans
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_UpdateAdminRequestApproval
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="data"> The AdminApprovalRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AdminApprovalRequestResource> CreateOrUpdate(WaitUntil waitUntil, string adminRequestApprovalId, AdminApprovalRequestData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _adminApprovalRequestPrivateStoreRestClient.UpdateAdminRequestApproval(Id.Name, adminRequestApprovalId, data, cancellationToken);
                var operation = new MarketplaceArmOperation<AdminApprovalRequestResource>(Response.FromValue(new AdminApprovalRequestResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get open approval requests
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual async Task<Response<AdminApprovalRequestResource>> GetAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.Get");
            scope.Start();
            try
            {
                var response = await _adminApprovalRequestPrivateStoreRestClient.GetAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, publisherId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdminApprovalRequestResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get open approval requests
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual Response<AdminApprovalRequestResource> Get(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.Get");
            scope.Start();
            try
            {
                var response = _adminApprovalRequestPrivateStoreRestClient.GetAdminRequestApproval(Id.Name, adminRequestApprovalId, publisherId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AdminApprovalRequestResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of admin request approvals
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals
        /// Operation Id: PrivateStore_AdminRequestApprovalsList
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdminApprovalRequestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdminApprovalRequestResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AdminApprovalRequestResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _adminApprovalRequestPrivateStoreRestClient.AdminRequestApprovalsListAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AdminApprovalRequestResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get list of admin request approvals
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals
        /// Operation Id: PrivateStore_AdminRequestApprovalsList
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdminApprovalRequestResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdminApprovalRequestResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AdminApprovalRequestResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _adminApprovalRequestPrivateStoreRestClient.AdminRequestApprovalsList(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AdminApprovalRequestResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.Exists");
            scope.Start();
            try
            {
                var response = await _adminApprovalRequestPrivateStoreRestClient.GetAdminRequestApprovalAsync(Id.Name, adminRequestApprovalId, publisherId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Marketplace/privateStores/{privateStoreId}/adminRequestApprovals/{adminRequestApprovalId}
        /// Operation Id: PrivateStore_GetAdminRequestApproval
        /// </summary>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="adminRequestApprovalId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="adminRequestApprovalId"/> or <paramref name="publisherId"/> is null. </exception>
        public virtual Response<bool> Exists(string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(adminRequestApprovalId, nameof(adminRequestApprovalId));
            Argument.AssertNotNull(publisherId, nameof(publisherId));

            using var scope = _adminApprovalRequestPrivateStoreClientDiagnostics.CreateScope("AdminApprovalRequestCollection.Exists");
            scope.Start();
            try
            {
                var response = _adminApprovalRequestPrivateStoreRestClient.GetAdminRequestApproval(Id.Name, adminRequestApprovalId, publisherId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AdminApprovalRequestResource> IEnumerable<AdminApprovalRequestResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AdminApprovalRequestResource> IAsyncEnumerable<AdminApprovalRequestResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
