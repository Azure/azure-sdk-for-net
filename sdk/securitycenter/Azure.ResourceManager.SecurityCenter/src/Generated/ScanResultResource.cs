// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A Class representing a ScanResult along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="ScanResultResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetScanResultResource method.
    /// Otherwise you can get one from its parent resource <see cref="ScanResource" /> using the GetScanResult method.
    /// </summary>
    public partial class ScanResultResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ScanResultResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string resourceId, string scanId, string scanResultId)
        {
            var resourceId0 = $"{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults/{scanResultId}";
            return new ResourceIdentifier(resourceId0);
        }

        private readonly ClientDiagnostics _scanResultSqlVulnerabilityAssessmentScanResultsClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentScanResultsRestOperations _scanResultSqlVulnerabilityAssessmentScanResultsRestClient;
        private readonly ScanResultData _data;

        /// <summary> Initializes a new instance of the <see cref="ScanResultResource"/> class for mocking. </summary>
        protected ScanResultResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ScanResultResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ScanResultResource(ArmClient client, ScanResultData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ScanResultResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ScanResultResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _scanResultSqlVulnerabilityAssessmentScanResultsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string scanResultSqlVulnerabilityAssessmentScanResultsApiVersion);
            _scanResultSqlVulnerabilityAssessmentScanResultsRestClient = new SqlVulnerabilityAssessmentScanResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, scanResultSqlVulnerabilityAssessmentScanResultsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ScanResultData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the scan results of a single rule in a scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults/{scanResultId}
        /// Operation Id: SqlVulnerabilityAssessmentScanResults_Get
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        public virtual async Task<Response<ScanResultResource>> GetAsync(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanResultSqlVulnerabilityAssessmentScanResultsClientDiagnostics.CreateScope("ScanResultResource.Get");
            scope.Start();
            try
            {
                var response = await _scanResultSqlVulnerabilityAssessmentScanResultsRestClient.GetAsync(Id.Parent.Parent.Parent, Id.Parent.Name, Id.Name, workspaceId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the scan results of a single rule in a scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults/{scanResultId}
        /// Operation Id: SqlVulnerabilityAssessmentScanResults_Get
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        public virtual Response<ScanResultResource> Get(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanResultSqlVulnerabilityAssessmentScanResultsClientDiagnostics.CreateScope("ScanResultResource.Get");
            scope.Start();
            try
            {
                var response = _scanResultSqlVulnerabilityAssessmentScanResultsRestClient.Get(Id.Parent.Parent.Parent, Id.Parent.Name, Id.Name, workspaceId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
