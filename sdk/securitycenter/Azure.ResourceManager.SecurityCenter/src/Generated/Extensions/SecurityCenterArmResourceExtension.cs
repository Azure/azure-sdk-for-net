// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityCenter;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter.Mock
{
    /// <summary> A class to add extension methods to ArmResource. </summary>
    public partial class SecurityCenterArmResourceExtension : ArmResource
    {
        private ClientDiagnostics _informationProtectionPoliciesClientDiagnostics;
        private InformationProtectionPoliciesRestOperations _informationProtectionPoliciesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SecurityCenterArmResourceExtension"/> class for mocking. </summary>
        protected SecurityCenterArmResourceExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SecurityCenterArmResourceExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SecurityCenterArmResourceExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics InformationProtectionPoliciesClientDiagnostics => _informationProtectionPoliciesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private InformationProtectionPoliciesRestOperations InformationProtectionPoliciesRestClient => _informationProtectionPoliciesRestClient ??= new InformationProtectionPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ComplianceResultResources in the ArmResource. </summary>
        /// <returns> An object representing collection of ComplianceResultResources and their operations over a ComplianceResultResource. </returns>
        public virtual ComplianceResultCollection GetComplianceResults()
        {
            return GetCachedClient(Client => new ComplianceResultCollection(Client, Id));
        }

        /// <summary> Gets an object representing a AdvancedThreatProtectionSettingResource along with the instance operations that can be performed on it in the ArmResource. </summary>
        /// <returns> Returns a <see cref="AdvancedThreatProtectionSettingResource" /> object. </returns>
        public virtual AdvancedThreatProtectionSettingResource GetAdvancedThreatProtectionSetting()
        {
            return new AdvancedThreatProtectionSettingResource(Client, Id.AppendProviderResource("Microsoft.Security", "advancedThreatProtectionSettings", "current"));
        }

        /// <summary> Gets a collection of DeviceSecurityGroupResources in the ArmResource. </summary>
        /// <returns> An object representing collection of DeviceSecurityGroupResources and their operations over a DeviceSecurityGroupResource. </returns>
        public virtual DeviceSecurityGroupCollection GetDeviceSecurityGroups()
        {
            return GetCachedClient(Client => new DeviceSecurityGroupCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityComplianceResources in the ArmResource. </summary>
        /// <returns> An object representing collection of SecurityComplianceResources and their operations over a SecurityComplianceResource. </returns>
        public virtual SecurityComplianceCollection GetSecurityCompliances()
        {
            return GetCachedClient(Client => new SecurityComplianceCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityAssessmentResources in the ArmResource. </summary>
        /// <returns> An object representing collection of SecurityAssessmentResources and their operations over a SecurityAssessmentResource. </returns>
        public virtual SecurityAssessmentCollection GetSecurityAssessments()
        {
            return GetCachedClient(Client => new SecurityAssessmentCollection(Client, Id));
        }

        /// <summary> Gets a collection of SqlVulnerabilityAssessmentScanResources in the ArmResource. </summary>
        /// <returns> An object representing collection of SqlVulnerabilityAssessmentScanResources and their operations over a SqlVulnerabilityAssessmentScanResource. </returns>
        public virtual SqlVulnerabilityAssessmentScanCollection GetSqlVulnerabilityAssessmentScans()
        {
            return GetCachedClient(Client => new SqlVulnerabilityAssessmentScanCollection(Client, Id));
        }

        /// <summary> Gets a collection of SqlVulnerabilityAssessmentBaselineRuleResources in the ArmResource. </summary>
        /// <returns> An object representing collection of SqlVulnerabilityAssessmentBaselineRuleResources and their operations over a SqlVulnerabilityAssessmentBaselineRuleResource. </returns>
        public virtual SqlVulnerabilityAssessmentBaselineRuleCollection GetSqlVulnerabilityAssessmentBaselineRules()
        {
            return GetCachedClient(Client => new SqlVulnerabilityAssessmentBaselineRuleCollection(Client, Id));
        }

        /// <summary>
        /// Details of the information protection policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InformationProtectionPolicies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="informationProtectionPolicyName"> Name of the information protection policy. </param>
        /// <param name="informationProtectionPolicy"> Information protection policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="informationProtectionPolicy"/> is null. </exception>
        public virtual async Task<Response<InformationProtectionPolicy>> CreateOrUpdateInformationProtectionPolicyAsync(InformationProtectionPolicyName informationProtectionPolicyName, InformationProtectionPolicy informationProtectionPolicy, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(informationProtectionPolicy, nameof(informationProtectionPolicy));

            using var scope = InformationProtectionPoliciesClientDiagnostics.CreateScope("SecurityCenterArmResourceExtension.CreateOrUpdateInformationProtectionPolicy");
            scope.Start();
            try
            {
                var response = await InformationProtectionPoliciesRestClient.CreateOrUpdateAsync(Id, informationProtectionPolicyName, informationProtectionPolicy, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Details of the information protection policy.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InformationProtectionPolicies_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="informationProtectionPolicyName"> Name of the information protection policy. </param>
        /// <param name="informationProtectionPolicy"> Information protection policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="informationProtectionPolicy"/> is null. </exception>
        public virtual Response<InformationProtectionPolicy> CreateOrUpdateInformationProtectionPolicy(InformationProtectionPolicyName informationProtectionPolicyName, InformationProtectionPolicy informationProtectionPolicy, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(informationProtectionPolicy, nameof(informationProtectionPolicy));

            using var scope = InformationProtectionPoliciesClientDiagnostics.CreateScope("SecurityCenterArmResourceExtension.CreateOrUpdateInformationProtectionPolicy");
            scope.Start();
            try
            {
                var response = InformationProtectionPoliciesRestClient.CreateOrUpdate(Id, informationProtectionPolicyName, informationProtectionPolicy, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Information protection policies of a specific management group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/informationProtectionPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InformationProtectionPolicies_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InformationProtectionPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InformationProtectionPolicy> GetInformationProtectionPoliciesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InformationProtectionPoliciesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InformationProtectionPoliciesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, InformationProtectionPolicy.DeserializeInformationProtectionPolicy, InformationProtectionPoliciesClientDiagnostics, Pipeline, "SecurityCenterArmResourceExtension.GetInformationProtectionPolicies", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Information protection policies of a specific management group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.Security/informationProtectionPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InformationProtectionPolicies_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InformationProtectionPolicy" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InformationProtectionPolicy> GetInformationProtectionPolicies(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => InformationProtectionPoliciesRestClient.CreateListRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => InformationProtectionPoliciesRestClient.CreateListNextPageRequest(nextLink, Id);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, InformationProtectionPolicy.DeserializeInformationProtectionPolicy, InformationProtectionPoliciesClientDiagnostics, Pipeline, "SecurityCenterArmResourceExtension.GetInformationProtectionPolicies", "value", "nextLink", cancellationToken);
        }
    }
}
