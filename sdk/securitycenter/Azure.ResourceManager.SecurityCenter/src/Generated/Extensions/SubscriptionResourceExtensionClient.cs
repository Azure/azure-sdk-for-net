// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _mdeOnboardingsClientDiagnostics;
        private MdeOnboardingsRestOperations _mdeOnboardingsRestClient;
        private ClientDiagnostics _customAssessmentAutomationClientDiagnostics;
        private CustomAssessmentAutomationsRestOperations _customAssessmentAutomationRestClient;
        private ClientDiagnostics _customEntityStoreAssignmentClientDiagnostics;
        private CustomEntityStoreAssignmentsRestOperations _customEntityStoreAssignmentRestClient;
        private ClientDiagnostics _iotSecuritySolutionClientDiagnostics;
        private IotSecuritySolutionRestOperations _iotSecuritySolutionRestClient;
        private ClientDiagnostics _tasksClientDiagnostics;
        private TasksRestOperations _tasksRestClient;
        private ClientDiagnostics _securityAutomationAutomationsClientDiagnostics;
        private AutomationsRestOperations _securityAutomationAutomationsRestClient;
        private ClientDiagnostics _adaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics;
        private AdaptiveApplicationControlsRestOperations _adaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient;
        private ClientDiagnostics _allowedConnectionsClientDiagnostics;
        private AllowedConnectionsRestOperations _allowedConnectionsRestClient;
        private ClientDiagnostics _topologyClientDiagnostics;
        private TopologyRestOperations _topologyRestClient;
        private ClientDiagnostics _jitNetworkAccessPolicyClientDiagnostics;
        private JitNetworkAccessPoliciesRestOperations _jitNetworkAccessPolicyRestClient;
        private ClientDiagnostics _discoveredSecuritySolutionsClientDiagnostics;
        private DiscoveredSecuritySolutionsRestOperations _discoveredSecuritySolutionsRestClient;
        private ClientDiagnostics _securitySolutionsReferenceDataClientDiagnostics;
        private SecuritySolutionsReferenceDataRestOperations _securitySolutionsReferenceDataRestClient;
        private ClientDiagnostics _externalSecuritySolutionsClientDiagnostics;
        private ExternalSecuritySolutionsRestOperations _externalSecuritySolutionsRestClient;
        private ClientDiagnostics _secureScoreControlsClientDiagnostics;
        private SecureScoreControlsRestOperations _secureScoreControlsRestClient;
        private ClientDiagnostics _secureScoreControlDefinitionsClientDiagnostics;
        private SecureScoreControlDefinitionsRestOperations _secureScoreControlDefinitionsRestClient;
        private ClientDiagnostics _securitySolutionsClientDiagnostics;
        private SecuritySolutionsRestOperations _securitySolutionsRestClient;
        private ClientDiagnostics _alertsClientDiagnostics;
        private AlertsRestOperations _alertsRestClient;
        private ClientDiagnostics _softwareInventoryClientDiagnostics;
        private SoftwareInventoriesRestOperations _softwareInventoryRestClient;
        private ClientDiagnostics _securityConnectorClientDiagnostics;
        private SecurityConnectorsRestOperations _securityConnectorRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics MdeOnboardingsClientDiagnostics => _mdeOnboardingsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private MdeOnboardingsRestOperations MdeOnboardingsRestClient => _mdeOnboardingsRestClient ??= new MdeOnboardingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics CustomAssessmentAutomationClientDiagnostics => _customAssessmentAutomationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", CustomAssessmentAutomationResource.ResourceType.Namespace, Diagnostics);
        private CustomAssessmentAutomationsRestOperations CustomAssessmentAutomationRestClient => _customAssessmentAutomationRestClient ??= new CustomAssessmentAutomationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CustomAssessmentAutomationResource.ResourceType));
        private ClientDiagnostics CustomEntityStoreAssignmentClientDiagnostics => _customEntityStoreAssignmentClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", CustomEntityStoreAssignmentResource.ResourceType.Namespace, Diagnostics);
        private CustomEntityStoreAssignmentsRestOperations CustomEntityStoreAssignmentRestClient => _customEntityStoreAssignmentRestClient ??= new CustomEntityStoreAssignmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CustomEntityStoreAssignmentResource.ResourceType));
        private ClientDiagnostics IotSecuritySolutionClientDiagnostics => _iotSecuritySolutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", IotSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
        private IotSecuritySolutionRestOperations IotSecuritySolutionRestClient => _iotSecuritySolutionRestClient ??= new IotSecuritySolutionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(IotSecuritySolutionResource.ResourceType));
        private ClientDiagnostics TasksClientDiagnostics => _tasksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private TasksRestOperations TasksRestClient => _tasksRestClient ??= new TasksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecurityAutomationAutomationsClientDiagnostics => _securityAutomationAutomationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SecurityAutomationResource.ResourceType.Namespace, Diagnostics);
        private AutomationsRestOperations SecurityAutomationAutomationsRestClient => _securityAutomationAutomationsRestClient ??= new AutomationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SecurityAutomationResource.ResourceType));
        private ClientDiagnostics AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics => _adaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AdaptiveApplicationControlGroupResource.ResourceType.Namespace, Diagnostics);
        private AdaptiveApplicationControlsRestOperations AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient => _adaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient ??= new AdaptiveApplicationControlsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(AdaptiveApplicationControlGroupResource.ResourceType));
        private ClientDiagnostics AllowedConnectionsClientDiagnostics => _allowedConnectionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AllowedConnectionsRestOperations AllowedConnectionsRestClient => _allowedConnectionsRestClient ??= new AllowedConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics TopologyClientDiagnostics => _topologyClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private TopologyRestOperations TopologyRestClient => _topologyRestClient ??= new TopologyRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics JitNetworkAccessPolicyClientDiagnostics => _jitNetworkAccessPolicyClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", JitNetworkAccessPolicyResource.ResourceType.Namespace, Diagnostics);
        private JitNetworkAccessPoliciesRestOperations JitNetworkAccessPolicyRestClient => _jitNetworkAccessPolicyRestClient ??= new JitNetworkAccessPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(JitNetworkAccessPolicyResource.ResourceType));
        private ClientDiagnostics DiscoveredSecuritySolutionsClientDiagnostics => _discoveredSecuritySolutionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DiscoveredSecuritySolutionsRestOperations DiscoveredSecuritySolutionsRestClient => _discoveredSecuritySolutionsRestClient ??= new DiscoveredSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics securitySolutionsReferenceDataClientDiagnostics => _securitySolutionsReferenceDataClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecuritySolutionsReferenceDataRestOperations securitySolutionsReferenceDataRestClient => _securitySolutionsReferenceDataRestClient ??= new SecuritySolutionsReferenceDataRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ExternalSecuritySolutionsClientDiagnostics => _externalSecuritySolutionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ExternalSecuritySolutionsRestOperations ExternalSecuritySolutionsRestClient => _externalSecuritySolutionsRestClient ??= new ExternalSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecureScoreControlsClientDiagnostics => _secureScoreControlsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecureScoreControlsRestOperations SecureScoreControlsRestClient => _secureScoreControlsRestClient ??= new SecureScoreControlsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecureScoreControlDefinitionsClientDiagnostics => _secureScoreControlDefinitionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecureScoreControlDefinitionsRestOperations SecureScoreControlDefinitionsRestClient => _secureScoreControlDefinitionsRestClient ??= new SecureScoreControlDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecuritySolutionsClientDiagnostics => _securitySolutionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecuritySolutionsRestOperations SecuritySolutionsRestClient => _securitySolutionsRestClient ??= new SecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AlertsClientDiagnostics => _alertsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AlertsRestOperations AlertsRestClient => _alertsRestClient ??= new AlertsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SoftwareInventoryClientDiagnostics => _softwareInventoryClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SoftwareInventoryResource.ResourceType.Namespace, Diagnostics);
        private SoftwareInventoriesRestOperations SoftwareInventoryRestClient => _softwareInventoryRestClient ??= new SoftwareInventoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SoftwareInventoryResource.ResourceType));
        private ClientDiagnostics SecurityConnectorClientDiagnostics => _securityConnectorClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SecurityConnectorResource.ResourceType.Namespace, Diagnostics);
        private SecurityConnectorsRestOperations SecurityConnectorRestClient => _securityConnectorRestClient ??= new SecurityConnectorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SecurityConnectorResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SecurityCenterPricingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityCenterPricingResources and their operations over a SecurityCenterPricingResource. </returns>
        public virtual SecurityCenterPricingCollection GetSecurityCenterPricings()
        {
            return GetCachedClient(Client => new SecurityCenterPricingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityCenterLocationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityCenterLocationResources and their operations over a SecurityCenterLocationResource. </returns>
        public virtual SecurityCenterLocationCollection GetSecurityCenterLocations()
        {
            return GetCachedClient(Client => new SecurityCenterLocationCollection(Client, Id));
        }

        /// <summary> Gets a collection of AutoProvisioningSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AutoProvisioningSettingResources and their operations over a AutoProvisioningSettingResource. </returns>
        public virtual AutoProvisioningSettingCollection GetAutoProvisioningSettings()
        {
            return GetCachedClient(Client => new AutoProvisioningSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityContactResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityContactResources and their operations over a SecurityContactResource. </returns>
        public virtual SecurityContactCollection GetSecurityContacts()
        {
            return GetCachedClient(Client => new SecurityContactCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityWorkspaceSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityWorkspaceSettingResources and their operations over a SecurityWorkspaceSettingResource. </returns>
        public virtual SecurityWorkspaceSettingCollection GetSecurityWorkspaceSettings()
        {
            return GetCachedClient(Client => new SecurityWorkspaceSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of RegulatoryComplianceStandardResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of RegulatoryComplianceStandardResources and their operations over a RegulatoryComplianceStandardResource. </returns>
        public virtual RegulatoryComplianceStandardCollection GetRegulatoryComplianceStandards()
        {
            return GetCachedClient(Client => new RegulatoryComplianceStandardCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityAlertsSuppressionRuleResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityAlertsSuppressionRuleResources and their operations over a SecurityAlertsSuppressionRuleResource. </returns>
        public virtual SecurityAlertsSuppressionRuleCollection GetSecurityAlertsSuppressionRules()
        {
            return GetCachedClient(Client => new SecurityAlertsSuppressionRuleCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionAssessmentMetadataResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionAssessmentMetadataResources and their operations over a SubscriptionAssessmentMetadataResource. </returns>
        public virtual SubscriptionAssessmentMetadataCollection GetAllSubscriptionAssessmentMetadata()
        {
            return GetCachedClient(Client => new SubscriptionAssessmentMetadataCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecureScoreResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecureScoreResources and their operations over a SecureScoreResource. </returns>
        public virtual SecureScoreCollection GetSecureScores()
        {
            return GetCachedClient(Client => new SecureScoreCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityCloudConnectorResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityCloudConnectorResources and their operations over a SecurityCloudConnectorResource. </returns>
        public virtual SecurityCloudConnectorCollection GetSecurityCloudConnectors()
        {
            return GetCachedClient(Client => new SecurityCloudConnectorCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecuritySettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecuritySettingResources and their operations over a SecuritySettingResource. </returns>
        public virtual SecuritySettingCollection GetSecuritySettings()
        {
            return GetCachedClient(Client => new SecuritySettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of IngestionSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of IngestionSettingResources and their operations over a IngestionSettingResource. </returns>
        public virtual IngestionSettingCollection GetIngestionSettings()
        {
            return GetCachedClient(Client => new IngestionSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionGovernanceRuleResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionGovernanceRuleResources and their operations over a SubscriptionGovernanceRuleResource. </returns>
        public virtual SubscriptionGovernanceRuleCollection GetSubscriptionGovernanceRules()
        {
            return GetCachedClient(Client => new SubscriptionGovernanceRuleCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionSecurityApplicationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionSecurityApplicationResources and their operations over a SubscriptionSecurityApplicationResource. </returns>
        public virtual SubscriptionSecurityApplicationCollection GetSubscriptionSecurityApplications()
        {
            return GetCachedClient(Client => new SubscriptionSecurityApplicationCollection(Client, Id));
        }

        /// <summary>
        /// The configuration or data needed to onboard the machine to MDE
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/mdeOnboardings
        /// Operation Id: MdeOnboardings_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MdeOnboarding" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<MdeOnboarding> GetMdeOnboardingsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<MdeOnboarding>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MdeOnboardingsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMdeOnboardings");
                scope.Start();
                try
                {
                    var response = await MdeOnboardingsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// The configuration or data needed to onboard the machine to MDE
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/mdeOnboardings
        /// Operation Id: MdeOnboardings_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MdeOnboarding" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<MdeOnboarding> GetMdeOnboardings(CancellationToken cancellationToken = default)
        {
            Page<MdeOnboarding> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = MdeOnboardingsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMdeOnboardings");
                scope.Start();
                try
                {
                    var response = MdeOnboardingsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// The default configuration or data needed to onboard the machine to MDE
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/mdeOnboardings/default
        /// Operation Id: MdeOnboardings_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MdeOnboarding>> GetMdeOnboardingAsync(CancellationToken cancellationToken = default)
        {
            using var scope = MdeOnboardingsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMdeOnboarding");
            scope.Start();
            try
            {
                var response = await MdeOnboardingsRestClient.GetAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The default configuration or data needed to onboard the machine to MDE
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/mdeOnboardings/default
        /// Operation Id: MdeOnboardings_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MdeOnboarding> GetMdeOnboarding(CancellationToken cancellationToken = default)
        {
            using var scope = MdeOnboardingsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetMdeOnboarding");
            scope.Start();
            try
            {
                var response = MdeOnboardingsRestClient.Get(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomAssessmentAutomationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = await CustomAssessmentAutomationRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomAssessmentAutomationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = await CustomAssessmentAutomationRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomations(CancellationToken cancellationToken = default)
        {
            Page<CustomAssessmentAutomationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = CustomAssessmentAutomationRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomAssessmentAutomationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = CustomAssessmentAutomationRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomEntityStoreAssignmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = await CustomEntityStoreAssignmentRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomEntityStoreAssignmentResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = await CustomEntityStoreAssignmentRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignments(CancellationToken cancellationToken = default)
        {
            Page<CustomEntityStoreAssignmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = CustomEntityStoreAssignmentRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomEntityStoreAssignmentResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = CustomEntityStoreAssignmentRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IotSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IotSecuritySolutionResource> GetIotSecuritySolutionsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<IotSecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await IotSecuritySolutionRestClient.ListBySubscriptionAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IotSecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await IotSecuritySolutionRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IotSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IotSecuritySolutionResource> GetIotSecuritySolutions(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<IotSecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutions");
                scope.Start();
                try
                {
                    var response = IotSecuritySolutionRestClient.ListBySubscription(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IotSecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutions");
                scope.Start();
                try
                {
                    var response = IotSecuritySolutionRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityTaskData> GetTasksAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityTaskData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = await TasksRestClient.ListAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityTaskData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = await TasksRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityTaskData> GetTasks(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SecurityTaskData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = TasksRestClient.List(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityTaskData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = TasksRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityAutomationResource> GetSecurityAutomationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityAutomationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityAutomationAutomationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityAutomations");
                scope.Start();
                try
                {
                    var response = await SecurityAutomationAutomationsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityAutomationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityAutomationAutomationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityAutomations");
                scope.Start();
                try
                {
                    var response = await SecurityAutomationAutomationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityAutomationResource> GetSecurityAutomations(CancellationToken cancellationToken = default)
        {
            Page<SecurityAutomationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityAutomationAutomationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityAutomations");
                scope.Start();
                try
                {
                    var response = SecurityAutomationAutomationsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityAutomationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityAutomationAutomationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityAutomations");
                scope.Start();
                try
                {
                    var response = SecurityAutomationAutomationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroupsAsync(bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AdaptiveApplicationControlGroupResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAdaptiveApplicationControlGroups");
                scope.Start();
                try
                {
                    var response = await AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient.ListAsync(Id.SubscriptionId, includePathRecommendations, summary, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AdaptiveApplicationControlGroupResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroups(bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            Page<AdaptiveApplicationControlGroupResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAdaptiveApplicationControlGroups");
                scope.Start();
                try
                {
                    var response = AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient.List(Id.SubscriptionId, includePathRecommendations, summary, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AdaptiveApplicationControlGroupResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityCenterAllowedConnection" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityCenterAllowedConnection> GetAllowedConnectionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityCenterAllowedConnection>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnections");
                scope.Start();
                try
                {
                    var response = await AllowedConnectionsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityCenterAllowedConnection>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnections");
                scope.Start();
                try
                {
                    var response = await AllowedConnectionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityCenterAllowedConnection" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityCenterAllowedConnection> GetAllowedConnections(CancellationToken cancellationToken = default)
        {
            Page<SecurityCenterAllowedConnection> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnections");
                scope.Start();
                try
                {
                    var response = AllowedConnectionsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityCenterAllowedConnection> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnections");
                scope.Start();
                try
                {
                    var response = AllowedConnectionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityTopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityTopologyResource> GetTopologiesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityTopologyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologies");
                scope.Start();
                try
                {
                    var response = await TopologyRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityTopologyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologies");
                scope.Start();
                try
                {
                    var response = await TopologyRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityTopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityTopologyResource> GetTopologies(CancellationToken cancellationToken = default)
        {
            Page<SecurityTopologyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologies");
                scope.Start();
                try
                {
                    var response = TopologyRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityTopologyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologies");
                scope.Start();
                try
                {
                    var response = TopologyRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<JitNetworkAccessPolicyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = await JitNetworkAccessPolicyRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JitNetworkAccessPolicyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = await JitNetworkAccessPolicyRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPolicies(CancellationToken cancellationToken = default)
        {
            Page<JitNetworkAccessPolicyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = JitNetworkAccessPolicyRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JitNetworkAccessPolicyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = JitNetworkAccessPolicyRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiscoveredSecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DiscoveredSecuritySolution> GetDiscoveredSecuritySolutionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DiscoveredSecuritySolution>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await DiscoveredSecuritySolutionsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DiscoveredSecuritySolution>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await DiscoveredSecuritySolutionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiscoveredSecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DiscoveredSecuritySolution> GetDiscoveredSecuritySolutions(CancellationToken cancellationToken = default)
        {
            Page<DiscoveredSecuritySolution> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = DiscoveredSecuritySolutionsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DiscoveredSecuritySolution> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = DiscoveredSecuritySolutionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceDataAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecuritySolutionsReferenceData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = securitySolutionsReferenceDataClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllSecuritySolutionsReferenceData");
                scope.Start();
                try
                {
                    var response = await securitySolutionsReferenceDataRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceData(CancellationToken cancellationToken = default)
        {
            Page<SecuritySolutionsReferenceData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = securitySolutionsReferenceDataClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllSecuritySolutionsReferenceData");
                scope.Start();
                try
                {
                    var response = securitySolutionsReferenceDataRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExternalSecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExternalSecuritySolution> GetExternalSecuritySolutionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExternalSecuritySolution>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await ExternalSecuritySolutionsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExternalSecuritySolution>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await ExternalSecuritySolutionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExternalSecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExternalSecuritySolution> GetExternalSecuritySolutions(CancellationToken cancellationToken = default)
        {
            Page<ExternalSecuritySolution> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutions");
                scope.Start();
                try
                {
                    var response = ExternalSecuritySolutionsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExternalSecuritySolution> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutions");
                scope.Start();
                try
                {
                    var response = ExternalSecuritySolutionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecureScoreControlDetails> GetSecureScoreControlsAsync(SecurityScoreODataExpand? expand = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SecureScoreControlDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlsRestClient.ListAsync(Id.SubscriptionId, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecureScoreControlDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecureScoreControlDetails> GetSecureScoreControls(SecurityScoreODataExpand? expand = null, CancellationToken cancellationToken = default)
        {
            Page<SecureScoreControlDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = SecureScoreControlsRestClient.List(Id.SubscriptionId, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecureScoreControlDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = SecureScoreControlsRestClient.ListNextPage(nextLink, Id.SubscriptionId, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecureScoreControlDefinitionItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecureScoreControlDefinitionItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscription(CancellationToken cancellationToken = default)
        {
            Page<SecureScoreControlDefinitionItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecureScoreControlDefinitionItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecuritySolution> GetSecuritySolutionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecuritySolution>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await SecuritySolutionsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecuritySolution>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await SecuritySolutionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolution" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecuritySolution> GetSecuritySolutions(CancellationToken cancellationToken = default)
        {
            Page<SecuritySolution> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = SecuritySolutionsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecuritySolution> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecuritySolutionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = SecuritySolutionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityAlertData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityAlertData> GetAlertsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityAlertData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = await AlertsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityAlertData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = await AlertsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityAlertData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityAlertData> GetAlerts(CancellationToken cancellationToken = default)
        {
            Page<SecurityAlertData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = AlertsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityAlertData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = AlertsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SoftwareInventoryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SoftwareInventoryResource> GetSoftwareInventoriesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SoftwareInventoryResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SoftwareInventoryClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwareInventories");
                scope.Start();
                try
                {
                    var response = await SoftwareInventoryRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareInventoryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SoftwareInventoryResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SoftwareInventoryClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwareInventories");
                scope.Start();
                try
                {
                    var response = await SoftwareInventoryRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareInventoryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SoftwareInventoryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SoftwareInventoryResource> GetSoftwareInventories(CancellationToken cancellationToken = default)
        {
            Page<SoftwareInventoryResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SoftwareInventoryClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwareInventories");
                scope.Start();
                try
                {
                    var response = SoftwareInventoryRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareInventoryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SoftwareInventoryResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SoftwareInventoryClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwareInventories");
                scope.Start();
                try
                {
                    var response = SoftwareInventoryRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareInventoryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityConnectorResource> GetSecurityConnectorsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityConnectorResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = await SecurityConnectorRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityConnectorResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = await SecurityConnectorRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityConnectorResource> GetSecurityConnectors(CancellationToken cancellationToken = default)
        {
            Page<SecurityConnectorResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = SecurityConnectorRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityConnectorResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = SecurityConnectorRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
