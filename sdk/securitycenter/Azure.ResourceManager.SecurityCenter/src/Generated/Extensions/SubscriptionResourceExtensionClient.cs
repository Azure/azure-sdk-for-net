// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _customAssessmentAutomationClientDiagnostics;
        private CustomAssessmentAutomationsRestOperations _customAssessmentAutomationRestClient;
        private ClientDiagnostics _customEntityStoreAssignmentClientDiagnostics;
        private CustomEntityStoreAssignmentsRestOperations _customEntityStoreAssignmentRestClient;
        private ClientDiagnostics _iotSecuritySolutionModelIotSecuritySolutionClientDiagnostics;
        private IotSecuritySolutionRestOperations _iotSecuritySolutionModelIotSecuritySolutionRestClient;
        private ClientDiagnostics _tasksClientDiagnostics;
        private TasksRestOperations _tasksRestClient;
        private ClientDiagnostics _automationClientDiagnostics;
        private AutomationsRestOperations _automationRestClient;
        private ClientDiagnostics _adaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics;
        private AdaptiveApplicationControlsRestOperations _adaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient;
        private ClientDiagnostics _allowedConnectionsResourceAllowedConnectionsClientDiagnostics;
        private AllowedConnectionsRestOperations _allowedConnectionsResourceAllowedConnectionsRestClient;
        private ClientDiagnostics _topologyResourceTopologyClientDiagnostics;
        private TopologyRestOperations _topologyResourceTopologyRestClient;
        private ClientDiagnostics _jitNetworkAccessPolicyClientDiagnostics;
        private JitNetworkAccessPoliciesRestOperations _jitNetworkAccessPolicyRestClient;
        private ClientDiagnostics _discoveredSecuritySolutionClientDiagnostics;
        private DiscoveredSecuritySolutionsRestOperations _discoveredSecuritySolutionRestClient;
        private ClientDiagnostics _securitySolutionsReferenceDataClientDiagnostics;
        private SecuritySolutionsReferenceDataRestOperations _securitySolutionsReferenceDataRestClient;
        private ClientDiagnostics _externalSecuritySolutionClientDiagnostics;
        private ExternalSecuritySolutionsRestOperations _externalSecuritySolutionRestClient;
        private ClientDiagnostics _secureScoreControlsClientDiagnostics;
        private SecureScoreControlsRestOperations _secureScoreControlsRestClient;
        private ClientDiagnostics _secureScoreControlDefinitionsClientDiagnostics;
        private SecureScoreControlDefinitionsRestOperations _secureScoreControlDefinitionsRestClient;
        private ClientDiagnostics _securitySolutionClientDiagnostics;
        private SecuritySolutionsRestOperations _securitySolutionRestClient;
        private ClientDiagnostics _alertsClientDiagnostics;
        private AlertsRestOperations _alertsRestClient;
        private ClientDiagnostics _softwareSoftwareInventoriesClientDiagnostics;
        private SoftwareInventoriesRestOperations _softwareSoftwareInventoriesRestClient;
        private ClientDiagnostics _securityConnectorClientDiagnostics;
        private SecurityConnectorsRestOperations _securityConnectorRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CustomAssessmentAutomationClientDiagnostics => _customAssessmentAutomationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", CustomAssessmentAutomationResource.ResourceType.Namespace, Diagnostics);
        private CustomAssessmentAutomationsRestOperations CustomAssessmentAutomationRestClient => _customAssessmentAutomationRestClient ??= new CustomAssessmentAutomationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CustomAssessmentAutomationResource.ResourceType));
        private ClientDiagnostics CustomEntityStoreAssignmentClientDiagnostics => _customEntityStoreAssignmentClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", CustomEntityStoreAssignmentResource.ResourceType.Namespace, Diagnostics);
        private CustomEntityStoreAssignmentsRestOperations CustomEntityStoreAssignmentRestClient => _customEntityStoreAssignmentRestClient ??= new CustomEntityStoreAssignmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(CustomEntityStoreAssignmentResource.ResourceType));
        private ClientDiagnostics IotSecuritySolutionModelIotSecuritySolutionClientDiagnostics => _iotSecuritySolutionModelIotSecuritySolutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", IotSecuritySolutionModelResource.ResourceType.Namespace, Diagnostics);
        private IotSecuritySolutionRestOperations IotSecuritySolutionModelIotSecuritySolutionRestClient => _iotSecuritySolutionModelIotSecuritySolutionRestClient ??= new IotSecuritySolutionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(IotSecuritySolutionModelResource.ResourceType));
        private ClientDiagnostics TasksClientDiagnostics => _tasksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private TasksRestOperations TasksRestClient => _tasksRestClient ??= new TasksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics AutomationClientDiagnostics => _automationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AutomationResource.ResourceType.Namespace, Diagnostics);
        private AutomationsRestOperations AutomationRestClient => _automationRestClient ??= new AutomationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(AutomationResource.ResourceType));
        private ClientDiagnostics AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics => _adaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AdaptiveApplicationControlGroupResource.ResourceType.Namespace, Diagnostics);
        private AdaptiveApplicationControlsRestOperations AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient => _adaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient ??= new AdaptiveApplicationControlsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(AdaptiveApplicationControlGroupResource.ResourceType));
        private ClientDiagnostics AllowedConnectionsResourceAllowedConnectionsClientDiagnostics => _allowedConnectionsResourceAllowedConnectionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", AllowedConnectionsResource.ResourceType.Namespace, Diagnostics);
        private AllowedConnectionsRestOperations AllowedConnectionsResourceAllowedConnectionsRestClient => _allowedConnectionsResourceAllowedConnectionsRestClient ??= new AllowedConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(AllowedConnectionsResource.ResourceType));
        private ClientDiagnostics TopologyResourceTopologyClientDiagnostics => _topologyResourceTopologyClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", TopologyResource.ResourceType.Namespace, Diagnostics);
        private TopologyRestOperations TopologyResourceTopologyRestClient => _topologyResourceTopologyRestClient ??= new TopologyRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TopologyResource.ResourceType));
        private ClientDiagnostics JitNetworkAccessPolicyClientDiagnostics => _jitNetworkAccessPolicyClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", JitNetworkAccessPolicyResource.ResourceType.Namespace, Diagnostics);
        private JitNetworkAccessPoliciesRestOperations JitNetworkAccessPolicyRestClient => _jitNetworkAccessPolicyRestClient ??= new JitNetworkAccessPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(JitNetworkAccessPolicyResource.ResourceType));
        private ClientDiagnostics DiscoveredSecuritySolutionClientDiagnostics => _discoveredSecuritySolutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", DiscoveredSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
        private DiscoveredSecuritySolutionsRestOperations DiscoveredSecuritySolutionRestClient => _discoveredSecuritySolutionRestClient ??= new DiscoveredSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(DiscoveredSecuritySolutionResource.ResourceType));
        private ClientDiagnostics securitySolutionsReferenceDataClientDiagnostics => _securitySolutionsReferenceDataClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecuritySolutionsReferenceDataRestOperations securitySolutionsReferenceDataRestClient => _securitySolutionsReferenceDataRestClient ??= new SecuritySolutionsReferenceDataRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ExternalSecuritySolutionClientDiagnostics => _externalSecuritySolutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ExternalSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
        private ExternalSecuritySolutionsRestOperations ExternalSecuritySolutionRestClient => _externalSecuritySolutionRestClient ??= new ExternalSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ExternalSecuritySolutionResource.ResourceType));
        private ClientDiagnostics SecureScoreControlsClientDiagnostics => _secureScoreControlsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecureScoreControlsRestOperations SecureScoreControlsRestClient => _secureScoreControlsRestClient ??= new SecureScoreControlsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecureScoreControlDefinitionsClientDiagnostics => _secureScoreControlDefinitionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecureScoreControlDefinitionsRestOperations SecureScoreControlDefinitionsRestClient => _secureScoreControlDefinitionsRestClient ??= new SecureScoreControlDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SecuritySolutionClientDiagnostics => _securitySolutionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SecuritySolutionResource.ResourceType.Namespace, Diagnostics);
        private SecuritySolutionsRestOperations SecuritySolutionRestClient => _securitySolutionRestClient ??= new SecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SecuritySolutionResource.ResourceType));
        private ClientDiagnostics AlertsClientDiagnostics => _alertsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private AlertsRestOperations AlertsRestClient => _alertsRestClient ??= new AlertsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SoftwareSoftwareInventoriesClientDiagnostics => _softwareSoftwareInventoriesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SoftwareResource.ResourceType.Namespace, Diagnostics);
        private SoftwareInventoriesRestOperations SoftwareSoftwareInventoriesRestClient => _softwareSoftwareInventoriesRestClient ??= new SoftwareInventoriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SoftwareResource.ResourceType));
        private ClientDiagnostics SecurityConnectorClientDiagnostics => _securityConnectorClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", SecurityConnectorResource.ResourceType.Namespace, Diagnostics);
        private SecurityConnectorsRestOperations SecurityConnectorRestClient => _securityConnectorRestClient ??= new SecurityConnectorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SecurityConnectorResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets an object representing a MdeOnboardingDataResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
        /// <returns> Returns a <see cref="MdeOnboardingDataResource" /> object. </returns>
        public virtual MdeOnboardingDataResource GetMdeOnboardingData()
        {
            return new MdeOnboardingDataResource(Client, new ResourceIdentifier(Id.ToString() + "/providers/Microsoft.Security/mdeOnboardings/default"));
        }

        /// <summary> Gets a collection of PricingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of PricingResources and their operations over a PricingResource. </returns>
        public virtual PricingCollection GetPricings()
        {
            return GetCachedClient(Client => new PricingCollection(Client, Id));
        }

        /// <summary> Gets a collection of AscLocationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AscLocationResources and their operations over a AscLocationResource. </returns>
        public virtual AscLocationCollection GetAscLocations()
        {
            return GetCachedClient(Client => new AscLocationCollection(Client, Id));
        }

        /// <summary> Gets a collection of AutoProvisioningSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AutoProvisioningSettingResources and their operations over a AutoProvisioningSettingResource. </returns>
        public virtual AutoProvisioningSettingCollection GetAutoProvisioningSettings()
        {
            return GetCachedClient(Client => new AutoProvisioningSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecurityContactResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecurityContactResources and their operations over a SecurityContactResource. </returns>
        public virtual SecurityContactCollection GetSecurityContacts()
        {
            return GetCachedClient(Client => new SecurityContactCollection(Client, Id));
        }

        /// <summary> Gets a collection of WorkspaceSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of WorkspaceSettingResources and their operations over a WorkspaceSettingResource. </returns>
        public virtual WorkspaceSettingCollection GetWorkspaceSettings()
        {
            return GetCachedClient(Client => new WorkspaceSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of RegulatoryComplianceStandardResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of RegulatoryComplianceStandardResources and their operations over a RegulatoryComplianceStandardResource. </returns>
        public virtual RegulatoryComplianceStandardCollection GetRegulatoryComplianceStandards()
        {
            return GetCachedClient(Client => new RegulatoryComplianceStandardCollection(Client, Id));
        }

        /// <summary> Gets a collection of AlertsSuppressionRuleResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AlertsSuppressionRuleResources and their operations over a AlertsSuppressionRuleResource. </returns>
        public virtual AlertsSuppressionRuleCollection GetAlertsSuppressionRules()
        {
            return GetCachedClient(Client => new AlertsSuppressionRuleCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionAssessmentMetadataResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionAssessmentMetadataResources and their operations over a SubscriptionAssessmentMetadataResource. </returns>
        public virtual SubscriptionAssessmentMetadataCollection GetAllSubscriptionAssessmentMetadata()
        {
            return GetCachedClient(Client => new SubscriptionAssessmentMetadataCollection(Client, Id));
        }

        /// <summary> Gets a collection of SecureScoreItemResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SecureScoreItemResources and their operations over a SecureScoreItemResource. </returns>
        public virtual SecureScoreItemCollection GetSecureScoreItems()
        {
            return GetCachedClient(Client => new SecureScoreItemCollection(Client, Id));
        }

        /// <summary> Gets a collection of ConnectorSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of ConnectorSettingResources and their operations over a ConnectorSettingResource. </returns>
        public virtual ConnectorSettingCollection GetConnectorSettings()
        {
            return GetCachedClient(Client => new ConnectorSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SettingResources and their operations over a SettingResource. </returns>
        public virtual SettingCollection GetSettings()
        {
            return GetCachedClient(Client => new SettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of IngestionSettingResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of IngestionSettingResources and their operations over a IngestionSettingResource. </returns>
        public virtual IngestionSettingCollection GetIngestionSettings()
        {
            return GetCachedClient(Client => new IngestionSettingCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionGovernanceRuleResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionGovernanceRuleResources and their operations over a SubscriptionGovernanceRuleResource. </returns>
        public virtual SubscriptionGovernanceRuleCollection GetSubscriptionGovernanceRules()
        {
            return GetCachedClient(Client => new SubscriptionGovernanceRuleCollection(Client, Id));
        }

        /// <summary> Gets a collection of SubscriptionApplicationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SubscriptionApplicationResources and their operations over a SubscriptionApplicationResource. </returns>
        public virtual SubscriptionApplicationCollection GetSubscriptionApplications()
        {
            return GetCachedClient(Client => new SubscriptionApplicationCollection(Client, Id));
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomAssessmentAutomationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = await CustomAssessmentAutomationRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomAssessmentAutomationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = await CustomAssessmentAutomationRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomations(CancellationToken cancellationToken = default)
        {
            Page<CustomAssessmentAutomationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = CustomAssessmentAutomationRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomAssessmentAutomationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomAssessmentAutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomAssessmentAutomations");
                scope.Start();
                try
                {
                    var response = CustomAssessmentAutomationRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomAssessmentAutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<CustomEntityStoreAssignmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = await CustomEntityStoreAssignmentRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CustomEntityStoreAssignmentResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = await CustomEntityStoreAssignmentRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignments(CancellationToken cancellationToken = default)
        {
            Page<CustomEntityStoreAssignmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = CustomEntityStoreAssignmentRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CustomEntityStoreAssignmentResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CustomEntityStoreAssignmentClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCustomEntityStoreAssignments");
                scope.Start();
                try
                {
                    var response = CustomEntityStoreAssignmentRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CustomEntityStoreAssignmentResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IotSecuritySolutionModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IotSecuritySolutionModelResource> GetIotSecuritySolutionModelsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<IotSecuritySolutionModelResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionModelIotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutionModels");
                scope.Start();
                try
                {
                    var response = await IotSecuritySolutionModelIotSecuritySolutionRestClient.ListBySubscriptionAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IotSecuritySolutionModelResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionModelIotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutionModels");
                scope.Start();
                try
                {
                    var response = await IotSecuritySolutionModelIotSecuritySolutionRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IotSecuritySolutionModelResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IotSecuritySolutionModelResource> GetIotSecuritySolutionModels(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<IotSecuritySolutionModelResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionModelIotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutionModels");
                scope.Start();
                try
                {
                    var response = IotSecuritySolutionModelIotSecuritySolutionRestClient.ListBySubscription(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IotSecuritySolutionModelResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IotSecuritySolutionModelIotSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIotSecuritySolutionModels");
                scope.Start();
                try
                {
                    var response = IotSecuritySolutionModelIotSecuritySolutionRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IotSecuritySolutionModelResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityTaskData> GetTasksAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityTaskData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = await TasksRestClient.ListAsync(Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityTaskData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = await TasksRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityTaskData> GetTasks(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SecurityTaskData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = TasksRestClient.List(Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityTaskData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TasksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTasks");
                scope.Start();
                try
                {
                    var response = TasksRestClient.ListNextPage(nextLink, Id.SubscriptionId, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AutomationResource> GetAutomationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AutomationResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAutomations");
                scope.Start();
                try
                {
                    var response = await AutomationRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AutomationResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAutomations");
                scope.Start();
                try
                {
                    var response = await AutomationRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AutomationResource> GetAutomations(CancellationToken cancellationToken = default)
        {
            Page<AutomationResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAutomations");
                scope.Start();
                try
                {
                    var response = AutomationRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AutomationResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AutomationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAutomations");
                scope.Start();
                try
                {
                    var response = AutomationRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AutomationResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroupsAsync(bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AdaptiveApplicationControlGroupResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAdaptiveApplicationControlGroups");
                scope.Start();
                try
                {
                    var response = await AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient.ListAsync(Id.SubscriptionId, includePathRecommendations, summary, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AdaptiveApplicationControlGroupResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroups(bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            Page<AdaptiveApplicationControlGroupResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AdaptiveApplicationControlGroupAdaptiveApplicationControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAdaptiveApplicationControlGroups");
                scope.Start();
                try
                {
                    var response = AdaptiveApplicationControlGroupAdaptiveApplicationControlsRestClient.List(Id.SubscriptionId, includePathRecommendations, summary, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AdaptiveApplicationControlGroupResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AllowedConnectionsResource> GetAllowedConnectionsResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AllowedConnectionsResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AllowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnectionsResources");
                scope.Start();
                try
                {
                    var response = await AllowedConnectionsResourceAllowedConnectionsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AllowedConnectionsResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AllowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnectionsResources");
                scope.Start();
                try
                {
                    var response = await AllowedConnectionsResourceAllowedConnectionsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AllowedConnectionsResource> GetAllowedConnectionsResources(CancellationToken cancellationToken = default)
        {
            Page<AllowedConnectionsResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AllowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnectionsResources");
                scope.Start();
                try
                {
                    var response = AllowedConnectionsResourceAllowedConnectionsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AllowedConnectionsResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AllowedConnectionsResourceAllowedConnectionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllowedConnectionsResources");
                scope.Start();
                try
                {
                    var response = AllowedConnectionsResourceAllowedConnectionsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AllowedConnectionsResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TopologyResource> GetTopologyResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<TopologyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopologyResourceTopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologyResources");
                scope.Start();
                try
                {
                    var response = await TopologyResourceTopologyRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TopologyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopologyResourceTopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologyResources");
                scope.Start();
                try
                {
                    var response = await TopologyResourceTopologyRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TopologyResource> GetTopologyResources(CancellationToken cancellationToken = default)
        {
            Page<TopologyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = TopologyResourceTopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologyResources");
                scope.Start();
                try
                {
                    var response = TopologyResourceTopologyRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TopologyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = TopologyResourceTopologyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTopologyResources");
                scope.Start();
                try
                {
                    var response = TopologyResourceTopologyRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TopologyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<JitNetworkAccessPolicyResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = await JitNetworkAccessPolicyRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JitNetworkAccessPolicyResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = await JitNetworkAccessPolicyRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPolicies(CancellationToken cancellationToken = default)
        {
            Page<JitNetworkAccessPolicyResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = JitNetworkAccessPolicyRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JitNetworkAccessPolicyResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JitNetworkAccessPolicyClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJitNetworkAccessPolicies");
                scope.Start();
                try
                {
                    var response = JitNetworkAccessPolicyRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JitNetworkAccessPolicyResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DiscoveredSecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await DiscoveredSecuritySolutionRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DiscoveredSecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await DiscoveredSecuritySolutionRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutions(CancellationToken cancellationToken = default)
        {
            Page<DiscoveredSecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = DiscoveredSecuritySolutionRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DiscoveredSecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DiscoveredSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDiscoveredSecuritySolutions");
                scope.Start();
                try
                {
                    var response = DiscoveredSecuritySolutionRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DiscoveredSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceDataAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecuritySolutionsReferenceData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = securitySolutionsReferenceDataClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllSecuritySolutionsReferenceData");
                scope.Start();
                try
                {
                    var response = await securitySolutionsReferenceDataRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceData(CancellationToken cancellationToken = default)
        {
            Page<SecuritySolutionsReferenceData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = securitySolutionsReferenceDataClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAllSecuritySolutionsReferenceData");
                scope.Start();
                try
                {
                    var response = securitySolutionsReferenceDataRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByExternalSecuritySolutionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ExternalSecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutionsByExternalSecuritySolution");
                scope.Start();
                try
                {
                    var response = await ExternalSecuritySolutionRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ExternalSecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutionsByExternalSecuritySolution");
                scope.Start();
                try
                {
                    var response = await ExternalSecuritySolutionRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByExternalSecuritySolution(CancellationToken cancellationToken = default)
        {
            Page<ExternalSecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutionsByExternalSecuritySolution");
                scope.Start();
                try
                {
                    var response = ExternalSecuritySolutionRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ExternalSecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ExternalSecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetExternalSecuritySolutionsByExternalSecuritySolution");
                scope.Start();
                try
                {
                    var response = ExternalSecuritySolutionRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ExternalSecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecureScoreControlDetails> GetSecureScoreControlsAsync(ExpandControlsEnum? expand = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SecureScoreControlDetails>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlsRestClient.ListAsync(Id.SubscriptionId, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecureScoreControlDetails>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecureScoreControlDetails> GetSecureScoreControls(ExpandControlsEnum? expand = null, CancellationToken cancellationToken = default)
        {
            Page<SecureScoreControlDetails> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = SecureScoreControlsRestClient.List(Id.SubscriptionId, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecureScoreControlDetails> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControls");
                scope.Start();
                try
                {
                    var response = SecureScoreControlsRestClient.ListNextPage(nextLink, Id.SubscriptionId, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecureScoreControlDefinitionItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecureScoreControlDefinitionItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscription(CancellationToken cancellationToken = default)
        {
            Page<SecureScoreControlDefinitionItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecureScoreControlDefinitionItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecureScoreControlDefinitionsBySubscription");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecuritySolutionResource> GetSecuritySolutionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecuritySolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await SecuritySolutionRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecuritySolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = await SecuritySolutionRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecuritySolutionResource> GetSecuritySolutions(CancellationToken cancellationToken = default)
        {
            Page<SecuritySolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = SecuritySolutionRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecuritySolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecuritySolutionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecuritySolutions");
                scope.Start();
                try
                {
                    var response = SecuritySolutionRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecuritySolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AlertData> GetAlertsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AlertData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = await AlertsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AlertData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = await AlertsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AlertData> GetAlerts(CancellationToken cancellationToken = default)
        {
            Page<AlertData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = AlertsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AlertData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = AlertsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetAlerts");
                scope.Start();
                try
                {
                    var response = AlertsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SoftwareResource> GetSoftwaresAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SoftwareResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SoftwareSoftwareInventoriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwares");
                scope.Start();
                try
                {
                    var response = await SoftwareSoftwareInventoriesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SoftwareResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SoftwareSoftwareInventoriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwares");
                scope.Start();
                try
                {
                    var response = await SoftwareSoftwareInventoriesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SoftwareResource> GetSoftwares(CancellationToken cancellationToken = default)
        {
            Page<SoftwareResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SoftwareSoftwareInventoriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwares");
                scope.Start();
                try
                {
                    var response = SoftwareSoftwareInventoriesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SoftwareResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SoftwareSoftwareInventoriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSoftwares");
                scope.Start();
                try
                {
                    var response = SoftwareSoftwareInventoriesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SoftwareResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecurityConnectorResource> GetSecurityConnectorsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecurityConnectorResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = await SecurityConnectorRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecurityConnectorResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = await SecurityConnectorRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecurityConnectorResource> GetSecurityConnectors(CancellationToken cancellationToken = default)
        {
            Page<SecurityConnectorResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = SecurityConnectorRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecurityConnectorResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecurityConnectorClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSecurityConnectors");
                scope.Start();
                try
                {
                    var response = SecurityConnectorRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SecurityConnectorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
