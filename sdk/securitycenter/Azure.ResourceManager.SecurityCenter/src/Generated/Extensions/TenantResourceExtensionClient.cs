// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _secureScoreControlDefinitionsClientDiagnostics;
        private SecureScoreControlDefinitionsRestOperations _secureScoreControlDefinitionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SecureScoreControlDefinitionsClientDiagnostics => _secureScoreControlDefinitionsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SecureScoreControlDefinitionsRestOperations SecureScoreControlDefinitionsRestClient => _secureScoreControlDefinitionsRestClient ??= new SecureScoreControlDefinitionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of TenantAssessmentMetadataResources in the TenantResource. </summary>
        /// <returns> An object representing collection of TenantAssessmentMetadataResources and their operations over a TenantAssessmentMetadataResource. </returns>
        public virtual TenantAssessmentMetadataCollection GetAllTenantAssessmentMetadata()
        {
            return GetCachedClient(Client => new TenantAssessmentMetadataCollection(Client, Id));
        }

        /// <summary>
        /// List the available security controls, their assessments, and the max score
        /// Request Path: /providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SecureScoreControlDefinitionItem>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSecureScoreControlDefinitions");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SecureScoreControlDefinitionItem>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSecureScoreControlDefinitions");
                scope.Start();
                try
                {
                    var response = await SecureScoreControlDefinitionsRestClient.ListNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the available security controls, their assessments, and the max score
        /// Request Path: /providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitions(CancellationToken cancellationToken = default)
        {
            Page<SecureScoreControlDefinitionItem> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSecureScoreControlDefinitions");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.List(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SecureScoreControlDefinitionItem> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SecureScoreControlDefinitionsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetSecureScoreControlDefinitions");
                scope.Start();
                try
                {
                    var response = SecureScoreControlDefinitionsRestClient.ListNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
