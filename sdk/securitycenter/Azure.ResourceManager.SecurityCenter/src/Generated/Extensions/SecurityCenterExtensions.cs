// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.SecurityCenter. </summary>
    public static partial class SecurityCenterExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of TenantAssessmentMetadataResources in the TenantResource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of TenantAssessmentMetadataResources and their operations over a TenantAssessmentMetadataResource. </returns>
        public static TenantAssessmentMetadataCollection GetAllTenantAssessmentMetadata(this TenantResource tenantResource)
        {
            return GetExtensionClient(tenantResource).GetAllTenantAssessmentMetadata();
        }

        /// <summary>
        /// Get metadata information on an assessment type
        /// Request Path: /providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
        /// Operation Id: AssessmentsMetadata_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="assessmentMetadataName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentMetadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentMetadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<TenantAssessmentMetadataResource>> GetTenantAssessmentMetadataAsync(this TenantResource tenantResource, string assessmentMetadataName, CancellationToken cancellationToken = default)
        {
            return await tenantResource.GetAllTenantAssessmentMetadata().GetAsync(assessmentMetadataName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get metadata information on an assessment type
        /// Request Path: /providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
        /// Operation Id: AssessmentsMetadata_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="assessmentMetadataName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentMetadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentMetadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<TenantAssessmentMetadataResource> GetTenantAssessmentMetadata(this TenantResource tenantResource, string assessmentMetadataName, CancellationToken cancellationToken = default)
        {
            return tenantResource.GetAllTenantAssessmentMetadata().Get(assessmentMetadataName, cancellationToken);
        }

        /// <summary>
        /// List the available security controls, their assessments, and the max score
        /// Request Path: /providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetSecureScoreControlDefinitionsAsync(cancellationToken);
        }

        /// <summary>
        /// List the available security controls, their assessments, and the max score
        /// Request Path: /providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_List
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitions(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(tenantResource).GetSecureScoreControlDefinitions(cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets an object representing a MdeOnboardingDataResource along with the instance operations that can be performed on it in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="MdeOnboardingDataResource" /> object. </returns>
        public static MdeOnboardingDataResource GetMdeOnboardingData(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetMdeOnboardingData();
        }

        /// <summary> Gets a collection of PricingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PricingResources and their operations over a PricingResource. </returns>
        public static PricingCollection GetPricings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetPricings();
        }

        /// <summary>
        /// Gets a provided Microsoft Defender for Cloud pricing configuration in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}
        /// Operation Id: Pricings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="pricingName"> name of the pricing configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="pricingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="pricingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PricingResource>> GetPricingAsync(this SubscriptionResource subscriptionResource, string pricingName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetPricings().GetAsync(pricingName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a provided Microsoft Defender for Cloud pricing configuration in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}
        /// Operation Id: Pricings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="pricingName"> name of the pricing configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="pricingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="pricingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PricingResource> GetPricing(this SubscriptionResource subscriptionResource, string pricingName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetPricings().Get(pricingName, cancellationToken);
        }

        /// <summary> Gets a collection of AscLocationResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AscLocationResources and their operations over a AscLocationResource. </returns>
        public static AscLocationCollection GetAscLocations(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAscLocations();
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AscLocationResource>> GetAscLocationAsync(this SubscriptionResource subscriptionResource, string ascLocation, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetAscLocations().GetAsync(ascLocation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Details of a specific location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AscLocationResource> GetAscLocation(this SubscriptionResource subscriptionResource, string ascLocation, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetAscLocations().Get(ascLocation, cancellationToken);
        }

        /// <summary> Gets a collection of AutoProvisioningSettingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AutoProvisioningSettingResources and their operations over a AutoProvisioningSettingResource. </returns>
        public static AutoProvisioningSettingCollection GetAutoProvisioningSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAutoProvisioningSettings();
        }

        /// <summary>
        /// Details of a specific setting
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}
        /// Operation Id: AutoProvisioningSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="settingName"> Auto provisioning setting key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AutoProvisioningSettingResource>> GetAutoProvisioningSettingAsync(this SubscriptionResource subscriptionResource, string settingName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetAutoProvisioningSettings().GetAsync(settingName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Details of a specific setting
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}
        /// Operation Id: AutoProvisioningSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="settingName"> Auto provisioning setting key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="settingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="settingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AutoProvisioningSettingResource> GetAutoProvisioningSetting(this SubscriptionResource subscriptionResource, string settingName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetAutoProvisioningSettings().Get(settingName, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityContactResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecurityContactResources and their operations over a SecurityContactResource. </returns>
        public static SecurityContactCollection GetSecurityContacts(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSecurityContacts();
        }

        /// <summary>
        /// Security contact configurations for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
        /// Operation Id: SecurityContacts_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="securityContactName"> Name of the security contact object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityContactName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityContactName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SecurityContactResource>> GetSecurityContactAsync(this SubscriptionResource subscriptionResource, string securityContactName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSecurityContacts().GetAsync(securityContactName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Security contact configurations for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}
        /// Operation Id: SecurityContacts_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="securityContactName"> Name of the security contact object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityContactName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityContactName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SecurityContactResource> GetSecurityContact(this SubscriptionResource subscriptionResource, string securityContactName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSecurityContacts().Get(securityContactName, cancellationToken);
        }

        /// <summary> Gets a collection of WorkspaceSettingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of WorkspaceSettingResources and their operations over a WorkspaceSettingResource. </returns>
        public static WorkspaceSettingCollection GetWorkspaceSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetWorkspaceSettings();
        }

        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
        /// Operation Id: WorkspaceSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="workspaceSettingName"> Name of the security setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workspaceSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceSettingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<WorkspaceSettingResource>> GetWorkspaceSettingAsync(this SubscriptionResource subscriptionResource, string workspaceSettingName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetWorkspaceSettings().GetAsync(workspaceSettingName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}
        /// Operation Id: WorkspaceSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="workspaceSettingName"> Name of the security setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workspaceSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceSettingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<WorkspaceSettingResource> GetWorkspaceSetting(this SubscriptionResource subscriptionResource, string workspaceSettingName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetWorkspaceSettings().Get(workspaceSettingName, cancellationToken);
        }

        /// <summary> Gets a collection of RegulatoryComplianceStandardResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of RegulatoryComplianceStandardResources and their operations over a RegulatoryComplianceStandardResource. </returns>
        public static RegulatoryComplianceStandardCollection GetRegulatoryComplianceStandards(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetRegulatoryComplianceStandards();
        }

        /// <summary>
        /// Supported regulatory compliance details state for selected standard
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}
        /// Operation Id: RegulatoryComplianceStandards_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="regulatoryComplianceStandardName"> Name of the regulatory compliance standard object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="regulatoryComplianceStandardName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="regulatoryComplianceStandardName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<RegulatoryComplianceStandardResource>> GetRegulatoryComplianceStandardAsync(this SubscriptionResource subscriptionResource, string regulatoryComplianceStandardName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetRegulatoryComplianceStandards().GetAsync(regulatoryComplianceStandardName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Supported regulatory compliance details state for selected standard
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}
        /// Operation Id: RegulatoryComplianceStandards_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="regulatoryComplianceStandardName"> Name of the regulatory compliance standard object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="regulatoryComplianceStandardName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="regulatoryComplianceStandardName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<RegulatoryComplianceStandardResource> GetRegulatoryComplianceStandard(this SubscriptionResource subscriptionResource, string regulatoryComplianceStandardName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetRegulatoryComplianceStandards().Get(regulatoryComplianceStandardName, cancellationToken);
        }

        /// <summary> Gets a collection of AlertsSuppressionRuleResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AlertsSuppressionRuleResources and their operations over a AlertsSuppressionRuleResource. </returns>
        public static AlertsSuppressionRuleCollection GetAlertsSuppressionRules(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAlertsSuppressionRules();
        }

        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alertsSuppressionRules/{alertsSuppressionRuleName}
        /// Operation Id: AlertsSuppressionRules_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="alertsSuppressionRuleName"> The unique name of the suppression alert rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertsSuppressionRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertsSuppressionRuleName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AlertsSuppressionRuleResource>> GetAlertsSuppressionRuleAsync(this SubscriptionResource subscriptionResource, string alertsSuppressionRuleName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetAlertsSuppressionRules().GetAsync(alertsSuppressionRuleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get dismiss rule, with name: {alertsSuppressionRuleName}, for the given subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alertsSuppressionRules/{alertsSuppressionRuleName}
        /// Operation Id: AlertsSuppressionRules_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="alertsSuppressionRuleName"> The unique name of the suppression alert rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="alertsSuppressionRuleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="alertsSuppressionRuleName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AlertsSuppressionRuleResource> GetAlertsSuppressionRule(this SubscriptionResource subscriptionResource, string alertsSuppressionRuleName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetAlertsSuppressionRules().Get(alertsSuppressionRuleName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionAssessmentMetadataResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SubscriptionAssessmentMetadataResources and their operations over a SubscriptionAssessmentMetadataResource. </returns>
        public static SubscriptionAssessmentMetadataCollection GetAllSubscriptionAssessmentMetadata(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetAllSubscriptionAssessmentMetadata();
        }

        /// <summary>
        /// Get metadata information on an assessment type in a specific subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
        /// Operation Id: AssessmentsMetadata_GetInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="assessmentMetadataName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentMetadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentMetadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SubscriptionAssessmentMetadataResource>> GetSubscriptionAssessmentMetadataAsync(this SubscriptionResource subscriptionResource, string assessmentMetadataName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetAllSubscriptionAssessmentMetadata().GetAsync(assessmentMetadataName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get metadata information on an assessment type in a specific subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}
        /// Operation Id: AssessmentsMetadata_GetInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="assessmentMetadataName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentMetadataName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentMetadataName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SubscriptionAssessmentMetadataResource> GetSubscriptionAssessmentMetadata(this SubscriptionResource subscriptionResource, string assessmentMetadataName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetAllSubscriptionAssessmentMetadata().Get(assessmentMetadataName, cancellationToken);
        }

        /// <summary> Gets a collection of SecureScoreItemResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecureScoreItemResources and their operations over a SecureScoreItemResource. </returns>
        public static SecureScoreItemCollection GetSecureScoreItems(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSecureScoreItems();
        }

        /// <summary>
        /// Get secure score for a specific Microsoft Defender for Cloud initiative within your current scope. For the ASC Default initiative, use &apos;ascScore&apos;.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScores/{secureScoreName}
        /// Operation Id: SecureScores_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="secureScoreName"> The initiative name. For the ASC Default initiative, use &apos;ascScore&apos; as in the sample request below. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="secureScoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="secureScoreName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SecureScoreItemResource>> GetSecureScoreItemAsync(this SubscriptionResource subscriptionResource, string secureScoreName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSecureScoreItems().GetAsync(secureScoreName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get secure score for a specific Microsoft Defender for Cloud initiative within your current scope. For the ASC Default initiative, use &apos;ascScore&apos;.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScores/{secureScoreName}
        /// Operation Id: SecureScores_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="secureScoreName"> The initiative name. For the ASC Default initiative, use &apos;ascScore&apos; as in the sample request below. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="secureScoreName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="secureScoreName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SecureScoreItemResource> GetSecureScoreItem(this SubscriptionResource subscriptionResource, string secureScoreName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSecureScoreItems().Get(secureScoreName, cancellationToken);
        }

        /// <summary> Gets a collection of ConnectorSettingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ConnectorSettingResources and their operations over a ConnectorSettingResource. </returns>
        public static ConnectorSettingCollection GetConnectorSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetConnectorSettings();
        }

        /// <summary>
        /// Details of a specific cloud account connector
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/connectors/{connectorName}
        /// Operation Id: Connectors_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="connectorName"> Name of the cloud account connector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ConnectorSettingResource>> GetConnectorSettingAsync(this SubscriptionResource subscriptionResource, string connectorName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetConnectorSettings().GetAsync(connectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Details of a specific cloud account connector
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/connectors/{connectorName}
        /// Operation Id: Connectors_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="connectorName"> Name of the cloud account connector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="connectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="connectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ConnectorSettingResource> GetConnectorSetting(this SubscriptionResource subscriptionResource, string connectorName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetConnectorSettings().Get(connectorName, cancellationToken);
        }

        /// <summary> Gets a collection of SettingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SettingResources and their operations over a SettingResource. </returns>
        public static SettingCollection GetSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSettings();
        }

        /// <summary>
        /// Settings of different configurations in Microsoft Defender for Cloud
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/settings/{settingName}
        /// Operation Id: Settings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="settingName"> The name of the setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static async Task<Response<SettingResource>> GetSettingAsync(this SubscriptionResource subscriptionResource, SettingName settingName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSettings().GetAsync(settingName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Settings of different configurations in Microsoft Defender for Cloud
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/settings/{settingName}
        /// Operation Id: Settings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="settingName"> The name of the setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static Response<SettingResource> GetSetting(this SubscriptionResource subscriptionResource, SettingName settingName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSettings().Get(settingName, cancellationToken);
        }

        /// <summary> Gets a collection of IngestionSettingResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IngestionSettingResources and their operations over a IngestionSettingResource. </returns>
        public static IngestionSettingCollection GetIngestionSettings(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetIngestionSettings();
        }

        /// <summary>
        /// Settings for ingesting security data and logs to correlate with resources associated with the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}
        /// Operation Id: IngestionSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ingestionSettingName"> Name of the ingestion setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ingestionSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ingestionSettingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IngestionSettingResource>> GetIngestionSettingAsync(this SubscriptionResource subscriptionResource, string ingestionSettingName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetIngestionSettings().GetAsync(ingestionSettingName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Settings for ingesting security data and logs to correlate with resources associated with the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}
        /// Operation Id: IngestionSettings_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ingestionSettingName"> Name of the ingestion setting. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ingestionSettingName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ingestionSettingName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<IngestionSettingResource> GetIngestionSetting(this SubscriptionResource subscriptionResource, string ingestionSettingName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetIngestionSettings().Get(ingestionSettingName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionGovernanceRuleResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SubscriptionGovernanceRuleResources and their operations over a SubscriptionGovernanceRuleResource. </returns>
        public static SubscriptionGovernanceRuleCollection GetSubscriptionGovernanceRules(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSubscriptionGovernanceRules();
        }

        /// <summary>
        /// Get a specific governanceRule for the requested scope by ruleId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: GovernanceRules_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ruleId"> The security GovernanceRule key - unique key for the standard GovernanceRule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SubscriptionGovernanceRuleResource>> GetSubscriptionGovernanceRuleAsync(this SubscriptionResource subscriptionResource, string ruleId, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSubscriptionGovernanceRules().GetAsync(ruleId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a specific governanceRule for the requested scope by ruleId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}
        /// Operation Id: GovernanceRules_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="ruleId"> The security GovernanceRule key - unique key for the standard GovernanceRule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SubscriptionGovernanceRuleResource> GetSubscriptionGovernanceRule(this SubscriptionResource subscriptionResource, string ruleId, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSubscriptionGovernanceRules().Get(ruleId, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionApplicationResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SubscriptionApplicationResources and their operations over a SubscriptionApplicationResource. </returns>
        public static SubscriptionApplicationCollection GetSubscriptionApplications(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSubscriptionApplications();
        }

        /// <summary>
        /// Get a specific application for the requested scope by applicationId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SubscriptionApplicationResource>> GetSubscriptionApplicationAsync(this SubscriptionResource subscriptionResource, string applicationId, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSubscriptionApplications().GetAsync(applicationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a specific application for the requested scope by applicationId
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applications/{applicationId}
        /// Operation Id: Application_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="applicationId"> The security Application key - unique key for the standard application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SubscriptionApplicationResource> GetSubscriptionApplication(this SubscriptionResource subscriptionResource, string applicationId, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSubscriptionApplications().Get(applicationId, cancellationToken);
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomationsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetCustomAssessmentAutomationsAsync(cancellationToken);
        }

        /// <summary>
        /// List custom assessment automations by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customAssessmentAutomations
        /// Operation Id: CustomAssessmentAutomations_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomAssessmentAutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CustomAssessmentAutomationResource> GetCustomAssessmentAutomations(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetCustomAssessmentAutomations(cancellationToken);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignmentsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetCustomEntityStoreAssignmentsAsync(cancellationToken);
        }

        /// <summary>
        /// List custom entity store assignments by provided subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/customEntityStoreAssignments
        /// Operation Id: CustomEntityStoreAssignments_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CustomEntityStoreAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignments(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetCustomEntityStoreAssignments(cancellationToken);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IotSecuritySolutionModelResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IotSecuritySolutionModelResource> GetIotSecuritySolutionModelsAsync(this SubscriptionResource subscriptionResource, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIotSecuritySolutionModelsAsync(filter, cancellationToken);
        }

        /// <summary>
        /// Use this method to get the list of IoT Security solutions by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/iotSecuritySolutions
        /// Operation Id: IotSecuritySolution_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="filter"> Filter the IoT Security solution with OData syntax. Supports filtering by iotHubs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IotSecuritySolutionModelResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IotSecuritySolutionModelResource> GetIotSecuritySolutionModels(this SubscriptionResource subscriptionResource, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIotSecuritySolutionModels(filter, cancellationToken);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecurityTaskData> GetTasksAsync(this SubscriptionResource subscriptionResource, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTasksAsync(filter, cancellationToken);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks
        /// Operation Id: Tasks_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityTaskData" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecurityTaskData> GetTasks(this SubscriptionResource subscriptionResource, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTasks(filter, cancellationToken);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AutomationResource> GetAutomationsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAutomationsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the security automations in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security automations for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/automations
        /// Operation Id: Automations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AutomationResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AutomationResource> GetAutomations(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAutomations(cancellationToken);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroupsAsync(this SubscriptionResource subscriptionResource, bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAdaptiveApplicationControlGroupsAsync(includePathRecommendations, summary, cancellationToken);
        }

        /// <summary>
        /// Gets a list of application control machine groups for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/applicationWhitelistings
        /// Operation Id: AdaptiveApplicationControls_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="includePathRecommendations"> Include the policy rules. </param>
        /// <param name="summary"> Return output in a summarized form. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AdaptiveApplicationControlGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AdaptiveApplicationControlGroupResource> GetAdaptiveApplicationControlGroups(this SubscriptionResource subscriptionResource, bool? includePathRecommendations = null, bool? summary = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAdaptiveApplicationControlGroups(includePathRecommendations, summary, cancellationToken);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AllowedConnectionsResource> GetAllowedConnectionsResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAllowedConnectionsResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections
        /// Operation Id: AllowedConnections_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AllowedConnectionsResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AllowedConnectionsResource> GetAllowedConnectionsResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAllowedConnectionsResources(cancellationToken);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<TopologyResource> GetTopologyResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTopologyResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list that allows to build a topology view of a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
        /// Operation Id: Topology_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TopologyResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<TopologyResource> GetTopologyResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTopologyResources(cancellationToken);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetJitNetworkAccessPoliciesAsync(cancellationToken);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPolicies(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetJitNetworkAccessPolicies(cancellationToken);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDiscoveredSecuritySolutionsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of discovered Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/discoveredSecuritySolutions
        /// Operation Id: DiscoveredSecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DiscoveredSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolutions(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDiscoveredSecuritySolutions(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceDataAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAllSecuritySolutionsReferenceDataAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all supported Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutionsReferenceData
        /// Operation Id: securitySolutionsReferenceData_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionsReferenceData" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecuritySolutionsReferenceData> GetAllSecuritySolutionsReferenceData(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAllSecuritySolutionsReferenceData(cancellationToken);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByExternalSecuritySolutionAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetExternalSecuritySolutionsByExternalSecuritySolutionAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of external security solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions
        /// Operation Id: ExternalSecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExternalSecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ExternalSecuritySolutionResource> GetExternalSecuritySolutionsByExternalSecuritySolution(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetExternalSecuritySolutionsByExternalSecuritySolution(cancellationToken);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecureScoreControlDetails> GetSecureScoreControlsAsync(this SubscriptionResource subscriptionResource, ExpandControlsEnum? expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecureScoreControlsAsync(expand, cancellationToken);
        }

        /// <summary>
        /// Get all security controls within a scope
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControls
        /// Operation Id: SecureScoreControls_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDetails" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecureScoreControlDetails> GetSecureScoreControls(this SubscriptionResource subscriptionResource, ExpandControlsEnum? expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecureScoreControls(expand, cancellationToken);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscriptionAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecureScoreControlDefinitionsBySubscriptionAsync(cancellationToken);
        }

        /// <summary>
        /// For a specified subscription, list the available security controls, their assessments, and the max score
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/secureScoreControlDefinitions
        /// Operation Id: SecureScoreControlDefinitions_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecureScoreControlDefinitionItem" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecureScoreControlDefinitionItem> GetSecureScoreControlDefinitionsBySubscription(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecureScoreControlDefinitionsBySubscription(cancellationToken);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecuritySolutionResource> GetSecuritySolutionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecuritySolutionsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of Security Solutions for the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securitySolutions
        /// Operation Id: SecuritySolutions_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecuritySolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecuritySolutionResource> GetSecuritySolutions(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecuritySolutions(cancellationToken);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AlertData> GetAlertsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAlertsAsync(cancellationToken);
        }

        /// <summary>
        /// List all the alerts that are associated with the subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AlertData> GetAlerts(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetAlerts(cancellationToken);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SoftwareResource> GetSoftwaresAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSoftwaresAsync(cancellationToken);
        }

        /// <summary>
        /// Gets the software inventory of all virtual machines in the subscriptions.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/softwareInventories
        /// Operation Id: SoftwareInventories_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SoftwareResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SoftwareResource> GetSoftwares(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSoftwares(cancellationToken);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SecurityConnectorResource> GetSecurityConnectorsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecurityConnectorsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the security connectors in the specified subscription. Use the &apos;nextLink&apos; property in the response to get the next page of security connectors for the specified subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Security/securityConnectors
        /// Operation Id: SecurityConnectors_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SecurityConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SecurityConnectorResource> GetSecurityConnectors(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSecurityConnectors(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of CustomAssessmentAutomationResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CustomAssessmentAutomationResources and their operations over a CustomAssessmentAutomationResource. </returns>
        public static CustomAssessmentAutomationCollection GetCustomAssessmentAutomations(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetCustomAssessmentAutomations();
        }

        /// <summary>
        /// Gets a single custom assessment automation by name for the provided subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Security/customAssessmentAutomations/{customAssessmentAutomationName}
        /// Operation Id: CustomAssessmentAutomations_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customAssessmentAutomationName"> Name of the Custom Assessment Automation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customAssessmentAutomationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customAssessmentAutomationName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CustomAssessmentAutomationResource>> GetCustomAssessmentAutomationAsync(this ResourceGroupResource resourceGroupResource, string customAssessmentAutomationName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetCustomAssessmentAutomations().GetAsync(customAssessmentAutomationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a single custom assessment automation by name for the provided subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Security/customAssessmentAutomations/{customAssessmentAutomationName}
        /// Operation Id: CustomAssessmentAutomations_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customAssessmentAutomationName"> Name of the Custom Assessment Automation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customAssessmentAutomationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customAssessmentAutomationName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<CustomAssessmentAutomationResource> GetCustomAssessmentAutomation(this ResourceGroupResource resourceGroupResource, string customAssessmentAutomationName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetCustomAssessmentAutomations().Get(customAssessmentAutomationName, cancellationToken);
        }

        /// <summary> Gets a collection of CustomEntityStoreAssignmentResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CustomEntityStoreAssignmentResources and their operations over a CustomEntityStoreAssignmentResource. </returns>
        public static CustomEntityStoreAssignmentCollection GetCustomEntityStoreAssignments(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetCustomEntityStoreAssignments();
        }

        /// <summary>
        /// Gets a single custom entity store assignment by name for the provided subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Security/customEntityStoreAssignments/{customEntityStoreAssignmentName}
        /// Operation Id: CustomEntityStoreAssignments_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customEntityStoreAssignmentName"> Name of the custom entity store assignment. Generated name is GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customEntityStoreAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customEntityStoreAssignmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CustomEntityStoreAssignmentResource>> GetCustomEntityStoreAssignmentAsync(this ResourceGroupResource resourceGroupResource, string customEntityStoreAssignmentName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetCustomEntityStoreAssignments().GetAsync(customEntityStoreAssignmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a single custom entity store assignment by name for the provided subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Security/customEntityStoreAssignments/{customEntityStoreAssignmentName}
        /// Operation Id: CustomEntityStoreAssignments_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customEntityStoreAssignmentName"> Name of the custom entity store assignment. Generated name is GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="customEntityStoreAssignmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="customEntityStoreAssignmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<CustomEntityStoreAssignmentResource> GetCustomEntityStoreAssignment(this ResourceGroupResource resourceGroupResource, string customEntityStoreAssignmentName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetCustomEntityStoreAssignments().Get(customEntityStoreAssignmentName, cancellationToken);
        }

        /// <summary> Gets a collection of IotSecuritySolutionModelResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IotSecuritySolutionModelResources and their operations over a IotSecuritySolutionModelResource. </returns>
        public static IotSecuritySolutionModelCollection GetIotSecuritySolutionModels(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetIotSecuritySolutionModels();
        }

        /// <summary>
        /// User this method to get details of a specific IoT Security solution based on solution name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}
        /// Operation Id: IotSecuritySolution_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="solutionName"> The name of the IoT Security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IotSecuritySolutionModelResource>> GetIotSecuritySolutionModelAsync(this ResourceGroupResource resourceGroupResource, string solutionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetIotSecuritySolutionModels().GetAsync(solutionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// User this method to get details of a specific IoT Security solution based on solution name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}
        /// Operation Id: IotSecuritySolution_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="solutionName"> The name of the IoT Security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<IotSecuritySolutionModelResource> GetIotSecuritySolutionModel(this ResourceGroupResource resourceGroupResource, string solutionName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetIotSecuritySolutionModels().Get(solutionName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceGroupLocationTaskResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        /// <returns> An object representing collection of ResourceGroupLocationTaskResources and their operations over a ResourceGroupLocationTaskResource. </returns>
        public static ResourceGroupLocationTaskCollection GetResourceGroupLocationTasks(this ResourceGroupResource resourceGroupResource, string ascLocation)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            return GetExtensionClient(resourceGroupResource).GetResourceGroupLocationTasks(ascLocation);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="taskName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ResourceGroupLocationTaskResource>> GetResourceGroupLocationTaskAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string taskName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetResourceGroupLocationTasks(ascLocation).GetAsync(taskName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="taskName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ResourceGroupLocationTaskResource> GetResourceGroupLocationTask(this ResourceGroupResource resourceGroupResource, string ascLocation, string taskName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetResourceGroupLocationTasks(ascLocation).Get(taskName, cancellationToken);
        }

        /// <summary> Gets a collection of AutomationResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AutomationResources and their operations over a AutomationResource. </returns>
        public static AutomationCollection GetAutomations(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetAutomations();
        }

        /// <summary>
        /// Retrieves information about the model of a security automation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}
        /// Operation Id: Automations_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="automationName"> The security automation name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="automationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="automationName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AutomationResource>> GetAutomationAsync(this ResourceGroupResource resourceGroupResource, string automationName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAutomations().GetAsync(automationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves information about the model of a security automation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}
        /// Operation Id: Automations_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="automationName"> The security automation name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="automationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="automationName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AutomationResource> GetAutomation(this ResourceGroupResource resourceGroupResource, string automationName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAutomations().Get(automationName, cancellationToken);
        }

        /// <summary> Gets a collection of ServerVulnerabilityAssessmentResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        /// <returns> An object representing collection of ServerVulnerabilityAssessmentResources and their operations over a ServerVulnerabilityAssessmentResource. </returns>
        public static ServerVulnerabilityAssessmentCollection GetServerVulnerabilityAssessments(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName)
        {
            Argument.AssertNotNullOrEmpty(resourceNamespace, nameof(resourceNamespace));
            Argument.AssertNotNullOrEmpty(resourceType, nameof(resourceType));
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            return GetExtensionClient(resourceGroupResource).GetServerVulnerabilityAssessments(resourceNamespace, resourceType, resourceName);
        }

        /// <summary>
        /// Gets a server vulnerability assessment onboarding statuses on a given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}
        /// Operation Id: ServerVulnerabilityAssessment_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ServerVulnerabilityAssessmentResource>> GetServerVulnerabilityAssessmentAsync(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetServerVulnerabilityAssessments(resourceNamespace, resourceType, resourceName).GetAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a server vulnerability assessment onboarding statuses on a given resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/serverVulnerabilityAssessments/{serverVulnerabilityAssessment}
        /// Operation Id: ServerVulnerabilityAssessment_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ServerVulnerabilityAssessmentResource> GetServerVulnerabilityAssessment(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetServerVulnerabilityAssessments(resourceNamespace, resourceType, resourceName).Get(cancellationToken);
        }

        /// <summary> Gets a collection of AdaptiveNetworkHardeningResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        /// <returns> An object representing collection of AdaptiveNetworkHardeningResources and their operations over a AdaptiveNetworkHardeningResource. </returns>
        public static AdaptiveNetworkHardeningCollection GetAdaptiveNetworkHardenings(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName)
        {
            Argument.AssertNotNullOrEmpty(resourceNamespace, nameof(resourceNamespace));
            Argument.AssertNotNullOrEmpty(resourceType, nameof(resourceType));
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            return GetExtensionClient(resourceGroupResource).GetAdaptiveNetworkHardenings(resourceNamespace, resourceType, resourceName);
        }

        /// <summary>
        /// Gets a single Adaptive Network Hardening resource
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/adaptiveNetworkHardenings/{adaptiveNetworkHardeningResourceName}
        /// Operation Id: AdaptiveNetworkHardenings_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="adaptiveNetworkHardeningResourceName"> The name of the Adaptive Network Hardening resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="adaptiveNetworkHardeningResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="adaptiveNetworkHardeningResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AdaptiveNetworkHardeningResource>> GetAdaptiveNetworkHardeningAsync(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAdaptiveNetworkHardenings(resourceNamespace, resourceType, resourceName).GetAsync(adaptiveNetworkHardeningResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a single Adaptive Network Hardening resource
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/adaptiveNetworkHardenings/{adaptiveNetworkHardeningResourceName}
        /// Operation Id: AdaptiveNetworkHardenings_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The Namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="adaptiveNetworkHardeningResourceName"> The name of the Adaptive Network Hardening resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="adaptiveNetworkHardeningResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="adaptiveNetworkHardeningResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AdaptiveNetworkHardeningResource> GetAdaptiveNetworkHardening(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, string adaptiveNetworkHardeningResourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAdaptiveNetworkHardenings(resourceNamespace, resourceType, resourceName).Get(adaptiveNetworkHardeningResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of AllowedConnectionsResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of AllowedConnectionsResources and their operations over a AllowedConnectionsResource. </returns>
        public static AllowedConnectionsResourceCollection GetAllowedConnectionsResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetAllowedConnectionsResources();
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription and location, based on connection type.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections/{connectionType}
        /// Operation Id: AllowedConnections_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="connectionType"> The type of allowed connections (Internal, External). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<AllowedConnectionsResource>> GetAllowedConnectionsResourceAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, ConnectionType connectionType, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetAllowedConnectionsResources().GetAsync(ascLocation, connectionType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the list of all possible traffic between resources for the subscription and location, based on connection type.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections/{connectionType}
        /// Operation Id: AllowedConnections_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="connectionType"> The type of allowed connections (Internal, External). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<AllowedConnectionsResource> GetAllowedConnectionsResource(this ResourceGroupResource resourceGroupResource, string ascLocation, ConnectionType connectionType, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetAllowedConnectionsResources().Get(ascLocation, connectionType, cancellationToken);
        }

        /// <summary> Gets a collection of TopologyResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of TopologyResources and their operations over a TopologyResource. </returns>
        public static TopologyResourceCollection GetTopologyResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetTopologyResources();
        }

        /// <summary>
        /// Gets a specific topology component.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/topologies/{topologyResourceName}
        /// Operation Id: Topology_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="topologyResourceName"> Name of a topology resources collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="topologyResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="topologyResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<TopologyResource>> GetTopologyResourceAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string topologyResourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetTopologyResources().GetAsync(ascLocation, topologyResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a specific topology component.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/topologies/{topologyResourceName}
        /// Operation Id: Topology_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="topologyResourceName"> Name of a topology resources collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="topologyResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="topologyResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<TopologyResource> GetTopologyResource(this ResourceGroupResource resourceGroupResource, string ascLocation, string topologyResourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetTopologyResources().Get(ascLocation, topologyResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of JitNetworkAccessPolicyResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        /// <returns> An object representing collection of JitNetworkAccessPolicyResources and their operations over a JitNetworkAccessPolicyResource. </returns>
        public static JitNetworkAccessPolicyCollection GetJitNetworkAccessPolicies(this ResourceGroupResource resourceGroupResource, string ascLocation)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            return GetExtensionClient(resourceGroupResource).GetJitNetworkAccessPolicies(ascLocation);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}
        /// Operation Id: JitNetworkAccessPolicies_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="jitNetworkAccessPolicyName"> Name of a Just-in-Time access configuration policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="jitNetworkAccessPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="jitNetworkAccessPolicyName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<JitNetworkAccessPolicyResource>> GetJitNetworkAccessPolicyAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string jitNetworkAccessPolicyName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetJitNetworkAccessPolicies(ascLocation).GetAsync(jitNetworkAccessPolicyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}
        /// Operation Id: JitNetworkAccessPolicies_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="jitNetworkAccessPolicyName"> Name of a Just-in-Time access configuration policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="jitNetworkAccessPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="jitNetworkAccessPolicyName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<JitNetworkAccessPolicyResource> GetJitNetworkAccessPolicy(this ResourceGroupResource resourceGroupResource, string ascLocation, string jitNetworkAccessPolicyName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetJitNetworkAccessPolicies(ascLocation).Get(jitNetworkAccessPolicyName, cancellationToken);
        }

        /// <summary> Gets a collection of DiscoveredSecuritySolutionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DiscoveredSecuritySolutionResources and their operations over a DiscoveredSecuritySolutionResource. </returns>
        public static DiscoveredSecuritySolutionCollection GetDiscoveredSecuritySolutions(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetDiscoveredSecuritySolutions();
        }

        /// <summary>
        /// Gets a specific discovered Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DiscoveredSecuritySolutionResource>> GetDiscoveredSecuritySolutionAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetDiscoveredSecuritySolutions().GetAsync(ascLocation, discoveredSecuritySolutionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a specific discovered Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<DiscoveredSecuritySolutionResource> GetDiscoveredSecuritySolution(this ResourceGroupResource resourceGroupResource, string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetDiscoveredSecuritySolutions().Get(ascLocation, discoveredSecuritySolutionName, cancellationToken);
        }

        /// <summary> Gets a collection of ExternalSecuritySolutionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ExternalSecuritySolutionResources and their operations over a ExternalSecuritySolutionResource. </returns>
        public static ExternalSecuritySolutionCollection GetExternalSecuritySolutions(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetExternalSecuritySolutions();
        }

        /// <summary>
        /// Gets a specific external Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions/{externalSecuritySolutionsName}
        /// Operation Id: ExternalSecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="externalSecuritySolutionsName"> Name of an external security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="externalSecuritySolutionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="externalSecuritySolutionsName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ExternalSecuritySolutionResource>> GetExternalSecuritySolutionAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string externalSecuritySolutionsName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetExternalSecuritySolutions().GetAsync(ascLocation, externalSecuritySolutionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a specific external Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions/{externalSecuritySolutionsName}
        /// Operation Id: ExternalSecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="externalSecuritySolutionsName"> Name of an external security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="externalSecuritySolutionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="externalSecuritySolutionsName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ExternalSecuritySolutionResource> GetExternalSecuritySolution(this ResourceGroupResource resourceGroupResource, string ascLocation, string externalSecuritySolutionsName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetExternalSecuritySolutions().Get(ascLocation, externalSecuritySolutionsName, cancellationToken);
        }

        /// <summary> Gets a collection of SecuritySolutionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecuritySolutionResources and their operations over a SecuritySolutionResource. </returns>
        public static SecuritySolutionCollection GetSecuritySolutions(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetSecuritySolutions();
        }

        /// <summary>
        /// Gets a specific Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/securitySolutions/{securitySolutionName}
        /// Operation Id: SecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="securitySolutionName"> Name of security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="securitySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="securitySolutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SecuritySolutionResource>> GetSecuritySolutionAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string securitySolutionName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetSecuritySolutions().GetAsync(ascLocation, securitySolutionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a specific Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/securitySolutions/{securitySolutionName}
        /// Operation Id: SecuritySolutions_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="securitySolutionName"> Name of security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="securitySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="securitySolutionName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SecuritySolutionResource> GetSecuritySolution(this ResourceGroupResource resourceGroupResource, string ascLocation, string securitySolutionName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetSecuritySolutions().Get(ascLocation, securitySolutionName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceGroupLocationAlertResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        /// <returns> An object representing collection of ResourceGroupLocationAlertResources and their operations over a ResourceGroupLocationAlertResource. </returns>
        public static ResourceGroupLocationAlertCollection GetResourceGroupLocationAlerts(this ResourceGroupResource resourceGroupResource, string ascLocation)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));

            return GetExtensionClient(resourceGroupResource).GetResourceGroupLocationAlerts(ascLocation);
        }

        /// <summary>
        /// Get an alert that is associated a resource group or a resource in a resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
        /// Operation Id: Alerts_GetResourceGroupLevel
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="alertName"> Name of the alert object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="alertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="alertName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ResourceGroupLocationAlertResource>> GetResourceGroupLocationAlertAsync(this ResourceGroupResource resourceGroupResource, string ascLocation, string alertName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetResourceGroupLocationAlerts(ascLocation).GetAsync(alertName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an alert that is associated a resource group or a resource in a resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}
        /// Operation Id: Alerts_GetResourceGroupLevel
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="alertName"> Name of the alert object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="alertName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="alertName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ResourceGroupLocationAlertResource> GetResourceGroupLocationAlert(this ResourceGroupResource resourceGroupResource, string ascLocation, string alertName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetResourceGroupLocationAlerts(ascLocation).Get(alertName, cancellationToken);
        }

        /// <summary> Gets a collection of SoftwareResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/> or <paramref name="resourceName"/> is null. </exception>
        /// <returns> An object representing collection of SoftwareResources and their operations over a SoftwareResource. </returns>
        public static SoftwareCollection GetSoftwares(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName)
        {
            Argument.AssertNotNullOrEmpty(resourceNamespace, nameof(resourceNamespace));
            Argument.AssertNotNullOrEmpty(resourceType, nameof(resourceType));
            Argument.AssertNotNullOrEmpty(resourceName, nameof(resourceName));

            return GetExtensionClient(resourceGroupResource).GetSoftwares(resourceNamespace, resourceType, resourceName);
        }

        /// <summary>
        /// Gets a single software data of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="softwareName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SoftwareResource>> GetSoftwareAsync(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, string softwareName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetSoftwares(resourceNamespace, resourceType, resourceName).GetAsync(softwareName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a single software data of the virtual machine.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.Security/softwareInventories/{softwareName}
        /// Operation Id: SoftwareInventories_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceNamespace"> The namespace of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="resourceName"> Name of the resource. </param>
        /// <param name="softwareName"> Name of the installed software. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="softwareName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceNamespace"/>, <paramref name="resourceType"/>, <paramref name="resourceName"/> or <paramref name="softwareName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SoftwareResource> GetSoftware(this ResourceGroupResource resourceGroupResource, string resourceNamespace, string resourceType, string resourceName, string softwareName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetSoftwares(resourceNamespace, resourceType, resourceName).Get(softwareName, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityConnectorResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SecurityConnectorResources and their operations over a SecurityConnectorResource. </returns>
        public static SecurityConnectorCollection GetSecurityConnectors(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetSecurityConnectors();
        }

        /// <summary>
        /// Retrieves details of a specific security connector
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}
        /// Operation Id: SecurityConnectors_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="securityConnectorName"> The security connector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityConnectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityConnectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SecurityConnectorResource>> GetSecurityConnectorAsync(this ResourceGroupResource resourceGroupResource, string securityConnectorName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetSecurityConnectors().GetAsync(securityConnectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves details of a specific security connector
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}
        /// Operation Id: SecurityConnectors_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="securityConnectorName"> The security connector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="securityConnectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="securityConnectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SecurityConnectorResource> GetSecurityConnector(this ResourceGroupResource resourceGroupResource, string securityConnectorName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetSecurityConnectors().Get(securityConnectorName, cancellationToken);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPoliciesAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetJitNetworkAccessPoliciesAsync(cancellationToken);
        }

        /// <summary>
        /// Policies for protecting resources using Just-in-Time access control for the subscription, location
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/jitNetworkAccessPolicies
        /// Operation Id: JitNetworkAccessPolicies_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JitNetworkAccessPolicyResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JitNetworkAccessPolicyResource> GetJitNetworkAccessPolicies(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetJitNetworkAccessPolicies(cancellationToken);
        }

        /// <summary>
        /// List all the alerts that are associated with the resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<AlertData> GetAlertsByResourceGroupAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetAlertsByResourceGroupAsync(cancellationToken);
        }

        /// <summary>
        /// List all the alerts that are associated with the resource group
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts
        /// Operation Id: Alerts_ListByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertData" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<AlertData> GetAlertsByResourceGroup(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetAlertsByResourceGroup(cancellationToken);
        }

        private static ArmResourceExtensionClient GetExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ArmResourceExtensionClient(client, scope);
            }
            );
        }

        private static ArmResourceExtensionClient GetExtensionClient(ArmResource armResource)
        {
            return armResource.GetCachedClient((client) =>
            {
                return new ArmResourceExtensionClient(client, armResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ComplianceResultResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ComplianceResultResources and their operations over a ComplianceResultResource. </returns>
        public static ComplianceResultCollection GetComplianceResults(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetComplianceResults();
        }

        /// <summary>
        /// Security Compliance Result
        /// Request Path: /{resourceId}/providers/Microsoft.Security/complianceResults/{complianceResultName}
        /// Operation Id: ComplianceResults_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="complianceResultName"> name of the desired assessment compliance result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceResultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceResultName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ComplianceResultResource>> GetComplianceResultAsync(this ArmClient client, ResourceIdentifier scope, string complianceResultName, CancellationToken cancellationToken = default)
        {
            return await client.GetComplianceResults(scope).GetAsync(complianceResultName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Security Compliance Result
        /// Request Path: /{resourceId}/providers/Microsoft.Security/complianceResults/{complianceResultName}
        /// Operation Id: ComplianceResults_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="complianceResultName"> name of the desired assessment compliance result. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceResultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceResultName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ComplianceResultResource> GetComplianceResult(this ArmClient client, ResourceIdentifier scope, string complianceResultName, CancellationToken cancellationToken = default)
        {
            return client.GetComplianceResults(scope).Get(complianceResultName, cancellationToken);
        }

        /// <summary> Gets an object representing a AdvancedThreatProtectionSettingResource along with the instance operations that can be performed on it in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> Returns a <see cref="AdvancedThreatProtectionSettingResource" /> object. </returns>
        public static AdvancedThreatProtectionSettingResource GetAdvancedThreatProtectionSetting(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetAdvancedThreatProtectionSetting();
        }

        /// <summary> Gets a collection of DeviceSecurityGroupResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of DeviceSecurityGroupResources and their operations over a DeviceSecurityGroupResource. </returns>
        public static DeviceSecurityGroupCollection GetDeviceSecurityGroups(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetDeviceSecurityGroups();
        }

        /// <summary>
        /// Use this method to get the device security group for the specified IoT Hub resource.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}
        /// Operation Id: DeviceSecurityGroups_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="deviceSecurityGroupName"> The name of the device security group. Note that the name of the device security group is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deviceSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceSecurityGroupName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DeviceSecurityGroupResource>> GetDeviceSecurityGroupAsync(this ArmClient client, ResourceIdentifier scope, string deviceSecurityGroupName, CancellationToken cancellationToken = default)
        {
            return await client.GetDeviceSecurityGroups(scope).GetAsync(deviceSecurityGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Use this method to get the device security group for the specified IoT Hub resource.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}
        /// Operation Id: DeviceSecurityGroups_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="deviceSecurityGroupName"> The name of the device security group. Note that the name of the device security group is case insensitive. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deviceSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceSecurityGroupName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<DeviceSecurityGroupResource> GetDeviceSecurityGroup(this ArmClient client, ResourceIdentifier scope, string deviceSecurityGroupName, CancellationToken cancellationToken = default)
        {
            return client.GetDeviceSecurityGroups(scope).Get(deviceSecurityGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of ComplianceResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ComplianceResources and their operations over a ComplianceResource. </returns>
        public static ComplianceCollection GetCompliances(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetCompliances();
        }

        /// <summary>
        /// Details of a specific Compliance.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ComplianceResource>> GetComplianceAsync(this ArmClient client, ResourceIdentifier scope, string complianceName, CancellationToken cancellationToken = default)
        {
            return await client.GetCompliances(scope).GetAsync(complianceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Details of a specific Compliance.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ComplianceResource> GetCompliance(this ArmClient client, ResourceIdentifier scope, string complianceName, CancellationToken cancellationToken = default)
        {
            return client.GetCompliances(scope).Get(complianceName, cancellationToken);
        }

        /// <summary> Gets a collection of SecurityAssessmentResponseResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of SecurityAssessmentResponseResources and their operations over a SecurityAssessmentResponseResource. </returns>
        public static SecurityAssessmentResponseCollection GetSecurityAssessmentResponses(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetSecurityAssessmentResponses();
        }

        /// <summary>
        /// Get a security assessment on your scanned resource
        /// Request Path: /{resourceId}/providers/Microsoft.Security/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="assessmentName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SecurityAssessmentResponseResource>> GetSecurityAssessmentResponseAsync(this ArmClient client, ResourceIdentifier scope, string assessmentName, ExpandEnum? expand = null, CancellationToken cancellationToken = default)
        {
            return await client.GetSecurityAssessmentResponses(scope).GetAsync(assessmentName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a security assessment on your scanned resource
        /// Request Path: /{resourceId}/providers/Microsoft.Security/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="assessmentName"> The Assessment Key - Unique key for the assessment type. </param>
        /// <param name="expand"> OData expand. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SecurityAssessmentResponseResource> GetSecurityAssessmentResponse(this ArmClient client, ResourceIdentifier scope, string assessmentName, ExpandEnum? expand = null, CancellationToken cancellationToken = default)
        {
            return client.GetSecurityAssessmentResponses(scope).Get(assessmentName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of ScanResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of ScanResources and their operations over a ScanResource. </returns>
        public static ScanCollection GetScans(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetScans();
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ScanResource>> GetScanAsync(this ArmClient client, ResourceIdentifier scope, string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            return await client.GetScans(scope).GetAsync(scanId, workspaceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ScanResource> GetScan(this ArmClient client, ResourceIdentifier scope, string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            return client.GetScans(scope).Get(scanId, workspaceId, cancellationToken);
        }

        /// <summary> Gets a collection of RuleResultResources in the ArmResource. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of RuleResultResources and their operations over a RuleResultResource. </returns>
        public static RuleResultCollection GetRuleResults(this ArmClient client, ResourceIdentifier scope)
        {
            return GetExtensionClient(client, scope).GetRuleResults();
        }

        /// <summary>
        /// Gets the results for a given rule in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<RuleResultResource>> GetRuleResultAsync(this ArmClient client, ResourceIdentifier scope, string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            return await client.GetRuleResults(scope).GetAsync(ruleId, workspaceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the results for a given rule in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<RuleResultResource> GetRuleResult(this ArmClient client, ResourceIdentifier scope, string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            return client.GetRuleResults(scope).Get(ruleId, workspaceId, cancellationToken);
        }

        #region MdeOnboardingDataResource
        /// <summary>
        /// Gets an object representing a <see cref="MdeOnboardingDataResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MdeOnboardingDataResource.CreateResourceIdentifier" /> to create a <see cref="MdeOnboardingDataResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MdeOnboardingDataResource" /> object. </returns>
        public static MdeOnboardingDataResource GetMdeOnboardingDataResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MdeOnboardingDataResource.ValidateResourceId(id);
                return new MdeOnboardingDataResource(client, id);
            }
            );
        }
        #endregion

        #region CustomAssessmentAutomationResource
        /// <summary>
        /// Gets an object representing a <see cref="CustomAssessmentAutomationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomAssessmentAutomationResource.CreateResourceIdentifier" /> to create a <see cref="CustomAssessmentAutomationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomAssessmentAutomationResource" /> object. </returns>
        public static CustomAssessmentAutomationResource GetCustomAssessmentAutomationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomAssessmentAutomationResource.ValidateResourceId(id);
                return new CustomAssessmentAutomationResource(client, id);
            }
            );
        }
        #endregion

        #region CustomEntityStoreAssignmentResource
        /// <summary>
        /// Gets an object representing a <see cref="CustomEntityStoreAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CustomEntityStoreAssignmentResource.CreateResourceIdentifier" /> to create a <see cref="CustomEntityStoreAssignmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CustomEntityStoreAssignmentResource" /> object. </returns>
        public static CustomEntityStoreAssignmentResource GetCustomEntityStoreAssignmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CustomEntityStoreAssignmentResource.ValidateResourceId(id);
                return new CustomEntityStoreAssignmentResource(client, id);
            }
            );
        }
        #endregion

        #region ComplianceResultResource
        /// <summary>
        /// Gets an object representing a <see cref="ComplianceResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ComplianceResultResource.CreateResourceIdentifier" /> to create a <see cref="ComplianceResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ComplianceResultResource" /> object. </returns>
        public static ComplianceResultResource GetComplianceResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ComplianceResultResource.ValidateResourceId(id);
                return new ComplianceResultResource(client, id);
            }
            );
        }
        #endregion

        #region PricingResource
        /// <summary>
        /// Gets an object representing a <see cref="PricingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PricingResource.CreateResourceIdentifier" /> to create a <see cref="PricingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PricingResource" /> object. </returns>
        public static PricingResource GetPricingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PricingResource.ValidateResourceId(id);
                return new PricingResource(client, id);
            }
            );
        }
        #endregion

        #region AdvancedThreatProtectionSettingResource
        /// <summary>
        /// Gets an object representing an <see cref="AdvancedThreatProtectionSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AdvancedThreatProtectionSettingResource.CreateResourceIdentifier" /> to create an <see cref="AdvancedThreatProtectionSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AdvancedThreatProtectionSettingResource" /> object. </returns>
        public static AdvancedThreatProtectionSettingResource GetAdvancedThreatProtectionSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AdvancedThreatProtectionSettingResource.ValidateResourceId(id);
                return new AdvancedThreatProtectionSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DeviceSecurityGroupResource
        /// <summary>
        /// Gets an object representing a <see cref="DeviceSecurityGroupResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeviceSecurityGroupResource.CreateResourceIdentifier" /> to create a <see cref="DeviceSecurityGroupResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeviceSecurityGroupResource" /> object. </returns>
        public static DeviceSecurityGroupResource GetDeviceSecurityGroupResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeviceSecurityGroupResource.ValidateResourceId(id);
                return new DeviceSecurityGroupResource(client, id);
            }
            );
        }
        #endregion

        #region IotSecuritySolutionModelResource
        /// <summary>
        /// Gets an object representing an <see cref="IotSecuritySolutionModelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotSecuritySolutionModelResource.CreateResourceIdentifier" /> to create an <see cref="IotSecuritySolutionModelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IotSecuritySolutionModelResource" /> object. </returns>
        public static IotSecuritySolutionModelResource GetIotSecuritySolutionModelResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IotSecuritySolutionModelResource.ValidateResourceId(id);
                return new IotSecuritySolutionModelResource(client, id);
            }
            );
        }
        #endregion

        #region IotSecuritySolutionAnalyticsModelResource
        /// <summary>
        /// Gets an object representing an <see cref="IotSecuritySolutionAnalyticsModelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotSecuritySolutionAnalyticsModelResource.CreateResourceIdentifier" /> to create an <see cref="IotSecuritySolutionAnalyticsModelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IotSecuritySolutionAnalyticsModelResource" /> object. </returns>
        public static IotSecuritySolutionAnalyticsModelResource GetIotSecuritySolutionAnalyticsModelResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IotSecuritySolutionAnalyticsModelResource.ValidateResourceId(id);
                return new IotSecuritySolutionAnalyticsModelResource(client, id);
            }
            );
        }
        #endregion

        #region IotSecurityAggregatedAlertResource
        /// <summary>
        /// Gets an object representing an <see cref="IotSecurityAggregatedAlertResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotSecurityAggregatedAlertResource.CreateResourceIdentifier" /> to create an <see cref="IotSecurityAggregatedAlertResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IotSecurityAggregatedAlertResource" /> object. </returns>
        public static IotSecurityAggregatedAlertResource GetIotSecurityAggregatedAlertResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IotSecurityAggregatedAlertResource.ValidateResourceId(id);
                return new IotSecurityAggregatedAlertResource(client, id);
            }
            );
        }
        #endregion

        #region IotSecurityAggregatedRecommendationResource
        /// <summary>
        /// Gets an object representing an <see cref="IotSecurityAggregatedRecommendationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IotSecurityAggregatedRecommendationResource.CreateResourceIdentifier" /> to create an <see cref="IotSecurityAggregatedRecommendationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IotSecurityAggregatedRecommendationResource" /> object. </returns>
        public static IotSecurityAggregatedRecommendationResource GetIotSecurityAggregatedRecommendationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IotSecurityAggregatedRecommendationResource.ValidateResourceId(id);
                return new IotSecurityAggregatedRecommendationResource(client, id);
            }
            );
        }
        #endregion

        #region AscLocationResource
        /// <summary>
        /// Gets an object representing an <see cref="AscLocationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AscLocationResource.CreateResourceIdentifier" /> to create an <see cref="AscLocationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AscLocationResource" /> object. </returns>
        public static AscLocationResource GetAscLocationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AscLocationResource.ValidateResourceId(id);
                return new AscLocationResource(client, id);
            }
            );
        }
        #endregion

        #region AscLocationLocationTaskResource
        /// <summary>
        /// Gets an object representing an <see cref="AscLocationLocationTaskResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AscLocationLocationTaskResource.CreateResourceIdentifier" /> to create an <see cref="AscLocationLocationTaskResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AscLocationLocationTaskResource" /> object. </returns>
        public static AscLocationLocationTaskResource GetAscLocationLocationTaskResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AscLocationLocationTaskResource.ValidateResourceId(id);
                return new AscLocationLocationTaskResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGroupLocationTaskResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGroupLocationTaskResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGroupLocationTaskResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGroupLocationTaskResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGroupLocationTaskResource" /> object. </returns>
        public static ResourceGroupLocationTaskResource GetResourceGroupLocationTaskResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGroupLocationTaskResource.ValidateResourceId(id);
                return new ResourceGroupLocationTaskResource(client, id);
            }
            );
        }
        #endregion

        #region AutoProvisioningSettingResource
        /// <summary>
        /// Gets an object representing an <see cref="AutoProvisioningSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AutoProvisioningSettingResource.CreateResourceIdentifier" /> to create an <see cref="AutoProvisioningSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AutoProvisioningSettingResource" /> object. </returns>
        public static AutoProvisioningSettingResource GetAutoProvisioningSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AutoProvisioningSettingResource.ValidateResourceId(id);
                return new AutoProvisioningSettingResource(client, id);
            }
            );
        }
        #endregion

        #region ComplianceResource
        /// <summary>
        /// Gets an object representing a <see cref="ComplianceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ComplianceResource.CreateResourceIdentifier" /> to create a <see cref="ComplianceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ComplianceResource" /> object. </returns>
        public static ComplianceResource GetComplianceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ComplianceResource.ValidateResourceId(id);
                return new ComplianceResource(client, id);
            }
            );
        }
        #endregion

        #region SecurityContactResource
        /// <summary>
        /// Gets an object representing a <see cref="SecurityContactResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityContactResource.CreateResourceIdentifier" /> to create a <see cref="SecurityContactResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityContactResource" /> object. </returns>
        public static SecurityContactResource GetSecurityContactResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityContactResource.ValidateResourceId(id);
                return new SecurityContactResource(client, id);
            }
            );
        }
        #endregion

        #region WorkspaceSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="WorkspaceSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkspaceSettingResource.CreateResourceIdentifier" /> to create a <see cref="WorkspaceSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkspaceSettingResource" /> object. </returns>
        public static WorkspaceSettingResource GetWorkspaceSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WorkspaceSettingResource.ValidateResourceId(id);
                return new WorkspaceSettingResource(client, id);
            }
            );
        }
        #endregion

        #region RegulatoryComplianceStandardResource
        /// <summary>
        /// Gets an object representing a <see cref="RegulatoryComplianceStandardResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RegulatoryComplianceStandardResource.CreateResourceIdentifier" /> to create a <see cref="RegulatoryComplianceStandardResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RegulatoryComplianceStandardResource" /> object. </returns>
        public static RegulatoryComplianceStandardResource GetRegulatoryComplianceStandardResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RegulatoryComplianceStandardResource.ValidateResourceId(id);
                return new RegulatoryComplianceStandardResource(client, id);
            }
            );
        }
        #endregion

        #region RegulatoryComplianceControlResource
        /// <summary>
        /// Gets an object representing a <see cref="RegulatoryComplianceControlResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RegulatoryComplianceControlResource.CreateResourceIdentifier" /> to create a <see cref="RegulatoryComplianceControlResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RegulatoryComplianceControlResource" /> object. </returns>
        public static RegulatoryComplianceControlResource GetRegulatoryComplianceControlResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RegulatoryComplianceControlResource.ValidateResourceId(id);
                return new RegulatoryComplianceControlResource(client, id);
            }
            );
        }
        #endregion

        #region RegulatoryComplianceAssessmentResource
        /// <summary>
        /// Gets an object representing a <see cref="RegulatoryComplianceAssessmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RegulatoryComplianceAssessmentResource.CreateResourceIdentifier" /> to create a <see cref="RegulatoryComplianceAssessmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RegulatoryComplianceAssessmentResource" /> object. </returns>
        public static RegulatoryComplianceAssessmentResource GetRegulatoryComplianceAssessmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RegulatoryComplianceAssessmentResource.ValidateResourceId(id);
                return new RegulatoryComplianceAssessmentResource(client, id);
            }
            );
        }
        #endregion

        #region SecuritySubAssessmentResource
        /// <summary>
        /// Gets an object representing a <see cref="SecuritySubAssessmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecuritySubAssessmentResource.CreateResourceIdentifier" /> to create a <see cref="SecuritySubAssessmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecuritySubAssessmentResource" /> object. </returns>
        public static SecuritySubAssessmentResource GetSecuritySubAssessmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecuritySubAssessmentResource.ValidateResourceId(id);
                return new SecuritySubAssessmentResource(client, id);
            }
            );
        }
        #endregion

        #region AutomationResource
        /// <summary>
        /// Gets an object representing an <see cref="AutomationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AutomationResource.CreateResourceIdentifier" /> to create an <see cref="AutomationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AutomationResource" /> object. </returns>
        public static AutomationResource GetAutomationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AutomationResource.ValidateResourceId(id);
                return new AutomationResource(client, id);
            }
            );
        }
        #endregion

        #region AlertsSuppressionRuleResource
        /// <summary>
        /// Gets an object representing an <see cref="AlertsSuppressionRuleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AlertsSuppressionRuleResource.CreateResourceIdentifier" /> to create an <see cref="AlertsSuppressionRuleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AlertsSuppressionRuleResource" /> object. </returns>
        public static AlertsSuppressionRuleResource GetAlertsSuppressionRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AlertsSuppressionRuleResource.ValidateResourceId(id);
                return new AlertsSuppressionRuleResource(client, id);
            }
            );
        }
        #endregion

        #region ServerVulnerabilityAssessmentResource
        /// <summary>
        /// Gets an object representing a <see cref="ServerVulnerabilityAssessmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerVulnerabilityAssessmentResource.CreateResourceIdentifier" /> to create a <see cref="ServerVulnerabilityAssessmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerVulnerabilityAssessmentResource" /> object. </returns>
        public static ServerVulnerabilityAssessmentResource GetServerVulnerabilityAssessmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerVulnerabilityAssessmentResource.ValidateResourceId(id);
                return new ServerVulnerabilityAssessmentResource(client, id);
            }
            );
        }
        #endregion

        #region TenantAssessmentMetadataResource
        /// <summary>
        /// Gets an object representing a <see cref="TenantAssessmentMetadataResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TenantAssessmentMetadataResource.CreateResourceIdentifier" /> to create a <see cref="TenantAssessmentMetadataResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TenantAssessmentMetadataResource" /> object. </returns>
        public static TenantAssessmentMetadataResource GetTenantAssessmentMetadataResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TenantAssessmentMetadataResource.ValidateResourceId(id);
                return new TenantAssessmentMetadataResource(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionAssessmentMetadataResource
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionAssessmentMetadataResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionAssessmentMetadataResource.CreateResourceIdentifier" /> to create a <see cref="SubscriptionAssessmentMetadataResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionAssessmentMetadataResource" /> object. </returns>
        public static SubscriptionAssessmentMetadataResource GetSubscriptionAssessmentMetadataResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionAssessmentMetadataResource.ValidateResourceId(id);
                return new SubscriptionAssessmentMetadataResource(client, id);
            }
            );
        }
        #endregion

        #region SecurityAssessmentResponseResource
        /// <summary>
        /// Gets an object representing a <see cref="SecurityAssessmentResponseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityAssessmentResponseResource.CreateResourceIdentifier" /> to create a <see cref="SecurityAssessmentResponseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityAssessmentResponseResource" /> object. </returns>
        public static SecurityAssessmentResponseResource GetSecurityAssessmentResponseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityAssessmentResponseResource.ValidateResourceId(id);
                return new SecurityAssessmentResponseResource(client, id);
            }
            );
        }
        #endregion

        #region AdaptiveApplicationControlGroupResource
        /// <summary>
        /// Gets an object representing an <see cref="AdaptiveApplicationControlGroupResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AdaptiveApplicationControlGroupResource.CreateResourceIdentifier" /> to create an <see cref="AdaptiveApplicationControlGroupResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AdaptiveApplicationControlGroupResource" /> object. </returns>
        public static AdaptiveApplicationControlGroupResource GetAdaptiveApplicationControlGroupResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AdaptiveApplicationControlGroupResource.ValidateResourceId(id);
                return new AdaptiveApplicationControlGroupResource(client, id);
            }
            );
        }
        #endregion

        #region AdaptiveNetworkHardeningResource
        /// <summary>
        /// Gets an object representing an <see cref="AdaptiveNetworkHardeningResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AdaptiveNetworkHardeningResource.CreateResourceIdentifier" /> to create an <see cref="AdaptiveNetworkHardeningResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AdaptiveNetworkHardeningResource" /> object. </returns>
        public static AdaptiveNetworkHardeningResource GetAdaptiveNetworkHardeningResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AdaptiveNetworkHardeningResource.ValidateResourceId(id);
                return new AdaptiveNetworkHardeningResource(client, id);
            }
            );
        }
        #endregion

        #region AllowedConnectionsResource
        /// <summary>
        /// Gets an object representing an <see cref="AllowedConnectionsResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AllowedConnectionsResource.CreateResourceIdentifier" /> to create an <see cref="AllowedConnectionsResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AllowedConnectionsResource" /> object. </returns>
        public static AllowedConnectionsResource GetAllowedConnectionsResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AllowedConnectionsResource.ValidateResourceId(id);
                return new AllowedConnectionsResource(client, id);
            }
            );
        }
        #endregion

        #region TopologyResource
        /// <summary>
        /// Gets an object representing a <see cref="TopologyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TopologyResource.CreateResourceIdentifier" /> to create a <see cref="TopologyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="TopologyResource" /> object. </returns>
        public static TopologyResource GetTopologyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                TopologyResource.ValidateResourceId(id);
                return new TopologyResource(client, id);
            }
            );
        }
        #endregion

        #region JitNetworkAccessPolicyResource
        /// <summary>
        /// Gets an object representing a <see cref="JitNetworkAccessPolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JitNetworkAccessPolicyResource.CreateResourceIdentifier" /> to create a <see cref="JitNetworkAccessPolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JitNetworkAccessPolicyResource" /> object. </returns>
        public static JitNetworkAccessPolicyResource GetJitNetworkAccessPolicyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JitNetworkAccessPolicyResource.ValidateResourceId(id);
                return new JitNetworkAccessPolicyResource(client, id);
            }
            );
        }
        #endregion

        #region DiscoveredSecuritySolutionResource
        /// <summary>
        /// Gets an object representing a <see cref="DiscoveredSecuritySolutionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DiscoveredSecuritySolutionResource.CreateResourceIdentifier" /> to create a <see cref="DiscoveredSecuritySolutionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DiscoveredSecuritySolutionResource" /> object. </returns>
        public static DiscoveredSecuritySolutionResource GetDiscoveredSecuritySolutionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DiscoveredSecuritySolutionResource.ValidateResourceId(id);
                return new DiscoveredSecuritySolutionResource(client, id);
            }
            );
        }
        #endregion

        #region ExternalSecuritySolutionResource
        /// <summary>
        /// Gets an object representing an <see cref="ExternalSecuritySolutionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExternalSecuritySolutionResource.CreateResourceIdentifier" /> to create an <see cref="ExternalSecuritySolutionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExternalSecuritySolutionResource" /> object. </returns>
        public static ExternalSecuritySolutionResource GetExternalSecuritySolutionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExternalSecuritySolutionResource.ValidateResourceId(id);
                return new ExternalSecuritySolutionResource(client, id);
            }
            );
        }
        #endregion

        #region SecureScoreItemResource
        /// <summary>
        /// Gets an object representing a <see cref="SecureScoreItemResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecureScoreItemResource.CreateResourceIdentifier" /> to create a <see cref="SecureScoreItemResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecureScoreItemResource" /> object. </returns>
        public static SecureScoreItemResource GetSecureScoreItemResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecureScoreItemResource.ValidateResourceId(id);
                return new SecureScoreItemResource(client, id);
            }
            );
        }
        #endregion

        #region SecuritySolutionResource
        /// <summary>
        /// Gets an object representing a <see cref="SecuritySolutionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecuritySolutionResource.CreateResourceIdentifier" /> to create a <see cref="SecuritySolutionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecuritySolutionResource" /> object. </returns>
        public static SecuritySolutionResource GetSecuritySolutionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecuritySolutionResource.ValidateResourceId(id);
                return new SecuritySolutionResource(client, id);
            }
            );
        }
        #endregion

        #region ConnectorSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="ConnectorSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConnectorSettingResource.CreateResourceIdentifier" /> to create a <see cref="ConnectorSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConnectorSettingResource" /> object. </returns>
        public static ConnectorSettingResource GetConnectorSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConnectorSettingResource.ValidateResourceId(id);
                return new ConnectorSettingResource(client, id);
            }
            );
        }
        #endregion

        #region ScanResource
        /// <summary>
        /// Gets an object representing a <see cref="ScanResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScanResource.CreateResourceIdentifier" /> to create a <see cref="ScanResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScanResource" /> object. </returns>
        public static ScanResource GetScanResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScanResource.ValidateResourceId(id);
                return new ScanResource(client, id);
            }
            );
        }
        #endregion

        #region ScanResultResource
        /// <summary>
        /// Gets an object representing a <see cref="ScanResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ScanResultResource.CreateResourceIdentifier" /> to create a <see cref="ScanResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScanResultResource" /> object. </returns>
        public static ScanResultResource GetScanResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScanResultResource.ValidateResourceId(id);
                return new ScanResultResource(client, id);
            }
            );
        }
        #endregion

        #region RuleResultResource
        /// <summary>
        /// Gets an object representing a <see cref="RuleResultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RuleResultResource.CreateResourceIdentifier" /> to create a <see cref="RuleResultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RuleResultResource" /> object. </returns>
        public static RuleResultResource GetRuleResultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RuleResultResource.ValidateResourceId(id);
                return new RuleResultResource(client, id);
            }
            );
        }
        #endregion

        #region AscLocationLocationAlertResource
        /// <summary>
        /// Gets an object representing an <see cref="AscLocationLocationAlertResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AscLocationLocationAlertResource.CreateResourceIdentifier" /> to create an <see cref="AscLocationLocationAlertResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AscLocationLocationAlertResource" /> object. </returns>
        public static AscLocationLocationAlertResource GetAscLocationLocationAlertResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AscLocationLocationAlertResource.ValidateResourceId(id);
                return new AscLocationLocationAlertResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGroupLocationAlertResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGroupLocationAlertResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGroupLocationAlertResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGroupLocationAlertResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGroupLocationAlertResource" /> object. </returns>
        public static ResourceGroupLocationAlertResource GetResourceGroupLocationAlertResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGroupLocationAlertResource.ValidateResourceId(id);
                return new ResourceGroupLocationAlertResource(client, id);
            }
            );
        }
        #endregion

        #region SettingResource
        /// <summary>
        /// Gets an object representing a <see cref="SettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SettingResource.CreateResourceIdentifier" /> to create a <see cref="SettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SettingResource" /> object. </returns>
        public static SettingResource GetSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SettingResource.ValidateResourceId(id);
                return new SettingResource(client, id);
            }
            );
        }
        #endregion

        #region IngestionSettingResource
        /// <summary>
        /// Gets an object representing an <see cref="IngestionSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IngestionSettingResource.CreateResourceIdentifier" /> to create an <see cref="IngestionSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IngestionSettingResource" /> object. </returns>
        public static IngestionSettingResource GetIngestionSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IngestionSettingResource.ValidateResourceId(id);
                return new IngestionSettingResource(client, id);
            }
            );
        }
        #endregion

        #region SoftwareResource
        /// <summary>
        /// Gets an object representing a <see cref="SoftwareResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SoftwareResource.CreateResourceIdentifier" /> to create a <see cref="SoftwareResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SoftwareResource" /> object. </returns>
        public static SoftwareResource GetSoftwareResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SoftwareResource.ValidateResourceId(id);
                return new SoftwareResource(client, id);
            }
            );
        }
        #endregion

        #region SecurityConnectorResource
        /// <summary>
        /// Gets an object representing a <see cref="SecurityConnectorResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityConnectorResource.CreateResourceIdentifier" /> to create a <see cref="SecurityConnectorResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityConnectorResource" /> object. </returns>
        public static SecurityConnectorResource GetSecurityConnectorResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityConnectorResource.ValidateResourceId(id);
                return new SecurityConnectorResource(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionGovernanceRuleResource
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionGovernanceRuleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionGovernanceRuleResource.CreateResourceIdentifier" /> to create a <see cref="SubscriptionGovernanceRuleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionGovernanceRuleResource" /> object. </returns>
        public static SubscriptionGovernanceRuleResource GetSubscriptionGovernanceRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionGovernanceRuleResource.ValidateResourceId(id);
                return new SubscriptionGovernanceRuleResource(client, id);
            }
            );
        }
        #endregion

        #region SecurityConnectorGovernanceRuleResource
        /// <summary>
        /// Gets an object representing a <see cref="SecurityConnectorGovernanceRuleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityConnectorGovernanceRuleResource.CreateResourceIdentifier" /> to create a <see cref="SecurityConnectorGovernanceRuleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityConnectorGovernanceRuleResource" /> object. </returns>
        public static SecurityConnectorGovernanceRuleResource GetSecurityConnectorGovernanceRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityConnectorGovernanceRuleResource.ValidateResourceId(id);
                return new SecurityConnectorGovernanceRuleResource(client, id);
            }
            );
        }
        #endregion

        #region GovernanceAssignmentResource
        /// <summary>
        /// Gets an object representing a <see cref="GovernanceAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GovernanceAssignmentResource.CreateResourceIdentifier" /> to create a <see cref="GovernanceAssignmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GovernanceAssignmentResource" /> object. </returns>
        public static GovernanceAssignmentResource GetGovernanceAssignmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GovernanceAssignmentResource.ValidateResourceId(id);
                return new GovernanceAssignmentResource(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionApplicationResource
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionApplicationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionApplicationResource.CreateResourceIdentifier" /> to create a <see cref="SubscriptionApplicationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionApplicationResource" /> object. </returns>
        public static SubscriptionApplicationResource GetSubscriptionApplicationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionApplicationResource.ValidateResourceId(id);
                return new SubscriptionApplicationResource(client, id);
            }
            );
        }
        #endregion

        #region SecurityConnectorApplicationResource
        /// <summary>
        /// Gets an object representing a <see cref="SecurityConnectorApplicationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecurityConnectorApplicationResource.CreateResourceIdentifier" /> to create a <see cref="SecurityConnectorApplicationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecurityConnectorApplicationResource" /> object. </returns>
        public static SecurityConnectorApplicationResource GetSecurityConnectorApplicationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SecurityConnectorApplicationResource.ValidateResourceId(id);
                return new SecurityConnectorApplicationResource(client, id);
            }
            );
        }
        #endregion
    }
}
