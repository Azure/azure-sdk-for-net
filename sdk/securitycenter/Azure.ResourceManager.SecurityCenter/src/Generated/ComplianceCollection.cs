// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ComplianceResource" /> and their operations.
    /// Each <see cref="ComplianceResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="ComplianceCollection" /> instance call the GetCompliances method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class ComplianceCollection : ArmCollection, IEnumerable<ComplianceResource>, IAsyncEnumerable<ComplianceResource>
    {
        private readonly ClientDiagnostics _complianceClientDiagnostics;
        private readonly CompliancesRestOperations _complianceRestClient;

        /// <summary> Initializes a new instance of the <see cref="ComplianceCollection"/> class for mocking. </summary>
        protected ComplianceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ComplianceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ComplianceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _complianceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ComplianceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ComplianceResource.ResourceType, out string complianceApiVersion);
            _complianceRestClient = new CompliancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, complianceApiVersion);
        }

        /// <summary>
        /// Details of a specific Compliance.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        public virtual async Task<Response<ComplianceResource>> GetAsync(string complianceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(complianceName, nameof(complianceName));

            using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.Get");
            scope.Start();
            try
            {
                var response = await _complianceRestClient.GetAsync(Id, complianceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComplianceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Details of a specific Compliance.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        public virtual Response<ComplianceResource> Get(string complianceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(complianceName, nameof(complianceName));

            using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.Get");
            scope.Start();
            try
            {
                var response = _complianceRestClient.Get(Id, complianceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComplianceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The Compliance scores of the specific management group.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances
        /// Operation Id: Compliances_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ComplianceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ComplianceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ComplianceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _complianceRestClient.ListAsync(Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ComplianceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ComplianceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _complianceRestClient.ListNextPageAsync(nextLink, Id, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ComplianceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// The Compliance scores of the specific management group.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances
        /// Operation Id: Compliances_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ComplianceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ComplianceResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ComplianceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _complianceRestClient.List(Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ComplianceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ComplianceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _complianceRestClient.ListNextPage(nextLink, Id, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ComplianceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string complianceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(complianceName, nameof(complianceName));

            using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _complianceRestClient.GetAsync(Id, complianceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{scope}/providers/Microsoft.Security/compliances/{complianceName}
        /// Operation Id: Compliances_Get
        /// </summary>
        /// <param name="complianceName"> name of the Compliance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="complianceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="complianceName"/> is null. </exception>
        public virtual Response<bool> Exists(string complianceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(complianceName, nameof(complianceName));

            using var scope = _complianceClientDiagnostics.CreateScope("ComplianceCollection.Exists");
            scope.Start();
            try
            {
                var response = _complianceRestClient.Get(Id, complianceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ComplianceResource> IEnumerable<ComplianceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ComplianceResource> IAsyncEnumerable<ComplianceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
