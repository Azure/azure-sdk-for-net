// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ScanResource" /> and their operations.
    /// Each <see cref="ScanResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="ScanCollection" /> instance call the GetScans method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class ScanCollection : ArmCollection
    {
        private readonly ClientDiagnostics _scanSqlVulnerabilityAssessmentScansClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentScansRestOperations _scanSqlVulnerabilityAssessmentScansRestClient;

        /// <summary> Initializes a new instance of the <see cref="ScanCollection"/> class for mocking. </summary>
        protected ScanCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ScanCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ScanCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _scanSqlVulnerabilityAssessmentScansClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ScanResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ScanResource.ResourceType, out string scanSqlVulnerabilityAssessmentScansApiVersion);
            _scanSqlVulnerabilityAssessmentScansRestClient = new SqlVulnerabilityAssessmentScansRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, scanSqlVulnerabilityAssessmentScansApiVersion);
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual async Task<Response<ScanResource>> GetAsync(string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.Get");
            scope.Start();
            try
            {
                var response = await _scanSqlVulnerabilityAssessmentScansRestClient.GetAsync(Id, scanId, workspaceId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the scan details of a single scan record.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual Response<ScanResource> Get(string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.Get");
            scope.Start();
            try
            {
                var response = _scanSqlVulnerabilityAssessmentScansRestClient.Get(Id, scanId, workspaceId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ScanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of scan records.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans
        /// Operation Id: SqlVulnerabilityAssessmentScans_List
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> An async collection of <see cref="ScanResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScanResource> GetAllAsync(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            async Task<Page<ScanResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _scanSqlVulnerabilityAssessmentScansRestClient.ListAsync(Id, workspaceId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScanResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of scan records.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans
        /// Operation Id: SqlVulnerabilityAssessmentScans_List
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> A collection of <see cref="ScanResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScanResource> GetAll(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            Page<ScanResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _scanSqlVulnerabilityAssessmentScansRestClient.List(Id, workspaceId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScanResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.Exists");
            scope.Start();
            try
            {
                var response = await _scanSqlVulnerabilityAssessmentScansRestClient.GetAsync(Id, scanId, workspaceId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}
        /// Operation Id: SqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The scan Id. Type &apos;latest&apos; to get the scan record for the latest scan. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual Response<bool> Exists(string scanId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _scanSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ScanCollection.Exists");
            scope.Start();
            try
            {
                var response = _scanSqlVulnerabilityAssessmentScansRestClient.Get(Id, scanId, workspaceId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
