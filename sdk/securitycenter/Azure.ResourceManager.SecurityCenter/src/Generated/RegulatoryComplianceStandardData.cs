// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing the RegulatoryComplianceStandard data model.
    /// Regulatory compliance standard details and state
    /// </summary>
    public partial class RegulatoryComplianceStandardData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="RegulatoryComplianceStandardData"/>. </summary>
        public RegulatoryComplianceStandardData()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RegulatoryComplianceStandardData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> Aggregative state based on the standard's supported controls states. </param>
        /// <param name="passedControls"> The number of supported regulatory compliance controls of the given standard with a passed state. </param>
        /// <param name="failedControls"> The number of supported regulatory compliance controls of the given standard with a failed state. </param>
        /// <param name="skippedControls"> The number of supported regulatory compliance controls of the given standard with a skipped state. </param>
        /// <param name="unsupportedControls"> The number of regulatory compliance controls of the given standard which are unsupported by automated assessments. </param>
        internal RegulatoryComplianceStandardData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, RegulatoryComplianceState? state, int? passedControls, int? failedControls, int? skippedControls, int? unsupportedControls) : base(id, name, resourceType, systemData)
        {
            State = state;
            PassedControls = passedControls;
            FailedControls = failedControls;
            SkippedControls = skippedControls;
            UnsupportedControls = unsupportedControls;
        }

        /// <summary> Aggregative state based on the standard's supported controls states. </summary>
        public RegulatoryComplianceState? State { get; set; }
        /// <summary> The number of supported regulatory compliance controls of the given standard with a passed state. </summary>
        public int? PassedControls { get; }
        /// <summary> The number of supported regulatory compliance controls of the given standard with a failed state. </summary>
        public int? FailedControls { get; }
        /// <summary> The number of supported regulatory compliance controls of the given standard with a skipped state. </summary>
        public int? SkippedControls { get; }
        /// <summary> The number of regulatory compliance controls of the given standard which are unsupported by automated assessments. </summary>
        public int? UnsupportedControls { get; }
    }
}
