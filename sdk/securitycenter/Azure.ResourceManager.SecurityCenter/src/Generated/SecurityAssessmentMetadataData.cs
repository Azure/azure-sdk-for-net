// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing the SecurityAssessmentMetadata data model.
    /// Security assessment metadata response
    /// </summary>
    public partial class SecurityAssessmentMetadataData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="SecurityAssessmentMetadataData"/>. </summary>
        public SecurityAssessmentMetadataData()
        {
            Categories = new ChangeTrackingList<SecurityAssessmentResourceCategory>();
            Threats = new ChangeTrackingList<SecurityThreat>();
            Tactics = new ChangeTrackingList<SecurityAssessmentTactic>();
            Techniques = new ChangeTrackingList<SecurityAssessmentTechnique>();
        }

        /// <summary> Initializes a new instance of <see cref="SecurityAssessmentMetadataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> User friendly display name of the assessment. </param>
        /// <param name="policyDefinitionId"> Azure resource ID of the policy definition that turns this assessment calculation on. </param>
        /// <param name="description"> Human readable description of the assessment. </param>
        /// <param name="remediationDescription"> Human readable description of what you should do to mitigate this security issue. </param>
        /// <param name="categories"></param>
        /// <param name="severity"> The severity level of the assessment. </param>
        /// <param name="userImpact"> The user impact of the assessment. </param>
        /// <param name="implementationEffort"> The implementation effort required to remediate this assessment. </param>
        /// <param name="threats"></param>
        /// <param name="isPreview"> True if this assessment is in preview release status. </param>
        /// <param name="assessmentType"> BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition. </param>
        /// <param name="partnerData"> Describes the partner that created the assessment. </param>
        /// <param name="publishDates"></param>
        /// <param name="plannedDeprecationDate"></param>
        /// <param name="tactics"></param>
        /// <param name="techniques"></param>
        internal SecurityAssessmentMetadataData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string displayName, ResourceIdentifier policyDefinitionId, string description, string remediationDescription, IList<SecurityAssessmentResourceCategory> categories, SecurityAssessmentSeverity? severity, SecurityAssessmentUserImpact? userImpact, ImplementationEffort? implementationEffort, IList<SecurityThreat> threats, bool? isPreview, SecurityAssessmentType? assessmentType, SecurityAssessmentMetadataPartner partnerData, SecurityAssessmentPublishDates publishDates, string plannedDeprecationDate, IList<SecurityAssessmentTactic> tactics, IList<SecurityAssessmentTechnique> techniques) : base(id, name, resourceType, systemData)
        {
            DisplayName = displayName;
            PolicyDefinitionId = policyDefinitionId;
            Description = description;
            RemediationDescription = remediationDescription;
            Categories = categories;
            Severity = severity;
            UserImpact = userImpact;
            ImplementationEffort = implementationEffort;
            Threats = threats;
            IsPreview = isPreview;
            AssessmentType = assessmentType;
            PartnerData = partnerData;
            PublishDates = publishDates;
            PlannedDeprecationDate = plannedDeprecationDate;
            Tactics = tactics;
            Techniques = techniques;
        }

        /// <summary> User friendly display name of the assessment. </summary>
        public string DisplayName { get; set; }
        /// <summary> Azure resource ID of the policy definition that turns this assessment calculation on. </summary>
        public ResourceIdentifier PolicyDefinitionId { get; }
        /// <summary> Human readable description of the assessment. </summary>
        public string Description { get; set; }
        /// <summary> Human readable description of what you should do to mitigate this security issue. </summary>
        public string RemediationDescription { get; set; }
        /// <summary> Gets the categories. </summary>
        public IList<SecurityAssessmentResourceCategory> Categories { get; }
        /// <summary> The severity level of the assessment. </summary>
        public SecurityAssessmentSeverity? Severity { get; set; }
        /// <summary> The user impact of the assessment. </summary>
        public SecurityAssessmentUserImpact? UserImpact { get; set; }
        /// <summary> The implementation effort required to remediate this assessment. </summary>
        public ImplementationEffort? ImplementationEffort { get; set; }
        /// <summary> Gets the threats. </summary>
        public IList<SecurityThreat> Threats { get; }
        /// <summary> True if this assessment is in preview release status. </summary>
        public bool? IsPreview { get; set; }
        /// <summary> BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment based on custom Azure Policy definition. </summary>
        public SecurityAssessmentType? AssessmentType { get; set; }
        /// <summary> Describes the partner that created the assessment. </summary>
        public SecurityAssessmentMetadataPartner PartnerData { get; set; }
        /// <summary> Gets or sets the publish dates. </summary>
        public SecurityAssessmentPublishDates PublishDates { get; set; }
        /// <summary> Gets or sets the planned deprecation date. </summary>
        public string PlannedDeprecationDate { get; set; }
        /// <summary> Gets the tactics. </summary>
        public IList<SecurityAssessmentTactic> Tactics { get; }
        /// <summary> Gets the techniques. </summary>
        public IList<SecurityAssessmentTechnique> Techniques { get; }
    }
}
