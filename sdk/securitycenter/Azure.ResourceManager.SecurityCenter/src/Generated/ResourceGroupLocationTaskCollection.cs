// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ResourceGroupLocationTaskResource" /> and their operations.
    /// Each <see cref="ResourceGroupLocationTaskResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="ResourceGroupLocationTaskCollection" /> instance call the GetResourceGroupLocationTasks method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class ResourceGroupLocationTaskCollection : ArmCollection, IEnumerable<ResourceGroupLocationTaskResource>, IAsyncEnumerable<ResourceGroupLocationTaskResource>
    {
        private readonly ClientDiagnostics _resourceGroupLocationTaskTasksClientDiagnostics;
        private readonly TasksRestOperations _resourceGroupLocationTaskTasksRestClient;
        private readonly string _ascLocation;

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupLocationTaskCollection"/> class for mocking. </summary>
        protected ResourceGroupLocationTaskCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ResourceGroupLocationTaskCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> is an empty string, and was expected to be non-empty. </exception>
        internal ResourceGroupLocationTaskCollection(ArmClient client, ResourceIdentifier id, string ascLocation) : base(client, id)
        {
            _ascLocation = ascLocation;
            _resourceGroupLocationTaskTasksClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ResourceGroupLocationTaskResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceGroupLocationTaskResource.ResourceType, out string resourceGroupLocationTaskTasksApiVersion);
            _resourceGroupLocationTaskTasksRestClient = new TasksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, resourceGroupLocationTaskTasksApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        public virtual async Task<Response<ResourceGroupLocationTaskResource>> GetAsync(string taskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(taskName, nameof(taskName));

            using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.Get");
            scope.Start();
            try
            {
                var response = await _resourceGroupLocationTaskTasksRestClient.GetResourceGroupLevelTaskAsync(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, taskName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResourceGroupLocationTaskResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        public virtual Response<ResourceGroupLocationTaskResource> Get(string taskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(taskName, nameof(taskName));

            using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.Get");
            scope.Start();
            try
            {
                var response = _resourceGroupLocationTaskTasksRestClient.GetResourceGroupLevelTask(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, taskName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ResourceGroupLocationTaskResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks
        /// Operation Id: Tasks_ListByResourceGroup
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResourceGroupLocationTaskResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResourceGroupLocationTaskResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ResourceGroupLocationTaskResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _resourceGroupLocationTaskTasksRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGroupLocationTaskResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ResourceGroupLocationTaskResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _resourceGroupLocationTaskTasksRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGroupLocationTaskResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Recommended tasks that will help improve the security of the subscription proactively
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks
        /// Operation Id: Tasks_ListByResourceGroup
        /// </summary>
        /// <param name="filter"> OData filter. Optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceGroupLocationTaskResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResourceGroupLocationTaskResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<ResourceGroupLocationTaskResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _resourceGroupLocationTaskTasksRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGroupLocationTaskResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ResourceGroupLocationTaskResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _resourceGroupLocationTaskTasksRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGroupLocationTaskResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string taskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(taskName, nameof(taskName));

            using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.Exists");
            scope.Start();
            try
            {
                var response = await _resourceGroupLocationTaskTasksRestClient.GetResourceGroupLevelTaskAsync(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, taskName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}
        /// Operation Id: Tasks_GetResourceGroupLevelTask
        /// </summary>
        /// <param name="taskName"> Name of the task object, will be a GUID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="taskName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="taskName"/> is null. </exception>
        public virtual Response<bool> Exists(string taskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(taskName, nameof(taskName));

            using var scope = _resourceGroupLocationTaskTasksClientDiagnostics.CreateScope("ResourceGroupLocationTaskCollection.Exists");
            scope.Start();
            try
            {
                var response = _resourceGroupLocationTaskTasksRestClient.GetResourceGroupLevelTask(Id.SubscriptionId, Id.ResourceGroupName, _ascLocation, taskName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ResourceGroupLocationTaskResource> IEnumerable<ResourceGroupLocationTaskResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ResourceGroupLocationTaskResource> IAsyncEnumerable<ResourceGroupLocationTaskResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
