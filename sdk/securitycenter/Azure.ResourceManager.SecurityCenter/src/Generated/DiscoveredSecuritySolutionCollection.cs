// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="DiscoveredSecuritySolutionResource" /> and their operations.
    /// Each <see cref="DiscoveredSecuritySolutionResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="DiscoveredSecuritySolutionCollection" /> instance call the GetDiscoveredSecuritySolutions method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class DiscoveredSecuritySolutionCollection : ArmCollection
    {
        private readonly ClientDiagnostics _discoveredSecuritySolutionClientDiagnostics;
        private readonly DiscoveredSecuritySolutionsRestOperations _discoveredSecuritySolutionRestClient;

        /// <summary> Initializes a new instance of the <see cref="DiscoveredSecuritySolutionCollection"/> class for mocking. </summary>
        protected DiscoveredSecuritySolutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DiscoveredSecuritySolutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DiscoveredSecuritySolutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _discoveredSecuritySolutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", DiscoveredSecuritySolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DiscoveredSecuritySolutionResource.ResourceType, out string discoveredSecuritySolutionApiVersion);
            _discoveredSecuritySolutionRestClient = new DiscoveredSecuritySolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, discoveredSecuritySolutionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a specific discovered Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        public virtual async Task<Response<DiscoveredSecuritySolutionResource>> GetAsync(string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));
            Argument.AssertNotNullOrEmpty(discoveredSecuritySolutionName, nameof(discoveredSecuritySolutionName));

            using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("DiscoveredSecuritySolutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _discoveredSecuritySolutionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, ascLocation, discoveredSecuritySolutionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DiscoveredSecuritySolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a specific discovered Security Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        public virtual Response<DiscoveredSecuritySolutionResource> Get(string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));
            Argument.AssertNotNullOrEmpty(discoveredSecuritySolutionName, nameof(discoveredSecuritySolutionName));

            using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("DiscoveredSecuritySolutionCollection.Get");
            scope.Start();
            try
            {
                var response = _discoveredSecuritySolutionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, ascLocation, discoveredSecuritySolutionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DiscoveredSecuritySolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));
            Argument.AssertNotNullOrEmpty(discoveredSecuritySolutionName, nameof(discoveredSecuritySolutionName));

            using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("DiscoveredSecuritySolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _discoveredSecuritySolutionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, ascLocation, discoveredSecuritySolutionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/discoveredSecuritySolutions/{discoveredSecuritySolutionName}
        /// Operation Id: DiscoveredSecuritySolutions_Get
        /// </summary>
        /// <param name="ascLocation"> The location where ASC stores the data of the subscription. can be retrieved from Get locations. </param>
        /// <param name="discoveredSecuritySolutionName"> Name of a discovered security solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ascLocation"/> or <paramref name="discoveredSecuritySolutionName"/> is null. </exception>
        public virtual Response<bool> Exists(string ascLocation, string discoveredSecuritySolutionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ascLocation, nameof(ascLocation));
            Argument.AssertNotNullOrEmpty(discoveredSecuritySolutionName, nameof(discoveredSecuritySolutionName));

            using var scope = _discoveredSecuritySolutionClientDiagnostics.CreateScope("DiscoveredSecuritySolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _discoveredSecuritySolutionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, ascLocation, discoveredSecuritySolutionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
