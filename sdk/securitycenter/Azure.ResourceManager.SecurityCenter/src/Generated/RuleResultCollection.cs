// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.SecurityCenter.Models;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="RuleResultResource" /> and their operations.
    /// Each <see cref="RuleResultResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="RuleResultCollection" /> instance call the GetRuleResults method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class RuleResultCollection : ArmCollection
    {
        private readonly ClientDiagnostics _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentBaselineRulesRestOperations _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient;

        /// <summary> Initializes a new instance of the <see cref="RuleResultCollection"/> class for mocking. </summary>
        protected RuleResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="RuleResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal RuleResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", RuleResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(RuleResultResource.ResourceType, out string ruleResultSqlVulnerabilityAssessmentBaselineRulesApiVersion);
            _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient = new SqlVulnerabilityAssessmentBaselineRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, ruleResultSqlVulnerabilityAssessmentBaselineRulesApiVersion);
        }

        /// <summary>
        /// Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The baseline results for this rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/>, <paramref name="workspaceId"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<RuleResultResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string ruleId, string workspaceId, RuleResultCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.CreateOrUpdateAsync(Id, ruleId, workspaceId, content, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation<RuleResultResource>(Response.FromValue(new RuleResultResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates a Baseline for a rule in a database. Will overwrite any previously existing results.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The baseline results for this rule. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/>, <paramref name="workspaceId"/> or <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<RuleResultResource> CreateOrUpdate(WaitUntil waitUntil, string ruleId, string workspaceId, RuleResultCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.CreateOrUpdate(Id, ruleId, workspaceId, content, cancellationToken);
                var operation = new SecurityCenterArmOperation<RuleResultResource>(Response.FromValue(new RuleResultResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the results for a given rule in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual async Task<Response<RuleResultResource>> GetAsync(string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.GetAsync(Id, ruleId, workspaceId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RuleResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the results for a given rule in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual Response<RuleResultResource> Get(string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.Get");
            scope.Start();
            try
            {
                var response = _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.Get(Id, ruleId, workspaceId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new RuleResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the results for all rules in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_List
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> An async collection of <see cref="RuleResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RuleResultResource> GetAllAsync(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            async Task<Page<RuleResultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.ListAsync(Id, workspaceId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RuleResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the results for all rules in the Baseline.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_List
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> A collection of <see cref="RuleResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RuleResultResource> GetAll(string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            Page<RuleResultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.List(Id, workspaceId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RuleResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Add
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The baseline rules. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> An async collection of <see cref="RuleResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RuleResultResource> GetAllAsync(string workspaceId, RulesResultsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            async Task<Page<RuleResultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.AddAsync(Id, workspaceId, content, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new RuleResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Add a list of baseline rules. Will overwrite any previously existing results (for all rules).
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Add
        /// </summary>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="content"> The baseline rules. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceId"/> is null. </exception>
        /// <returns> A collection of <see cref="RuleResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RuleResultResource> GetAll(string workspaceId, RulesResultsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            Page<RuleResultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.Add(Id, workspaceId, content, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new RuleResultResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.GetAsync(Id, ruleId, workspaceId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentBaselineRules_Get
        /// </summary>
        /// <param name="ruleId"> The rule Id. </param>
        /// <param name="workspaceId"> The workspace Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="workspaceId"/> is null. </exception>
        public virtual Response<bool> Exists(string ruleId, string workspaceId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(workspaceId, nameof(workspaceId));

            using var scope = _ruleResultSqlVulnerabilityAssessmentBaselineRulesClientDiagnostics.CreateScope("RuleResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _ruleResultSqlVulnerabilityAssessmentBaselineRulesRestClient.Get(Id, ruleId, workspaceId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
